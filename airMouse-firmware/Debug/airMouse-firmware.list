
airMouse-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a1c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08008ad8  08008ad8  00009ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c48  08008c48  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008c48  08008c48  00009c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c50  08008c50  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c50  08008c50  00009c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c54  08008c54  00009c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008c58  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000070  08008cc8  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08008cc8  0000a3d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d70  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd9  00000000  00000000  0001be08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0001eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a42  00000000  00000000  0001f830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019787  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b8f  00000000  00000000  000399f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b54e  00000000  00000000  0004c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  000e7b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000eafa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008ac0 	.word	0x08008ac0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08008ac0 	.word	0x08008ac0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0010      	movs	r0, r2
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	0019      	movs	r1, r3
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f001 f855 	bl	80014c0 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 ff95 	bl	8001350 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 f847 	bl	80014c0 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f83d 	bl	80014c0 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffbf 	bl	80013d8 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffb5 	bl	80013d8 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_uldivmod>:
 800047c:	2b00      	cmp	r3, #0
 800047e:	d111      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000480:	2a00      	cmp	r2, #0
 8000482:	d10f      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000484:	2900      	cmp	r1, #0
 8000486:	d100      	bne.n	800048a <__aeabi_uldivmod+0xe>
 8000488:	2800      	cmp	r0, #0
 800048a:	d002      	beq.n	8000492 <__aeabi_uldivmod+0x16>
 800048c:	2100      	movs	r1, #0
 800048e:	43c9      	mvns	r1, r1
 8000490:	0008      	movs	r0, r1
 8000492:	b407      	push	{r0, r1, r2}
 8000494:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <__aeabi_uldivmod+0x24>)
 8000496:	a102      	add	r1, pc, #8	@ (adr r1, 80004a0 <__aeabi_uldivmod+0x24>)
 8000498:	1840      	adds	r0, r0, r1
 800049a:	9002      	str	r0, [sp, #8]
 800049c:	bd03      	pop	{r0, r1, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	ffffff5d 	.word	0xffffff5d
 80004a4:	b403      	push	{r0, r1}
 80004a6:	4668      	mov	r0, sp
 80004a8:	b501      	push	{r0, lr}
 80004aa:	9802      	ldr	r0, [sp, #8]
 80004ac:	f000 f806 	bl	80004bc <__udivmoddi4>
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	469e      	mov	lr, r3
 80004b4:	b002      	add	sp, #8
 80004b6:	bc0c      	pop	{r2, r3}
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__udivmoddi4>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	4657      	mov	r7, sl
 80004c0:	464e      	mov	r6, r9
 80004c2:	4645      	mov	r5, r8
 80004c4:	46de      	mov	lr, fp
 80004c6:	b5e0      	push	{r5, r6, r7, lr}
 80004c8:	0004      	movs	r4, r0
 80004ca:	000d      	movs	r5, r1
 80004cc:	4692      	mov	sl, r2
 80004ce:	4699      	mov	r9, r3
 80004d0:	b083      	sub	sp, #12
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d830      	bhi.n	8000538 <__udivmoddi4+0x7c>
 80004d6:	d02d      	beq.n	8000534 <__udivmoddi4+0x78>
 80004d8:	4649      	mov	r1, r9
 80004da:	4650      	mov	r0, sl
 80004dc:	f001 ff70 	bl	80023c0 <__clzdi2>
 80004e0:	0029      	movs	r1, r5
 80004e2:	0006      	movs	r6, r0
 80004e4:	0020      	movs	r0, r4
 80004e6:	f001 ff6b 	bl	80023c0 <__clzdi2>
 80004ea:	1a33      	subs	r3, r6, r0
 80004ec:	4698      	mov	r8, r3
 80004ee:	3b20      	subs	r3, #32
 80004f0:	d434      	bmi.n	800055c <__udivmoddi4+0xa0>
 80004f2:	469b      	mov	fp, r3
 80004f4:	4653      	mov	r3, sl
 80004f6:	465a      	mov	r2, fp
 80004f8:	4093      	lsls	r3, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	001f      	movs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d83b      	bhi.n	8000580 <__udivmoddi4+0xc4>
 8000508:	42af      	cmp	r7, r5
 800050a:	d100      	bne.n	800050e <__udivmoddi4+0x52>
 800050c:	e079      	b.n	8000602 <__udivmoddi4+0x146>
 800050e:	465b      	mov	r3, fp
 8000510:	1ba4      	subs	r4, r4, r6
 8000512:	41bd      	sbcs	r5, r7
 8000514:	2b00      	cmp	r3, #0
 8000516:	da00      	bge.n	800051a <__udivmoddi4+0x5e>
 8000518:	e076      	b.n	8000608 <__udivmoddi4+0x14c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	465a      	mov	r2, fp
 8000526:	4093      	lsls	r3, r2
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	4642      	mov	r2, r8
 800052e:	4093      	lsls	r3, r2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	e029      	b.n	8000588 <__udivmoddi4+0xcc>
 8000534:	4282      	cmp	r2, r0
 8000536:	d9cf      	bls.n	80004d8 <__udivmoddi4+0x1c>
 8000538:	2200      	movs	r2, #0
 800053a:	2300      	movs	r3, #0
 800053c:	9200      	str	r2, [sp, #0]
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <__udivmoddi4+0x8e>
 8000546:	601c      	str	r4, [r3, #0]
 8000548:	605d      	str	r5, [r3, #4]
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	b003      	add	sp, #12
 8000550:	bcf0      	pop	{r4, r5, r6, r7}
 8000552:	46bb      	mov	fp, r7
 8000554:	46b2      	mov	sl, r6
 8000556:	46a9      	mov	r9, r5
 8000558:	46a0      	mov	r8, r4
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055c:	4642      	mov	r2, r8
 800055e:	469b      	mov	fp, r3
 8000560:	2320      	movs	r3, #32
 8000562:	1a9b      	subs	r3, r3, r2
 8000564:	4652      	mov	r2, sl
 8000566:	40da      	lsrs	r2, r3
 8000568:	4641      	mov	r1, r8
 800056a:	0013      	movs	r3, r2
 800056c:	464a      	mov	r2, r9
 800056e:	408a      	lsls	r2, r1
 8000570:	0017      	movs	r7, r2
 8000572:	4642      	mov	r2, r8
 8000574:	431f      	orrs	r7, r3
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	001e      	movs	r6, r3
 800057c:	42af      	cmp	r7, r5
 800057e:	d9c3      	bls.n	8000508 <__udivmoddi4+0x4c>
 8000580:	2200      	movs	r2, #0
 8000582:	2300      	movs	r3, #0
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	4643      	mov	r3, r8
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0d8      	beq.n	8000540 <__udivmoddi4+0x84>
 800058e:	07fb      	lsls	r3, r7, #31
 8000590:	0872      	lsrs	r2, r6, #1
 8000592:	431a      	orrs	r2, r3
 8000594:	4646      	mov	r6, r8
 8000596:	087b      	lsrs	r3, r7, #1
 8000598:	e00e      	b.n	80005b8 <__udivmoddi4+0xfc>
 800059a:	42ab      	cmp	r3, r5
 800059c:	d101      	bne.n	80005a2 <__udivmoddi4+0xe6>
 800059e:	42a2      	cmp	r2, r4
 80005a0:	d80c      	bhi.n	80005bc <__udivmoddi4+0x100>
 80005a2:	1aa4      	subs	r4, r4, r2
 80005a4:	419d      	sbcs	r5, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2100      	movs	r1, #0
 80005ae:	3e01      	subs	r6, #1
 80005b0:	1824      	adds	r4, r4, r0
 80005b2:	414d      	adcs	r5, r1
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d006      	beq.n	80005c6 <__udivmoddi4+0x10a>
 80005b8:	42ab      	cmp	r3, r5
 80005ba:	d9ee      	bls.n	800059a <__udivmoddi4+0xde>
 80005bc:	3e01      	subs	r6, #1
 80005be:	1924      	adds	r4, r4, r4
 80005c0:	416d      	adcs	r5, r5
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d1f8      	bne.n	80005b8 <__udivmoddi4+0xfc>
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	465b      	mov	r3, fp
 80005cc:	1900      	adds	r0, r0, r4
 80005ce:	4169      	adcs	r1, r5
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db24      	blt.n	800061e <__udivmoddi4+0x162>
 80005d4:	002b      	movs	r3, r5
 80005d6:	465a      	mov	r2, fp
 80005d8:	4644      	mov	r4, r8
 80005da:	40d3      	lsrs	r3, r2
 80005dc:	002a      	movs	r2, r5
 80005de:	40e2      	lsrs	r2, r4
 80005e0:	001c      	movs	r4, r3
 80005e2:	465b      	mov	r3, fp
 80005e4:	0015      	movs	r5, r2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db2a      	blt.n	8000640 <__udivmoddi4+0x184>
 80005ea:	0026      	movs	r6, r4
 80005ec:	409e      	lsls	r6, r3
 80005ee:	0033      	movs	r3, r6
 80005f0:	0026      	movs	r6, r4
 80005f2:	4647      	mov	r7, r8
 80005f4:	40be      	lsls	r6, r7
 80005f6:	0032      	movs	r2, r6
 80005f8:	1a80      	subs	r0, r0, r2
 80005fa:	4199      	sbcs	r1, r3
 80005fc:	9000      	str	r0, [sp, #0]
 80005fe:	9101      	str	r1, [sp, #4]
 8000600:	e79e      	b.n	8000540 <__udivmoddi4+0x84>
 8000602:	42a3      	cmp	r3, r4
 8000604:	d8bc      	bhi.n	8000580 <__udivmoddi4+0xc4>
 8000606:	e782      	b.n	800050e <__udivmoddi4+0x52>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	2100      	movs	r1, #0
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	2200      	movs	r2, #0
 8000612:	9100      	str	r1, [sp, #0]
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	2201      	movs	r2, #1
 8000618:	40da      	lsrs	r2, r3
 800061a:	9201      	str	r2, [sp, #4]
 800061c:	e785      	b.n	800052a <__udivmoddi4+0x6e>
 800061e:	4642      	mov	r2, r8
 8000620:	2320      	movs	r3, #32
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	002a      	movs	r2, r5
 8000626:	4646      	mov	r6, r8
 8000628:	409a      	lsls	r2, r3
 800062a:	0023      	movs	r3, r4
 800062c:	40f3      	lsrs	r3, r6
 800062e:	4644      	mov	r4, r8
 8000630:	4313      	orrs	r3, r2
 8000632:	002a      	movs	r2, r5
 8000634:	40e2      	lsrs	r2, r4
 8000636:	001c      	movs	r4, r3
 8000638:	465b      	mov	r3, fp
 800063a:	0015      	movs	r5, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	dad4      	bge.n	80005ea <__udivmoddi4+0x12e>
 8000640:	4642      	mov	r2, r8
 8000642:	002f      	movs	r7, r5
 8000644:	2320      	movs	r3, #32
 8000646:	0026      	movs	r6, r4
 8000648:	4097      	lsls	r7, r2
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	40de      	lsrs	r6, r3
 800064e:	003b      	movs	r3, r7
 8000650:	4333      	orrs	r3, r6
 8000652:	e7cd      	b.n	80005f0 <__udivmoddi4+0x134>

08000654 <__aeabi_dadd>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	4657      	mov	r7, sl
 8000658:	464e      	mov	r6, r9
 800065a:	4645      	mov	r5, r8
 800065c:	46de      	mov	lr, fp
 800065e:	b5e0      	push	{r5, r6, r7, lr}
 8000660:	b083      	sub	sp, #12
 8000662:	9000      	str	r0, [sp, #0]
 8000664:	9101      	str	r1, [sp, #4]
 8000666:	030c      	lsls	r4, r1, #12
 8000668:	004f      	lsls	r7, r1, #1
 800066a:	0fce      	lsrs	r6, r1, #31
 800066c:	0a61      	lsrs	r1, r4, #9
 800066e:	9c00      	ldr	r4, [sp, #0]
 8000670:	031d      	lsls	r5, r3, #12
 8000672:	0f64      	lsrs	r4, r4, #29
 8000674:	430c      	orrs	r4, r1
 8000676:	9900      	ldr	r1, [sp, #0]
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	00c8      	lsls	r0, r1, #3
 800067e:	0059      	lsls	r1, r3, #1
 8000680:	0d4b      	lsrs	r3, r1, #21
 8000682:	4699      	mov	r9, r3
 8000684:	9a00      	ldr	r2, [sp, #0]
 8000686:	9b01      	ldr	r3, [sp, #4]
 8000688:	0a6d      	lsrs	r5, r5, #9
 800068a:	0fd9      	lsrs	r1, r3, #31
 800068c:	0f53      	lsrs	r3, r2, #29
 800068e:	432b      	orrs	r3, r5
 8000690:	469a      	mov	sl, r3
 8000692:	9b00      	ldr	r3, [sp, #0]
 8000694:	0d7f      	lsrs	r7, r7, #21
 8000696:	00da      	lsls	r2, r3, #3
 8000698:	4694      	mov	ip, r2
 800069a:	464a      	mov	r2, r9
 800069c:	46b0      	mov	r8, r6
 800069e:	1aba      	subs	r2, r7, r2
 80006a0:	428e      	cmp	r6, r1
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x52>
 80006a4:	e0b0      	b.n	8000808 <__aeabi_dadd+0x1b4>
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	dc00      	bgt.n	80006ac <__aeabi_dadd+0x58>
 80006aa:	e078      	b.n	800079e <__aeabi_dadd+0x14a>
 80006ac:	4649      	mov	r1, r9
 80006ae:	2900      	cmp	r1, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x60>
 80006b2:	e0e9      	b.n	8000888 <__aeabi_dadd+0x234>
 80006b4:	49c9      	ldr	r1, [pc, #804]	@ (80009dc <__aeabi_dadd+0x388>)
 80006b6:	428f      	cmp	r7, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x68>
 80006ba:	e195      	b.n	80009e8 <__aeabi_dadd+0x394>
 80006bc:	2501      	movs	r5, #1
 80006be:	2a38      	cmp	r2, #56	@ 0x38
 80006c0:	dc16      	bgt.n	80006f0 <__aeabi_dadd+0x9c>
 80006c2:	2180      	movs	r1, #128	@ 0x80
 80006c4:	4653      	mov	r3, sl
 80006c6:	0409      	lsls	r1, r1, #16
 80006c8:	430b      	orrs	r3, r1
 80006ca:	469a      	mov	sl, r3
 80006cc:	2a1f      	cmp	r2, #31
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_dadd+0x7e>
 80006d0:	e1e7      	b.n	8000aa2 <__aeabi_dadd+0x44e>
 80006d2:	2120      	movs	r1, #32
 80006d4:	4655      	mov	r5, sl
 80006d6:	1a8b      	subs	r3, r1, r2
 80006d8:	4661      	mov	r1, ip
 80006da:	409d      	lsls	r5, r3
 80006dc:	40d1      	lsrs	r1, r2
 80006de:	430d      	orrs	r5, r1
 80006e0:	4661      	mov	r1, ip
 80006e2:	4099      	lsls	r1, r3
 80006e4:	1e4b      	subs	r3, r1, #1
 80006e6:	4199      	sbcs	r1, r3
 80006e8:	4653      	mov	r3, sl
 80006ea:	40d3      	lsrs	r3, r2
 80006ec:	430d      	orrs	r5, r1
 80006ee:	1ae4      	subs	r4, r4, r3
 80006f0:	1b45      	subs	r5, r0, r5
 80006f2:	42a8      	cmp	r0, r5
 80006f4:	4180      	sbcs	r0, r0
 80006f6:	4240      	negs	r0, r0
 80006f8:	1a24      	subs	r4, r4, r0
 80006fa:	0223      	lsls	r3, r4, #8
 80006fc:	d400      	bmi.n	8000700 <__aeabi_dadd+0xac>
 80006fe:	e10f      	b.n	8000920 <__aeabi_dadd+0x2cc>
 8000700:	0264      	lsls	r4, r4, #9
 8000702:	0a64      	lsrs	r4, r4, #9
 8000704:	2c00      	cmp	r4, #0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0xb6>
 8000708:	e139      	b.n	800097e <__aeabi_dadd+0x32a>
 800070a:	0020      	movs	r0, r4
 800070c:	f001 fe3a 	bl	8002384 <__clzsi2>
 8000710:	0003      	movs	r3, r0
 8000712:	3b08      	subs	r3, #8
 8000714:	2120      	movs	r1, #32
 8000716:	0028      	movs	r0, r5
 8000718:	1aca      	subs	r2, r1, r3
 800071a:	40d0      	lsrs	r0, r2
 800071c:	409c      	lsls	r4, r3
 800071e:	0002      	movs	r2, r0
 8000720:	409d      	lsls	r5, r3
 8000722:	4322      	orrs	r2, r4
 8000724:	429f      	cmp	r7, r3
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0xd6>
 8000728:	e173      	b.n	8000a12 <__aeabi_dadd+0x3be>
 800072a:	1bd8      	subs	r0, r3, r7
 800072c:	3001      	adds	r0, #1
 800072e:	1a09      	subs	r1, r1, r0
 8000730:	002c      	movs	r4, r5
 8000732:	408d      	lsls	r5, r1
 8000734:	40c4      	lsrs	r4, r0
 8000736:	1e6b      	subs	r3, r5, #1
 8000738:	419d      	sbcs	r5, r3
 800073a:	0013      	movs	r3, r2
 800073c:	40c2      	lsrs	r2, r0
 800073e:	408b      	lsls	r3, r1
 8000740:	4325      	orrs	r5, r4
 8000742:	2700      	movs	r7, #0
 8000744:	0014      	movs	r4, r2
 8000746:	431d      	orrs	r5, r3
 8000748:	076b      	lsls	r3, r5, #29
 800074a:	d009      	beq.n	8000760 <__aeabi_dadd+0x10c>
 800074c:	230f      	movs	r3, #15
 800074e:	402b      	ands	r3, r5
 8000750:	2b04      	cmp	r3, #4
 8000752:	d005      	beq.n	8000760 <__aeabi_dadd+0x10c>
 8000754:	1d2b      	adds	r3, r5, #4
 8000756:	42ab      	cmp	r3, r5
 8000758:	41ad      	sbcs	r5, r5
 800075a:	426d      	negs	r5, r5
 800075c:	1964      	adds	r4, r4, r5
 800075e:	001d      	movs	r5, r3
 8000760:	0223      	lsls	r3, r4, #8
 8000762:	d400      	bmi.n	8000766 <__aeabi_dadd+0x112>
 8000764:	e12d      	b.n	80009c2 <__aeabi_dadd+0x36e>
 8000766:	4a9d      	ldr	r2, [pc, #628]	@ (80009dc <__aeabi_dadd+0x388>)
 8000768:	3701      	adds	r7, #1
 800076a:	4297      	cmp	r7, r2
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0x11c>
 800076e:	e0d3      	b.n	8000918 <__aeabi_dadd+0x2c4>
 8000770:	4646      	mov	r6, r8
 8000772:	499b      	ldr	r1, [pc, #620]	@ (80009e0 <__aeabi_dadd+0x38c>)
 8000774:	08ed      	lsrs	r5, r5, #3
 8000776:	4021      	ands	r1, r4
 8000778:	074a      	lsls	r2, r1, #29
 800077a:	432a      	orrs	r2, r5
 800077c:	057c      	lsls	r4, r7, #21
 800077e:	024d      	lsls	r5, r1, #9
 8000780:	0b2d      	lsrs	r5, r5, #12
 8000782:	0d64      	lsrs	r4, r4, #21
 8000784:	0524      	lsls	r4, r4, #20
 8000786:	432c      	orrs	r4, r5
 8000788:	07f6      	lsls	r6, r6, #31
 800078a:	4334      	orrs	r4, r6
 800078c:	0010      	movs	r0, r2
 800078e:	0021      	movs	r1, r4
 8000790:	b003      	add	sp, #12
 8000792:	bcf0      	pop	{r4, r5, r6, r7}
 8000794:	46bb      	mov	fp, r7
 8000796:	46b2      	mov	sl, r6
 8000798:	46a9      	mov	r9, r5
 800079a:	46a0      	mov	r8, r4
 800079c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079e:	2a00      	cmp	r2, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x150>
 80007a2:	e084      	b.n	80008ae <__aeabi_dadd+0x25a>
 80007a4:	464a      	mov	r2, r9
 80007a6:	1bd2      	subs	r2, r2, r7
 80007a8:	2f00      	cmp	r7, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_dadd+0x15a>
 80007ac:	e16d      	b.n	8000a8a <__aeabi_dadd+0x436>
 80007ae:	0025      	movs	r5, r4
 80007b0:	4305      	orrs	r5, r0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x162>
 80007b4:	e127      	b.n	8000a06 <__aeabi_dadd+0x3b2>
 80007b6:	1e56      	subs	r6, r2, #1
 80007b8:	2a01      	cmp	r2, #1
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x16a>
 80007bc:	e23b      	b.n	8000c36 <__aeabi_dadd+0x5e2>
 80007be:	4d87      	ldr	r5, [pc, #540]	@ (80009dc <__aeabi_dadd+0x388>)
 80007c0:	42aa      	cmp	r2, r5
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x172>
 80007c4:	e26a      	b.n	8000c9c <__aeabi_dadd+0x648>
 80007c6:	2501      	movs	r5, #1
 80007c8:	2e38      	cmp	r6, #56	@ 0x38
 80007ca:	dc12      	bgt.n	80007f2 <__aeabi_dadd+0x19e>
 80007cc:	0032      	movs	r2, r6
 80007ce:	2a1f      	cmp	r2, #31
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_dadd+0x180>
 80007d2:	e1f8      	b.n	8000bc6 <__aeabi_dadd+0x572>
 80007d4:	2620      	movs	r6, #32
 80007d6:	0025      	movs	r5, r4
 80007d8:	1ab6      	subs	r6, r6, r2
 80007da:	0007      	movs	r7, r0
 80007dc:	4653      	mov	r3, sl
 80007de:	40b0      	lsls	r0, r6
 80007e0:	40d4      	lsrs	r4, r2
 80007e2:	40b5      	lsls	r5, r6
 80007e4:	40d7      	lsrs	r7, r2
 80007e6:	1e46      	subs	r6, r0, #1
 80007e8:	41b0      	sbcs	r0, r6
 80007ea:	1b1b      	subs	r3, r3, r4
 80007ec:	469a      	mov	sl, r3
 80007ee:	433d      	orrs	r5, r7
 80007f0:	4305      	orrs	r5, r0
 80007f2:	4662      	mov	r2, ip
 80007f4:	1b55      	subs	r5, r2, r5
 80007f6:	45ac      	cmp	ip, r5
 80007f8:	4192      	sbcs	r2, r2
 80007fa:	4653      	mov	r3, sl
 80007fc:	4252      	negs	r2, r2
 80007fe:	000e      	movs	r6, r1
 8000800:	464f      	mov	r7, r9
 8000802:	4688      	mov	r8, r1
 8000804:	1a9c      	subs	r4, r3, r2
 8000806:	e778      	b.n	80006fa <__aeabi_dadd+0xa6>
 8000808:	2a00      	cmp	r2, #0
 800080a:	dc00      	bgt.n	800080e <__aeabi_dadd+0x1ba>
 800080c:	e08e      	b.n	800092c <__aeabi_dadd+0x2d8>
 800080e:	4649      	mov	r1, r9
 8000810:	2900      	cmp	r1, #0
 8000812:	d175      	bne.n	8000900 <__aeabi_dadd+0x2ac>
 8000814:	4661      	mov	r1, ip
 8000816:	4653      	mov	r3, sl
 8000818:	4319      	orrs	r1, r3
 800081a:	d100      	bne.n	800081e <__aeabi_dadd+0x1ca>
 800081c:	e0f6      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 800081e:	1e51      	subs	r1, r2, #1
 8000820:	2a01      	cmp	r2, #1
 8000822:	d100      	bne.n	8000826 <__aeabi_dadd+0x1d2>
 8000824:	e191      	b.n	8000b4a <__aeabi_dadd+0x4f6>
 8000826:	4d6d      	ldr	r5, [pc, #436]	@ (80009dc <__aeabi_dadd+0x388>)
 8000828:	42aa      	cmp	r2, r5
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x1da>
 800082c:	e0dc      	b.n	80009e8 <__aeabi_dadd+0x394>
 800082e:	2501      	movs	r5, #1
 8000830:	2938      	cmp	r1, #56	@ 0x38
 8000832:	dc14      	bgt.n	800085e <__aeabi_dadd+0x20a>
 8000834:	000a      	movs	r2, r1
 8000836:	2a1f      	cmp	r2, #31
 8000838:	dd00      	ble.n	800083c <__aeabi_dadd+0x1e8>
 800083a:	e1a2      	b.n	8000b82 <__aeabi_dadd+0x52e>
 800083c:	2120      	movs	r1, #32
 800083e:	4653      	mov	r3, sl
 8000840:	1a89      	subs	r1, r1, r2
 8000842:	408b      	lsls	r3, r1
 8000844:	001d      	movs	r5, r3
 8000846:	4663      	mov	r3, ip
 8000848:	40d3      	lsrs	r3, r2
 800084a:	431d      	orrs	r5, r3
 800084c:	4663      	mov	r3, ip
 800084e:	408b      	lsls	r3, r1
 8000850:	0019      	movs	r1, r3
 8000852:	1e4b      	subs	r3, r1, #1
 8000854:	4199      	sbcs	r1, r3
 8000856:	4653      	mov	r3, sl
 8000858:	40d3      	lsrs	r3, r2
 800085a:	430d      	orrs	r5, r1
 800085c:	18e4      	adds	r4, r4, r3
 800085e:	182d      	adds	r5, r5, r0
 8000860:	4285      	cmp	r5, r0
 8000862:	4180      	sbcs	r0, r0
 8000864:	4240      	negs	r0, r0
 8000866:	1824      	adds	r4, r4, r0
 8000868:	0223      	lsls	r3, r4, #8
 800086a:	d559      	bpl.n	8000920 <__aeabi_dadd+0x2cc>
 800086c:	4b5b      	ldr	r3, [pc, #364]	@ (80009dc <__aeabi_dadd+0x388>)
 800086e:	3701      	adds	r7, #1
 8000870:	429f      	cmp	r7, r3
 8000872:	d051      	beq.n	8000918 <__aeabi_dadd+0x2c4>
 8000874:	2101      	movs	r1, #1
 8000876:	4b5a      	ldr	r3, [pc, #360]	@ (80009e0 <__aeabi_dadd+0x38c>)
 8000878:	086a      	lsrs	r2, r5, #1
 800087a:	401c      	ands	r4, r3
 800087c:	4029      	ands	r1, r5
 800087e:	430a      	orrs	r2, r1
 8000880:	07e5      	lsls	r5, r4, #31
 8000882:	4315      	orrs	r5, r2
 8000884:	0864      	lsrs	r4, r4, #1
 8000886:	e75f      	b.n	8000748 <__aeabi_dadd+0xf4>
 8000888:	4661      	mov	r1, ip
 800088a:	4653      	mov	r3, sl
 800088c:	4319      	orrs	r1, r3
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x23e>
 8000890:	e0bc      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 8000892:	1e51      	subs	r1, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x246>
 8000898:	e164      	b.n	8000b64 <__aeabi_dadd+0x510>
 800089a:	4d50      	ldr	r5, [pc, #320]	@ (80009dc <__aeabi_dadd+0x388>)
 800089c:	42aa      	cmp	r2, r5
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x24e>
 80008a0:	e16a      	b.n	8000b78 <__aeabi_dadd+0x524>
 80008a2:	2501      	movs	r5, #1
 80008a4:	2938      	cmp	r1, #56	@ 0x38
 80008a6:	dd00      	ble.n	80008aa <__aeabi_dadd+0x256>
 80008a8:	e722      	b.n	80006f0 <__aeabi_dadd+0x9c>
 80008aa:	000a      	movs	r2, r1
 80008ac:	e70e      	b.n	80006cc <__aeabi_dadd+0x78>
 80008ae:	4a4d      	ldr	r2, [pc, #308]	@ (80009e4 <__aeabi_dadd+0x390>)
 80008b0:	1c7d      	adds	r5, r7, #1
 80008b2:	4215      	tst	r5, r2
 80008b4:	d000      	beq.n	80008b8 <__aeabi_dadd+0x264>
 80008b6:	e0d0      	b.n	8000a5a <__aeabi_dadd+0x406>
 80008b8:	0025      	movs	r5, r4
 80008ba:	4662      	mov	r2, ip
 80008bc:	4653      	mov	r3, sl
 80008be:	4305      	orrs	r5, r0
 80008c0:	431a      	orrs	r2, r3
 80008c2:	2f00      	cmp	r7, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dadd+0x274>
 80008c6:	e137      	b.n	8000b38 <__aeabi_dadd+0x4e4>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x27a>
 80008cc:	e1a8      	b.n	8000c20 <__aeabi_dadd+0x5cc>
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d100      	bne.n	80008d4 <__aeabi_dadd+0x280>
 80008d2:	e16a      	b.n	8000baa <__aeabi_dadd+0x556>
 80008d4:	4663      	mov	r3, ip
 80008d6:	1ac5      	subs	r5, r0, r3
 80008d8:	4653      	mov	r3, sl
 80008da:	1ae2      	subs	r2, r4, r3
 80008dc:	42a8      	cmp	r0, r5
 80008de:	419b      	sbcs	r3, r3
 80008e0:	425b      	negs	r3, r3
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	021a      	lsls	r2, r3, #8
 80008e6:	d400      	bmi.n	80008ea <__aeabi_dadd+0x296>
 80008e8:	e203      	b.n	8000cf2 <__aeabi_dadd+0x69e>
 80008ea:	4663      	mov	r3, ip
 80008ec:	1a1d      	subs	r5, r3, r0
 80008ee:	45ac      	cmp	ip, r5
 80008f0:	4192      	sbcs	r2, r2
 80008f2:	4653      	mov	r3, sl
 80008f4:	4252      	negs	r2, r2
 80008f6:	1b1c      	subs	r4, r3, r4
 80008f8:	000e      	movs	r6, r1
 80008fa:	4688      	mov	r8, r1
 80008fc:	1aa4      	subs	r4, r4, r2
 80008fe:	e723      	b.n	8000748 <__aeabi_dadd+0xf4>
 8000900:	4936      	ldr	r1, [pc, #216]	@ (80009dc <__aeabi_dadd+0x388>)
 8000902:	428f      	cmp	r7, r1
 8000904:	d070      	beq.n	80009e8 <__aeabi_dadd+0x394>
 8000906:	2501      	movs	r5, #1
 8000908:	2a38      	cmp	r2, #56	@ 0x38
 800090a:	dca8      	bgt.n	800085e <__aeabi_dadd+0x20a>
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	4653      	mov	r3, sl
 8000910:	0409      	lsls	r1, r1, #16
 8000912:	430b      	orrs	r3, r1
 8000914:	469a      	mov	sl, r3
 8000916:	e78e      	b.n	8000836 <__aeabi_dadd+0x1e2>
 8000918:	003c      	movs	r4, r7
 800091a:	2500      	movs	r5, #0
 800091c:	2200      	movs	r2, #0
 800091e:	e731      	b.n	8000784 <__aeabi_dadd+0x130>
 8000920:	2307      	movs	r3, #7
 8000922:	402b      	ands	r3, r5
 8000924:	2b00      	cmp	r3, #0
 8000926:	d000      	beq.n	800092a <__aeabi_dadd+0x2d6>
 8000928:	e710      	b.n	800074c <__aeabi_dadd+0xf8>
 800092a:	e093      	b.n	8000a54 <__aeabi_dadd+0x400>
 800092c:	2a00      	cmp	r2, #0
 800092e:	d074      	beq.n	8000a1a <__aeabi_dadd+0x3c6>
 8000930:	464a      	mov	r2, r9
 8000932:	1bd2      	subs	r2, r2, r7
 8000934:	2f00      	cmp	r7, #0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x2e6>
 8000938:	e0c7      	b.n	8000aca <__aeabi_dadd+0x476>
 800093a:	4928      	ldr	r1, [pc, #160]	@ (80009dc <__aeabi_dadd+0x388>)
 800093c:	4589      	cmp	r9, r1
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x2ee>
 8000940:	e185      	b.n	8000c4e <__aeabi_dadd+0x5fa>
 8000942:	2501      	movs	r5, #1
 8000944:	2a38      	cmp	r2, #56	@ 0x38
 8000946:	dc12      	bgt.n	800096e <__aeabi_dadd+0x31a>
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	0409      	lsls	r1, r1, #16
 800094c:	430c      	orrs	r4, r1
 800094e:	2a1f      	cmp	r2, #31
 8000950:	dd00      	ble.n	8000954 <__aeabi_dadd+0x300>
 8000952:	e1ab      	b.n	8000cac <__aeabi_dadd+0x658>
 8000954:	2120      	movs	r1, #32
 8000956:	0025      	movs	r5, r4
 8000958:	1a89      	subs	r1, r1, r2
 800095a:	0007      	movs	r7, r0
 800095c:	4088      	lsls	r0, r1
 800095e:	408d      	lsls	r5, r1
 8000960:	40d7      	lsrs	r7, r2
 8000962:	1e41      	subs	r1, r0, #1
 8000964:	4188      	sbcs	r0, r1
 8000966:	40d4      	lsrs	r4, r2
 8000968:	433d      	orrs	r5, r7
 800096a:	4305      	orrs	r5, r0
 800096c:	44a2      	add	sl, r4
 800096e:	4465      	add	r5, ip
 8000970:	4565      	cmp	r5, ip
 8000972:	4192      	sbcs	r2, r2
 8000974:	4252      	negs	r2, r2
 8000976:	4452      	add	r2, sl
 8000978:	0014      	movs	r4, r2
 800097a:	464f      	mov	r7, r9
 800097c:	e774      	b.n	8000868 <__aeabi_dadd+0x214>
 800097e:	0028      	movs	r0, r5
 8000980:	f001 fd00 	bl	8002384 <__clzsi2>
 8000984:	0003      	movs	r3, r0
 8000986:	3318      	adds	r3, #24
 8000988:	2b1f      	cmp	r3, #31
 800098a:	dc00      	bgt.n	800098e <__aeabi_dadd+0x33a>
 800098c:	e6c2      	b.n	8000714 <__aeabi_dadd+0xc0>
 800098e:	002a      	movs	r2, r5
 8000990:	3808      	subs	r0, #8
 8000992:	4082      	lsls	r2, r0
 8000994:	429f      	cmp	r7, r3
 8000996:	dd00      	ble.n	800099a <__aeabi_dadd+0x346>
 8000998:	e0a9      	b.n	8000aee <__aeabi_dadd+0x49a>
 800099a:	1bdb      	subs	r3, r3, r7
 800099c:	1c58      	adds	r0, r3, #1
 800099e:	281f      	cmp	r0, #31
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x350>
 80009a2:	e1ac      	b.n	8000cfe <__aeabi_dadd+0x6aa>
 80009a4:	0015      	movs	r5, r2
 80009a6:	3b1f      	subs	r3, #31
 80009a8:	40dd      	lsrs	r5, r3
 80009aa:	2820      	cmp	r0, #32
 80009ac:	d005      	beq.n	80009ba <__aeabi_dadd+0x366>
 80009ae:	2340      	movs	r3, #64	@ 0x40
 80009b0:	1a1b      	subs	r3, r3, r0
 80009b2:	409a      	lsls	r2, r3
 80009b4:	1e53      	subs	r3, r2, #1
 80009b6:	419a      	sbcs	r2, r3
 80009b8:	4315      	orrs	r5, r2
 80009ba:	2307      	movs	r3, #7
 80009bc:	2700      	movs	r7, #0
 80009be:	402b      	ands	r3, r5
 80009c0:	e7b0      	b.n	8000924 <__aeabi_dadd+0x2d0>
 80009c2:	08ed      	lsrs	r5, r5, #3
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <__aeabi_dadd+0x388>)
 80009c6:	0762      	lsls	r2, r4, #29
 80009c8:	432a      	orrs	r2, r5
 80009ca:	08e4      	lsrs	r4, r4, #3
 80009cc:	429f      	cmp	r7, r3
 80009ce:	d00f      	beq.n	80009f0 <__aeabi_dadd+0x39c>
 80009d0:	0324      	lsls	r4, r4, #12
 80009d2:	0b25      	lsrs	r5, r4, #12
 80009d4:	057c      	lsls	r4, r7, #21
 80009d6:	0d64      	lsrs	r4, r4, #21
 80009d8:	e6d4      	b.n	8000784 <__aeabi_dadd+0x130>
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	000007ff 	.word	0x000007ff
 80009e0:	ff7fffff 	.word	0xff7fffff
 80009e4:	000007fe 	.word	0x000007fe
 80009e8:	08c0      	lsrs	r0, r0, #3
 80009ea:	0762      	lsls	r2, r4, #29
 80009ec:	4302      	orrs	r2, r0
 80009ee:	08e4      	lsrs	r4, r4, #3
 80009f0:	0013      	movs	r3, r2
 80009f2:	4323      	orrs	r3, r4
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x3a4>
 80009f6:	e186      	b.n	8000d06 <__aeabi_dadd+0x6b2>
 80009f8:	2580      	movs	r5, #128	@ 0x80
 80009fa:	032d      	lsls	r5, r5, #12
 80009fc:	4325      	orrs	r5, r4
 80009fe:	032d      	lsls	r5, r5, #12
 8000a00:	4cc3      	ldr	r4, [pc, #780]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000a02:	0b2d      	lsrs	r5, r5, #12
 8000a04:	e6be      	b.n	8000784 <__aeabi_dadd+0x130>
 8000a06:	4660      	mov	r0, ip
 8000a08:	4654      	mov	r4, sl
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	0017      	movs	r7, r2
 8000a0e:	08c5      	lsrs	r5, r0, #3
 8000a10:	e7d8      	b.n	80009c4 <__aeabi_dadd+0x370>
 8000a12:	4cc0      	ldr	r4, [pc, #768]	@ (8000d14 <__aeabi_dadd+0x6c0>)
 8000a14:	1aff      	subs	r7, r7, r3
 8000a16:	4014      	ands	r4, r2
 8000a18:	e696      	b.n	8000748 <__aeabi_dadd+0xf4>
 8000a1a:	4abf      	ldr	r2, [pc, #764]	@ (8000d18 <__aeabi_dadd+0x6c4>)
 8000a1c:	1c79      	adds	r1, r7, #1
 8000a1e:	4211      	tst	r1, r2
 8000a20:	d16b      	bne.n	8000afa <__aeabi_dadd+0x4a6>
 8000a22:	0022      	movs	r2, r4
 8000a24:	4302      	orrs	r2, r0
 8000a26:	2f00      	cmp	r7, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x3d8>
 8000a2a:	e0db      	b.n	8000be4 <__aeabi_dadd+0x590>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x3de>
 8000a30:	e12d      	b.n	8000c8e <__aeabi_dadd+0x63a>
 8000a32:	4662      	mov	r2, ip
 8000a34:	4653      	mov	r3, sl
 8000a36:	431a      	orrs	r2, r3
 8000a38:	d100      	bne.n	8000a3c <__aeabi_dadd+0x3e8>
 8000a3a:	e0b6      	b.n	8000baa <__aeabi_dadd+0x556>
 8000a3c:	4663      	mov	r3, ip
 8000a3e:	18c5      	adds	r5, r0, r3
 8000a40:	4285      	cmp	r5, r0
 8000a42:	4180      	sbcs	r0, r0
 8000a44:	4454      	add	r4, sl
 8000a46:	4240      	negs	r0, r0
 8000a48:	1824      	adds	r4, r4, r0
 8000a4a:	0223      	lsls	r3, r4, #8
 8000a4c:	d502      	bpl.n	8000a54 <__aeabi_dadd+0x400>
 8000a4e:	000f      	movs	r7, r1
 8000a50:	4bb0      	ldr	r3, [pc, #704]	@ (8000d14 <__aeabi_dadd+0x6c0>)
 8000a52:	401c      	ands	r4, r3
 8000a54:	003a      	movs	r2, r7
 8000a56:	0028      	movs	r0, r5
 8000a58:	e7d8      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 8000a5a:	4662      	mov	r2, ip
 8000a5c:	1a85      	subs	r5, r0, r2
 8000a5e:	42a8      	cmp	r0, r5
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	4653      	mov	r3, sl
 8000a64:	4252      	negs	r2, r2
 8000a66:	4691      	mov	r9, r2
 8000a68:	1ae3      	subs	r3, r4, r3
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	0013      	movs	r3, r2
 8000a72:	4691      	mov	r9, r2
 8000a74:	021a      	lsls	r2, r3, #8
 8000a76:	d454      	bmi.n	8000b22 <__aeabi_dadd+0x4ce>
 8000a78:	464a      	mov	r2, r9
 8000a7a:	464c      	mov	r4, r9
 8000a7c:	432a      	orrs	r2, r5
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dadd+0x42e>
 8000a80:	e640      	b.n	8000704 <__aeabi_dadd+0xb0>
 8000a82:	2600      	movs	r6, #0
 8000a84:	2400      	movs	r4, #0
 8000a86:	2500      	movs	r5, #0
 8000a88:	e67c      	b.n	8000784 <__aeabi_dadd+0x130>
 8000a8a:	4da1      	ldr	r5, [pc, #644]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000a8c:	45a9      	cmp	r9, r5
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x43e>
 8000a90:	e090      	b.n	8000bb4 <__aeabi_dadd+0x560>
 8000a92:	2501      	movs	r5, #1
 8000a94:	2a38      	cmp	r2, #56	@ 0x38
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dadd+0x446>
 8000a98:	e6ab      	b.n	80007f2 <__aeabi_dadd+0x19e>
 8000a9a:	2580      	movs	r5, #128	@ 0x80
 8000a9c:	042d      	lsls	r5, r5, #16
 8000a9e:	432c      	orrs	r4, r5
 8000aa0:	e695      	b.n	80007ce <__aeabi_dadd+0x17a>
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	4655      	mov	r5, sl
 8000aa6:	3920      	subs	r1, #32
 8000aa8:	40cd      	lsrs	r5, r1
 8000aaa:	46a9      	mov	r9, r5
 8000aac:	2a20      	cmp	r2, #32
 8000aae:	d006      	beq.n	8000abe <__aeabi_dadd+0x46a>
 8000ab0:	2140      	movs	r1, #64	@ 0x40
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	431a      	orrs	r2, r3
 8000abc:	4694      	mov	ip, r2
 8000abe:	4665      	mov	r5, ip
 8000ac0:	1e6b      	subs	r3, r5, #1
 8000ac2:	419d      	sbcs	r5, r3
 8000ac4:	464b      	mov	r3, r9
 8000ac6:	431d      	orrs	r5, r3
 8000ac8:	e612      	b.n	80006f0 <__aeabi_dadd+0x9c>
 8000aca:	0021      	movs	r1, r4
 8000acc:	4301      	orrs	r1, r0
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x47e>
 8000ad0:	e0c4      	b.n	8000c5c <__aeabi_dadd+0x608>
 8000ad2:	1e51      	subs	r1, r2, #1
 8000ad4:	2a01      	cmp	r2, #1
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dadd+0x486>
 8000ad8:	e0fb      	b.n	8000cd2 <__aeabi_dadd+0x67e>
 8000ada:	4d8d      	ldr	r5, [pc, #564]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000adc:	42aa      	cmp	r2, r5
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x48e>
 8000ae0:	e0b5      	b.n	8000c4e <__aeabi_dadd+0x5fa>
 8000ae2:	2501      	movs	r5, #1
 8000ae4:	2938      	cmp	r1, #56	@ 0x38
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dadd+0x496>
 8000ae8:	e741      	b.n	800096e <__aeabi_dadd+0x31a>
 8000aea:	000a      	movs	r2, r1
 8000aec:	e72f      	b.n	800094e <__aeabi_dadd+0x2fa>
 8000aee:	4c89      	ldr	r4, [pc, #548]	@ (8000d14 <__aeabi_dadd+0x6c0>)
 8000af0:	1aff      	subs	r7, r7, r3
 8000af2:	4014      	ands	r4, r2
 8000af4:	0762      	lsls	r2, r4, #29
 8000af6:	08e4      	lsrs	r4, r4, #3
 8000af8:	e76a      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000afa:	4a85      	ldr	r2, [pc, #532]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000afc:	4291      	cmp	r1, r2
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dadd+0x4ae>
 8000b00:	e0e3      	b.n	8000cca <__aeabi_dadd+0x676>
 8000b02:	4663      	mov	r3, ip
 8000b04:	18c2      	adds	r2, r0, r3
 8000b06:	4282      	cmp	r2, r0
 8000b08:	4180      	sbcs	r0, r0
 8000b0a:	0023      	movs	r3, r4
 8000b0c:	4240      	negs	r0, r0
 8000b0e:	4453      	add	r3, sl
 8000b10:	181b      	adds	r3, r3, r0
 8000b12:	07dd      	lsls	r5, r3, #31
 8000b14:	085c      	lsrs	r4, r3, #1
 8000b16:	2307      	movs	r3, #7
 8000b18:	0852      	lsrs	r2, r2, #1
 8000b1a:	4315      	orrs	r5, r2
 8000b1c:	000f      	movs	r7, r1
 8000b1e:	402b      	ands	r3, r5
 8000b20:	e700      	b.n	8000924 <__aeabi_dadd+0x2d0>
 8000b22:	4663      	mov	r3, ip
 8000b24:	1a1d      	subs	r5, r3, r0
 8000b26:	45ac      	cmp	ip, r5
 8000b28:	4192      	sbcs	r2, r2
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	1b1c      	subs	r4, r3, r4
 8000b30:	000e      	movs	r6, r1
 8000b32:	4688      	mov	r8, r1
 8000b34:	1aa4      	subs	r4, r4, r2
 8000b36:	e5e5      	b.n	8000704 <__aeabi_dadd+0xb0>
 8000b38:	2d00      	cmp	r5, #0
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_dadd+0x4ea>
 8000b3c:	e091      	b.n	8000c62 <__aeabi_dadd+0x60e>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d138      	bne.n	8000bb4 <__aeabi_dadd+0x560>
 8000b42:	2480      	movs	r4, #128	@ 0x80
 8000b44:	2600      	movs	r6, #0
 8000b46:	0324      	lsls	r4, r4, #12
 8000b48:	e756      	b.n	80009f8 <__aeabi_dadd+0x3a4>
 8000b4a:	4663      	mov	r3, ip
 8000b4c:	18c5      	adds	r5, r0, r3
 8000b4e:	4285      	cmp	r5, r0
 8000b50:	4180      	sbcs	r0, r0
 8000b52:	4454      	add	r4, sl
 8000b54:	4240      	negs	r0, r0
 8000b56:	1824      	adds	r4, r4, r0
 8000b58:	2701      	movs	r7, #1
 8000b5a:	0223      	lsls	r3, r4, #8
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_dadd+0x50c>
 8000b5e:	e6df      	b.n	8000920 <__aeabi_dadd+0x2cc>
 8000b60:	2702      	movs	r7, #2
 8000b62:	e687      	b.n	8000874 <__aeabi_dadd+0x220>
 8000b64:	4663      	mov	r3, ip
 8000b66:	1ac5      	subs	r5, r0, r3
 8000b68:	42a8      	cmp	r0, r5
 8000b6a:	4180      	sbcs	r0, r0
 8000b6c:	4653      	mov	r3, sl
 8000b6e:	4240      	negs	r0, r0
 8000b70:	1ae4      	subs	r4, r4, r3
 8000b72:	2701      	movs	r7, #1
 8000b74:	1a24      	subs	r4, r4, r0
 8000b76:	e5c0      	b.n	80006fa <__aeabi_dadd+0xa6>
 8000b78:	0762      	lsls	r2, r4, #29
 8000b7a:	08c0      	lsrs	r0, r0, #3
 8000b7c:	4302      	orrs	r2, r0
 8000b7e:	08e4      	lsrs	r4, r4, #3
 8000b80:	e736      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000b82:	0011      	movs	r1, r2
 8000b84:	4653      	mov	r3, sl
 8000b86:	3920      	subs	r1, #32
 8000b88:	40cb      	lsrs	r3, r1
 8000b8a:	4699      	mov	r9, r3
 8000b8c:	2a20      	cmp	r2, #32
 8000b8e:	d006      	beq.n	8000b9e <__aeabi_dadd+0x54a>
 8000b90:	2140      	movs	r1, #64	@ 0x40
 8000b92:	4653      	mov	r3, sl
 8000b94:	1a8a      	subs	r2, r1, r2
 8000b96:	4093      	lsls	r3, r2
 8000b98:	4662      	mov	r2, ip
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	4694      	mov	ip, r2
 8000b9e:	4665      	mov	r5, ip
 8000ba0:	1e6b      	subs	r3, r5, #1
 8000ba2:	419d      	sbcs	r5, r3
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	431d      	orrs	r5, r3
 8000ba8:	e659      	b.n	800085e <__aeabi_dadd+0x20a>
 8000baa:	0762      	lsls	r2, r4, #29
 8000bac:	08c0      	lsrs	r0, r0, #3
 8000bae:	4302      	orrs	r2, r0
 8000bb0:	08e4      	lsrs	r4, r4, #3
 8000bb2:	e70d      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000bb4:	4653      	mov	r3, sl
 8000bb6:	075a      	lsls	r2, r3, #29
 8000bb8:	4663      	mov	r3, ip
 8000bba:	08d8      	lsrs	r0, r3, #3
 8000bbc:	4653      	mov	r3, sl
 8000bbe:	000e      	movs	r6, r1
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	08dc      	lsrs	r4, r3, #3
 8000bc4:	e714      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000bc6:	0015      	movs	r5, r2
 8000bc8:	0026      	movs	r6, r4
 8000bca:	3d20      	subs	r5, #32
 8000bcc:	40ee      	lsrs	r6, r5
 8000bce:	2a20      	cmp	r2, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x586>
 8000bd2:	2540      	movs	r5, #64	@ 0x40
 8000bd4:	1aaa      	subs	r2, r5, r2
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	4320      	orrs	r0, r4
 8000bda:	1e42      	subs	r2, r0, #1
 8000bdc:	4190      	sbcs	r0, r2
 8000bde:	0005      	movs	r5, r0
 8000be0:	4335      	orrs	r5, r6
 8000be2:	e606      	b.n	80007f2 <__aeabi_dadd+0x19e>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d07c      	beq.n	8000ce2 <__aeabi_dadd+0x68e>
 8000be8:	4662      	mov	r2, ip
 8000bea:	4653      	mov	r3, sl
 8000bec:	08c0      	lsrs	r0, r0, #3
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x5a0>
 8000bf2:	e6fa      	b.n	80009ea <__aeabi_dadd+0x396>
 8000bf4:	0762      	lsls	r2, r4, #29
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	08e4      	lsrs	r4, r4, #3
 8000bfc:	0312      	lsls	r2, r2, #12
 8000bfe:	4214      	tst	r4, r2
 8000c00:	d008      	beq.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c02:	08d9      	lsrs	r1, r3, #3
 8000c04:	4211      	tst	r1, r2
 8000c06:	d105      	bne.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	08d8      	lsrs	r0, r3, #3
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	000c      	movs	r4, r1
 8000c10:	075b      	lsls	r3, r3, #29
 8000c12:	4318      	orrs	r0, r3
 8000c14:	0f42      	lsrs	r2, r0, #29
 8000c16:	00c0      	lsls	r0, r0, #3
 8000c18:	08c0      	lsrs	r0, r0, #3
 8000c1a:	0752      	lsls	r2, r2, #29
 8000c1c:	4302      	orrs	r2, r0
 8000c1e:	e6e7      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x5d2>
 8000c24:	e72d      	b.n	8000a82 <__aeabi_dadd+0x42e>
 8000c26:	4663      	mov	r3, ip
 8000c28:	08d8      	lsrs	r0, r3, #3
 8000c2a:	4653      	mov	r3, sl
 8000c2c:	075a      	lsls	r2, r3, #29
 8000c2e:	000e      	movs	r6, r1
 8000c30:	4302      	orrs	r2, r0
 8000c32:	08dc      	lsrs	r4, r3, #3
 8000c34:	e6cc      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000c36:	4663      	mov	r3, ip
 8000c38:	1a1d      	subs	r5, r3, r0
 8000c3a:	45ac      	cmp	ip, r5
 8000c3c:	4192      	sbcs	r2, r2
 8000c3e:	4653      	mov	r3, sl
 8000c40:	4252      	negs	r2, r2
 8000c42:	1b1c      	subs	r4, r3, r4
 8000c44:	000e      	movs	r6, r1
 8000c46:	4688      	mov	r8, r1
 8000c48:	1aa4      	subs	r4, r4, r2
 8000c4a:	3701      	adds	r7, #1
 8000c4c:	e555      	b.n	80006fa <__aeabi_dadd+0xa6>
 8000c4e:	4663      	mov	r3, ip
 8000c50:	08d9      	lsrs	r1, r3, #3
 8000c52:	4653      	mov	r3, sl
 8000c54:	075a      	lsls	r2, r3, #29
 8000c56:	430a      	orrs	r2, r1
 8000c58:	08dc      	lsrs	r4, r3, #3
 8000c5a:	e6c9      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000c5c:	4660      	mov	r0, ip
 8000c5e:	4654      	mov	r4, sl
 8000c60:	e6d4      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 8000c62:	08c0      	lsrs	r0, r0, #3
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x616>
 8000c68:	e6bf      	b.n	80009ea <__aeabi_dadd+0x396>
 8000c6a:	0762      	lsls	r2, r4, #29
 8000c6c:	4310      	orrs	r0, r2
 8000c6e:	2280      	movs	r2, #128	@ 0x80
 8000c70:	08e4      	lsrs	r4, r4, #3
 8000c72:	0312      	lsls	r2, r2, #12
 8000c74:	4214      	tst	r4, r2
 8000c76:	d0cd      	beq.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c78:	08dd      	lsrs	r5, r3, #3
 8000c7a:	4215      	tst	r5, r2
 8000c7c:	d1ca      	bne.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c7e:	4663      	mov	r3, ip
 8000c80:	08d8      	lsrs	r0, r3, #3
 8000c82:	4653      	mov	r3, sl
 8000c84:	075b      	lsls	r3, r3, #29
 8000c86:	000e      	movs	r6, r1
 8000c88:	002c      	movs	r4, r5
 8000c8a:	4318      	orrs	r0, r3
 8000c8c:	e7c2      	b.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c8e:	4663      	mov	r3, ip
 8000c90:	08d9      	lsrs	r1, r3, #3
 8000c92:	4653      	mov	r3, sl
 8000c94:	075a      	lsls	r2, r3, #29
 8000c96:	430a      	orrs	r2, r1
 8000c98:	08dc      	lsrs	r4, r3, #3
 8000c9a:	e699      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	08d8      	lsrs	r0, r3, #3
 8000ca0:	4653      	mov	r3, sl
 8000ca2:	075a      	lsls	r2, r3, #29
 8000ca4:	000e      	movs	r6, r1
 8000ca6:	4302      	orrs	r2, r0
 8000ca8:	08dc      	lsrs	r4, r3, #3
 8000caa:	e6a1      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000cac:	0011      	movs	r1, r2
 8000cae:	0027      	movs	r7, r4
 8000cb0:	3920      	subs	r1, #32
 8000cb2:	40cf      	lsrs	r7, r1
 8000cb4:	2a20      	cmp	r2, #32
 8000cb6:	d003      	beq.n	8000cc0 <__aeabi_dadd+0x66c>
 8000cb8:	2140      	movs	r1, #64	@ 0x40
 8000cba:	1a8a      	subs	r2, r1, r2
 8000cbc:	4094      	lsls	r4, r2
 8000cbe:	4320      	orrs	r0, r4
 8000cc0:	1e42      	subs	r2, r0, #1
 8000cc2:	4190      	sbcs	r0, r2
 8000cc4:	0005      	movs	r5, r0
 8000cc6:	433d      	orrs	r5, r7
 8000cc8:	e651      	b.n	800096e <__aeabi_dadd+0x31a>
 8000cca:	000c      	movs	r4, r1
 8000ccc:	2500      	movs	r5, #0
 8000cce:	2200      	movs	r2, #0
 8000cd0:	e558      	b.n	8000784 <__aeabi_dadd+0x130>
 8000cd2:	4460      	add	r0, ip
 8000cd4:	4560      	cmp	r0, ip
 8000cd6:	4192      	sbcs	r2, r2
 8000cd8:	4454      	add	r4, sl
 8000cda:	4252      	negs	r2, r2
 8000cdc:	0005      	movs	r5, r0
 8000cde:	18a4      	adds	r4, r4, r2
 8000ce0:	e73a      	b.n	8000b58 <__aeabi_dadd+0x504>
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	075a      	lsls	r2, r3, #29
 8000ce6:	4663      	mov	r3, ip
 8000ce8:	08d9      	lsrs	r1, r3, #3
 8000cea:	4653      	mov	r3, sl
 8000cec:	430a      	orrs	r2, r1
 8000cee:	08dc      	lsrs	r4, r3, #3
 8000cf0:	e67e      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	432a      	orrs	r2, r5
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_dadd+0x6a8>
 8000cfa:	e6ab      	b.n	8000a54 <__aeabi_dadd+0x400>
 8000cfc:	e6c1      	b.n	8000a82 <__aeabi_dadd+0x42e>
 8000cfe:	2120      	movs	r1, #32
 8000d00:	2500      	movs	r5, #0
 8000d02:	1a09      	subs	r1, r1, r0
 8000d04:	e519      	b.n	800073a <__aeabi_dadd+0xe6>
 8000d06:	2200      	movs	r2, #0
 8000d08:	2500      	movs	r5, #0
 8000d0a:	4c01      	ldr	r4, [pc, #4]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000d0c:	e53a      	b.n	8000784 <__aeabi_dadd+0x130>
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	000007ff 	.word	0x000007ff
 8000d14:	ff7fffff 	.word	0xff7fffff
 8000d18:	000007fe 	.word	0x000007fe

08000d1c <__aeabi_ddiv>:
 8000d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1e:	46de      	mov	lr, fp
 8000d20:	4645      	mov	r5, r8
 8000d22:	4657      	mov	r7, sl
 8000d24:	464e      	mov	r6, r9
 8000d26:	b5e0      	push	{r5, r6, r7, lr}
 8000d28:	b087      	sub	sp, #28
 8000d2a:	9200      	str	r2, [sp, #0]
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	030b      	lsls	r3, r1, #12
 8000d30:	0b1b      	lsrs	r3, r3, #12
 8000d32:	469b      	mov	fp, r3
 8000d34:	0fca      	lsrs	r2, r1, #31
 8000d36:	004b      	lsls	r3, r1, #1
 8000d38:	0004      	movs	r4, r0
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	0d5b      	lsrs	r3, r3, #21
 8000d3e:	9202      	str	r2, [sp, #8]
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0x28>
 8000d42:	e16a      	b.n	800101a <__aeabi_ddiv+0x2fe>
 8000d44:	4ad4      	ldr	r2, [pc, #848]	@ (8001098 <__aeabi_ddiv+0x37c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d100      	bne.n	8000d4c <__aeabi_ddiv+0x30>
 8000d4a:	e18c      	b.n	8001066 <__aeabi_ddiv+0x34a>
 8000d4c:	4659      	mov	r1, fp
 8000d4e:	0f42      	lsrs	r2, r0, #29
 8000d50:	00c9      	lsls	r1, r1, #3
 8000d52:	430a      	orrs	r2, r1
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	0409      	lsls	r1, r1, #16
 8000d58:	4311      	orrs	r1, r2
 8000d5a:	00c2      	lsls	r2, r0, #3
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	4acf      	ldr	r2, [pc, #828]	@ (800109c <__aeabi_ddiv+0x380>)
 8000d60:	4689      	mov	r9, r1
 8000d62:	4692      	mov	sl, r2
 8000d64:	449a      	add	sl, r3
 8000d66:	2300      	movs	r3, #0
 8000d68:	2400      	movs	r4, #0
 8000d6a:	9303      	str	r3, [sp, #12]
 8000d6c:	9e00      	ldr	r6, [sp, #0]
 8000d6e:	9f01      	ldr	r7, [sp, #4]
 8000d70:	033b      	lsls	r3, r7, #12
 8000d72:	0b1b      	lsrs	r3, r3, #12
 8000d74:	469b      	mov	fp, r3
 8000d76:	007b      	lsls	r3, r7, #1
 8000d78:	0030      	movs	r0, r6
 8000d7a:	0d5b      	lsrs	r3, r3, #21
 8000d7c:	0ffd      	lsrs	r5, r7, #31
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_ddiv+0x68>
 8000d82:	e128      	b.n	8000fd6 <__aeabi_ddiv+0x2ba>
 8000d84:	4ac4      	ldr	r2, [pc, #784]	@ (8001098 <__aeabi_ddiv+0x37c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x70>
 8000d8a:	e177      	b.n	800107c <__aeabi_ddiv+0x360>
 8000d8c:	4659      	mov	r1, fp
 8000d8e:	0f72      	lsrs	r2, r6, #29
 8000d90:	00c9      	lsls	r1, r1, #3
 8000d92:	430a      	orrs	r2, r1
 8000d94:	2180      	movs	r1, #128	@ 0x80
 8000d96:	0409      	lsls	r1, r1, #16
 8000d98:	4311      	orrs	r1, r2
 8000d9a:	468b      	mov	fp, r1
 8000d9c:	49bf      	ldr	r1, [pc, #764]	@ (800109c <__aeabi_ddiv+0x380>)
 8000d9e:	00f2      	lsls	r2, r6, #3
 8000da0:	468c      	mov	ip, r1
 8000da2:	4651      	mov	r1, sl
 8000da4:	4463      	add	r3, ip
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	469a      	mov	sl, r3
 8000daa:	2300      	movs	r3, #0
 8000dac:	9e02      	ldr	r6, [sp, #8]
 8000dae:	406e      	eors	r6, r5
 8000db0:	2c0f      	cmp	r4, #15
 8000db2:	d827      	bhi.n	8000e04 <__aeabi_ddiv+0xe8>
 8000db4:	49ba      	ldr	r1, [pc, #744]	@ (80010a0 <__aeabi_ddiv+0x384>)
 8000db6:	00a4      	lsls	r4, r4, #2
 8000db8:	5909      	ldr	r1, [r1, r4]
 8000dba:	468f      	mov	pc, r1
 8000dbc:	46cb      	mov	fp, r9
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	9e02      	ldr	r6, [sp, #8]
 8000dc2:	9b03      	ldr	r3, [sp, #12]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d016      	beq.n	8000df6 <__aeabi_ddiv+0xda>
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d100      	bne.n	8000dce <__aeabi_ddiv+0xb2>
 8000dcc:	e2a6      	b.n	800131c <__aeabi_ddiv+0x600>
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_ddiv+0xb8>
 8000dd2:	e0df      	b.n	8000f94 <__aeabi_ddiv+0x278>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2400      	movs	r4, #0
 8000dda:	4690      	mov	r8, r2
 8000ddc:	051b      	lsls	r3, r3, #20
 8000dde:	4323      	orrs	r3, r4
 8000de0:	07f6      	lsls	r6, r6, #31
 8000de2:	4333      	orrs	r3, r6
 8000de4:	4640      	mov	r0, r8
 8000de6:	0019      	movs	r1, r3
 8000de8:	b007      	add	sp, #28
 8000dea:	bcf0      	pop	{r4, r5, r6, r7}
 8000dec:	46bb      	mov	fp, r7
 8000dee:	46b2      	mov	sl, r6
 8000df0:	46a9      	mov	r9, r5
 8000df2:	46a0      	mov	r8, r4
 8000df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df6:	2200      	movs	r2, #0
 8000df8:	2400      	movs	r4, #0
 8000dfa:	4690      	mov	r8, r2
 8000dfc:	4ba6      	ldr	r3, [pc, #664]	@ (8001098 <__aeabi_ddiv+0x37c>)
 8000dfe:	e7ed      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 8000e00:	002e      	movs	r6, r5
 8000e02:	e7df      	b.n	8000dc4 <__aeabi_ddiv+0xa8>
 8000e04:	45cb      	cmp	fp, r9
 8000e06:	d200      	bcs.n	8000e0a <__aeabi_ddiv+0xee>
 8000e08:	e1d4      	b.n	80011b4 <__aeabi_ddiv+0x498>
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_ddiv+0xf2>
 8000e0c:	e1cf      	b.n	80011ae <__aeabi_ddiv+0x492>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	425b      	negs	r3, r3
 8000e12:	469c      	mov	ip, r3
 8000e14:	4644      	mov	r4, r8
 8000e16:	4648      	mov	r0, r9
 8000e18:	2700      	movs	r7, #0
 8000e1a:	44e2      	add	sl, ip
 8000e1c:	465b      	mov	r3, fp
 8000e1e:	0e15      	lsrs	r5, r2, #24
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	431d      	orrs	r5, r3
 8000e24:	0c19      	lsrs	r1, r3, #16
 8000e26:	042b      	lsls	r3, r5, #16
 8000e28:	0212      	lsls	r2, r2, #8
 8000e2a:	9500      	str	r5, [sp, #0]
 8000e2c:	0c1d      	lsrs	r5, r3, #16
 8000e2e:	4691      	mov	r9, r2
 8000e30:	9102      	str	r1, [sp, #8]
 8000e32:	9503      	str	r5, [sp, #12]
 8000e34:	f7ff f9f4 	bl	8000220 <__aeabi_uidivmod>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	436a      	muls	r2, r5
 8000e3c:	040b      	lsls	r3, r1, #16
 8000e3e:	0c21      	lsrs	r1, r4, #16
 8000e40:	4680      	mov	r8, r0
 8000e42:	4319      	orrs	r1, r3
 8000e44:	428a      	cmp	r2, r1
 8000e46:	d909      	bls.n	8000e5c <__aeabi_ddiv+0x140>
 8000e48:	9d00      	ldr	r5, [sp, #0]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	46ac      	mov	ip, r5
 8000e4e:	425b      	negs	r3, r3
 8000e50:	4461      	add	r1, ip
 8000e52:	469c      	mov	ip, r3
 8000e54:	44e0      	add	r8, ip
 8000e56:	428d      	cmp	r5, r1
 8000e58:	d800      	bhi.n	8000e5c <__aeabi_ddiv+0x140>
 8000e5a:	e1fb      	b.n	8001254 <__aeabi_ddiv+0x538>
 8000e5c:	1a88      	subs	r0, r1, r2
 8000e5e:	9902      	ldr	r1, [sp, #8]
 8000e60:	f7ff f9de 	bl	8000220 <__aeabi_uidivmod>
 8000e64:	9a03      	ldr	r2, [sp, #12]
 8000e66:	0424      	lsls	r4, r4, #16
 8000e68:	4342      	muls	r2, r0
 8000e6a:	0409      	lsls	r1, r1, #16
 8000e6c:	0c24      	lsrs	r4, r4, #16
 8000e6e:	0003      	movs	r3, r0
 8000e70:	430c      	orrs	r4, r1
 8000e72:	42a2      	cmp	r2, r4
 8000e74:	d906      	bls.n	8000e84 <__aeabi_ddiv+0x168>
 8000e76:	9900      	ldr	r1, [sp, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	468c      	mov	ip, r1
 8000e7c:	4464      	add	r4, ip
 8000e7e:	42a1      	cmp	r1, r4
 8000e80:	d800      	bhi.n	8000e84 <__aeabi_ddiv+0x168>
 8000e82:	e1e1      	b.n	8001248 <__aeabi_ddiv+0x52c>
 8000e84:	1aa0      	subs	r0, r4, r2
 8000e86:	4642      	mov	r2, r8
 8000e88:	0412      	lsls	r2, r2, #16
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	4693      	mov	fp, r2
 8000e8e:	464b      	mov	r3, r9
 8000e90:	4659      	mov	r1, fp
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	001d      	movs	r5, r3
 8000e96:	9304      	str	r3, [sp, #16]
 8000e98:	040b      	lsls	r3, r1, #16
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	0409      	lsls	r1, r1, #16
 8000e9e:	0c09      	lsrs	r1, r1, #16
 8000ea0:	000c      	movs	r4, r1
 8000ea2:	0c1b      	lsrs	r3, r3, #16
 8000ea4:	435c      	muls	r4, r3
 8000ea6:	0c12      	lsrs	r2, r2, #16
 8000ea8:	436b      	muls	r3, r5
 8000eaa:	4688      	mov	r8, r1
 8000eac:	4351      	muls	r1, r2
 8000eae:	436a      	muls	r2, r5
 8000eb0:	0c25      	lsrs	r5, r4, #16
 8000eb2:	46ac      	mov	ip, r5
 8000eb4:	185b      	adds	r3, r3, r1
 8000eb6:	4463      	add	r3, ip
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	d903      	bls.n	8000ec4 <__aeabi_ddiv+0x1a8>
 8000ebc:	2180      	movs	r1, #128	@ 0x80
 8000ebe:	0249      	lsls	r1, r1, #9
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	4462      	add	r2, ip
 8000ec4:	0c19      	lsrs	r1, r3, #16
 8000ec6:	0424      	lsls	r4, r4, #16
 8000ec8:	041b      	lsls	r3, r3, #16
 8000eca:	0c24      	lsrs	r4, r4, #16
 8000ecc:	188a      	adds	r2, r1, r2
 8000ece:	191c      	adds	r4, r3, r4
 8000ed0:	4290      	cmp	r0, r2
 8000ed2:	d302      	bcc.n	8000eda <__aeabi_ddiv+0x1be>
 8000ed4:	d116      	bne.n	8000f04 <__aeabi_ddiv+0x1e8>
 8000ed6:	42a7      	cmp	r7, r4
 8000ed8:	d214      	bcs.n	8000f04 <__aeabi_ddiv+0x1e8>
 8000eda:	465b      	mov	r3, fp
 8000edc:	9d00      	ldr	r5, [sp, #0]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	444f      	add	r7, r9
 8000ee2:	9305      	str	r3, [sp, #20]
 8000ee4:	454f      	cmp	r7, r9
 8000ee6:	419b      	sbcs	r3, r3
 8000ee8:	46ac      	mov	ip, r5
 8000eea:	425b      	negs	r3, r3
 8000eec:	4463      	add	r3, ip
 8000eee:	18c0      	adds	r0, r0, r3
 8000ef0:	4285      	cmp	r5, r0
 8000ef2:	d300      	bcc.n	8000ef6 <__aeabi_ddiv+0x1da>
 8000ef4:	e1a1      	b.n	800123a <__aeabi_ddiv+0x51e>
 8000ef6:	4282      	cmp	r2, r0
 8000ef8:	d900      	bls.n	8000efc <__aeabi_ddiv+0x1e0>
 8000efa:	e1f6      	b.n	80012ea <__aeabi_ddiv+0x5ce>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1e4>
 8000efe:	e1f1      	b.n	80012e4 <__aeabi_ddiv+0x5c8>
 8000f00:	9b05      	ldr	r3, [sp, #20]
 8000f02:	469b      	mov	fp, r3
 8000f04:	1b3c      	subs	r4, r7, r4
 8000f06:	42a7      	cmp	r7, r4
 8000f08:	41bf      	sbcs	r7, r7
 8000f0a:	9d00      	ldr	r5, [sp, #0]
 8000f0c:	1a80      	subs	r0, r0, r2
 8000f0e:	427f      	negs	r7, r7
 8000f10:	1bc0      	subs	r0, r0, r7
 8000f12:	4285      	cmp	r5, r0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_ddiv+0x1fc>
 8000f16:	e1d0      	b.n	80012ba <__aeabi_ddiv+0x59e>
 8000f18:	9902      	ldr	r1, [sp, #8]
 8000f1a:	f7ff f981 	bl	8000220 <__aeabi_uidivmod>
 8000f1e:	9a03      	ldr	r2, [sp, #12]
 8000f20:	040b      	lsls	r3, r1, #16
 8000f22:	4342      	muls	r2, r0
 8000f24:	0c21      	lsrs	r1, r4, #16
 8000f26:	0007      	movs	r7, r0
 8000f28:	4319      	orrs	r1, r3
 8000f2a:	428a      	cmp	r2, r1
 8000f2c:	d900      	bls.n	8000f30 <__aeabi_ddiv+0x214>
 8000f2e:	e178      	b.n	8001222 <__aeabi_ddiv+0x506>
 8000f30:	1a88      	subs	r0, r1, r2
 8000f32:	9902      	ldr	r1, [sp, #8]
 8000f34:	f7ff f974 	bl	8000220 <__aeabi_uidivmod>
 8000f38:	9a03      	ldr	r2, [sp, #12]
 8000f3a:	0424      	lsls	r4, r4, #16
 8000f3c:	4342      	muls	r2, r0
 8000f3e:	0409      	lsls	r1, r1, #16
 8000f40:	0c24      	lsrs	r4, r4, #16
 8000f42:	0003      	movs	r3, r0
 8000f44:	430c      	orrs	r4, r1
 8000f46:	42a2      	cmp	r2, r4
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x230>
 8000f4a:	e15d      	b.n	8001208 <__aeabi_ddiv+0x4ec>
 8000f4c:	4641      	mov	r1, r8
 8000f4e:	1aa4      	subs	r4, r4, r2
 8000f50:	043a      	lsls	r2, r7, #16
 8000f52:	431a      	orrs	r2, r3
 8000f54:	9d04      	ldr	r5, [sp, #16]
 8000f56:	0413      	lsls	r3, r2, #16
 8000f58:	0c1b      	lsrs	r3, r3, #16
 8000f5a:	4359      	muls	r1, r3
 8000f5c:	4647      	mov	r7, r8
 8000f5e:	436b      	muls	r3, r5
 8000f60:	469c      	mov	ip, r3
 8000f62:	0c10      	lsrs	r0, r2, #16
 8000f64:	4347      	muls	r7, r0
 8000f66:	0c0b      	lsrs	r3, r1, #16
 8000f68:	44bc      	add	ip, r7
 8000f6a:	4463      	add	r3, ip
 8000f6c:	4368      	muls	r0, r5
 8000f6e:	429f      	cmp	r7, r3
 8000f70:	d903      	bls.n	8000f7a <__aeabi_ddiv+0x25e>
 8000f72:	2580      	movs	r5, #128	@ 0x80
 8000f74:	026d      	lsls	r5, r5, #9
 8000f76:	46ac      	mov	ip, r5
 8000f78:	4460      	add	r0, ip
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	0409      	lsls	r1, r1, #16
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	0c09      	lsrs	r1, r1, #16
 8000f82:	183f      	adds	r7, r7, r0
 8000f84:	185b      	adds	r3, r3, r1
 8000f86:	42bc      	cmp	r4, r7
 8000f88:	d200      	bcs.n	8000f8c <__aeabi_ddiv+0x270>
 8000f8a:	e102      	b.n	8001192 <__aeabi_ddiv+0x476>
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_ddiv+0x274>
 8000f8e:	e0fd      	b.n	800118c <__aeabi_ddiv+0x470>
 8000f90:	2301      	movs	r3, #1
 8000f92:	431a      	orrs	r2, r3
 8000f94:	4b43      	ldr	r3, [pc, #268]	@ (80010a4 <__aeabi_ddiv+0x388>)
 8000f96:	4453      	add	r3, sl
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_ddiv+0x282>
 8000f9c:	e0ae      	b.n	80010fc <__aeabi_ddiv+0x3e0>
 8000f9e:	0751      	lsls	r1, r2, #29
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_ddiv+0x288>
 8000fa2:	e198      	b.n	80012d6 <__aeabi_ddiv+0x5ba>
 8000fa4:	4659      	mov	r1, fp
 8000fa6:	01c9      	lsls	r1, r1, #7
 8000fa8:	d506      	bpl.n	8000fb8 <__aeabi_ddiv+0x29c>
 8000faa:	4659      	mov	r1, fp
 8000fac:	4b3e      	ldr	r3, [pc, #248]	@ (80010a8 <__aeabi_ddiv+0x38c>)
 8000fae:	4019      	ands	r1, r3
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	468b      	mov	fp, r1
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4453      	add	r3, sl
 8000fb8:	493c      	ldr	r1, [pc, #240]	@ (80010ac <__aeabi_ddiv+0x390>)
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	dd00      	ble.n	8000fc0 <__aeabi_ddiv+0x2a4>
 8000fbe:	e71a      	b.n	8000df6 <__aeabi_ddiv+0xda>
 8000fc0:	4659      	mov	r1, fp
 8000fc2:	08d2      	lsrs	r2, r2, #3
 8000fc4:	0749      	lsls	r1, r1, #29
 8000fc6:	4311      	orrs	r1, r2
 8000fc8:	465a      	mov	r2, fp
 8000fca:	055b      	lsls	r3, r3, #21
 8000fcc:	0254      	lsls	r4, r2, #9
 8000fce:	4688      	mov	r8, r1
 8000fd0:	0b24      	lsrs	r4, r4, #12
 8000fd2:	0d5b      	lsrs	r3, r3, #21
 8000fd4:	e702      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 8000fd6:	465a      	mov	r2, fp
 8000fd8:	9b00      	ldr	r3, [sp, #0]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x2c4>
 8000fde:	e07e      	b.n	80010de <__aeabi_ddiv+0x3c2>
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0x2cc>
 8000fe6:	e100      	b.n	80011ea <__aeabi_ddiv+0x4ce>
 8000fe8:	4658      	mov	r0, fp
 8000fea:	f001 f9cb 	bl	8002384 <__clzsi2>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	3a0b      	subs	r2, #11
 8000ff4:	271d      	movs	r7, #29
 8000ff6:	9e00      	ldr	r6, [sp, #0]
 8000ff8:	1aba      	subs	r2, r7, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	4658      	mov	r0, fp
 8000ffe:	40d6      	lsrs	r6, r2
 8001000:	3908      	subs	r1, #8
 8001002:	4088      	lsls	r0, r1
 8001004:	0032      	movs	r2, r6
 8001006:	4302      	orrs	r2, r0
 8001008:	4693      	mov	fp, r2
 800100a:	9a00      	ldr	r2, [sp, #0]
 800100c:	408a      	lsls	r2, r1
 800100e:	4928      	ldr	r1, [pc, #160]	@ (80010b0 <__aeabi_ddiv+0x394>)
 8001010:	4453      	add	r3, sl
 8001012:	468a      	mov	sl, r1
 8001014:	449a      	add	sl, r3
 8001016:	2300      	movs	r3, #0
 8001018:	e6c8      	b.n	8000dac <__aeabi_ddiv+0x90>
 800101a:	465b      	mov	r3, fp
 800101c:	4303      	orrs	r3, r0
 800101e:	4699      	mov	r9, r3
 8001020:	d056      	beq.n	80010d0 <__aeabi_ddiv+0x3b4>
 8001022:	465b      	mov	r3, fp
 8001024:	2b00      	cmp	r3, #0
 8001026:	d100      	bne.n	800102a <__aeabi_ddiv+0x30e>
 8001028:	e0cd      	b.n	80011c6 <__aeabi_ddiv+0x4aa>
 800102a:	4658      	mov	r0, fp
 800102c:	f001 f9aa 	bl	8002384 <__clzsi2>
 8001030:	230b      	movs	r3, #11
 8001032:	425b      	negs	r3, r3
 8001034:	469c      	mov	ip, r3
 8001036:	0002      	movs	r2, r0
 8001038:	4484      	add	ip, r0
 800103a:	4666      	mov	r6, ip
 800103c:	231d      	movs	r3, #29
 800103e:	1b9b      	subs	r3, r3, r6
 8001040:	0026      	movs	r6, r4
 8001042:	0011      	movs	r1, r2
 8001044:	4658      	mov	r0, fp
 8001046:	40de      	lsrs	r6, r3
 8001048:	3908      	subs	r1, #8
 800104a:	4088      	lsls	r0, r1
 800104c:	0033      	movs	r3, r6
 800104e:	4303      	orrs	r3, r0
 8001050:	4699      	mov	r9, r3
 8001052:	0023      	movs	r3, r4
 8001054:	408b      	lsls	r3, r1
 8001056:	4698      	mov	r8, r3
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <__aeabi_ddiv+0x398>)
 800105a:	2400      	movs	r4, #0
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	469a      	mov	sl, r3
 8001060:	2300      	movs	r3, #0
 8001062:	9303      	str	r3, [sp, #12]
 8001064:	e682      	b.n	8000d6c <__aeabi_ddiv+0x50>
 8001066:	465a      	mov	r2, fp
 8001068:	4302      	orrs	r2, r0
 800106a:	4691      	mov	r9, r2
 800106c:	d12a      	bne.n	80010c4 <__aeabi_ddiv+0x3a8>
 800106e:	2200      	movs	r2, #0
 8001070:	469a      	mov	sl, r3
 8001072:	2302      	movs	r3, #2
 8001074:	4690      	mov	r8, r2
 8001076:	2408      	movs	r4, #8
 8001078:	9303      	str	r3, [sp, #12]
 800107a:	e677      	b.n	8000d6c <__aeabi_ddiv+0x50>
 800107c:	465a      	mov	r2, fp
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	431a      	orrs	r2, r3
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <__aeabi_ddiv+0x39c>)
 8001084:	469c      	mov	ip, r3
 8001086:	44e2      	add	sl, ip
 8001088:	2a00      	cmp	r2, #0
 800108a:	d117      	bne.n	80010bc <__aeabi_ddiv+0x3a0>
 800108c:	2302      	movs	r3, #2
 800108e:	431c      	orrs	r4, r3
 8001090:	2300      	movs	r3, #0
 8001092:	469b      	mov	fp, r3
 8001094:	3302      	adds	r3, #2
 8001096:	e689      	b.n	8000dac <__aeabi_ddiv+0x90>
 8001098:	000007ff 	.word	0x000007ff
 800109c:	fffffc01 	.word	0xfffffc01
 80010a0:	08008b28 	.word	0x08008b28
 80010a4:	000003ff 	.word	0x000003ff
 80010a8:	feffffff 	.word	0xfeffffff
 80010ac:	000007fe 	.word	0x000007fe
 80010b0:	000003f3 	.word	0x000003f3
 80010b4:	fffffc0d 	.word	0xfffffc0d
 80010b8:	fffff801 	.word	0xfffff801
 80010bc:	2303      	movs	r3, #3
 80010be:	0032      	movs	r2, r6
 80010c0:	431c      	orrs	r4, r3
 80010c2:	e673      	b.n	8000dac <__aeabi_ddiv+0x90>
 80010c4:	469a      	mov	sl, r3
 80010c6:	2303      	movs	r3, #3
 80010c8:	46d9      	mov	r9, fp
 80010ca:	240c      	movs	r4, #12
 80010cc:	9303      	str	r3, [sp, #12]
 80010ce:	e64d      	b.n	8000d6c <__aeabi_ddiv+0x50>
 80010d0:	2300      	movs	r3, #0
 80010d2:	4698      	mov	r8, r3
 80010d4:	469a      	mov	sl, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	2404      	movs	r4, #4
 80010da:	9303      	str	r3, [sp, #12]
 80010dc:	e646      	b.n	8000d6c <__aeabi_ddiv+0x50>
 80010de:	2301      	movs	r3, #1
 80010e0:	431c      	orrs	r4, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	469b      	mov	fp, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	e660      	b.n	8000dac <__aeabi_ddiv+0x90>
 80010ea:	2300      	movs	r3, #0
 80010ec:	2480      	movs	r4, #128	@ 0x80
 80010ee:	4698      	mov	r8, r3
 80010f0:	2600      	movs	r6, #0
 80010f2:	4b92      	ldr	r3, [pc, #584]	@ (800133c <__aeabi_ddiv+0x620>)
 80010f4:	0324      	lsls	r4, r4, #12
 80010f6:	e671      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 80010f8:	2201      	movs	r2, #1
 80010fa:	4252      	negs	r2, r2
 80010fc:	2101      	movs	r1, #1
 80010fe:	1ac9      	subs	r1, r1, r3
 8001100:	2938      	cmp	r1, #56	@ 0x38
 8001102:	dd00      	ble.n	8001106 <__aeabi_ddiv+0x3ea>
 8001104:	e666      	b.n	8000dd4 <__aeabi_ddiv+0xb8>
 8001106:	291f      	cmp	r1, #31
 8001108:	dc00      	bgt.n	800110c <__aeabi_ddiv+0x3f0>
 800110a:	e0ab      	b.n	8001264 <__aeabi_ddiv+0x548>
 800110c:	201f      	movs	r0, #31
 800110e:	4240      	negs	r0, r0
 8001110:	1ac3      	subs	r3, r0, r3
 8001112:	4658      	mov	r0, fp
 8001114:	40d8      	lsrs	r0, r3
 8001116:	0003      	movs	r3, r0
 8001118:	2920      	cmp	r1, #32
 800111a:	d004      	beq.n	8001126 <__aeabi_ddiv+0x40a>
 800111c:	4658      	mov	r0, fp
 800111e:	4988      	ldr	r1, [pc, #544]	@ (8001340 <__aeabi_ddiv+0x624>)
 8001120:	4451      	add	r1, sl
 8001122:	4088      	lsls	r0, r1
 8001124:	4302      	orrs	r2, r0
 8001126:	1e51      	subs	r1, r2, #1
 8001128:	418a      	sbcs	r2, r1
 800112a:	431a      	orrs	r2, r3
 800112c:	2307      	movs	r3, #7
 800112e:	0019      	movs	r1, r3
 8001130:	2400      	movs	r4, #0
 8001132:	4011      	ands	r1, r2
 8001134:	4213      	tst	r3, r2
 8001136:	d00c      	beq.n	8001152 <__aeabi_ddiv+0x436>
 8001138:	230f      	movs	r3, #15
 800113a:	4013      	ands	r3, r2
 800113c:	2b04      	cmp	r3, #4
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x426>
 8001140:	e0f9      	b.n	8001336 <__aeabi_ddiv+0x61a>
 8001142:	1d11      	adds	r1, r2, #4
 8001144:	4291      	cmp	r1, r2
 8001146:	419b      	sbcs	r3, r3
 8001148:	000a      	movs	r2, r1
 800114a:	425b      	negs	r3, r3
 800114c:	0759      	lsls	r1, r3, #29
 800114e:	025b      	lsls	r3, r3, #9
 8001150:	0b1c      	lsrs	r4, r3, #12
 8001152:	08d2      	lsrs	r2, r2, #3
 8001154:	430a      	orrs	r2, r1
 8001156:	4690      	mov	r8, r2
 8001158:	2300      	movs	r3, #0
 800115a:	e63f      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800115c:	2480      	movs	r4, #128	@ 0x80
 800115e:	464b      	mov	r3, r9
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	4223      	tst	r3, r4
 8001164:	d009      	beq.n	800117a <__aeabi_ddiv+0x45e>
 8001166:	465b      	mov	r3, fp
 8001168:	4223      	tst	r3, r4
 800116a:	d106      	bne.n	800117a <__aeabi_ddiv+0x45e>
 800116c:	431c      	orrs	r4, r3
 800116e:	0324      	lsls	r4, r4, #12
 8001170:	002e      	movs	r6, r5
 8001172:	4690      	mov	r8, r2
 8001174:	4b71      	ldr	r3, [pc, #452]	@ (800133c <__aeabi_ddiv+0x620>)
 8001176:	0b24      	lsrs	r4, r4, #12
 8001178:	e630      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800117a:	2480      	movs	r4, #128	@ 0x80
 800117c:	464b      	mov	r3, r9
 800117e:	0324      	lsls	r4, r4, #12
 8001180:	431c      	orrs	r4, r3
 8001182:	0324      	lsls	r4, r4, #12
 8001184:	9e02      	ldr	r6, [sp, #8]
 8001186:	4b6d      	ldr	r3, [pc, #436]	@ (800133c <__aeabi_ddiv+0x620>)
 8001188:	0b24      	lsrs	r4, r4, #12
 800118a:	e627      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_ddiv+0x476>
 8001190:	e700      	b.n	8000f94 <__aeabi_ddiv+0x278>
 8001192:	9800      	ldr	r0, [sp, #0]
 8001194:	1e51      	subs	r1, r2, #1
 8001196:	4684      	mov	ip, r0
 8001198:	4464      	add	r4, ip
 800119a:	4284      	cmp	r4, r0
 800119c:	d200      	bcs.n	80011a0 <__aeabi_ddiv+0x484>
 800119e:	e084      	b.n	80012aa <__aeabi_ddiv+0x58e>
 80011a0:	42bc      	cmp	r4, r7
 80011a2:	d200      	bcs.n	80011a6 <__aeabi_ddiv+0x48a>
 80011a4:	e0ae      	b.n	8001304 <__aeabi_ddiv+0x5e8>
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x48e>
 80011a8:	e0c1      	b.n	800132e <__aeabi_ddiv+0x612>
 80011aa:	000a      	movs	r2, r1
 80011ac:	e6f0      	b.n	8000f90 <__aeabi_ddiv+0x274>
 80011ae:	4542      	cmp	r2, r8
 80011b0:	d900      	bls.n	80011b4 <__aeabi_ddiv+0x498>
 80011b2:	e62c      	b.n	8000e0e <__aeabi_ddiv+0xf2>
 80011b4:	464b      	mov	r3, r9
 80011b6:	07dc      	lsls	r4, r3, #31
 80011b8:	0858      	lsrs	r0, r3, #1
 80011ba:	4643      	mov	r3, r8
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	431c      	orrs	r4, r3
 80011c0:	4643      	mov	r3, r8
 80011c2:	07df      	lsls	r7, r3, #31
 80011c4:	e62a      	b.n	8000e1c <__aeabi_ddiv+0x100>
 80011c6:	f001 f8dd 	bl	8002384 <__clzsi2>
 80011ca:	2315      	movs	r3, #21
 80011cc:	469c      	mov	ip, r3
 80011ce:	4484      	add	ip, r0
 80011d0:	0002      	movs	r2, r0
 80011d2:	4663      	mov	r3, ip
 80011d4:	3220      	adds	r2, #32
 80011d6:	2b1c      	cmp	r3, #28
 80011d8:	dc00      	bgt.n	80011dc <__aeabi_ddiv+0x4c0>
 80011da:	e72e      	b.n	800103a <__aeabi_ddiv+0x31e>
 80011dc:	0023      	movs	r3, r4
 80011de:	3808      	subs	r0, #8
 80011e0:	4083      	lsls	r3, r0
 80011e2:	4699      	mov	r9, r3
 80011e4:	2300      	movs	r3, #0
 80011e6:	4698      	mov	r8, r3
 80011e8:	e736      	b.n	8001058 <__aeabi_ddiv+0x33c>
 80011ea:	f001 f8cb 	bl	8002384 <__clzsi2>
 80011ee:	0002      	movs	r2, r0
 80011f0:	0003      	movs	r3, r0
 80011f2:	3215      	adds	r2, #21
 80011f4:	3320      	adds	r3, #32
 80011f6:	2a1c      	cmp	r2, #28
 80011f8:	dc00      	bgt.n	80011fc <__aeabi_ddiv+0x4e0>
 80011fa:	e6fb      	b.n	8000ff4 <__aeabi_ddiv+0x2d8>
 80011fc:	9900      	ldr	r1, [sp, #0]
 80011fe:	3808      	subs	r0, #8
 8001200:	4081      	lsls	r1, r0
 8001202:	2200      	movs	r2, #0
 8001204:	468b      	mov	fp, r1
 8001206:	e702      	b.n	800100e <__aeabi_ddiv+0x2f2>
 8001208:	9900      	ldr	r1, [sp, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	468c      	mov	ip, r1
 800120e:	4464      	add	r4, ip
 8001210:	42a1      	cmp	r1, r4
 8001212:	d900      	bls.n	8001216 <__aeabi_ddiv+0x4fa>
 8001214:	e69a      	b.n	8000f4c <__aeabi_ddiv+0x230>
 8001216:	42a2      	cmp	r2, r4
 8001218:	d800      	bhi.n	800121c <__aeabi_ddiv+0x500>
 800121a:	e697      	b.n	8000f4c <__aeabi_ddiv+0x230>
 800121c:	1e83      	subs	r3, r0, #2
 800121e:	4464      	add	r4, ip
 8001220:	e694      	b.n	8000f4c <__aeabi_ddiv+0x230>
 8001222:	46ac      	mov	ip, r5
 8001224:	4461      	add	r1, ip
 8001226:	3f01      	subs	r7, #1
 8001228:	428d      	cmp	r5, r1
 800122a:	d900      	bls.n	800122e <__aeabi_ddiv+0x512>
 800122c:	e680      	b.n	8000f30 <__aeabi_ddiv+0x214>
 800122e:	428a      	cmp	r2, r1
 8001230:	d800      	bhi.n	8001234 <__aeabi_ddiv+0x518>
 8001232:	e67d      	b.n	8000f30 <__aeabi_ddiv+0x214>
 8001234:	1e87      	subs	r7, r0, #2
 8001236:	4461      	add	r1, ip
 8001238:	e67a      	b.n	8000f30 <__aeabi_ddiv+0x214>
 800123a:	4285      	cmp	r5, r0
 800123c:	d000      	beq.n	8001240 <__aeabi_ddiv+0x524>
 800123e:	e65f      	b.n	8000f00 <__aeabi_ddiv+0x1e4>
 8001240:	45b9      	cmp	r9, r7
 8001242:	d900      	bls.n	8001246 <__aeabi_ddiv+0x52a>
 8001244:	e65c      	b.n	8000f00 <__aeabi_ddiv+0x1e4>
 8001246:	e656      	b.n	8000ef6 <__aeabi_ddiv+0x1da>
 8001248:	42a2      	cmp	r2, r4
 800124a:	d800      	bhi.n	800124e <__aeabi_ddiv+0x532>
 800124c:	e61a      	b.n	8000e84 <__aeabi_ddiv+0x168>
 800124e:	1e83      	subs	r3, r0, #2
 8001250:	4464      	add	r4, ip
 8001252:	e617      	b.n	8000e84 <__aeabi_ddiv+0x168>
 8001254:	428a      	cmp	r2, r1
 8001256:	d800      	bhi.n	800125a <__aeabi_ddiv+0x53e>
 8001258:	e600      	b.n	8000e5c <__aeabi_ddiv+0x140>
 800125a:	46ac      	mov	ip, r5
 800125c:	1e83      	subs	r3, r0, #2
 800125e:	4698      	mov	r8, r3
 8001260:	4461      	add	r1, ip
 8001262:	e5fb      	b.n	8000e5c <__aeabi_ddiv+0x140>
 8001264:	4837      	ldr	r0, [pc, #220]	@ (8001344 <__aeabi_ddiv+0x628>)
 8001266:	0014      	movs	r4, r2
 8001268:	4450      	add	r0, sl
 800126a:	4082      	lsls	r2, r0
 800126c:	465b      	mov	r3, fp
 800126e:	0017      	movs	r7, r2
 8001270:	4083      	lsls	r3, r0
 8001272:	40cc      	lsrs	r4, r1
 8001274:	1e7a      	subs	r2, r7, #1
 8001276:	4197      	sbcs	r7, r2
 8001278:	4323      	orrs	r3, r4
 800127a:	433b      	orrs	r3, r7
 800127c:	001a      	movs	r2, r3
 800127e:	465b      	mov	r3, fp
 8001280:	40cb      	lsrs	r3, r1
 8001282:	0751      	lsls	r1, r2, #29
 8001284:	d009      	beq.n	800129a <__aeabi_ddiv+0x57e>
 8001286:	210f      	movs	r1, #15
 8001288:	4011      	ands	r1, r2
 800128a:	2904      	cmp	r1, #4
 800128c:	d005      	beq.n	800129a <__aeabi_ddiv+0x57e>
 800128e:	1d11      	adds	r1, r2, #4
 8001290:	4291      	cmp	r1, r2
 8001292:	4192      	sbcs	r2, r2
 8001294:	4252      	negs	r2, r2
 8001296:	189b      	adds	r3, r3, r2
 8001298:	000a      	movs	r2, r1
 800129a:	0219      	lsls	r1, r3, #8
 800129c:	d400      	bmi.n	80012a0 <__aeabi_ddiv+0x584>
 800129e:	e755      	b.n	800114c <__aeabi_ddiv+0x430>
 80012a0:	2200      	movs	r2, #0
 80012a2:	2301      	movs	r3, #1
 80012a4:	2400      	movs	r4, #0
 80012a6:	4690      	mov	r8, r2
 80012a8:	e598      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 80012aa:	000a      	movs	r2, r1
 80012ac:	42bc      	cmp	r4, r7
 80012ae:	d000      	beq.n	80012b2 <__aeabi_ddiv+0x596>
 80012b0:	e66e      	b.n	8000f90 <__aeabi_ddiv+0x274>
 80012b2:	454b      	cmp	r3, r9
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x59c>
 80012b6:	e66b      	b.n	8000f90 <__aeabi_ddiv+0x274>
 80012b8:	e66c      	b.n	8000f94 <__aeabi_ddiv+0x278>
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <__aeabi_ddiv+0x62c>)
 80012bc:	4a23      	ldr	r2, [pc, #140]	@ (800134c <__aeabi_ddiv+0x630>)
 80012be:	4453      	add	r3, sl
 80012c0:	4592      	cmp	sl, r2
 80012c2:	da00      	bge.n	80012c6 <__aeabi_ddiv+0x5aa>
 80012c4:	e718      	b.n	80010f8 <__aeabi_ddiv+0x3dc>
 80012c6:	2101      	movs	r1, #1
 80012c8:	4249      	negs	r1, r1
 80012ca:	1d0a      	adds	r2, r1, #4
 80012cc:	428a      	cmp	r2, r1
 80012ce:	4189      	sbcs	r1, r1
 80012d0:	4249      	negs	r1, r1
 80012d2:	448b      	add	fp, r1
 80012d4:	e666      	b.n	8000fa4 <__aeabi_ddiv+0x288>
 80012d6:	210f      	movs	r1, #15
 80012d8:	4011      	ands	r1, r2
 80012da:	2904      	cmp	r1, #4
 80012dc:	d100      	bne.n	80012e0 <__aeabi_ddiv+0x5c4>
 80012de:	e661      	b.n	8000fa4 <__aeabi_ddiv+0x288>
 80012e0:	0011      	movs	r1, r2
 80012e2:	e7f2      	b.n	80012ca <__aeabi_ddiv+0x5ae>
 80012e4:	42bc      	cmp	r4, r7
 80012e6:	d800      	bhi.n	80012ea <__aeabi_ddiv+0x5ce>
 80012e8:	e60a      	b.n	8000f00 <__aeabi_ddiv+0x1e4>
 80012ea:	2302      	movs	r3, #2
 80012ec:	425b      	negs	r3, r3
 80012ee:	469c      	mov	ip, r3
 80012f0:	9900      	ldr	r1, [sp, #0]
 80012f2:	444f      	add	r7, r9
 80012f4:	454f      	cmp	r7, r9
 80012f6:	419b      	sbcs	r3, r3
 80012f8:	44e3      	add	fp, ip
 80012fa:	468c      	mov	ip, r1
 80012fc:	425b      	negs	r3, r3
 80012fe:	4463      	add	r3, ip
 8001300:	18c0      	adds	r0, r0, r3
 8001302:	e5ff      	b.n	8000f04 <__aeabi_ddiv+0x1e8>
 8001304:	4649      	mov	r1, r9
 8001306:	9d00      	ldr	r5, [sp, #0]
 8001308:	0048      	lsls	r0, r1, #1
 800130a:	4548      	cmp	r0, r9
 800130c:	4189      	sbcs	r1, r1
 800130e:	46ac      	mov	ip, r5
 8001310:	4249      	negs	r1, r1
 8001312:	4461      	add	r1, ip
 8001314:	4681      	mov	r9, r0
 8001316:	3a02      	subs	r2, #2
 8001318:	1864      	adds	r4, r4, r1
 800131a:	e7c7      	b.n	80012ac <__aeabi_ddiv+0x590>
 800131c:	2480      	movs	r4, #128	@ 0x80
 800131e:	465b      	mov	r3, fp
 8001320:	0324      	lsls	r4, r4, #12
 8001322:	431c      	orrs	r4, r3
 8001324:	0324      	lsls	r4, r4, #12
 8001326:	4690      	mov	r8, r2
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__aeabi_ddiv+0x620>)
 800132a:	0b24      	lsrs	r4, r4, #12
 800132c:	e556      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800132e:	4599      	cmp	r9, r3
 8001330:	d3e8      	bcc.n	8001304 <__aeabi_ddiv+0x5e8>
 8001332:	000a      	movs	r2, r1
 8001334:	e7bd      	b.n	80012b2 <__aeabi_ddiv+0x596>
 8001336:	2300      	movs	r3, #0
 8001338:	e708      	b.n	800114c <__aeabi_ddiv+0x430>
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	000007ff 	.word	0x000007ff
 8001340:	0000043e 	.word	0x0000043e
 8001344:	0000041e 	.word	0x0000041e
 8001348:	000003ff 	.word	0x000003ff
 800134c:	fffffc02 	.word	0xfffffc02

08001350 <__eqdf2>:
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001352:	4657      	mov	r7, sl
 8001354:	46de      	mov	lr, fp
 8001356:	464e      	mov	r6, r9
 8001358:	4645      	mov	r5, r8
 800135a:	b5e0      	push	{r5, r6, r7, lr}
 800135c:	000d      	movs	r5, r1
 800135e:	0004      	movs	r4, r0
 8001360:	0fe8      	lsrs	r0, r5, #31
 8001362:	4683      	mov	fp, r0
 8001364:	0309      	lsls	r1, r1, #12
 8001366:	0fd8      	lsrs	r0, r3, #31
 8001368:	0b09      	lsrs	r1, r1, #12
 800136a:	4682      	mov	sl, r0
 800136c:	4819      	ldr	r0, [pc, #100]	@ (80013d4 <__eqdf2+0x84>)
 800136e:	468c      	mov	ip, r1
 8001370:	031f      	lsls	r7, r3, #12
 8001372:	0069      	lsls	r1, r5, #1
 8001374:	005e      	lsls	r6, r3, #1
 8001376:	0d49      	lsrs	r1, r1, #21
 8001378:	0b3f      	lsrs	r7, r7, #12
 800137a:	0d76      	lsrs	r6, r6, #21
 800137c:	4281      	cmp	r1, r0
 800137e:	d018      	beq.n	80013b2 <__eqdf2+0x62>
 8001380:	4286      	cmp	r6, r0
 8001382:	d00f      	beq.n	80013a4 <__eqdf2+0x54>
 8001384:	2001      	movs	r0, #1
 8001386:	42b1      	cmp	r1, r6
 8001388:	d10d      	bne.n	80013a6 <__eqdf2+0x56>
 800138a:	45bc      	cmp	ip, r7
 800138c:	d10b      	bne.n	80013a6 <__eqdf2+0x56>
 800138e:	4294      	cmp	r4, r2
 8001390:	d109      	bne.n	80013a6 <__eqdf2+0x56>
 8001392:	45d3      	cmp	fp, sl
 8001394:	d01c      	beq.n	80013d0 <__eqdf2+0x80>
 8001396:	2900      	cmp	r1, #0
 8001398:	d105      	bne.n	80013a6 <__eqdf2+0x56>
 800139a:	4660      	mov	r0, ip
 800139c:	4320      	orrs	r0, r4
 800139e:	1e43      	subs	r3, r0, #1
 80013a0:	4198      	sbcs	r0, r3
 80013a2:	e000      	b.n	80013a6 <__eqdf2+0x56>
 80013a4:	2001      	movs	r0, #1
 80013a6:	bcf0      	pop	{r4, r5, r6, r7}
 80013a8:	46bb      	mov	fp, r7
 80013aa:	46b2      	mov	sl, r6
 80013ac:	46a9      	mov	r9, r5
 80013ae:	46a0      	mov	r8, r4
 80013b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b2:	2001      	movs	r0, #1
 80013b4:	428e      	cmp	r6, r1
 80013b6:	d1f6      	bne.n	80013a6 <__eqdf2+0x56>
 80013b8:	4661      	mov	r1, ip
 80013ba:	4339      	orrs	r1, r7
 80013bc:	000f      	movs	r7, r1
 80013be:	4317      	orrs	r7, r2
 80013c0:	4327      	orrs	r7, r4
 80013c2:	d1f0      	bne.n	80013a6 <__eqdf2+0x56>
 80013c4:	465b      	mov	r3, fp
 80013c6:	4652      	mov	r2, sl
 80013c8:	1a98      	subs	r0, r3, r2
 80013ca:	1e43      	subs	r3, r0, #1
 80013cc:	4198      	sbcs	r0, r3
 80013ce:	e7ea      	b.n	80013a6 <__eqdf2+0x56>
 80013d0:	2000      	movs	r0, #0
 80013d2:	e7e8      	b.n	80013a6 <__eqdf2+0x56>
 80013d4:	000007ff 	.word	0x000007ff

080013d8 <__gedf2>:
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	4657      	mov	r7, sl
 80013dc:	464e      	mov	r6, r9
 80013de:	4645      	mov	r5, r8
 80013e0:	46de      	mov	lr, fp
 80013e2:	b5e0      	push	{r5, r6, r7, lr}
 80013e4:	000d      	movs	r5, r1
 80013e6:	030f      	lsls	r7, r1, #12
 80013e8:	0b39      	lsrs	r1, r7, #12
 80013ea:	b083      	sub	sp, #12
 80013ec:	0004      	movs	r4, r0
 80013ee:	4680      	mov	r8, r0
 80013f0:	9101      	str	r1, [sp, #4]
 80013f2:	0058      	lsls	r0, r3, #1
 80013f4:	0fe9      	lsrs	r1, r5, #31
 80013f6:	4f31      	ldr	r7, [pc, #196]	@ (80014bc <__gedf2+0xe4>)
 80013f8:	0d40      	lsrs	r0, r0, #21
 80013fa:	468c      	mov	ip, r1
 80013fc:	006e      	lsls	r6, r5, #1
 80013fe:	0319      	lsls	r1, r3, #12
 8001400:	4682      	mov	sl, r0
 8001402:	4691      	mov	r9, r2
 8001404:	0d76      	lsrs	r6, r6, #21
 8001406:	0b09      	lsrs	r1, r1, #12
 8001408:	0fd8      	lsrs	r0, r3, #31
 800140a:	42be      	cmp	r6, r7
 800140c:	d01f      	beq.n	800144e <__gedf2+0x76>
 800140e:	45ba      	cmp	sl, r7
 8001410:	d00f      	beq.n	8001432 <__gedf2+0x5a>
 8001412:	2e00      	cmp	r6, #0
 8001414:	d12f      	bne.n	8001476 <__gedf2+0x9e>
 8001416:	4655      	mov	r5, sl
 8001418:	9e01      	ldr	r6, [sp, #4]
 800141a:	4334      	orrs	r4, r6
 800141c:	2d00      	cmp	r5, #0
 800141e:	d127      	bne.n	8001470 <__gedf2+0x98>
 8001420:	430a      	orrs	r2, r1
 8001422:	d03a      	beq.n	800149a <__gedf2+0xc2>
 8001424:	2c00      	cmp	r4, #0
 8001426:	d145      	bne.n	80014b4 <__gedf2+0xdc>
 8001428:	2800      	cmp	r0, #0
 800142a:	d11a      	bne.n	8001462 <__gedf2+0x8a>
 800142c:	2001      	movs	r0, #1
 800142e:	4240      	negs	r0, r0
 8001430:	e017      	b.n	8001462 <__gedf2+0x8a>
 8001432:	4311      	orrs	r1, r2
 8001434:	d13b      	bne.n	80014ae <__gedf2+0xd6>
 8001436:	2e00      	cmp	r6, #0
 8001438:	d102      	bne.n	8001440 <__gedf2+0x68>
 800143a:	9f01      	ldr	r7, [sp, #4]
 800143c:	4327      	orrs	r7, r4
 800143e:	d0f3      	beq.n	8001428 <__gedf2+0x50>
 8001440:	4584      	cmp	ip, r0
 8001442:	d109      	bne.n	8001458 <__gedf2+0x80>
 8001444:	4663      	mov	r3, ip
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <__gedf2+0x54>
 800144a:	4660      	mov	r0, ip
 800144c:	e009      	b.n	8001462 <__gedf2+0x8a>
 800144e:	9f01      	ldr	r7, [sp, #4]
 8001450:	4327      	orrs	r7, r4
 8001452:	d12c      	bne.n	80014ae <__gedf2+0xd6>
 8001454:	45b2      	cmp	sl, r6
 8001456:	d024      	beq.n	80014a2 <__gedf2+0xca>
 8001458:	4663      	mov	r3, ip
 800145a:	2002      	movs	r0, #2
 800145c:	3b01      	subs	r3, #1
 800145e:	4018      	ands	r0, r3
 8001460:	3801      	subs	r0, #1
 8001462:	b003      	add	sp, #12
 8001464:	bcf0      	pop	{r4, r5, r6, r7}
 8001466:	46bb      	mov	fp, r7
 8001468:	46b2      	mov	sl, r6
 800146a:	46a9      	mov	r9, r5
 800146c:	46a0      	mov	r8, r4
 800146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001470:	2c00      	cmp	r4, #0
 8001472:	d0d9      	beq.n	8001428 <__gedf2+0x50>
 8001474:	e7e4      	b.n	8001440 <__gedf2+0x68>
 8001476:	4654      	mov	r4, sl
 8001478:	2c00      	cmp	r4, #0
 800147a:	d0ed      	beq.n	8001458 <__gedf2+0x80>
 800147c:	4584      	cmp	ip, r0
 800147e:	d1eb      	bne.n	8001458 <__gedf2+0x80>
 8001480:	4556      	cmp	r6, sl
 8001482:	dce9      	bgt.n	8001458 <__gedf2+0x80>
 8001484:	dbde      	blt.n	8001444 <__gedf2+0x6c>
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	428b      	cmp	r3, r1
 800148a:	d8e5      	bhi.n	8001458 <__gedf2+0x80>
 800148c:	d1da      	bne.n	8001444 <__gedf2+0x6c>
 800148e:	45c8      	cmp	r8, r9
 8001490:	d8e2      	bhi.n	8001458 <__gedf2+0x80>
 8001492:	2000      	movs	r0, #0
 8001494:	45c8      	cmp	r8, r9
 8001496:	d2e4      	bcs.n	8001462 <__gedf2+0x8a>
 8001498:	e7d4      	b.n	8001444 <__gedf2+0x6c>
 800149a:	2000      	movs	r0, #0
 800149c:	2c00      	cmp	r4, #0
 800149e:	d0e0      	beq.n	8001462 <__gedf2+0x8a>
 80014a0:	e7da      	b.n	8001458 <__gedf2+0x80>
 80014a2:	4311      	orrs	r1, r2
 80014a4:	d103      	bne.n	80014ae <__gedf2+0xd6>
 80014a6:	4584      	cmp	ip, r0
 80014a8:	d1d6      	bne.n	8001458 <__gedf2+0x80>
 80014aa:	2000      	movs	r0, #0
 80014ac:	e7d9      	b.n	8001462 <__gedf2+0x8a>
 80014ae:	2002      	movs	r0, #2
 80014b0:	4240      	negs	r0, r0
 80014b2:	e7d6      	b.n	8001462 <__gedf2+0x8a>
 80014b4:	4584      	cmp	ip, r0
 80014b6:	d0e6      	beq.n	8001486 <__gedf2+0xae>
 80014b8:	e7ce      	b.n	8001458 <__gedf2+0x80>
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	000007ff 	.word	0x000007ff

080014c0 <__ledf2>:
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	4657      	mov	r7, sl
 80014c4:	464e      	mov	r6, r9
 80014c6:	4645      	mov	r5, r8
 80014c8:	46de      	mov	lr, fp
 80014ca:	b5e0      	push	{r5, r6, r7, lr}
 80014cc:	000d      	movs	r5, r1
 80014ce:	030f      	lsls	r7, r1, #12
 80014d0:	0004      	movs	r4, r0
 80014d2:	4680      	mov	r8, r0
 80014d4:	0fe8      	lsrs	r0, r5, #31
 80014d6:	0b39      	lsrs	r1, r7, #12
 80014d8:	4684      	mov	ip, r0
 80014da:	b083      	sub	sp, #12
 80014dc:	0058      	lsls	r0, r3, #1
 80014de:	4f30      	ldr	r7, [pc, #192]	@ (80015a0 <__ledf2+0xe0>)
 80014e0:	0d40      	lsrs	r0, r0, #21
 80014e2:	9101      	str	r1, [sp, #4]
 80014e4:	031e      	lsls	r6, r3, #12
 80014e6:	0069      	lsls	r1, r5, #1
 80014e8:	4682      	mov	sl, r0
 80014ea:	4691      	mov	r9, r2
 80014ec:	0d49      	lsrs	r1, r1, #21
 80014ee:	0b36      	lsrs	r6, r6, #12
 80014f0:	0fd8      	lsrs	r0, r3, #31
 80014f2:	42b9      	cmp	r1, r7
 80014f4:	d020      	beq.n	8001538 <__ledf2+0x78>
 80014f6:	45ba      	cmp	sl, r7
 80014f8:	d00f      	beq.n	800151a <__ledf2+0x5a>
 80014fa:	2900      	cmp	r1, #0
 80014fc:	d12b      	bne.n	8001556 <__ledf2+0x96>
 80014fe:	9901      	ldr	r1, [sp, #4]
 8001500:	430c      	orrs	r4, r1
 8001502:	4651      	mov	r1, sl
 8001504:	2900      	cmp	r1, #0
 8001506:	d137      	bne.n	8001578 <__ledf2+0xb8>
 8001508:	4332      	orrs	r2, r6
 800150a:	d038      	beq.n	800157e <__ledf2+0xbe>
 800150c:	2c00      	cmp	r4, #0
 800150e:	d144      	bne.n	800159a <__ledf2+0xda>
 8001510:	2800      	cmp	r0, #0
 8001512:	d119      	bne.n	8001548 <__ledf2+0x88>
 8001514:	2001      	movs	r0, #1
 8001516:	4240      	negs	r0, r0
 8001518:	e016      	b.n	8001548 <__ledf2+0x88>
 800151a:	4316      	orrs	r6, r2
 800151c:	d113      	bne.n	8001546 <__ledf2+0x86>
 800151e:	2900      	cmp	r1, #0
 8001520:	d102      	bne.n	8001528 <__ledf2+0x68>
 8001522:	9f01      	ldr	r7, [sp, #4]
 8001524:	4327      	orrs	r7, r4
 8001526:	d0f3      	beq.n	8001510 <__ledf2+0x50>
 8001528:	4584      	cmp	ip, r0
 800152a:	d020      	beq.n	800156e <__ledf2+0xae>
 800152c:	4663      	mov	r3, ip
 800152e:	2002      	movs	r0, #2
 8001530:	3b01      	subs	r3, #1
 8001532:	4018      	ands	r0, r3
 8001534:	3801      	subs	r0, #1
 8001536:	e007      	b.n	8001548 <__ledf2+0x88>
 8001538:	9f01      	ldr	r7, [sp, #4]
 800153a:	4327      	orrs	r7, r4
 800153c:	d103      	bne.n	8001546 <__ledf2+0x86>
 800153e:	458a      	cmp	sl, r1
 8001540:	d1f4      	bne.n	800152c <__ledf2+0x6c>
 8001542:	4316      	orrs	r6, r2
 8001544:	d01f      	beq.n	8001586 <__ledf2+0xc6>
 8001546:	2002      	movs	r0, #2
 8001548:	b003      	add	sp, #12
 800154a:	bcf0      	pop	{r4, r5, r6, r7}
 800154c:	46bb      	mov	fp, r7
 800154e:	46b2      	mov	sl, r6
 8001550:	46a9      	mov	r9, r5
 8001552:	46a0      	mov	r8, r4
 8001554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001556:	4654      	mov	r4, sl
 8001558:	2c00      	cmp	r4, #0
 800155a:	d0e7      	beq.n	800152c <__ledf2+0x6c>
 800155c:	4584      	cmp	ip, r0
 800155e:	d1e5      	bne.n	800152c <__ledf2+0x6c>
 8001560:	4551      	cmp	r1, sl
 8001562:	dce3      	bgt.n	800152c <__ledf2+0x6c>
 8001564:	db03      	blt.n	800156e <__ledf2+0xae>
 8001566:	9b01      	ldr	r3, [sp, #4]
 8001568:	42b3      	cmp	r3, r6
 800156a:	d8df      	bhi.n	800152c <__ledf2+0x6c>
 800156c:	d00f      	beq.n	800158e <__ledf2+0xce>
 800156e:	4663      	mov	r3, ip
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0cf      	beq.n	8001514 <__ledf2+0x54>
 8001574:	4660      	mov	r0, ip
 8001576:	e7e7      	b.n	8001548 <__ledf2+0x88>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d0c9      	beq.n	8001510 <__ledf2+0x50>
 800157c:	e7d4      	b.n	8001528 <__ledf2+0x68>
 800157e:	2000      	movs	r0, #0
 8001580:	2c00      	cmp	r4, #0
 8001582:	d0e1      	beq.n	8001548 <__ledf2+0x88>
 8001584:	e7d2      	b.n	800152c <__ledf2+0x6c>
 8001586:	4584      	cmp	ip, r0
 8001588:	d1d0      	bne.n	800152c <__ledf2+0x6c>
 800158a:	2000      	movs	r0, #0
 800158c:	e7dc      	b.n	8001548 <__ledf2+0x88>
 800158e:	45c8      	cmp	r8, r9
 8001590:	d8cc      	bhi.n	800152c <__ledf2+0x6c>
 8001592:	2000      	movs	r0, #0
 8001594:	45c8      	cmp	r8, r9
 8001596:	d2d7      	bcs.n	8001548 <__ledf2+0x88>
 8001598:	e7e9      	b.n	800156e <__ledf2+0xae>
 800159a:	4584      	cmp	ip, r0
 800159c:	d0e3      	beq.n	8001566 <__ledf2+0xa6>
 800159e:	e7c5      	b.n	800152c <__ledf2+0x6c>
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__aeabi_dmul>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4657      	mov	r7, sl
 80015a8:	46de      	mov	lr, fp
 80015aa:	464e      	mov	r6, r9
 80015ac:	4645      	mov	r5, r8
 80015ae:	b5e0      	push	{r5, r6, r7, lr}
 80015b0:	001f      	movs	r7, r3
 80015b2:	030b      	lsls	r3, r1, #12
 80015b4:	0b1b      	lsrs	r3, r3, #12
 80015b6:	0016      	movs	r6, r2
 80015b8:	469a      	mov	sl, r3
 80015ba:	0fca      	lsrs	r2, r1, #31
 80015bc:	004b      	lsls	r3, r1, #1
 80015be:	0004      	movs	r4, r0
 80015c0:	4693      	mov	fp, r2
 80015c2:	b087      	sub	sp, #28
 80015c4:	0d5b      	lsrs	r3, r3, #21
 80015c6:	d100      	bne.n	80015ca <__aeabi_dmul+0x26>
 80015c8:	e0d5      	b.n	8001776 <__aeabi_dmul+0x1d2>
 80015ca:	4abb      	ldr	r2, [pc, #748]	@ (80018b8 <__aeabi_dmul+0x314>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2e>
 80015d0:	e0f8      	b.n	80017c4 <__aeabi_dmul+0x220>
 80015d2:	4651      	mov	r1, sl
 80015d4:	0f42      	lsrs	r2, r0, #29
 80015d6:	00c9      	lsls	r1, r1, #3
 80015d8:	430a      	orrs	r2, r1
 80015da:	2180      	movs	r1, #128	@ 0x80
 80015dc:	0409      	lsls	r1, r1, #16
 80015de:	4311      	orrs	r1, r2
 80015e0:	00c2      	lsls	r2, r0, #3
 80015e2:	4691      	mov	r9, r2
 80015e4:	4ab5      	ldr	r2, [pc, #724]	@ (80018bc <__aeabi_dmul+0x318>)
 80015e6:	468a      	mov	sl, r1
 80015e8:	189d      	adds	r5, r3, r2
 80015ea:	2300      	movs	r3, #0
 80015ec:	4698      	mov	r8, r3
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	033c      	lsls	r4, r7, #12
 80015f2:	007b      	lsls	r3, r7, #1
 80015f4:	0ffa      	lsrs	r2, r7, #31
 80015f6:	0030      	movs	r0, r6
 80015f8:	0b24      	lsrs	r4, r4, #12
 80015fa:	0d5b      	lsrs	r3, r3, #21
 80015fc:	9200      	str	r2, [sp, #0]
 80015fe:	d100      	bne.n	8001602 <__aeabi_dmul+0x5e>
 8001600:	e096      	b.n	8001730 <__aeabi_dmul+0x18c>
 8001602:	4aad      	ldr	r2, [pc, #692]	@ (80018b8 <__aeabi_dmul+0x314>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d031      	beq.n	800166c <__aeabi_dmul+0xc8>
 8001608:	0f72      	lsrs	r2, r6, #29
 800160a:	00e4      	lsls	r4, r4, #3
 800160c:	4322      	orrs	r2, r4
 800160e:	2480      	movs	r4, #128	@ 0x80
 8001610:	0424      	lsls	r4, r4, #16
 8001612:	4314      	orrs	r4, r2
 8001614:	4aa9      	ldr	r2, [pc, #676]	@ (80018bc <__aeabi_dmul+0x318>)
 8001616:	00f0      	lsls	r0, r6, #3
 8001618:	4694      	mov	ip, r2
 800161a:	4463      	add	r3, ip
 800161c:	195b      	adds	r3, r3, r5
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	9201      	str	r2, [sp, #4]
 8001622:	4642      	mov	r2, r8
 8001624:	2600      	movs	r6, #0
 8001626:	2a0a      	cmp	r2, #10
 8001628:	dc42      	bgt.n	80016b0 <__aeabi_dmul+0x10c>
 800162a:	465a      	mov	r2, fp
 800162c:	9900      	ldr	r1, [sp, #0]
 800162e:	404a      	eors	r2, r1
 8001630:	4693      	mov	fp, r2
 8001632:	4642      	mov	r2, r8
 8001634:	2a02      	cmp	r2, #2
 8001636:	dc32      	bgt.n	800169e <__aeabi_dmul+0xfa>
 8001638:	3a01      	subs	r2, #1
 800163a:	2a01      	cmp	r2, #1
 800163c:	d900      	bls.n	8001640 <__aeabi_dmul+0x9c>
 800163e:	e149      	b.n	80018d4 <__aeabi_dmul+0x330>
 8001640:	2e02      	cmp	r6, #2
 8001642:	d100      	bne.n	8001646 <__aeabi_dmul+0xa2>
 8001644:	e0ca      	b.n	80017dc <__aeabi_dmul+0x238>
 8001646:	2e01      	cmp	r6, #1
 8001648:	d13d      	bne.n	80016c6 <__aeabi_dmul+0x122>
 800164a:	2300      	movs	r3, #0
 800164c:	2400      	movs	r4, #0
 800164e:	2200      	movs	r2, #0
 8001650:	0010      	movs	r0, r2
 8001652:	465a      	mov	r2, fp
 8001654:	051b      	lsls	r3, r3, #20
 8001656:	4323      	orrs	r3, r4
 8001658:	07d2      	lsls	r2, r2, #31
 800165a:	4313      	orrs	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	b007      	add	sp, #28
 8001660:	bcf0      	pop	{r4, r5, r6, r7}
 8001662:	46bb      	mov	fp, r7
 8001664:	46b2      	mov	sl, r6
 8001666:	46a9      	mov	r9, r5
 8001668:	46a0      	mov	r8, r4
 800166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166c:	4b92      	ldr	r3, [pc, #584]	@ (80018b8 <__aeabi_dmul+0x314>)
 800166e:	4326      	orrs	r6, r4
 8001670:	18eb      	adds	r3, r5, r3
 8001672:	2e00      	cmp	r6, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_dmul+0xd4>
 8001676:	e0bb      	b.n	80017f0 <__aeabi_dmul+0x24c>
 8001678:	2203      	movs	r2, #3
 800167a:	4641      	mov	r1, r8
 800167c:	4311      	orrs	r1, r2
 800167e:	465a      	mov	r2, fp
 8001680:	4688      	mov	r8, r1
 8001682:	9900      	ldr	r1, [sp, #0]
 8001684:	404a      	eors	r2, r1
 8001686:	2180      	movs	r1, #128	@ 0x80
 8001688:	0109      	lsls	r1, r1, #4
 800168a:	468c      	mov	ip, r1
 800168c:	0029      	movs	r1, r5
 800168e:	4461      	add	r1, ip
 8001690:	9101      	str	r1, [sp, #4]
 8001692:	4641      	mov	r1, r8
 8001694:	290a      	cmp	r1, #10
 8001696:	dd00      	ble.n	800169a <__aeabi_dmul+0xf6>
 8001698:	e233      	b.n	8001b02 <__aeabi_dmul+0x55e>
 800169a:	4693      	mov	fp, r2
 800169c:	2603      	movs	r6, #3
 800169e:	4642      	mov	r2, r8
 80016a0:	2701      	movs	r7, #1
 80016a2:	4097      	lsls	r7, r2
 80016a4:	21a6      	movs	r1, #166	@ 0xa6
 80016a6:	003a      	movs	r2, r7
 80016a8:	00c9      	lsls	r1, r1, #3
 80016aa:	400a      	ands	r2, r1
 80016ac:	420f      	tst	r7, r1
 80016ae:	d031      	beq.n	8001714 <__aeabi_dmul+0x170>
 80016b0:	9e02      	ldr	r6, [sp, #8]
 80016b2:	2e02      	cmp	r6, #2
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x114>
 80016b6:	e235      	b.n	8001b24 <__aeabi_dmul+0x580>
 80016b8:	2e03      	cmp	r6, #3
 80016ba:	d100      	bne.n	80016be <__aeabi_dmul+0x11a>
 80016bc:	e1d2      	b.n	8001a64 <__aeabi_dmul+0x4c0>
 80016be:	4654      	mov	r4, sl
 80016c0:	4648      	mov	r0, r9
 80016c2:	2e01      	cmp	r6, #1
 80016c4:	d0c1      	beq.n	800164a <__aeabi_dmul+0xa6>
 80016c6:	9a01      	ldr	r2, [sp, #4]
 80016c8:	4b7d      	ldr	r3, [pc, #500]	@ (80018c0 <__aeabi_dmul+0x31c>)
 80016ca:	4694      	mov	ip, r2
 80016cc:	4463      	add	r3, ip
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	dc00      	bgt.n	80016d4 <__aeabi_dmul+0x130>
 80016d2:	e0c0      	b.n	8001856 <__aeabi_dmul+0x2b2>
 80016d4:	0742      	lsls	r2, r0, #29
 80016d6:	d009      	beq.n	80016ec <__aeabi_dmul+0x148>
 80016d8:	220f      	movs	r2, #15
 80016da:	4002      	ands	r2, r0
 80016dc:	2a04      	cmp	r2, #4
 80016de:	d005      	beq.n	80016ec <__aeabi_dmul+0x148>
 80016e0:	1d02      	adds	r2, r0, #4
 80016e2:	4282      	cmp	r2, r0
 80016e4:	4180      	sbcs	r0, r0
 80016e6:	4240      	negs	r0, r0
 80016e8:	1824      	adds	r4, r4, r0
 80016ea:	0010      	movs	r0, r2
 80016ec:	01e2      	lsls	r2, r4, #7
 80016ee:	d506      	bpl.n	80016fe <__aeabi_dmul+0x15a>
 80016f0:	4b74      	ldr	r3, [pc, #464]	@ (80018c4 <__aeabi_dmul+0x320>)
 80016f2:	9a01      	ldr	r2, [sp, #4]
 80016f4:	401c      	ands	r4, r3
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	4694      	mov	ip, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4463      	add	r3, ip
 80016fe:	4a72      	ldr	r2, [pc, #456]	@ (80018c8 <__aeabi_dmul+0x324>)
 8001700:	4293      	cmp	r3, r2
 8001702:	dc6b      	bgt.n	80017dc <__aeabi_dmul+0x238>
 8001704:	0762      	lsls	r2, r4, #29
 8001706:	08c0      	lsrs	r0, r0, #3
 8001708:	0264      	lsls	r4, r4, #9
 800170a:	055b      	lsls	r3, r3, #21
 800170c:	4302      	orrs	r2, r0
 800170e:	0b24      	lsrs	r4, r4, #12
 8001710:	0d5b      	lsrs	r3, r3, #21
 8001712:	e79d      	b.n	8001650 <__aeabi_dmul+0xac>
 8001714:	2190      	movs	r1, #144	@ 0x90
 8001716:	0089      	lsls	r1, r1, #2
 8001718:	420f      	tst	r7, r1
 800171a:	d163      	bne.n	80017e4 <__aeabi_dmul+0x240>
 800171c:	2288      	movs	r2, #136	@ 0x88
 800171e:	423a      	tst	r2, r7
 8001720:	d100      	bne.n	8001724 <__aeabi_dmul+0x180>
 8001722:	e0d7      	b.n	80018d4 <__aeabi_dmul+0x330>
 8001724:	9b00      	ldr	r3, [sp, #0]
 8001726:	46a2      	mov	sl, r4
 8001728:	469b      	mov	fp, r3
 800172a:	4681      	mov	r9, r0
 800172c:	9602      	str	r6, [sp, #8]
 800172e:	e7bf      	b.n	80016b0 <__aeabi_dmul+0x10c>
 8001730:	0023      	movs	r3, r4
 8001732:	4333      	orrs	r3, r6
 8001734:	d100      	bne.n	8001738 <__aeabi_dmul+0x194>
 8001736:	e07f      	b.n	8001838 <__aeabi_dmul+0x294>
 8001738:	2c00      	cmp	r4, #0
 800173a:	d100      	bne.n	800173e <__aeabi_dmul+0x19a>
 800173c:	e1ad      	b.n	8001a9a <__aeabi_dmul+0x4f6>
 800173e:	0020      	movs	r0, r4
 8001740:	f000 fe20 	bl	8002384 <__clzsi2>
 8001744:	0002      	movs	r2, r0
 8001746:	0003      	movs	r3, r0
 8001748:	3a0b      	subs	r2, #11
 800174a:	201d      	movs	r0, #29
 800174c:	0019      	movs	r1, r3
 800174e:	1a82      	subs	r2, r0, r2
 8001750:	0030      	movs	r0, r6
 8001752:	3908      	subs	r1, #8
 8001754:	40d0      	lsrs	r0, r2
 8001756:	408c      	lsls	r4, r1
 8001758:	4304      	orrs	r4, r0
 800175a:	0030      	movs	r0, r6
 800175c:	4088      	lsls	r0, r1
 800175e:	4a5b      	ldr	r2, [pc, #364]	@ (80018cc <__aeabi_dmul+0x328>)
 8001760:	1aeb      	subs	r3, r5, r3
 8001762:	4694      	mov	ip, r2
 8001764:	4463      	add	r3, ip
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	4642      	mov	r2, r8
 800176c:	2600      	movs	r6, #0
 800176e:	2a0a      	cmp	r2, #10
 8001770:	dc00      	bgt.n	8001774 <__aeabi_dmul+0x1d0>
 8001772:	e75a      	b.n	800162a <__aeabi_dmul+0x86>
 8001774:	e79c      	b.n	80016b0 <__aeabi_dmul+0x10c>
 8001776:	4653      	mov	r3, sl
 8001778:	4303      	orrs	r3, r0
 800177a:	4699      	mov	r9, r3
 800177c:	d054      	beq.n	8001828 <__aeabi_dmul+0x284>
 800177e:	4653      	mov	r3, sl
 8001780:	2b00      	cmp	r3, #0
 8001782:	d100      	bne.n	8001786 <__aeabi_dmul+0x1e2>
 8001784:	e177      	b.n	8001a76 <__aeabi_dmul+0x4d2>
 8001786:	4650      	mov	r0, sl
 8001788:	f000 fdfc 	bl	8002384 <__clzsi2>
 800178c:	230b      	movs	r3, #11
 800178e:	425b      	negs	r3, r3
 8001790:	469c      	mov	ip, r3
 8001792:	0002      	movs	r2, r0
 8001794:	4484      	add	ip, r0
 8001796:	0011      	movs	r1, r2
 8001798:	4650      	mov	r0, sl
 800179a:	3908      	subs	r1, #8
 800179c:	4088      	lsls	r0, r1
 800179e:	231d      	movs	r3, #29
 80017a0:	4680      	mov	r8, r0
 80017a2:	4660      	mov	r0, ip
 80017a4:	1a1b      	subs	r3, r3, r0
 80017a6:	0020      	movs	r0, r4
 80017a8:	40d8      	lsrs	r0, r3
 80017aa:	0003      	movs	r3, r0
 80017ac:	4640      	mov	r0, r8
 80017ae:	4303      	orrs	r3, r0
 80017b0:	469a      	mov	sl, r3
 80017b2:	0023      	movs	r3, r4
 80017b4:	408b      	lsls	r3, r1
 80017b6:	4699      	mov	r9, r3
 80017b8:	2300      	movs	r3, #0
 80017ba:	4d44      	ldr	r5, [pc, #272]	@ (80018cc <__aeabi_dmul+0x328>)
 80017bc:	4698      	mov	r8, r3
 80017be:	1aad      	subs	r5, r5, r2
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	e715      	b.n	80015f0 <__aeabi_dmul+0x4c>
 80017c4:	4652      	mov	r2, sl
 80017c6:	4302      	orrs	r2, r0
 80017c8:	4691      	mov	r9, r2
 80017ca:	d126      	bne.n	800181a <__aeabi_dmul+0x276>
 80017cc:	2200      	movs	r2, #0
 80017ce:	001d      	movs	r5, r3
 80017d0:	2302      	movs	r3, #2
 80017d2:	4692      	mov	sl, r2
 80017d4:	3208      	adds	r2, #8
 80017d6:	4690      	mov	r8, r2
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	e709      	b.n	80015f0 <__aeabi_dmul+0x4c>
 80017dc:	2400      	movs	r4, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <__aeabi_dmul+0x314>)
 80017e2:	e735      	b.n	8001650 <__aeabi_dmul+0xac>
 80017e4:	2300      	movs	r3, #0
 80017e6:	2480      	movs	r4, #128	@ 0x80
 80017e8:	469b      	mov	fp, r3
 80017ea:	0324      	lsls	r4, r4, #12
 80017ec:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <__aeabi_dmul+0x314>)
 80017ee:	e72f      	b.n	8001650 <__aeabi_dmul+0xac>
 80017f0:	2202      	movs	r2, #2
 80017f2:	4641      	mov	r1, r8
 80017f4:	4311      	orrs	r1, r2
 80017f6:	2280      	movs	r2, #128	@ 0x80
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	4694      	mov	ip, r2
 80017fc:	002a      	movs	r2, r5
 80017fe:	4462      	add	r2, ip
 8001800:	4688      	mov	r8, r1
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	290a      	cmp	r1, #10
 8001806:	dd00      	ble.n	800180a <__aeabi_dmul+0x266>
 8001808:	e752      	b.n	80016b0 <__aeabi_dmul+0x10c>
 800180a:	465a      	mov	r2, fp
 800180c:	2000      	movs	r0, #0
 800180e:	9900      	ldr	r1, [sp, #0]
 8001810:	0004      	movs	r4, r0
 8001812:	404a      	eors	r2, r1
 8001814:	4693      	mov	fp, r2
 8001816:	2602      	movs	r6, #2
 8001818:	e70b      	b.n	8001632 <__aeabi_dmul+0x8e>
 800181a:	220c      	movs	r2, #12
 800181c:	001d      	movs	r5, r3
 800181e:	2303      	movs	r3, #3
 8001820:	4681      	mov	r9, r0
 8001822:	4690      	mov	r8, r2
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	e6e3      	b.n	80015f0 <__aeabi_dmul+0x4c>
 8001828:	2300      	movs	r3, #0
 800182a:	469a      	mov	sl, r3
 800182c:	3304      	adds	r3, #4
 800182e:	4698      	mov	r8, r3
 8001830:	3b03      	subs	r3, #3
 8001832:	2500      	movs	r5, #0
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	e6db      	b.n	80015f0 <__aeabi_dmul+0x4c>
 8001838:	4642      	mov	r2, r8
 800183a:	3301      	adds	r3, #1
 800183c:	431a      	orrs	r2, r3
 800183e:	002b      	movs	r3, r5
 8001840:	4690      	mov	r8, r2
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	9201      	str	r2, [sp, #4]
 8001846:	4642      	mov	r2, r8
 8001848:	2400      	movs	r4, #0
 800184a:	2000      	movs	r0, #0
 800184c:	2601      	movs	r6, #1
 800184e:	2a0a      	cmp	r2, #10
 8001850:	dc00      	bgt.n	8001854 <__aeabi_dmul+0x2b0>
 8001852:	e6ea      	b.n	800162a <__aeabi_dmul+0x86>
 8001854:	e72c      	b.n	80016b0 <__aeabi_dmul+0x10c>
 8001856:	2201      	movs	r2, #1
 8001858:	1ad2      	subs	r2, r2, r3
 800185a:	2a38      	cmp	r2, #56	@ 0x38
 800185c:	dd00      	ble.n	8001860 <__aeabi_dmul+0x2bc>
 800185e:	e6f4      	b.n	800164a <__aeabi_dmul+0xa6>
 8001860:	2a1f      	cmp	r2, #31
 8001862:	dc00      	bgt.n	8001866 <__aeabi_dmul+0x2c2>
 8001864:	e12a      	b.n	8001abc <__aeabi_dmul+0x518>
 8001866:	211f      	movs	r1, #31
 8001868:	4249      	negs	r1, r1
 800186a:	1acb      	subs	r3, r1, r3
 800186c:	0021      	movs	r1, r4
 800186e:	40d9      	lsrs	r1, r3
 8001870:	000b      	movs	r3, r1
 8001872:	2a20      	cmp	r2, #32
 8001874:	d005      	beq.n	8001882 <__aeabi_dmul+0x2de>
 8001876:	4a16      	ldr	r2, [pc, #88]	@ (80018d0 <__aeabi_dmul+0x32c>)
 8001878:	9d01      	ldr	r5, [sp, #4]
 800187a:	4694      	mov	ip, r2
 800187c:	4465      	add	r5, ip
 800187e:	40ac      	lsls	r4, r5
 8001880:	4320      	orrs	r0, r4
 8001882:	1e42      	subs	r2, r0, #1
 8001884:	4190      	sbcs	r0, r2
 8001886:	4318      	orrs	r0, r3
 8001888:	2307      	movs	r3, #7
 800188a:	0019      	movs	r1, r3
 800188c:	2400      	movs	r4, #0
 800188e:	4001      	ands	r1, r0
 8001890:	4203      	tst	r3, r0
 8001892:	d00c      	beq.n	80018ae <__aeabi_dmul+0x30a>
 8001894:	230f      	movs	r3, #15
 8001896:	4003      	ands	r3, r0
 8001898:	2b04      	cmp	r3, #4
 800189a:	d100      	bne.n	800189e <__aeabi_dmul+0x2fa>
 800189c:	e140      	b.n	8001b20 <__aeabi_dmul+0x57c>
 800189e:	1d03      	adds	r3, r0, #4
 80018a0:	4283      	cmp	r3, r0
 80018a2:	41a4      	sbcs	r4, r4
 80018a4:	0018      	movs	r0, r3
 80018a6:	4264      	negs	r4, r4
 80018a8:	0761      	lsls	r1, r4, #29
 80018aa:	0264      	lsls	r4, r4, #9
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	08c2      	lsrs	r2, r0, #3
 80018b0:	2300      	movs	r3, #0
 80018b2:	430a      	orrs	r2, r1
 80018b4:	e6cc      	b.n	8001650 <__aeabi_dmul+0xac>
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	000007ff 	.word	0x000007ff
 80018bc:	fffffc01 	.word	0xfffffc01
 80018c0:	000003ff 	.word	0x000003ff
 80018c4:	feffffff 	.word	0xfeffffff
 80018c8:	000007fe 	.word	0x000007fe
 80018cc:	fffffc0d 	.word	0xfffffc0d
 80018d0:	0000043e 	.word	0x0000043e
 80018d4:	4649      	mov	r1, r9
 80018d6:	464a      	mov	r2, r9
 80018d8:	0409      	lsls	r1, r1, #16
 80018da:	0c09      	lsrs	r1, r1, #16
 80018dc:	000d      	movs	r5, r1
 80018de:	0c16      	lsrs	r6, r2, #16
 80018e0:	0c02      	lsrs	r2, r0, #16
 80018e2:	0400      	lsls	r0, r0, #16
 80018e4:	0c00      	lsrs	r0, r0, #16
 80018e6:	4345      	muls	r5, r0
 80018e8:	46ac      	mov	ip, r5
 80018ea:	0005      	movs	r5, r0
 80018ec:	4375      	muls	r5, r6
 80018ee:	46a8      	mov	r8, r5
 80018f0:	0015      	movs	r5, r2
 80018f2:	000f      	movs	r7, r1
 80018f4:	4375      	muls	r5, r6
 80018f6:	9200      	str	r2, [sp, #0]
 80018f8:	9502      	str	r5, [sp, #8]
 80018fa:	002a      	movs	r2, r5
 80018fc:	9d00      	ldr	r5, [sp, #0]
 80018fe:	436f      	muls	r7, r5
 8001900:	4665      	mov	r5, ip
 8001902:	0c2d      	lsrs	r5, r5, #16
 8001904:	46a9      	mov	r9, r5
 8001906:	4447      	add	r7, r8
 8001908:	444f      	add	r7, r9
 800190a:	45b8      	cmp	r8, r7
 800190c:	d905      	bls.n	800191a <__aeabi_dmul+0x376>
 800190e:	0015      	movs	r5, r2
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	0252      	lsls	r2, r2, #9
 8001914:	4690      	mov	r8, r2
 8001916:	4445      	add	r5, r8
 8001918:	9502      	str	r5, [sp, #8]
 800191a:	0c3d      	lsrs	r5, r7, #16
 800191c:	9503      	str	r5, [sp, #12]
 800191e:	4665      	mov	r5, ip
 8001920:	042d      	lsls	r5, r5, #16
 8001922:	043f      	lsls	r7, r7, #16
 8001924:	0c2d      	lsrs	r5, r5, #16
 8001926:	46ac      	mov	ip, r5
 8001928:	003d      	movs	r5, r7
 800192a:	4465      	add	r5, ip
 800192c:	9504      	str	r5, [sp, #16]
 800192e:	0c25      	lsrs	r5, r4, #16
 8001930:	0424      	lsls	r4, r4, #16
 8001932:	0c24      	lsrs	r4, r4, #16
 8001934:	46ac      	mov	ip, r5
 8001936:	0025      	movs	r5, r4
 8001938:	4375      	muls	r5, r6
 800193a:	46a8      	mov	r8, r5
 800193c:	4665      	mov	r5, ip
 800193e:	000f      	movs	r7, r1
 8001940:	4369      	muls	r1, r5
 8001942:	4441      	add	r1, r8
 8001944:	4689      	mov	r9, r1
 8001946:	4367      	muls	r7, r4
 8001948:	0c39      	lsrs	r1, r7, #16
 800194a:	4449      	add	r1, r9
 800194c:	436e      	muls	r6, r5
 800194e:	4588      	cmp	r8, r1
 8001950:	d903      	bls.n	800195a <__aeabi_dmul+0x3b6>
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	0252      	lsls	r2, r2, #9
 8001956:	4690      	mov	r8, r2
 8001958:	4446      	add	r6, r8
 800195a:	0c0d      	lsrs	r5, r1, #16
 800195c:	46a8      	mov	r8, r5
 800195e:	0035      	movs	r5, r6
 8001960:	4445      	add	r5, r8
 8001962:	9505      	str	r5, [sp, #20]
 8001964:	9d03      	ldr	r5, [sp, #12]
 8001966:	043f      	lsls	r7, r7, #16
 8001968:	46a8      	mov	r8, r5
 800196a:	0c3f      	lsrs	r7, r7, #16
 800196c:	0409      	lsls	r1, r1, #16
 800196e:	19c9      	adds	r1, r1, r7
 8001970:	4488      	add	r8, r1
 8001972:	4645      	mov	r5, r8
 8001974:	9503      	str	r5, [sp, #12]
 8001976:	4655      	mov	r5, sl
 8001978:	042e      	lsls	r6, r5, #16
 800197a:	0c36      	lsrs	r6, r6, #16
 800197c:	0c2f      	lsrs	r7, r5, #16
 800197e:	0035      	movs	r5, r6
 8001980:	4345      	muls	r5, r0
 8001982:	4378      	muls	r0, r7
 8001984:	4681      	mov	r9, r0
 8001986:	0038      	movs	r0, r7
 8001988:	46a8      	mov	r8, r5
 800198a:	0c2d      	lsrs	r5, r5, #16
 800198c:	46aa      	mov	sl, r5
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	4350      	muls	r0, r2
 8001992:	4372      	muls	r2, r6
 8001994:	444a      	add	r2, r9
 8001996:	4452      	add	r2, sl
 8001998:	4591      	cmp	r9, r2
 800199a:	d903      	bls.n	80019a4 <__aeabi_dmul+0x400>
 800199c:	2580      	movs	r5, #128	@ 0x80
 800199e:	026d      	lsls	r5, r5, #9
 80019a0:	46a9      	mov	r9, r5
 80019a2:	4448      	add	r0, r9
 80019a4:	0c15      	lsrs	r5, r2, #16
 80019a6:	46a9      	mov	r9, r5
 80019a8:	4645      	mov	r5, r8
 80019aa:	042d      	lsls	r5, r5, #16
 80019ac:	0c2d      	lsrs	r5, r5, #16
 80019ae:	46a8      	mov	r8, r5
 80019b0:	4665      	mov	r5, ip
 80019b2:	437d      	muls	r5, r7
 80019b4:	0412      	lsls	r2, r2, #16
 80019b6:	4448      	add	r0, r9
 80019b8:	4490      	add	r8, r2
 80019ba:	46a9      	mov	r9, r5
 80019bc:	0032      	movs	r2, r6
 80019be:	4665      	mov	r5, ip
 80019c0:	4362      	muls	r2, r4
 80019c2:	436e      	muls	r6, r5
 80019c4:	437c      	muls	r4, r7
 80019c6:	0c17      	lsrs	r7, r2, #16
 80019c8:	1936      	adds	r6, r6, r4
 80019ca:	19bf      	adds	r7, r7, r6
 80019cc:	42bc      	cmp	r4, r7
 80019ce:	d903      	bls.n	80019d8 <__aeabi_dmul+0x434>
 80019d0:	2480      	movs	r4, #128	@ 0x80
 80019d2:	0264      	lsls	r4, r4, #9
 80019d4:	46a4      	mov	ip, r4
 80019d6:	44e1      	add	r9, ip
 80019d8:	9c02      	ldr	r4, [sp, #8]
 80019da:	9e03      	ldr	r6, [sp, #12]
 80019dc:	46a4      	mov	ip, r4
 80019de:	9d05      	ldr	r5, [sp, #20]
 80019e0:	4466      	add	r6, ip
 80019e2:	428e      	cmp	r6, r1
 80019e4:	4189      	sbcs	r1, r1
 80019e6:	46ac      	mov	ip, r5
 80019e8:	0412      	lsls	r2, r2, #16
 80019ea:	043c      	lsls	r4, r7, #16
 80019ec:	0c12      	lsrs	r2, r2, #16
 80019ee:	18a2      	adds	r2, r4, r2
 80019f0:	4462      	add	r2, ip
 80019f2:	4249      	negs	r1, r1
 80019f4:	1854      	adds	r4, r2, r1
 80019f6:	4446      	add	r6, r8
 80019f8:	46a4      	mov	ip, r4
 80019fa:	4546      	cmp	r6, r8
 80019fc:	41a4      	sbcs	r4, r4
 80019fe:	4682      	mov	sl, r0
 8001a00:	4264      	negs	r4, r4
 8001a02:	46a0      	mov	r8, r4
 8001a04:	42aa      	cmp	r2, r5
 8001a06:	4192      	sbcs	r2, r2
 8001a08:	458c      	cmp	ip, r1
 8001a0a:	4189      	sbcs	r1, r1
 8001a0c:	44e2      	add	sl, ip
 8001a0e:	44d0      	add	r8, sl
 8001a10:	4249      	negs	r1, r1
 8001a12:	4252      	negs	r2, r2
 8001a14:	430a      	orrs	r2, r1
 8001a16:	45a0      	cmp	r8, r4
 8001a18:	41a4      	sbcs	r4, r4
 8001a1a:	4582      	cmp	sl, r0
 8001a1c:	4189      	sbcs	r1, r1
 8001a1e:	4264      	negs	r4, r4
 8001a20:	4249      	negs	r1, r1
 8001a22:	430c      	orrs	r4, r1
 8001a24:	4641      	mov	r1, r8
 8001a26:	0c3f      	lsrs	r7, r7, #16
 8001a28:	19d2      	adds	r2, r2, r7
 8001a2a:	1912      	adds	r2, r2, r4
 8001a2c:	0dcc      	lsrs	r4, r1, #23
 8001a2e:	9904      	ldr	r1, [sp, #16]
 8001a30:	0270      	lsls	r0, r6, #9
 8001a32:	4308      	orrs	r0, r1
 8001a34:	1e41      	subs	r1, r0, #1
 8001a36:	4188      	sbcs	r0, r1
 8001a38:	4641      	mov	r1, r8
 8001a3a:	444a      	add	r2, r9
 8001a3c:	0df6      	lsrs	r6, r6, #23
 8001a3e:	0252      	lsls	r2, r2, #9
 8001a40:	4330      	orrs	r0, r6
 8001a42:	0249      	lsls	r1, r1, #9
 8001a44:	4314      	orrs	r4, r2
 8001a46:	4308      	orrs	r0, r1
 8001a48:	01d2      	lsls	r2, r2, #7
 8001a4a:	d535      	bpl.n	8001ab8 <__aeabi_dmul+0x514>
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	0843      	lsrs	r3, r0, #1
 8001a50:	4002      	ands	r2, r0
 8001a52:	4313      	orrs	r3, r2
 8001a54:	07e0      	lsls	r0, r4, #31
 8001a56:	4318      	orrs	r0, r3
 8001a58:	0864      	lsrs	r4, r4, #1
 8001a5a:	e634      	b.n	80016c6 <__aeabi_dmul+0x122>
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	46a2      	mov	sl, r4
 8001a60:	469b      	mov	fp, r3
 8001a62:	4681      	mov	r9, r0
 8001a64:	2480      	movs	r4, #128	@ 0x80
 8001a66:	4653      	mov	r3, sl
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	0324      	lsls	r4, r4, #12
 8001a6e:	464a      	mov	r2, r9
 8001a70:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <__aeabi_dmul+0x588>)
 8001a72:	0b24      	lsrs	r4, r4, #12
 8001a74:	e5ec      	b.n	8001650 <__aeabi_dmul+0xac>
 8001a76:	f000 fc85 	bl	8002384 <__clzsi2>
 8001a7a:	2315      	movs	r3, #21
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	4484      	add	ip, r0
 8001a80:	0002      	movs	r2, r0
 8001a82:	4663      	mov	r3, ip
 8001a84:	3220      	adds	r2, #32
 8001a86:	2b1c      	cmp	r3, #28
 8001a88:	dc00      	bgt.n	8001a8c <__aeabi_dmul+0x4e8>
 8001a8a:	e684      	b.n	8001796 <__aeabi_dmul+0x1f2>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4699      	mov	r9, r3
 8001a90:	0023      	movs	r3, r4
 8001a92:	3808      	subs	r0, #8
 8001a94:	4083      	lsls	r3, r0
 8001a96:	469a      	mov	sl, r3
 8001a98:	e68e      	b.n	80017b8 <__aeabi_dmul+0x214>
 8001a9a:	f000 fc73 	bl	8002384 <__clzsi2>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	3215      	adds	r2, #21
 8001aa4:	3320      	adds	r3, #32
 8001aa6:	2a1c      	cmp	r2, #28
 8001aa8:	dc00      	bgt.n	8001aac <__aeabi_dmul+0x508>
 8001aaa:	e64e      	b.n	800174a <__aeabi_dmul+0x1a6>
 8001aac:	0002      	movs	r2, r0
 8001aae:	0034      	movs	r4, r6
 8001ab0:	3a08      	subs	r2, #8
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	4094      	lsls	r4, r2
 8001ab6:	e652      	b.n	800175e <__aeabi_dmul+0x1ba>
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	e604      	b.n	80016c6 <__aeabi_dmul+0x122>
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <__aeabi_dmul+0x58c>)
 8001abe:	0021      	movs	r1, r4
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	9d01      	ldr	r5, [sp, #4]
 8001ac6:	40d3      	lsrs	r3, r2
 8001ac8:	4465      	add	r5, ip
 8001aca:	40a9      	lsls	r1, r5
 8001acc:	4319      	orrs	r1, r3
 8001ace:	0003      	movs	r3, r0
 8001ad0:	40ab      	lsls	r3, r5
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	4183      	sbcs	r3, r0
 8001ad6:	4319      	orrs	r1, r3
 8001ad8:	0008      	movs	r0, r1
 8001ada:	40d4      	lsrs	r4, r2
 8001adc:	074b      	lsls	r3, r1, #29
 8001ade:	d009      	beq.n	8001af4 <__aeabi_dmul+0x550>
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d005      	beq.n	8001af4 <__aeabi_dmul+0x550>
 8001ae8:	1d0b      	adds	r3, r1, #4
 8001aea:	428b      	cmp	r3, r1
 8001aec:	4180      	sbcs	r0, r0
 8001aee:	4240      	negs	r0, r0
 8001af0:	1824      	adds	r4, r4, r0
 8001af2:	0018      	movs	r0, r3
 8001af4:	0223      	lsls	r3, r4, #8
 8001af6:	d400      	bmi.n	8001afa <__aeabi_dmul+0x556>
 8001af8:	e6d6      	b.n	80018a8 <__aeabi_dmul+0x304>
 8001afa:	2301      	movs	r3, #1
 8001afc:	2400      	movs	r4, #0
 8001afe:	2200      	movs	r2, #0
 8001b00:	e5a6      	b.n	8001650 <__aeabi_dmul+0xac>
 8001b02:	290f      	cmp	r1, #15
 8001b04:	d1aa      	bne.n	8001a5c <__aeabi_dmul+0x4b8>
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	4652      	mov	r2, sl
 8001b0a:	031b      	lsls	r3, r3, #12
 8001b0c:	421a      	tst	r2, r3
 8001b0e:	d0a9      	beq.n	8001a64 <__aeabi_dmul+0x4c0>
 8001b10:	421c      	tst	r4, r3
 8001b12:	d1a7      	bne.n	8001a64 <__aeabi_dmul+0x4c0>
 8001b14:	431c      	orrs	r4, r3
 8001b16:	9b00      	ldr	r3, [sp, #0]
 8001b18:	0002      	movs	r2, r0
 8001b1a:	469b      	mov	fp, r3
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <__aeabi_dmul+0x588>)
 8001b1e:	e597      	b.n	8001650 <__aeabi_dmul+0xac>
 8001b20:	2400      	movs	r4, #0
 8001b22:	e6c1      	b.n	80018a8 <__aeabi_dmul+0x304>
 8001b24:	2400      	movs	r4, #0
 8001b26:	4b01      	ldr	r3, [pc, #4]	@ (8001b2c <__aeabi_dmul+0x588>)
 8001b28:	0022      	movs	r2, r4
 8001b2a:	e591      	b.n	8001650 <__aeabi_dmul+0xac>
 8001b2c:	000007ff 	.word	0x000007ff
 8001b30:	0000041e 	.word	0x0000041e

08001b34 <__aeabi_dsub>:
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	464e      	mov	r6, r9
 8001b38:	4645      	mov	r5, r8
 8001b3a:	46de      	mov	lr, fp
 8001b3c:	4657      	mov	r7, sl
 8001b3e:	b5e0      	push	{r5, r6, r7, lr}
 8001b40:	b085      	sub	sp, #20
 8001b42:	9000      	str	r0, [sp, #0]
 8001b44:	9101      	str	r1, [sp, #4]
 8001b46:	030c      	lsls	r4, r1, #12
 8001b48:	004f      	lsls	r7, r1, #1
 8001b4a:	0fce      	lsrs	r6, r1, #31
 8001b4c:	0a61      	lsrs	r1, r4, #9
 8001b4e:	9c00      	ldr	r4, [sp, #0]
 8001b50:	46b0      	mov	r8, r6
 8001b52:	0f64      	lsrs	r4, r4, #29
 8001b54:	430c      	orrs	r4, r1
 8001b56:	9900      	ldr	r1, [sp, #0]
 8001b58:	0d7f      	lsrs	r7, r7, #21
 8001b5a:	00c8      	lsls	r0, r1, #3
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	001a      	movs	r2, r3
 8001b60:	031b      	lsls	r3, r3, #12
 8001b62:	469c      	mov	ip, r3
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	9201      	str	r2, [sp, #4]
 8001b68:	0051      	lsls	r1, r2, #1
 8001b6a:	0d4b      	lsrs	r3, r1, #21
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	9b01      	ldr	r3, [sp, #4]
 8001b70:	9d00      	ldr	r5, [sp, #0]
 8001b72:	0fd9      	lsrs	r1, r3, #31
 8001b74:	4663      	mov	r3, ip
 8001b76:	0f6a      	lsrs	r2, r5, #29
 8001b78:	0a5b      	lsrs	r3, r3, #9
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	00ea      	lsls	r2, r5, #3
 8001b7e:	4694      	mov	ip, r2
 8001b80:	4693      	mov	fp, r2
 8001b82:	4ac1      	ldr	r2, [pc, #772]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001b84:	9003      	str	r0, [sp, #12]
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	4591      	cmp	r9, r2
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_dsub+0x5a>
 8001b8c:	e0cd      	b.n	8001d2a <__aeabi_dsub+0x1f6>
 8001b8e:	2501      	movs	r5, #1
 8001b90:	4069      	eors	r1, r5
 8001b92:	464d      	mov	r5, r9
 8001b94:	1b7d      	subs	r5, r7, r5
 8001b96:	46aa      	mov	sl, r5
 8001b98:	428e      	cmp	r6, r1
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_dsub+0x6a>
 8001b9c:	e080      	b.n	8001ca0 <__aeabi_dsub+0x16c>
 8001b9e:	2d00      	cmp	r5, #0
 8001ba0:	dc00      	bgt.n	8001ba4 <__aeabi_dsub+0x70>
 8001ba2:	e335      	b.n	8002210 <__aeabi_dsub+0x6dc>
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	2900      	cmp	r1, #0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x78>
 8001baa:	e0df      	b.n	8001d6c <__aeabi_dsub+0x238>
 8001bac:	4297      	cmp	r7, r2
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x7e>
 8001bb0:	e194      	b.n	8001edc <__aeabi_dsub+0x3a8>
 8001bb2:	4652      	mov	r2, sl
 8001bb4:	2501      	movs	r5, #1
 8001bb6:	2a38      	cmp	r2, #56	@ 0x38
 8001bb8:	dc19      	bgt.n	8001bee <__aeabi_dsub+0xba>
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	9b02      	ldr	r3, [sp, #8]
 8001bbe:	0412      	lsls	r2, r2, #16
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	2a1f      	cmp	r2, #31
 8001bc8:	dd00      	ble.n	8001bcc <__aeabi_dsub+0x98>
 8001bca:	e1e3      	b.n	8001f94 <__aeabi_dsub+0x460>
 8001bcc:	4653      	mov	r3, sl
 8001bce:	2220      	movs	r2, #32
 8001bd0:	4661      	mov	r1, ip
 8001bd2:	9d02      	ldr	r5, [sp, #8]
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	4095      	lsls	r5, r2
 8001bd8:	40d9      	lsrs	r1, r3
 8001bda:	430d      	orrs	r5, r1
 8001bdc:	4661      	mov	r1, ip
 8001bde:	4091      	lsls	r1, r2
 8001be0:	000a      	movs	r2, r1
 8001be2:	1e51      	subs	r1, r2, #1
 8001be4:	418a      	sbcs	r2, r1
 8001be6:	4315      	orrs	r5, r2
 8001be8:	9a02      	ldr	r2, [sp, #8]
 8001bea:	40da      	lsrs	r2, r3
 8001bec:	1aa4      	subs	r4, r4, r2
 8001bee:	1b45      	subs	r5, r0, r5
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	4180      	sbcs	r0, r0
 8001bf4:	4240      	negs	r0, r0
 8001bf6:	1a24      	subs	r4, r4, r0
 8001bf8:	0223      	lsls	r3, r4, #8
 8001bfa:	d400      	bmi.n	8001bfe <__aeabi_dsub+0xca>
 8001bfc:	e13d      	b.n	8001e7a <__aeabi_dsub+0x346>
 8001bfe:	0264      	lsls	r4, r4, #9
 8001c00:	0a64      	lsrs	r4, r4, #9
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0xd4>
 8001c06:	e147      	b.n	8001e98 <__aeabi_dsub+0x364>
 8001c08:	0020      	movs	r0, r4
 8001c0a:	f000 fbbb 	bl	8002384 <__clzsi2>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	3b08      	subs	r3, #8
 8001c12:	2120      	movs	r1, #32
 8001c14:	0028      	movs	r0, r5
 8001c16:	1aca      	subs	r2, r1, r3
 8001c18:	40d0      	lsrs	r0, r2
 8001c1a:	409c      	lsls	r4, r3
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	409d      	lsls	r5, r3
 8001c20:	4322      	orrs	r2, r4
 8001c22:	429f      	cmp	r7, r3
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_dsub+0xf4>
 8001c26:	e177      	b.n	8001f18 <__aeabi_dsub+0x3e4>
 8001c28:	1bd8      	subs	r0, r3, r7
 8001c2a:	3001      	adds	r0, #1
 8001c2c:	1a09      	subs	r1, r1, r0
 8001c2e:	002c      	movs	r4, r5
 8001c30:	408d      	lsls	r5, r1
 8001c32:	40c4      	lsrs	r4, r0
 8001c34:	1e6b      	subs	r3, r5, #1
 8001c36:	419d      	sbcs	r5, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	40c2      	lsrs	r2, r0
 8001c3c:	408b      	lsls	r3, r1
 8001c3e:	4325      	orrs	r5, r4
 8001c40:	2700      	movs	r7, #0
 8001c42:	0014      	movs	r4, r2
 8001c44:	431d      	orrs	r5, r3
 8001c46:	076b      	lsls	r3, r5, #29
 8001c48:	d009      	beq.n	8001c5e <__aeabi_dsub+0x12a>
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	402b      	ands	r3, r5
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d005      	beq.n	8001c5e <__aeabi_dsub+0x12a>
 8001c52:	1d2b      	adds	r3, r5, #4
 8001c54:	42ab      	cmp	r3, r5
 8001c56:	41ad      	sbcs	r5, r5
 8001c58:	426d      	negs	r5, r5
 8001c5a:	1964      	adds	r4, r4, r5
 8001c5c:	001d      	movs	r5, r3
 8001c5e:	0223      	lsls	r3, r4, #8
 8001c60:	d400      	bmi.n	8001c64 <__aeabi_dsub+0x130>
 8001c62:	e140      	b.n	8001ee6 <__aeabi_dsub+0x3b2>
 8001c64:	4a88      	ldr	r2, [pc, #544]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001c66:	3701      	adds	r7, #1
 8001c68:	4297      	cmp	r7, r2
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dsub+0x13a>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x33e>
 8001c6e:	2601      	movs	r6, #1
 8001c70:	4643      	mov	r3, r8
 8001c72:	4986      	ldr	r1, [pc, #536]	@ (8001e8c <__aeabi_dsub+0x358>)
 8001c74:	08ed      	lsrs	r5, r5, #3
 8001c76:	4021      	ands	r1, r4
 8001c78:	074a      	lsls	r2, r1, #29
 8001c7a:	432a      	orrs	r2, r5
 8001c7c:	057c      	lsls	r4, r7, #21
 8001c7e:	024d      	lsls	r5, r1, #9
 8001c80:	0b2d      	lsrs	r5, r5, #12
 8001c82:	0d64      	lsrs	r4, r4, #21
 8001c84:	401e      	ands	r6, r3
 8001c86:	0524      	lsls	r4, r4, #20
 8001c88:	432c      	orrs	r4, r5
 8001c8a:	07f6      	lsls	r6, r6, #31
 8001c8c:	4334      	orrs	r4, r6
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0021      	movs	r1, r4
 8001c92:	b005      	add	sp, #20
 8001c94:	bcf0      	pop	{r4, r5, r6, r7}
 8001c96:	46bb      	mov	fp, r7
 8001c98:	46b2      	mov	sl, r6
 8001c9a:	46a9      	mov	r9, r5
 8001c9c:	46a0      	mov	r8, r4
 8001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca0:	2d00      	cmp	r5, #0
 8001ca2:	dc00      	bgt.n	8001ca6 <__aeabi_dsub+0x172>
 8001ca4:	e2d0      	b.n	8002248 <__aeabi_dsub+0x714>
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	2900      	cmp	r1, #0
 8001caa:	d000      	beq.n	8001cae <__aeabi_dsub+0x17a>
 8001cac:	e0d4      	b.n	8001e58 <__aeabi_dsub+0x324>
 8001cae:	4661      	mov	r1, ip
 8001cb0:	9b02      	ldr	r3, [sp, #8]
 8001cb2:	4319      	orrs	r1, r3
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x184>
 8001cb6:	e12b      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8001cb8:	1e69      	subs	r1, r5, #1
 8001cba:	2d01      	cmp	r5, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x18c>
 8001cbe:	e1d9      	b.n	8002074 <__aeabi_dsub+0x540>
 8001cc0:	4295      	cmp	r5, r2
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x192>
 8001cc4:	e10a      	b.n	8001edc <__aeabi_dsub+0x3a8>
 8001cc6:	2501      	movs	r5, #1
 8001cc8:	2938      	cmp	r1, #56	@ 0x38
 8001cca:	dc17      	bgt.n	8001cfc <__aeabi_dsub+0x1c8>
 8001ccc:	468a      	mov	sl, r1
 8001cce:	4653      	mov	r3, sl
 8001cd0:	2b1f      	cmp	r3, #31
 8001cd2:	dd00      	ble.n	8001cd6 <__aeabi_dsub+0x1a2>
 8001cd4:	e1e7      	b.n	80020a6 <__aeabi_dsub+0x572>
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	1ad2      	subs	r2, r2, r3
 8001cda:	9b02      	ldr	r3, [sp, #8]
 8001cdc:	4661      	mov	r1, ip
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	001d      	movs	r5, r3
 8001ce2:	4653      	mov	r3, sl
 8001ce4:	40d9      	lsrs	r1, r3
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	4093      	lsls	r3, r2
 8001cea:	001a      	movs	r2, r3
 8001cec:	430d      	orrs	r5, r1
 8001cee:	1e51      	subs	r1, r2, #1
 8001cf0:	418a      	sbcs	r2, r1
 8001cf2:	4653      	mov	r3, sl
 8001cf4:	4315      	orrs	r5, r2
 8001cf6:	9a02      	ldr	r2, [sp, #8]
 8001cf8:	40da      	lsrs	r2, r3
 8001cfa:	18a4      	adds	r4, r4, r2
 8001cfc:	182d      	adds	r5, r5, r0
 8001cfe:	4285      	cmp	r5, r0
 8001d00:	4180      	sbcs	r0, r0
 8001d02:	4240      	negs	r0, r0
 8001d04:	1824      	adds	r4, r4, r0
 8001d06:	0223      	lsls	r3, r4, #8
 8001d08:	d400      	bmi.n	8001d0c <__aeabi_dsub+0x1d8>
 8001d0a:	e0b6      	b.n	8001e7a <__aeabi_dsub+0x346>
 8001d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001d0e:	3701      	adds	r7, #1
 8001d10:	429f      	cmp	r7, r3
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x1e2>
 8001d14:	e0ad      	b.n	8001e72 <__aeabi_dsub+0x33e>
 8001d16:	2101      	movs	r1, #1
 8001d18:	4b5c      	ldr	r3, [pc, #368]	@ (8001e8c <__aeabi_dsub+0x358>)
 8001d1a:	086a      	lsrs	r2, r5, #1
 8001d1c:	401c      	ands	r4, r3
 8001d1e:	4029      	ands	r1, r5
 8001d20:	430a      	orrs	r2, r1
 8001d22:	07e5      	lsls	r5, r4, #31
 8001d24:	4315      	orrs	r5, r2
 8001d26:	0864      	lsrs	r4, r4, #1
 8001d28:	e78d      	b.n	8001c46 <__aeabi_dsub+0x112>
 8001d2a:	4a59      	ldr	r2, [pc, #356]	@ (8001e90 <__aeabi_dsub+0x35c>)
 8001d2c:	9b02      	ldr	r3, [sp, #8]
 8001d2e:	4692      	mov	sl, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	44ba      	add	sl, r7
 8001d34:	431a      	orrs	r2, r3
 8001d36:	d02c      	beq.n	8001d92 <__aeabi_dsub+0x25e>
 8001d38:	428e      	cmp	r6, r1
 8001d3a:	d02e      	beq.n	8001d9a <__aeabi_dsub+0x266>
 8001d3c:	4652      	mov	r2, sl
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	d060      	beq.n	8001e04 <__aeabi_dsub+0x2d0>
 8001d42:	2f00      	cmp	r7, #0
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x214>
 8001d46:	e0db      	b.n	8001f00 <__aeabi_dsub+0x3cc>
 8001d48:	4663      	mov	r3, ip
 8001d4a:	000e      	movs	r6, r1
 8001d4c:	9c02      	ldr	r4, [sp, #8]
 8001d4e:	08d8      	lsrs	r0, r3, #3
 8001d50:	0762      	lsls	r2, r4, #29
 8001d52:	4302      	orrs	r2, r0
 8001d54:	08e4      	lsrs	r4, r4, #3
 8001d56:	0013      	movs	r3, r2
 8001d58:	4323      	orrs	r3, r4
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x22a>
 8001d5c:	e254      	b.n	8002208 <__aeabi_dsub+0x6d4>
 8001d5e:	2580      	movs	r5, #128	@ 0x80
 8001d60:	032d      	lsls	r5, r5, #12
 8001d62:	4325      	orrs	r5, r4
 8001d64:	032d      	lsls	r5, r5, #12
 8001d66:	4c48      	ldr	r4, [pc, #288]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001d68:	0b2d      	lsrs	r5, r5, #12
 8001d6a:	e78c      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001d6c:	4661      	mov	r1, ip
 8001d6e:	9b02      	ldr	r3, [sp, #8]
 8001d70:	4319      	orrs	r1, r3
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x242>
 8001d74:	e0cc      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8001d76:	0029      	movs	r1, r5
 8001d78:	3901      	subs	r1, #1
 8001d7a:	2d01      	cmp	r5, #1
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x24c>
 8001d7e:	e188      	b.n	8002092 <__aeabi_dsub+0x55e>
 8001d80:	4295      	cmp	r5, r2
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x252>
 8001d84:	e0aa      	b.n	8001edc <__aeabi_dsub+0x3a8>
 8001d86:	2501      	movs	r5, #1
 8001d88:	2938      	cmp	r1, #56	@ 0x38
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dsub+0x25a>
 8001d8c:	e72f      	b.n	8001bee <__aeabi_dsub+0xba>
 8001d8e:	468a      	mov	sl, r1
 8001d90:	e718      	b.n	8001bc4 <__aeabi_dsub+0x90>
 8001d92:	2201      	movs	r2, #1
 8001d94:	4051      	eors	r1, r2
 8001d96:	428e      	cmp	r6, r1
 8001d98:	d1d0      	bne.n	8001d3c <__aeabi_dsub+0x208>
 8001d9a:	4653      	mov	r3, sl
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x26e>
 8001da0:	e0be      	b.n	8001f20 <__aeabi_dsub+0x3ec>
 8001da2:	2f00      	cmp	r7, #0
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x274>
 8001da6:	e138      	b.n	800201a <__aeabi_dsub+0x4e6>
 8001da8:	46ca      	mov	sl, r9
 8001daa:	0022      	movs	r2, r4
 8001dac:	4302      	orrs	r2, r0
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x27e>
 8001db0:	e1e2      	b.n	8002178 <__aeabi_dsub+0x644>
 8001db2:	4653      	mov	r3, sl
 8001db4:	1e59      	subs	r1, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x288>
 8001dba:	e20d      	b.n	80021d8 <__aeabi_dsub+0x6a4>
 8001dbc:	4a32      	ldr	r2, [pc, #200]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001dbe:	4592      	cmp	sl, r2
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x290>
 8001dc2:	e1d2      	b.n	800216a <__aeabi_dsub+0x636>
 8001dc4:	2701      	movs	r7, #1
 8001dc6:	2938      	cmp	r1, #56	@ 0x38
 8001dc8:	dc13      	bgt.n	8001df2 <__aeabi_dsub+0x2be>
 8001dca:	291f      	cmp	r1, #31
 8001dcc:	dd00      	ble.n	8001dd0 <__aeabi_dsub+0x29c>
 8001dce:	e1ee      	b.n	80021ae <__aeabi_dsub+0x67a>
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	9b02      	ldr	r3, [sp, #8]
 8001dd4:	1a52      	subs	r2, r2, r1
 8001dd6:	0025      	movs	r5, r4
 8001dd8:	0007      	movs	r7, r0
 8001dda:	469a      	mov	sl, r3
 8001ddc:	40cc      	lsrs	r4, r1
 8001dde:	4090      	lsls	r0, r2
 8001de0:	4095      	lsls	r5, r2
 8001de2:	40cf      	lsrs	r7, r1
 8001de4:	44a2      	add	sl, r4
 8001de6:	1e42      	subs	r2, r0, #1
 8001de8:	4190      	sbcs	r0, r2
 8001dea:	4653      	mov	r3, sl
 8001dec:	432f      	orrs	r7, r5
 8001dee:	4307      	orrs	r7, r0
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	003d      	movs	r5, r7
 8001df4:	4465      	add	r5, ip
 8001df6:	4565      	cmp	r5, ip
 8001df8:	4192      	sbcs	r2, r2
 8001dfa:	9b02      	ldr	r3, [sp, #8]
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	464f      	mov	r7, r9
 8001e00:	18d4      	adds	r4, r2, r3
 8001e02:	e780      	b.n	8001d06 <__aeabi_dsub+0x1d2>
 8001e04:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <__aeabi_dsub+0x360>)
 8001e06:	1c7d      	adds	r5, r7, #1
 8001e08:	4215      	tst	r5, r2
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_dsub+0x2da>
 8001e0c:	e0aa      	b.n	8001f64 <__aeabi_dsub+0x430>
 8001e0e:	4662      	mov	r2, ip
 8001e10:	0025      	movs	r5, r4
 8001e12:	9b02      	ldr	r3, [sp, #8]
 8001e14:	4305      	orrs	r5, r0
 8001e16:	431a      	orrs	r2, r3
 8001e18:	2f00      	cmp	r7, #0
 8001e1a:	d000      	beq.n	8001e1e <__aeabi_dsub+0x2ea>
 8001e1c:	e0f5      	b.n	800200a <__aeabi_dsub+0x4d6>
 8001e1e:	2d00      	cmp	r5, #0
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x2f0>
 8001e22:	e16b      	b.n	80020fc <__aeabi_dsub+0x5c8>
 8001e24:	2a00      	cmp	r2, #0
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x2f6>
 8001e28:	e152      	b.n	80020d0 <__aeabi_dsub+0x59c>
 8001e2a:	4663      	mov	r3, ip
 8001e2c:	1ac5      	subs	r5, r0, r3
 8001e2e:	9b02      	ldr	r3, [sp, #8]
 8001e30:	1ae2      	subs	r2, r4, r3
 8001e32:	42a8      	cmp	r0, r5
 8001e34:	419b      	sbcs	r3, r3
 8001e36:	425b      	negs	r3, r3
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	021a      	lsls	r2, r3, #8
 8001e3c:	d400      	bmi.n	8001e40 <__aeabi_dsub+0x30c>
 8001e3e:	e1d5      	b.n	80021ec <__aeabi_dsub+0x6b8>
 8001e40:	4663      	mov	r3, ip
 8001e42:	1a1d      	subs	r5, r3, r0
 8001e44:	45ac      	cmp	ip, r5
 8001e46:	4192      	sbcs	r2, r2
 8001e48:	2601      	movs	r6, #1
 8001e4a:	9b02      	ldr	r3, [sp, #8]
 8001e4c:	4252      	negs	r2, r2
 8001e4e:	1b1c      	subs	r4, r3, r4
 8001e50:	4688      	mov	r8, r1
 8001e52:	1aa4      	subs	r4, r4, r2
 8001e54:	400e      	ands	r6, r1
 8001e56:	e6f6      	b.n	8001c46 <__aeabi_dsub+0x112>
 8001e58:	4297      	cmp	r7, r2
 8001e5a:	d03f      	beq.n	8001edc <__aeabi_dsub+0x3a8>
 8001e5c:	4652      	mov	r2, sl
 8001e5e:	2501      	movs	r5, #1
 8001e60:	2a38      	cmp	r2, #56	@ 0x38
 8001e62:	dd00      	ble.n	8001e66 <__aeabi_dsub+0x332>
 8001e64:	e74a      	b.n	8001cfc <__aeabi_dsub+0x1c8>
 8001e66:	2280      	movs	r2, #128	@ 0x80
 8001e68:	9b02      	ldr	r3, [sp, #8]
 8001e6a:	0412      	lsls	r2, r2, #16
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	e72d      	b.n	8001cce <__aeabi_dsub+0x19a>
 8001e72:	003c      	movs	r4, r7
 8001e74:	2500      	movs	r5, #0
 8001e76:	2200      	movs	r2, #0
 8001e78:	e705      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	402b      	ands	r3, r5
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dsub+0x350>
 8001e82:	e6e2      	b.n	8001c4a <__aeabi_dsub+0x116>
 8001e84:	e06b      	b.n	8001f5e <__aeabi_dsub+0x42a>
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	000007ff 	.word	0x000007ff
 8001e8c:	ff7fffff 	.word	0xff7fffff
 8001e90:	fffff801 	.word	0xfffff801
 8001e94:	000007fe 	.word	0x000007fe
 8001e98:	0028      	movs	r0, r5
 8001e9a:	f000 fa73 	bl	8002384 <__clzsi2>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	3318      	adds	r3, #24
 8001ea2:	2b1f      	cmp	r3, #31
 8001ea4:	dc00      	bgt.n	8001ea8 <__aeabi_dsub+0x374>
 8001ea6:	e6b4      	b.n	8001c12 <__aeabi_dsub+0xde>
 8001ea8:	002a      	movs	r2, r5
 8001eaa:	3808      	subs	r0, #8
 8001eac:	4082      	lsls	r2, r0
 8001eae:	429f      	cmp	r7, r3
 8001eb0:	dd00      	ble.n	8001eb4 <__aeabi_dsub+0x380>
 8001eb2:	e0b9      	b.n	8002028 <__aeabi_dsub+0x4f4>
 8001eb4:	1bdb      	subs	r3, r3, r7
 8001eb6:	1c58      	adds	r0, r3, #1
 8001eb8:	281f      	cmp	r0, #31
 8001eba:	dc00      	bgt.n	8001ebe <__aeabi_dsub+0x38a>
 8001ebc:	e1a0      	b.n	8002200 <__aeabi_dsub+0x6cc>
 8001ebe:	0015      	movs	r5, r2
 8001ec0:	3b1f      	subs	r3, #31
 8001ec2:	40dd      	lsrs	r5, r3
 8001ec4:	2820      	cmp	r0, #32
 8001ec6:	d005      	beq.n	8001ed4 <__aeabi_dsub+0x3a0>
 8001ec8:	2340      	movs	r3, #64	@ 0x40
 8001eca:	1a1b      	subs	r3, r3, r0
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	1e53      	subs	r3, r2, #1
 8001ed0:	419a      	sbcs	r2, r3
 8001ed2:	4315      	orrs	r5, r2
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	2700      	movs	r7, #0
 8001ed8:	402b      	ands	r3, r5
 8001eda:	e7d0      	b.n	8001e7e <__aeabi_dsub+0x34a>
 8001edc:	08c0      	lsrs	r0, r0, #3
 8001ede:	0762      	lsls	r2, r4, #29
 8001ee0:	4302      	orrs	r2, r0
 8001ee2:	08e4      	lsrs	r4, r4, #3
 8001ee4:	e737      	b.n	8001d56 <__aeabi_dsub+0x222>
 8001ee6:	08ea      	lsrs	r2, r5, #3
 8001ee8:	0763      	lsls	r3, r4, #29
 8001eea:	431a      	orrs	r2, r3
 8001eec:	4bd3      	ldr	r3, [pc, #844]	@ (800223c <__aeabi_dsub+0x708>)
 8001eee:	08e4      	lsrs	r4, r4, #3
 8001ef0:	429f      	cmp	r7, r3
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x3c2>
 8001ef4:	e72f      	b.n	8001d56 <__aeabi_dsub+0x222>
 8001ef6:	0324      	lsls	r4, r4, #12
 8001ef8:	0b25      	lsrs	r5, r4, #12
 8001efa:	057c      	lsls	r4, r7, #21
 8001efc:	0d64      	lsrs	r4, r4, #21
 8001efe:	e6c2      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001f00:	46ca      	mov	sl, r9
 8001f02:	0022      	movs	r2, r4
 8001f04:	4302      	orrs	r2, r0
 8001f06:	d158      	bne.n	8001fba <__aeabi_dsub+0x486>
 8001f08:	4663      	mov	r3, ip
 8001f0a:	000e      	movs	r6, r1
 8001f0c:	9c02      	ldr	r4, [sp, #8]
 8001f0e:	9303      	str	r3, [sp, #12]
 8001f10:	9b03      	ldr	r3, [sp, #12]
 8001f12:	4657      	mov	r7, sl
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	e7e7      	b.n	8001ee8 <__aeabi_dsub+0x3b4>
 8001f18:	4cc9      	ldr	r4, [pc, #804]	@ (8002240 <__aeabi_dsub+0x70c>)
 8001f1a:	1aff      	subs	r7, r7, r3
 8001f1c:	4014      	ands	r4, r2
 8001f1e:	e692      	b.n	8001c46 <__aeabi_dsub+0x112>
 8001f20:	4dc8      	ldr	r5, [pc, #800]	@ (8002244 <__aeabi_dsub+0x710>)
 8001f22:	1c7a      	adds	r2, r7, #1
 8001f24:	422a      	tst	r2, r5
 8001f26:	d000      	beq.n	8001f2a <__aeabi_dsub+0x3f6>
 8001f28:	e084      	b.n	8002034 <__aeabi_dsub+0x500>
 8001f2a:	0022      	movs	r2, r4
 8001f2c:	4302      	orrs	r2, r0
 8001f2e:	2f00      	cmp	r7, #0
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x400>
 8001f32:	e0ef      	b.n	8002114 <__aeabi_dsub+0x5e0>
 8001f34:	2a00      	cmp	r2, #0
 8001f36:	d100      	bne.n	8001f3a <__aeabi_dsub+0x406>
 8001f38:	e0e5      	b.n	8002106 <__aeabi_dsub+0x5d2>
 8001f3a:	4662      	mov	r2, ip
 8001f3c:	9902      	ldr	r1, [sp, #8]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x410>
 8001f42:	e0c5      	b.n	80020d0 <__aeabi_dsub+0x59c>
 8001f44:	4663      	mov	r3, ip
 8001f46:	18c5      	adds	r5, r0, r3
 8001f48:	468c      	mov	ip, r1
 8001f4a:	4285      	cmp	r5, r0
 8001f4c:	4180      	sbcs	r0, r0
 8001f4e:	4464      	add	r4, ip
 8001f50:	4240      	negs	r0, r0
 8001f52:	1824      	adds	r4, r4, r0
 8001f54:	0223      	lsls	r3, r4, #8
 8001f56:	d502      	bpl.n	8001f5e <__aeabi_dsub+0x42a>
 8001f58:	4bb9      	ldr	r3, [pc, #740]	@ (8002240 <__aeabi_dsub+0x70c>)
 8001f5a:	3701      	adds	r7, #1
 8001f5c:	401c      	ands	r4, r3
 8001f5e:	46ba      	mov	sl, r7
 8001f60:	9503      	str	r5, [sp, #12]
 8001f62:	e7d5      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8001f64:	4662      	mov	r2, ip
 8001f66:	1a85      	subs	r5, r0, r2
 8001f68:	42a8      	cmp	r0, r5
 8001f6a:	4192      	sbcs	r2, r2
 8001f6c:	4252      	negs	r2, r2
 8001f6e:	4691      	mov	r9, r2
 8001f70:	9b02      	ldr	r3, [sp, #8]
 8001f72:	1ae3      	subs	r3, r4, r3
 8001f74:	001a      	movs	r2, r3
 8001f76:	464b      	mov	r3, r9
 8001f78:	1ad2      	subs	r2, r2, r3
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	4691      	mov	r9, r2
 8001f7e:	021a      	lsls	r2, r3, #8
 8001f80:	d46c      	bmi.n	800205c <__aeabi_dsub+0x528>
 8001f82:	464a      	mov	r2, r9
 8001f84:	464c      	mov	r4, r9
 8001f86:	432a      	orrs	r2, r5
 8001f88:	d000      	beq.n	8001f8c <__aeabi_dsub+0x458>
 8001f8a:	e63a      	b.n	8001c02 <__aeabi_dsub+0xce>
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	2400      	movs	r4, #0
 8001f90:	2500      	movs	r5, #0
 8001f92:	e678      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001f94:	9902      	ldr	r1, [sp, #8]
 8001f96:	4653      	mov	r3, sl
 8001f98:	000d      	movs	r5, r1
 8001f9a:	3a20      	subs	r2, #32
 8001f9c:	40d5      	lsrs	r5, r2
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d006      	beq.n	8001fb0 <__aeabi_dsub+0x47c>
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	1ad2      	subs	r2, r2, r3
 8001fa6:	000b      	movs	r3, r1
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	4662      	mov	r2, ip
 8001fac:	431a      	orrs	r2, r3
 8001fae:	4693      	mov	fp, r2
 8001fb0:	465b      	mov	r3, fp
 8001fb2:	1e5a      	subs	r2, r3, #1
 8001fb4:	4193      	sbcs	r3, r2
 8001fb6:	431d      	orrs	r5, r3
 8001fb8:	e619      	b.n	8001bee <__aeabi_dsub+0xba>
 8001fba:	4653      	mov	r3, sl
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x490>
 8001fc2:	e0c6      	b.n	8002152 <__aeabi_dsub+0x61e>
 8001fc4:	4e9d      	ldr	r6, [pc, #628]	@ (800223c <__aeabi_dsub+0x708>)
 8001fc6:	45b2      	cmp	sl, r6
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x498>
 8001fca:	e6bd      	b.n	8001d48 <__aeabi_dsub+0x214>
 8001fcc:	4688      	mov	r8, r1
 8001fce:	000e      	movs	r6, r1
 8001fd0:	2501      	movs	r5, #1
 8001fd2:	2a38      	cmp	r2, #56	@ 0x38
 8001fd4:	dc10      	bgt.n	8001ff8 <__aeabi_dsub+0x4c4>
 8001fd6:	2a1f      	cmp	r2, #31
 8001fd8:	dc7f      	bgt.n	80020da <__aeabi_dsub+0x5a6>
 8001fda:	2120      	movs	r1, #32
 8001fdc:	0025      	movs	r5, r4
 8001fde:	1a89      	subs	r1, r1, r2
 8001fe0:	0007      	movs	r7, r0
 8001fe2:	4088      	lsls	r0, r1
 8001fe4:	408d      	lsls	r5, r1
 8001fe6:	40d7      	lsrs	r7, r2
 8001fe8:	40d4      	lsrs	r4, r2
 8001fea:	1e41      	subs	r1, r0, #1
 8001fec:	4188      	sbcs	r0, r1
 8001fee:	9b02      	ldr	r3, [sp, #8]
 8001ff0:	433d      	orrs	r5, r7
 8001ff2:	1b1b      	subs	r3, r3, r4
 8001ff4:	4305      	orrs	r5, r0
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	4662      	mov	r2, ip
 8001ffa:	1b55      	subs	r5, r2, r5
 8001ffc:	45ac      	cmp	ip, r5
 8001ffe:	4192      	sbcs	r2, r2
 8002000:	9b02      	ldr	r3, [sp, #8]
 8002002:	4252      	negs	r2, r2
 8002004:	464f      	mov	r7, r9
 8002006:	1a9c      	subs	r4, r3, r2
 8002008:	e5f6      	b.n	8001bf8 <__aeabi_dsub+0xc4>
 800200a:	2d00      	cmp	r5, #0
 800200c:	d000      	beq.n	8002010 <__aeabi_dsub+0x4dc>
 800200e:	e0b7      	b.n	8002180 <__aeabi_dsub+0x64c>
 8002010:	2a00      	cmp	r2, #0
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x4e2>
 8002014:	e0f0      	b.n	80021f8 <__aeabi_dsub+0x6c4>
 8002016:	2601      	movs	r6, #1
 8002018:	400e      	ands	r6, r1
 800201a:	4663      	mov	r3, ip
 800201c:	9802      	ldr	r0, [sp, #8]
 800201e:	08d9      	lsrs	r1, r3, #3
 8002020:	0742      	lsls	r2, r0, #29
 8002022:	430a      	orrs	r2, r1
 8002024:	08c4      	lsrs	r4, r0, #3
 8002026:	e696      	b.n	8001d56 <__aeabi_dsub+0x222>
 8002028:	4c85      	ldr	r4, [pc, #532]	@ (8002240 <__aeabi_dsub+0x70c>)
 800202a:	1aff      	subs	r7, r7, r3
 800202c:	4014      	ands	r4, r2
 800202e:	0762      	lsls	r2, r4, #29
 8002030:	08e4      	lsrs	r4, r4, #3
 8002032:	e760      	b.n	8001ef6 <__aeabi_dsub+0x3c2>
 8002034:	4981      	ldr	r1, [pc, #516]	@ (800223c <__aeabi_dsub+0x708>)
 8002036:	428a      	cmp	r2, r1
 8002038:	d100      	bne.n	800203c <__aeabi_dsub+0x508>
 800203a:	e0c9      	b.n	80021d0 <__aeabi_dsub+0x69c>
 800203c:	4663      	mov	r3, ip
 800203e:	18c1      	adds	r1, r0, r3
 8002040:	4281      	cmp	r1, r0
 8002042:	4180      	sbcs	r0, r0
 8002044:	9b02      	ldr	r3, [sp, #8]
 8002046:	4240      	negs	r0, r0
 8002048:	18e3      	adds	r3, r4, r3
 800204a:	181b      	adds	r3, r3, r0
 800204c:	07dd      	lsls	r5, r3, #31
 800204e:	085c      	lsrs	r4, r3, #1
 8002050:	2307      	movs	r3, #7
 8002052:	0849      	lsrs	r1, r1, #1
 8002054:	430d      	orrs	r5, r1
 8002056:	0017      	movs	r7, r2
 8002058:	402b      	ands	r3, r5
 800205a:	e710      	b.n	8001e7e <__aeabi_dsub+0x34a>
 800205c:	4663      	mov	r3, ip
 800205e:	1a1d      	subs	r5, r3, r0
 8002060:	45ac      	cmp	ip, r5
 8002062:	4192      	sbcs	r2, r2
 8002064:	2601      	movs	r6, #1
 8002066:	9b02      	ldr	r3, [sp, #8]
 8002068:	4252      	negs	r2, r2
 800206a:	1b1c      	subs	r4, r3, r4
 800206c:	4688      	mov	r8, r1
 800206e:	1aa4      	subs	r4, r4, r2
 8002070:	400e      	ands	r6, r1
 8002072:	e5c6      	b.n	8001c02 <__aeabi_dsub+0xce>
 8002074:	4663      	mov	r3, ip
 8002076:	18c5      	adds	r5, r0, r3
 8002078:	9b02      	ldr	r3, [sp, #8]
 800207a:	4285      	cmp	r5, r0
 800207c:	4180      	sbcs	r0, r0
 800207e:	469c      	mov	ip, r3
 8002080:	4240      	negs	r0, r0
 8002082:	4464      	add	r4, ip
 8002084:	1824      	adds	r4, r4, r0
 8002086:	2701      	movs	r7, #1
 8002088:	0223      	lsls	r3, r4, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x55a>
 800208c:	e6f5      	b.n	8001e7a <__aeabi_dsub+0x346>
 800208e:	2702      	movs	r7, #2
 8002090:	e641      	b.n	8001d16 <__aeabi_dsub+0x1e2>
 8002092:	4663      	mov	r3, ip
 8002094:	1ac5      	subs	r5, r0, r3
 8002096:	42a8      	cmp	r0, r5
 8002098:	4180      	sbcs	r0, r0
 800209a:	9b02      	ldr	r3, [sp, #8]
 800209c:	4240      	negs	r0, r0
 800209e:	1ae4      	subs	r4, r4, r3
 80020a0:	2701      	movs	r7, #1
 80020a2:	1a24      	subs	r4, r4, r0
 80020a4:	e5a8      	b.n	8001bf8 <__aeabi_dsub+0xc4>
 80020a6:	9d02      	ldr	r5, [sp, #8]
 80020a8:	4652      	mov	r2, sl
 80020aa:	002b      	movs	r3, r5
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d3      	lsrs	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	4653      	mov	r3, sl
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d006      	beq.n	80020c6 <__aeabi_dsub+0x592>
 80020b8:	2240      	movs	r2, #64	@ 0x40
 80020ba:	1ad2      	subs	r2, r2, r3
 80020bc:	002b      	movs	r3, r5
 80020be:	4093      	lsls	r3, r2
 80020c0:	4662      	mov	r2, ip
 80020c2:	431a      	orrs	r2, r3
 80020c4:	4693      	mov	fp, r2
 80020c6:	465d      	mov	r5, fp
 80020c8:	1e6b      	subs	r3, r5, #1
 80020ca:	419d      	sbcs	r5, r3
 80020cc:	430d      	orrs	r5, r1
 80020ce:	e615      	b.n	8001cfc <__aeabi_dsub+0x1c8>
 80020d0:	0762      	lsls	r2, r4, #29
 80020d2:	08c0      	lsrs	r0, r0, #3
 80020d4:	4302      	orrs	r2, r0
 80020d6:	08e4      	lsrs	r4, r4, #3
 80020d8:	e70d      	b.n	8001ef6 <__aeabi_dsub+0x3c2>
 80020da:	0011      	movs	r1, r2
 80020dc:	0027      	movs	r7, r4
 80020de:	3920      	subs	r1, #32
 80020e0:	40cf      	lsrs	r7, r1
 80020e2:	2a20      	cmp	r2, #32
 80020e4:	d005      	beq.n	80020f2 <__aeabi_dsub+0x5be>
 80020e6:	2140      	movs	r1, #64	@ 0x40
 80020e8:	1a8a      	subs	r2, r1, r2
 80020ea:	4094      	lsls	r4, r2
 80020ec:	0025      	movs	r5, r4
 80020ee:	4305      	orrs	r5, r0
 80020f0:	9503      	str	r5, [sp, #12]
 80020f2:	9d03      	ldr	r5, [sp, #12]
 80020f4:	1e6a      	subs	r2, r5, #1
 80020f6:	4195      	sbcs	r5, r2
 80020f8:	433d      	orrs	r5, r7
 80020fa:	e77d      	b.n	8001ff8 <__aeabi_dsub+0x4c4>
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x5ce>
 8002100:	e744      	b.n	8001f8c <__aeabi_dsub+0x458>
 8002102:	2601      	movs	r6, #1
 8002104:	400e      	ands	r6, r1
 8002106:	4663      	mov	r3, ip
 8002108:	08d9      	lsrs	r1, r3, #3
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	075a      	lsls	r2, r3, #29
 800210e:	430a      	orrs	r2, r1
 8002110:	08dc      	lsrs	r4, r3, #3
 8002112:	e6f0      	b.n	8001ef6 <__aeabi_dsub+0x3c2>
 8002114:	2a00      	cmp	r2, #0
 8002116:	d028      	beq.n	800216a <__aeabi_dsub+0x636>
 8002118:	4662      	mov	r2, ip
 800211a:	9f02      	ldr	r7, [sp, #8]
 800211c:	08c0      	lsrs	r0, r0, #3
 800211e:	433a      	orrs	r2, r7
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x5f0>
 8002122:	e6dc      	b.n	8001ede <__aeabi_dsub+0x3aa>
 8002124:	0762      	lsls	r2, r4, #29
 8002126:	4310      	orrs	r0, r2
 8002128:	2280      	movs	r2, #128	@ 0x80
 800212a:	08e4      	lsrs	r4, r4, #3
 800212c:	0312      	lsls	r2, r2, #12
 800212e:	4214      	tst	r4, r2
 8002130:	d009      	beq.n	8002146 <__aeabi_dsub+0x612>
 8002132:	08fd      	lsrs	r5, r7, #3
 8002134:	4215      	tst	r5, r2
 8002136:	d106      	bne.n	8002146 <__aeabi_dsub+0x612>
 8002138:	4663      	mov	r3, ip
 800213a:	2601      	movs	r6, #1
 800213c:	002c      	movs	r4, r5
 800213e:	08d8      	lsrs	r0, r3, #3
 8002140:	077b      	lsls	r3, r7, #29
 8002142:	4318      	orrs	r0, r3
 8002144:	400e      	ands	r6, r1
 8002146:	0f42      	lsrs	r2, r0, #29
 8002148:	00c0      	lsls	r0, r0, #3
 800214a:	08c0      	lsrs	r0, r0, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4302      	orrs	r2, r0
 8002150:	e601      	b.n	8001d56 <__aeabi_dsub+0x222>
 8002152:	4663      	mov	r3, ip
 8002154:	1a1d      	subs	r5, r3, r0
 8002156:	45ac      	cmp	ip, r5
 8002158:	4192      	sbcs	r2, r2
 800215a:	9b02      	ldr	r3, [sp, #8]
 800215c:	4252      	negs	r2, r2
 800215e:	1b1c      	subs	r4, r3, r4
 8002160:	000e      	movs	r6, r1
 8002162:	4688      	mov	r8, r1
 8002164:	2701      	movs	r7, #1
 8002166:	1aa4      	subs	r4, r4, r2
 8002168:	e546      	b.n	8001bf8 <__aeabi_dsub+0xc4>
 800216a:	4663      	mov	r3, ip
 800216c:	08d9      	lsrs	r1, r3, #3
 800216e:	9b02      	ldr	r3, [sp, #8]
 8002170:	075a      	lsls	r2, r3, #29
 8002172:	430a      	orrs	r2, r1
 8002174:	08dc      	lsrs	r4, r3, #3
 8002176:	e5ee      	b.n	8001d56 <__aeabi_dsub+0x222>
 8002178:	4663      	mov	r3, ip
 800217a:	9c02      	ldr	r4, [sp, #8]
 800217c:	9303      	str	r3, [sp, #12]
 800217e:	e6c7      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8002180:	08c0      	lsrs	r0, r0, #3
 8002182:	2a00      	cmp	r2, #0
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x654>
 8002186:	e6aa      	b.n	8001ede <__aeabi_dsub+0x3aa>
 8002188:	0762      	lsls	r2, r4, #29
 800218a:	4310      	orrs	r0, r2
 800218c:	2280      	movs	r2, #128	@ 0x80
 800218e:	08e4      	lsrs	r4, r4, #3
 8002190:	0312      	lsls	r2, r2, #12
 8002192:	4214      	tst	r4, r2
 8002194:	d0d7      	beq.n	8002146 <__aeabi_dsub+0x612>
 8002196:	9f02      	ldr	r7, [sp, #8]
 8002198:	08fd      	lsrs	r5, r7, #3
 800219a:	4215      	tst	r5, r2
 800219c:	d1d3      	bne.n	8002146 <__aeabi_dsub+0x612>
 800219e:	4663      	mov	r3, ip
 80021a0:	2601      	movs	r6, #1
 80021a2:	08d8      	lsrs	r0, r3, #3
 80021a4:	077b      	lsls	r3, r7, #29
 80021a6:	002c      	movs	r4, r5
 80021a8:	4318      	orrs	r0, r3
 80021aa:	400e      	ands	r6, r1
 80021ac:	e7cb      	b.n	8002146 <__aeabi_dsub+0x612>
 80021ae:	000a      	movs	r2, r1
 80021b0:	0027      	movs	r7, r4
 80021b2:	3a20      	subs	r2, #32
 80021b4:	40d7      	lsrs	r7, r2
 80021b6:	2920      	cmp	r1, #32
 80021b8:	d005      	beq.n	80021c6 <__aeabi_dsub+0x692>
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	1a52      	subs	r2, r2, r1
 80021be:	4094      	lsls	r4, r2
 80021c0:	0025      	movs	r5, r4
 80021c2:	4305      	orrs	r5, r0
 80021c4:	9503      	str	r5, [sp, #12]
 80021c6:	9d03      	ldr	r5, [sp, #12]
 80021c8:	1e6a      	subs	r2, r5, #1
 80021ca:	4195      	sbcs	r5, r2
 80021cc:	432f      	orrs	r7, r5
 80021ce:	e610      	b.n	8001df2 <__aeabi_dsub+0x2be>
 80021d0:	0014      	movs	r4, r2
 80021d2:	2500      	movs	r5, #0
 80021d4:	2200      	movs	r2, #0
 80021d6:	e556      	b.n	8001c86 <__aeabi_dsub+0x152>
 80021d8:	9b02      	ldr	r3, [sp, #8]
 80021da:	4460      	add	r0, ip
 80021dc:	4699      	mov	r9, r3
 80021de:	4560      	cmp	r0, ip
 80021e0:	4192      	sbcs	r2, r2
 80021e2:	444c      	add	r4, r9
 80021e4:	4252      	negs	r2, r2
 80021e6:	0005      	movs	r5, r0
 80021e8:	18a4      	adds	r4, r4, r2
 80021ea:	e74c      	b.n	8002086 <__aeabi_dsub+0x552>
 80021ec:	001a      	movs	r2, r3
 80021ee:	001c      	movs	r4, r3
 80021f0:	432a      	orrs	r2, r5
 80021f2:	d000      	beq.n	80021f6 <__aeabi_dsub+0x6c2>
 80021f4:	e6b3      	b.n	8001f5e <__aeabi_dsub+0x42a>
 80021f6:	e6c9      	b.n	8001f8c <__aeabi_dsub+0x458>
 80021f8:	2480      	movs	r4, #128	@ 0x80
 80021fa:	2600      	movs	r6, #0
 80021fc:	0324      	lsls	r4, r4, #12
 80021fe:	e5ae      	b.n	8001d5e <__aeabi_dsub+0x22a>
 8002200:	2120      	movs	r1, #32
 8002202:	2500      	movs	r5, #0
 8002204:	1a09      	subs	r1, r1, r0
 8002206:	e517      	b.n	8001c38 <__aeabi_dsub+0x104>
 8002208:	2200      	movs	r2, #0
 800220a:	2500      	movs	r5, #0
 800220c:	4c0b      	ldr	r4, [pc, #44]	@ (800223c <__aeabi_dsub+0x708>)
 800220e:	e53a      	b.n	8001c86 <__aeabi_dsub+0x152>
 8002210:	2d00      	cmp	r5, #0
 8002212:	d100      	bne.n	8002216 <__aeabi_dsub+0x6e2>
 8002214:	e5f6      	b.n	8001e04 <__aeabi_dsub+0x2d0>
 8002216:	464b      	mov	r3, r9
 8002218:	1bda      	subs	r2, r3, r7
 800221a:	4692      	mov	sl, r2
 800221c:	2f00      	cmp	r7, #0
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x6ee>
 8002220:	e66f      	b.n	8001f02 <__aeabi_dsub+0x3ce>
 8002222:	2a38      	cmp	r2, #56	@ 0x38
 8002224:	dc05      	bgt.n	8002232 <__aeabi_dsub+0x6fe>
 8002226:	2680      	movs	r6, #128	@ 0x80
 8002228:	0436      	lsls	r6, r6, #16
 800222a:	4334      	orrs	r4, r6
 800222c:	4688      	mov	r8, r1
 800222e:	000e      	movs	r6, r1
 8002230:	e6d1      	b.n	8001fd6 <__aeabi_dsub+0x4a2>
 8002232:	4688      	mov	r8, r1
 8002234:	000e      	movs	r6, r1
 8002236:	2501      	movs	r5, #1
 8002238:	e6de      	b.n	8001ff8 <__aeabi_dsub+0x4c4>
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	000007ff 	.word	0x000007ff
 8002240:	ff7fffff 	.word	0xff7fffff
 8002244:	000007fe 	.word	0x000007fe
 8002248:	2d00      	cmp	r5, #0
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x71a>
 800224c:	e668      	b.n	8001f20 <__aeabi_dsub+0x3ec>
 800224e:	464b      	mov	r3, r9
 8002250:	1bd9      	subs	r1, r3, r7
 8002252:	2f00      	cmp	r7, #0
 8002254:	d101      	bne.n	800225a <__aeabi_dsub+0x726>
 8002256:	468a      	mov	sl, r1
 8002258:	e5a7      	b.n	8001daa <__aeabi_dsub+0x276>
 800225a:	2701      	movs	r7, #1
 800225c:	2938      	cmp	r1, #56	@ 0x38
 800225e:	dd00      	ble.n	8002262 <__aeabi_dsub+0x72e>
 8002260:	e5c7      	b.n	8001df2 <__aeabi_dsub+0x2be>
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	0412      	lsls	r2, r2, #16
 8002266:	4314      	orrs	r4, r2
 8002268:	e5af      	b.n	8001dca <__aeabi_dsub+0x296>
 800226a:	46c0      	nop			@ (mov r8, r8)

0800226c <__aeabi_dcmpun>:
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	46c6      	mov	lr, r8
 8002270:	031e      	lsls	r6, r3, #12
 8002272:	0b36      	lsrs	r6, r6, #12
 8002274:	46b0      	mov	r8, r6
 8002276:	4e0d      	ldr	r6, [pc, #52]	@ (80022ac <__aeabi_dcmpun+0x40>)
 8002278:	030c      	lsls	r4, r1, #12
 800227a:	004d      	lsls	r5, r1, #1
 800227c:	005f      	lsls	r7, r3, #1
 800227e:	b500      	push	{lr}
 8002280:	0b24      	lsrs	r4, r4, #12
 8002282:	0d6d      	lsrs	r5, r5, #21
 8002284:	0d7f      	lsrs	r7, r7, #21
 8002286:	42b5      	cmp	r5, r6
 8002288:	d00b      	beq.n	80022a2 <__aeabi_dcmpun+0x36>
 800228a:	4908      	ldr	r1, [pc, #32]	@ (80022ac <__aeabi_dcmpun+0x40>)
 800228c:	2000      	movs	r0, #0
 800228e:	428f      	cmp	r7, r1
 8002290:	d104      	bne.n	800229c <__aeabi_dcmpun+0x30>
 8002292:	4646      	mov	r6, r8
 8002294:	4316      	orrs	r6, r2
 8002296:	0030      	movs	r0, r6
 8002298:	1e43      	subs	r3, r0, #1
 800229a:	4198      	sbcs	r0, r3
 800229c:	bc80      	pop	{r7}
 800229e:	46b8      	mov	r8, r7
 80022a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a2:	4304      	orrs	r4, r0
 80022a4:	2001      	movs	r0, #1
 80022a6:	2c00      	cmp	r4, #0
 80022a8:	d1f8      	bne.n	800229c <__aeabi_dcmpun+0x30>
 80022aa:	e7ee      	b.n	800228a <__aeabi_dcmpun+0x1e>
 80022ac:	000007ff 	.word	0x000007ff

080022b0 <__aeabi_d2iz>:
 80022b0:	000b      	movs	r3, r1
 80022b2:	0002      	movs	r2, r0
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	4d16      	ldr	r5, [pc, #88]	@ (8002310 <__aeabi_d2iz+0x60>)
 80022b8:	030c      	lsls	r4, r1, #12
 80022ba:	b082      	sub	sp, #8
 80022bc:	0049      	lsls	r1, r1, #1
 80022be:	2000      	movs	r0, #0
 80022c0:	9200      	str	r2, [sp, #0]
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	0b24      	lsrs	r4, r4, #12
 80022c6:	0d49      	lsrs	r1, r1, #21
 80022c8:	0fde      	lsrs	r6, r3, #31
 80022ca:	42a9      	cmp	r1, r5
 80022cc:	dd04      	ble.n	80022d8 <__aeabi_d2iz+0x28>
 80022ce:	4811      	ldr	r0, [pc, #68]	@ (8002314 <__aeabi_d2iz+0x64>)
 80022d0:	4281      	cmp	r1, r0
 80022d2:	dd03      	ble.n	80022dc <__aeabi_d2iz+0x2c>
 80022d4:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <__aeabi_d2iz+0x68>)
 80022d6:	18f0      	adds	r0, r6, r3
 80022d8:	b002      	add	sp, #8
 80022da:	bd70      	pop	{r4, r5, r6, pc}
 80022dc:	2080      	movs	r0, #128	@ 0x80
 80022de:	0340      	lsls	r0, r0, #13
 80022e0:	4320      	orrs	r0, r4
 80022e2:	4c0e      	ldr	r4, [pc, #56]	@ (800231c <__aeabi_d2iz+0x6c>)
 80022e4:	1a64      	subs	r4, r4, r1
 80022e6:	2c1f      	cmp	r4, #31
 80022e8:	dd08      	ble.n	80022fc <__aeabi_d2iz+0x4c>
 80022ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <__aeabi_d2iz+0x70>)
 80022ec:	1a5b      	subs	r3, r3, r1
 80022ee:	40d8      	lsrs	r0, r3
 80022f0:	0003      	movs	r3, r0
 80022f2:	4258      	negs	r0, r3
 80022f4:	2e00      	cmp	r6, #0
 80022f6:	d1ef      	bne.n	80022d8 <__aeabi_d2iz+0x28>
 80022f8:	0018      	movs	r0, r3
 80022fa:	e7ed      	b.n	80022d8 <__aeabi_d2iz+0x28>
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <__aeabi_d2iz+0x74>)
 80022fe:	9a00      	ldr	r2, [sp, #0]
 8002300:	469c      	mov	ip, r3
 8002302:	0003      	movs	r3, r0
 8002304:	4461      	add	r1, ip
 8002306:	408b      	lsls	r3, r1
 8002308:	40e2      	lsrs	r2, r4
 800230a:	4313      	orrs	r3, r2
 800230c:	e7f1      	b.n	80022f2 <__aeabi_d2iz+0x42>
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	000003fe 	.word	0x000003fe
 8002314:	0000041d 	.word	0x0000041d
 8002318:	7fffffff 	.word	0x7fffffff
 800231c:	00000433 	.word	0x00000433
 8002320:	00000413 	.word	0x00000413
 8002324:	fffffbed 	.word	0xfffffbed

08002328 <__aeabi_i2d>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	2800      	cmp	r0, #0
 800232c:	d016      	beq.n	800235c <__aeabi_i2d+0x34>
 800232e:	17c3      	asrs	r3, r0, #31
 8002330:	18c5      	adds	r5, r0, r3
 8002332:	405d      	eors	r5, r3
 8002334:	0fc4      	lsrs	r4, r0, #31
 8002336:	0028      	movs	r0, r5
 8002338:	f000 f824 	bl	8002384 <__clzsi2>
 800233c:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <__aeabi_i2d+0x58>)
 800233e:	1a1b      	subs	r3, r3, r0
 8002340:	055b      	lsls	r3, r3, #21
 8002342:	0d5b      	lsrs	r3, r3, #21
 8002344:	280a      	cmp	r0, #10
 8002346:	dc14      	bgt.n	8002372 <__aeabi_i2d+0x4a>
 8002348:	0002      	movs	r2, r0
 800234a:	002e      	movs	r6, r5
 800234c:	3215      	adds	r2, #21
 800234e:	4096      	lsls	r6, r2
 8002350:	220b      	movs	r2, #11
 8002352:	1a12      	subs	r2, r2, r0
 8002354:	40d5      	lsrs	r5, r2
 8002356:	032d      	lsls	r5, r5, #12
 8002358:	0b2d      	lsrs	r5, r5, #12
 800235a:	e003      	b.n	8002364 <__aeabi_i2d+0x3c>
 800235c:	2400      	movs	r4, #0
 800235e:	2300      	movs	r3, #0
 8002360:	2500      	movs	r5, #0
 8002362:	2600      	movs	r6, #0
 8002364:	051b      	lsls	r3, r3, #20
 8002366:	432b      	orrs	r3, r5
 8002368:	07e4      	lsls	r4, r4, #31
 800236a:	4323      	orrs	r3, r4
 800236c:	0030      	movs	r0, r6
 800236e:	0019      	movs	r1, r3
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	380b      	subs	r0, #11
 8002374:	4085      	lsls	r5, r0
 8002376:	032d      	lsls	r5, r5, #12
 8002378:	2600      	movs	r6, #0
 800237a:	0b2d      	lsrs	r5, r5, #12
 800237c:	e7f2      	b.n	8002364 <__aeabi_i2d+0x3c>
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	0000041e 	.word	0x0000041e

08002384 <__clzsi2>:
 8002384:	211c      	movs	r1, #28
 8002386:	2301      	movs	r3, #1
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	4298      	cmp	r0, r3
 800238c:	d301      	bcc.n	8002392 <__clzsi2+0xe>
 800238e:	0c00      	lsrs	r0, r0, #16
 8002390:	3910      	subs	r1, #16
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	4298      	cmp	r0, r3
 8002396:	d301      	bcc.n	800239c <__clzsi2+0x18>
 8002398:	0a00      	lsrs	r0, r0, #8
 800239a:	3908      	subs	r1, #8
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	4298      	cmp	r0, r3
 80023a0:	d301      	bcc.n	80023a6 <__clzsi2+0x22>
 80023a2:	0900      	lsrs	r0, r0, #4
 80023a4:	3904      	subs	r1, #4
 80023a6:	a202      	add	r2, pc, #8	@ (adr r2, 80023b0 <__clzsi2+0x2c>)
 80023a8:	5c10      	ldrb	r0, [r2, r0]
 80023aa:	1840      	adds	r0, r0, r1
 80023ac:	4770      	bx	lr
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	02020304 	.word	0x02020304
 80023b4:	01010101 	.word	0x01010101
	...

080023c0 <__clzdi2>:
 80023c0:	b510      	push	{r4, lr}
 80023c2:	2900      	cmp	r1, #0
 80023c4:	d103      	bne.n	80023ce <__clzdi2+0xe>
 80023c6:	f7ff ffdd 	bl	8002384 <__clzsi2>
 80023ca:	3020      	adds	r0, #32
 80023cc:	e002      	b.n	80023d4 <__clzdi2+0x14>
 80023ce:	0008      	movs	r0, r1
 80023d0:	f7ff ffd8 	bl	8002384 <__clzsi2>
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	46c0      	nop			@ (mov r8, r8)

080023d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_Init+0x3c>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_Init+0x3c>)
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	0049      	lsls	r1, r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023f2:	2003      	movs	r0, #3
 80023f4:	f000 f810 	bl	8002418 <HAL_InitTick>
 80023f8:	1e03      	subs	r3, r0, #0
 80023fa:	d003      	beq.n	8002404 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e001      	b.n	8002408 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002404:	f005 f94a 	bl	800769c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40022000 	.word	0x40022000

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002420:	230f      	movs	r3, #15
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002428:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <HAL_InitTick+0x88>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02b      	beq.n	8002488 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002430:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <HAL_InitTick+0x8c>)
 8002432:	681c      	ldr	r4, [r3, #0]
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_InitTick+0x88>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	0019      	movs	r1, r3
 800243a:	23fa      	movs	r3, #250	@ 0xfa
 800243c:	0098      	lsls	r0, r3, #2
 800243e:	f7fd fe69 	bl	8000114 <__udivsi3>
 8002442:	0003      	movs	r3, r0
 8002444:	0019      	movs	r1, r3
 8002446:	0020      	movs	r0, r4
 8002448:	f7fd fe64 	bl	8000114 <__udivsi3>
 800244c:	0003      	movs	r3, r0
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f96f 	bl	8002732 <HAL_SYSTICK_Config>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d112      	bne.n	800247e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d80a      	bhi.n	8002474 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	2301      	movs	r3, #1
 8002462:	425b      	negs	r3, r3
 8002464:	2200      	movs	r2, #0
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f92e 	bl	80026c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_InitTick+0x90>)
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e00d      	b.n	8002490 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002474:	230f      	movs	r3, #15
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e008      	b.n	8002490 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800247e:	230f      	movs	r3, #15
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e003      	b.n	8002490 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002488:	230f      	movs	r3, #15
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002490:	230f      	movs	r3, #15
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b005      	add	sp, #20
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000008 	.word	0x20000008
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_IncTick+0x1c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	001a      	movs	r2, r3
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_IncTick+0x20>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	18d2      	adds	r2, r2, r3
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_IncTick+0x20>)
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	20000004 	.word	0x20000004
 80024cc:	2000008c 	.word	0x2000008c

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b02      	ldr	r3, [pc, #8]	@ (80024e0 <HAL_GetTick+0x10>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	2000008c 	.word	0x2000008c

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3301      	adds	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_Delay+0x44>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	001a      	movs	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	189b      	adds	r3, r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	f7ff ffe0 	bl	80024d0 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d8f7      	bhi.n	800250c <HAL_Delay+0x28>
  {
  }
}
 800251c:	46c0      	nop			@ (mov r8, r8)
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	20000004 	.word	0x20000004

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	0002      	movs	r2, r0
 8002534:	1dfb      	adds	r3, r7, #7
 8002536:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b7f      	cmp	r3, #127	@ 0x7f
 800253e:	d809      	bhi.n	8002554 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002540:	1dfb      	adds	r3, r7, #7
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	001a      	movs	r2, r3
 8002546:	231f      	movs	r3, #31
 8002548:	401a      	ands	r2, r3
 800254a:	4b04      	ldr	r3, [pc, #16]	@ (800255c <__NVIC_EnableIRQ+0x30>)
 800254c:	2101      	movs	r1, #1
 800254e:	4091      	lsls	r1, r2
 8002550:	000a      	movs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002554:	46c0      	nop			@ (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	0002      	movs	r2, r0
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800256c:	1dfb      	adds	r3, r7, #7
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b7f      	cmp	r3, #127	@ 0x7f
 8002572:	d810      	bhi.n	8002596 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	001a      	movs	r2, r3
 800257a:	231f      	movs	r3, #31
 800257c:	4013      	ands	r3, r2
 800257e:	4908      	ldr	r1, [pc, #32]	@ (80025a0 <__NVIC_DisableIRQ+0x40>)
 8002580:	2201      	movs	r2, #1
 8002582:	409a      	lsls	r2, r3
 8002584:	0013      	movs	r3, r2
 8002586:	2280      	movs	r2, #128	@ 0x80
 8002588:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800258a:	f3bf 8f4f 	dsb	sy
}
 800258e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002590:	f3bf 8f6f 	isb	sy
}
 8002594:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b002      	add	sp, #8
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	0002      	movs	r2, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	1dfb      	adds	r3, r7, #7
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80025b8:	d828      	bhi.n	800260c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002678 <__NVIC_SetPriority+0xd4>)
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	33c0      	adds	r3, #192	@ 0xc0
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	589b      	ldr	r3, [r3, r2]
 80025ca:	1dfa      	adds	r2, r7, #7
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	0011      	movs	r1, r2
 80025d0:	2203      	movs	r2, #3
 80025d2:	400a      	ands	r2, r1
 80025d4:	00d2      	lsls	r2, r2, #3
 80025d6:	21ff      	movs	r1, #255	@ 0xff
 80025d8:	4091      	lsls	r1, r2
 80025da:	000a      	movs	r2, r1
 80025dc:	43d2      	mvns	r2, r2
 80025de:	401a      	ands	r2, r3
 80025e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	019b      	lsls	r3, r3, #6
 80025e6:	22ff      	movs	r2, #255	@ 0xff
 80025e8:	401a      	ands	r2, r3
 80025ea:	1dfb      	adds	r3, r7, #7
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	0018      	movs	r0, r3
 80025f0:	2303      	movs	r3, #3
 80025f2:	4003      	ands	r3, r0
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f8:	481f      	ldr	r0, [pc, #124]	@ (8002678 <__NVIC_SetPriority+0xd4>)
 80025fa:	1dfb      	adds	r3, r7, #7
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	430a      	orrs	r2, r1
 8002604:	33c0      	adds	r3, #192	@ 0xc0
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800260a:	e031      	b.n	8002670 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800260c:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <__NVIC_SetPriority+0xd8>)
 800260e:	1dfb      	adds	r3, r7, #7
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	0019      	movs	r1, r3
 8002614:	230f      	movs	r3, #15
 8002616:	400b      	ands	r3, r1
 8002618:	3b08      	subs	r3, #8
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3306      	adds	r3, #6
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	18d3      	adds	r3, r2, r3
 8002622:	3304      	adds	r3, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1dfa      	adds	r2, r7, #7
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	0011      	movs	r1, r2
 800262c:	2203      	movs	r2, #3
 800262e:	400a      	ands	r2, r1
 8002630:	00d2      	lsls	r2, r2, #3
 8002632:	21ff      	movs	r1, #255	@ 0xff
 8002634:	4091      	lsls	r1, r2
 8002636:	000a      	movs	r2, r1
 8002638:	43d2      	mvns	r2, r2
 800263a:	401a      	ands	r2, r3
 800263c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	019b      	lsls	r3, r3, #6
 8002642:	22ff      	movs	r2, #255	@ 0xff
 8002644:	401a      	ands	r2, r3
 8002646:	1dfb      	adds	r3, r7, #7
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	0018      	movs	r0, r3
 800264c:	2303      	movs	r3, #3
 800264e:	4003      	ands	r3, r0
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002654:	4809      	ldr	r0, [pc, #36]	@ (800267c <__NVIC_SetPriority+0xd8>)
 8002656:	1dfb      	adds	r3, r7, #7
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	001c      	movs	r4, r3
 800265c:	230f      	movs	r3, #15
 800265e:	4023      	ands	r3, r4
 8002660:	3b08      	subs	r3, #8
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	430a      	orrs	r2, r1
 8002666:	3306      	adds	r3, #6
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	18c3      	adds	r3, r0, r3
 800266c:	3304      	adds	r3, #4
 800266e:	601a      	str	r2, [r3, #0]
}
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b003      	add	sp, #12
 8002676:	bd90      	pop	{r4, r7, pc}
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	045b      	lsls	r3, r3, #17
 8002690:	429a      	cmp	r2, r3
 8002692:	d301      	bcc.n	8002698 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002694:	2301      	movs	r3, #1
 8002696:	e010      	b.n	80026ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002698:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <SysTick_Config+0x44>)
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	3a01      	subs	r2, #1
 800269e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a0:	2301      	movs	r3, #1
 80026a2:	425b      	negs	r3, r3
 80026a4:	2103      	movs	r1, #3
 80026a6:	0018      	movs	r0, r3
 80026a8:	f7ff ff7c 	bl	80025a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <SysTick_Config+0x44>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <SysTick_Config+0x44>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	0018      	movs	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	b002      	add	sp, #8
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			@ (mov r8, r8)
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	210f      	movs	r1, #15
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	1c02      	adds	r2, r0, #0
 80026d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b25b      	sxtb	r3, r3
 80026e2:	0011      	movs	r1, r2
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7ff ff5d 	bl	80025a4 <__NVIC_SetPriority>
}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b004      	add	sp, #16
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	0002      	movs	r2, r0
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fe:	1dfb      	adds	r3, r7, #7
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b25b      	sxtb	r3, r3
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff ff11 	bl	800252c <__NVIC_EnableIRQ>
}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	0002      	movs	r2, r0
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800271e:	1dfb      	adds	r3, r7, #7
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b25b      	sxtb	r3, r3
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff ff1b 	bl	8002560 <__NVIC_DisableIRQ>
}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff ff9f 	bl	8002680 <SysTick_Config>
 8002742:	0003      	movs	r3, r0
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e077      	b.n	800284e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3d      	ldr	r2, [pc, #244]	@ (8002858 <HAL_DMA_Init+0x10c>)
 8002764:	4694      	mov	ip, r2
 8002766:	4463      	add	r3, ip
 8002768:	2114      	movs	r1, #20
 800276a:	0018      	movs	r0, r3
 800276c:	f7fd fcd2 	bl	8000114 <__udivsi3>
 8002770:	0003      	movs	r3, r0
 8002772:	009a      	lsls	r2, r3, #2
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2225      	movs	r2, #37	@ 0x25
 800277c:	2102      	movs	r1, #2
 800277e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4934      	ldr	r1, [pc, #208]	@ (800285c <HAL_DMA_Init+0x110>)
 800278c:	400a      	ands	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6819      	ldr	r1, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fa3f 	bl	8002c4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	01db      	lsls	r3, r3, #7
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d102      	bne.n	80027e0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e8:	213f      	movs	r1, #63	@ 0x3f
 80027ea:	400a      	ands	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027f6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d011      	beq.n	8002824 <HAL_DMA_Init+0xd8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d80d      	bhi.n	8002824 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	0018      	movs	r0, r3
 800280c:	f000 fa4a 	bl	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	e008      	b.n	8002836 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2225      	movs	r2, #37	@ 0x25
 8002840:	2101      	movs	r1, #1
 8002842:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	@ 0x24
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	bffdfff8 	.word	0xbffdfff8
 800285c:	ffff800f 	.word	0xffff800f

08002860 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e066      	b.n	8002940 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	438a      	bics	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a30      	ldr	r2, [pc, #192]	@ (8002948 <HAL_DMA_DeInit+0xe8>)
 8002888:	4694      	mov	ip, r2
 800288a:	4463      	add	r3, ip
 800288c:	2114      	movs	r1, #20
 800288e:	0018      	movs	r0, r3
 8002890:	f7fd fc40 	bl	8000114 <__udivsi3>
 8002894:	0003      	movs	r3, r0
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80028a4:	4b29      	ldr	r3, [pc, #164]	@ (800294c <HAL_DMA_DeInit+0xec>)
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	221c      	movs	r2, #28
 80028ae:	4013      	ands	r3, r2
 80028b0:	2201      	movs	r2, #1
 80028b2:	409a      	lsls	r2, r3
 80028b4:	4b25      	ldr	r3, [pc, #148]	@ (800294c <HAL_DMA_DeInit+0xec>)
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 f9c5 	bl	8002c4c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028d2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d010      	beq.n	80028fe <HAL_DMA_DeInit+0x9e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d80c      	bhi.n	80028fe <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 f9dc 	bl	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80028fc:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2225      	movs	r2, #37	@ 0x25
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2224      	movs	r2, #36	@ 0x24
 800293a:	2100      	movs	r1, #0
 800293c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}
 8002948:	bffdfff8 	.word	0xbffdfff8
 800294c:	40020000 	.word	0x40020000

08002950 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e050      	b.n	8002a04 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2225      	movs	r2, #37	@ 0x25
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d008      	beq.n	8002980 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2204      	movs	r2, #4
 8002972:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	@ 0x24
 8002978:	2100      	movs	r1, #0
 800297a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e041      	b.n	8002a04 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	210e      	movs	r1, #14
 800298c:	438a      	bics	r2, r1
 800298e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	491c      	ldr	r1, [pc, #112]	@ (8002a0c <HAL_DMA_Abort+0xbc>)
 800299c:	400a      	ands	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2101      	movs	r1, #1
 80029ac:	438a      	bics	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80029b0:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <HAL_DMA_Abort+0xc0>)
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	221c      	movs	r2, #28
 80029ba:	4013      	ands	r3, r2
 80029bc:	2201      	movs	r2, #1
 80029be:	409a      	lsls	r2, r3
 80029c0:	4b13      	ldr	r3, [pc, #76]	@ (8002a10 <HAL_DMA_Abort+0xc0>)
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00c      	beq.n	80029f2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e2:	490a      	ldr	r1, [pc, #40]	@ (8002a0c <HAL_DMA_Abort+0xbc>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80029f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2225      	movs	r2, #37	@ 0x25
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2224      	movs	r2, #36	@ 0x24
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	fffffeff 	.word	0xfffffeff
 8002a10:	40020000 	.word	0x40020000

08002a14 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	210f      	movs	r1, #15
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2225      	movs	r2, #37	@ 0x25
 8002a28:	5c9b      	ldrb	r3, [r3, r2]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d006      	beq.n	8002a3e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2204      	movs	r2, #4
 8002a34:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002a36:	187b      	adds	r3, r7, r1
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e049      	b.n	8002ad2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	210e      	movs	r1, #14
 8002a4a:	438a      	bics	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2101      	movs	r1, #1
 8002a5a:	438a      	bics	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a68:	491d      	ldr	r1, [pc, #116]	@ (8002ae0 <HAL_DMA_Abort_IT+0xcc>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <HAL_DMA_Abort_IT+0xd0>)
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	221c      	movs	r2, #28
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ae4 <HAL_DMA_Abort_IT+0xd0>)
 8002a80:	430a      	orrs	r2, r1
 8002a82:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa0:	490f      	ldr	r1, [pc, #60]	@ (8002ae0 <HAL_DMA_Abort_IT+0xcc>)
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002aae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2225      	movs	r2, #37	@ 0x25
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	@ 0x24
 8002abc:	2100      	movs	r1, #0
 8002abe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	0010      	movs	r0, r2
 8002ad0:	4798      	blx	r3
    }
  }
  return status;
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b004      	add	sp, #16
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	fffffeff 	.word	0xfffffeff
 8002ae4:	40020000 	.word	0x40020000

08002ae8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002af0:	4b55      	ldr	r3, [pc, #340]	@ (8002c48 <HAL_DMA_IRQHandler+0x160>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	221c      	movs	r2, #28
 8002b04:	4013      	ands	r3, r2
 8002b06:	2204      	movs	r2, #4
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	0013      	movs	r3, r2
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d027      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x7a>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2204      	movs	r2, #4
 8002b16:	4013      	ands	r3, r2
 8002b18:	d023      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2220      	movs	r2, #32
 8002b22:	4013      	ands	r3, r2
 8002b24:	d107      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2104      	movs	r1, #4
 8002b32:	438a      	bics	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002b36:	4b44      	ldr	r3, [pc, #272]	@ (8002c48 <HAL_DMA_IRQHandler+0x160>)
 8002b38:	6859      	ldr	r1, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	221c      	movs	r2, #28
 8002b40:	4013      	ands	r3, r2
 8002b42:	2204      	movs	r2, #4
 8002b44:	409a      	lsls	r2, r3
 8002b46:	4b40      	ldr	r3, [pc, #256]	@ (8002c48 <HAL_DMA_IRQHandler+0x160>)
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d100      	bne.n	8002b56 <HAL_DMA_IRQHandler+0x6e>
 8002b54:	e073      	b.n	8002c3e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002b60:	e06d      	b.n	8002c3e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	221c      	movs	r2, #28
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	0013      	movs	r3, r2
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	d02e      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xec>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d02a      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2220      	movs	r2, #32
 8002b86:	4013      	ands	r3, r2
 8002b88:	d10b      	bne.n	8002ba2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	210a      	movs	r1, #10
 8002b96:	438a      	bics	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2225      	movs	r2, #37	@ 0x25
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002ba2:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_DMA_IRQHandler+0x160>)
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	221c      	movs	r2, #28
 8002bac:	4013      	ands	r3, r2
 8002bae:	2202      	movs	r2, #2
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	4b25      	ldr	r3, [pc, #148]	@ (8002c48 <HAL_DMA_IRQHandler+0x160>)
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	@ 0x24
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d03a      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	0010      	movs	r0, r2
 8002bd0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002bd2:	e034      	b.n	8002c3e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	221c      	movs	r2, #28
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2208      	movs	r2, #8
 8002bde:	409a      	lsls	r2, r3
 8002be0:	0013      	movs	r3, r2
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4013      	ands	r3, r2
 8002be6:	d02b      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x158>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2208      	movs	r2, #8
 8002bec:	4013      	ands	r3, r2
 8002bee:	d027      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	210e      	movs	r1, #14
 8002bfc:	438a      	bics	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_DMA_IRQHandler+0x160>)
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	221c      	movs	r2, #28
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <HAL_DMA_IRQHandler+0x160>)
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2225      	movs	r2, #37	@ 0x25
 8002c20:	2101      	movs	r1, #1
 8002c22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	@ 0x24
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	0010      	movs	r0, r2
 8002c3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	46c0      	nop			@ (mov r8, r8)
}
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b004      	add	sp, #16
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40020000 	.word	0x40020000

08002c4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	4a10      	ldr	r2, [pc, #64]	@ (8002c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002c5c:	4694      	mov	ip, r2
 8002c5e:	4463      	add	r3, ip
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	001a      	movs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	23ff      	movs	r3, #255	@ 0xff
 8002c70:	4013      	ands	r3, r2
 8002c72:	3b08      	subs	r3, #8
 8002c74:	2114      	movs	r1, #20
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7fd fa4c 	bl	8000114 <__udivsi3>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a07      	ldr	r2, [pc, #28]	@ (8002ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002c84:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	221f      	movs	r2, #31
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002c94:	46c0      	nop			@ (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b004      	add	sp, #16
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	10008200 	.word	0x10008200
 8002ca0:	40020880 	.word	0x40020880

08002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	223f      	movs	r2, #63	@ 0x3f
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002cba:	4694      	mov	ip, r2
 8002cbc:	4463      	add	r3, ip
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	@ (8002ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b004      	add	sp, #16
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	1000823f 	.word	0x1000823f
 8002ce8:	40020940 	.word	0x40020940

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cfa:	e147      	b.n	8002f8c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2101      	movs	r1, #1
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4091      	lsls	r1, r2
 8002d06:	000a      	movs	r2, r1
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d100      	bne.n	8002d14 <HAL_GPIO_Init+0x28>
 8002d12:	e138      	b.n	8002f86 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d005      	beq.n	8002d2c <HAL_GPIO_Init+0x40>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2203      	movs	r2, #3
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d130      	bne.n	8002d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	0013      	movs	r3, r2
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	0013      	movs	r3, r2
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d62:	2201      	movs	r2, #1
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
 8002d68:	0013      	movs	r3, r2
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	2201      	movs	r2, #1
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	0013      	movs	r3, r2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2203      	movs	r2, #3
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d017      	beq.n	8002dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	409a      	lsls	r2, r3
 8002da8:	0013      	movs	r3, r2
 8002daa:	43da      	mvns	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	0013      	movs	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d123      	bne.n	8002e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	08da      	lsrs	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3208      	adds	r2, #8
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	58d3      	ldr	r3, [r2, r3]
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2207      	movs	r2, #7
 8002de8:	4013      	ands	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	220f      	movs	r2, #15
 8002dee:	409a      	lsls	r2, r3
 8002df0:	0013      	movs	r3, r2
 8002df2:	43da      	mvns	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2107      	movs	r1, #7
 8002e02:	400b      	ands	r3, r1
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	409a      	lsls	r2, r3
 8002e08:	0013      	movs	r3, r2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	08da      	lsrs	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3208      	adds	r2, #8
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	6939      	ldr	r1, [r7, #16]
 8002e1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	409a      	lsls	r2, r3
 8002e44:	0013      	movs	r3, r2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	23c0      	movs	r3, #192	@ 0xc0
 8002e58:	029b      	lsls	r3, r3, #10
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d100      	bne.n	8002e60 <HAL_GPIO_Init+0x174>
 8002e5e:	e092      	b.n	8002f86 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002e60:	4a50      	ldr	r2, [pc, #320]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	3318      	adds	r3, #24
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	589b      	ldr	r3, [r3, r2]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2203      	movs	r2, #3
 8002e72:	4013      	ands	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	220f      	movs	r2, #15
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	23a0      	movs	r3, #160	@ 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x1ca>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a45      	ldr	r2, [pc, #276]	@ (8002fa8 <HAL_GPIO_Init+0x2bc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x1c6>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a44      	ldr	r2, [pc, #272]	@ (8002fac <HAL_GPIO_Init+0x2c0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x1c2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a43      	ldr	r2, [pc, #268]	@ (8002fb0 <HAL_GPIO_Init+0x2c4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x1be>
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e006      	b.n	8002eb8 <HAL_GPIO_Init+0x1cc>
 8002eaa:	2305      	movs	r3, #5
 8002eac:	e004      	b.n	8002eb8 <HAL_GPIO_Init+0x1cc>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e002      	b.n	8002eb8 <HAL_GPIO_Init+0x1cc>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_GPIO_Init+0x1cc>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	2103      	movs	r1, #3
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	00d2      	lsls	r2, r2, #3
 8002ec0:	4093      	lsls	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002ec8:	4936      	ldr	r1, [pc, #216]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3318      	adds	r3, #24
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ed6:	4b33      	ldr	r3, [pc, #204]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	2380      	movs	r3, #128	@ 0x80
 8002eec:	035b      	lsls	r3, r3, #13
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002efa:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002f00:	4b28      	ldr	r3, [pc, #160]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	039b      	lsls	r3, r3, #14
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f24:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002f2c:	2384      	movs	r3, #132	@ 0x84
 8002f2e:	58d3      	ldr	r3, [r2, r3]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	029b      	lsls	r3, r3, #10
 8002f44:	4013      	ands	r3, r2
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f50:	4914      	ldr	r1, [pc, #80]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002f52:	2284      	movs	r2, #132	@ 0x84
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002f58:	4a12      	ldr	r2, [pc, #72]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002f5a:	2380      	movs	r3, #128	@ 0x80
 8002f5c:	58d3      	ldr	r3, [r2, r3]
 8002f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	43da      	mvns	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	025b      	lsls	r3, r3, #9
 8002f72:	4013      	ands	r3, r2
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f7e:	4909      	ldr	r1, [pc, #36]	@ (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002f80:	2280      	movs	r2, #128	@ 0x80
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	40da      	lsrs	r2, r3
 8002f94:	1e13      	subs	r3, r2, #0
 8002f96:	d000      	beq.n	8002f9a <HAL_GPIO_Init+0x2ae>
 8002f98:	e6b0      	b.n	8002cfc <HAL_GPIO_Init+0x10>
  }
}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	46c0      	nop			@ (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b006      	add	sp, #24
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021800 	.word	0x40021800
 8002fa8:	50000400 	.word	0x50000400
 8002fac:	50000800 	.word	0x50000800
 8002fb0:	50000c00 	.word	0x50000c00

08002fb4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002fc2:	e0b4      	b.n	800312e <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d100      	bne.n	8002fd8 <HAL_GPIO_DeInit+0x24>
 8002fd6:	e0a7      	b.n	8003128 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8002fd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3318      	adds	r3, #24
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	589b      	ldr	r3, [r3, r2]
 8002fe4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4013      	ands	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	220f      	movs	r2, #15
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	23a0      	movs	r3, #160	@ 0xa0
 8002ffc:	05db      	lsls	r3, r3, #23
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d013      	beq.n	800302a <HAL_GPIO_DeInit+0x76>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a50      	ldr	r2, [pc, #320]	@ (8003148 <HAL_GPIO_DeInit+0x194>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00d      	beq.n	8003026 <HAL_GPIO_DeInit+0x72>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4f      	ldr	r2, [pc, #316]	@ (800314c <HAL_GPIO_DeInit+0x198>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <HAL_GPIO_DeInit+0x6e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4e      	ldr	r2, [pc, #312]	@ (8003150 <HAL_GPIO_DeInit+0x19c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_GPIO_DeInit+0x6a>
 800301a:	2303      	movs	r3, #3
 800301c:	e006      	b.n	800302c <HAL_GPIO_DeInit+0x78>
 800301e:	2305      	movs	r3, #5
 8003020:	e004      	b.n	800302c <HAL_GPIO_DeInit+0x78>
 8003022:	2302      	movs	r3, #2
 8003024:	e002      	b.n	800302c <HAL_GPIO_DeInit+0x78>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_GPIO_DeInit+0x78>
 800302a:	2300      	movs	r3, #0
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	2103      	movs	r1, #3
 8003030:	400a      	ands	r2, r1
 8003032:	00d2      	lsls	r2, r2, #3
 8003034:	4093      	lsls	r3, r2
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d136      	bne.n	80030aa <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800303c:	4a41      	ldr	r2, [pc, #260]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	58d3      	ldr	r3, [r2, r3]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	43d2      	mvns	r2, r2
 8003046:	493f      	ldr	r1, [pc, #252]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 8003048:	4013      	ands	r3, r2
 800304a:	2280      	movs	r2, #128	@ 0x80
 800304c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800304e:	4a3d      	ldr	r2, [pc, #244]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 8003050:	2384      	movs	r3, #132	@ 0x84
 8003052:	58d3      	ldr	r3, [r2, r3]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	43d2      	mvns	r2, r2
 8003058:	493a      	ldr	r1, [pc, #232]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 800305a:	4013      	ands	r3, r2
 800305c:	2284      	movs	r2, #132	@ 0x84
 800305e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003060:	4b38      	ldr	r3, [pc, #224]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43d9      	mvns	r1, r3
 8003068:	4b36      	ldr	r3, [pc, #216]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 800306a:	400a      	ands	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800306e:	4b35      	ldr	r3, [pc, #212]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43d9      	mvns	r1, r3
 8003076:	4b33      	ldr	r3, [pc, #204]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 8003078:	400a      	ands	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2203      	movs	r2, #3
 8003080:	4013      	ands	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	220f      	movs	r2, #15
 8003086:	409a      	lsls	r2, r3
 8003088:	0013      	movs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800308c:	4a2d      	ldr	r2, [pc, #180]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3318      	adds	r3, #24
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	589a      	ldr	r2, [r3, r2]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	43d9      	mvns	r1, r3
 800309c:	4829      	ldr	r0, [pc, #164]	@ (8003144 <HAL_GPIO_DeInit+0x190>)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	400a      	ands	r2, r1
 80030a4:	3318      	adds	r3, #24
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2103      	movs	r1, #3
 80030b4:	4099      	lsls	r1, r3
 80030b6:	000b      	movs	r3, r1
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3208      	adds	r2, #8
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	58d3      	ldr	r3, [r2, r3]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	2107      	movs	r1, #7
 80030ce:	400a      	ands	r2, r1
 80030d0:	0092      	lsls	r2, r2, #2
 80030d2:	210f      	movs	r1, #15
 80030d4:	4091      	lsls	r1, r2
 80030d6:	000a      	movs	r2, r1
 80030d8:	43d1      	mvns	r1, r2
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	08d2      	lsrs	r2, r2, #3
 80030de:	4019      	ands	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	0052      	lsls	r2, r2, #1
 80030f0:	2103      	movs	r1, #3
 80030f2:	4091      	lsls	r1, r2
 80030f4:	000a      	movs	r2, r1
 80030f6:	43d2      	mvns	r2, r2
 80030f8:	401a      	ands	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2101      	movs	r1, #1
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4091      	lsls	r1, r2
 8003108:	000a      	movs	r2, r1
 800310a:	43d2      	mvns	r2, r2
 800310c:	401a      	ands	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	0052      	lsls	r2, r2, #1
 800311a:	2103      	movs	r1, #3
 800311c:	4091      	lsls	r1, r2
 800311e:	000a      	movs	r2, r1
 8003120:	43d2      	mvns	r2, r2
 8003122:	401a      	ands	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3301      	adds	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	40da      	lsrs	r2, r3
 8003134:	1e13      	subs	r3, r2, #0
 8003136:	d000      	beq.n	800313a <HAL_GPIO_DeInit+0x186>
 8003138:	e744      	b.n	8002fc4 <HAL_GPIO_DeInit+0x10>
  }
}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	46c0      	nop			@ (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021800 	.word	0x40021800
 8003148:	50000400 	.word	0x50000400
 800314c:	50000800 	.word	0x50000800
 8003150:	50000c00 	.word	0x50000c00

08003154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	000a      	movs	r2, r1
 800315e:	1cbb      	adds	r3, r7, #2
 8003160:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	1cba      	adds	r2, r7, #2
 8003168:	8812      	ldrh	r2, [r2, #0]
 800316a:	4013      	ands	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800316e:	230f      	movs	r3, #15
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e003      	b.n	8003180 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003178:	230f      	movs	r3, #15
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003180:	230f      	movs	r3, #15
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	781b      	ldrb	r3, [r3, #0]
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b004      	add	sp, #16
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	0008      	movs	r0, r1
 8003198:	0011      	movs	r1, r2
 800319a:	1cbb      	adds	r3, r7, #2
 800319c:	1c02      	adds	r2, r0, #0
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	1c7b      	adds	r3, r7, #1
 80031a2:	1c0a      	adds	r2, r1, #0
 80031a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a6:	1c7b      	adds	r3, r7, #1
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d004      	beq.n	80031b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ae:	1cbb      	adds	r3, r7, #2
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031b6:	e003      	b.n	80031c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031b8:	1cbb      	adds	r3, r7, #2
 80031ba:	881a      	ldrh	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031c0:	46c0      	nop			@ (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	0002      	movs	r2, r0
 80031d0:	1dbb      	adds	r3, r7, #6
 80031d2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80031d4:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	1dba      	adds	r2, r7, #6
 80031da:	8812      	ldrh	r2, [r2, #0]
 80031dc:	4013      	ands	r3, r2
 80031de:	d008      	beq.n	80031f2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80031e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031e2:	1dba      	adds	r2, r7, #6
 80031e4:	8812      	ldrh	r2, [r2, #0]
 80031e6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80031e8:	1dbb      	adds	r3, r7, #6
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f004 fa3b 	bl	8007668 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80031f2:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	1dba      	adds	r2, r7, #6
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	4013      	ands	r3, r2
 80031fc:	d008      	beq.n	8003210 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003200:	1dba      	adds	r2, r7, #6
 8003202:	8812      	ldrh	r2, [r2, #0]
 8003204:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003206:	1dbb      	adds	r3, r7, #6
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	0018      	movs	r0, r3
 800320c:	f000 f806 	bl	800321c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003210:	46c0      	nop			@ (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021800 	.word	0x40021800

0800321c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	0002      	movs	r2, r0
 8003224:	1dbb      	adds	r3, r7, #6
 8003226:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e08f      	b.n	8003362 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2241      	movs	r2, #65	@ 0x41
 8003246:	5c9b      	ldrb	r3, [r3, r2]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2240      	movs	r2, #64	@ 0x40
 8003252:	2100      	movs	r1, #0
 8003254:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f003 fd89 	bl	8006d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2241      	movs	r2, #65	@ 0x41
 8003262:	2124      	movs	r1, #36	@ 0x24
 8003264:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	438a      	bics	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	493b      	ldr	r1, [pc, #236]	@ (800336c <HAL_I2C_Init+0x13c>)
 8003280:	400a      	ands	r2, r1
 8003282:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4938      	ldr	r1, [pc, #224]	@ (8003370 <HAL_I2C_Init+0x140>)
 8003290:	400a      	ands	r2, r1
 8003292:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2180      	movs	r1, #128	@ 0x80
 80032a6:	0209      	lsls	r1, r1, #8
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e007      	b.n	80032be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2184      	movs	r1, #132	@ 0x84
 80032b8:	0209      	lsls	r1, r1, #8
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d109      	bne.n	80032da <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2180      	movs	r1, #128	@ 0x80
 80032d2:	0109      	lsls	r1, r1, #4
 80032d4:	430a      	orrs	r2, r1
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	e007      	b.n	80032ea <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4923      	ldr	r1, [pc, #140]	@ (8003374 <HAL_I2C_Init+0x144>)
 80032e6:	400a      	ands	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4920      	ldr	r1, [pc, #128]	@ (8003378 <HAL_I2C_Init+0x148>)
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	491a      	ldr	r1, [pc, #104]	@ (8003370 <HAL_I2C_Init+0x140>)
 8003306:	400a      	ands	r2, r1
 8003308:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	431a      	orrs	r2, r3
 8003314:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69d9      	ldr	r1, [r3, #28]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1a      	ldr	r2, [r3, #32]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2241      	movs	r2, #65	@ 0x41
 800334e:	2120      	movs	r1, #32
 8003350:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2242      	movs	r2, #66	@ 0x42
 800335c:	2100      	movs	r1, #0
 800335e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b002      	add	sp, #8
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			@ (mov r8, r8)
 800336c:	f0ffffff 	.word	0xf0ffffff
 8003370:	ffff7fff 	.word	0xffff7fff
 8003374:	fffff7ff 	.word	0xfffff7ff
 8003378:	02008000 	.word	0x02008000

0800337c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b089      	sub	sp, #36	@ 0x24
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	000c      	movs	r4, r1
 8003386:	0010      	movs	r0, r2
 8003388:	0019      	movs	r1, r3
 800338a:	230a      	movs	r3, #10
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	1c22      	adds	r2, r4, #0
 8003390:	801a      	strh	r2, [r3, #0]
 8003392:	2308      	movs	r3, #8
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	1c02      	adds	r2, r0, #0
 8003398:	801a      	strh	r2, [r3, #0]
 800339a:	1dbb      	adds	r3, r7, #6
 800339c:	1c0a      	adds	r2, r1, #0
 800339e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2241      	movs	r2, #65	@ 0x41
 80033a4:	5c9b      	ldrb	r3, [r3, r2]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d000      	beq.n	80033ae <HAL_I2C_Mem_Write+0x32>
 80033ac:	e10c      	b.n	80035c8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <HAL_I2C_Mem_Write+0x42>
 80033b4:	232c      	movs	r3, #44	@ 0x2c
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2280      	movs	r2, #128	@ 0x80
 80033c2:	0092      	lsls	r2, r2, #2
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0ff      	b.n	80035ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2240      	movs	r2, #64	@ 0x40
 80033ce:	5c9b      	ldrb	r3, [r3, r2]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2C_Mem_Write+0x5c>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e0f8      	b.n	80035ca <HAL_I2C_Mem_Write+0x24e>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2240      	movs	r2, #64	@ 0x40
 80033dc:	2101      	movs	r1, #1
 80033de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033e0:	f7ff f876 	bl	80024d0 <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	0219      	lsls	r1, r3, #8
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2319      	movs	r3, #25
 80033f4:	2201      	movs	r2, #1
 80033f6:	f000 fb0b 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0e3      	b.n	80035ca <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2241      	movs	r2, #65	@ 0x41
 8003406:	2121      	movs	r1, #33	@ 0x21
 8003408:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2242      	movs	r2, #66	@ 0x42
 800340e:	2140      	movs	r1, #64	@ 0x40
 8003410:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800341c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	222c      	movs	r2, #44	@ 0x2c
 8003422:	18ba      	adds	r2, r7, r2
 8003424:	8812      	ldrh	r2, [r2, #0]
 8003426:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800342e:	1dbb      	adds	r3, r7, #6
 8003430:	881c      	ldrh	r4, [r3, #0]
 8003432:	2308      	movs	r3, #8
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	881a      	ldrh	r2, [r3, #0]
 8003438:	230a      	movs	r3, #10
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	8819      	ldrh	r1, [r3, #0]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	0023      	movs	r3, r4
 800344a:	f000 f9f9 	bl	8003840 <I2C_RequestMemoryWrite>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d005      	beq.n	800345e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2240      	movs	r2, #64	@ 0x40
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0b5      	b.n	80035ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	2bff      	cmp	r3, #255	@ 0xff
 8003466:	d911      	bls.n	800348c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	22ff      	movs	r2, #255	@ 0xff
 800346c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	b2da      	uxtb	r2, r3
 8003474:	2380      	movs	r3, #128	@ 0x80
 8003476:	045c      	lsls	r4, r3, #17
 8003478:	230a      	movs	r3, #10
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	8819      	ldrh	r1, [r3, #0]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	2300      	movs	r3, #0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	0023      	movs	r3, r4
 8003486:	f000 fc9d 	bl	8003dc4 <I2C_TransferConfig>
 800348a:	e012      	b.n	80034b2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349a:	b2da      	uxtb	r2, r3
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	049c      	lsls	r4, r3, #18
 80034a0:	230a      	movs	r3, #10
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	8819      	ldrh	r1, [r3, #0]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	2300      	movs	r3, #0
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	0023      	movs	r3, r4
 80034ae:	f000 fc89 	bl	8003dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f000 fb01 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e081      	b.n	80035ca <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d03a      	beq.n	8003576 <HAL_I2C_Mem_Write+0x1fa>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d136      	bne.n	8003576 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	0013      	movs	r3, r2
 8003512:	2200      	movs	r2, #0
 8003514:	2180      	movs	r1, #128	@ 0x80
 8003516:	f000 fa7b 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e053      	b.n	80035ca <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	2bff      	cmp	r3, #255	@ 0xff
 800352a:	d911      	bls.n	8003550 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	22ff      	movs	r2, #255	@ 0xff
 8003530:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003536:	b2da      	uxtb	r2, r3
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	045c      	lsls	r4, r3, #17
 800353c:	230a      	movs	r3, #10
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	8819      	ldrh	r1, [r3, #0]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	2300      	movs	r3, #0
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	0023      	movs	r3, r4
 800354a:	f000 fc3b 	bl	8003dc4 <I2C_TransferConfig>
 800354e:	e012      	b.n	8003576 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355e:	b2da      	uxtb	r2, r3
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	049c      	lsls	r4, r3, #18
 8003564:	230a      	movs	r3, #10
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	8819      	ldrh	r1, [r3, #0]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	2300      	movs	r3, #0
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	0023      	movs	r3, r4
 8003572:	f000 fc27 	bl	8003dc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d198      	bne.n	80034b2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	0018      	movs	r0, r3
 8003588:	f000 fae0 	bl	8003b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d001      	beq.n	8003594 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e01a      	b.n	80035ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2220      	movs	r2, #32
 800359a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	490b      	ldr	r1, [pc, #44]	@ (80035d4 <HAL_I2C_Mem_Write+0x258>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2241      	movs	r2, #65	@ 0x41
 80035b0:	2120      	movs	r1, #32
 80035b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2242      	movs	r2, #66	@ 0x42
 80035b8:	2100      	movs	r1, #0
 80035ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2240      	movs	r2, #64	@ 0x40
 80035c0:	2100      	movs	r1, #0
 80035c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b007      	add	sp, #28
 80035d0:	bd90      	pop	{r4, r7, pc}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	fe00e800 	.word	0xfe00e800

080035d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b089      	sub	sp, #36	@ 0x24
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	000c      	movs	r4, r1
 80035e2:	0010      	movs	r0, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	230a      	movs	r3, #10
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	1c22      	adds	r2, r4, #0
 80035ec:	801a      	strh	r2, [r3, #0]
 80035ee:	2308      	movs	r3, #8
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	1c02      	adds	r2, r0, #0
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	1dbb      	adds	r3, r7, #6
 80035f8:	1c0a      	adds	r2, r1, #0
 80035fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2241      	movs	r2, #65	@ 0x41
 8003600:	5c9b      	ldrb	r3, [r3, r2]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b20      	cmp	r3, #32
 8003606:	d000      	beq.n	800360a <HAL_I2C_Mem_Read+0x32>
 8003608:	e110      	b.n	800382c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_I2C_Mem_Read+0x42>
 8003610:	232c      	movs	r3, #44	@ 0x2c
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2280      	movs	r2, #128	@ 0x80
 800361e:	0092      	lsls	r2, r2, #2
 8003620:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e103      	b.n	800382e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2240      	movs	r2, #64	@ 0x40
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_I2C_Mem_Read+0x5c>
 8003630:	2302      	movs	r3, #2
 8003632:	e0fc      	b.n	800382e <HAL_I2C_Mem_Read+0x256>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2240      	movs	r2, #64	@ 0x40
 8003638:	2101      	movs	r1, #1
 800363a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800363c:	f7fe ff48 	bl	80024d0 <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003644:	2380      	movs	r3, #128	@ 0x80
 8003646:	0219      	lsls	r1, r3, #8
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2319      	movs	r3, #25
 8003650:	2201      	movs	r2, #1
 8003652:	f000 f9dd 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0e7      	b.n	800382e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2241      	movs	r2, #65	@ 0x41
 8003662:	2122      	movs	r1, #34	@ 0x22
 8003664:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2242      	movs	r2, #66	@ 0x42
 800366a:	2140      	movs	r1, #64	@ 0x40
 800366c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003678:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	222c      	movs	r2, #44	@ 0x2c
 800367e:	18ba      	adds	r2, r7, r2
 8003680:	8812      	ldrh	r2, [r2, #0]
 8003682:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800368a:	1dbb      	adds	r3, r7, #6
 800368c:	881c      	ldrh	r4, [r3, #0]
 800368e:	2308      	movs	r3, #8
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	881a      	ldrh	r2, [r3, #0]
 8003694:	230a      	movs	r3, #10
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	8819      	ldrh	r1, [r3, #0]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	0023      	movs	r3, r4
 80036a6:	f000 f92f 	bl	8003908 <I2C_RequestMemoryRead>
 80036aa:	1e03      	subs	r3, r0, #0
 80036ac:	d005      	beq.n	80036ba <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2240      	movs	r2, #64	@ 0x40
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e0b9      	b.n	800382e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2bff      	cmp	r3, #255	@ 0xff
 80036c2:	d911      	bls.n	80036e8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	22ff      	movs	r2, #255	@ 0xff
 80036c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	045c      	lsls	r4, r3, #17
 80036d4:	230a      	movs	r3, #10
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	8819      	ldrh	r1, [r3, #0]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	4b56      	ldr	r3, [pc, #344]	@ (8003838 <HAL_I2C_Mem_Read+0x260>)
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	0023      	movs	r3, r4
 80036e2:	f000 fb6f 	bl	8003dc4 <I2C_TransferConfig>
 80036e6:	e012      	b.n	800370e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	2380      	movs	r3, #128	@ 0x80
 80036fa:	049c      	lsls	r4, r3, #18
 80036fc:	230a      	movs	r3, #10
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	8819      	ldrh	r1, [r3, #0]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	4b4c      	ldr	r3, [pc, #304]	@ (8003838 <HAL_I2C_Mem_Read+0x260>)
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	0023      	movs	r3, r4
 800370a:	f000 fb5b 	bl	8003dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800370e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	0013      	movs	r3, r2
 8003718:	2200      	movs	r2, #0
 800371a:	2104      	movs	r1, #4
 800371c:	f000 f978 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e082      	b.n	800382e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d03a      	beq.n	80037da <HAL_I2C_Mem_Read+0x202>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d136      	bne.n	80037da <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800376c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	0013      	movs	r3, r2
 8003776:	2200      	movs	r2, #0
 8003778:	2180      	movs	r1, #128	@ 0x80
 800377a:	f000 f949 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 800377e:	1e03      	subs	r3, r0, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e053      	b.n	800382e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	2bff      	cmp	r3, #255	@ 0xff
 800378e:	d911      	bls.n	80037b4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	22ff      	movs	r2, #255	@ 0xff
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379a:	b2da      	uxtb	r2, r3
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	045c      	lsls	r4, r3, #17
 80037a0:	230a      	movs	r3, #10
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	8819      	ldrh	r1, [r3, #0]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	2300      	movs	r3, #0
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	0023      	movs	r3, r4
 80037ae:	f000 fb09 	bl	8003dc4 <I2C_TransferConfig>
 80037b2:	e012      	b.n	80037da <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	2380      	movs	r3, #128	@ 0x80
 80037c6:	049c      	lsls	r4, r3, #18
 80037c8:	230a      	movs	r3, #10
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	8819      	ldrh	r1, [r3, #0]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	0023      	movs	r3, r4
 80037d6:	f000 faf5 	bl	8003dc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d194      	bne.n	800370e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 f9ae 	bl	8003b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e01a      	b.n	800382e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2220      	movs	r2, #32
 80037fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	490c      	ldr	r1, [pc, #48]	@ (800383c <HAL_I2C_Mem_Read+0x264>)
 800380c:	400a      	ands	r2, r1
 800380e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2241      	movs	r2, #65	@ 0x41
 8003814:	2120      	movs	r1, #32
 8003816:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2242      	movs	r2, #66	@ 0x42
 800381c:	2100      	movs	r1, #0
 800381e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2240      	movs	r2, #64	@ 0x40
 8003824:	2100      	movs	r1, #0
 8003826:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b007      	add	sp, #28
 8003834:	bd90      	pop	{r4, r7, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	80002400 	.word	0x80002400
 800383c:	fe00e800 	.word	0xfe00e800

08003840 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003840:	b5b0      	push	{r4, r5, r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	000c      	movs	r4, r1
 800384a:	0010      	movs	r0, r2
 800384c:	0019      	movs	r1, r3
 800384e:	250a      	movs	r5, #10
 8003850:	197b      	adds	r3, r7, r5
 8003852:	1c22      	adds	r2, r4, #0
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	2308      	movs	r3, #8
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	1c02      	adds	r2, r0, #0
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	1dbb      	adds	r3, r7, #6
 8003860:	1c0a      	adds	r2, r1, #0
 8003862:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003864:	1dbb      	adds	r3, r7, #6
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	2380      	movs	r3, #128	@ 0x80
 800386c:	045c      	lsls	r4, r3, #17
 800386e:	197b      	adds	r3, r7, r5
 8003870:	8819      	ldrh	r1, [r3, #0]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	4b23      	ldr	r3, [pc, #140]	@ (8003904 <I2C_RequestMemoryWrite+0xc4>)
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	0023      	movs	r3, r4
 800387a:	f000 faa3 	bl	8003dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003880:	6a39      	ldr	r1, [r7, #32]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	0018      	movs	r0, r3
 8003886:	f000 f91b 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 800388a:	1e03      	subs	r3, r0, #0
 800388c:	d001      	beq.n	8003892 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e033      	b.n	80038fa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003892:	1dbb      	adds	r3, r7, #6
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d107      	bne.n	80038aa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800389a:	2308      	movs	r3, #8
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038a8:	e019      	b.n	80038de <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038aa:	2308      	movs	r3, #8
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038be:	6a39      	ldr	r1, [r7, #32]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 f8fc 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d001      	beq.n	80038d0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e014      	b.n	80038fa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038d0:	2308      	movs	r3, #8
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038de:	6a3a      	ldr	r2, [r7, #32]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	0013      	movs	r3, r2
 80038e8:	2200      	movs	r2, #0
 80038ea:	2180      	movs	r1, #128	@ 0x80
 80038ec:	f000 f890 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d001      	beq.n	80038f8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bdb0      	pop	{r4, r5, r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	80002000 	.word	0x80002000

08003908 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003908:	b5b0      	push	{r4, r5, r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	000c      	movs	r4, r1
 8003912:	0010      	movs	r0, r2
 8003914:	0019      	movs	r1, r3
 8003916:	250a      	movs	r5, #10
 8003918:	197b      	adds	r3, r7, r5
 800391a:	1c22      	adds	r2, r4, #0
 800391c:	801a      	strh	r2, [r3, #0]
 800391e:	2308      	movs	r3, #8
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	1c02      	adds	r2, r0, #0
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	1dbb      	adds	r3, r7, #6
 8003928:	1c0a      	adds	r2, r1, #0
 800392a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	197b      	adds	r3, r7, r5
 8003934:	8819      	ldrh	r1, [r3, #0]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	4b23      	ldr	r3, [pc, #140]	@ (80039c8 <I2C_RequestMemoryRead+0xc0>)
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	2300      	movs	r3, #0
 800393e:	f000 fa41 	bl	8003dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003944:	6a39      	ldr	r1, [r7, #32]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	0018      	movs	r0, r3
 800394a:	f000 f8b9 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 800394e:	1e03      	subs	r3, r0, #0
 8003950:	d001      	beq.n	8003956 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e033      	b.n	80039be <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003956:	1dbb      	adds	r3, r7, #6
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800395e:	2308      	movs	r3, #8
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	629a      	str	r2, [r3, #40]	@ 0x28
 800396c:	e019      	b.n	80039a2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800396e:	2308      	movs	r3, #8
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	b29b      	uxth	r3, r3
 8003978:	b2da      	uxtb	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003982:	6a39      	ldr	r1, [r7, #32]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f89a 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d001      	beq.n	8003994 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e014      	b.n	80039be <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003994:	2308      	movs	r3, #8
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039a2:	6a3a      	ldr	r2, [r7, #32]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	0013      	movs	r3, r2
 80039ac:	2200      	movs	r2, #0
 80039ae:	2140      	movs	r1, #64	@ 0x40
 80039b0:	f000 f82e 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d001      	beq.n	80039bc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b004      	add	sp, #16
 80039c4:	bdb0      	pop	{r4, r5, r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	80002000 	.word	0x80002000

080039cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2202      	movs	r2, #2
 80039dc:	4013      	ands	r3, r2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d103      	bne.n	80039ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2201      	movs	r2, #1
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d007      	beq.n	8003a08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2101      	movs	r1, #1
 8003a04:	430a      	orrs	r2, r1
 8003a06:	619a      	str	r2, [r3, #24]
  }
}
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	1dfb      	adds	r3, r7, #7
 8003a1e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a20:	e03a      	b.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	6839      	ldr	r1, [r7, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f000 f8d3 	bl	8003bd4 <I2C_IsErrorOccurred>
 8003a2e:	1e03      	subs	r3, r0, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e040      	b.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	d02d      	beq.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7fe fd48 	bl	80024d0 <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d122      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	425a      	negs	r2, r3
 8003a62:	4153      	adcs	r3, r2
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	001a      	movs	r2, r3
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d113      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	2220      	movs	r2, #32
 8003a76:	431a      	orrs	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2241      	movs	r2, #65	@ 0x41
 8003a80:	2120      	movs	r1, #32
 8003a82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2242      	movs	r2, #66	@ 0x42
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2240      	movs	r2, #64	@ 0x40
 8003a90:	2100      	movs	r1, #0
 8003a92:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e00f      	b.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	425a      	negs	r2, r3
 8003aa8:	4153      	adcs	r3, r2
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	001a      	movs	r2, r3
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d0b5      	beq.n	8003a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b004      	add	sp, #16
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003acc:	e032      	b.n	8003b34 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 f87d 	bl	8003bd4 <I2C_IsErrorOccurred>
 8003ada:	1e03      	subs	r3, r0, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e030      	b.n	8003b44 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	d025      	beq.n	8003b34 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7fe fcf2 	bl	80024d0 <HAL_GetTick>
 8003aec:	0002      	movs	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11a      	bne.n	8003b34 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d013      	beq.n	8003b34 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b10:	2220      	movs	r2, #32
 8003b12:	431a      	orrs	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2241      	movs	r2, #65	@ 0x41
 8003b1c:	2120      	movs	r1, #32
 8003b1e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2242      	movs	r2, #66	@ 0x42
 8003b24:	2100      	movs	r1, #0
 8003b26:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2240      	movs	r2, #64	@ 0x40
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e007      	b.n	8003b44 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d1c5      	bne.n	8003ace <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b004      	add	sp, #16
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b58:	e02f      	b.n	8003bba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f837 	bl	8003bd4 <I2C_IsErrorOccurred>
 8003b66:	1e03      	subs	r3, r0, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e02d      	b.n	8003bca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fe fcaf 	bl	80024d0 <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11a      	bne.n	8003bba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d013      	beq.n	8003bba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b96:	2220      	movs	r2, #32
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2241      	movs	r2, #65	@ 0x41
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2242      	movs	r2, #66	@ 0x42
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2240      	movs	r2, #64	@ 0x40
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e007      	b.n	8003bca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d1c8      	bne.n	8003b5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	@ 0x28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be0:	2327      	movs	r3, #39	@ 0x27
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d100      	bne.n	8003c02 <I2C_IsErrorOccurred+0x2e>
 8003c00:	e079      	b.n	8003cf6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2210      	movs	r2, #16
 8003c08:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c0a:	e057      	b.n	8003cbc <I2C_IsErrorOccurred+0xe8>
 8003c0c:	2227      	movs	r2, #39	@ 0x27
 8003c0e:	18bb      	adds	r3, r7, r2
 8003c10:	18ba      	adds	r2, r7, r2
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	d04f      	beq.n	8003cbc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c1c:	f7fe fc58 	bl	80024d0 <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d302      	bcc.n	8003c32 <I2C_IsErrorOccurred+0x5e>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d144      	bne.n	8003cbc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	2380      	movs	r3, #128	@ 0x80
 8003c3a:	01db      	lsls	r3, r3, #7
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c40:	2013      	movs	r0, #19
 8003c42:	183b      	adds	r3, r7, r0
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	2142      	movs	r1, #66	@ 0x42
 8003c48:	5c52      	ldrb	r2, [r2, r1]
 8003c4a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	2380      	movs	r3, #128	@ 0x80
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	401a      	ands	r2, r3
 8003c58:	2380      	movs	r3, #128	@ 0x80
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d126      	bne.n	8003cae <I2C_IsErrorOccurred+0xda>
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	01db      	lsls	r3, r3, #7
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d021      	beq.n	8003cae <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003c6a:	183b      	adds	r3, r7, r0
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d01d      	beq.n	8003cae <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2180      	movs	r1, #128	@ 0x80
 8003c7e:	01c9      	lsls	r1, r1, #7
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c84:	f7fe fc24 	bl	80024d0 <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c8c:	e00f      	b.n	8003cae <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c8e:	f7fe fc1f 	bl	80024d0 <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b19      	cmp	r3, #25
 8003c9a:	d908      	bls.n	8003cae <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ca4:	2327      	movs	r3, #39	@ 0x27
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]

              break;
 8003cac:	e006      	b.n	8003cbc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d1e8      	bne.n	8003c8e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d004      	beq.n	8003cd4 <I2C_IsErrorOccurred+0x100>
 8003cca:	2327      	movs	r3, #39	@ 0x27
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d09b      	beq.n	8003c0c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cd4:	2327      	movs	r3, #39	@ 0x27
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	2204      	movs	r2, #4
 8003cea:	4313      	orrs	r3, r2
 8003cec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cee:	2327      	movs	r3, #39	@ 0x27
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	2380      	movs	r3, #128	@ 0x80
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4013      	ands	r3, r2
 8003d06:	d00c      	beq.n	8003d22 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2280      	movs	r2, #128	@ 0x80
 8003d16:	0052      	lsls	r2, r2, #1
 8003d18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d1a:	2327      	movs	r3, #39	@ 0x27
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	2380      	movs	r3, #128	@ 0x80
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d00c      	beq.n	8003d46 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	4313      	orrs	r3, r2
 8003d32:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2280      	movs	r2, #128	@ 0x80
 8003d3a:	00d2      	lsls	r2, r2, #3
 8003d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d3e:	2327      	movs	r3, #39	@ 0x27
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	2380      	movs	r3, #128	@ 0x80
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d00c      	beq.n	8003d6a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2202      	movs	r2, #2
 8003d54:	4313      	orrs	r3, r2
 8003d56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2280      	movs	r2, #128	@ 0x80
 8003d5e:	0092      	lsls	r2, r2, #2
 8003d60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d62:	2327      	movs	r3, #39	@ 0x27
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003d6a:	2327      	movs	r3, #39	@ 0x27
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01d      	beq.n	8003db0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7ff fe28 	bl	80039cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	490e      	ldr	r1, [pc, #56]	@ (8003dc0 <I2C_IsErrorOccurred+0x1ec>)
 8003d88:	400a      	ands	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2241      	movs	r2, #65	@ 0x41
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2242      	movs	r2, #66	@ 0x42
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2240      	movs	r2, #64	@ 0x40
 8003dac:	2100      	movs	r1, #0
 8003dae:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003db0:	2327      	movs	r3, #39	@ 0x27
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	781b      	ldrb	r3, [r3, #0]
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b00a      	add	sp, #40	@ 0x28
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	fe00e800 	.word	0xfe00e800

08003dc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	0008      	movs	r0, r1
 8003dce:	0011      	movs	r1, r2
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	240a      	movs	r4, #10
 8003dd4:	193b      	adds	r3, r7, r4
 8003dd6:	1c02      	adds	r2, r0, #0
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	2009      	movs	r0, #9
 8003ddc:	183b      	adds	r3, r7, r0
 8003dde:	1c0a      	adds	r2, r1, #0
 8003de0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003de2:	193b      	adds	r3, r7, r4
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	059b      	lsls	r3, r3, #22
 8003de8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dea:	183b      	adds	r3, r7, r0
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	0419      	lsls	r1, r3, #16
 8003df0:	23ff      	movs	r3, #255	@ 0xff
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003df6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e0e:	0d51      	lsrs	r1, r2, #21
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	00d2      	lsls	r2, r2, #3
 8003e14:	400a      	ands	r2, r1
 8003e16:	4907      	ldr	r1, [pc, #28]	@ (8003e34 <I2C_TransferConfig+0x70>)
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	43d2      	mvns	r2, r2
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	0011      	movs	r1, r2
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b007      	add	sp, #28
 8003e30:	bd90      	pop	{r4, r7, pc}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	03ff63ff 	.word	0x03ff63ff

08003e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2241      	movs	r2, #65	@ 0x41
 8003e46:	5c9b      	ldrb	r3, [r3, r2]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d138      	bne.n	8003ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2240      	movs	r2, #64	@ 0x40
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e032      	b.n	8003ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2240      	movs	r2, #64	@ 0x40
 8003e60:	2101      	movs	r1, #1
 8003e62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2241      	movs	r2, #65	@ 0x41
 8003e68:	2124      	movs	r1, #36	@ 0x24
 8003e6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2101      	movs	r1, #1
 8003e78:	438a      	bics	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4911      	ldr	r1, [pc, #68]	@ (8003ecc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2241      	movs	r2, #65	@ 0x41
 8003eb0:	2120      	movs	r1, #32
 8003eb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	2100      	movs	r1, #0
 8003eba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	ffffefff 	.word	0xffffefff

08003ed0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2241      	movs	r2, #65	@ 0x41
 8003ede:	5c9b      	ldrb	r3, [r3, r2]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d139      	bne.n	8003f5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2240      	movs	r2, #64	@ 0x40
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e033      	b.n	8003f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2240      	movs	r2, #64	@ 0x40
 8003ef8:	2101      	movs	r1, #1
 8003efa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2241      	movs	r2, #65	@ 0x41
 8003f00:	2124      	movs	r1, #36	@ 0x24
 8003f02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	438a      	bics	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a11      	ldr	r2, [pc, #68]	@ (8003f64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	430a      	orrs	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2241      	movs	r2, #65	@ 0x41
 8003f4a:	2120      	movs	r1, #32
 8003f4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2240      	movs	r2, #64	@ 0x40
 8003f52:	2100      	movs	r1, #0
 8003f54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
  }
}
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b004      	add	sp, #16
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	fffff0ff 	.word	0xfffff0ff

08003f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003f70:	4b19      	ldr	r3, [pc, #100]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a19      	ldr	r2, [pc, #100]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	0019      	movs	r1, r3
 8003f7a:	4b17      	ldr	r3, [pc, #92]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	2380      	movs	r3, #128	@ 0x80
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d11f      	bne.n	8003fcc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003f8c:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	0013      	movs	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4912      	ldr	r1, [pc, #72]	@ (8003fe4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7fc f8ba 	bl	8000114 <__udivsi3>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fa6:	e008      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e001      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e009      	b.n	8003fce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fba:	4b07      	ldr	r3, [pc, #28]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	2380      	movs	r3, #128	@ 0x80
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d0ed      	beq.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b004      	add	sp, #16
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	40007000 	.word	0x40007000
 8003fdc:	fffff9ff 	.word	0xfffff9ff
 8003fe0:	20000008 	.word	0x20000008
 8003fe4:	000f4240 	.word	0x000f4240

08003fe8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003fec:	4b03      	ldr	r3, [pc, #12]	@ (8003ffc <LL_RCC_GetAPB1Prescaler+0x14>)
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	23e0      	movs	r3, #224	@ 0xe0
 8003ff2:	01db      	lsls	r3, r3, #7
 8003ff4:	4013      	ands	r3, r2
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000

08004000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e2fe      	b.n	8004610 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2201      	movs	r2, #1
 8004018:	4013      	ands	r3, r2
 800401a:	d100      	bne.n	800401e <HAL_RCC_OscConfig+0x1e>
 800401c:	e07c      	b.n	8004118 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401e:	4bc3      	ldr	r3, [pc, #780]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2238      	movs	r2, #56	@ 0x38
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004028:	4bc0      	ldr	r3, [pc, #768]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2203      	movs	r2, #3
 800402e:	4013      	ands	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b10      	cmp	r3, #16
 8004036:	d102      	bne.n	800403e <HAL_RCC_OscConfig+0x3e>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d002      	beq.n	8004044 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d10b      	bne.n	800405c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	4bb9      	ldr	r3, [pc, #740]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	@ 0x80
 800404a:	029b      	lsls	r3, r3, #10
 800404c:	4013      	ands	r3, r2
 800404e:	d062      	beq.n	8004116 <HAL_RCC_OscConfig+0x116>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d15e      	bne.n	8004116 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e2d9      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	025b      	lsls	r3, r3, #9
 8004064:	429a      	cmp	r2, r3
 8004066:	d107      	bne.n	8004078 <HAL_RCC_OscConfig+0x78>
 8004068:	4bb0      	ldr	r3, [pc, #704]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4baf      	ldr	r3, [pc, #700]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800406e:	2180      	movs	r1, #128	@ 0x80
 8004070:	0249      	lsls	r1, r1, #9
 8004072:	430a      	orrs	r2, r1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e020      	b.n	80040ba <HAL_RCC_OscConfig+0xba>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	23a0      	movs	r3, #160	@ 0xa0
 800407e:	02db      	lsls	r3, r3, #11
 8004080:	429a      	cmp	r2, r3
 8004082:	d10e      	bne.n	80040a2 <HAL_RCC_OscConfig+0xa2>
 8004084:	4ba9      	ldr	r3, [pc, #676]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4ba8      	ldr	r3, [pc, #672]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800408a:	2180      	movs	r1, #128	@ 0x80
 800408c:	02c9      	lsls	r1, r1, #11
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	4ba6      	ldr	r3, [pc, #664]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4ba5      	ldr	r3, [pc, #660]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004098:	2180      	movs	r1, #128	@ 0x80
 800409a:	0249      	lsls	r1, r1, #9
 800409c:	430a      	orrs	r2, r1
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	e00b      	b.n	80040ba <HAL_RCC_OscConfig+0xba>
 80040a2:	4ba2      	ldr	r3, [pc, #648]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4ba1      	ldr	r3, [pc, #644]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80040a8:	49a1      	ldr	r1, [pc, #644]	@ (8004330 <HAL_RCC_OscConfig+0x330>)
 80040aa:	400a      	ands	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	4b9f      	ldr	r3, [pc, #636]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b9e      	ldr	r3, [pc, #632]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80040b4:	499f      	ldr	r1, [pc, #636]	@ (8004334 <HAL_RCC_OscConfig+0x334>)
 80040b6:	400a      	ands	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d014      	beq.n	80040ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe fa05 	bl	80024d0 <HAL_GetTick>
 80040c6:	0003      	movs	r3, r0
 80040c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fe fa00 	bl	80024d0 <HAL_GetTick>
 80040d0:	0002      	movs	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	@ 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e298      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040de:	4b93      	ldr	r3, [pc, #588]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	2380      	movs	r3, #128	@ 0x80
 80040e4:	029b      	lsls	r3, r3, #10
 80040e6:	4013      	ands	r3, r2
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0xcc>
 80040ea:	e015      	b.n	8004118 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fe f9f0 	bl	80024d0 <HAL_GetTick>
 80040f0:	0003      	movs	r3, r0
 80040f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f6:	f7fe f9eb 	bl	80024d0 <HAL_GetTick>
 80040fa:	0002      	movs	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b64      	cmp	r3, #100	@ 0x64
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e283      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004108:	4b88      	ldr	r3, [pc, #544]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2380      	movs	r3, #128	@ 0x80
 800410e:	029b      	lsls	r3, r3, #10
 8004110:	4013      	ands	r3, r2
 8004112:	d1f0      	bne.n	80040f6 <HAL_RCC_OscConfig+0xf6>
 8004114:	e000      	b.n	8004118 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004116:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2202      	movs	r2, #2
 800411e:	4013      	ands	r3, r2
 8004120:	d100      	bne.n	8004124 <HAL_RCC_OscConfig+0x124>
 8004122:	e099      	b.n	8004258 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004124:	4b81      	ldr	r3, [pc, #516]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2238      	movs	r2, #56	@ 0x38
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800412e:	4b7f      	ldr	r3, [pc, #508]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2203      	movs	r2, #3
 8004134:	4013      	ands	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b10      	cmp	r3, #16
 800413c:	d102      	bne.n	8004144 <HAL_RCC_OscConfig+0x144>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d002      	beq.n	800414a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d135      	bne.n	80041b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414a:	4b78      	ldr	r3, [pc, #480]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	2380      	movs	r3, #128	@ 0x80
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4013      	ands	r3, r2
 8004154:	d005      	beq.n	8004162 <HAL_RCC_OscConfig+0x162>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e256      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004162:	4b72      	ldr	r3, [pc, #456]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4a74      	ldr	r2, [pc, #464]	@ (8004338 <HAL_RCC_OscConfig+0x338>)
 8004168:	4013      	ands	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	021a      	lsls	r2, r3, #8
 8004172:	4b6e      	ldr	r3, [pc, #440]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d112      	bne.n	80041a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800417e:	4b6b      	ldr	r3, [pc, #428]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6e      	ldr	r2, [pc, #440]	@ (800433c <HAL_RCC_OscConfig+0x33c>)
 8004184:	4013      	ands	r3, r2
 8004186:	0019      	movs	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	4b67      	ldr	r3, [pc, #412]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800418e:	430a      	orrs	r2, r1
 8004190:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004192:	4b66      	ldr	r3, [pc, #408]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0adb      	lsrs	r3, r3, #11
 8004198:	2207      	movs	r2, #7
 800419a:	4013      	ands	r3, r2
 800419c:	4a68      	ldr	r2, [pc, #416]	@ (8004340 <HAL_RCC_OscConfig+0x340>)
 800419e:	40da      	lsrs	r2, r3
 80041a0:	4b68      	ldr	r3, [pc, #416]	@ (8004344 <HAL_RCC_OscConfig+0x344>)
 80041a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041a4:	4b68      	ldr	r3, [pc, #416]	@ (8004348 <HAL_RCC_OscConfig+0x348>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0018      	movs	r0, r3
 80041aa:	f7fe f935 	bl	8002418 <HAL_InitTick>
 80041ae:	1e03      	subs	r3, r0, #0
 80041b0:	d051      	beq.n	8004256 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e22c      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d030      	beq.n	8004220 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041be:	4b5b      	ldr	r3, [pc, #364]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a5e      	ldr	r2, [pc, #376]	@ (800433c <HAL_RCC_OscConfig+0x33c>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	0019      	movs	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	4b57      	ldr	r3, [pc, #348]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80041d2:	4b56      	ldr	r3, [pc, #344]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b55      	ldr	r3, [pc, #340]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80041d8:	2180      	movs	r1, #128	@ 0x80
 80041da:	0049      	lsls	r1, r1, #1
 80041dc:	430a      	orrs	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fe f976 	bl	80024d0 <HAL_GetTick>
 80041e4:	0003      	movs	r3, r0
 80041e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ea:	f7fe f971 	bl	80024d0 <HAL_GetTick>
 80041ee:	0002      	movs	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e209      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fc:	4b4b      	ldr	r3, [pc, #300]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	2380      	movs	r3, #128	@ 0x80
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4013      	ands	r3, r2
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004208:	4b48      	ldr	r3, [pc, #288]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a4a      	ldr	r2, [pc, #296]	@ (8004338 <HAL_RCC_OscConfig+0x338>)
 800420e:	4013      	ands	r3, r2
 8004210:	0019      	movs	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	021a      	lsls	r2, r3, #8
 8004218:	4b44      	ldr	r3, [pc, #272]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	e01b      	b.n	8004258 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004220:	4b42      	ldr	r3, [pc, #264]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b41      	ldr	r3, [pc, #260]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004226:	4949      	ldr	r1, [pc, #292]	@ (800434c <HAL_RCC_OscConfig+0x34c>)
 8004228:	400a      	ands	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe f950 	bl	80024d0 <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004236:	f7fe f94b 	bl	80024d0 <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e1e3      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004248:	4b38      	ldr	r3, [pc, #224]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2380      	movs	r3, #128	@ 0x80
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4013      	ands	r3, r2
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x236>
 8004254:	e000      	b.n	8004258 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004256:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2208      	movs	r2, #8
 800425e:	4013      	ands	r3, r2
 8004260:	d047      	beq.n	80042f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004262:	4b32      	ldr	r3, [pc, #200]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2238      	movs	r2, #56	@ 0x38
 8004268:	4013      	ands	r3, r2
 800426a:	2b18      	cmp	r3, #24
 800426c:	d10a      	bne.n	8004284 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800426e:	4b2f      	ldr	r3, [pc, #188]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004272:	2202      	movs	r2, #2
 8004274:	4013      	ands	r3, r2
 8004276:	d03c      	beq.n	80042f2 <HAL_RCC_OscConfig+0x2f2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d138      	bne.n	80042f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e1c5      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d019      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800428c:	4b27      	ldr	r3, [pc, #156]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 800428e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004290:	4b26      	ldr	r3, [pc, #152]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004292:	2101      	movs	r1, #1
 8004294:	430a      	orrs	r2, r1
 8004296:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fe f91a 	bl	80024d0 <HAL_GetTick>
 800429c:	0003      	movs	r3, r0
 800429e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a2:	f7fe f915 	bl	80024d0 <HAL_GetTick>
 80042a6:	0002      	movs	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e1ad      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b4:	4b1d      	ldr	r3, [pc, #116]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80042b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b8:	2202      	movs	r2, #2
 80042ba:	4013      	ands	r3, r2
 80042bc:	d0f1      	beq.n	80042a2 <HAL_RCC_OscConfig+0x2a2>
 80042be:	e018      	b.n	80042f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80042c0:	4b1a      	ldr	r3, [pc, #104]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80042c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80042c4:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80042c6:	2101      	movs	r1, #1
 80042c8:	438a      	bics	r2, r1
 80042ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fe f900 	bl	80024d0 <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d6:	f7fe f8fb 	bl	80024d0 <HAL_GetTick>
 80042da:	0002      	movs	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e193      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 80042ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ec:	2202      	movs	r2, #2
 80042ee:	4013      	ands	r3, r2
 80042f0:	d1f1      	bne.n	80042d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2204      	movs	r2, #4
 80042f8:	4013      	ands	r3, r2
 80042fa:	d100      	bne.n	80042fe <HAL_RCC_OscConfig+0x2fe>
 80042fc:	e0c6      	b.n	800448c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fe:	231f      	movs	r3, #31
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004306:	4b09      	ldr	r3, [pc, #36]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2238      	movs	r2, #56	@ 0x38
 800430c:	4013      	ands	r3, r2
 800430e:	2b20      	cmp	r3, #32
 8004310:	d11e      	bne.n	8004350 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_RCC_OscConfig+0x32c>)
 8004314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004316:	2202      	movs	r2, #2
 8004318:	4013      	ands	r3, r2
 800431a:	d100      	bne.n	800431e <HAL_RCC_OscConfig+0x31e>
 800431c:	e0b6      	b.n	800448c <HAL_RCC_OscConfig+0x48c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d000      	beq.n	8004328 <HAL_RCC_OscConfig+0x328>
 8004326:	e0b1      	b.n	800448c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e171      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
 800432c:	40021000 	.word	0x40021000
 8004330:	fffeffff 	.word	0xfffeffff
 8004334:	fffbffff 	.word	0xfffbffff
 8004338:	ffff80ff 	.word	0xffff80ff
 800433c:	ffffc7ff 	.word	0xffffc7ff
 8004340:	00f42400 	.word	0x00f42400
 8004344:	20000008 	.word	0x20000008
 8004348:	20000000 	.word	0x20000000
 800434c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004350:	4bb1      	ldr	r3, [pc, #708]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004354:	2380      	movs	r3, #128	@ 0x80
 8004356:	055b      	lsls	r3, r3, #21
 8004358:	4013      	ands	r3, r2
 800435a:	d101      	bne.n	8004360 <HAL_RCC_OscConfig+0x360>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x362>
 8004360:	2300      	movs	r3, #0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d011      	beq.n	800438a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004366:	4bac      	ldr	r3, [pc, #688]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800436a:	4bab      	ldr	r3, [pc, #684]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 800436c:	2180      	movs	r1, #128	@ 0x80
 800436e:	0549      	lsls	r1, r1, #21
 8004370:	430a      	orrs	r2, r1
 8004372:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004374:	4ba8      	ldr	r3, [pc, #672]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	055b      	lsls	r3, r3, #21
 800437c:	4013      	ands	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004382:	231f      	movs	r3, #31
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438a:	4ba4      	ldr	r3, [pc, #656]	@ (800461c <HAL_RCC_OscConfig+0x61c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	2380      	movs	r3, #128	@ 0x80
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4013      	ands	r3, r2
 8004394:	d11a      	bne.n	80043cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004396:	4ba1      	ldr	r3, [pc, #644]	@ (800461c <HAL_RCC_OscConfig+0x61c>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4ba0      	ldr	r3, [pc, #640]	@ (800461c <HAL_RCC_OscConfig+0x61c>)
 800439c:	2180      	movs	r1, #128	@ 0x80
 800439e:	0049      	lsls	r1, r1, #1
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80043a4:	f7fe f894 	bl	80024d0 <HAL_GetTick>
 80043a8:	0003      	movs	r3, r0
 80043aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ae:	f7fe f88f 	bl	80024d0 <HAL_GetTick>
 80043b2:	0002      	movs	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e127      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c0:	4b96      	ldr	r3, [pc, #600]	@ (800461c <HAL_RCC_OscConfig+0x61c>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	2380      	movs	r3, #128	@ 0x80
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4013      	ands	r3, r2
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d106      	bne.n	80043e2 <HAL_RCC_OscConfig+0x3e2>
 80043d4:	4b90      	ldr	r3, [pc, #576]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80043d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80043da:	2101      	movs	r1, #1
 80043dc:	430a      	orrs	r2, r1
 80043de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043e0:	e01c      	b.n	800441c <HAL_RCC_OscConfig+0x41c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d10c      	bne.n	8004404 <HAL_RCC_OscConfig+0x404>
 80043ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80043ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80043f0:	2104      	movs	r1, #4
 80043f2:	430a      	orrs	r2, r1
 80043f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043f6:	4b88      	ldr	r3, [pc, #544]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80043f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043fa:	4b87      	ldr	r3, [pc, #540]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80043fc:	2101      	movs	r1, #1
 80043fe:	430a      	orrs	r2, r1
 8004400:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004402:	e00b      	b.n	800441c <HAL_RCC_OscConfig+0x41c>
 8004404:	4b84      	ldr	r3, [pc, #528]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004406:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004408:	4b83      	ldr	r3, [pc, #524]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 800440a:	2101      	movs	r1, #1
 800440c:	438a      	bics	r2, r1
 800440e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004410:	4b81      	ldr	r3, [pc, #516]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004412:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004414:	4b80      	ldr	r3, [pc, #512]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004416:	2104      	movs	r1, #4
 8004418:	438a      	bics	r2, r1
 800441a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d014      	beq.n	800444e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fe f854 	bl	80024d0 <HAL_GetTick>
 8004428:	0003      	movs	r3, r0
 800442a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442c:	e009      	b.n	8004442 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f7fe f84f 	bl	80024d0 <HAL_GetTick>
 8004432:	0002      	movs	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	4a79      	ldr	r2, [pc, #484]	@ (8004620 <HAL_RCC_OscConfig+0x620>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e0e6      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004442:	4b75      	ldr	r3, [pc, #468]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	2202      	movs	r2, #2
 8004448:	4013      	ands	r3, r2
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x42e>
 800444c:	e013      	b.n	8004476 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fe f83f 	bl	80024d0 <HAL_GetTick>
 8004452:	0003      	movs	r3, r0
 8004454:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004456:	e009      	b.n	800446c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fe f83a 	bl	80024d0 <HAL_GetTick>
 800445c:	0002      	movs	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	4a6f      	ldr	r2, [pc, #444]	@ (8004620 <HAL_RCC_OscConfig+0x620>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0d1      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800446c:	4b6a      	ldr	r3, [pc, #424]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 800446e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004470:	2202      	movs	r2, #2
 8004472:	4013      	ands	r3, r2
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004476:	231f      	movs	r3, #31
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004480:	4b65      	ldr	r3, [pc, #404]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004482:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004484:	4b64      	ldr	r3, [pc, #400]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004486:	4967      	ldr	r1, [pc, #412]	@ (8004624 <HAL_RCC_OscConfig+0x624>)
 8004488:	400a      	ands	r2, r1
 800448a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d100      	bne.n	8004496 <HAL_RCC_OscConfig+0x496>
 8004494:	e0bb      	b.n	800460e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004496:	4b60      	ldr	r3, [pc, #384]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2238      	movs	r2, #56	@ 0x38
 800449c:	4013      	ands	r3, r2
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d100      	bne.n	80044a4 <HAL_RCC_OscConfig+0x4a4>
 80044a2:	e07b      	b.n	800459c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d156      	bne.n	800455a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b59      	ldr	r3, [pc, #356]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80044b2:	495d      	ldr	r1, [pc, #372]	@ (8004628 <HAL_RCC_OscConfig+0x628>)
 80044b4:	400a      	ands	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fe f80a 	bl	80024d0 <HAL_GetTick>
 80044bc:	0003      	movs	r3, r0
 80044be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fe f805 	bl	80024d0 <HAL_GetTick>
 80044c6:	0002      	movs	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e09d      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d4:	4b50      	ldr	r3, [pc, #320]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	049b      	lsls	r3, r3, #18
 80044dc:	4013      	ands	r3, r2
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a51      	ldr	r2, [pc, #324]	@ (800462c <HAL_RCC_OscConfig+0x62c>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	0019      	movs	r1, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1a      	ldr	r2, [r3, #32]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450c:	431a      	orrs	r2, r3
 800450e:	4b42      	ldr	r3, [pc, #264]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004510:	430a      	orrs	r2, r1
 8004512:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004514:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b3f      	ldr	r3, [pc, #252]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 800451a:	2180      	movs	r1, #128	@ 0x80
 800451c:	0449      	lsls	r1, r1, #17
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004522:	4b3d      	ldr	r3, [pc, #244]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	4b3c      	ldr	r3, [pc, #240]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004528:	2180      	movs	r1, #128	@ 0x80
 800452a:	0549      	lsls	r1, r1, #21
 800452c:	430a      	orrs	r2, r1
 800452e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd ffce 	bl	80024d0 <HAL_GetTick>
 8004534:	0003      	movs	r3, r0
 8004536:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453a:	f7fd ffc9 	bl	80024d0 <HAL_GetTick>
 800453e:	0002      	movs	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e061      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454c:	4b32      	ldr	r3, [pc, #200]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	2380      	movs	r3, #128	@ 0x80
 8004552:	049b      	lsls	r3, r3, #18
 8004554:	4013      	ands	r3, r2
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x53a>
 8004558:	e059      	b.n	800460e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b2f      	ldr	r3, [pc, #188]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b2e      	ldr	r3, [pc, #184]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004560:	4931      	ldr	r1, [pc, #196]	@ (8004628 <HAL_RCC_OscConfig+0x628>)
 8004562:	400a      	ands	r2, r1
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fd ffb3 	bl	80024d0 <HAL_GetTick>
 800456a:	0003      	movs	r3, r0
 800456c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fd ffae 	bl	80024d0 <HAL_GetTick>
 8004574:	0002      	movs	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e046      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004582:	4b25      	ldr	r3, [pc, #148]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	049b      	lsls	r3, r3, #18
 800458a:	4013      	ands	r3, r2
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800458e:	4b22      	ldr	r3, [pc, #136]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	4b21      	ldr	r3, [pc, #132]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 8004594:	4926      	ldr	r1, [pc, #152]	@ (8004630 <HAL_RCC_OscConfig+0x630>)
 8004596:	400a      	ands	r2, r1
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	e038      	b.n	800460e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e033      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80045a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004618 <HAL_RCC_OscConfig+0x618>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2203      	movs	r2, #3
 80045b2:	401a      	ands	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d126      	bne.n	800460a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2270      	movs	r2, #112	@ 0x70
 80045c0:	401a      	ands	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d11f      	bne.n	800460a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	23fe      	movs	r3, #254	@ 0xfe
 80045ce:	01db      	lsls	r3, r3, #7
 80045d0:	401a      	ands	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d116      	bne.n	800460a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	23f8      	movs	r3, #248	@ 0xf8
 80045e0:	039b      	lsls	r3, r3, #14
 80045e2:	401a      	ands	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d10e      	bne.n	800460a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	23e0      	movs	r3, #224	@ 0xe0
 80045f0:	051b      	lsls	r3, r3, #20
 80045f2:	401a      	ands	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	0f5b      	lsrs	r3, r3, #29
 8004600:	075a      	lsls	r2, r3, #29
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d001      	beq.n	800460e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	b008      	add	sp, #32
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	40007000 	.word	0x40007000
 8004620:	00001388 	.word	0x00001388
 8004624:	efffffff 	.word	0xefffffff
 8004628:	feffffff 	.word	0xfeffffff
 800462c:	11c1808c 	.word	0x11c1808c
 8004630:	eefefffc 	.word	0xeefefffc

08004634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0e9      	b.n	800481c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004648:	4b76      	ldr	r3, [pc, #472]	@ (8004824 <HAL_RCC_ClockConfig+0x1f0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2207      	movs	r2, #7
 800464e:	4013      	ands	r3, r2
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d91e      	bls.n	8004694 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b73      	ldr	r3, [pc, #460]	@ (8004824 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2207      	movs	r2, #7
 800465c:	4393      	bics	r3, r2
 800465e:	0019      	movs	r1, r3
 8004660:	4b70      	ldr	r3, [pc, #448]	@ (8004824 <HAL_RCC_ClockConfig+0x1f0>)
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004668:	f7fd ff32 	bl	80024d0 <HAL_GetTick>
 800466c:	0003      	movs	r3, r0
 800466e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004670:	e009      	b.n	8004686 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004672:	f7fd ff2d 	bl	80024d0 <HAL_GetTick>
 8004676:	0002      	movs	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	4a6a      	ldr	r2, [pc, #424]	@ (8004828 <HAL_RCC_ClockConfig+0x1f4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e0ca      	b.n	800481c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004686:	4b67      	ldr	r3, [pc, #412]	@ (8004824 <HAL_RCC_ClockConfig+0x1f0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2207      	movs	r2, #7
 800468c:	4013      	ands	r3, r2
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d1ee      	bne.n	8004672 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2202      	movs	r2, #2
 800469a:	4013      	ands	r3, r2
 800469c:	d015      	beq.n	80046ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2204      	movs	r2, #4
 80046a4:	4013      	ands	r3, r2
 80046a6:	d006      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046a8:	4b60      	ldr	r3, [pc, #384]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	4b5f      	ldr	r3, [pc, #380]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 80046ae:	21e0      	movs	r1, #224	@ 0xe0
 80046b0:	01c9      	lsls	r1, r1, #7
 80046b2:	430a      	orrs	r2, r1
 80046b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b6:	4b5d      	ldr	r3, [pc, #372]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004830 <HAL_RCC_ClockConfig+0x1fc>)
 80046bc:	4013      	ands	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	4b59      	ldr	r3, [pc, #356]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	4013      	ands	r3, r2
 80046d2:	d057      	beq.n	8004784 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046dc:	4b53      	ldr	r3, [pc, #332]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	2380      	movs	r3, #128	@ 0x80
 80046e2:	029b      	lsls	r3, r3, #10
 80046e4:	4013      	ands	r3, r2
 80046e6:	d12b      	bne.n	8004740 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e097      	b.n	800481c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d107      	bne.n	8004704 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f4:	4b4d      	ldr	r3, [pc, #308]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2380      	movs	r3, #128	@ 0x80
 80046fa:	049b      	lsls	r3, r3, #18
 80046fc:	4013      	ands	r3, r2
 80046fe:	d11f      	bne.n	8004740 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e08b      	b.n	800481c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d107      	bne.n	800471c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800470c:	4b47      	ldr	r3, [pc, #284]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2380      	movs	r3, #128	@ 0x80
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4013      	ands	r3, r2
 8004716:	d113      	bne.n	8004740 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e07f      	b.n	800481c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d106      	bne.n	8004732 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004724:	4b41      	ldr	r3, [pc, #260]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 8004726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004728:	2202      	movs	r2, #2
 800472a:	4013      	ands	r3, r2
 800472c:	d108      	bne.n	8004740 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e074      	b.n	800481c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004732:	4b3e      	ldr	r3, [pc, #248]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	2202      	movs	r2, #2
 8004738:	4013      	ands	r3, r2
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e06d      	b.n	800481c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004740:	4b3a      	ldr	r3, [pc, #232]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2207      	movs	r2, #7
 8004746:	4393      	bics	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4b37      	ldr	r3, [pc, #220]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 8004750:	430a      	orrs	r2, r1
 8004752:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004754:	f7fd febc 	bl	80024d0 <HAL_GetTick>
 8004758:	0003      	movs	r3, r0
 800475a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475c:	e009      	b.n	8004772 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475e:	f7fd feb7 	bl	80024d0 <HAL_GetTick>
 8004762:	0002      	movs	r2, r0
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	4a2f      	ldr	r2, [pc, #188]	@ (8004828 <HAL_RCC_ClockConfig+0x1f4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e054      	b.n	800481c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	4b2e      	ldr	r3, [pc, #184]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2238      	movs	r2, #56	@ 0x38
 8004778:	401a      	ands	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	429a      	cmp	r2, r3
 8004782:	d1ec      	bne.n	800475e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004784:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <HAL_RCC_ClockConfig+0x1f0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2207      	movs	r2, #7
 800478a:	4013      	ands	r3, r2
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d21e      	bcs.n	80047d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <HAL_RCC_ClockConfig+0x1f0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2207      	movs	r2, #7
 8004798:	4393      	bics	r3, r2
 800479a:	0019      	movs	r1, r3
 800479c:	4b21      	ldr	r3, [pc, #132]	@ (8004824 <HAL_RCC_ClockConfig+0x1f0>)
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047a4:	f7fd fe94 	bl	80024d0 <HAL_GetTick>
 80047a8:	0003      	movs	r3, r0
 80047aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047ac:	e009      	b.n	80047c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ae:	f7fd fe8f 	bl	80024d0 <HAL_GetTick>
 80047b2:	0002      	movs	r2, r0
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <HAL_RCC_ClockConfig+0x1f4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e02c      	b.n	800481c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047c2:	4b18      	ldr	r3, [pc, #96]	@ (8004824 <HAL_RCC_ClockConfig+0x1f0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2207      	movs	r2, #7
 80047c8:	4013      	ands	r3, r2
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1ee      	bne.n	80047ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2204      	movs	r2, #4
 80047d6:	4013      	ands	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047da:	4b14      	ldr	r3, [pc, #80]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4a15      	ldr	r2, [pc, #84]	@ (8004834 <HAL_RCC_ClockConfig+0x200>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	4b10      	ldr	r3, [pc, #64]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 80047ea:	430a      	orrs	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047ee:	f000 f829 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 80047f2:	0001      	movs	r1, r0
 80047f4:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <HAL_RCC_ClockConfig+0x1f8>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	220f      	movs	r2, #15
 80047fc:	401a      	ands	r2, r3
 80047fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004838 <HAL_RCC_ClockConfig+0x204>)
 8004800:	0092      	lsls	r2, r2, #2
 8004802:	58d3      	ldr	r3, [r2, r3]
 8004804:	221f      	movs	r2, #31
 8004806:	4013      	ands	r3, r2
 8004808:	000a      	movs	r2, r1
 800480a:	40da      	lsrs	r2, r3
 800480c:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <HAL_RCC_ClockConfig+0x208>)
 800480e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004810:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <HAL_RCC_ClockConfig+0x20c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	0018      	movs	r0, r3
 8004816:	f7fd fdff 	bl	8002418 <HAL_InitTick>
 800481a:	0003      	movs	r3, r0
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b004      	add	sp, #16
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40022000 	.word	0x40022000
 8004828:	00001388 	.word	0x00001388
 800482c:	40021000 	.word	0x40021000
 8004830:	fffff0ff 	.word	0xfffff0ff
 8004834:	ffff8fff 	.word	0xffff8fff
 8004838:	08008b90 	.word	0x08008b90
 800483c:	20000008 	.word	0x20000008
 8004840:	20000000 	.word	0x20000000

08004844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800484a:	4b3c      	ldr	r3, [pc, #240]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2238      	movs	r2, #56	@ 0x38
 8004850:	4013      	ands	r3, r2
 8004852:	d10f      	bne.n	8004874 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004854:	4b39      	ldr	r3, [pc, #228]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	0adb      	lsrs	r3, r3, #11
 800485a:	2207      	movs	r2, #7
 800485c:	4013      	ands	r3, r2
 800485e:	2201      	movs	r2, #1
 8004860:	409a      	lsls	r2, r3
 8004862:	0013      	movs	r3, r2
 8004864:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	4835      	ldr	r0, [pc, #212]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xfc>)
 800486a:	f7fb fc53 	bl	8000114 <__udivsi3>
 800486e:	0003      	movs	r3, r0
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	e05d      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004874:	4b31      	ldr	r3, [pc, #196]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2238      	movs	r2, #56	@ 0x38
 800487a:	4013      	ands	r3, r2
 800487c:	2b08      	cmp	r3, #8
 800487e:	d102      	bne.n	8004886 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004880:	4b30      	ldr	r3, [pc, #192]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x100>)
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	e054      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004886:	4b2d      	ldr	r3, [pc, #180]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2238      	movs	r2, #56	@ 0x38
 800488c:	4013      	ands	r3, r2
 800488e:	2b10      	cmp	r3, #16
 8004890:	d138      	bne.n	8004904 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004892:	4b2a      	ldr	r3, [pc, #168]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2203      	movs	r2, #3
 8004898:	4013      	ands	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800489c:	4b27      	ldr	r3, [pc, #156]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	2207      	movs	r2, #7
 80048a4:	4013      	ands	r3, r2
 80048a6:	3301      	adds	r3, #1
 80048a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d10d      	bne.n	80048cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	4824      	ldr	r0, [pc, #144]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x100>)
 80048b4:	f7fb fc2e 	bl	8000114 <__udivsi3>
 80048b8:	0003      	movs	r3, r0
 80048ba:	0019      	movs	r1, r3
 80048bc:	4b1f      	ldr	r3, [pc, #124]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	227f      	movs	r2, #127	@ 0x7f
 80048c4:	4013      	ands	r3, r2
 80048c6:	434b      	muls	r3, r1
 80048c8:	617b      	str	r3, [r7, #20]
        break;
 80048ca:	e00d      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	481c      	ldr	r0, [pc, #112]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xfc>)
 80048d0:	f7fb fc20 	bl	8000114 <__udivsi3>
 80048d4:	0003      	movs	r3, r0
 80048d6:	0019      	movs	r1, r3
 80048d8:	4b18      	ldr	r3, [pc, #96]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	0a1b      	lsrs	r3, r3, #8
 80048de:	227f      	movs	r2, #127	@ 0x7f
 80048e0:	4013      	ands	r3, r2
 80048e2:	434b      	muls	r3, r1
 80048e4:	617b      	str	r3, [r7, #20]
        break;
 80048e6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80048e8:	4b14      	ldr	r3, [pc, #80]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	0f5b      	lsrs	r3, r3, #29
 80048ee:	2207      	movs	r2, #7
 80048f0:	4013      	ands	r3, r2
 80048f2:	3301      	adds	r3, #1
 80048f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	6978      	ldr	r0, [r7, #20]
 80048fa:	f7fb fc0b 	bl	8000114 <__udivsi3>
 80048fe:	0003      	movs	r3, r0
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	e015      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004904:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2238      	movs	r2, #56	@ 0x38
 800490a:	4013      	ands	r3, r2
 800490c:	2b20      	cmp	r3, #32
 800490e:	d103      	bne.n	8004918 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004910:	2380      	movs	r3, #128	@ 0x80
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	e00b      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004918:	4b08      	ldr	r3, [pc, #32]	@ (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2238      	movs	r2, #56	@ 0x38
 800491e:	4013      	ands	r3, r2
 8004920:	2b18      	cmp	r3, #24
 8004922:	d103      	bne.n	800492c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004924:	23fa      	movs	r3, #250	@ 0xfa
 8004926:	01db      	lsls	r3, r3, #7
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e001      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004930:	693b      	ldr	r3, [r7, #16]
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b006      	add	sp, #24
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	40021000 	.word	0x40021000
 8004940:	00f42400 	.word	0x00f42400
 8004944:	007a1200 	.word	0x007a1200

08004948 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800494c:	4b02      	ldr	r3, [pc, #8]	@ (8004958 <HAL_RCC_GetHCLKFreq+0x10>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	20000008 	.word	0x20000008

0800495c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800495c:	b5b0      	push	{r4, r5, r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004960:	f7ff fff2 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004964:	0004      	movs	r4, r0
 8004966:	f7ff fb3f 	bl	8003fe8 <LL_RCC_GetAPB1Prescaler>
 800496a:	0003      	movs	r3, r0
 800496c:	0b1a      	lsrs	r2, r3, #12
 800496e:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004970:	0092      	lsls	r2, r2, #2
 8004972:	58d3      	ldr	r3, [r2, r3]
 8004974:	221f      	movs	r2, #31
 8004976:	4013      	ands	r3, r2
 8004978:	40dc      	lsrs	r4, r3
 800497a:	0023      	movs	r3, r4
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	bdb0      	pop	{r4, r5, r7, pc}
 8004982:	46c0      	nop			@ (mov r8, r8)
 8004984:	08008bd0 	.word	0x08008bd0

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004990:	2313      	movs	r3, #19
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004998:	2312      	movs	r3, #18
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	2200      	movs	r2, #0
 800499e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	029b      	lsls	r3, r3, #10
 80049a8:	4013      	ands	r3, r2
 80049aa:	d100      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80049ac:	e0a3      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ae:	2011      	movs	r0, #17
 80049b0:	183b      	adds	r3, r7, r0
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b6:	4bc3      	ldr	r3, [pc, #780]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	055b      	lsls	r3, r3, #21
 80049be:	4013      	ands	r3, r2
 80049c0:	d110      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c2:	4bc0      	ldr	r3, [pc, #768]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049c6:	4bbf      	ldr	r3, [pc, #764]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049c8:	2180      	movs	r1, #128	@ 0x80
 80049ca:	0549      	lsls	r1, r1, #21
 80049cc:	430a      	orrs	r2, r1
 80049ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049d0:	4bbc      	ldr	r3, [pc, #752]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049d4:	2380      	movs	r3, #128	@ 0x80
 80049d6:	055b      	lsls	r3, r3, #21
 80049d8:	4013      	ands	r3, r2
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049de:	183b      	adds	r3, r7, r0
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049e4:	4bb8      	ldr	r3, [pc, #736]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4bb7      	ldr	r3, [pc, #732]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049ea:	2180      	movs	r1, #128	@ 0x80
 80049ec:	0049      	lsls	r1, r1, #1
 80049ee:	430a      	orrs	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049f2:	f7fd fd6d 	bl	80024d0 <HAL_GetTick>
 80049f6:	0003      	movs	r3, r0
 80049f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049fa:	e00b      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fc:	f7fd fd68 	bl	80024d0 <HAL_GetTick>
 8004a00:	0002      	movs	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d904      	bls.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004a0a:	2313      	movs	r3, #19
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	2203      	movs	r2, #3
 8004a10:	701a      	strb	r2, [r3, #0]
        break;
 8004a12:	e005      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a14:	4bac      	ldr	r3, [pc, #688]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	2380      	movs	r3, #128	@ 0x80
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d0ed      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004a20:	2313      	movs	r3, #19
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d154      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a2a:	4ba6      	ldr	r3, [pc, #664]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a2e:	23c0      	movs	r3, #192	@ 0xc0
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4013      	ands	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d019      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d014      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a46:	4b9f      	ldr	r3, [pc, #636]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	4aa0      	ldr	r2, [pc, #640]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a50:	4b9c      	ldr	r3, [pc, #624]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a54:	4b9b      	ldr	r3, [pc, #620]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a56:	2180      	movs	r1, #128	@ 0x80
 8004a58:	0249      	lsls	r1, r1, #9
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a5e:	4b99      	ldr	r3, [pc, #612]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a62:	4b98      	ldr	r3, [pc, #608]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a64:	499a      	ldr	r1, [pc, #616]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004a66:	400a      	ands	r2, r1
 8004a68:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a6a:	4b96      	ldr	r3, [pc, #600]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2201      	movs	r2, #1
 8004a74:	4013      	ands	r3, r2
 8004a76:	d016      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fd fd2a 	bl	80024d0 <HAL_GetTick>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a80:	e00c      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fd fd25 	bl	80024d0 <HAL_GetTick>
 8004a86:	0002      	movs	r2, r0
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	4a91      	ldr	r2, [pc, #580]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d904      	bls.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004a92:	2313      	movs	r3, #19
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	2203      	movs	r2, #3
 8004a98:	701a      	strb	r2, [r3, #0]
            break;
 8004a9a:	e004      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9c:	4b89      	ldr	r3, [pc, #548]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d0ed      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004aa6:	2313      	movs	r3, #19
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab0:	4b84      	ldr	r3, [pc, #528]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab4:	4a85      	ldr	r2, [pc, #532]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004abe:	4b81      	ldr	r3, [pc, #516]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ac4:	e00c      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ac6:	2312      	movs	r3, #18
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	2213      	movs	r2, #19
 8004acc:	18ba      	adds	r2, r7, r2
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	2312      	movs	r3, #18
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	2213      	movs	r2, #19
 8004ada:	18ba      	adds	r2, r7, r2
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ae0:	2311      	movs	r3, #17
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d105      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aea:	4b76      	ldr	r3, [pc, #472]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aee:	4b75      	ldr	r3, [pc, #468]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004af0:	4979      	ldr	r1, [pc, #484]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004af2:	400a      	ands	r2, r1
 8004af4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2201      	movs	r2, #1
 8004afc:	4013      	ands	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b00:	4b70      	ldr	r3, [pc, #448]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b04:	2203      	movs	r2, #3
 8004b06:	4393      	bics	r3, r2
 8004b08:	0019      	movs	r1, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b10:	430a      	orrs	r2, r1
 8004b12:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b1e:	4b69      	ldr	r3, [pc, #420]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b22:	220c      	movs	r2, #12
 8004b24:	4393      	bics	r3, r2
 8004b26:	0019      	movs	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	4b65      	ldr	r3, [pc, #404]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2210      	movs	r2, #16
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b3c:	4b61      	ldr	r3, [pc, #388]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	4a66      	ldr	r2, [pc, #408]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	0019      	movs	r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	4b5e      	ldr	r3, [pc, #376]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d009      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b5c:	4b59      	ldr	r3, [pc, #356]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b60:	4a5f      	ldr	r2, [pc, #380]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	4b56      	ldr	r3, [pc, #344]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	2380      	movs	r3, #128	@ 0x80
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d009      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b7c:	4b51      	ldr	r3, [pc, #324]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b80:	4a58      	ldr	r2, [pc, #352]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2220      	movs	r2, #32
 8004b96:	4013      	ands	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9e:	4a52      	ldr	r2, [pc, #328]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	4b46      	ldr	r3, [pc, #280]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004baa:	430a      	orrs	r2, r1
 8004bac:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	2380      	movs	r3, #128	@ 0x80
 8004bb4:	01db      	lsls	r3, r3, #7
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d015      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bba:	4b42      	ldr	r3, [pc, #264]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	0899      	lsrs	r1, r3, #2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1a      	ldr	r2, [r3, #32]
 8004bd0:	2380      	movs	r3, #128	@ 0x80
 8004bd2:	05db      	lsls	r3, r3, #23
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d106      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	4b39      	ldr	r3, [pc, #228]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bde:	2180      	movs	r1, #128	@ 0x80
 8004be0:	0249      	lsls	r1, r1, #9
 8004be2:	430a      	orrs	r2, r1
 8004be4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	031b      	lsls	r3, r3, #12
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bf2:	4b34      	ldr	r3, [pc, #208]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf6:	2240      	movs	r2, #64	@ 0x40
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c00:	4b30      	ldr	r3, [pc, #192]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c02:	430a      	orrs	r2, r1
 8004c04:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2380      	movs	r3, #128	@ 0x80
 8004c0c:	039b      	lsls	r3, r3, #14
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d016      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c12:	4b2c      	ldr	r3, [pc, #176]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c16:	4a35      	ldr	r2, [pc, #212]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c20:	4b28      	ldr	r3, [pc, #160]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c22:	430a      	orrs	r2, r1
 8004c24:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c2a:	2380      	movs	r3, #128	@ 0x80
 8004c2c:	03db      	lsls	r3, r3, #15
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d106      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c32:	4b24      	ldr	r3, [pc, #144]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	4b23      	ldr	r3, [pc, #140]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c38:	2180      	movs	r1, #128	@ 0x80
 8004c3a:	0449      	lsls	r1, r1, #17
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	03db      	lsls	r3, r3, #15
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d016      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c50:	4a27      	ldr	r2, [pc, #156]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	0019      	movs	r1, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c64:	2380      	movs	r3, #128	@ 0x80
 8004c66:	045b      	lsls	r3, r3, #17
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c6c:	4b15      	ldr	r3, [pc, #84]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c72:	2180      	movs	r1, #128	@ 0x80
 8004c74:	0449      	lsls	r1, r1, #17
 8004c76:	430a      	orrs	r2, r1
 8004c78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	2380      	movs	r3, #128	@ 0x80
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	4013      	ands	r3, r2
 8004c84:	d016      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004c86:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	0019      	movs	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c96:	430a      	orrs	r2, r1
 8004c98:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	2380      	movs	r3, #128	@ 0x80
 8004ca0:	01db      	lsls	r3, r3, #7
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ca6:	4b07      	ldr	r3, [pc, #28]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cac:	2180      	movs	r1, #128	@ 0x80
 8004cae:	0249      	lsls	r1, r1, #9
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004cb4:	2312      	movs	r3, #18
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	781b      	ldrb	r3, [r3, #0]
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b006      	add	sp, #24
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	fffffcff 	.word	0xfffffcff
 8004cd0:	fffeffff 	.word	0xfffeffff
 8004cd4:	00001388 	.word	0x00001388
 8004cd8:	efffffff 	.word	0xefffffff
 8004cdc:	fffff3ff 	.word	0xfffff3ff
 8004ce0:	fff3ffff 	.word	0xfff3ffff
 8004ce4:	ffcfffff 	.word	0xffcfffff
 8004ce8:	ffffcfff 	.word	0xffffcfff
 8004cec:	ffbfffff 	.word	0xffbfffff
 8004cf0:	feffffff 	.word	0xfeffffff
 8004cf4:	ffff3fff 	.word	0xffff3fff

08004cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e046      	b.n	8004d98 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2288      	movs	r2, #136	@ 0x88
 8004d0e:	589b      	ldr	r3, [r3, r2]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2284      	movs	r2, #132	@ 0x84
 8004d18:	2100      	movs	r1, #0
 8004d1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f002 fdbc 	bl	800789c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2288      	movs	r2, #136	@ 0x88
 8004d28:	2124      	movs	r1, #36	@ 0x24
 8004d2a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2101      	movs	r1, #1
 8004d38:	438a      	bics	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f000 ff10 	bl	8005b6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f000 fc4e 	bl	80055f0 <UART_SetConfig>
 8004d54:	0003      	movs	r3, r0
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e01c      	b.n	8004d98 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	490d      	ldr	r1, [pc, #52]	@ (8004da0 <HAL_UART_Init+0xa8>)
 8004d6a:	400a      	ands	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	212a      	movs	r1, #42	@ 0x2a
 8004d7a:	438a      	bics	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2101      	movs	r1, #1
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f000 ff9f 	bl	8005cd4 <UART_CheckIdleState>
 8004d96:	0003      	movs	r3, r0
}
 8004d98:	0018      	movs	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	ffffb7ff 	.word	0xffffb7ff

08004da4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e032      	b.n	8004e1c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2288      	movs	r2, #136	@ 0x88
 8004dba:	2124      	movs	r1, #36	@ 0x24
 8004dbc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2101      	movs	r1, #1
 8004dca:	438a      	bics	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f002 fe35 	bl	8007a58 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2290      	movs	r2, #144	@ 0x90
 8004df2:	2100      	movs	r1, #0
 8004df4:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2288      	movs	r2, #136	@ 0x88
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	228c      	movs	r2, #140	@ 0x8c
 8004e02:	2100      	movs	r1, #0
 8004e04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2284      	movs	r2, #132	@ 0x84
 8004e16:	2100      	movs	r1, #0
 8004e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b002      	add	sp, #8
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	@ 0x28
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	1dbb      	adds	r3, r7, #6
 8004e32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2288      	movs	r2, #136	@ 0x88
 8004e38:	589b      	ldr	r3, [r3, r2]
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d000      	beq.n	8004e40 <HAL_UART_Transmit+0x1c>
 8004e3e:	e090      	b.n	8004f62 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_UART_Transmit+0x2a>
 8004e46:	1dbb      	adds	r3, r7, #6
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e088      	b.n	8004f64 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	2380      	movs	r3, #128	@ 0x80
 8004e58:	015b      	lsls	r3, r3, #5
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d109      	bne.n	8004e72 <HAL_UART_Transmit+0x4e>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d105      	bne.n	8004e72 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d001      	beq.n	8004e72 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e078      	b.n	8004f64 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2290      	movs	r2, #144	@ 0x90
 8004e76:	2100      	movs	r1, #0
 8004e78:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2288      	movs	r2, #136	@ 0x88
 8004e7e:	2121      	movs	r1, #33	@ 0x21
 8004e80:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e82:	f7fd fb25 	bl	80024d0 <HAL_GetTick>
 8004e86:	0003      	movs	r3, r0
 8004e88:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1dba      	adds	r2, r7, #6
 8004e8e:	2154      	movs	r1, #84	@ 0x54
 8004e90:	8812      	ldrh	r2, [r2, #0]
 8004e92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1dba      	adds	r2, r7, #6
 8004e98:	2156      	movs	r1, #86	@ 0x56
 8004e9a:	8812      	ldrh	r2, [r2, #0]
 8004e9c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	2380      	movs	r3, #128	@ 0x80
 8004ea4:	015b      	lsls	r3, r3, #5
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d108      	bne.n	8004ebc <HAL_UART_Transmit+0x98>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	e003      	b.n	8004ec4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ec4:	e030      	b.n	8004f28 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	0013      	movs	r3, r2
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2180      	movs	r1, #128	@ 0x80
 8004ed4:	f000 ffa8 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8004ed8:	1e03      	subs	r3, r0, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2288      	movs	r2, #136	@ 0x88
 8004ee0:	2120      	movs	r1, #32
 8004ee2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e03d      	b.n	8004f64 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	001a      	movs	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	05d2      	lsls	r2, r2, #23
 8004efa:	0dd2      	lsrs	r2, r2, #23
 8004efc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	3302      	adds	r3, #2
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e007      	b.n	8004f16 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	3301      	adds	r3, #1
 8004f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2256      	movs	r2, #86	@ 0x56
 8004f1a:	5a9b      	ldrh	r3, [r3, r2]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b299      	uxth	r1, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2256      	movs	r2, #86	@ 0x56
 8004f26:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2256      	movs	r2, #86	@ 0x56
 8004f2c:	5a9b      	ldrh	r3, [r3, r2]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1c8      	bne.n	8004ec6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	0013      	movs	r3, r2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2140      	movs	r1, #64	@ 0x40
 8004f42:	f000 ff71 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8004f46:	1e03      	subs	r3, r0, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2288      	movs	r2, #136	@ 0x88
 8004f4e:	2120      	movs	r1, #32
 8004f50:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e006      	b.n	8004f64 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2288      	movs	r2, #136	@ 0x88
 8004f5a:	2120      	movs	r1, #32
 8004f5c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e000      	b.n	8004f64 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b008      	add	sp, #32
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f6c:	b5b0      	push	{r4, r5, r7, lr}
 8004f6e:	b0aa      	sub	sp, #168	@ 0xa8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	22a4      	movs	r2, #164	@ 0xa4
 8004f7c:	18b9      	adds	r1, r7, r2
 8004f7e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	20a0      	movs	r0, #160	@ 0xa0
 8004f88:	1839      	adds	r1, r7, r0
 8004f8a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	249c      	movs	r4, #156	@ 0x9c
 8004f94:	1939      	adds	r1, r7, r4
 8004f96:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f98:	0011      	movs	r1, r2
 8004f9a:	18bb      	adds	r3, r7, r2
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4aa2      	ldr	r2, [pc, #648]	@ (8005228 <HAL_UART_IRQHandler+0x2bc>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2298      	movs	r2, #152	@ 0x98
 8004fa4:	18bd      	adds	r5, r7, r2
 8004fa6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004fa8:	18bb      	adds	r3, r7, r2
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d11a      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004fb0:	187b      	adds	r3, r7, r1
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d015      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004fba:	183b      	adds	r3, r7, r0
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d105      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004fc4:	193b      	adds	r3, r7, r4
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	055b      	lsls	r3, r3, #21
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d00a      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d100      	bne.n	8004fda <HAL_UART_IRQHandler+0x6e>
 8004fd8:	e2dc      	b.n	8005594 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	0010      	movs	r0, r2
 8004fe2:	4798      	blx	r3
      }
      return;
 8004fe4:	e2d6      	b.n	8005594 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fe6:	2398      	movs	r3, #152	@ 0x98
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d100      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x86>
 8004ff0:	e122      	b.n	8005238 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ff2:	239c      	movs	r3, #156	@ 0x9c
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a8c      	ldr	r2, [pc, #560]	@ (800522c <HAL_UART_IRQHandler+0x2c0>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d106      	bne.n	800500c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ffe:	23a0      	movs	r3, #160	@ 0xa0
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a8a      	ldr	r2, [pc, #552]	@ (8005230 <HAL_UART_IRQHandler+0x2c4>)
 8005006:	4013      	ands	r3, r2
 8005008:	d100      	bne.n	800500c <HAL_UART_IRQHandler+0xa0>
 800500a:	e115      	b.n	8005238 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800500c:	23a4      	movs	r3, #164	@ 0xa4
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2201      	movs	r2, #1
 8005014:	4013      	ands	r3, r2
 8005016:	d012      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
 8005018:	23a0      	movs	r3, #160	@ 0xa0
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	2380      	movs	r3, #128	@ 0x80
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4013      	ands	r3, r2
 8005024:	d00b      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2201      	movs	r2, #1
 800502c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2290      	movs	r2, #144	@ 0x90
 8005032:	589b      	ldr	r3, [r3, r2]
 8005034:	2201      	movs	r2, #1
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2190      	movs	r1, #144	@ 0x90
 800503c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800503e:	23a4      	movs	r3, #164	@ 0xa4
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2202      	movs	r2, #2
 8005046:	4013      	ands	r3, r2
 8005048:	d011      	beq.n	800506e <HAL_UART_IRQHandler+0x102>
 800504a:	239c      	movs	r3, #156	@ 0x9c
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2201      	movs	r2, #1
 8005052:	4013      	ands	r3, r2
 8005054:	d00b      	beq.n	800506e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2202      	movs	r2, #2
 800505c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2290      	movs	r2, #144	@ 0x90
 8005062:	589b      	ldr	r3, [r3, r2]
 8005064:	2204      	movs	r2, #4
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2190      	movs	r1, #144	@ 0x90
 800506c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800506e:	23a4      	movs	r3, #164	@ 0xa4
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2204      	movs	r2, #4
 8005076:	4013      	ands	r3, r2
 8005078:	d011      	beq.n	800509e <HAL_UART_IRQHandler+0x132>
 800507a:	239c      	movs	r3, #156	@ 0x9c
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2201      	movs	r2, #1
 8005082:	4013      	ands	r3, r2
 8005084:	d00b      	beq.n	800509e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2204      	movs	r2, #4
 800508c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2290      	movs	r2, #144	@ 0x90
 8005092:	589b      	ldr	r3, [r3, r2]
 8005094:	2202      	movs	r2, #2
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2190      	movs	r1, #144	@ 0x90
 800509c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800509e:	23a4      	movs	r3, #164	@ 0xa4
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2208      	movs	r2, #8
 80050a6:	4013      	ands	r3, r2
 80050a8:	d017      	beq.n	80050da <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050aa:	23a0      	movs	r3, #160	@ 0xa0
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2220      	movs	r2, #32
 80050b2:	4013      	ands	r3, r2
 80050b4:	d105      	bne.n	80050c2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80050b6:	239c      	movs	r3, #156	@ 0x9c
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a5b      	ldr	r2, [pc, #364]	@ (800522c <HAL_UART_IRQHandler+0x2c0>)
 80050be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050c0:	d00b      	beq.n	80050da <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2208      	movs	r2, #8
 80050c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2290      	movs	r2, #144	@ 0x90
 80050ce:	589b      	ldr	r3, [r3, r2]
 80050d0:	2208      	movs	r2, #8
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2190      	movs	r1, #144	@ 0x90
 80050d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050da:	23a4      	movs	r3, #164	@ 0xa4
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	2380      	movs	r3, #128	@ 0x80
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	4013      	ands	r3, r2
 80050e6:	d013      	beq.n	8005110 <HAL_UART_IRQHandler+0x1a4>
 80050e8:	23a0      	movs	r3, #160	@ 0xa0
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	04db      	lsls	r3, r3, #19
 80050f2:	4013      	ands	r3, r2
 80050f4:	d00c      	beq.n	8005110 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2280      	movs	r2, #128	@ 0x80
 80050fc:	0112      	lsls	r2, r2, #4
 80050fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2290      	movs	r2, #144	@ 0x90
 8005104:	589b      	ldr	r3, [r3, r2]
 8005106:	2220      	movs	r2, #32
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2190      	movs	r1, #144	@ 0x90
 800510e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2290      	movs	r2, #144	@ 0x90
 8005114:	589b      	ldr	r3, [r3, r2]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d100      	bne.n	800511c <HAL_UART_IRQHandler+0x1b0>
 800511a:	e23d      	b.n	8005598 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800511c:	23a4      	movs	r3, #164	@ 0xa4
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2220      	movs	r2, #32
 8005124:	4013      	ands	r3, r2
 8005126:	d015      	beq.n	8005154 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005128:	23a0      	movs	r3, #160	@ 0xa0
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2220      	movs	r2, #32
 8005130:	4013      	ands	r3, r2
 8005132:	d106      	bne.n	8005142 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005134:	239c      	movs	r3, #156	@ 0x9c
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	2380      	movs	r3, #128	@ 0x80
 800513c:	055b      	lsls	r3, r3, #21
 800513e:	4013      	ands	r3, r2
 8005140:	d008      	beq.n	8005154 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	0010      	movs	r0, r2
 8005152:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2290      	movs	r2, #144	@ 0x90
 8005158:	589b      	ldr	r3, [r3, r2]
 800515a:	2194      	movs	r1, #148	@ 0x94
 800515c:	187a      	adds	r2, r7, r1
 800515e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2240      	movs	r2, #64	@ 0x40
 8005168:	4013      	ands	r3, r2
 800516a:	2b40      	cmp	r3, #64	@ 0x40
 800516c:	d004      	beq.n	8005178 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800516e:	187b      	adds	r3, r7, r1
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2228      	movs	r2, #40	@ 0x28
 8005174:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005176:	d04c      	beq.n	8005212 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	0018      	movs	r0, r3
 800517c:	f000 fec4 	bl	8005f08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2240      	movs	r2, #64	@ 0x40
 8005188:	4013      	ands	r3, r2
 800518a:	2b40      	cmp	r3, #64	@ 0x40
 800518c:	d13c      	bne.n	8005208 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800518e:	f3ef 8310 	mrs	r3, PRIMASK
 8005192:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005196:	2090      	movs	r0, #144	@ 0x90
 8005198:	183a      	adds	r2, r7, r0
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	2301      	movs	r3, #1
 800519e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	46c0      	nop			@ (mov r8, r8)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2140      	movs	r1, #64	@ 0x40
 80051b4:	438a      	bics	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	183b      	adds	r3, r7, r0
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051c0:	f383 8810 	msr	PRIMASK, r3
}
 80051c4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2280      	movs	r2, #128	@ 0x80
 80051ca:	589b      	ldr	r3, [r3, r2]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d016      	beq.n	80051fe <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2280      	movs	r2, #128	@ 0x80
 80051d4:	589b      	ldr	r3, [r3, r2]
 80051d6:	4a17      	ldr	r2, [pc, #92]	@ (8005234 <HAL_UART_IRQHandler+0x2c8>)
 80051d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2280      	movs	r2, #128	@ 0x80
 80051de:	589b      	ldr	r3, [r3, r2]
 80051e0:	0018      	movs	r0, r3
 80051e2:	f7fd fc17 	bl	8002a14 <HAL_DMA_Abort_IT>
 80051e6:	1e03      	subs	r3, r0, #0
 80051e8:	d01c      	beq.n	8005224 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2280      	movs	r2, #128	@ 0x80
 80051ee:	589b      	ldr	r3, [r3, r2]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	2180      	movs	r1, #128	@ 0x80
 80051f6:	5852      	ldr	r2, [r2, r1]
 80051f8:	0010      	movs	r0, r2
 80051fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fc:	e012      	b.n	8005224 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0018      	movs	r0, r3
 8005202:	f000 f9e1 	bl	80055c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005206:	e00d      	b.n	8005224 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	0018      	movs	r0, r3
 800520c:	f000 f9dc 	bl	80055c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	e008      	b.n	8005224 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0018      	movs	r0, r3
 8005216:	f000 f9d7 	bl	80055c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2290      	movs	r2, #144	@ 0x90
 800521e:	2100      	movs	r1, #0
 8005220:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005222:	e1b9      	b.n	8005598 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	46c0      	nop			@ (mov r8, r8)
    return;
 8005226:	e1b7      	b.n	8005598 <HAL_UART_IRQHandler+0x62c>
 8005228:	0000080f 	.word	0x0000080f
 800522c:	10000001 	.word	0x10000001
 8005230:	04000120 	.word	0x04000120
 8005234:	08005fd5 	.word	0x08005fd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d000      	beq.n	8005242 <HAL_UART_IRQHandler+0x2d6>
 8005240:	e13e      	b.n	80054c0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005242:	23a4      	movs	r3, #164	@ 0xa4
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2210      	movs	r2, #16
 800524a:	4013      	ands	r3, r2
 800524c:	d100      	bne.n	8005250 <HAL_UART_IRQHandler+0x2e4>
 800524e:	e137      	b.n	80054c0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005250:	23a0      	movs	r3, #160	@ 0xa0
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2210      	movs	r2, #16
 8005258:	4013      	ands	r3, r2
 800525a:	d100      	bne.n	800525e <HAL_UART_IRQHandler+0x2f2>
 800525c:	e130      	b.n	80054c0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2210      	movs	r2, #16
 8005264:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2240      	movs	r2, #64	@ 0x40
 800526e:	4013      	ands	r3, r2
 8005270:	2b40      	cmp	r3, #64	@ 0x40
 8005272:	d000      	beq.n	8005276 <HAL_UART_IRQHandler+0x30a>
 8005274:	e0a4      	b.n	80053c0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2280      	movs	r2, #128	@ 0x80
 800527a:	589b      	ldr	r3, [r3, r2]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	217e      	movs	r1, #126	@ 0x7e
 8005282:	187b      	adds	r3, r7, r1
 8005284:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005286:	187b      	adds	r3, r7, r1
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d100      	bne.n	8005290 <HAL_UART_IRQHandler+0x324>
 800528e:	e185      	b.n	800559c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	225c      	movs	r2, #92	@ 0x5c
 8005294:	5a9b      	ldrh	r3, [r3, r2]
 8005296:	187a      	adds	r2, r7, r1
 8005298:	8812      	ldrh	r2, [r2, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d300      	bcc.n	80052a0 <HAL_UART_IRQHandler+0x334>
 800529e:	e17d      	b.n	800559c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	187a      	adds	r2, r7, r1
 80052a4:	215e      	movs	r1, #94	@ 0x5e
 80052a6:	8812      	ldrh	r2, [r2, #0]
 80052a8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2280      	movs	r2, #128	@ 0x80
 80052ae:	589b      	ldr	r3, [r3, r2]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2220      	movs	r2, #32
 80052b6:	4013      	ands	r3, r2
 80052b8:	d170      	bne.n	800539c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8310 	mrs	r3, PRIMASK
 80052be:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052c4:	2301      	movs	r3, #1
 80052c6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ca:	f383 8810 	msr	PRIMASK, r3
}
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	49b4      	ldr	r1, [pc, #720]	@ (80055ac <HAL_UART_IRQHandler+0x640>)
 80052dc:	400a      	ands	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e6:	f383 8810 	msr	PRIMASK, r3
}
 80052ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80052f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80052f6:	2301      	movs	r3, #1
 80052f8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052fc:	f383 8810 	msr	PRIMASK, r3
}
 8005300:	46c0      	nop			@ (mov r8, r8)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	438a      	bics	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005314:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531e:	f3ef 8310 	mrs	r3, PRIMASK
 8005322:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005326:	673b      	str	r3, [r7, #112]	@ 0x70
 8005328:	2301      	movs	r3, #1
 800532a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800532e:	f383 8810 	msr	PRIMASK, r3
}
 8005332:	46c0      	nop			@ (mov r8, r8)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2140      	movs	r1, #64	@ 0x40
 8005340:	438a      	bics	r2, r1
 8005342:	609a      	str	r2, [r3, #8]
 8005344:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005346:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800534a:	f383 8810 	msr	PRIMASK, r3
}
 800534e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	228c      	movs	r2, #140	@ 0x8c
 8005354:	2120      	movs	r1, #32
 8005356:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800535e:	f3ef 8310 	mrs	r3, PRIMASK
 8005362:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005366:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005368:	2301      	movs	r3, #1
 800536a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800536e:	f383 8810 	msr	PRIMASK, r3
}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2110      	movs	r1, #16
 8005380:	438a      	bics	r2, r1
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005386:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2280      	movs	r2, #128	@ 0x80
 8005394:	589b      	ldr	r3, [r3, r2]
 8005396:	0018      	movs	r0, r3
 8005398:	f7fd fada 	bl	8002950 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	225c      	movs	r2, #92	@ 0x5c
 80053a6:	5a9a      	ldrh	r2, [r3, r2]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	215e      	movs	r1, #94	@ 0x5e
 80053ac:	5a5b      	ldrh	r3, [r3, r1]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0011      	movs	r1, r2
 80053b8:	0018      	movs	r0, r3
 80053ba:	f000 f90d 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053be:	e0ed      	b.n	800559c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	225c      	movs	r2, #92	@ 0x5c
 80053c4:	5a99      	ldrh	r1, [r3, r2]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	225e      	movs	r2, #94	@ 0x5e
 80053ca:	5a9b      	ldrh	r3, [r3, r2]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	208e      	movs	r0, #142	@ 0x8e
 80053d0:	183b      	adds	r3, r7, r0
 80053d2:	1a8a      	subs	r2, r1, r2
 80053d4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	225e      	movs	r2, #94	@ 0x5e
 80053da:	5a9b      	ldrh	r3, [r3, r2]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d100      	bne.n	80053e4 <HAL_UART_IRQHandler+0x478>
 80053e2:	e0dd      	b.n	80055a0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80053e4:	183b      	adds	r3, r7, r0
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d100      	bne.n	80053ee <HAL_UART_IRQHandler+0x482>
 80053ec:	e0d8      	b.n	80055a0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ee:	f3ef 8310 	mrs	r3, PRIMASK
 80053f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80053f4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053f6:	2488      	movs	r4, #136	@ 0x88
 80053f8:	193a      	adds	r2, r7, r4
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	2301      	movs	r3, #1
 80053fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f383 8810 	msr	PRIMASK, r3
}
 8005406:	46c0      	nop			@ (mov r8, r8)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4967      	ldr	r1, [pc, #412]	@ (80055b0 <HAL_UART_IRQHandler+0x644>)
 8005414:	400a      	ands	r2, r1
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	193b      	adds	r3, r7, r4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f383 8810 	msr	PRIMASK, r3
}
 8005424:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005426:	f3ef 8310 	mrs	r3, PRIMASK
 800542a:	61bb      	str	r3, [r7, #24]
  return(result);
 800542c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800542e:	2484      	movs	r4, #132	@ 0x84
 8005430:	193a      	adds	r2, r7, r4
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	2301      	movs	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f383 8810 	msr	PRIMASK, r3
}
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	495a      	ldr	r1, [pc, #360]	@ (80055b4 <HAL_UART_IRQHandler+0x648>)
 800544c:	400a      	ands	r2, r1
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	193b      	adds	r3, r7, r4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	f383 8810 	msr	PRIMASK, r3
}
 800545c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	228c      	movs	r2, #140	@ 0x8c
 8005462:	2120      	movs	r1, #32
 8005464:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005472:	f3ef 8310 	mrs	r3, PRIMASK
 8005476:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547a:	2480      	movs	r4, #128	@ 0x80
 800547c:	193a      	adds	r2, r7, r4
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	2301      	movs	r3, #1
 8005482:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2110      	movs	r1, #16
 8005498:	438a      	bics	r2, r1
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	193b      	adds	r3, r7, r4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	f383 8810 	msr	PRIMASK, r3
}
 80054a8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054b0:	183b      	adds	r3, r7, r0
 80054b2:	881a      	ldrh	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	0011      	movs	r1, r2
 80054b8:	0018      	movs	r0, r3
 80054ba:	f000 f88d 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054be:	e06f      	b.n	80055a0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054c0:	23a4      	movs	r3, #164	@ 0xa4
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	2380      	movs	r3, #128	@ 0x80
 80054c8:	035b      	lsls	r3, r3, #13
 80054ca:	4013      	ands	r3, r2
 80054cc:	d010      	beq.n	80054f0 <HAL_UART_IRQHandler+0x584>
 80054ce:	239c      	movs	r3, #156	@ 0x9c
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	@ 0x80
 80054d6:	03db      	lsls	r3, r3, #15
 80054d8:	4013      	ands	r3, r2
 80054da:	d009      	beq.n	80054f0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2280      	movs	r2, #128	@ 0x80
 80054e2:	0352      	lsls	r2, r2, #13
 80054e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	0018      	movs	r0, r3
 80054ea:	f000 fdb6 	bl	800605a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054ee:	e05a      	b.n	80055a6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80054f0:	23a4      	movs	r3, #164	@ 0xa4
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2280      	movs	r2, #128	@ 0x80
 80054f8:	4013      	ands	r3, r2
 80054fa:	d016      	beq.n	800552a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80054fc:	23a0      	movs	r3, #160	@ 0xa0
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2280      	movs	r2, #128	@ 0x80
 8005504:	4013      	ands	r3, r2
 8005506:	d106      	bne.n	8005516 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005508:	239c      	movs	r3, #156	@ 0x9c
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	041b      	lsls	r3, r3, #16
 8005512:	4013      	ands	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800551a:	2b00      	cmp	r3, #0
 800551c:	d042      	beq.n	80055a4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	0010      	movs	r0, r2
 8005526:	4798      	blx	r3
    }
    return;
 8005528:	e03c      	b.n	80055a4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800552a:	23a4      	movs	r3, #164	@ 0xa4
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2240      	movs	r2, #64	@ 0x40
 8005532:	4013      	ands	r3, r2
 8005534:	d00a      	beq.n	800554c <HAL_UART_IRQHandler+0x5e0>
 8005536:	23a0      	movs	r3, #160	@ 0xa0
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2240      	movs	r2, #64	@ 0x40
 800553e:	4013      	ands	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	0018      	movs	r0, r3
 8005546:	f000 fd5c 	bl	8006002 <UART_EndTransmit_IT>
    return;
 800554a:	e02c      	b.n	80055a6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800554c:	23a4      	movs	r3, #164	@ 0xa4
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	2380      	movs	r3, #128	@ 0x80
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	4013      	ands	r3, r2
 8005558:	d00b      	beq.n	8005572 <HAL_UART_IRQHandler+0x606>
 800555a:	23a0      	movs	r3, #160	@ 0xa0
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	2380      	movs	r3, #128	@ 0x80
 8005562:	05db      	lsls	r3, r3, #23
 8005564:	4013      	ands	r3, r2
 8005566:	d004      	beq.n	8005572 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	0018      	movs	r0, r3
 800556c:	f000 fd85 	bl	800607a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005570:	e019      	b.n	80055a6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005572:	23a4      	movs	r3, #164	@ 0xa4
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	2380      	movs	r3, #128	@ 0x80
 800557a:	045b      	lsls	r3, r3, #17
 800557c:	4013      	ands	r3, r2
 800557e:	d012      	beq.n	80055a6 <HAL_UART_IRQHandler+0x63a>
 8005580:	23a0      	movs	r3, #160	@ 0xa0
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	da0d      	bge.n	80055a6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	0018      	movs	r0, r3
 800558e:	f000 fd6c 	bl	800606a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005592:	e008      	b.n	80055a6 <HAL_UART_IRQHandler+0x63a>
      return;
 8005594:	46c0      	nop			@ (mov r8, r8)
 8005596:	e006      	b.n	80055a6 <HAL_UART_IRQHandler+0x63a>
    return;
 8005598:	46c0      	nop			@ (mov r8, r8)
 800559a:	e004      	b.n	80055a6 <HAL_UART_IRQHandler+0x63a>
      return;
 800559c:	46c0      	nop			@ (mov r8, r8)
 800559e:	e002      	b.n	80055a6 <HAL_UART_IRQHandler+0x63a>
      return;
 80055a0:	46c0      	nop			@ (mov r8, r8)
 80055a2:	e000      	b.n	80055a6 <HAL_UART_IRQHandler+0x63a>
    return;
 80055a4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b02a      	add	sp, #168	@ 0xa8
 80055aa:	bdb0      	pop	{r4, r5, r7, pc}
 80055ac:	fffffeff 	.word	0xfffffeff
 80055b0:	fffffedf 	.word	0xfffffedf
 80055b4:	effffffe 	.word	0xeffffffe

080055b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055c0:	46c0      	nop			@ (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b002      	add	sp, #8
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055d0:	46c0      	nop			@ (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b002      	add	sp, #8
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	000a      	movs	r2, r1
 80055e2:	1cbb      	adds	r3, r7, #2
 80055e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055e6:	46c0      	nop			@ (mov r8, r8)
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b002      	add	sp, #8
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f0:	b5b0      	push	{r4, r5, r7, lr}
 80055f2:	b090      	sub	sp, #64	@ 0x40
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055f8:	231a      	movs	r3, #26
 80055fa:	2220      	movs	r2, #32
 80055fc:	189b      	adds	r3, r3, r2
 80055fe:	19db      	adds	r3, r3, r7
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	431a      	orrs	r2, r3
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	431a      	orrs	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	4313      	orrs	r3, r2
 800561a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4aaf      	ldr	r2, [pc, #700]	@ (80058e0 <UART_SetConfig+0x2f0>)
 8005624:	4013      	ands	r3, r2
 8005626:	0019      	movs	r1, r3
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800562e:	430b      	orrs	r3, r1
 8005630:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4aaa      	ldr	r2, [pc, #680]	@ (80058e4 <UART_SetConfig+0x2f4>)
 800563a:	4013      	ands	r3, r2
 800563c:	0018      	movs	r0, r3
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	68d9      	ldr	r1, [r3, #12]
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	0003      	movs	r3, r0
 8005648:	430b      	orrs	r3, r1
 800564a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4aa4      	ldr	r2, [pc, #656]	@ (80058e8 <UART_SetConfig+0x2f8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005662:	4313      	orrs	r3, r2
 8005664:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a9f      	ldr	r2, [pc, #636]	@ (80058ec <UART_SetConfig+0x2fc>)
 800566e:	4013      	ands	r3, r2
 8005670:	0019      	movs	r1, r3
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005678:	430b      	orrs	r3, r1
 800567a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	220f      	movs	r2, #15
 8005684:	4393      	bics	r3, r2
 8005686:	0018      	movs	r0, r3
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	0003      	movs	r3, r0
 8005692:	430b      	orrs	r3, r1
 8005694:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a95      	ldr	r2, [pc, #596]	@ (80058f0 <UART_SetConfig+0x300>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d131      	bne.n	8005704 <UART_SetConfig+0x114>
 80056a0:	4b94      	ldr	r3, [pc, #592]	@ (80058f4 <UART_SetConfig+0x304>)
 80056a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a4:	2203      	movs	r2, #3
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d01d      	beq.n	80056e8 <UART_SetConfig+0xf8>
 80056ac:	d823      	bhi.n	80056f6 <UART_SetConfig+0x106>
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d00c      	beq.n	80056cc <UART_SetConfig+0xdc>
 80056b2:	d820      	bhi.n	80056f6 <UART_SetConfig+0x106>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <UART_SetConfig+0xce>
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d00e      	beq.n	80056da <UART_SetConfig+0xea>
 80056bc:	e01b      	b.n	80056f6 <UART_SetConfig+0x106>
 80056be:	231b      	movs	r3, #27
 80056c0:	2220      	movs	r2, #32
 80056c2:	189b      	adds	r3, r3, r2
 80056c4:	19db      	adds	r3, r3, r7
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	e0b4      	b.n	8005836 <UART_SetConfig+0x246>
 80056cc:	231b      	movs	r3, #27
 80056ce:	2220      	movs	r2, #32
 80056d0:	189b      	adds	r3, r3, r2
 80056d2:	19db      	adds	r3, r3, r7
 80056d4:	2202      	movs	r2, #2
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	e0ad      	b.n	8005836 <UART_SetConfig+0x246>
 80056da:	231b      	movs	r3, #27
 80056dc:	2220      	movs	r2, #32
 80056de:	189b      	adds	r3, r3, r2
 80056e0:	19db      	adds	r3, r3, r7
 80056e2:	2204      	movs	r2, #4
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e0a6      	b.n	8005836 <UART_SetConfig+0x246>
 80056e8:	231b      	movs	r3, #27
 80056ea:	2220      	movs	r2, #32
 80056ec:	189b      	adds	r3, r3, r2
 80056ee:	19db      	adds	r3, r3, r7
 80056f0:	2208      	movs	r2, #8
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	e09f      	b.n	8005836 <UART_SetConfig+0x246>
 80056f6:	231b      	movs	r3, #27
 80056f8:	2220      	movs	r2, #32
 80056fa:	189b      	adds	r3, r3, r2
 80056fc:	19db      	adds	r3, r3, r7
 80056fe:	2210      	movs	r2, #16
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	e098      	b.n	8005836 <UART_SetConfig+0x246>
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a7b      	ldr	r2, [pc, #492]	@ (80058f8 <UART_SetConfig+0x308>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d131      	bne.n	8005772 <UART_SetConfig+0x182>
 800570e:	4b79      	ldr	r3, [pc, #484]	@ (80058f4 <UART_SetConfig+0x304>)
 8005710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005712:	220c      	movs	r2, #12
 8005714:	4013      	ands	r3, r2
 8005716:	2b0c      	cmp	r3, #12
 8005718:	d01d      	beq.n	8005756 <UART_SetConfig+0x166>
 800571a:	d823      	bhi.n	8005764 <UART_SetConfig+0x174>
 800571c:	2b08      	cmp	r3, #8
 800571e:	d00c      	beq.n	800573a <UART_SetConfig+0x14a>
 8005720:	d820      	bhi.n	8005764 <UART_SetConfig+0x174>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <UART_SetConfig+0x13c>
 8005726:	2b04      	cmp	r3, #4
 8005728:	d00e      	beq.n	8005748 <UART_SetConfig+0x158>
 800572a:	e01b      	b.n	8005764 <UART_SetConfig+0x174>
 800572c:	231b      	movs	r3, #27
 800572e:	2220      	movs	r2, #32
 8005730:	189b      	adds	r3, r3, r2
 8005732:	19db      	adds	r3, r3, r7
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e07d      	b.n	8005836 <UART_SetConfig+0x246>
 800573a:	231b      	movs	r3, #27
 800573c:	2220      	movs	r2, #32
 800573e:	189b      	adds	r3, r3, r2
 8005740:	19db      	adds	r3, r3, r7
 8005742:	2202      	movs	r2, #2
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e076      	b.n	8005836 <UART_SetConfig+0x246>
 8005748:	231b      	movs	r3, #27
 800574a:	2220      	movs	r2, #32
 800574c:	189b      	adds	r3, r3, r2
 800574e:	19db      	adds	r3, r3, r7
 8005750:	2204      	movs	r2, #4
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	e06f      	b.n	8005836 <UART_SetConfig+0x246>
 8005756:	231b      	movs	r3, #27
 8005758:	2220      	movs	r2, #32
 800575a:	189b      	adds	r3, r3, r2
 800575c:	19db      	adds	r3, r3, r7
 800575e:	2208      	movs	r2, #8
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e068      	b.n	8005836 <UART_SetConfig+0x246>
 8005764:	231b      	movs	r3, #27
 8005766:	2220      	movs	r2, #32
 8005768:	189b      	adds	r3, r3, r2
 800576a:	19db      	adds	r3, r3, r7
 800576c:	2210      	movs	r2, #16
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	e061      	b.n	8005836 <UART_SetConfig+0x246>
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a61      	ldr	r2, [pc, #388]	@ (80058fc <UART_SetConfig+0x30c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d106      	bne.n	800578a <UART_SetConfig+0x19a>
 800577c:	231b      	movs	r3, #27
 800577e:	2220      	movs	r2, #32
 8005780:	189b      	adds	r3, r3, r2
 8005782:	19db      	adds	r3, r3, r7
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	e055      	b.n	8005836 <UART_SetConfig+0x246>
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a5c      	ldr	r2, [pc, #368]	@ (8005900 <UART_SetConfig+0x310>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d106      	bne.n	80057a2 <UART_SetConfig+0x1b2>
 8005794:	231b      	movs	r3, #27
 8005796:	2220      	movs	r2, #32
 8005798:	189b      	adds	r3, r3, r2
 800579a:	19db      	adds	r3, r3, r7
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e049      	b.n	8005836 <UART_SetConfig+0x246>
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a50      	ldr	r2, [pc, #320]	@ (80058e8 <UART_SetConfig+0x2f8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d13e      	bne.n	800582a <UART_SetConfig+0x23a>
 80057ac:	4b51      	ldr	r3, [pc, #324]	@ (80058f4 <UART_SetConfig+0x304>)
 80057ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057b0:	23c0      	movs	r3, #192	@ 0xc0
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	4013      	ands	r3, r2
 80057b6:	22c0      	movs	r2, #192	@ 0xc0
 80057b8:	0112      	lsls	r2, r2, #4
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d027      	beq.n	800580e <UART_SetConfig+0x21e>
 80057be:	22c0      	movs	r2, #192	@ 0xc0
 80057c0:	0112      	lsls	r2, r2, #4
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d82a      	bhi.n	800581c <UART_SetConfig+0x22c>
 80057c6:	2280      	movs	r2, #128	@ 0x80
 80057c8:	0112      	lsls	r2, r2, #4
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d011      	beq.n	80057f2 <UART_SetConfig+0x202>
 80057ce:	2280      	movs	r2, #128	@ 0x80
 80057d0:	0112      	lsls	r2, r2, #4
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d822      	bhi.n	800581c <UART_SetConfig+0x22c>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <UART_SetConfig+0x1f4>
 80057da:	2280      	movs	r2, #128	@ 0x80
 80057dc:	00d2      	lsls	r2, r2, #3
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00e      	beq.n	8005800 <UART_SetConfig+0x210>
 80057e2:	e01b      	b.n	800581c <UART_SetConfig+0x22c>
 80057e4:	231b      	movs	r3, #27
 80057e6:	2220      	movs	r2, #32
 80057e8:	189b      	adds	r3, r3, r2
 80057ea:	19db      	adds	r3, r3, r7
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e021      	b.n	8005836 <UART_SetConfig+0x246>
 80057f2:	231b      	movs	r3, #27
 80057f4:	2220      	movs	r2, #32
 80057f6:	189b      	adds	r3, r3, r2
 80057f8:	19db      	adds	r3, r3, r7
 80057fa:	2202      	movs	r2, #2
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e01a      	b.n	8005836 <UART_SetConfig+0x246>
 8005800:	231b      	movs	r3, #27
 8005802:	2220      	movs	r2, #32
 8005804:	189b      	adds	r3, r3, r2
 8005806:	19db      	adds	r3, r3, r7
 8005808:	2204      	movs	r2, #4
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e013      	b.n	8005836 <UART_SetConfig+0x246>
 800580e:	231b      	movs	r3, #27
 8005810:	2220      	movs	r2, #32
 8005812:	189b      	adds	r3, r3, r2
 8005814:	19db      	adds	r3, r3, r7
 8005816:	2208      	movs	r2, #8
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	e00c      	b.n	8005836 <UART_SetConfig+0x246>
 800581c:	231b      	movs	r3, #27
 800581e:	2220      	movs	r2, #32
 8005820:	189b      	adds	r3, r3, r2
 8005822:	19db      	adds	r3, r3, r7
 8005824:	2210      	movs	r2, #16
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e005      	b.n	8005836 <UART_SetConfig+0x246>
 800582a:	231b      	movs	r3, #27
 800582c:	2220      	movs	r2, #32
 800582e:	189b      	adds	r3, r3, r2
 8005830:	19db      	adds	r3, r3, r7
 8005832:	2210      	movs	r2, #16
 8005834:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2b      	ldr	r2, [pc, #172]	@ (80058e8 <UART_SetConfig+0x2f8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d000      	beq.n	8005842 <UART_SetConfig+0x252>
 8005840:	e0a9      	b.n	8005996 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005842:	231b      	movs	r3, #27
 8005844:	2220      	movs	r2, #32
 8005846:	189b      	adds	r3, r3, r2
 8005848:	19db      	adds	r3, r3, r7
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d015      	beq.n	800587c <UART_SetConfig+0x28c>
 8005850:	dc18      	bgt.n	8005884 <UART_SetConfig+0x294>
 8005852:	2b04      	cmp	r3, #4
 8005854:	d00d      	beq.n	8005872 <UART_SetConfig+0x282>
 8005856:	dc15      	bgt.n	8005884 <UART_SetConfig+0x294>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <UART_SetConfig+0x272>
 800585c:	2b02      	cmp	r3, #2
 800585e:	d005      	beq.n	800586c <UART_SetConfig+0x27c>
 8005860:	e010      	b.n	8005884 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005862:	f7ff f87b 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 8005866:	0003      	movs	r3, r0
 8005868:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800586a:	e014      	b.n	8005896 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800586c:	4b25      	ldr	r3, [pc, #148]	@ (8005904 <UART_SetConfig+0x314>)
 800586e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005870:	e011      	b.n	8005896 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005872:	f7fe ffe7 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8005876:	0003      	movs	r3, r0
 8005878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800587a:	e00c      	b.n	8005896 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800587c:	2380      	movs	r3, #128	@ 0x80
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005882:	e008      	b.n	8005896 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005888:	231a      	movs	r3, #26
 800588a:	2220      	movs	r2, #32
 800588c:	189b      	adds	r3, r3, r2
 800588e:	19db      	adds	r3, r3, r7
 8005890:	2201      	movs	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
        break;
 8005894:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005898:	2b00      	cmp	r3, #0
 800589a:	d100      	bne.n	800589e <UART_SetConfig+0x2ae>
 800589c:	e14b      	b.n	8005b36 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058a2:	4b19      	ldr	r3, [pc, #100]	@ (8005908 <UART_SetConfig+0x318>)
 80058a4:	0052      	lsls	r2, r2, #1
 80058a6:	5ad3      	ldrh	r3, [r2, r3]
 80058a8:	0019      	movs	r1, r3
 80058aa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80058ac:	f7fa fc32 	bl	8000114 <__udivsi3>
 80058b0:	0003      	movs	r3, r0
 80058b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	0013      	movs	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	189b      	adds	r3, r3, r2
 80058be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d305      	bcc.n	80058d0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d91d      	bls.n	800590c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80058d0:	231a      	movs	r3, #26
 80058d2:	2220      	movs	r2, #32
 80058d4:	189b      	adds	r3, r3, r2
 80058d6:	19db      	adds	r3, r3, r7
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	e12b      	b.n	8005b36 <UART_SetConfig+0x546>
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	cfff69f3 	.word	0xcfff69f3
 80058e4:	ffffcfff 	.word	0xffffcfff
 80058e8:	40008000 	.word	0x40008000
 80058ec:	11fff4ff 	.word	0x11fff4ff
 80058f0:	40013800 	.word	0x40013800
 80058f4:	40021000 	.word	0x40021000
 80058f8:	40004400 	.word	0x40004400
 80058fc:	40004800 	.word	0x40004800
 8005900:	40004c00 	.word	0x40004c00
 8005904:	00f42400 	.word	0x00f42400
 8005908:	08008b68 	.word	0x08008b68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800590c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005918:	4b92      	ldr	r3, [pc, #584]	@ (8005b64 <UART_SetConfig+0x574>)
 800591a:	0052      	lsls	r2, r2, #1
 800591c:	5ad3      	ldrh	r3, [r2, r3]
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	69b8      	ldr	r0, [r7, #24]
 800592a:	69f9      	ldr	r1, [r7, #28]
 800592c:	f7fa fda6 	bl	800047c <__aeabi_uldivmod>
 8005930:	0002      	movs	r2, r0
 8005932:	000b      	movs	r3, r1
 8005934:	0e11      	lsrs	r1, r2, #24
 8005936:	021d      	lsls	r5, r3, #8
 8005938:	430d      	orrs	r5, r1
 800593a:	0214      	lsls	r4, r2, #8
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68b8      	ldr	r0, [r7, #8]
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	1900      	adds	r0, r0, r4
 800594e:	4169      	adcs	r1, r5
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f7fa fd8d 	bl	800047c <__aeabi_uldivmod>
 8005962:	0002      	movs	r2, r0
 8005964:	000b      	movs	r3, r1
 8005966:	0013      	movs	r3, r2
 8005968:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800596a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596c:	23c0      	movs	r3, #192	@ 0xc0
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	429a      	cmp	r2, r3
 8005972:	d309      	bcc.n	8005988 <UART_SetConfig+0x398>
 8005974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005976:	2380      	movs	r3, #128	@ 0x80
 8005978:	035b      	lsls	r3, r3, #13
 800597a:	429a      	cmp	r2, r3
 800597c:	d204      	bcs.n	8005988 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005984:	60da      	str	r2, [r3, #12]
 8005986:	e0d6      	b.n	8005b36 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005988:	231a      	movs	r3, #26
 800598a:	2220      	movs	r2, #32
 800598c:	189b      	adds	r3, r3, r2
 800598e:	19db      	adds	r3, r3, r7
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	e0cf      	b.n	8005b36 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	429a      	cmp	r2, r3
 80059a0:	d000      	beq.n	80059a4 <UART_SetConfig+0x3b4>
 80059a2:	e070      	b.n	8005a86 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80059a4:	231b      	movs	r3, #27
 80059a6:	2220      	movs	r2, #32
 80059a8:	189b      	adds	r3, r3, r2
 80059aa:	19db      	adds	r3, r3, r7
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d015      	beq.n	80059de <UART_SetConfig+0x3ee>
 80059b2:	dc18      	bgt.n	80059e6 <UART_SetConfig+0x3f6>
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d00d      	beq.n	80059d4 <UART_SetConfig+0x3e4>
 80059b8:	dc15      	bgt.n	80059e6 <UART_SetConfig+0x3f6>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <UART_SetConfig+0x3d4>
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d005      	beq.n	80059ce <UART_SetConfig+0x3de>
 80059c2:	e010      	b.n	80059e6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c4:	f7fe ffca 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 80059c8:	0003      	movs	r3, r0
 80059ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059cc:	e014      	b.n	80059f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ce:	4b66      	ldr	r3, [pc, #408]	@ (8005b68 <UART_SetConfig+0x578>)
 80059d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059d2:	e011      	b.n	80059f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d4:	f7fe ff36 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 80059d8:	0003      	movs	r3, r0
 80059da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059dc:	e00c      	b.n	80059f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059de:	2380      	movs	r3, #128	@ 0x80
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059e4:	e008      	b.n	80059f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80059ea:	231a      	movs	r3, #26
 80059ec:	2220      	movs	r2, #32
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	19db      	adds	r3, r3, r7
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
        break;
 80059f6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d100      	bne.n	8005a00 <UART_SetConfig+0x410>
 80059fe:	e09a      	b.n	8005b36 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a04:	4b57      	ldr	r3, [pc, #348]	@ (8005b64 <UART_SetConfig+0x574>)
 8005a06:	0052      	lsls	r2, r2, #1
 8005a08:	5ad3      	ldrh	r3, [r2, r3]
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005a0e:	f7fa fb81 	bl	8000114 <__udivsi3>
 8005a12:	0003      	movs	r3, r0
 8005a14:	005a      	lsls	r2, r3, #1
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	18d2      	adds	r2, r2, r3
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	0019      	movs	r1, r3
 8005a24:	0010      	movs	r0, r2
 8005a26:	f7fa fb75 	bl	8000114 <__udivsi3>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	2b0f      	cmp	r3, #15
 8005a32:	d921      	bls.n	8005a78 <UART_SetConfig+0x488>
 8005a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a36:	2380      	movs	r3, #128	@ 0x80
 8005a38:	025b      	lsls	r3, r3, #9
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d21c      	bcs.n	8005a78 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	200e      	movs	r0, #14
 8005a44:	2420      	movs	r4, #32
 8005a46:	1903      	adds	r3, r0, r4
 8005a48:	19db      	adds	r3, r3, r7
 8005a4a:	210f      	movs	r1, #15
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2207      	movs	r2, #7
 8005a58:	4013      	ands	r3, r2
 8005a5a:	b299      	uxth	r1, r3
 8005a5c:	1903      	adds	r3, r0, r4
 8005a5e:	19db      	adds	r3, r3, r7
 8005a60:	1902      	adds	r2, r0, r4
 8005a62:	19d2      	adds	r2, r2, r7
 8005a64:	8812      	ldrh	r2, [r2, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	1902      	adds	r2, r0, r4
 8005a70:	19d2      	adds	r2, r2, r7
 8005a72:	8812      	ldrh	r2, [r2, #0]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	e05e      	b.n	8005b36 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005a78:	231a      	movs	r3, #26
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	189b      	adds	r3, r3, r2
 8005a7e:	19db      	adds	r3, r3, r7
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e057      	b.n	8005b36 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a86:	231b      	movs	r3, #27
 8005a88:	2220      	movs	r2, #32
 8005a8a:	189b      	adds	r3, r3, r2
 8005a8c:	19db      	adds	r3, r3, r7
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d015      	beq.n	8005ac0 <UART_SetConfig+0x4d0>
 8005a94:	dc18      	bgt.n	8005ac8 <UART_SetConfig+0x4d8>
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d00d      	beq.n	8005ab6 <UART_SetConfig+0x4c6>
 8005a9a:	dc15      	bgt.n	8005ac8 <UART_SetConfig+0x4d8>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <UART_SetConfig+0x4b6>
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d005      	beq.n	8005ab0 <UART_SetConfig+0x4c0>
 8005aa4:	e010      	b.n	8005ac8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa6:	f7fe ff59 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 8005aaa:	0003      	movs	r3, r0
 8005aac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005aae:	e014      	b.n	8005ada <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8005b68 <UART_SetConfig+0x578>)
 8005ab2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ab4:	e011      	b.n	8005ada <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab6:	f7fe fec5 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8005aba:	0003      	movs	r3, r0
 8005abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005abe:	e00c      	b.n	8005ada <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac0:	2380      	movs	r3, #128	@ 0x80
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ac6:	e008      	b.n	8005ada <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005acc:	231a      	movs	r3, #26
 8005ace:	2220      	movs	r2, #32
 8005ad0:	189b      	adds	r3, r3, r2
 8005ad2:	19db      	adds	r3, r3, r7
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
        break;
 8005ad8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02a      	beq.n	8005b36 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b64 <UART_SetConfig+0x574>)
 8005ae6:	0052      	lsls	r2, r2, #1
 8005ae8:	5ad3      	ldrh	r3, [r2, r3]
 8005aea:	0019      	movs	r1, r3
 8005aec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005aee:	f7fa fb11 	bl	8000114 <__udivsi3>
 8005af2:	0003      	movs	r3, r0
 8005af4:	001a      	movs	r2, r3
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	18d2      	adds	r2, r2, r3
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	0019      	movs	r1, r3
 8005b04:	0010      	movs	r0, r2
 8005b06:	f7fa fb05 	bl	8000114 <__udivsi3>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	2b0f      	cmp	r3, #15
 8005b12:	d90a      	bls.n	8005b2a <UART_SetConfig+0x53a>
 8005b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b16:	2380      	movs	r3, #128	@ 0x80
 8005b18:	025b      	lsls	r3, r3, #9
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d205      	bcs.n	8005b2a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60da      	str	r2, [r3, #12]
 8005b28:	e005      	b.n	8005b36 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005b2a:	231a      	movs	r3, #26
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	189b      	adds	r3, r3, r2
 8005b30:	19db      	adds	r3, r3, r7
 8005b32:	2201      	movs	r2, #1
 8005b34:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	226a      	movs	r2, #106	@ 0x6a
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	2268      	movs	r2, #104	@ 0x68
 8005b42:	2101      	movs	r1, #1
 8005b44:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	2200      	movs	r2, #0
 8005b4a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	2200      	movs	r2, #0
 8005b50:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b52:	231a      	movs	r3, #26
 8005b54:	2220      	movs	r2, #32
 8005b56:	189b      	adds	r3, r3, r2
 8005b58:	19db      	adds	r3, r3, r7
 8005b5a:	781b      	ldrb	r3, [r3, #0]
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b010      	add	sp, #64	@ 0x40
 8005b62:	bdb0      	pop	{r4, r5, r7, pc}
 8005b64:	08008b68 	.word	0x08008b68
 8005b68:	00f42400 	.word	0x00f42400

08005b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b78:	2208      	movs	r2, #8
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d00b      	beq.n	8005b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4a4a      	ldr	r2, [pc, #296]	@ (8005cb0 <UART_AdvFeatureConfig+0x144>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	0019      	movs	r1, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4a43      	ldr	r2, [pc, #268]	@ (8005cb4 <UART_AdvFeatureConfig+0x148>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	0019      	movs	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d00b      	beq.n	8005bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8005cb8 <UART_AdvFeatureConfig+0x14c>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bde:	2204      	movs	r2, #4
 8005be0:	4013      	ands	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4a34      	ldr	r2, [pc, #208]	@ (8005cbc <UART_AdvFeatureConfig+0x150>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	0019      	movs	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	2210      	movs	r2, #16
 8005c02:	4013      	ands	r3, r2
 8005c04:	d00b      	beq.n	8005c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc0 <UART_AdvFeatureConfig+0x154>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	0019      	movs	r1, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c22:	2220      	movs	r2, #32
 8005c24:	4013      	ands	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	4a25      	ldr	r2, [pc, #148]	@ (8005cc4 <UART_AdvFeatureConfig+0x158>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	0019      	movs	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c44:	2240      	movs	r2, #64	@ 0x40
 8005c46:	4013      	ands	r3, r2
 8005c48:	d01d      	beq.n	8005c86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc8 <UART_AdvFeatureConfig+0x15c>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	0019      	movs	r1, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c66:	2380      	movs	r3, #128	@ 0x80
 8005c68:	035b      	lsls	r3, r3, #13
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d10b      	bne.n	8005c86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4a15      	ldr	r2, [pc, #84]	@ (8005ccc <UART_AdvFeatureConfig+0x160>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	0019      	movs	r1, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8a:	2280      	movs	r2, #128	@ 0x80
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4a0e      	ldr	r2, [pc, #56]	@ (8005cd0 <UART_AdvFeatureConfig+0x164>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }
}
 8005ca8:	46c0      	nop			@ (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b002      	add	sp, #8
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	ffff7fff 	.word	0xffff7fff
 8005cb4:	fffdffff 	.word	0xfffdffff
 8005cb8:	fffeffff 	.word	0xfffeffff
 8005cbc:	fffbffff 	.word	0xfffbffff
 8005cc0:	ffffefff 	.word	0xffffefff
 8005cc4:	ffffdfff 	.word	0xffffdfff
 8005cc8:	ffefffff 	.word	0xffefffff
 8005ccc:	ff9fffff 	.word	0xff9fffff
 8005cd0:	fff7ffff 	.word	0xfff7ffff

08005cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b092      	sub	sp, #72	@ 0x48
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2290      	movs	r2, #144	@ 0x90
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce4:	f7fc fbf4 	bl	80024d0 <HAL_GetTick>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2208      	movs	r2, #8
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d12d      	bne.n	8005d56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cfc:	2280      	movs	r2, #128	@ 0x80
 8005cfe:	0391      	lsls	r1, r2, #14
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4a47      	ldr	r2, [pc, #284]	@ (8005e20 <UART_CheckIdleState+0x14c>)
 8005d04:	9200      	str	r2, [sp, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f000 f88e 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8005d0c:	1e03      	subs	r3, r0, #0
 8005d0e:	d022      	beq.n	8005d56 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d10:	f3ef 8310 	mrs	r3, PRIMASK
 8005d14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	f383 8810 	msr	PRIMASK, r3
}
 8005d24:	46c0      	nop			@ (mov r8, r8)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2180      	movs	r1, #128	@ 0x80
 8005d32:	438a      	bics	r2, r1
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3c:	f383 8810 	msr	PRIMASK, r3
}
 8005d40:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2288      	movs	r2, #136	@ 0x88
 8005d46:	2120      	movs	r1, #32
 8005d48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2284      	movs	r2, #132	@ 0x84
 8005d4e:	2100      	movs	r1, #0
 8005d50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e060      	b.n	8005e18 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d146      	bne.n	8005df2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d66:	2280      	movs	r2, #128	@ 0x80
 8005d68:	03d1      	lsls	r1, r2, #15
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e20 <UART_CheckIdleState+0x14c>)
 8005d6e:	9200      	str	r2, [sp, #0]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f000 f859 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8005d76:	1e03      	subs	r3, r0, #0
 8005d78:	d03b      	beq.n	8005df2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d80:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d84:	2301      	movs	r3, #1
 8005d86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f383 8810 	msr	PRIMASK, r3
}
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4922      	ldr	r1, [pc, #136]	@ (8005e24 <UART_CheckIdleState+0x150>)
 8005d9c:	400a      	ands	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f383 8810 	msr	PRIMASK, r3
}
 8005daa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dac:	f3ef 8310 	mrs	r3, PRIMASK
 8005db0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005db2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005db6:	2301      	movs	r3, #1
 8005db8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f383 8810 	msr	PRIMASK, r3
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2101      	movs	r1, #1
 8005dce:	438a      	bics	r2, r1
 8005dd0:	609a      	str	r2, [r3, #8]
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	f383 8810 	msr	PRIMASK, r3
}
 8005ddc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	228c      	movs	r2, #140	@ 0x8c
 8005de2:	2120      	movs	r1, #32
 8005de4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2284      	movs	r2, #132	@ 0x84
 8005dea:	2100      	movs	r1, #0
 8005dec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e012      	b.n	8005e18 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2288      	movs	r2, #136	@ 0x88
 8005df6:	2120      	movs	r1, #32
 8005df8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	228c      	movs	r2, #140	@ 0x8c
 8005dfe:	2120      	movs	r1, #32
 8005e00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2284      	movs	r2, #132	@ 0x84
 8005e12:	2100      	movs	r1, #0
 8005e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	0018      	movs	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b010      	add	sp, #64	@ 0x40
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	01ffffff 	.word	0x01ffffff
 8005e24:	fffffedf 	.word	0xfffffedf

08005e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	1dfb      	adds	r3, r7, #7
 8005e36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e38:	e051      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	d04e      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e40:	f7fc fb46 	bl	80024d0 <HAL_GetTick>
 8005e44:	0002      	movs	r2, r0
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d302      	bcc.n	8005e56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e051      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2204      	movs	r2, #4
 8005e62:	4013      	ands	r3, r2
 8005e64:	d03b      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb6>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b80      	cmp	r3, #128	@ 0x80
 8005e6a:	d038      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb6>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b40      	cmp	r3, #64	@ 0x40
 8005e70:	d035      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d111      	bne.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2208      	movs	r2, #8
 8005e86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f83c 	bl	8005f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2290      	movs	r2, #144	@ 0x90
 8005e94:	2108      	movs	r1, #8
 8005e96:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2284      	movs	r2, #132	@ 0x84
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e02c      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	2380      	movs	r3, #128	@ 0x80
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	401a      	ands	r2, r3
 8005eb0:	2380      	movs	r3, #128	@ 0x80
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d112      	bne.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2280      	movs	r2, #128	@ 0x80
 8005ebe:	0112      	lsls	r2, r2, #4
 8005ec0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 f81f 	bl	8005f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2290      	movs	r2, #144	@ 0x90
 8005ece:	2120      	movs	r1, #32
 8005ed0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2284      	movs	r2, #132	@ 0x84
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e00f      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	425a      	negs	r2, r3
 8005eee:	4153      	adcs	r3, r2
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	001a      	movs	r2, r3
 8005ef4:	1dfb      	adds	r3, r7, #7
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d09e      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	0018      	movs	r0, r3
 8005f00:	46bd      	mov	sp, r7
 8005f02:	b004      	add	sp, #16
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08e      	sub	sp, #56	@ 0x38
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f10:	f3ef 8310 	mrs	r3, PRIMASK
 8005f14:	617b      	str	r3, [r7, #20]
  return(result);
 8005f16:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f383 8810 	msr	PRIMASK, r3
}
 8005f24:	46c0      	nop			@ (mov r8, r8)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4926      	ldr	r1, [pc, #152]	@ (8005fcc <UART_EndRxTransfer+0xc4>)
 8005f32:	400a      	ands	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f383 8810 	msr	PRIMASK, r3
}
 8005f40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f42:	f3ef 8310 	mrs	r3, PRIMASK
 8005f46:	623b      	str	r3, [r7, #32]
  return(result);
 8005f48:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	f383 8810 	msr	PRIMASK, r3
}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	491b      	ldr	r1, [pc, #108]	@ (8005fd0 <UART_EndRxTransfer+0xc8>)
 8005f64:	400a      	ands	r2, r1
 8005f66:	609a      	str	r2, [r3, #8]
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	f383 8810 	msr	PRIMASK, r3
}
 8005f72:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d118      	bne.n	8005fae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f80:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f82:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f86:	2301      	movs	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f383 8810 	msr	PRIMASK, r3
}
 8005f90:	46c0      	nop			@ (mov r8, r8)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2110      	movs	r1, #16
 8005f9e:	438a      	bics	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f383 8810 	msr	PRIMASK, r3
}
 8005fac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	228c      	movs	r2, #140	@ 0x8c
 8005fb2:	2120      	movs	r1, #32
 8005fb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005fc2:	46c0      	nop			@ (mov r8, r8)
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b00e      	add	sp, #56	@ 0x38
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	fffffedf 	.word	0xfffffedf
 8005fd0:	effffffe 	.word	0xeffffffe

08005fd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	225e      	movs	r2, #94	@ 0x5e
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2256      	movs	r2, #86	@ 0x56
 8005fee:	2100      	movs	r1, #0
 8005ff0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f7ff fae7 	bl	80055c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b004      	add	sp, #16
 8006000:	bd80      	pop	{r7, pc}

08006002 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b086      	sub	sp, #24
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800600a:	f3ef 8310 	mrs	r3, PRIMASK
 800600e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006010:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	2301      	movs	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f383 8810 	msr	PRIMASK, r3
}
 800601e:	46c0      	nop			@ (mov r8, r8)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2140      	movs	r1, #64	@ 0x40
 800602c:	438a      	bics	r2, r1
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f383 8810 	msr	PRIMASK, r3
}
 800603a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2288      	movs	r2, #136	@ 0x88
 8006040:	2120      	movs	r1, #32
 8006042:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	0018      	movs	r0, r3
 800604e:	f7ff fab3 	bl	80055b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006052:	46c0      	nop			@ (mov r8, r8)
 8006054:	46bd      	mov	sp, r7
 8006056:	b006      	add	sp, #24
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006062:	46c0      	nop			@ (mov r8, r8)
 8006064:	46bd      	mov	sp, r7
 8006066:	b002      	add	sp, #8
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	46bd      	mov	sp, r7
 8006076:	b002      	add	sp, #8
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	46bd      	mov	sp, r7
 8006086:	b002      	add	sp, #8
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2284      	movs	r2, #132	@ 0x84
 8006098:	5c9b      	ldrb	r3, [r3, r2]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800609e:	2302      	movs	r3, #2
 80060a0:	e027      	b.n	80060f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2284      	movs	r2, #132	@ 0x84
 80060a6:	2101      	movs	r1, #1
 80060a8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2288      	movs	r2, #136	@ 0x88
 80060ae:	2124      	movs	r1, #36	@ 0x24
 80060b0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2101      	movs	r1, #1
 80060c6:	438a      	bics	r2, r1
 80060c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a0b      	ldr	r2, [pc, #44]	@ (80060fc <HAL_UARTEx_DisableFifoMode+0x70>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2288      	movs	r2, #136	@ 0x88
 80060e4:	2120      	movs	r1, #32
 80060e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2284      	movs	r2, #132	@ 0x84
 80060ec:	2100      	movs	r1, #0
 80060ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b004      	add	sp, #16
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	dfffffff 	.word	0xdfffffff

08006100 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2284      	movs	r2, #132	@ 0x84
 800610e:	5c9b      	ldrb	r3, [r3, r2]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006114:	2302      	movs	r3, #2
 8006116:	e02e      	b.n	8006176 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2284      	movs	r2, #132	@ 0x84
 800611c:	2101      	movs	r1, #1
 800611e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2288      	movs	r2, #136	@ 0x88
 8006124:	2124      	movs	r1, #36	@ 0x24
 8006126:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2101      	movs	r1, #1
 800613c:	438a      	bics	r2, r1
 800613e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	08d9      	lsrs	r1, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	0018      	movs	r0, r3
 8006158:	f000 f854 	bl	8006204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2288      	movs	r2, #136	@ 0x88
 8006168:	2120      	movs	r1, #32
 800616a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2284      	movs	r2, #132	@ 0x84
 8006170:	2100      	movs	r1, #0
 8006172:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	0018      	movs	r0, r3
 8006178:	46bd      	mov	sp, r7
 800617a:	b004      	add	sp, #16
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2284      	movs	r2, #132	@ 0x84
 800618e:	5c9b      	ldrb	r3, [r3, r2]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006194:	2302      	movs	r3, #2
 8006196:	e02f      	b.n	80061f8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2284      	movs	r2, #132	@ 0x84
 800619c:	2101      	movs	r1, #1
 800619e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2288      	movs	r2, #136	@ 0x88
 80061a4:	2124      	movs	r1, #36	@ 0x24
 80061a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2101      	movs	r1, #1
 80061bc:	438a      	bics	r2, r1
 80061be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006200 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	0019      	movs	r1, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	0018      	movs	r0, r3
 80061da:	f000 f813 	bl	8006204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2288      	movs	r2, #136	@ 0x88
 80061ea:	2120      	movs	r1, #32
 80061ec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2284      	movs	r2, #132	@ 0x84
 80061f2:	2100      	movs	r1, #0
 80061f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	0018      	movs	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b004      	add	sp, #16
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	f1ffffff 	.word	0xf1ffffff

08006204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006210:	2b00      	cmp	r3, #0
 8006212:	d108      	bne.n	8006226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	226a      	movs	r2, #106	@ 0x6a
 8006218:	2101      	movs	r1, #1
 800621a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2268      	movs	r2, #104	@ 0x68
 8006220:	2101      	movs	r1, #1
 8006222:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006224:	e043      	b.n	80062ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006226:	260f      	movs	r6, #15
 8006228:	19bb      	adds	r3, r7, r6
 800622a:	2208      	movs	r2, #8
 800622c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800622e:	200e      	movs	r0, #14
 8006230:	183b      	adds	r3, r7, r0
 8006232:	2208      	movs	r2, #8
 8006234:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	0e5b      	lsrs	r3, r3, #25
 800623e:	b2da      	uxtb	r2, r3
 8006240:	240d      	movs	r4, #13
 8006242:	193b      	adds	r3, r7, r4
 8006244:	2107      	movs	r1, #7
 8006246:	400a      	ands	r2, r1
 8006248:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	0f5b      	lsrs	r3, r3, #29
 8006252:	b2da      	uxtb	r2, r3
 8006254:	250c      	movs	r5, #12
 8006256:	197b      	adds	r3, r7, r5
 8006258:	2107      	movs	r1, #7
 800625a:	400a      	ands	r2, r1
 800625c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800625e:	183b      	adds	r3, r7, r0
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	197a      	adds	r2, r7, r5
 8006264:	7812      	ldrb	r2, [r2, #0]
 8006266:	4914      	ldr	r1, [pc, #80]	@ (80062b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8006268:	5c8a      	ldrb	r2, [r1, r2]
 800626a:	435a      	muls	r2, r3
 800626c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800626e:	197b      	adds	r3, r7, r5
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	4a12      	ldr	r2, [pc, #72]	@ (80062bc <UARTEx_SetNbDataToProcess+0xb8>)
 8006274:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006276:	0019      	movs	r1, r3
 8006278:	f7f9 ffd6 	bl	8000228 <__divsi3>
 800627c:	0003      	movs	r3, r0
 800627e:	b299      	uxth	r1, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	226a      	movs	r2, #106	@ 0x6a
 8006284:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006286:	19bb      	adds	r3, r7, r6
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	193a      	adds	r2, r7, r4
 800628c:	7812      	ldrb	r2, [r2, #0]
 800628e:	490a      	ldr	r1, [pc, #40]	@ (80062b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8006290:	5c8a      	ldrb	r2, [r1, r2]
 8006292:	435a      	muls	r2, r3
 8006294:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006296:	193b      	adds	r3, r7, r4
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	4a08      	ldr	r2, [pc, #32]	@ (80062bc <UARTEx_SetNbDataToProcess+0xb8>)
 800629c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800629e:	0019      	movs	r1, r3
 80062a0:	f7f9 ffc2 	bl	8000228 <__divsi3>
 80062a4:	0003      	movs	r3, r0
 80062a6:	b299      	uxth	r1, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2268      	movs	r2, #104	@ 0x68
 80062ac:	5299      	strh	r1, [r3, r2]
}
 80062ae:	46c0      	nop			@ (mov r8, r8)
 80062b0:	46bd      	mov	sp, r7
 80062b2:	b005      	add	sp, #20
 80062b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b6:	46c0      	nop			@ (mov r8, r8)
 80062b8:	08008b80 	.word	0x08008b80
 80062bc:	08008b88 	.word	0x08008b88

080062c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80062c6:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <MX_DMA_Init+0x38>)
 80062c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ca:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <MX_DMA_Init+0x38>)
 80062cc:	2101      	movs	r1, #1
 80062ce:	430a      	orrs	r2, r1
 80062d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80062d2:	4b09      	ldr	r3, [pc, #36]	@ (80062f8 <MX_DMA_Init+0x38>)
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	2201      	movs	r2, #1
 80062d8:	4013      	ands	r3, r2
 80062da:	607b      	str	r3, [r7, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80062de:	2200      	movs	r2, #0
 80062e0:	2100      	movs	r1, #0
 80062e2:	2009      	movs	r0, #9
 80062e4:	f7fc f9f0 	bl	80026c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80062e8:	2009      	movs	r0, #9
 80062ea:	f7fc fa02 	bl	80026f2 <HAL_NVIC_EnableIRQ>

}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b002      	add	sp, #8
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	40021000 	.word	0x40021000

080062fc <uartSend>:
//---------------------------IMPLICIT FUNCTIONS---------------------------
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
espat_state_t uartSend(espat_uartInstance_t *uart, char *data, uint32_t size) {
 80062fc:	b5b0      	push	{r4, r5, r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef state = HAL_OK;
 8006308:	2117      	movs	r1, #23
 800630a:	187b      	adds	r3, r7, r1
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]

#if DMA_MODE
		state = HAL_UART_Transmit_DMA(uart->uart, (uint8_t*) data, size);
#else
	state = HAL_UART_Transmit(uart->uart, (uint8_t*) data,
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	000d      	movs	r5, r1
 800631e:	187c      	adds	r4, r7, r1
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	f7fe fd7f 	bl	8004e24 <HAL_UART_Transmit>
 8006326:	0003      	movs	r3, r0
 8006328:	7023      	strb	r3, [r4, #0]
			size, uart->sendTimeout);
#endif

	if (state == HAL_OK)
 800632a:	197b      	adds	r3, r7, r5
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <uartSend+0x3a>
		return ESPAT_STATE_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	e00e      	b.n	8006354 <uartSend+0x58>
	else if (state == HAL_TIMEOUT)
 8006336:	2317      	movs	r3, #23
 8006338:	18fb      	adds	r3, r7, r3
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b03      	cmp	r3, #3
 800633e:	d101      	bne.n	8006344 <uartSend+0x48>
		return ESPAT_STATE_TIMEOUT;
 8006340:	2302      	movs	r3, #2
 8006342:	e007      	b.n	8006354 <uartSend+0x58>
	else if(state == HAL_BUSY)
 8006344:	2317      	movs	r3, #23
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d101      	bne.n	8006352 <uartSend+0x56>
		return ESPAT_STATE_BUSY;
 800634e:	2303      	movs	r3, #3
 8006350:	e000      	b.n	8006354 <uartSend+0x58>
	else
		return ESPAT_STATE_ERR;
 8006352:	2301      	movs	r3, #1
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	b006      	add	sp, #24
 800635a:	bdb0      	pop	{r4, r5, r7, pc}

0800635c <espAt_init>:
 * @param: timout for receive
 *
 * @retval: always ESPATHID_OK
 */
espat_state_t espAt_init(espat_radio_t *radio, UART_HandleTypeDef *uart,
		uint32_t txTimeout, uint32_t rxTimeout) { //port
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]

	radio->espUart.uart = uart;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	601a      	str	r2, [r3, #0]
	radio->espUart.sendTimeout = txTimeout;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	605a      	str	r2, [r3, #4]
	radio->espUart.receiveTimeout = rxTimeout;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	609a      	str	r2, [r3, #8]
	return ESPAT_STATE_OK;
 800637c:	2300      	movs	r3, #0

}
 800637e:	0018      	movs	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	b004      	add	sp, #16
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <espAt_sendCommand>:
 *
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendCommand(espat_radio_t *radio, char *command) {
 8006388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638a:	46c6      	mov	lr, r8
 800638c:	b500      	push	{lr}
 800638e:	b08c      	sub	sp, #48	@ 0x30
 8006390:	af00      	add	r7, sp, #0
 8006392:	61f8      	str	r0, [r7, #28]
 8006394:	61b9      	str	r1, [r7, #24]
 8006396:	466b      	mov	r3, sp
 8006398:	4698      	mov	r8, r3
	//check if command and string are valid
	if (command == NULL)
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <espAt_sendCommand+0x1c>
		return ESPAT_STATE_ERR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e093      	b.n	80064cc <espAt_sendCommand+0x144>

	uint16_t prefixLength = strlen(AT_PREFIX);
 80063a4:	2316      	movs	r3, #22
 80063a6:	2618      	movs	r6, #24
 80063a8:	199b      	adds	r3, r3, r6
 80063aa:	19db      	adds	r3, r3, r7
 80063ac:	2203      	movs	r2, #3
 80063ae:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	0018      	movs	r0, r3
 80063b4:	f7f9 fea6 	bl	8000104 <strlen>
 80063b8:	0002      	movs	r2, r0
 80063ba:	2114      	movs	r1, #20
 80063bc:	0030      	movs	r0, r6
 80063be:	180b      	adds	r3, r1, r0
 80063c0:	19db      	adds	r3, r3, r7
 80063c2:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 80063c4:	2212      	movs	r2, #18
 80063c6:	0016      	movs	r6, r2
 80063c8:	1813      	adds	r3, r2, r0
 80063ca:	19db      	adds	r3, r3, r7
 80063cc:	2202      	movs	r2, #2
 80063ce:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + endingLength;
 80063d0:	2316      	movs	r3, #22
 80063d2:	181b      	adds	r3, r3, r0
 80063d4:	19da      	adds	r2, r3, r7
 80063d6:	1809      	adds	r1, r1, r0
 80063d8:	19cb      	adds	r3, r1, r7
 80063da:	8812      	ldrh	r2, [r2, #0]
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	18d3      	adds	r3, r2, r3
 80063e0:	b299      	uxth	r1, r3
 80063e2:	2010      	movs	r0, #16
 80063e4:	2318      	movs	r3, #24
 80063e6:	18c2      	adds	r2, r0, r3
 80063e8:	19d3      	adds	r3, r2, r7
 80063ea:	0032      	movs	r2, r6
 80063ec:	2618      	movs	r6, #24
 80063ee:	1992      	adds	r2, r2, r6
 80063f0:	19d2      	adds	r2, r2, r7
 80063f2:	8812      	ldrh	r2, [r2, #0]
 80063f4:	188a      	adds	r2, r1, r2
 80063f6:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 80063f8:	1983      	adds	r3, r0, r6
 80063fa:	19db      	adds	r3, r3, r7
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	001a      	movs	r2, r3
 8006400:	3a01      	subs	r2, #1
 8006402:	627a      	str	r2, [r7, #36]	@ 0x24
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	2200      	movs	r2, #0
 8006408:	60fa      	str	r2, [r7, #12]
 800640a:	68b8      	ldr	r0, [r7, #8]
 800640c:	68f9      	ldr	r1, [r7, #12]
 800640e:	0006      	movs	r6, r0
 8006410:	0f72      	lsrs	r2, r6, #29
 8006412:	000e      	movs	r6, r1
 8006414:	00f6      	lsls	r6, r6, #3
 8006416:	617e      	str	r6, [r7, #20]
 8006418:	697e      	ldr	r6, [r7, #20]
 800641a:	4316      	orrs	r6, r2
 800641c:	617e      	str	r6, [r7, #20]
 800641e:	0006      	movs	r6, r0
 8006420:	00f6      	lsls	r6, r6, #3
 8006422:	613e      	str	r6, [r7, #16]
 8006424:	603b      	str	r3, [r7, #0]
 8006426:	2200      	movs	r2, #0
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	6838      	ldr	r0, [r7, #0]
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	0006      	movs	r6, r0
 8006430:	0f72      	lsrs	r2, r6, #29
 8006432:	000e      	movs	r6, r1
 8006434:	00f5      	lsls	r5, r6, #3
 8006436:	4315      	orrs	r5, r2
 8006438:	0006      	movs	r6, r0
 800643a:	00f4      	lsls	r4, r6, #3
 800643c:	3307      	adds	r3, #7
 800643e:	08db      	lsrs	r3, r3, #3
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	466e      	mov	r6, sp
 8006444:	1af6      	subs	r6, r6, r3
 8006446:	46b5      	mov	sp, r6
 8006448:	466b      	mov	r3, sp
 800644a:	3300      	adds	r3, #0
 800644c:	623b      	str	r3, [r7, #32]
	memset(buffer, ' ', bufferSize);
 800644e:	2010      	movs	r0, #16
 8006450:	0006      	movs	r6, r0
 8006452:	2518      	movs	r5, #24
 8006454:	1943      	adds	r3, r0, r5
 8006456:	19db      	adds	r3, r3, r7
 8006458:	881a      	ldrh	r2, [r3, #0]
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	2120      	movs	r1, #32
 800645e:	0018      	movs	r0, r3
 8006460:	f001 fbca 	bl	8007bf8 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8006464:	6a38      	ldr	r0, [r7, #32]
 8006466:	2416      	movs	r4, #22
 8006468:	1963      	adds	r3, r4, r5
 800646a:	19db      	adds	r3, r3, r7
 800646c:	881a      	ldrh	r2, [r3, #0]
 800646e:	4b1b      	ldr	r3, [pc, #108]	@ (80064dc <espAt_sendCommand+0x154>)
 8006470:	0019      	movs	r1, r3
 8006472:	f001 fbf3 	bl	8007c5c <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8006476:	0029      	movs	r1, r5
 8006478:	1863      	adds	r3, r4, r1
 800647a:	19db      	adds	r3, r3, r7
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	6a3a      	ldr	r2, [r7, #32]
 8006480:	18d0      	adds	r0, r2, r3
 8006482:	2514      	movs	r5, #20
 8006484:	186b      	adds	r3, r5, r1
 8006486:	19db      	adds	r3, r3, r7
 8006488:	881a      	ldrh	r2, [r3, #0]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	0019      	movs	r1, r3
 800648e:	f001 fbe5 	bl	8007c5c <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ENDING, endingLength);
 8006492:	2118      	movs	r1, #24
 8006494:	1863      	adds	r3, r4, r1
 8006496:	19db      	adds	r3, r3, r7
 8006498:	881a      	ldrh	r2, [r3, #0]
 800649a:	000c      	movs	r4, r1
 800649c:	192b      	adds	r3, r5, r4
 800649e:	19db      	adds	r3, r3, r7
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	18d3      	adds	r3, r2, r3
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	18d0      	adds	r0, r2, r3
 80064a8:	2212      	movs	r2, #18
 80064aa:	1913      	adds	r3, r2, r4
 80064ac:	19db      	adds	r3, r3, r7
 80064ae:	881a      	ldrh	r2, [r3, #0]
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <espAt_sendCommand+0x158>)
 80064b2:	0019      	movs	r1, r3
 80064b4:	f001 fbd2 	bl	8007c5c <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 80064b8:	69f8      	ldr	r0, [r7, #28]
 80064ba:	0033      	movs	r3, r6
 80064bc:	191b      	adds	r3, r3, r4
 80064be:	19db      	adds	r3, r3, r7
 80064c0:	881a      	ldrh	r2, [r3, #0]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	0019      	movs	r1, r3
 80064c6:	f7ff ff19 	bl	80062fc <uartSend>
 80064ca:	0003      	movs	r3, r0
 80064cc:	46c5      	mov	sp, r8
}
 80064ce:	0018      	movs	r0, r3
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b00c      	add	sp, #48	@ 0x30
 80064d4:	bc80      	pop	{r7}
 80064d6:	46b8      	mov	r8, r7
 80064d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	08008ad8 	.word	0x08008ad8
 80064e0:	08008adc 	.word	0x08008adc

080064e4 <espAt_sendParams>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendParams(espat_radio_t *radio, char *command,
		uint16_t paramCount, ...) {
 80064e4:	b40c      	push	{r2, r3}
 80064e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064e8:	46c6      	mov	lr, r8
 80064ea:	b500      	push	{lr}
 80064ec:	b0a2      	sub	sp, #136	@ 0x88
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80064f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064f4:	466b      	mov	r3, sp
 80064f6:	4698      	mov	r8, r3

	//check if command are valid
	if (command == NULL)
 80064f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <espAt_sendParams+0x1e>
		return ESPAT_STATE_ERR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e1b7      	b.n	8006872 <espAt_sendParams+0x38e>

	va_list ap;
	va_start(ap, paramCount);
 8006502:	236c      	movs	r3, #108	@ 0x6c
 8006504:	2238      	movs	r2, #56	@ 0x38
 8006506:	189b      	adds	r3, r3, r2
 8006508:	19db      	adds	r3, r3, r7
 800650a:	663b      	str	r3, [r7, #96]	@ 0x60

	//make parameters array
	int32_t parameters[paramCount];
 800650c:	2368      	movs	r3, #104	@ 0x68
 800650e:	189b      	adds	r3, r3, r2
 8006510:	19db      	adds	r3, r3, r7
 8006512:	881a      	ldrh	r2, [r3, #0]
 8006514:	0013      	movs	r3, r2
 8006516:	3b01      	subs	r3, #1
 8006518:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800651a:	61ba      	str	r2, [r7, #24]
 800651c:	2300      	movs	r3, #0
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	69b8      	ldr	r0, [r7, #24]
 8006522:	69f9      	ldr	r1, [r7, #28]
 8006524:	0003      	movs	r3, r0
 8006526:	0edb      	lsrs	r3, r3, #27
 8006528:	000e      	movs	r6, r1
 800652a:	0175      	lsls	r5, r6, #5
 800652c:	431d      	orrs	r5, r3
 800652e:	0003      	movs	r3, r0
 8006530:	015c      	lsls	r4, r3, #5
 8006532:	613a      	str	r2, [r7, #16]
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	6938      	ldr	r0, [r7, #16]
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	0003      	movs	r3, r0
 800653e:	0edb      	lsrs	r3, r3, #27
 8006540:	000c      	movs	r4, r1
 8006542:	0164      	lsls	r4, r4, #5
 8006544:	637c      	str	r4, [r7, #52]	@ 0x34
 8006546:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8006548:	431c      	orrs	r4, r3
 800654a:	637c      	str	r4, [r7, #52]	@ 0x34
 800654c:	0003      	movs	r3, r0
 800654e:	015b      	lsls	r3, r3, #5
 8006550:	633b      	str	r3, [r7, #48]	@ 0x30
 8006552:	0013      	movs	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	3307      	adds	r3, #7
 8006558:	08db      	lsrs	r3, r3, #3
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	466a      	mov	r2, sp
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	469d      	mov	sp, r3
 8006562:	466b      	mov	r3, sp
 8006564:	3303      	adds	r3, #3
 8006566:	089b      	lsrs	r3, r3, #2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	67bb      	str	r3, [r7, #120]	@ 0x78

	//fill parameters array
	for (uint16_t i = 0; i < paramCount; i++) {
 800656c:	234e      	movs	r3, #78	@ 0x4e
 800656e:	2238      	movs	r2, #56	@ 0x38
 8006570:	189b      	adds	r3, r3, r2
 8006572:	19db      	adds	r3, r3, r7
 8006574:	2200      	movs	r2, #0
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	e012      	b.n	80065a0 <espAt_sendParams+0xbc>
		parameters[i] = va_arg(ap, int32_t);
 800657a:	204e      	movs	r0, #78	@ 0x4e
 800657c:	2438      	movs	r4, #56	@ 0x38
 800657e:	1903      	adds	r3, r0, r4
 8006580:	19db      	adds	r3, r3, r7
 8006582:	881a      	ldrh	r2, [r3, #0]
 8006584:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006586:	1d19      	adds	r1, r3, #4
 8006588:	6639      	str	r1, [r7, #96]	@ 0x60
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800658e:	0092      	lsls	r2, r2, #2
 8006590:	50d1      	str	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 8006592:	1903      	adds	r3, r0, r4
 8006594:	19db      	adds	r3, r3, r7
 8006596:	881a      	ldrh	r2, [r3, #0]
 8006598:	1903      	adds	r3, r0, r4
 800659a:	19db      	adds	r3, r3, r7
 800659c:	3201      	adds	r2, #1
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	234e      	movs	r3, #78	@ 0x4e
 80065a2:	2138      	movs	r1, #56	@ 0x38
 80065a4:	185b      	adds	r3, r3, r1
 80065a6:	19da      	adds	r2, r3, r7
 80065a8:	2368      	movs	r3, #104	@ 0x68
 80065aa:	185b      	adds	r3, r3, r1
 80065ac:	19db      	adds	r3, r3, r7
 80065ae:	8812      	ldrh	r2, [r2, #0]
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d3e1      	bcc.n	800657a <espAt_sendParams+0x96>
	}

	//make arguments list string
	uint16_t characterCounter = 0;
 80065b6:	234c      	movs	r3, #76	@ 0x4c
 80065b8:	185b      	adds	r3, r3, r1
 80065ba:	19db      	adds	r3, r3, r7
 80065bc:	2200      	movs	r2, #0
 80065be:	801a      	strh	r2, [r3, #0]
	char argumentsBuffer[AT_BUFFER_SIZE];
	memset(argumentsBuffer, '\0', AT_BUFFER_SIZE);
 80065c0:	2308      	movs	r3, #8
 80065c2:	000c      	movs	r4, r1
 80065c4:	185b      	adds	r3, r3, r1
 80065c6:	19db      	adds	r3, r3, r7
 80065c8:	221e      	movs	r2, #30
 80065ca:	2100      	movs	r1, #0
 80065cc:	0018      	movs	r0, r3
 80065ce:	f001 fb13 	bl	8007bf8 <memset>

	for (uint16_t i = 0; i < paramCount; i++) {
 80065d2:	234a      	movs	r3, #74	@ 0x4a
 80065d4:	191b      	adds	r3, r3, r4
 80065d6:	19db      	adds	r3, r3, r7
 80065d8:	2200      	movs	r2, #0
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e048      	b.n	8006670 <espAt_sendParams+0x18c>
		itoa(parameters[i], &argumentsBuffer[characterCounter], 10);
 80065de:	234a      	movs	r3, #74	@ 0x4a
 80065e0:	001e      	movs	r6, r3
 80065e2:	2138      	movs	r1, #56	@ 0x38
 80065e4:	185b      	adds	r3, r3, r1
 80065e6:	19db      	adds	r3, r3, r7
 80065e8:	881a      	ldrh	r2, [r3, #0]
 80065ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065ec:	0092      	lsls	r2, r2, #2
 80065ee:	58d0      	ldr	r0, [r2, r3]
 80065f0:	244c      	movs	r4, #76	@ 0x4c
 80065f2:	1863      	adds	r3, r4, r1
 80065f4:	19db      	adds	r3, r3, r7
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	2508      	movs	r5, #8
 80065fa:	186a      	adds	r2, r5, r1
 80065fc:	19d2      	adds	r2, r2, r7
 80065fe:	18d3      	adds	r3, r2, r3
 8006600:	220a      	movs	r2, #10
 8006602:	0019      	movs	r1, r3
 8006604:	f001 fabf 	bl	8007b86 <itoa>
		characterCounter += strlen(&argumentsBuffer[characterCounter]) + 1;
 8006608:	2038      	movs	r0, #56	@ 0x38
 800660a:	1823      	adds	r3, r4, r0
 800660c:	19db      	adds	r3, r3, r7
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	182a      	adds	r2, r5, r0
 8006612:	19d2      	adds	r2, r2, r7
 8006614:	18d3      	adds	r3, r2, r3
 8006616:	0018      	movs	r0, r3
 8006618:	f7f9 fd74 	bl	8000104 <strlen>
 800661c:	0003      	movs	r3, r0
 800661e:	b29a      	uxth	r2, r3
 8006620:	0021      	movs	r1, r4
 8006622:	2038      	movs	r0, #56	@ 0x38
 8006624:	180b      	adds	r3, r1, r0
 8006626:	19db      	adds	r3, r3, r7
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	18d3      	adds	r3, r2, r3
 800662c:	b29a      	uxth	r2, r3
 800662e:	180b      	adds	r3, r1, r0
 8006630:	19db      	adds	r3, r3, r7
 8006632:	3201      	adds	r2, #1
 8006634:	801a      	strh	r2, [r3, #0]
		if (i < paramCount - 1)
 8006636:	0033      	movs	r3, r6
 8006638:	181b      	adds	r3, r3, r0
 800663a:	19db      	adds	r3, r3, r7
 800663c:	881a      	ldrh	r2, [r3, #0]
 800663e:	2368      	movs	r3, #104	@ 0x68
 8006640:	181b      	adds	r3, r3, r0
 8006642:	19db      	adds	r3, r3, r7
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	3b01      	subs	r3, #1
 8006648:	429a      	cmp	r2, r3
 800664a:	da08      	bge.n	800665e <espAt_sendParams+0x17a>
			argumentsBuffer[characterCounter - 1] = ','; //add comma only if NOT last parameter
 800664c:	0002      	movs	r2, r0
 800664e:	188b      	adds	r3, r1, r2
 8006650:	19db      	adds	r3, r3, r7
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	3b01      	subs	r3, #1
 8006656:	18aa      	adds	r2, r5, r2
 8006658:	19d2      	adds	r2, r2, r7
 800665a:	212c      	movs	r1, #44	@ 0x2c
 800665c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 800665e:	214a      	movs	r1, #74	@ 0x4a
 8006660:	2038      	movs	r0, #56	@ 0x38
 8006662:	180b      	adds	r3, r1, r0
 8006664:	19db      	adds	r3, r3, r7
 8006666:	881a      	ldrh	r2, [r3, #0]
 8006668:	180b      	adds	r3, r1, r0
 800666a:	19db      	adds	r3, r3, r7
 800666c:	3201      	adds	r2, #1
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	234a      	movs	r3, #74	@ 0x4a
 8006672:	2638      	movs	r6, #56	@ 0x38
 8006674:	199b      	adds	r3, r3, r6
 8006676:	19da      	adds	r2, r3, r7
 8006678:	2368      	movs	r3, #104	@ 0x68
 800667a:	199b      	adds	r3, r3, r6
 800667c:	19db      	adds	r3, r3, r7
 800667e:	8812      	ldrh	r2, [r2, #0]
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d3ab      	bcc.n	80065de <espAt_sendParams+0xfa>
	}

	va_end(ap);

	//count buffer length
	uint16_t prefixLength = strlen(AT_PREFIX);
 8006686:	243e      	movs	r4, #62	@ 0x3e
 8006688:	19a3      	adds	r3, r4, r6
 800668a:	19db      	adds	r3, r3, r7
 800668c:	2203      	movs	r2, #3
 800668e:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8006690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006692:	0018      	movs	r0, r3
 8006694:	f7f9 fd36 	bl	8000104 <strlen>
 8006698:	0002      	movs	r2, r0
 800669a:	253c      	movs	r5, #60	@ 0x3c
 800669c:	19ab      	adds	r3, r5, r6
 800669e:	19db      	adds	r3, r3, r7
 80066a0:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 80066a2:	213a      	movs	r1, #58	@ 0x3a
 80066a4:	198b      	adds	r3, r1, r6
 80066a6:	19db      	adds	r3, r3, r7
 80066a8:	2201      	movs	r2, #1
 80066aa:	801a      	strh	r2, [r3, #0]
	uint16_t parametersLength = --characterCounter;
 80066ac:	224c      	movs	r2, #76	@ 0x4c
 80066ae:	0030      	movs	r0, r6
 80066b0:	1993      	adds	r3, r2, r6
 80066b2:	19db      	adds	r3, r3, r7
 80066b4:	0016      	movs	r6, r2
 80066b6:	1812      	adds	r2, r2, r0
 80066b8:	19d2      	adds	r2, r2, r7
 80066ba:	8812      	ldrh	r2, [r2, #0]
 80066bc:	3a01      	subs	r2, #1
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	2038      	movs	r0, #56	@ 0x38
 80066c2:	2338      	movs	r3, #56	@ 0x38
 80066c4:	18c2      	adds	r2, r0, r3
 80066c6:	19d3      	adds	r3, r2, r7
 80066c8:	0032      	movs	r2, r6
 80066ca:	2638      	movs	r6, #56	@ 0x38
 80066cc:	1992      	adds	r2, r2, r6
 80066ce:	19d2      	adds	r2, r2, r7
 80066d0:	8812      	ldrh	r2, [r2, #0]
 80066d2:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 80066d4:	2336      	movs	r3, #54	@ 0x36
 80066d6:	001e      	movs	r6, r3
 80066d8:	2238      	movs	r2, #56	@ 0x38
 80066da:	189a      	adds	r2, r3, r2
 80066dc:	19d3      	adds	r3, r2, r7
 80066de:	2202      	movs	r2, #2
 80066e0:	801a      	strh	r2, [r3, #0]

	//create master buffer and clear it
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 80066e2:	2338      	movs	r3, #56	@ 0x38
 80066e4:	18e2      	adds	r2, r4, r3
 80066e6:	19d2      	adds	r2, r2, r7
 80066e8:	18eb      	adds	r3, r5, r3
 80066ea:	19db      	adds	r3, r3, r7
 80066ec:	8812      	ldrh	r2, [r2, #0]
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	18d3      	adds	r3, r2, r3
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	2338      	movs	r3, #56	@ 0x38
 80066f6:	18c9      	adds	r1, r1, r3
 80066f8:	19cb      	adds	r3, r1, r7
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	18d3      	adds	r3, r2, r3
 80066fe:	b29a      	uxth	r2, r3
			+ parametersLength + endingLength;
 8006700:	2338      	movs	r3, #56	@ 0x38
 8006702:	18c1      	adds	r1, r0, r3
 8006704:	19cb      	adds	r3, r1, r7
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	18d3      	adds	r3, r2, r3
 800670a:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 800670c:	2234      	movs	r2, #52	@ 0x34
 800670e:	0010      	movs	r0, r2
 8006710:	2338      	movs	r3, #56	@ 0x38
 8006712:	18d2      	adds	r2, r2, r3
 8006714:	19d3      	adds	r3, r2, r7
 8006716:	0032      	movs	r2, r6
 8006718:	2638      	movs	r6, #56	@ 0x38
 800671a:	1992      	adds	r2, r2, r6
 800671c:	19d2      	adds	r2, r2, r7
 800671e:	8812      	ldrh	r2, [r2, #0]
 8006720:	188a      	adds	r2, r1, r2
 8006722:	801a      	strh	r2, [r3, #0]
	char buffer[bufferSize];
 8006724:	0002      	movs	r2, r0
 8006726:	1993      	adds	r3, r2, r6
 8006728:	19db      	adds	r3, r3, r7
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	001a      	movs	r2, r3
 800672e:	3a01      	subs	r2, #1
 8006730:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006732:	60bb      	str	r3, [r7, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	60fa      	str	r2, [r7, #12]
 8006738:	68b8      	ldr	r0, [r7, #8]
 800673a:	68f9      	ldr	r1, [r7, #12]
 800673c:	0006      	movs	r6, r0
 800673e:	0f72      	lsrs	r2, r6, #29
 8006740:	000e      	movs	r6, r1
 8006742:	00f6      	lsls	r6, r6, #3
 8006744:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8006746:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8006748:	4316      	orrs	r6, r2
 800674a:	62fe      	str	r6, [r7, #44]	@ 0x2c
 800674c:	0006      	movs	r6, r0
 800674e:	00f6      	lsls	r6, r6, #3
 8006750:	62be      	str	r6, [r7, #40]	@ 0x28
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	2200      	movs	r2, #0
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	6838      	ldr	r0, [r7, #0]
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	0006      	movs	r6, r0
 800675e:	0f72      	lsrs	r2, r6, #29
 8006760:	000e      	movs	r6, r1
 8006762:	00f6      	lsls	r6, r6, #3
 8006764:	627e      	str	r6, [r7, #36]	@ 0x24
 8006766:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8006768:	4316      	orrs	r6, r2
 800676a:	627e      	str	r6, [r7, #36]	@ 0x24
 800676c:	0006      	movs	r6, r0
 800676e:	00f6      	lsls	r6, r6, #3
 8006770:	623e      	str	r6, [r7, #32]
 8006772:	3307      	adds	r3, #7
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	466e      	mov	r6, sp
 800677a:	1af6      	subs	r6, r6, r3
 800677c:	46b5      	mov	sp, r6
 800677e:	466b      	mov	r3, sp
 8006780:	3300      	adds	r3, #0
 8006782:	667b      	str	r3, [r7, #100]	@ 0x64
	memset(buffer, ' ', bufferSize);
 8006784:	2234      	movs	r2, #52	@ 0x34
 8006786:	2638      	movs	r6, #56	@ 0x38
 8006788:	1993      	adds	r3, r2, r6
 800678a:	19db      	adds	r3, r3, r7
 800678c:	881a      	ldrh	r2, [r3, #0]
 800678e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006790:	2120      	movs	r1, #32
 8006792:	0018      	movs	r0, r3
 8006794:	f001 fa30 	bl	8007bf8 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8006798:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800679a:	19a3      	adds	r3, r4, r6
 800679c:	19db      	adds	r3, r3, r7
 800679e:	881a      	ldrh	r2, [r3, #0]
 80067a0:	4b39      	ldr	r3, [pc, #228]	@ (8006888 <espAt_sendParams+0x3a4>)
 80067a2:	0019      	movs	r1, r3
 80067a4:	f001 fa5a 	bl	8007c5c <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 80067a8:	0031      	movs	r1, r6
 80067aa:	19a3      	adds	r3, r4, r6
 80067ac:	19db      	adds	r3, r3, r7
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067b2:	18d0      	adds	r0, r2, r3
 80067b4:	000e      	movs	r6, r1
 80067b6:	186b      	adds	r3, r5, r1
 80067b8:	19db      	adds	r3, r3, r7
 80067ba:	881a      	ldrh	r2, [r3, #0]
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	0019      	movs	r1, r3
 80067c0:	f001 fa4c 	bl	8007c5c <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 80067c4:	0031      	movs	r1, r6
 80067c6:	1863      	adds	r3, r4, r1
 80067c8:	19db      	adds	r3, r3, r7
 80067ca:	881a      	ldrh	r2, [r3, #0]
 80067cc:	1868      	adds	r0, r5, r1
 80067ce:	19c3      	adds	r3, r0, r7
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	18d3      	adds	r3, r2, r3
 80067d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067d6:	18d0      	adds	r0, r2, r3
 80067d8:	213a      	movs	r1, #58	@ 0x3a
 80067da:	000e      	movs	r6, r1
 80067dc:	2338      	movs	r3, #56	@ 0x38
 80067de:	18ca      	adds	r2, r1, r3
 80067e0:	19d3      	adds	r3, r2, r7
 80067e2:	881a      	ldrh	r2, [r3, #0]
 80067e4:	4b29      	ldr	r3, [pc, #164]	@ (800688c <espAt_sendParams+0x3a8>)
 80067e6:	0019      	movs	r1, r3
 80067e8:	f001 fa38 	bl	8007c5c <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 80067ec:	2038      	movs	r0, #56	@ 0x38
 80067ee:	1823      	adds	r3, r4, r0
 80067f0:	19db      	adds	r3, r3, r7
 80067f2:	881a      	ldrh	r2, [r3, #0]
 80067f4:	182b      	adds	r3, r5, r0
 80067f6:	19db      	adds	r3, r3, r7
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	18d2      	adds	r2, r2, r3
 80067fc:	0031      	movs	r1, r6
 80067fe:	0006      	movs	r6, r0
 8006800:	180b      	adds	r3, r1, r0
 8006802:	19db      	adds	r3, r3, r7
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	18d3      	adds	r3, r2, r3
 8006808:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800680a:	18d0      	adds	r0, r2, r3
 800680c:	2338      	movs	r3, #56	@ 0x38
 800680e:	0031      	movs	r1, r6
 8006810:	185b      	adds	r3, r3, r1
 8006812:	19db      	adds	r3, r3, r7
 8006814:	881a      	ldrh	r2, [r3, #0]
 8006816:	2608      	movs	r6, #8
 8006818:	1873      	adds	r3, r6, r1
 800681a:	19db      	adds	r3, r3, r7
 800681c:	0019      	movs	r1, r3
 800681e:	f001 fa1d 	bl	8007c5c <memcpy>
			argumentsBuffer, parametersLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8006822:	2038      	movs	r0, #56	@ 0x38
 8006824:	1823      	adds	r3, r4, r0
 8006826:	19db      	adds	r3, r3, r7
 8006828:	881a      	ldrh	r2, [r3, #0]
 800682a:	182b      	adds	r3, r5, r0
 800682c:	19db      	adds	r3, r3, r7
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	18d2      	adds	r2, r2, r3
 8006832:	213a      	movs	r1, #58	@ 0x3a
 8006834:	180b      	adds	r3, r1, r0
 8006836:	19db      	adds	r3, r3, r7
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	18d2      	adds	r2, r2, r3
					+ parametersLength], AT_ENDING, endingLength);
 800683c:	2338      	movs	r3, #56	@ 0x38
 800683e:	0001      	movs	r1, r0
 8006840:	185b      	adds	r3, r3, r1
 8006842:	19db      	adds	r3, r3, r7
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8006848:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800684a:	18d0      	adds	r0, r2, r3
	memcpy(
 800684c:	2336      	movs	r3, #54	@ 0x36
 800684e:	000c      	movs	r4, r1
 8006850:	185b      	adds	r3, r3, r1
 8006852:	19db      	adds	r3, r3, r7
 8006854:	881a      	ldrh	r2, [r3, #0]
 8006856:	4b0e      	ldr	r3, [pc, #56]	@ (8006890 <espAt_sendParams+0x3ac>)
 8006858:	0019      	movs	r1, r3
 800685a:	f001 f9ff 	bl	8007c5c <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 800685e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006860:	2234      	movs	r2, #52	@ 0x34
 8006862:	1913      	adds	r3, r2, r4
 8006864:	19db      	adds	r3, r3, r7
 8006866:	881a      	ldrh	r2, [r3, #0]
 8006868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800686a:	0019      	movs	r1, r3
 800686c:	f7ff fd46 	bl	80062fc <uartSend>
 8006870:	0003      	movs	r3, r0
 8006872:	46c5      	mov	sp, r8

}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b022      	add	sp, #136	@ 0x88
 800687a:	bc80      	pop	{r7}
 800687c:	46b8      	mov	r8, r7
 800687e:	bcf0      	pop	{r4, r5, r6, r7}
 8006880:	bc08      	pop	{r3}
 8006882:	b002      	add	sp, #8
 8006884:	4718      	bx	r3
 8006886:	46c0      	nop			@ (mov r8, r8)
 8006888:	08008ad8 	.word	0x08008ad8
 800688c:	08008ae0 	.word	0x08008ae0
 8006890:	08008adc 	.word	0x08008adc

08006894 <espAt_sendString>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendString(espat_radio_t *radio, char *command,
		char *string) {
 8006894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006896:	46c6      	mov	lr, r8
 8006898:	b500      	push	{lr}
 800689a:	b090      	sub	sp, #64	@ 0x40
 800689c:	af00      	add	r7, sp, #0
 800689e:	6278      	str	r0, [r7, #36]	@ 0x24
 80068a0:	6239      	str	r1, [r7, #32]
 80068a2:	61fa      	str	r2, [r7, #28]
 80068a4:	466b      	mov	r3, sp
 80068a6:	4698      	mov	r8, r3

	//check if command and string are valid
	if (command == NULL || string == NULL)
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <espAt_sendString+0x20>
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <espAt_sendString+0x24>
		return ESPAT_STATE_ERR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e139      	b.n	8006b2c <espAt_sendString+0x298>

	uint16_t prefixLength = strlen(AT_PREFIX);
 80068b8:	2326      	movs	r3, #38	@ 0x26
 80068ba:	2618      	movs	r6, #24
 80068bc:	199b      	adds	r3, r3, r6
 80068be:	19db      	adds	r3, r3, r7
 80068c0:	2203      	movs	r2, #3
 80068c2:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	0018      	movs	r0, r3
 80068c8:	f7f9 fc1c 	bl	8000104 <strlen>
 80068cc:	0002      	movs	r2, r0
 80068ce:	2124      	movs	r1, #36	@ 0x24
 80068d0:	198b      	adds	r3, r1, r6
 80068d2:	19db      	adds	r3, r3, r7
 80068d4:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 80068d6:	2222      	movs	r2, #34	@ 0x22
 80068d8:	1993      	adds	r3, r2, r6
 80068da:	19db      	adds	r3, r3, r7
 80068dc:	2201      	movs	r2, #1
 80068de:	801a      	strh	r2, [r3, #0]
	uint16_t quoteLength = strlen(AT_STRING_QUOTE_MARK);
 80068e0:	2220      	movs	r2, #32
 80068e2:	1993      	adds	r3, r2, r6
 80068e4:	19db      	adds	r3, r3, r7
 80068e6:	2201      	movs	r2, #1
 80068e8:	801a      	strh	r2, [r3, #0]
	uint16_t stringLength = strlen(string);
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7f9 fc09 	bl	8000104 <strlen>
 80068f2:	0002      	movs	r2, r0
 80068f4:	231e      	movs	r3, #30
 80068f6:	0031      	movs	r1, r6
 80068f8:	185b      	adds	r3, r3, r1
 80068fa:	19db      	adds	r3, r3, r7
 80068fc:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 80068fe:	221c      	movs	r2, #28
 8006900:	0016      	movs	r6, r2
 8006902:	1853      	adds	r3, r2, r1
 8006904:	19db      	adds	r3, r3, r7
 8006906:	2202      	movs	r2, #2
 8006908:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 800690a:	2326      	movs	r3, #38	@ 0x26
 800690c:	0008      	movs	r0, r1
 800690e:	185b      	adds	r3, r3, r1
 8006910:	19da      	adds	r2, r3, r7
 8006912:	2124      	movs	r1, #36	@ 0x24
 8006914:	180b      	adds	r3, r1, r0
 8006916:	19db      	adds	r3, r3, r7
 8006918:	8812      	ldrh	r2, [r2, #0]
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	18d3      	adds	r3, r2, r3
 800691e:	b29a      	uxth	r2, r3
 8006920:	2022      	movs	r0, #34	@ 0x22
 8006922:	2118      	movs	r1, #24
 8006924:	1843      	adds	r3, r0, r1
 8006926:	19db      	adds	r3, r3, r7
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	18d3      	adds	r3, r2, r3
 800692c:	b29a      	uxth	r2, r3
			+ (quoteLength * 2) + stringLength + endingLength;
 800692e:	2020      	movs	r0, #32
 8006930:	1840      	adds	r0, r0, r1
 8006932:	19c3      	adds	r3, r0, r7
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	18db      	adds	r3, r3, r3
 8006938:	b29b      	uxth	r3, r3
 800693a:	18d3      	adds	r3, r2, r3
 800693c:	b29a      	uxth	r2, r3
 800693e:	211e      	movs	r1, #30
 8006940:	2318      	movs	r3, #24
 8006942:	18c9      	adds	r1, r1, r3
 8006944:	19cb      	adds	r3, r1, r7
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	18d3      	adds	r3, r2, r3
 800694a:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 800694c:	201a      	movs	r0, #26
 800694e:	2318      	movs	r3, #24
 8006950:	18c2      	adds	r2, r0, r3
 8006952:	19d3      	adds	r3, r2, r7
 8006954:	0032      	movs	r2, r6
 8006956:	2618      	movs	r6, #24
 8006958:	1992      	adds	r2, r2, r6
 800695a:	19d2      	adds	r2, r2, r7
 800695c:	8812      	ldrh	r2, [r2, #0]
 800695e:	188a      	adds	r2, r1, r2
 8006960:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 8006962:	1983      	adds	r3, r0, r6
 8006964:	19db      	adds	r3, r3, r7
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	001a      	movs	r2, r3
 800696a:	3a01      	subs	r2, #1
 800696c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	60fa      	str	r2, [r7, #12]
 8006974:	68b8      	ldr	r0, [r7, #8]
 8006976:	68f9      	ldr	r1, [r7, #12]
 8006978:	0006      	movs	r6, r0
 800697a:	0f72      	lsrs	r2, r6, #29
 800697c:	000e      	movs	r6, r1
 800697e:	00f6      	lsls	r6, r6, #3
 8006980:	617e      	str	r6, [r7, #20]
 8006982:	697e      	ldr	r6, [r7, #20]
 8006984:	4316      	orrs	r6, r2
 8006986:	617e      	str	r6, [r7, #20]
 8006988:	0006      	movs	r6, r0
 800698a:	00f6      	lsls	r6, r6, #3
 800698c:	613e      	str	r6, [r7, #16]
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	2200      	movs	r2, #0
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	6838      	ldr	r0, [r7, #0]
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	0006      	movs	r6, r0
 800699a:	0f72      	lsrs	r2, r6, #29
 800699c:	000e      	movs	r6, r1
 800699e:	00f5      	lsls	r5, r6, #3
 80069a0:	4315      	orrs	r5, r2
 80069a2:	0006      	movs	r6, r0
 80069a4:	00f4      	lsls	r4, r6, #3
 80069a6:	3307      	adds	r3, #7
 80069a8:	08db      	lsrs	r3, r3, #3
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	466e      	mov	r6, sp
 80069ae:	1af6      	subs	r6, r6, r3
 80069b0:	46b5      	mov	sp, r6
 80069b2:	466b      	mov	r3, sp
 80069b4:	3300      	adds	r3, #0
 80069b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(buffer, ' ', bufferSize);
 80069b8:	221a      	movs	r2, #26
 80069ba:	2618      	movs	r6, #24
 80069bc:	1993      	adds	r3, r2, r6
 80069be:	19db      	adds	r3, r3, r7
 80069c0:	881a      	ldrh	r2, [r3, #0]
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	2120      	movs	r1, #32
 80069c6:	0018      	movs	r0, r3
 80069c8:	f001 f916 	bl	8007bf8 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 80069cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069ce:	2426      	movs	r4, #38	@ 0x26
 80069d0:	19a3      	adds	r3, r4, r6
 80069d2:	19db      	adds	r3, r3, r7
 80069d4:	881a      	ldrh	r2, [r3, #0]
 80069d6:	4b59      	ldr	r3, [pc, #356]	@ (8006b3c <espAt_sendString+0x2a8>)
 80069d8:	0019      	movs	r1, r3
 80069da:	f001 f93f 	bl	8007c5c <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 80069de:	19a3      	adds	r3, r4, r6
 80069e0:	19db      	adds	r3, r3, r7
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e6:	18d0      	adds	r0, r2, r3
 80069e8:	2524      	movs	r5, #36	@ 0x24
 80069ea:	19ab      	adds	r3, r5, r6
 80069ec:	19db      	adds	r3, r3, r7
 80069ee:	881a      	ldrh	r2, [r3, #0]
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	0019      	movs	r1, r3
 80069f4:	f001 f932 	bl	8007c5c <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 80069f8:	0031      	movs	r1, r6
 80069fa:	1863      	adds	r3, r4, r1
 80069fc:	19db      	adds	r3, r3, r7
 80069fe:	881a      	ldrh	r2, [r3, #0]
 8006a00:	186b      	adds	r3, r5, r1
 8006a02:	19db      	adds	r3, r3, r7
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	18d3      	adds	r3, r2, r3
 8006a08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a0a:	18d0      	adds	r0, r2, r3
 8006a0c:	2222      	movs	r2, #34	@ 0x22
 8006a0e:	0016      	movs	r6, r2
 8006a10:	1853      	adds	r3, r2, r1
 8006a12:	19db      	adds	r3, r3, r7
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	4b4a      	ldr	r3, [pc, #296]	@ (8006b40 <espAt_sendString+0x2ac>)
 8006a18:	0019      	movs	r1, r3
 8006a1a:	f001 f91f 	bl	8007c5c <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8006a1e:	2118      	movs	r1, #24
 8006a20:	1863      	adds	r3, r4, r1
 8006a22:	19db      	adds	r3, r3, r7
 8006a24:	881a      	ldrh	r2, [r3, #0]
 8006a26:	186b      	adds	r3, r5, r1
 8006a28:	19db      	adds	r3, r3, r7
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	18d2      	adds	r2, r2, r3
 8006a2e:	0030      	movs	r0, r6
 8006a30:	1843      	adds	r3, r0, r1
 8006a32:	19db      	adds	r3, r3, r7
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	18d3      	adds	r3, r2, r3
 8006a38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a3a:	18d0      	adds	r0, r2, r3
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	001e      	movs	r6, r3
 8006a40:	185b      	adds	r3, r3, r1
 8006a42:	19db      	adds	r3, r3, r7
 8006a44:	881a      	ldrh	r2, [r3, #0]
 8006a46:	4b3f      	ldr	r3, [pc, #252]	@ (8006b44 <espAt_sendString+0x2b0>)
 8006a48:	0019      	movs	r1, r3
 8006a4a:	f001 f907 	bl	8007c5c <memcpy>
	AT_STRING_QUOTE_MARK, quoteLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8006a4e:	2118      	movs	r1, #24
 8006a50:	1863      	adds	r3, r4, r1
 8006a52:	19db      	adds	r3, r3, r7
 8006a54:	881a      	ldrh	r2, [r3, #0]
 8006a56:	186b      	adds	r3, r5, r1
 8006a58:	19db      	adds	r3, r3, r7
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	18d2      	adds	r2, r2, r3
 8006a5e:	2022      	movs	r0, #34	@ 0x22
 8006a60:	1843      	adds	r3, r0, r1
 8006a62:	19db      	adds	r3, r3, r7
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	18d2      	adds	r2, r2, r3
					+ quoteLength], string, stringLength);
 8006a68:	0033      	movs	r3, r6
 8006a6a:	1858      	adds	r0, r3, r1
 8006a6c:	19c3      	adds	r3, r0, r7
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8006a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a74:	18d0      	adds	r0, r2, r3
	memcpy(
 8006a76:	211e      	movs	r1, #30
 8006a78:	000e      	movs	r6, r1
 8006a7a:	2318      	movs	r3, #24
 8006a7c:	18ca      	adds	r2, r1, r3
 8006a7e:	19d3      	adds	r3, r2, r7
 8006a80:	881a      	ldrh	r2, [r3, #0]
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	0019      	movs	r1, r3
 8006a86:	f001 f8e9 	bl	8007c5c <memcpy>
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8006a8a:	2118      	movs	r1, #24
 8006a8c:	1863      	adds	r3, r4, r1
 8006a8e:	19db      	adds	r3, r3, r7
 8006a90:	881a      	ldrh	r2, [r3, #0]
 8006a92:	186b      	adds	r3, r5, r1
 8006a94:	19db      	adds	r3, r3, r7
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	18d2      	adds	r2, r2, r3
 8006a9a:	2022      	movs	r0, #34	@ 0x22
 8006a9c:	1843      	adds	r3, r0, r1
 8006a9e:	19db      	adds	r3, r3, r7
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	18d2      	adds	r2, r2, r3
					+ quoteLength + stringLength], AT_STRING_QUOTE_MARK,
 8006aa4:	2320      	movs	r3, #32
 8006aa6:	0008      	movs	r0, r1
 8006aa8:	185b      	adds	r3, r3, r1
 8006aaa:	19db      	adds	r3, r3, r7
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	18d2      	adds	r2, r2, r3
 8006ab0:	0031      	movs	r1, r6
 8006ab2:	180e      	adds	r6, r1, r0
 8006ab4:	19f3      	adds	r3, r6, r7
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8006aba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006abc:	18d0      	adds	r0, r2, r3
	memcpy(
 8006abe:	000e      	movs	r6, r1
 8006ac0:	2318      	movs	r3, #24
 8006ac2:	18ca      	adds	r2, r1, r3
 8006ac4:	19d3      	adds	r3, r2, r7
 8006ac6:	881a      	ldrh	r2, [r3, #0]
 8006ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8006b44 <espAt_sendString+0x2b0>)
 8006aca:	0019      	movs	r1, r3
 8006acc:	f001 f8c6 	bl	8007c5c <memcpy>
			stringLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8006ad0:	2118      	movs	r1, #24
 8006ad2:	1863      	adds	r3, r4, r1
 8006ad4:	19db      	adds	r3, r3, r7
 8006ad6:	881a      	ldrh	r2, [r3, #0]
 8006ad8:	186b      	adds	r3, r5, r1
 8006ada:	19db      	adds	r3, r3, r7
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	18d2      	adds	r2, r2, r3
 8006ae0:	2022      	movs	r0, #34	@ 0x22
 8006ae2:	1843      	adds	r3, r0, r1
 8006ae4:	19db      	adds	r3, r3, r7
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	18d2      	adds	r2, r2, r3
					+ (quoteLength * 2) + stringLength], AT_ENDING,
 8006aea:	2320      	movs	r3, #32
 8006aec:	0008      	movs	r0, r1
 8006aee:	185b      	adds	r3, r3, r1
 8006af0:	19db      	adds	r3, r3, r7
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	18d2      	adds	r2, r2, r3
 8006af8:	0031      	movs	r1, r6
 8006afa:	0004      	movs	r4, r0
 8006afc:	180b      	adds	r3, r1, r0
 8006afe:	19db      	adds	r3, r3, r7
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8006b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b06:	18d0      	adds	r0, r2, r3
	memcpy(
 8006b08:	231c      	movs	r3, #28
 8006b0a:	191b      	adds	r3, r3, r4
 8006b0c:	19db      	adds	r3, r3, r7
 8006b0e:	881a      	ldrh	r2, [r3, #0]
 8006b10:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <espAt_sendString+0x2b4>)
 8006b12:	0019      	movs	r1, r3
 8006b14:	f001 f8a2 	bl	8007c5c <memcpy>
			endingLength);

	return uartSend(&radio->espUart, buffer, bufferSize);
 8006b18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b1a:	221a      	movs	r2, #26
 8006b1c:	1913      	adds	r3, r2, r4
 8006b1e:	19db      	adds	r3, r3, r7
 8006b20:	881a      	ldrh	r2, [r3, #0]
 8006b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b24:	0019      	movs	r1, r3
 8006b26:	f7ff fbe9 	bl	80062fc <uartSend>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	46c5      	mov	sp, r8

}
 8006b2e:	0018      	movs	r0, r3
 8006b30:	46bd      	mov	sp, r7
 8006b32:	b010      	add	sp, #64	@ 0x40
 8006b34:	bc80      	pop	{r7}
 8006b36:	46b8      	mov	r8, r7
 8006b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3a:	46c0      	nop			@ (mov r8, r8)
 8006b3c:	08008ad8 	.word	0x08008ad8
 8006b40:	08008ae0 	.word	0x08008ae0
 8006b44:	08008ae4 	.word	0x08008ae4
 8006b48:	08008adc 	.word	0x08008adc

08006b4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006b4c:	b590      	push	{r4, r7, lr}
 8006b4e:	b08b      	sub	sp, #44	@ 0x2c
 8006b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b52:	2414      	movs	r4, #20
 8006b54:	193b      	adds	r3, r7, r4
 8006b56:	0018      	movs	r0, r3
 8006b58:	2314      	movs	r3, #20
 8006b5a:	001a      	movs	r2, r3
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	f001 f84b 	bl	8007bf8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b62:	4b5d      	ldr	r3, [pc, #372]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b66:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006b68:	2104      	movs	r1, #4
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b72:	2204      	movs	r2, #4
 8006b74:	4013      	ands	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b7a:	4b57      	ldr	r3, [pc, #348]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b7e:	4b56      	ldr	r3, [pc, #344]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006b80:	2101      	movs	r1, #1
 8006b82:	430a      	orrs	r2, r1
 8006b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b86:	4b54      	ldr	r3, [pc, #336]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b92:	4b51      	ldr	r3, [pc, #324]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b96:	4b50      	ldr	r3, [pc, #320]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006b98:	2102      	movs	r1, #2
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006baa:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bae:	4b4a      	ldr	r3, [pc, #296]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006bb0:	2108      	movs	r1, #8
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8006bb6:	4b48      	ldr	r3, [pc, #288]	@ (8006cd8 <MX_GPIO_Init+0x18c>)
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bba:	2208      	movs	r2, #8
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	607b      	str	r3, [r7, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8006bc2:	23a0      	movs	r3, #160	@ 0xa0
 8006bc4:	05db      	lsls	r3, r3, #23
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2120      	movs	r1, #32
 8006bca:	0018      	movs	r0, r3
 8006bcc:	f7fc fadf 	bl	800318e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_BOOT_Pin|ESP_RST_Pin, GPIO_PIN_RESET);
 8006bd0:	23c0      	movs	r3, #192	@ 0xc0
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	4841      	ldr	r0, [pc, #260]	@ (8006cdc <MX_GPIO_Init+0x190>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	0019      	movs	r1, r3
 8006bda:	f7fc fad8 	bl	800318e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KBD_ROW1_Pin|KBD_ROW2_Pin|KBD_ROW3_Pin|KBD_ROW4_Pin
 8006bde:	4b40      	ldr	r3, [pc, #256]	@ (8006ce0 <MX_GPIO_Init+0x194>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	213e      	movs	r1, #62	@ 0x3e
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7fc fad2 	bl	800318e <HAL_GPIO_WritePin>
                          |KBD_ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MUS_FWD_Pin MUS_BCK_Pin MUS_DPI_Pin MUS_PRC_Pin
                           MUS_HOME_Pin MUS_LB_Pin MUS_MB_Pin MUS_RB_Pin
                           MUS_UP_Pin MUS_DN_Pin */
  GPIO_InitStruct.Pin = MUS_FWD_Pin|MUS_BCK_Pin|MUS_DPI_Pin|MUS_PRC_Pin
 8006bea:	193b      	adds	r3, r7, r4
 8006bec:	4a3d      	ldr	r2, [pc, #244]	@ (8006ce4 <MX_GPIO_Init+0x198>)
 8006bee:	601a      	str	r2, [r3, #0]
                          |MUS_HOME_Pin|MUS_LB_Pin|MUS_MB_Pin|MUS_RB_Pin
                          |MUS_UP_Pin|MUS_DN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bf0:	193b      	adds	r3, r7, r4
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf6:	193b      	adds	r3, r7, r4
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bfc:	193b      	adds	r3, r7, r4
 8006bfe:	4a3a      	ldr	r2, [pc, #232]	@ (8006ce8 <MX_GPIO_Init+0x19c>)
 8006c00:	0019      	movs	r1, r3
 8006c02:	0010      	movs	r0, r2
 8006c04:	f7fc f872 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8006c08:	193b      	adds	r3, r7, r4
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006c0e:	193b      	adds	r3, r7, r4
 8006c10:	2288      	movs	r2, #136	@ 0x88
 8006c12:	0352      	lsls	r2, r2, #13
 8006c14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c16:	193b      	adds	r3, r7, r4
 8006c18:	2202      	movs	r2, #2
 8006c1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8006c1c:	193a      	adds	r2, r7, r4
 8006c1e:	23a0      	movs	r3, #160	@ 0xa0
 8006c20:	05db      	lsls	r3, r3, #23
 8006c22:	0011      	movs	r1, r2
 8006c24:	0018      	movs	r0, r3
 8006c26:	f7fc f861 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8006c2a:	193b      	adds	r3, r7, r4
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c30:	193b      	adds	r3, r7, r4
 8006c32:	2201      	movs	r2, #1
 8006c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c36:	193b      	adds	r3, r7, r4
 8006c38:	2200      	movs	r2, #0
 8006c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c3c:	193b      	adds	r3, r7, r4
 8006c3e:	2200      	movs	r2, #0
 8006c40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8006c42:	193a      	adds	r2, r7, r4
 8006c44:	23a0      	movs	r3, #160	@ 0xa0
 8006c46:	05db      	lsls	r3, r3, #23
 8006c48:	0011      	movs	r1, r2
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f7fc f84e 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_COL1_Pin KBD_COL2_Pin KBD_COL10_Pin KBD_COL3_Pin
                           KBD_COL4_Pin KBD_COL5_Pin KBD_COL6_Pin KBD_COL7_Pin
                           KBD_COL8_Pin KBD_COL9_Pin */
  GPIO_InitStruct.Pin = KBD_COL1_Pin|KBD_COL2_Pin|KBD_COL10_Pin|KBD_COL3_Pin
 8006c50:	193b      	adds	r3, r7, r4
 8006c52:	4a26      	ldr	r2, [pc, #152]	@ (8006cec <MX_GPIO_Init+0x1a0>)
 8006c54:	601a      	str	r2, [r3, #0]
                          |KBD_COL4_Pin|KBD_COL5_Pin|KBD_COL6_Pin|KBD_COL7_Pin
                          |KBD_COL8_Pin|KBD_COL9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c56:	193b      	adds	r3, r7, r4
 8006c58:	2200      	movs	r2, #0
 8006c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5c:	193b      	adds	r3, r7, r4
 8006c5e:	2200      	movs	r2, #0
 8006c60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c62:	193b      	adds	r3, r7, r4
 8006c64:	4a1d      	ldr	r2, [pc, #116]	@ (8006cdc <MX_GPIO_Init+0x190>)
 8006c66:	0019      	movs	r1, r3
 8006c68:	0010      	movs	r0, r2
 8006c6a:	f7fc f83f 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_BOOT_Pin ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_BOOT_Pin|ESP_RST_Pin;
 8006c6e:	0021      	movs	r1, r4
 8006c70:	187b      	adds	r3, r7, r1
 8006c72:	22c0      	movs	r2, #192	@ 0xc0
 8006c74:	0212      	lsls	r2, r2, #8
 8006c76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c78:	000c      	movs	r4, r1
 8006c7a:	193b      	adds	r3, r7, r4
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c80:	193b      	adds	r3, r7, r4
 8006c82:	2200      	movs	r2, #0
 8006c84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c86:	193b      	adds	r3, r7, r4
 8006c88:	2200      	movs	r2, #0
 8006c8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c8c:	193b      	adds	r3, r7, r4
 8006c8e:	4a13      	ldr	r2, [pc, #76]	@ (8006cdc <MX_GPIO_Init+0x190>)
 8006c90:	0019      	movs	r1, r3
 8006c92:	0010      	movs	r0, r2
 8006c94:	f7fc f82a 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_ROW1_Pin KBD_ROW2_Pin KBD_ROW3_Pin KBD_ROW4_Pin
                           KBD_ROW5_Pin */
  GPIO_InitStruct.Pin = KBD_ROW1_Pin|KBD_ROW2_Pin|KBD_ROW3_Pin|KBD_ROW4_Pin
 8006c98:	0021      	movs	r1, r4
 8006c9a:	187b      	adds	r3, r7, r1
 8006c9c:	223e      	movs	r2, #62	@ 0x3e
 8006c9e:	601a      	str	r2, [r3, #0]
                          |KBD_ROW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ca0:	187b      	adds	r3, r7, r1
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca6:	187b      	adds	r3, r7, r1
 8006ca8:	2200      	movs	r2, #0
 8006caa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cac:	187b      	adds	r3, r7, r1
 8006cae:	2200      	movs	r2, #0
 8006cb0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cb2:	187b      	adds	r3, r7, r1
 8006cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce0 <MX_GPIO_Init+0x194>)
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	0010      	movs	r0, r2
 8006cba:	f7fc f817 	bl	8002cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	2005      	movs	r0, #5
 8006cc4:	f7fb fd00 	bl	80026c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8006cc8:	2005      	movs	r0, #5
 8006cca:	f7fb fd12 	bl	80026f2 <HAL_NVIC_EnableIRQ>

}
 8006cce:	46c0      	nop			@ (mov r8, r8)
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b00b      	add	sp, #44	@ 0x2c
 8006cd4:	bd90      	pop	{r4, r7, pc}
 8006cd6:	46c0      	nop			@ (mov r8, r8)
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	50000400 	.word	0x50000400
 8006ce0:	50000c00 	.word	0x50000c00
 8006ce4:	0000ffc0 	.word	0x0000ffc0
 8006ce8:	50000800 	.word	0x50000800
 8006cec:	000007fe 	.word	0x000007fe

08006cf0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d68 <MX_I2C1_Init+0x78>)
 8006cf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8006cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <MX_I2C1_Init+0x7c>)
 8006cfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006d00:	4b18      	ldr	r3, [pc, #96]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006d06:	4b17      	ldr	r3, [pc, #92]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006d0c:	4b15      	ldr	r3, [pc, #84]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006d12:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006d18:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006d1e:	4b11      	ldr	r3, [pc, #68]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006d24:	4b0f      	ldr	r3, [pc, #60]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f7fc fa7f 	bl	8003230 <HAL_I2C_Init>
 8006d32:	1e03      	subs	r3, r0, #0
 8006d34:	d001      	beq.n	8006d3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006d36:	f000 fcab 	bl	8007690 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f7fd f87a 	bl	8003e38 <HAL_I2CEx_ConfigAnalogFilter>
 8006d44:	1e03      	subs	r3, r0, #0
 8006d46:	d001      	beq.n	8006d4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006d48:	f000 fca2 	bl	8007690 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006d4c:	4b05      	ldr	r3, [pc, #20]	@ (8006d64 <MX_I2C1_Init+0x74>)
 8006d4e:	2100      	movs	r1, #0
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7fd f8bd 	bl	8003ed0 <HAL_I2CEx_ConfigDigitalFilter>
 8006d56:	1e03      	subs	r3, r0, #0
 8006d58:	d001      	beq.n	8006d5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006d5a:	f000 fc99 	bl	8007690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006d5e:	46c0      	nop			@ (mov r8, r8)
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000090 	.word	0x20000090
 8006d68:	40005400 	.word	0x40005400
 8006d6c:	00c12166 	.word	0x00c12166

08006d70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006d70:	b590      	push	{r4, r7, lr}
 8006d72:	b097      	sub	sp, #92	@ 0x5c
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d78:	2344      	movs	r3, #68	@ 0x44
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	2314      	movs	r3, #20
 8006d80:	001a      	movs	r2, r3
 8006d82:	2100      	movs	r1, #0
 8006d84:	f000 ff38 	bl	8007bf8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d88:	2410      	movs	r4, #16
 8006d8a:	193b      	adds	r3, r7, r4
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	2334      	movs	r3, #52	@ 0x34
 8006d90:	001a      	movs	r2, r3
 8006d92:	2100      	movs	r1, #0
 8006d94:	f000 ff30 	bl	8007bf8 <memset>
  if(i2cHandle->Instance==I2C1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a23      	ldr	r2, [pc, #140]	@ (8006e2c <HAL_I2C_MspInit+0xbc>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d13f      	bne.n	8006e22 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006da2:	193b      	adds	r3, r7, r4
 8006da4:	2220      	movs	r2, #32
 8006da6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006da8:	193b      	adds	r3, r7, r4
 8006daa:	2200      	movs	r2, #0
 8006dac:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006dae:	193b      	adds	r3, r7, r4
 8006db0:	0018      	movs	r0, r3
 8006db2:	f7fd fde9 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8006db6:	1e03      	subs	r3, r0, #0
 8006db8:	d001      	beq.n	8006dbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006dba:	f000 fc69 	bl	8007690 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8006e30 <HAL_I2C_MspInit+0xc0>)
 8006dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e30 <HAL_I2C_MspInit+0xc0>)
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006dca:	4b19      	ldr	r3, [pc, #100]	@ (8006e30 <HAL_I2C_MspInit+0xc0>)
 8006dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dce:	2201      	movs	r2, #1
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006dd6:	2144      	movs	r1, #68	@ 0x44
 8006dd8:	187b      	adds	r3, r7, r1
 8006dda:	22c0      	movs	r2, #192	@ 0xc0
 8006ddc:	00d2      	lsls	r2, r2, #3
 8006dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006de0:	187b      	adds	r3, r7, r1
 8006de2:	2212      	movs	r2, #18
 8006de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de6:	187b      	adds	r3, r7, r1
 8006de8:	2200      	movs	r2, #0
 8006dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dec:	187b      	adds	r3, r7, r1
 8006dee:	2200      	movs	r2, #0
 8006df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006df2:	187b      	adds	r3, r7, r1
 8006df4:	2206      	movs	r2, #6
 8006df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006df8:	187a      	adds	r2, r7, r1
 8006dfa:	23a0      	movs	r3, #160	@ 0xa0
 8006dfc:	05db      	lsls	r3, r3, #23
 8006dfe:	0011      	movs	r1, r2
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7fb ff73 	bl	8002cec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e06:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <HAL_I2C_MspInit+0xc0>)
 8006e08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e0a:	4b09      	ldr	r3, [pc, #36]	@ (8006e30 <HAL_I2C_MspInit+0xc0>)
 8006e0c:	2180      	movs	r1, #128	@ 0x80
 8006e0e:	0389      	lsls	r1, r1, #14
 8006e10:	430a      	orrs	r2, r1
 8006e12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006e14:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <HAL_I2C_MspInit+0xc0>)
 8006e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e18:	2380      	movs	r3, #128	@ 0x80
 8006e1a:	039b      	lsls	r3, r3, #14
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b017      	add	sp, #92	@ 0x5c
 8006e28:	bd90      	pop	{r4, r7, pc}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	40005400 	.word	0x40005400
 8006e30:	40021000 	.word	0x40021000

08006e34 <i2cSend>:
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
lsm6ds_state_t i2cSend(lsm6ds_serialInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e36:	b08b      	sub	sp, #44	@ 0x2c
 8006e38:	af04      	add	r7, sp, #16
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	0008      	movs	r0, r1
 8006e3e:	0011      	movs	r1, r2
 8006e40:	607b      	str	r3, [r7, #4]
 8006e42:	260a      	movs	r6, #10
 8006e44:	19bb      	adds	r3, r7, r6
 8006e46:	1c02      	adds	r2, r0, #0
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	2508      	movs	r5, #8
 8006e4c:	197b      	adds	r3, r7, r5
 8006e4e:	1c0a      	adds	r2, r1, #0
 8006e50:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Write(i2c->i2c, devAddr, memAddr,
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2117      	movs	r1, #23
 8006e60:	187c      	adds	r4, r7, r1
 8006e62:	1979      	adds	r1, r7, r5
 8006e64:	880d      	ldrh	r5, [r1, #0]
 8006e66:	19b9      	adds	r1, r7, r6
 8006e68:	8809      	ldrh	r1, [r1, #0]
 8006e6a:	9302      	str	r3, [sp, #8]
 8006e6c:	9201      	str	r2, [sp, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2301      	movs	r3, #1
 8006e74:	002a      	movs	r2, r5
 8006e76:	f7fc fa81 	bl	800337c <HAL_I2C_Mem_Write>
 8006e7a:	0003      	movs	r3, r0
 8006e7c:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->sendTimeout);

	if (state == HAL_OK)
 8006e7e:	2117      	movs	r1, #23
 8006e80:	187b      	adds	r3, r7, r1
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <i2cSend+0x58>
		return LSM6DS_STATE_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e007      	b.n	8006e9c <i2cSend+0x68>
	else if (state == HAL_TIMEOUT)
 8006e8c:	2317      	movs	r3, #23
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d101      	bne.n	8006e9a <i2cSend+0x66>
		return LSM6DS_STATE_TIMEOUT;
 8006e96:	2302      	movs	r3, #2
 8006e98:	e000      	b.n	8006e9c <i2cSend+0x68>
	else
		return LSM6DS_STATE_ERR;
 8006e9a:	2301      	movs	r3, #1
}
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b007      	add	sp, #28
 8006ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ea4 <i2cReceive>:

//port
lsm6ds_state_t i2cReceive(lsm6ds_serialInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 8006ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea6:	b08b      	sub	sp, #44	@ 0x2c
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	0008      	movs	r0, r1
 8006eae:	0011      	movs	r1, r2
 8006eb0:	607b      	str	r3, [r7, #4]
 8006eb2:	260a      	movs	r6, #10
 8006eb4:	19bb      	adds	r3, r7, r6
 8006eb6:	1c02      	adds	r2, r0, #0
 8006eb8:	801a      	strh	r2, [r3, #0]
 8006eba:	2508      	movs	r5, #8
 8006ebc:	197b      	adds	r3, r7, r5
 8006ebe:	1c0a      	adds	r2, r1, #0
 8006ec0:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Read(i2c->i2c, devAddr, memAddr,
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2117      	movs	r1, #23
 8006ed0:	187c      	adds	r4, r7, r1
 8006ed2:	1979      	adds	r1, r7, r5
 8006ed4:	880d      	ldrh	r5, [r1, #0]
 8006ed6:	19b9      	adds	r1, r7, r6
 8006ed8:	8809      	ldrh	r1, [r1, #0]
 8006eda:	9302      	str	r3, [sp, #8]
 8006edc:	9201      	str	r2, [sp, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	002a      	movs	r2, r5
 8006ee6:	f7fc fb77 	bl	80035d8 <HAL_I2C_Mem_Read>
 8006eea:	0003      	movs	r3, r0
 8006eec:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->receiveTimeout);

	if (state == HAL_OK)
 8006eee:	2117      	movs	r1, #23
 8006ef0:	187b      	adds	r3, r7, r1
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <i2cReceive+0x58>
		return LSM6DS_STATE_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e007      	b.n	8006f0c <i2cReceive+0x68>
	else if (state == HAL_TIMEOUT)
 8006efc:	2317      	movs	r3, #23
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d101      	bne.n	8006f0a <i2cReceive+0x66>
		return LSM6DS_STATE_TIMEOUT;
 8006f06:	2302      	movs	r3, #2
 8006f08:	e000      	b.n	8006f0c <i2cReceive+0x68>
	else
		return LSM6DS_STATE_ERR;
 8006f0a:	2301      	movs	r3, #1
}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b007      	add	sp, #28
 8006f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f14 <modifyReg>:
 * @param: register address
 * @param: bitmask
 * @param: value
 */
lsm6ds_state_t modifyReg(lsm6ds_sensor_t *sensor, uint16_t regAddr,
		uint8_t bitmask, uint16_t value) {
 8006f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f16:	b089      	sub	sp, #36	@ 0x24
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	000c      	movs	r4, r1
 8006f1e:	0010      	movs	r0, r2
 8006f20:	0019      	movs	r1, r3
 8006f22:	230a      	movs	r3, #10
 8006f24:	18fb      	adds	r3, r7, r3
 8006f26:	1c22      	adds	r2, r4, #0
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	2209      	movs	r2, #9
 8006f2c:	18bb      	adds	r3, r7, r2
 8006f2e:	1c02      	adds	r2, r0, #0
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	1dbb      	adds	r3, r7, #6
 8006f34:	1c0a      	adds	r2, r1, #0
 8006f36:	801a      	strh	r2, [r3, #0]

	uint8_t readedReg = 0;
 8006f38:	2516      	movs	r5, #22
 8006f3a:	197b      	adds	r3, r7, r5
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8006f40:	2617      	movs	r6, #23
 8006f42:	19bb      	adds	r3, r7, r6
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]

	//read original register
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr,
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8999      	ldrh	r1, [r3, #12]
 8006f4e:	19bc      	adds	r4, r7, r6
 8006f50:	197d      	adds	r5, r7, r5
 8006f52:	230a      	movs	r3, #10
 8006f54:	18fb      	adds	r3, r7, r3
 8006f56:	881a      	ldrh	r2, [r3, #0]
 8006f58:	2301      	movs	r3, #1
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	002b      	movs	r3, r5
 8006f5e:	f7ff ffa1 	bl	8006ea4 <i2cReceive>
 8006f62:	0003      	movs	r3, r0
 8006f64:	7023      	strb	r3, [r4, #0]
			&readedReg, 1);

	if (state != LSM6DS_STATE_OK)
 8006f66:	19bb      	adds	r3, r7, r6
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <modifyReg+0x60>
		return state;
 8006f6e:	19bb      	adds	r3, r7, r6
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	e02c      	b.n	8006fce <modifyReg+0xba>

	//clear bits corresponding to mask
	readedReg &= ~(bitmask);
 8006f74:	2009      	movs	r0, #9
 8006f76:	183b      	adds	r3, r7, r0
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	b25b      	sxtb	r3, r3
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	b25b      	sxtb	r3, r3
 8006f80:	2116      	movs	r1, #22
 8006f82:	187a      	adds	r2, r7, r1
 8006f84:	7812      	ldrb	r2, [r2, #0]
 8006f86:	b252      	sxtb	r2, r2
 8006f88:	4013      	ands	r3, r2
 8006f8a:	b25b      	sxtb	r3, r3
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	187b      	adds	r3, r7, r1
 8006f90:	701a      	strb	r2, [r3, #0]

	//modify register
	uint8_t regToWrite = readedReg | (bitmask & value);
 8006f92:	1dbb      	adds	r3, r7, #6
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	183a      	adds	r2, r7, r0
 8006f9a:	7812      	ldrb	r2, [r2, #0]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	b25a      	sxtb	r2, r3
 8006fa2:	187b      	adds	r3, r7, r1
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	b25b      	sxtb	r3, r3
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	b25b      	sxtb	r3, r3
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	2415      	movs	r4, #21
 8006fb0:	193b      	adds	r3, r7, r4
 8006fb2:	701a      	strb	r2, [r3, #0]

	//write register
	return i2cSend(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr, &regToWrite,
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8999      	ldrh	r1, [r3, #12]
 8006fba:	193c      	adds	r4, r7, r4
 8006fbc:	230a      	movs	r3, #10
 8006fbe:	18fb      	adds	r3, r7, r3
 8006fc0:	881a      	ldrh	r2, [r3, #0]
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	0023      	movs	r3, r4
 8006fc8:	f7ff ff34 	bl	8006e34 <i2cSend>
 8006fcc:	0003      	movs	r3, r0
			1);

}
 8006fce:	0018      	movs	r0, r3
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b007      	add	sp, #28
 8006fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fd6 <lsm6ds_init>:
 * @param: rxTimeout
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_init(lsm6ds_sensor_t *sensor, uint16_t devAddr,
		I2C_HandleTypeDef *i2c, uint32_t txTimeout, uint32_t rxTimeout) { //port
 8006fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fd8:	b089      	sub	sp, #36	@ 0x24
 8006fda:	af02      	add	r7, sp, #8
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
 8006fe2:	200a      	movs	r0, #10
 8006fe4:	183b      	adds	r3, r7, r0
 8006fe6:	1c0a      	adds	r2, r1, #0
 8006fe8:	801a      	strh	r2, [r3, #0]

	sensor->deviceAddr = devAddr;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	183a      	adds	r2, r7, r0
 8006fee:	8812      	ldrh	r2, [r2, #0]
 8006ff0:	819a      	strh	r2, [r3, #12]
	sensor->lsm6dsI2c.i2c = i2c;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	601a      	str	r2, [r3, #0]
	sensor->lsm6dsI2c.receiveTimeout = rxTimeout;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ffc:	609a      	str	r2, [r3, #8]
	sensor->lsm6dsI2c.sendTimeout = txTimeout;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	605a      	str	r2, [r3, #4]

	memset(&sensor->outGR, 0, sizeof(sensor->outGR));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3314      	adds	r3, #20
 8007008:	2206      	movs	r2, #6
 800700a:	2100      	movs	r1, #0
 800700c:	0018      	movs	r0, r3
 800700e:	f000 fdf3 	bl	8007bf8 <memset>
	memset(&sensor->outXL, 0, sizeof(sensor->outXL));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	330e      	adds	r3, #14
 8007016:	2206      	movs	r2, #6
 8007018:	2100      	movs	r1, #0
 800701a:	0018      	movs	r0, r3
 800701c:	f000 fdec 	bl	8007bf8 <memset>
	sensor->outTemperature = 0;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	835a      	strh	r2, [r3, #26]

	//check communication
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8007026:	2417      	movs	r4, #23
 8007028:	193b      	adds	r3, r7, r4
 800702a:	2201      	movs	r2, #1
 800702c:	701a      	strb	r2, [r3, #0]
	uint8_t receivedWhoIAm = 0;
 800702e:	2616      	movs	r6, #22
 8007030:	19bb      	adds	r3, r7, r6
 8007032:	2200      	movs	r2, #0
 8007034:	701a      	strb	r2, [r3, #0]
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr,
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8999      	ldrh	r1, [r3, #12]
 800703c:	0025      	movs	r5, r4
 800703e:	193c      	adds	r4, r7, r4
 8007040:	19bb      	adds	r3, r7, r6
 8007042:	2201      	movs	r2, #1
 8007044:	9200      	str	r2, [sp, #0]
 8007046:	220f      	movs	r2, #15
 8007048:	f7ff ff2c 	bl	8006ea4 <i2cReceive>
 800704c:	0003      	movs	r3, r0
 800704e:	7023      	strb	r3, [r4, #0]
	LSM6DS_REG_WHO_AM_I, &receivedWhoIAm, 1);
	if (state == LSM6DS_STATE_ERR)
 8007050:	197b      	adds	r3, r7, r5
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <lsm6ds_init+0x86>
		return LSM6DS_STATE_ERR_SERIAL;
 8007058:	2303      	movs	r3, #3
 800705a:	e00f      	b.n	800707c <lsm6ds_init+0xa6>
	else if (state == LSM6DS_STATE_TIMEOUT)
 800705c:	2217      	movs	r2, #23
 800705e:	18bb      	adds	r3, r7, r2
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d102      	bne.n	800706c <lsm6ds_init+0x96>
		return state;
 8007066:	18bb      	adds	r3, r7, r2
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	e007      	b.n	800707c <lsm6ds_init+0xa6>
	else {
		if (receivedWhoIAm == LSM6DS_WHO_AM_I)
 800706c:	2316      	movs	r3, #22
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b6a      	cmp	r3, #106	@ 0x6a
 8007074:	d101      	bne.n	800707a <lsm6ds_init+0xa4>
			return LSM6DS_STATE_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	e000      	b.n	800707c <lsm6ds_init+0xa6>
		else
			return LSM6DS_STATE_WRONG_WHOAMI;
 800707a:	2304      	movs	r3, #4
	}

}
 800707c:	0018      	movs	r0, r3
 800707e:	46bd      	mov	sp, r7
 8007080:	b007      	add	sp, #28
 8007082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007084 <lsm6ds_setInt1Drdy>:
 * @param: sensor
 * @param: LSM6DS_INT1_DRDY_G/XL/DIS
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setInt1Drdy(lsm6ds_sensor_t *sensor, uint8_t interrupt){
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	000a      	movs	r2, r1
 800708e:	1cfb      	adds	r3, r7, #3
 8007090:	701a      	strb	r2, [r3, #0]

	return modifyReg(sensor, LSM6DS_REG_INT1_CTRL, LSM6DS_MASK_INT1_DRDY_G_XL, interrupt);
 8007092:	1cfb      	adds	r3, r7, #3
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	2203      	movs	r2, #3
 800709c:	210d      	movs	r1, #13
 800709e:	f7ff ff39 	bl	8006f14 <modifyReg>
 80070a2:	0003      	movs	r3, r0

}
 80070a4:	0018      	movs	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b002      	add	sp, #8
 80070aa:	bd80      	pop	{r7, pc}

080070ac <lsm6ds_setGROutputDataRate>:
 * @param: sensor
 * @param: LSM6DS_ODR_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGROutputDataRate(lsm6ds_sensor_t *sensor, uint8_t odr) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	000a      	movs	r2, r1
 80070b6:	1cfb      	adds	r3, r7, #3
 80070b8:	701a      	strb	r2, [r3, #0]
	return modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_ODR_G, odr);
 80070ba:	1cfb      	adds	r3, r7, #3
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	22f0      	movs	r2, #240	@ 0xf0
 80070c4:	2111      	movs	r1, #17
 80070c6:	f7ff ff25 	bl	8006f14 <modifyReg>
 80070ca:	0003      	movs	r3, r0

}
 80070cc:	0018      	movs	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b002      	add	sp, #8
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <lsm6ds_setGRLowPass>:
 * @param: sensor
 * @param: LSM6DS_FTYPE_
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGRLowPass(lsm6ds_sensor_t *sensor, uint8_t filter){
 80070d4:	b5b0      	push	{r4, r5, r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	000a      	movs	r2, r1
 80070de:	1cfb      	adds	r3, r7, #3
 80070e0:	701a      	strb	r2, [r3, #0]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 80070e2:	250f      	movs	r5, #15
 80070e4:	197b      	adds	r3, r7, r5
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]

	status = modifyReg(sensor, LSM6DS_REG_CTRL4_C, LSM6DS_MASK_LPF1_SEL_G, LSM6DS_LPF_SEL_G_EN);
 80070ea:	197c      	adds	r4, r7, r5
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	2302      	movs	r3, #2
 80070f0:	2202      	movs	r2, #2
 80070f2:	2113      	movs	r1, #19
 80070f4:	f7ff ff0e 	bl	8006f14 <modifyReg>
 80070f8:	0003      	movs	r3, r0
 80070fa:	7023      	strb	r3, [r4, #0]
	if(status != LSM6DS_STATE_OK)
 80070fc:	197b      	adds	r3, r7, r5
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <lsm6ds_setGRLowPass+0x36>
		return status;
 8007104:	197b      	adds	r3, r7, r5
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	e00d      	b.n	8007126 <lsm6ds_setGRLowPass+0x52>

	status =  modifyReg(sensor, LSM6DS_REG_CTRL6_C, LSM6DS_MASK_FTYPE, filter);
 800710a:	1cfb      	adds	r3, r7, #3
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	250f      	movs	r5, #15
 8007112:	197c      	adds	r4, r7, r5
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	2203      	movs	r2, #3
 8007118:	2115      	movs	r1, #21
 800711a:	f7ff fefb 	bl	8006f14 <modifyReg>
 800711e:	0003      	movs	r3, r0
 8007120:	7023      	strb	r3, [r4, #0]
	return status;
 8007122:	197b      	adds	r3, r7, r5
 8007124:	781b      	ldrb	r3, [r3, #0]

}
 8007126:	0018      	movs	r0, r3
 8007128:	46bd      	mov	sp, r7
 800712a:	b004      	add	sp, #16
 800712c:	bdb0      	pop	{r4, r5, r7, pc}

0800712e <lsm6ds_setGRFullScale>:
 * @param: sensor
 * @param: LSM6DS_FS_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGRFullScale(lsm6ds_sensor_t *sensor, uint8_t fs) {
 800712e:	b5b0      	push	{r4, r5, r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	000a      	movs	r2, r1
 8007138:	1cfb      	adds	r3, r7, #3
 800713a:	701a      	strb	r2, [r3, #0]

	lsm6ds_state_t stat = LSM6DS_STATE_ERR;
 800713c:	250f      	movs	r5, #15
 800713e:	197b      	adds	r3, r7, r5
 8007140:	2201      	movs	r2, #1
 8007142:	701a      	strb	r2, [r3, #0]

	if (fs == LSM6DS_FS_G_125DPS) {
 8007144:	1cfb      	adds	r3, r7, #3
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b02      	cmp	r3, #2
 800714a:	d120      	bne.n	800718e <lsm6ds_setGRFullScale+0x60>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G,
 800714c:	197c      	adds	r4, r7, r5
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	2300      	movs	r3, #0
 8007152:	220c      	movs	r2, #12
 8007154:	2111      	movs	r1, #17
 8007156:	f7ff fedd 	bl	8006f14 <modifyReg>
 800715a:	0003      	movs	r3, r0
 800715c:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_245DPS);
		if (stat != LSM6DS_STATE_OK)
 800715e:	197b      	adds	r3, r7, r5
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <lsm6ds_setGRFullScale+0x3e>
			return stat;
 8007166:	197b      	adds	r3, r7, r5
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	e037      	b.n	80071dc <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125,
 800716c:	250f      	movs	r5, #15
 800716e:	197c      	adds	r4, r7, r5
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	2302      	movs	r3, #2
 8007174:	2202      	movs	r2, #2
 8007176:	2111      	movs	r1, #17
 8007178:	f7ff fecc 	bl	8006f14 <modifyReg>
 800717c:	0003      	movs	r3, r0
 800717e:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_125DPS);
		if (stat != LSM6DS_STATE_OK)
 8007180:	197b      	adds	r3, r7, r5
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d026      	beq.n	80071d6 <lsm6ds_setGRFullScale+0xa8>
			return stat;
 8007188:	197b      	adds	r3, r7, r5
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	e026      	b.n	80071dc <lsm6ds_setGRFullScale+0xae>

	} else {

		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125, 0);
 800718e:	250f      	movs	r5, #15
 8007190:	197c      	adds	r4, r7, r5
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	2300      	movs	r3, #0
 8007196:	2202      	movs	r2, #2
 8007198:	2111      	movs	r1, #17
 800719a:	f7ff febb 	bl	8006f14 <modifyReg>
 800719e:	0003      	movs	r3, r0
 80071a0:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 80071a2:	197b      	adds	r3, r7, r5
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <lsm6ds_setGRFullScale+0x82>
			return stat;
 80071aa:	197b      	adds	r3, r7, r5
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	e015      	b.n	80071dc <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G, fs);
 80071b0:	1cfb      	adds	r3, r7, #3
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	250f      	movs	r5, #15
 80071b8:	197c      	adds	r4, r7, r5
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	220c      	movs	r2, #12
 80071be:	2111      	movs	r1, #17
 80071c0:	f7ff fea8 	bl	8006f14 <modifyReg>
 80071c4:	0003      	movs	r3, r0
 80071c6:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 80071c8:	197b      	adds	r3, r7, r5
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <lsm6ds_setGRFullScale+0xa8>
			return stat;
 80071d0:	197b      	adds	r3, r7, r5
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	e002      	b.n	80071dc <lsm6ds_setGRFullScale+0xae>

	}

	return stat;
 80071d6:	230f      	movs	r3, #15
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	781b      	ldrb	r3, [r3, #0]

}
 80071dc:	0018      	movs	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	b004      	add	sp, #16
 80071e2:	bdb0      	pop	{r4, r5, r7, pc}

080071e4 <lsm6ds_reset>:
 * software reset
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_reset(lsm6ds_sensor_t *sensor) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
	return modifyReg(sensor, LSM6DS_REG_CTRL3_C, LSM6DS_MASK_SW_RESET,
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	2301      	movs	r3, #1
 80071f0:	2201      	movs	r2, #1
 80071f2:	2112      	movs	r1, #18
 80071f4:	f7ff fe8e 	bl	8006f14 <modifyReg>
 80071f8:	0003      	movs	r3, r0
	LSM6DS_SW_RESET);
}
 80071fa:	0018      	movs	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b002      	add	sp, #8
 8007200:	bd80      	pop	{r7, pc}

08007202 <lsm6ds_updateGR>:
 * updates gyro data in sensor struct
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_updateGR(lsm6ds_sensor_t *sensor){
 8007202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007204:	b087      	sub	sp, #28
 8007206:	af02      	add	r7, sp, #8
 8007208:	6078      	str	r0, [r7, #4]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 800720a:	250f      	movs	r5, #15
 800720c:	197b      	adds	r3, r7, r5
 800720e:	2201      	movs	r2, #1
 8007210:	701a      	strb	r2, [r3, #0]
	union{
		uint8_t raw[6];
		int16_t separated[3];
	}outputData;

	memset(&outputData, 0, sizeof(outputData));
 8007212:	2608      	movs	r6, #8
 8007214:	19bb      	adds	r3, r7, r6
 8007216:	2206      	movs	r2, #6
 8007218:	2100      	movs	r1, #0
 800721a:	0018      	movs	r0, r3
 800721c:	f000 fcec 	bl	8007bf8 <memset>

	status = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, LSM6DS_REG_OUTX_L_G, outputData.raw, 6);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	8999      	ldrh	r1, [r3, #12]
 8007226:	197c      	adds	r4, r7, r5
 8007228:	19bb      	adds	r3, r7, r6
 800722a:	2206      	movs	r2, #6
 800722c:	9200      	str	r2, [sp, #0]
 800722e:	2222      	movs	r2, #34	@ 0x22
 8007230:	f7ff fe38 	bl	8006ea4 <i2cReceive>
 8007234:	0003      	movs	r3, r0
 8007236:	7023      	strb	r3, [r4, #0]

	if(status != LSM6DS_STATE_OK)
 8007238:	197b      	adds	r3, r7, r5
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <lsm6ds_updateGR+0x44>
		return status;
 8007240:	197b      	adds	r3, r7, r5
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	e012      	b.n	800726c <lsm6ds_updateGR+0x6a>

	sensor->outGR.x = outputData.separated[0];
 8007246:	2108      	movs	r1, #8
 8007248:	187b      	adds	r3, r7, r1
 800724a:	2200      	movs	r2, #0
 800724c:	5e9a      	ldrsh	r2, [r3, r2]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	829a      	strh	r2, [r3, #20]
	sensor->outGR.y = outputData.separated[1];
 8007252:	187b      	adds	r3, r7, r1
 8007254:	2202      	movs	r2, #2
 8007256:	5e9a      	ldrsh	r2, [r3, r2]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	82da      	strh	r2, [r3, #22]
	sensor->outGR.z = outputData.separated[2];
 800725c:	187b      	adds	r3, r7, r1
 800725e:	2204      	movs	r2, #4
 8007260:	5e9a      	ldrsh	r2, [r3, r2]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	831a      	strh	r2, [r3, #24]


	return status;
 8007266:	230f      	movs	r3, #15
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	781b      	ldrb	r3, [r3, #0]

}
 800726c:	0018      	movs	r0, r3
 800726e:	46bd      	mov	sp, r7
 8007270:	b005      	add	sp, #20
 8007272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007274:	b5b0      	push	{r4, r5, r7, lr}
 8007276:	b08a      	sub	sp, #40	@ 0x28
 8007278:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800727a:	f7fb f8ad 	bl	80023d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800727e:	f000 f995 	bl	80075ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007282:	f7ff fc63 	bl	8006b4c <MX_GPIO_Init>
  MX_DMA_Init();
 8007286:	f7ff f81b 	bl	80062c0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800728a:	f000 fa6b 	bl	8007764 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800728e:	f000 fab7 	bl	8007800 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8007292:	f7ff fd2d 	bl	8006cf0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	lsm6ds_state_t sensorStat = lsm6ds_init(&mems, LSM6DS_ADDR_SA0_L, &hi2c1,
 8007296:	2515      	movs	r5, #21
 8007298:	197c      	adds	r4, r7, r5
 800729a:	4ab3      	ldr	r2, [pc, #716]	@ (8007568 <main+0x2f4>)
 800729c:	48b3      	ldr	r0, [pc, #716]	@ (800756c <main+0x2f8>)
 800729e:	2364      	movs	r3, #100	@ 0x64
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	2364      	movs	r3, #100	@ 0x64
 80072a4:	21d4      	movs	r1, #212	@ 0xd4
 80072a6:	f7ff fe96 	bl	8006fd6 <lsm6ds_init>
 80072aa:	0003      	movs	r3, r0
 80072ac:	7023      	strb	r3, [r4, #0]
			100, 100);

	espAt_init(&bleRadio, &huart1, 50, 2000);
 80072ae:	23fa      	movs	r3, #250	@ 0xfa
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	49af      	ldr	r1, [pc, #700]	@ (8007570 <main+0x2fc>)
 80072b4:	48af      	ldr	r0, [pc, #700]	@ (8007574 <main+0x300>)
 80072b6:	2232      	movs	r2, #50	@ 0x32
 80072b8:	f7ff f850 	bl	800635c <espAt_init>

	espAt_sendCommand(&bleRadio, G_RST);
 80072bc:	4aae      	ldr	r2, [pc, #696]	@ (8007578 <main+0x304>)
 80072be:	4bad      	ldr	r3, [pc, #692]	@ (8007574 <main+0x300>)
 80072c0:	0011      	movs	r1, r2
 80072c2:	0018      	movs	r0, r3
 80072c4:	f7ff f860 	bl	8006388 <espAt_sendCommand>
	HAL_Delay(1000);
 80072c8:	23fa      	movs	r3, #250	@ 0xfa
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	0018      	movs	r0, r3
 80072ce:	f7fb f909 	bl	80024e4 <HAL_Delay>

	espAt_sendString(&bleRadio, S_BHN, "bartsHID");
 80072d2:	4aaa      	ldr	r2, [pc, #680]	@ (800757c <main+0x308>)
 80072d4:	49aa      	ldr	r1, [pc, #680]	@ (8007580 <main+0x30c>)
 80072d6:	4ba7      	ldr	r3, [pc, #668]	@ (8007574 <main+0x300>)
 80072d8:	0018      	movs	r0, r3
 80072da:	f7ff fadb 	bl	8006894 <espAt_sendString>
	HAL_Delay(200);
 80072de:	20c8      	movs	r0, #200	@ 0xc8
 80072e0:	f7fb f900 	bl	80024e4 <HAL_Delay>
	espAt_sendParams(&bleRadio, P_BHI, 1, 1);
 80072e4:	49a7      	ldr	r1, [pc, #668]	@ (8007584 <main+0x310>)
 80072e6:	48a3      	ldr	r0, [pc, #652]	@ (8007574 <main+0x300>)
 80072e8:	2301      	movs	r3, #1
 80072ea:	2201      	movs	r2, #1
 80072ec:	f7ff f8fa 	bl	80064e4 <espAt_sendParams>
	HAL_Delay(200);
 80072f0:	20c8      	movs	r0, #200	@ 0xc8
 80072f2:	f7fb f8f7 	bl	80024e4 <HAL_Delay>

	//change baudrate
	espAt_sendParams(&bleRadio, P_UC, 5, 3000000, 8, 1, 0, 0);
 80072f6:	4aa4      	ldr	r2, [pc, #656]	@ (8007588 <main+0x314>)
 80072f8:	49a4      	ldr	r1, [pc, #656]	@ (800758c <main+0x318>)
 80072fa:	489e      	ldr	r0, [pc, #632]	@ (8007574 <main+0x300>)
 80072fc:	2300      	movs	r3, #0
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	2300      	movs	r3, #0
 8007302:	9302      	str	r3, [sp, #8]
 8007304:	2301      	movs	r3, #1
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	2308      	movs	r3, #8
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	0013      	movs	r3, r2
 800730e:	2205      	movs	r2, #5
 8007310:	f7ff f8e8 	bl	80064e4 <espAt_sendParams>
	HAL_Delay(200);
 8007314:	20c8      	movs	r0, #200	@ 0xc8
 8007316:	f7fb f8e5 	bl	80024e4 <HAL_Delay>
	HAL_UART_ChangeSpeed(&huart1, 3000000);
 800731a:	4a9b      	ldr	r2, [pc, #620]	@ (8007588 <main+0x314>)
 800731c:	4b94      	ldr	r3, [pc, #592]	@ (8007570 <main+0x2fc>)
 800731e:	0011      	movs	r1, r2
 8007320:	0018      	movs	r0, r3
 8007322:	f000 fbd7 	bl	8007ad4 <HAL_UART_ChangeSpeed>

	sensorStat = lsm6ds_reset(&mems);
 8007326:	197c      	adds	r4, r7, r5
 8007328:	4b90      	ldr	r3, [pc, #576]	@ (800756c <main+0x2f8>)
 800732a:	0018      	movs	r0, r3
 800732c:	f7ff ff5a 	bl	80071e4 <lsm6ds_reset>
 8007330:	0003      	movs	r3, r0
 8007332:	7023      	strb	r3, [r4, #0]

//	sensorStat = lsm6ds_setXLOutputDataRate(&mems, LSM6DS_ODR_XL_12_5_HZ);
	//	sensorStat = lsm6ds_setXLFullScale(&mems, LSM6DS_FS_XL_16G);

	sensorStat = lsm6ds_setGRLowPass(&mems, LSM6DS_FTYPE_VHIGH);
 8007334:	197c      	adds	r4, r7, r5
 8007336:	4b8d      	ldr	r3, [pc, #564]	@ (800756c <main+0x2f8>)
 8007338:	2103      	movs	r1, #3
 800733a:	0018      	movs	r0, r3
 800733c:	f7ff feca 	bl	80070d4 <lsm6ds_setGRLowPass>
 8007340:	0003      	movs	r3, r0
 8007342:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setGROutputDataRate(&mems, LSM6DS_ODR_G_208_HZ);
 8007344:	197c      	adds	r4, r7, r5
 8007346:	4b89      	ldr	r3, [pc, #548]	@ (800756c <main+0x2f8>)
 8007348:	2150      	movs	r1, #80	@ 0x50
 800734a:	0018      	movs	r0, r3
 800734c:	f7ff feae 	bl	80070ac <lsm6ds_setGROutputDataRate>
 8007350:	0003      	movs	r3, r0
 8007352:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setGRFullScale(&mems, LSM6DS_FS_G_2000DPS);
 8007354:	197c      	adds	r4, r7, r5
 8007356:	4b85      	ldr	r3, [pc, #532]	@ (800756c <main+0x2f8>)
 8007358:	210c      	movs	r1, #12
 800735a:	0018      	movs	r0, r3
 800735c:	f7ff fee7 	bl	800712e <lsm6ds_setGRFullScale>
 8007360:	0003      	movs	r3, r0
 8007362:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setInt1Drdy(&mems, LSM6DS_INT1_DRDY_G);
 8007364:	197c      	adds	r4, r7, r5
 8007366:	4b81      	ldr	r3, [pc, #516]	@ (800756c <main+0x2f8>)
 8007368:	2102      	movs	r1, #2
 800736a:	0018      	movs	r0, r3
 800736c:	f7ff fe8a 	bl	8007084 <lsm6ds_setInt1Drdy>
 8007370:	0003      	movs	r3, r0
 8007372:	7023      	strb	r3, [r4, #0]

	int32_t sensitivity = 100; //10000 are 1
 8007374:	2364      	movs	r3, #100	@ 0x64
 8007376:	613b      	str	r3, [r7, #16]
	int32_t acceleration = 140; //100- no acceleration
 8007378:	238c      	movs	r3, #140	@ 0x8c
 800737a:	60fb      	str	r3, [r7, #12]

	uint8_t newDataAvailable = 0;
 800737c:	230b      	movs	r3, #11
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	2200      	movs	r2, #0
 8007382:	701a      	strb	r2, [r3, #0]
	uint8_t blueButtonState = 0;
 8007384:	2317      	movs	r3, #23
 8007386:	18fb      	adds	r3, r7, r3
 8007388:	2200      	movs	r2, #0
 800738a:	701a      	strb	r2, [r3, #0]

	int32_t maxVal = 100;
 800738c:	2364      	movs	r3, #100	@ 0x64
 800738e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
	while (1) {



		if (flagDrdyG) {
 8007390:	4b7f      	ldr	r3, [pc, #508]	@ (8007590 <main+0x31c>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0fa      	beq.n	8007390 <main+0x11c>
			flagDrdyG = 0;
 800739a:	4b7d      	ldr	r3, [pc, #500]	@ (8007590 <main+0x31c>)
 800739c:	2200      	movs	r2, #0
 800739e:	701a      	strb	r2, [r3, #0]

			sensorStat = lsm6ds_updateGR(&mems);
 80073a0:	2315      	movs	r3, #21
 80073a2:	18fc      	adds	r4, r7, r3
 80073a4:	4b71      	ldr	r3, [pc, #452]	@ (800756c <main+0x2f8>)
 80073a6:	0018      	movs	r0, r3
 80073a8:	f7ff ff2b 	bl	8007202 <lsm6ds_updateGR>
 80073ac:	0003      	movs	r3, r0
 80073ae:	7023      	strb	r3, [r4, #0]

			//sensitivity
			amx = ((int32_t) mems.outGR.x * sensitivity) / 10000;
 80073b0:	4b6e      	ldr	r3, [pc, #440]	@ (800756c <main+0x2f8>)
 80073b2:	2214      	movs	r2, #20
 80073b4:	5e9b      	ldrsh	r3, [r3, r2]
 80073b6:	001a      	movs	r2, r3
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	4353      	muls	r3, r2
 80073bc:	4975      	ldr	r1, [pc, #468]	@ (8007594 <main+0x320>)
 80073be:	0018      	movs	r0, r3
 80073c0:	f7f8 ff32 	bl	8000228 <__divsi3>
 80073c4:	0003      	movs	r3, r0
 80073c6:	001a      	movs	r2, r3
 80073c8:	4b73      	ldr	r3, [pc, #460]	@ (8007598 <main+0x324>)
 80073ca:	601a      	str	r2, [r3, #0]
			amz = ((int32_t) mems.outGR.z * sensitivity) / 10000;
 80073cc:	4b67      	ldr	r3, [pc, #412]	@ (800756c <main+0x2f8>)
 80073ce:	2218      	movs	r2, #24
 80073d0:	5e9b      	ldrsh	r3, [r3, r2]
 80073d2:	001a      	movs	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	4353      	muls	r3, r2
 80073d8:	496e      	ldr	r1, [pc, #440]	@ (8007594 <main+0x320>)
 80073da:	0018      	movs	r0, r3
 80073dc:	f7f8 ff24 	bl	8000228 <__divsi3>
 80073e0:	0003      	movs	r3, r0
 80073e2:	001a      	movs	r2, r3
 80073e4:	4b6d      	ldr	r3, [pc, #436]	@ (800759c <main+0x328>)
 80073e6:	601a      	str	r2, [r3, #0]

			//acceleration

			uint8_t isNegative;

			if (amx < 0)
 80073e8:	4b6b      	ldr	r3, [pc, #428]	@ (8007598 <main+0x324>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	da04      	bge.n	80073fa <main+0x186>
				isNegative = 1;
 80073f0:	2316      	movs	r3, #22
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	2201      	movs	r2, #1
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	e003      	b.n	8007402 <main+0x18e>
			else
				isNegative = 0;
 80073fa:	2316      	movs	r3, #22
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]

			amx = pow((double) abs(amx), ((double) acceleration) / 100);
 8007402:	4b65      	ldr	r3, [pc, #404]	@ (8007598 <main+0x324>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	17da      	asrs	r2, r3, #31
 8007408:	189b      	adds	r3, r3, r2
 800740a:	4053      	eors	r3, r2
 800740c:	0018      	movs	r0, r3
 800740e:	f7fa ff8b 	bl	8002328 <__aeabi_i2d>
 8007412:	0004      	movs	r4, r0
 8007414:	000d      	movs	r5, r1
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7fa ff86 	bl	8002328 <__aeabi_i2d>
 800741c:	2200      	movs	r2, #0
 800741e:	4b60      	ldr	r3, [pc, #384]	@ (80075a0 <main+0x32c>)
 8007420:	f7f9 fc7c 	bl	8000d1c <__aeabi_ddiv>
 8007424:	0002      	movs	r2, r0
 8007426:	000b      	movs	r3, r1
 8007428:	0020      	movs	r0, r4
 800742a:	0029      	movs	r1, r5
 800742c:	f000 fc20 	bl	8007c70 <pow>
 8007430:	0002      	movs	r2, r0
 8007432:	000b      	movs	r3, r1
 8007434:	0010      	movs	r0, r2
 8007436:	0019      	movs	r1, r3
 8007438:	f7fa ff3a 	bl	80022b0 <__aeabi_d2iz>
 800743c:	0002      	movs	r2, r0
 800743e:	4b56      	ldr	r3, [pc, #344]	@ (8007598 <main+0x324>)
 8007440:	601a      	str	r2, [r3, #0]
			if (isNegative)
 8007442:	2316      	movs	r3, #22
 8007444:	18fb      	adds	r3, r7, r3
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <main+0x1e2>
				amx = -amx;
 800744c:	4b52      	ldr	r3, [pc, #328]	@ (8007598 <main+0x324>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	425a      	negs	r2, r3
 8007452:	4b51      	ldr	r3, [pc, #324]	@ (8007598 <main+0x324>)
 8007454:	601a      	str	r2, [r3, #0]

			if (amz < 0)
 8007456:	4b51      	ldr	r3, [pc, #324]	@ (800759c <main+0x328>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	da04      	bge.n	8007468 <main+0x1f4>
				isNegative = 1;
 800745e:	2316      	movs	r3, #22
 8007460:	18fb      	adds	r3, r7, r3
 8007462:	2201      	movs	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	e003      	b.n	8007470 <main+0x1fc>
			else
				isNegative = 0;
 8007468:	2316      	movs	r3, #22
 800746a:	18fb      	adds	r3, r7, r3
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
			amz = pow((double) abs(amz), ((double) acceleration) / 100);
 8007470:	4b4a      	ldr	r3, [pc, #296]	@ (800759c <main+0x328>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	17da      	asrs	r2, r3, #31
 8007476:	189b      	adds	r3, r3, r2
 8007478:	4053      	eors	r3, r2
 800747a:	0018      	movs	r0, r3
 800747c:	f7fa ff54 	bl	8002328 <__aeabi_i2d>
 8007480:	0004      	movs	r4, r0
 8007482:	000d      	movs	r5, r1
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7fa ff4f 	bl	8002328 <__aeabi_i2d>
 800748a:	2200      	movs	r2, #0
 800748c:	4b44      	ldr	r3, [pc, #272]	@ (80075a0 <main+0x32c>)
 800748e:	f7f9 fc45 	bl	8000d1c <__aeabi_ddiv>
 8007492:	0002      	movs	r2, r0
 8007494:	000b      	movs	r3, r1
 8007496:	0020      	movs	r0, r4
 8007498:	0029      	movs	r1, r5
 800749a:	f000 fbe9 	bl	8007c70 <pow>
 800749e:	0002      	movs	r2, r0
 80074a0:	000b      	movs	r3, r1
 80074a2:	0010      	movs	r0, r2
 80074a4:	0019      	movs	r1, r3
 80074a6:	f7fa ff03 	bl	80022b0 <__aeabi_d2iz>
 80074aa:	0002      	movs	r2, r0
 80074ac:	4b3b      	ldr	r3, [pc, #236]	@ (800759c <main+0x328>)
 80074ae:	601a      	str	r2, [r3, #0]
			if (isNegative)
 80074b0:	2316      	movs	r3, #22
 80074b2:	18fb      	adds	r3, r7, r3
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <main+0x250>
				amz = -amz;
 80074ba:	4b38      	ldr	r3, [pc, #224]	@ (800759c <main+0x328>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	425a      	negs	r2, r3
 80074c0:	4b36      	ldr	r3, [pc, #216]	@ (800759c <main+0x328>)
 80074c2:	601a      	str	r2, [r3, #0]


			//to high value secure
			if (amx > maxVal)
 80074c4:	4b34      	ldr	r3, [pc, #208]	@ (8007598 <main+0x324>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	da02      	bge.n	80074d4 <main+0x260>
				amx = maxVal;
 80074ce:	4b32      	ldr	r3, [pc, #200]	@ (8007598 <main+0x324>)
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	601a      	str	r2, [r3, #0]
			if (amx < -maxVal)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	425a      	negs	r2, r3
 80074d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007598 <main+0x324>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	dd03      	ble.n	80074e8 <main+0x274>
				amx = -maxVal;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	425a      	negs	r2, r3
 80074e4:	4b2c      	ldr	r3, [pc, #176]	@ (8007598 <main+0x324>)
 80074e6:	601a      	str	r2, [r3, #0]

			if (amz > maxVal)
 80074e8:	4b2c      	ldr	r3, [pc, #176]	@ (800759c <main+0x328>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	da02      	bge.n	80074f8 <main+0x284>
				amz = maxVal;
 80074f2:	4b2a      	ldr	r3, [pc, #168]	@ (800759c <main+0x328>)
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	601a      	str	r2, [r3, #0]
			if (amz < -maxVal)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	425a      	negs	r2, r3
 80074fc:	4b27      	ldr	r3, [pc, #156]	@ (800759c <main+0x328>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	429a      	cmp	r2, r3
 8007502:	dd03      	ble.n	800750c <main+0x298>
				amz = -maxVal;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	425a      	negs	r2, r3
 8007508:	4b24      	ldr	r3, [pc, #144]	@ (800759c <main+0x328>)
 800750a:	601a      	str	r2, [r3, #0]

			//revert sign
			amz *= -1;
 800750c:	4b23      	ldr	r3, [pc, #140]	@ (800759c <main+0x328>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	425a      	negs	r2, r3
 8007512:	4b22      	ldr	r3, [pc, #136]	@ (800759c <main+0x328>)
 8007514:	601a      	str	r2, [r3, #0]
			amx *= -1;
 8007516:	4b20      	ldr	r3, [pc, #128]	@ (8007598 <main+0x324>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	425a      	negs	r2, r3
 800751c:	4b1e      	ldr	r3, [pc, #120]	@ (8007598 <main+0x324>)
 800751e:	601a      	str	r2, [r3, #0]

			if (HAL_GPIO_ReadPin(MUS_DPI_GPIO_Port, MUS_DPI_Pin)
 8007520:	2380      	movs	r3, #128	@ 0x80
 8007522:	019b      	lsls	r3, r3, #6
 8007524:	4a1f      	ldr	r2, [pc, #124]	@ (80075a4 <main+0x330>)
 8007526:	0019      	movs	r1, r3
 8007528:	0010      	movs	r0, r2
 800752a:	f7fb fe13 	bl	8003154 <HAL_GPIO_ReadPin>
 800752e:	1e03      	subs	r3, r0, #0
 8007530:	d104      	bne.n	800753c <main+0x2c8>
					== GPIO_PIN_RESET)
				blueButtonState = 1;
 8007532:	2317      	movs	r3, #23
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	2201      	movs	r2, #1
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	e003      	b.n	8007544 <main+0x2d0>
			else
				blueButtonState = 0;
 800753c:	2317      	movs	r3, #23
 800753e:	18fb      	adds	r3, r7, r3
 8007540:	2200      	movs	r2, #0
 8007542:	701a      	strb	r2, [r3, #0]

			espAt_sendParams(&bleRadio, P_BHM, 4, blueButtonState, amz, amx, 0);
 8007544:	2317      	movs	r3, #23
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	781c      	ldrb	r4, [r3, #0]
 800754a:	4b14      	ldr	r3, [pc, #80]	@ (800759c <main+0x328>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4b12      	ldr	r3, [pc, #72]	@ (8007598 <main+0x324>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4915      	ldr	r1, [pc, #84]	@ (80075a8 <main+0x334>)
 8007554:	4807      	ldr	r0, [pc, #28]	@ (8007574 <main+0x300>)
 8007556:	2500      	movs	r5, #0
 8007558:	9502      	str	r5, [sp, #8]
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	9200      	str	r2, [sp, #0]
 800755e:	0023      	movs	r3, r4
 8007560:	2204      	movs	r2, #4
 8007562:	f7fe ffbf 	bl	80064e4 <espAt_sendParams>
		if (flagDrdyG) {
 8007566:	e713      	b.n	8007390 <main+0x11c>
 8007568:	20000090 	.word	0x20000090
 800756c:	200000f0 	.word	0x200000f0
 8007570:	20000118 	.word	0x20000118
 8007574:	200000e4 	.word	0x200000e4
 8007578:	08008ae8 	.word	0x08008ae8
 800757c:	08008aec 	.word	0x08008aec
 8007580:	08008af8 	.word	0x08008af8
 8007584:	08008b04 	.word	0x08008b04
 8007588:	002dc6c0 	.word	0x002dc6c0
 800758c:	08008b10 	.word	0x08008b10
 8007590:	20000114 	.word	0x20000114
 8007594:	00002710 	.word	0x00002710
 8007598:	2000010c 	.word	0x2000010c
 800759c:	20000110 	.word	0x20000110
 80075a0:	40590000 	.word	0x40590000
 80075a4:	50000800 	.word	0x50000800
 80075a8:	08008b1c 	.word	0x08008b1c

080075ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b093      	sub	sp, #76	@ 0x4c
 80075b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075b2:	2410      	movs	r4, #16
 80075b4:	193b      	adds	r3, r7, r4
 80075b6:	0018      	movs	r0, r3
 80075b8:	2338      	movs	r3, #56	@ 0x38
 80075ba:	001a      	movs	r2, r3
 80075bc:	2100      	movs	r1, #0
 80075be:	f000 fb1b 	bl	8007bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075c2:	003b      	movs	r3, r7
 80075c4:	0018      	movs	r0, r3
 80075c6:	2310      	movs	r3, #16
 80075c8:	001a      	movs	r2, r3
 80075ca:	2100      	movs	r1, #0
 80075cc:	f000 fb14 	bl	8007bf8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80075d0:	2380      	movs	r3, #128	@ 0x80
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	0018      	movs	r0, r3
 80075d6:	f7fc fcc7 	bl	8003f68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	2202      	movs	r2, #2
 80075de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80075e0:	193b      	adds	r3, r7, r4
 80075e2:	2280      	movs	r2, #128	@ 0x80
 80075e4:	0052      	lsls	r2, r2, #1
 80075e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80075e8:	0021      	movs	r1, r4
 80075ea:	187b      	adds	r3, r7, r1
 80075ec:	2200      	movs	r2, #0
 80075ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80075f0:	187b      	adds	r3, r7, r1
 80075f2:	2240      	movs	r2, #64	@ 0x40
 80075f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075f6:	187b      	adds	r3, r7, r1
 80075f8:	2202      	movs	r2, #2
 80075fa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80075fc:	187b      	adds	r3, r7, r1
 80075fe:	2202      	movs	r2, #2
 8007600:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8007602:	187b      	adds	r3, r7, r1
 8007604:	2200      	movs	r2, #0
 8007606:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8007608:	187b      	adds	r3, r7, r1
 800760a:	2208      	movs	r2, #8
 800760c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800760e:	187b      	adds	r3, r7, r1
 8007610:	2280      	movs	r2, #128	@ 0x80
 8007612:	0292      	lsls	r2, r2, #10
 8007614:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007616:	187b      	adds	r3, r7, r1
 8007618:	2280      	movs	r2, #128	@ 0x80
 800761a:	0492      	lsls	r2, r2, #18
 800761c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800761e:	187b      	adds	r3, r7, r1
 8007620:	2280      	movs	r2, #128	@ 0x80
 8007622:	0592      	lsls	r2, r2, #22
 8007624:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007626:	187b      	adds	r3, r7, r1
 8007628:	0018      	movs	r0, r3
 800762a:	f7fc fce9 	bl	8004000 <HAL_RCC_OscConfig>
 800762e:	1e03      	subs	r3, r0, #0
 8007630:	d001      	beq.n	8007636 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8007632:	f000 f82d 	bl	8007690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007636:	003b      	movs	r3, r7
 8007638:	2207      	movs	r2, #7
 800763a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800763c:	003b      	movs	r3, r7
 800763e:	2202      	movs	r2, #2
 8007640:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007642:	003b      	movs	r3, r7
 8007644:	2200      	movs	r2, #0
 8007646:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007648:	003b      	movs	r3, r7
 800764a:	2200      	movs	r2, #0
 800764c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800764e:	003b      	movs	r3, r7
 8007650:	2102      	movs	r1, #2
 8007652:	0018      	movs	r0, r3
 8007654:	f7fc ffee 	bl	8004634 <HAL_RCC_ClockConfig>
 8007658:	1e03      	subs	r3, r0, #0
 800765a:	d001      	beq.n	8007660 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800765c:	f000 f818 	bl	8007690 <Error_Handler>
  }
}
 8007660:	46c0      	nop			@ (mov r8, r8)
 8007662:	46bd      	mov	sp, r7
 8007664:	b013      	add	sp, #76	@ 0x4c
 8007666:	bd90      	pop	{r4, r7, pc}

08007668 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	0002      	movs	r2, r0
 8007670:	1dbb      	adds	r3, r7, #6
 8007672:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GYRO_INT_Pin) {
 8007674:	1dbb      	adds	r3, r7, #6
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d102      	bne.n	8007682 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		flagDrdyG = 1;
 800767c:	4b03      	ldr	r3, [pc, #12]	@ (800768c <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 800767e:	2201      	movs	r2, #1
 8007680:	701a      	strb	r2, [r3, #0]
	}
}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	46bd      	mov	sp, r7
 8007686:	b002      	add	sp, #8
 8007688:	bd80      	pop	{r7, pc}
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	20000114 	.word	0x20000114

08007690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007694:	b672      	cpsid	i
}
 8007696:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007698:	46c0      	nop			@ (mov r8, r8)
 800769a:	e7fd      	b.n	8007698 <Error_Handler+0x8>

0800769c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076a2:	4b0f      	ldr	r3, [pc, #60]	@ (80076e0 <HAL_MspInit+0x44>)
 80076a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076a6:	4b0e      	ldr	r3, [pc, #56]	@ (80076e0 <HAL_MspInit+0x44>)
 80076a8:	2101      	movs	r1, #1
 80076aa:	430a      	orrs	r2, r1
 80076ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80076ae:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <HAL_MspInit+0x44>)
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	2201      	movs	r2, #1
 80076b4:	4013      	ands	r3, r2
 80076b6:	607b      	str	r3, [r7, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076ba:	4b09      	ldr	r3, [pc, #36]	@ (80076e0 <HAL_MspInit+0x44>)
 80076bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076be:	4b08      	ldr	r3, [pc, #32]	@ (80076e0 <HAL_MspInit+0x44>)
 80076c0:	2180      	movs	r1, #128	@ 0x80
 80076c2:	0549      	lsls	r1, r1, #21
 80076c4:	430a      	orrs	r2, r1
 80076c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80076c8:	4b05      	ldr	r3, [pc, #20]	@ (80076e0 <HAL_MspInit+0x44>)
 80076ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076cc:	2380      	movs	r3, #128	@ 0x80
 80076ce:	055b      	lsls	r3, r3, #21
 80076d0:	4013      	ands	r3, r2
 80076d2:	603b      	str	r3, [r7, #0]
 80076d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80076d6:	46c0      	nop			@ (mov r8, r8)
 80076d8:	46bd      	mov	sp, r7
 80076da:	b002      	add	sp, #8
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	46c0      	nop			@ (mov r8, r8)
 80076e0:	40021000 	.word	0x40021000

080076e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80076e8:	46c0      	nop			@ (mov r8, r8)
 80076ea:	e7fd      	b.n	80076e8 <NMI_Handler+0x4>

080076ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076f0:	46c0      	nop			@ (mov r8, r8)
 80076f2:	e7fd      	b.n	80076f0 <HardFault_Handler+0x4>

080076f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80076f8:	46c0      	nop			@ (mov r8, r8)
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007702:	46c0      	nop			@ (mov r8, r8)
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800770c:	f7fa fece 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007710:	46c0      	nop			@ (mov r8, r8)
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 800771a:	2001      	movs	r0, #1
 800771c:	f7fb fd54 	bl	80031c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8007720:	46c0      	nop			@ (mov r8, r8)
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800772c:	4b03      	ldr	r3, [pc, #12]	@ (800773c <DMA1_Channel1_IRQHandler+0x14>)
 800772e:	0018      	movs	r0, r3
 8007730:	f7fb f9da 	bl	8002ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007734:	46c0      	nop			@ (mov r8, r8)
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	46c0      	nop			@ (mov r8, r8)
 800773c:	20000240 	.word	0x20000240

08007740 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007744:	4b03      	ldr	r3, [pc, #12]	@ (8007754 <USART1_IRQHandler+0x14>)
 8007746:	0018      	movs	r0, r3
 8007748:	f7fd fc10 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800774c:	46c0      	nop			@ (mov r8, r8)
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	46c0      	nop			@ (mov r8, r8)
 8007754:	20000118 	.word	0x20000118

08007758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800775c:	46c0      	nop			@ (mov r8, r8)
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007768:	4b23      	ldr	r3, [pc, #140]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 800776a:	4a24      	ldr	r2, [pc, #144]	@ (80077fc <MX_USART1_UART_Init+0x98>)
 800776c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800776e:	4b22      	ldr	r3, [pc, #136]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 8007770:	22e1      	movs	r2, #225	@ 0xe1
 8007772:	0252      	lsls	r2, r2, #9
 8007774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007776:	4b20      	ldr	r3, [pc, #128]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 8007778:	2200      	movs	r2, #0
 800777a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800777c:	4b1e      	ldr	r3, [pc, #120]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 800777e:	2200      	movs	r2, #0
 8007780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007782:	4b1d      	ldr	r3, [pc, #116]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 8007784:	2200      	movs	r2, #0
 8007786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007788:	4b1b      	ldr	r3, [pc, #108]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 800778a:	220c      	movs	r2, #12
 800778c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800778e:	4b1a      	ldr	r3, [pc, #104]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 8007790:	2200      	movs	r2, #0
 8007792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007794:	4b18      	ldr	r3, [pc, #96]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 8007796:	2200      	movs	r2, #0
 8007798:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800779a:	4b17      	ldr	r3, [pc, #92]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 800779c:	2200      	movs	r2, #0
 800779e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80077a0:	4b15      	ldr	r3, [pc, #84]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80077a6:	4b14      	ldr	r3, [pc, #80]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80077ac:	4b12      	ldr	r3, [pc, #72]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 80077ae:	0018      	movs	r0, r3
 80077b0:	f7fd faa2 	bl	8004cf8 <HAL_UART_Init>
 80077b4:	1e03      	subs	r3, r0, #0
 80077b6:	d001      	beq.n	80077bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80077b8:	f7ff ff6a 	bl	8007690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80077bc:	4b0e      	ldr	r3, [pc, #56]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 80077be:	2100      	movs	r1, #0
 80077c0:	0018      	movs	r0, r3
 80077c2:	f7fe fc9d 	bl	8006100 <HAL_UARTEx_SetTxFifoThreshold>
 80077c6:	1e03      	subs	r3, r0, #0
 80077c8:	d001      	beq.n	80077ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80077ca:	f7ff ff61 	bl	8007690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80077ce:	4b0a      	ldr	r3, [pc, #40]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 80077d0:	2100      	movs	r1, #0
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7fe fcd4 	bl	8006180 <HAL_UARTEx_SetRxFifoThreshold>
 80077d8:	1e03      	subs	r3, r0, #0
 80077da:	d001      	beq.n	80077e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80077dc:	f7ff ff58 	bl	8007690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80077e0:	4b05      	ldr	r3, [pc, #20]	@ (80077f8 <MX_USART1_UART_Init+0x94>)
 80077e2:	0018      	movs	r0, r3
 80077e4:	f7fe fc52 	bl	800608c <HAL_UARTEx_DisableFifoMode>
 80077e8:	1e03      	subs	r3, r0, #0
 80077ea:	d001      	beq.n	80077f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80077ec:	f7ff ff50 	bl	8007690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80077f0:	46c0      	nop			@ (mov r8, r8)
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	46c0      	nop			@ (mov r8, r8)
 80077f8:	20000118 	.word	0x20000118
 80077fc:	40013800 	.word	0x40013800

08007800 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007804:	4b23      	ldr	r3, [pc, #140]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 8007806:	4a24      	ldr	r2, [pc, #144]	@ (8007898 <MX_USART2_UART_Init+0x98>)
 8007808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800780a:	4b22      	ldr	r3, [pc, #136]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 800780c:	22e1      	movs	r2, #225	@ 0xe1
 800780e:	0252      	lsls	r2, r2, #9
 8007810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007812:	4b20      	ldr	r3, [pc, #128]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 8007814:	2200      	movs	r2, #0
 8007816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007818:	4b1e      	ldr	r3, [pc, #120]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 800781a:	2200      	movs	r2, #0
 800781c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800781e:	4b1d      	ldr	r3, [pc, #116]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 8007820:	2200      	movs	r2, #0
 8007822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007824:	4b1b      	ldr	r3, [pc, #108]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 8007826:	220c      	movs	r2, #12
 8007828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800782a:	4b1a      	ldr	r3, [pc, #104]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 800782c:	2200      	movs	r2, #0
 800782e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007830:	4b18      	ldr	r3, [pc, #96]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 8007832:	2200      	movs	r2, #0
 8007834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007836:	4b17      	ldr	r3, [pc, #92]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 8007838:	2200      	movs	r2, #0
 800783a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800783c:	4b15      	ldr	r3, [pc, #84]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 800783e:	2200      	movs	r2, #0
 8007840:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007842:	4b14      	ldr	r3, [pc, #80]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 8007844:	2200      	movs	r2, #0
 8007846:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007848:	4b12      	ldr	r3, [pc, #72]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 800784a:	0018      	movs	r0, r3
 800784c:	f7fd fa54 	bl	8004cf8 <HAL_UART_Init>
 8007850:	1e03      	subs	r3, r0, #0
 8007852:	d001      	beq.n	8007858 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8007854:	f7ff ff1c 	bl	8007690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007858:	4b0e      	ldr	r3, [pc, #56]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 800785a:	2100      	movs	r1, #0
 800785c:	0018      	movs	r0, r3
 800785e:	f7fe fc4f 	bl	8006100 <HAL_UARTEx_SetTxFifoThreshold>
 8007862:	1e03      	subs	r3, r0, #0
 8007864:	d001      	beq.n	800786a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8007866:	f7ff ff13 	bl	8007690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800786a:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 800786c:	2100      	movs	r1, #0
 800786e:	0018      	movs	r0, r3
 8007870:	f7fe fc86 	bl	8006180 <HAL_UARTEx_SetRxFifoThreshold>
 8007874:	1e03      	subs	r3, r0, #0
 8007876:	d001      	beq.n	800787c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8007878:	f7ff ff0a 	bl	8007690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800787c:	4b05      	ldr	r3, [pc, #20]	@ (8007894 <MX_USART2_UART_Init+0x94>)
 800787e:	0018      	movs	r0, r3
 8007880:	f7fe fc04 	bl	800608c <HAL_UARTEx_DisableFifoMode>
 8007884:	1e03      	subs	r3, r0, #0
 8007886:	d001      	beq.n	800788c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8007888:	f7ff ff02 	bl	8007690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800788c:	46c0      	nop			@ (mov r8, r8)
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	200001ac 	.word	0x200001ac
 8007898:	40004400 	.word	0x40004400

0800789c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b099      	sub	sp, #100	@ 0x64
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a4:	234c      	movs	r3, #76	@ 0x4c
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	0018      	movs	r0, r3
 80078aa:	2314      	movs	r3, #20
 80078ac:	001a      	movs	r2, r3
 80078ae:	2100      	movs	r1, #0
 80078b0:	f000 f9a2 	bl	8007bf8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80078b4:	2418      	movs	r4, #24
 80078b6:	193b      	adds	r3, r7, r4
 80078b8:	0018      	movs	r0, r3
 80078ba:	2334      	movs	r3, #52	@ 0x34
 80078bc:	001a      	movs	r2, r3
 80078be:	2100      	movs	r1, #0
 80078c0:	f000 f99a 	bl	8007bf8 <memset>
  if(uartHandle->Instance==USART1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a5d      	ldr	r2, [pc, #372]	@ (8007a40 <HAL_UART_MspInit+0x1a4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d16f      	bne.n	80079ae <HAL_UART_MspInit+0x112>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80078ce:	193b      	adds	r3, r7, r4
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80078d4:	193b      	adds	r3, r7, r4
 80078d6:	2200      	movs	r2, #0
 80078d8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80078da:	193b      	adds	r3, r7, r4
 80078dc:	0018      	movs	r0, r3
 80078de:	f7fd f853 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 80078e2:	1e03      	subs	r3, r0, #0
 80078e4:	d001      	beq.n	80078ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80078e6:	f7ff fed3 	bl	8007690 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80078ea:	4b56      	ldr	r3, [pc, #344]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 80078ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078ee:	4b55      	ldr	r3, [pc, #340]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 80078f0:	2180      	movs	r1, #128	@ 0x80
 80078f2:	01c9      	lsls	r1, r1, #7
 80078f4:	430a      	orrs	r2, r1
 80078f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80078f8:	4b52      	ldr	r3, [pc, #328]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 80078fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078fc:	2380      	movs	r3, #128	@ 0x80
 80078fe:	01db      	lsls	r3, r3, #7
 8007900:	4013      	ands	r3, r2
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007906:	4b4f      	ldr	r3, [pc, #316]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 8007908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800790a:	4b4e      	ldr	r3, [pc, #312]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 800790c:	2104      	movs	r1, #4
 800790e:	430a      	orrs	r2, r1
 8007910:	635a      	str	r2, [r3, #52]	@ 0x34
 8007912:	4b4c      	ldr	r3, [pc, #304]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 8007914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007916:	2204      	movs	r2, #4
 8007918:	4013      	ands	r3, r2
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 800791e:	214c      	movs	r1, #76	@ 0x4c
 8007920:	187b      	adds	r3, r7, r1
 8007922:	2230      	movs	r2, #48	@ 0x30
 8007924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007926:	187b      	adds	r3, r7, r1
 8007928:	2202      	movs	r2, #2
 800792a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792c:	187b      	adds	r3, r7, r1
 800792e:	2200      	movs	r2, #0
 8007930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007932:	187b      	adds	r3, r7, r1
 8007934:	2200      	movs	r2, #0
 8007936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8007938:	187b      	adds	r3, r7, r1
 800793a:	2201      	movs	r2, #1
 800793c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800793e:	187b      	adds	r3, r7, r1
 8007940:	4a41      	ldr	r2, [pc, #260]	@ (8007a48 <HAL_UART_MspInit+0x1ac>)
 8007942:	0019      	movs	r1, r3
 8007944:	0010      	movs	r0, r2
 8007946:	f7fb f9d1 	bl	8002cec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800794a:	4b40      	ldr	r3, [pc, #256]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 800794c:	4a40      	ldr	r2, [pc, #256]	@ (8007a50 <HAL_UART_MspInit+0x1b4>)
 800794e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8007950:	4b3e      	ldr	r3, [pc, #248]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 8007952:	2233      	movs	r2, #51	@ 0x33
 8007954:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007956:	4b3d      	ldr	r3, [pc, #244]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 8007958:	2210      	movs	r2, #16
 800795a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800795c:	4b3b      	ldr	r3, [pc, #236]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 800795e:	2200      	movs	r2, #0
 8007960:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007962:	4b3a      	ldr	r3, [pc, #232]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 8007964:	2280      	movs	r2, #128	@ 0x80
 8007966:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007968:	4b38      	ldr	r3, [pc, #224]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 800796a:	2200      	movs	r2, #0
 800796c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800796e:	4b37      	ldr	r3, [pc, #220]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 8007970:	2200      	movs	r2, #0
 8007972:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007974:	4b35      	ldr	r3, [pc, #212]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 8007976:	2200      	movs	r2, #0
 8007978:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800797a:	4b34      	ldr	r3, [pc, #208]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 800797c:	2200      	movs	r2, #0
 800797e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007980:	4b32      	ldr	r3, [pc, #200]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 8007982:	0018      	movs	r0, r3
 8007984:	f7fa fee2 	bl	800274c <HAL_DMA_Init>
 8007988:	1e03      	subs	r3, r0, #0
 800798a:	d001      	beq.n	8007990 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 800798c:	f7ff fe80 	bl	8007690 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a2e      	ldr	r2, [pc, #184]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 8007994:	67da      	str	r2, [r3, #124]	@ 0x7c
 8007996:	4b2d      	ldr	r3, [pc, #180]	@ (8007a4c <HAL_UART_MspInit+0x1b0>)
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	201b      	movs	r0, #27
 80079a2:	f7fa fe91 	bl	80026c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80079a6:	201b      	movs	r0, #27
 80079a8:	f7fa fea3 	bl	80026f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80079ac:	e044      	b.n	8007a38 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a28      	ldr	r2, [pc, #160]	@ (8007a54 <HAL_UART_MspInit+0x1b8>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d13f      	bne.n	8007a38 <HAL_UART_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80079b8:	2118      	movs	r1, #24
 80079ba:	187b      	adds	r3, r7, r1
 80079bc:	2202      	movs	r2, #2
 80079be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80079c0:	187b      	adds	r3, r7, r1
 80079c2:	2200      	movs	r2, #0
 80079c4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079c6:	187b      	adds	r3, r7, r1
 80079c8:	0018      	movs	r0, r3
 80079ca:	f7fc ffdd 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 80079ce:	1e03      	subs	r3, r0, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_UART_MspInit+0x13a>
      Error_Handler();
 80079d2:	f7ff fe5d 	bl	8007690 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80079d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 80079d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079da:	4b1a      	ldr	r3, [pc, #104]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 80079dc:	2180      	movs	r1, #128	@ 0x80
 80079de:	0289      	lsls	r1, r1, #10
 80079e0:	430a      	orrs	r2, r1
 80079e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80079e4:	4b17      	ldr	r3, [pc, #92]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 80079e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079e8:	2380      	movs	r3, #128	@ 0x80
 80079ea:	029b      	lsls	r3, r3, #10
 80079ec:	4013      	ands	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079f2:	4b14      	ldr	r3, [pc, #80]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 80079f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079f6:	4b13      	ldr	r3, [pc, #76]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 80079f8:	2101      	movs	r1, #1
 80079fa:	430a      	orrs	r2, r1
 80079fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80079fe:	4b11      	ldr	r3, [pc, #68]	@ (8007a44 <HAL_UART_MspInit+0x1a8>)
 8007a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a02:	2201      	movs	r2, #1
 8007a04:	4013      	ands	r3, r2
 8007a06:	60bb      	str	r3, [r7, #8]
 8007a08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007a0a:	214c      	movs	r1, #76	@ 0x4c
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	220c      	movs	r2, #12
 8007a10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a12:	187b      	adds	r3, r7, r1
 8007a14:	2202      	movs	r2, #2
 8007a16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a18:	187b      	adds	r3, r7, r1
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a1e:	187b      	adds	r3, r7, r1
 8007a20:	2200      	movs	r2, #0
 8007a22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007a24:	187b      	adds	r3, r7, r1
 8007a26:	2201      	movs	r2, #1
 8007a28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a2a:	187a      	adds	r2, r7, r1
 8007a2c:	23a0      	movs	r3, #160	@ 0xa0
 8007a2e:	05db      	lsls	r3, r3, #23
 8007a30:	0011      	movs	r1, r2
 8007a32:	0018      	movs	r0, r3
 8007a34:	f7fb f95a 	bl	8002cec <HAL_GPIO_Init>
}
 8007a38:	46c0      	nop			@ (mov r8, r8)
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	b019      	add	sp, #100	@ 0x64
 8007a3e:	bd90      	pop	{r4, r7, pc}
 8007a40:	40013800 	.word	0x40013800
 8007a44:	40021000 	.word	0x40021000
 8007a48:	50000800 	.word	0x50000800
 8007a4c:	20000240 	.word	0x20000240
 8007a50:	40020008 	.word	0x40020008
 8007a54:	40004400 	.word	0x40004400

08007a58 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a15      	ldr	r2, [pc, #84]	@ (8007abc <HAL_UART_MspDeInit+0x64>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d113      	bne.n	8007a92 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8007a6a:	4b15      	ldr	r3, [pc, #84]	@ (8007ac0 <HAL_UART_MspDeInit+0x68>)
 8007a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a6e:	4b14      	ldr	r3, [pc, #80]	@ (8007ac0 <HAL_UART_MspDeInit+0x68>)
 8007a70:	4914      	ldr	r1, [pc, #80]	@ (8007ac4 <HAL_UART_MspDeInit+0x6c>)
 8007a72:	400a      	ands	r2, r1
 8007a74:	641a      	str	r2, [r3, #64]	@ 0x40

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, ESP_TX_Pin|ESP_RX_Pin);
 8007a76:	4b14      	ldr	r3, [pc, #80]	@ (8007ac8 <HAL_UART_MspDeInit+0x70>)
 8007a78:	2130      	movs	r1, #48	@ 0x30
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f7fb fa9a 	bl	8002fb4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a84:	0018      	movs	r0, r3
 8007a86:	f7fa feeb 	bl	8002860 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8007a8a:	201b      	movs	r0, #27
 8007a8c:	f7fa fe41 	bl	8002712 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8007a90:	e010      	b.n	8007ab4 <HAL_UART_MspDeInit+0x5c>
  else if(uartHandle->Instance==USART2)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a0d      	ldr	r2, [pc, #52]	@ (8007acc <HAL_UART_MspDeInit+0x74>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d10b      	bne.n	8007ab4 <HAL_UART_MspDeInit+0x5c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8007a9c:	4b08      	ldr	r3, [pc, #32]	@ (8007ac0 <HAL_UART_MspDeInit+0x68>)
 8007a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aa0:	4b07      	ldr	r3, [pc, #28]	@ (8007ac0 <HAL_UART_MspDeInit+0x68>)
 8007aa2:	490b      	ldr	r1, [pc, #44]	@ (8007ad0 <HAL_UART_MspDeInit+0x78>)
 8007aa4:	400a      	ands	r2, r1
 8007aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8007aa8:	23a0      	movs	r3, #160	@ 0xa0
 8007aaa:	05db      	lsls	r3, r3, #23
 8007aac:	210c      	movs	r1, #12
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f7fb fa80 	bl	8002fb4 <HAL_GPIO_DeInit>
}
 8007ab4:	46c0      	nop			@ (mov r8, r8)
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b002      	add	sp, #8
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40013800 	.word	0x40013800
 8007ac0:	40021000 	.word	0x40021000
 8007ac4:	ffffbfff 	.word	0xffffbfff
 8007ac8:	50000800 	.word	0x50000800
 8007acc:	40004400 	.word	0x40004400
 8007ad0:	fffdffff 	.word	0xfffdffff

08007ad4 <HAL_UART_ChangeSpeed>:

/* USER CODE BEGIN 1 */

void HAL_UART_ChangeSpeed(UART_HandleTypeDef *huart, uint32_t baudrate){
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]

	HAL_UART_DeInit(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f7fd f95f 	bl	8004da4 <HAL_UART_DeInit>

	huart->Init.BaudRate = baudrate;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	605a      	str	r2, [r3, #4]

	if(HAL_UART_Init(huart)!=HAL_OK)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	0018      	movs	r0, r3
 8007af0:	f7fd f902 	bl	8004cf8 <HAL_UART_Init>
 8007af4:	1e03      	subs	r3, r0, #0
 8007af6:	d001      	beq.n	8007afc <HAL_UART_ChangeSpeed+0x28>
		Error_Handler();
 8007af8:	f7ff fdca 	bl	8007690 <Error_Handler>

}
 8007afc:	46c0      	nop			@ (mov r8, r8)
 8007afe:	46bd      	mov	sp, r7
 8007b00:	b002      	add	sp, #8
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007b04:	480d      	ldr	r0, [pc, #52]	@ (8007b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007b06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007b08:	f7ff fe26 	bl	8007758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007b0c:	480c      	ldr	r0, [pc, #48]	@ (8007b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8007b0e:	490d      	ldr	r1, [pc, #52]	@ (8007b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007b10:	4a0d      	ldr	r2, [pc, #52]	@ (8007b48 <LoopForever+0xe>)
  movs r3, #0
 8007b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007b14:	e002      	b.n	8007b1c <LoopCopyDataInit>

08007b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007b1a:	3304      	adds	r3, #4

08007b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007b20:	d3f9      	bcc.n	8007b16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007b22:	4a0a      	ldr	r2, [pc, #40]	@ (8007b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007b24:	4c0a      	ldr	r4, [pc, #40]	@ (8007b50 <LoopForever+0x16>)
  movs r3, #0
 8007b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007b28:	e001      	b.n	8007b2e <LoopFillZerobss>

08007b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b2c:	3204      	adds	r2, #4

08007b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007b30:	d3fb      	bcc.n	8007b2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007b32:	f000 f86f 	bl	8007c14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007b36:	f7ff fb9d 	bl	8007274 <main>

08007b3a <LoopForever>:

LoopForever:
  b LoopForever
 8007b3a:	e7fe      	b.n	8007b3a <LoopForever>
  ldr   r0, =_estack
 8007b3c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8007b48:	08008c58 	.word	0x08008c58
  ldr r2, =_sbss
 8007b4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8007b50:	200003d4 	.word	0x200003d4

08007b54 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007b54:	e7fe      	b.n	8007b54 <ADC1_COMP_IRQHandler>

08007b56 <__itoa>:
 8007b56:	1e93      	subs	r3, r2, #2
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	000c      	movs	r4, r1
 8007b5c:	2b22      	cmp	r3, #34	@ 0x22
 8007b5e:	d904      	bls.n	8007b6a <__itoa+0x14>
 8007b60:	2300      	movs	r3, #0
 8007b62:	001c      	movs	r4, r3
 8007b64:	700b      	strb	r3, [r1, #0]
 8007b66:	0020      	movs	r0, r4
 8007b68:	bd10      	pop	{r4, pc}
 8007b6a:	2a0a      	cmp	r2, #10
 8007b6c:	d109      	bne.n	8007b82 <__itoa+0x2c>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	da07      	bge.n	8007b82 <__itoa+0x2c>
 8007b72:	232d      	movs	r3, #45	@ 0x2d
 8007b74:	700b      	strb	r3, [r1, #0]
 8007b76:	2101      	movs	r1, #1
 8007b78:	4240      	negs	r0, r0
 8007b7a:	1861      	adds	r1, r4, r1
 8007b7c:	f000 f808 	bl	8007b90 <__utoa>
 8007b80:	e7f1      	b.n	8007b66 <__itoa+0x10>
 8007b82:	2100      	movs	r1, #0
 8007b84:	e7f9      	b.n	8007b7a <__itoa+0x24>

08007b86 <itoa>:
 8007b86:	b510      	push	{r4, lr}
 8007b88:	f7ff ffe5 	bl	8007b56 <__itoa>
 8007b8c:	bd10      	pop	{r4, pc}
	...

08007b90 <__utoa>:
 8007b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b92:	000c      	movs	r4, r1
 8007b94:	0016      	movs	r6, r2
 8007b96:	b08d      	sub	sp, #52	@ 0x34
 8007b98:	2225      	movs	r2, #37	@ 0x25
 8007b9a:	0007      	movs	r7, r0
 8007b9c:	4915      	ldr	r1, [pc, #84]	@ (8007bf4 <__utoa+0x64>)
 8007b9e:	a802      	add	r0, sp, #8
 8007ba0:	f000 f85c 	bl	8007c5c <memcpy>
 8007ba4:	1e62      	subs	r2, r4, #1
 8007ba6:	1eb3      	subs	r3, r6, #2
 8007ba8:	2500      	movs	r5, #0
 8007baa:	9201      	str	r2, [sp, #4]
 8007bac:	2b22      	cmp	r3, #34	@ 0x22
 8007bae:	d904      	bls.n	8007bba <__utoa+0x2a>
 8007bb0:	7025      	strb	r5, [r4, #0]
 8007bb2:	002c      	movs	r4, r5
 8007bb4:	0020      	movs	r0, r4
 8007bb6:	b00d      	add	sp, #52	@ 0x34
 8007bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bba:	0038      	movs	r0, r7
 8007bbc:	0031      	movs	r1, r6
 8007bbe:	f7f8 fb2f 	bl	8000220 <__aeabi_uidivmod>
 8007bc2:	000b      	movs	r3, r1
 8007bc4:	aa02      	add	r2, sp, #8
 8007bc6:	5cd3      	ldrb	r3, [r2, r3]
 8007bc8:	9a01      	ldr	r2, [sp, #4]
 8007bca:	0029      	movs	r1, r5
 8007bcc:	3501      	adds	r5, #1
 8007bce:	5553      	strb	r3, [r2, r5]
 8007bd0:	003b      	movs	r3, r7
 8007bd2:	0007      	movs	r7, r0
 8007bd4:	429e      	cmp	r6, r3
 8007bd6:	d9f0      	bls.n	8007bba <__utoa+0x2a>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	0022      	movs	r2, r4
 8007bdc:	5563      	strb	r3, [r4, r5]
 8007bde:	000b      	movs	r3, r1
 8007be0:	1ac8      	subs	r0, r1, r3
 8007be2:	4283      	cmp	r3, r0
 8007be4:	dde6      	ble.n	8007bb4 <__utoa+0x24>
 8007be6:	7810      	ldrb	r0, [r2, #0]
 8007be8:	5ce5      	ldrb	r5, [r4, r3]
 8007bea:	7015      	strb	r5, [r2, #0]
 8007bec:	54e0      	strb	r0, [r4, r3]
 8007bee:	3201      	adds	r2, #1
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	e7f5      	b.n	8007be0 <__utoa+0x50>
 8007bf4:	08008bf0 	.word	0x08008bf0

08007bf8 <memset>:
 8007bf8:	0003      	movs	r3, r0
 8007bfa:	1882      	adds	r2, r0, r2
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d100      	bne.n	8007c02 <memset+0xa>
 8007c00:	4770      	bx	lr
 8007c02:	7019      	strb	r1, [r3, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	e7f9      	b.n	8007bfc <memset+0x4>

08007c08 <__errno>:
 8007c08:	4b01      	ldr	r3, [pc, #4]	@ (8007c10 <__errno+0x8>)
 8007c0a:	6818      	ldr	r0, [r3, #0]
 8007c0c:	4770      	bx	lr
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	2000000c 	.word	0x2000000c

08007c14 <__libc_init_array>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	2600      	movs	r6, #0
 8007c18:	4c0c      	ldr	r4, [pc, #48]	@ (8007c4c <__libc_init_array+0x38>)
 8007c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c50 <__libc_init_array+0x3c>)
 8007c1c:	1b64      	subs	r4, r4, r5
 8007c1e:	10a4      	asrs	r4, r4, #2
 8007c20:	42a6      	cmp	r6, r4
 8007c22:	d109      	bne.n	8007c38 <__libc_init_array+0x24>
 8007c24:	2600      	movs	r6, #0
 8007c26:	f000 ff4b 	bl	8008ac0 <_init>
 8007c2a:	4c0a      	ldr	r4, [pc, #40]	@ (8007c54 <__libc_init_array+0x40>)
 8007c2c:	4d0a      	ldr	r5, [pc, #40]	@ (8007c58 <__libc_init_array+0x44>)
 8007c2e:	1b64      	subs	r4, r4, r5
 8007c30:	10a4      	asrs	r4, r4, #2
 8007c32:	42a6      	cmp	r6, r4
 8007c34:	d105      	bne.n	8007c42 <__libc_init_array+0x2e>
 8007c36:	bd70      	pop	{r4, r5, r6, pc}
 8007c38:	00b3      	lsls	r3, r6, #2
 8007c3a:	58eb      	ldr	r3, [r5, r3]
 8007c3c:	4798      	blx	r3
 8007c3e:	3601      	adds	r6, #1
 8007c40:	e7ee      	b.n	8007c20 <__libc_init_array+0xc>
 8007c42:	00b3      	lsls	r3, r6, #2
 8007c44:	58eb      	ldr	r3, [r5, r3]
 8007c46:	4798      	blx	r3
 8007c48:	3601      	adds	r6, #1
 8007c4a:	e7f2      	b.n	8007c32 <__libc_init_array+0x1e>
 8007c4c:	08008c50 	.word	0x08008c50
 8007c50:	08008c50 	.word	0x08008c50
 8007c54:	08008c54 	.word	0x08008c54
 8007c58:	08008c50 	.word	0x08008c50

08007c5c <memcpy>:
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d100      	bne.n	8007c66 <memcpy+0xa>
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	5ccc      	ldrb	r4, [r1, r3]
 8007c68:	54c4      	strb	r4, [r0, r3]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	e7f8      	b.n	8007c60 <memcpy+0x4>
	...

08007c70 <pow>:
 8007c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c72:	0014      	movs	r4, r2
 8007c74:	001d      	movs	r5, r3
 8007c76:	9000      	str	r0, [sp, #0]
 8007c78:	9101      	str	r1, [sp, #4]
 8007c7a:	f000 f86f 	bl	8007d5c <__ieee754_pow>
 8007c7e:	0022      	movs	r2, r4
 8007c80:	0006      	movs	r6, r0
 8007c82:	000f      	movs	r7, r1
 8007c84:	002b      	movs	r3, r5
 8007c86:	0020      	movs	r0, r4
 8007c88:	0029      	movs	r1, r5
 8007c8a:	f7fa faef 	bl	800226c <__aeabi_dcmpun>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d13f      	bne.n	8007d12 <pow+0xa2>
 8007c92:	9800      	ldr	r0, [sp, #0]
 8007c94:	9901      	ldr	r1, [sp, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f7f8 fbc1 	bl	8000420 <__aeabi_dcmpeq>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d019      	beq.n	8007cd6 <pow+0x66>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	0020      	movs	r0, r4
 8007ca8:	0029      	movs	r1, r5
 8007caa:	f7f8 fbb9 	bl	8000420 <__aeabi_dcmpeq>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d146      	bne.n	8007d40 <pow+0xd0>
 8007cb2:	0020      	movs	r0, r4
 8007cb4:	0029      	movs	r1, r5
 8007cb6:	f000 f849 	bl	8007d4c <finite>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d029      	beq.n	8007d12 <pow+0xa2>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	0020      	movs	r0, r4
 8007cc4:	0029      	movs	r1, r5
 8007cc6:	f7f8 fbb1 	bl	800042c <__aeabi_dcmplt>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d021      	beq.n	8007d12 <pow+0xa2>
 8007cce:	f7ff ff9b 	bl	8007c08 <__errno>
 8007cd2:	2322      	movs	r3, #34	@ 0x22
 8007cd4:	e01c      	b.n	8007d10 <pow+0xa0>
 8007cd6:	0030      	movs	r0, r6
 8007cd8:	0039      	movs	r1, r7
 8007cda:	f000 f837 	bl	8007d4c <finite>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d11b      	bne.n	8007d1a <pow+0xaa>
 8007ce2:	9800      	ldr	r0, [sp, #0]
 8007ce4:	9901      	ldr	r1, [sp, #4]
 8007ce6:	f000 f831 	bl	8007d4c <finite>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d015      	beq.n	8007d1a <pow+0xaa>
 8007cee:	0020      	movs	r0, r4
 8007cf0:	0029      	movs	r1, r5
 8007cf2:	f000 f82b 	bl	8007d4c <finite>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d00f      	beq.n	8007d1a <pow+0xaa>
 8007cfa:	0032      	movs	r2, r6
 8007cfc:	003b      	movs	r3, r7
 8007cfe:	0030      	movs	r0, r6
 8007d00:	0039      	movs	r1, r7
 8007d02:	f7fa fab3 	bl	800226c <__aeabi_dcmpun>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d0e1      	beq.n	8007cce <pow+0x5e>
 8007d0a:	f7ff ff7d 	bl	8007c08 <__errno>
 8007d0e:	2321      	movs	r3, #33	@ 0x21
 8007d10:	6003      	str	r3, [r0, #0]
 8007d12:	0030      	movs	r0, r6
 8007d14:	0039      	movs	r1, r7
 8007d16:	b003      	add	sp, #12
 8007d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	0030      	movs	r0, r6
 8007d20:	0039      	movs	r1, r7
 8007d22:	f7f8 fb7d 	bl	8000420 <__aeabi_dcmpeq>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d0f3      	beq.n	8007d12 <pow+0xa2>
 8007d2a:	9800      	ldr	r0, [sp, #0]
 8007d2c:	9901      	ldr	r1, [sp, #4]
 8007d2e:	f000 f80d 	bl	8007d4c <finite>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d0ed      	beq.n	8007d12 <pow+0xa2>
 8007d36:	0020      	movs	r0, r4
 8007d38:	0029      	movs	r1, r5
 8007d3a:	f000 f807 	bl	8007d4c <finite>
 8007d3e:	e7c4      	b.n	8007cca <pow+0x5a>
 8007d40:	2600      	movs	r6, #0
 8007d42:	4f01      	ldr	r7, [pc, #4]	@ (8007d48 <pow+0xd8>)
 8007d44:	e7e5      	b.n	8007d12 <pow+0xa2>
 8007d46:	46c0      	nop			@ (mov r8, r8)
 8007d48:	3ff00000 	.word	0x3ff00000

08007d4c <finite>:
 8007d4c:	4b02      	ldr	r3, [pc, #8]	@ (8007d58 <finite+0xc>)
 8007d4e:	0048      	lsls	r0, r1, #1
 8007d50:	0840      	lsrs	r0, r0, #1
 8007d52:	18c0      	adds	r0, r0, r3
 8007d54:	0fc0      	lsrs	r0, r0, #31
 8007d56:	4770      	bx	lr
 8007d58:	80100000 	.word	0x80100000

08007d5c <__ieee754_pow>:
 8007d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d5e:	b095      	sub	sp, #84	@ 0x54
 8007d60:	9202      	str	r2, [sp, #8]
 8007d62:	9303      	str	r3, [sp, #12]
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	9a03      	ldr	r2, [sp, #12]
 8007d68:	9306      	str	r3, [sp, #24]
 8007d6a:	0052      	lsls	r2, r2, #1
 8007d6c:	9b02      	ldr	r3, [sp, #8]
 8007d6e:	0852      	lsrs	r2, r2, #1
 8007d70:	9204      	str	r2, [sp, #16]
 8007d72:	001a      	movs	r2, r3
 8007d74:	000f      	movs	r7, r1
 8007d76:	9904      	ldr	r1, [sp, #16]
 8007d78:	0006      	movs	r6, r0
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	d119      	bne.n	8007db2 <__ieee754_pow+0x56>
 8007d7e:	2180      	movs	r1, #128	@ 0x80
 8007d80:	0309      	lsls	r1, r1, #12
 8007d82:	4079      	eors	r1, r7
 8007d84:	0002      	movs	r2, r0
 8007d86:	000b      	movs	r3, r1
 8007d88:	1892      	adds	r2, r2, r2
 8007d8a:	415b      	adcs	r3, r3
 8007d8c:	499b      	ldr	r1, [pc, #620]	@ (8007ffc <__ieee754_pow+0x2a0>)
 8007d8e:	428b      	cmp	r3, r1
 8007d90:	d806      	bhi.n	8007da0 <__ieee754_pow+0x44>
 8007d92:	d001      	beq.n	8007d98 <__ieee754_pow+0x3c>
 8007d94:	f000 fcde 	bl	8008754 <__ieee754_pow+0x9f8>
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	d101      	bne.n	8007da0 <__ieee754_pow+0x44>
 8007d9c:	f000 fcda 	bl	8008754 <__ieee754_pow+0x9f8>
 8007da0:	9a02      	ldr	r2, [sp, #8]
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	0030      	movs	r0, r6
 8007da6:	0039      	movs	r1, r7
 8007da8:	f7f8 fc54 	bl	8000654 <__aeabi_dadd>
 8007dac:	9000      	str	r0, [sp, #0]
 8007dae:	9101      	str	r1, [sp, #4]
 8007db0:	e0af      	b.n	8007f12 <__ieee754_pow+0x1b6>
 8007db2:	4a93      	ldr	r2, [pc, #588]	@ (8008000 <__ieee754_pow+0x2a4>)
 8007db4:	007c      	lsls	r4, r7, #1
 8007db6:	9708      	str	r7, [sp, #32]
 8007db8:	900e      	str	r0, [sp, #56]	@ 0x38
 8007dba:	0864      	lsrs	r4, r4, #1
 8007dbc:	4294      	cmp	r4, r2
 8007dbe:	d809      	bhi.n	8007dd4 <__ieee754_pow+0x78>
 8007dc0:	d101      	bne.n	8007dc6 <__ieee754_pow+0x6a>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d1ec      	bne.n	8007da0 <__ieee754_pow+0x44>
 8007dc6:	9904      	ldr	r1, [sp, #16]
 8007dc8:	4a8d      	ldr	r2, [pc, #564]	@ (8008000 <__ieee754_pow+0x2a4>)
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	d802      	bhi.n	8007dd4 <__ieee754_pow+0x78>
 8007dce:	d10c      	bne.n	8007dea <__ieee754_pow+0x8e>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <__ieee754_pow+0x8e>
 8007dd4:	4b8b      	ldr	r3, [pc, #556]	@ (8008004 <__ieee754_pow+0x2a8>)
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	4333      	orrs	r3, r6
 8007dda:	d1e1      	bne.n	8007da0 <__ieee754_pow+0x44>
 8007ddc:	2180      	movs	r1, #128	@ 0x80
 8007dde:	9803      	ldr	r0, [sp, #12]
 8007de0:	0309      	lsls	r1, r1, #12
 8007de2:	4048      	eors	r0, r1
 8007de4:	0003      	movs	r3, r0
 8007de6:	9a02      	ldr	r2, [sp, #8]
 8007de8:	e7ce      	b.n	8007d88 <__ieee754_pow+0x2c>
 8007dea:	2500      	movs	r5, #0
 8007dec:	9a08      	ldr	r2, [sp, #32]
 8007dee:	940a      	str	r4, [sp, #40]	@ 0x28
 8007df0:	42aa      	cmp	r2, r5
 8007df2:	da68      	bge.n	8007ec6 <__ieee754_pow+0x16a>
 8007df4:	4a84      	ldr	r2, [pc, #528]	@ (8008008 <__ieee754_pow+0x2ac>)
 8007df6:	9904      	ldr	r1, [sp, #16]
 8007df8:	4291      	cmp	r1, r2
 8007dfa:	d863      	bhi.n	8007ec4 <__ieee754_pow+0x168>
 8007dfc:	4a83      	ldr	r2, [pc, #524]	@ (800800c <__ieee754_pow+0x2b0>)
 8007dfe:	4291      	cmp	r1, r2
 8007e00:	d910      	bls.n	8007e24 <__ieee754_pow+0xc8>
 8007e02:	150a      	asrs	r2, r1, #20
 8007e04:	4982      	ldr	r1, [pc, #520]	@ (8008010 <__ieee754_pow+0x2b4>)
 8007e06:	1852      	adds	r2, r2, r1
 8007e08:	2a14      	cmp	r2, #20
 8007e0a:	dd3b      	ble.n	8007e84 <__ieee754_pow+0x128>
 8007e0c:	2134      	movs	r1, #52	@ 0x34
 8007e0e:	1a89      	subs	r1, r1, r2
 8007e10:	9a02      	ldr	r2, [sp, #8]
 8007e12:	40ca      	lsrs	r2, r1
 8007e14:	0010      	movs	r0, r2
 8007e16:	4088      	lsls	r0, r1
 8007e18:	4298      	cmp	r0, r3
 8007e1a:	d103      	bne.n	8007e24 <__ieee754_pow+0xc8>
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	3502      	adds	r5, #2
 8007e20:	400a      	ands	r2, r1
 8007e22:	1aad      	subs	r5, r5, r2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d03d      	beq.n	8007ea4 <__ieee754_pow+0x148>
 8007e28:	0030      	movs	r0, r6
 8007e2a:	0039      	movs	r1, r7
 8007e2c:	f000 fcc2 	bl	80087b4 <fabs>
 8007e30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e32:	9000      	str	r0, [sp, #0]
 8007e34:	9101      	str	r1, [sp, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d000      	beq.n	8007e3c <__ieee754_pow+0xe0>
 8007e3a:	e093      	b.n	8007f64 <__ieee754_pow+0x208>
 8007e3c:	4a75      	ldr	r2, [pc, #468]	@ (8008014 <__ieee754_pow+0x2b8>)
 8007e3e:	00bb      	lsls	r3, r7, #2
 8007e40:	089b      	lsrs	r3, r3, #2
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d002      	beq.n	8007e4c <__ieee754_pow+0xf0>
 8007e46:	2c00      	cmp	r4, #0
 8007e48:	d000      	beq.n	8007e4c <__ieee754_pow+0xf0>
 8007e4a:	e08b      	b.n	8007f64 <__ieee754_pow+0x208>
 8007e4c:	9b06      	ldr	r3, [sp, #24]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	da07      	bge.n	8007e62 <__ieee754_pow+0x106>
 8007e52:	9a00      	ldr	r2, [sp, #0]
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	2000      	movs	r0, #0
 8007e58:	496e      	ldr	r1, [pc, #440]	@ (8008014 <__ieee754_pow+0x2b8>)
 8007e5a:	f7f8 ff5f 	bl	8000d1c <__aeabi_ddiv>
 8007e5e:	9000      	str	r0, [sp, #0]
 8007e60:	9101      	str	r1, [sp, #4]
 8007e62:	9b08      	ldr	r3, [sp, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da54      	bge.n	8007f12 <__ieee754_pow+0x1b6>
 8007e68:	4b66      	ldr	r3, [pc, #408]	@ (8008004 <__ieee754_pow+0x2a8>)
 8007e6a:	18e4      	adds	r4, r4, r3
 8007e6c:	432c      	orrs	r4, r5
 8007e6e:	d000      	beq.n	8007e72 <__ieee754_pow+0x116>
 8007e70:	e06d      	b.n	8007f4e <__ieee754_pow+0x1f2>
 8007e72:	9a00      	ldr	r2, [sp, #0]
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	0010      	movs	r0, r2
 8007e78:	0019      	movs	r1, r3
 8007e7a:	f7f9 fe5b 	bl	8001b34 <__aeabi_dsub>
 8007e7e:	0002      	movs	r2, r0
 8007e80:	000b      	movs	r3, r1
 8007e82:	e01c      	b.n	8007ebe <__ieee754_pow+0x162>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1cf      	bne.n	8007e28 <__ieee754_pow+0xcc>
 8007e88:	3314      	adds	r3, #20
 8007e8a:	1a9a      	subs	r2, r3, r2
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	4113      	asrs	r3, r2
 8007e90:	0019      	movs	r1, r3
 8007e92:	4091      	lsls	r1, r2
 8007e94:	000a      	movs	r2, r1
 8007e96:	9904      	ldr	r1, [sp, #16]
 8007e98:	428a      	cmp	r2, r1
 8007e9a:	d103      	bne.n	8007ea4 <__ieee754_pow+0x148>
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	2502      	movs	r5, #2
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	1aed      	subs	r5, r5, r3
 8007ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8008014 <__ieee754_pow+0x2b8>)
 8007ea6:	9a04      	ldr	r2, [sp, #16]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d136      	bne.n	8007f1a <__ieee754_pow+0x1be>
 8007eac:	9b06      	ldr	r3, [sp, #24]
 8007eae:	9600      	str	r6, [sp, #0]
 8007eb0:	9701      	str	r7, [sp, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	da2d      	bge.n	8007f12 <__ieee754_pow+0x1b6>
 8007eb6:	0032      	movs	r2, r6
 8007eb8:	003b      	movs	r3, r7
 8007eba:	2000      	movs	r0, #0
 8007ebc:	4955      	ldr	r1, [pc, #340]	@ (8008014 <__ieee754_pow+0x2b8>)
 8007ebe:	f7f8 ff2d 	bl	8000d1c <__aeabi_ddiv>
 8007ec2:	e773      	b.n	8007dac <__ieee754_pow+0x50>
 8007ec4:	2502      	movs	r5, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1ae      	bne.n	8007e28 <__ieee754_pow+0xcc>
 8007eca:	9b04      	ldr	r3, [sp, #16]
 8007ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8008000 <__ieee754_pow+0x2a4>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d1e8      	bne.n	8007ea4 <__ieee754_pow+0x148>
 8007ed2:	4b4c      	ldr	r3, [pc, #304]	@ (8008004 <__ieee754_pow+0x2a8>)
 8007ed4:	18e3      	adds	r3, r4, r3
 8007ed6:	4333      	orrs	r3, r6
 8007ed8:	d101      	bne.n	8007ede <__ieee754_pow+0x182>
 8007eda:	f000 fc3b 	bl	8008754 <__ieee754_pow+0x9f8>
 8007ede:	4b4b      	ldr	r3, [pc, #300]	@ (800800c <__ieee754_pow+0x2b0>)
 8007ee0:	429c      	cmp	r4, r3
 8007ee2:	d909      	bls.n	8007ef8 <__ieee754_pow+0x19c>
 8007ee4:	9b06      	ldr	r3, [sp, #24]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	da01      	bge.n	8007eee <__ieee754_pow+0x192>
 8007eea:	f000 fc37 	bl	800875c <__ieee754_pow+0xa00>
 8007eee:	9b02      	ldr	r3, [sp, #8]
 8007ef0:	9c03      	ldr	r4, [sp, #12]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	9401      	str	r4, [sp, #4]
 8007ef6:	e00c      	b.n	8007f12 <__ieee754_pow+0x1b6>
 8007ef8:	9b06      	ldr	r3, [sp, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	db01      	blt.n	8007f02 <__ieee754_pow+0x1a6>
 8007efe:	f000 fc2d 	bl	800875c <__ieee754_pow+0xa00>
 8007f02:	2280      	movs	r2, #128	@ 0x80
 8007f04:	0612      	lsls	r2, r2, #24
 8007f06:	4694      	mov	ip, r2
 8007f08:	9b02      	ldr	r3, [sp, #8]
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	4463      	add	r3, ip
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	9800      	ldr	r0, [sp, #0]
 8007f14:	9901      	ldr	r1, [sp, #4]
 8007f16:	b015      	add	sp, #84	@ 0x54
 8007f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f1a:	2380      	movs	r3, #128	@ 0x80
 8007f1c:	9a06      	ldr	r2, [sp, #24]
 8007f1e:	05db      	lsls	r3, r3, #23
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d106      	bne.n	8007f32 <__ieee754_pow+0x1d6>
 8007f24:	0032      	movs	r2, r6
 8007f26:	003b      	movs	r3, r7
 8007f28:	0030      	movs	r0, r6
 8007f2a:	0039      	movs	r1, r7
 8007f2c:	f7f9 fb3a 	bl	80015a4 <__aeabi_dmul>
 8007f30:	e73c      	b.n	8007dac <__ieee754_pow+0x50>
 8007f32:	4b39      	ldr	r3, [pc, #228]	@ (8008018 <__ieee754_pow+0x2bc>)
 8007f34:	9a06      	ldr	r2, [sp, #24]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d000      	beq.n	8007f3c <__ieee754_pow+0x1e0>
 8007f3a:	e775      	b.n	8007e28 <__ieee754_pow+0xcc>
 8007f3c:	9b08      	ldr	r3, [sp, #32]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da00      	bge.n	8007f44 <__ieee754_pow+0x1e8>
 8007f42:	e771      	b.n	8007e28 <__ieee754_pow+0xcc>
 8007f44:	0030      	movs	r0, r6
 8007f46:	0039      	movs	r1, r7
 8007f48:	f000 fcd2 	bl	80088f0 <__ieee754_sqrt>
 8007f4c:	e72e      	b.n	8007dac <__ieee754_pow+0x50>
 8007f4e:	2d01      	cmp	r5, #1
 8007f50:	d1df      	bne.n	8007f12 <__ieee754_pow+0x1b6>
 8007f52:	9800      	ldr	r0, [sp, #0]
 8007f54:	2180      	movs	r1, #128	@ 0x80
 8007f56:	0002      	movs	r2, r0
 8007f58:	9801      	ldr	r0, [sp, #4]
 8007f5a:	0609      	lsls	r1, r1, #24
 8007f5c:	1843      	adds	r3, r0, r1
 8007f5e:	9200      	str	r2, [sp, #0]
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	e7d6      	b.n	8007f12 <__ieee754_pow+0x1b6>
 8007f64:	0ffb      	lsrs	r3, r7, #31
 8007f66:	3b01      	subs	r3, #1
 8007f68:	001a      	movs	r2, r3
 8007f6a:	432a      	orrs	r2, r5
 8007f6c:	d104      	bne.n	8007f78 <__ieee754_pow+0x21c>
 8007f6e:	0032      	movs	r2, r6
 8007f70:	003b      	movs	r3, r7
 8007f72:	0030      	movs	r0, r6
 8007f74:	0039      	movs	r1, r7
 8007f76:	e780      	b.n	8007e7a <__ieee754_pow+0x11e>
 8007f78:	3d01      	subs	r5, #1
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	431d      	orrs	r5, r3
 8007f7e:	d015      	beq.n	8007fac <__ieee754_pow+0x250>
 8007f80:	4b24      	ldr	r3, [pc, #144]	@ (8008014 <__ieee754_pow+0x2b8>)
 8007f82:	9208      	str	r2, [sp, #32]
 8007f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f86:	2384      	movs	r3, #132	@ 0x84
 8007f88:	9a04      	ldr	r2, [sp, #16]
 8007f8a:	05db      	lsls	r3, r3, #23
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d800      	bhi.n	8007f92 <__ieee754_pow+0x236>
 8007f90:	e102      	b.n	8008198 <__ieee754_pow+0x43c>
 8007f92:	4b22      	ldr	r3, [pc, #136]	@ (800801c <__ieee754_pow+0x2c0>)
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d912      	bls.n	8007fbe <__ieee754_pow+0x262>
 8007f98:	4b1c      	ldr	r3, [pc, #112]	@ (800800c <__ieee754_pow+0x2b0>)
 8007f9a:	429c      	cmp	r4, r3
 8007f9c:	d808      	bhi.n	8007fb0 <__ieee754_pow+0x254>
 8007f9e:	9b06      	ldr	r3, [sp, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	da08      	bge.n	8007fb6 <__ieee754_pow+0x25a>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	f000 fc9b 	bl	80088e0 <__math_oflow>
 8007faa:	e6ff      	b.n	8007dac <__ieee754_pow+0x50>
 8007fac:	4b1c      	ldr	r3, [pc, #112]	@ (8008020 <__ieee754_pow+0x2c4>)
 8007fae:	e7e8      	b.n	8007f82 <__ieee754_pow+0x226>
 8007fb0:	9b06      	ldr	r3, [sp, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dcf6      	bgt.n	8007fa4 <__ieee754_pow+0x248>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f000 fc8b 	bl	80088d2 <__math_uflow>
 8007fbc:	e6f6      	b.n	8007dac <__ieee754_pow+0x50>
 8007fbe:	4b19      	ldr	r3, [pc, #100]	@ (8008024 <__ieee754_pow+0x2c8>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	d80b      	bhi.n	8007fdc <__ieee754_pow+0x280>
 8007fc4:	9808      	ldr	r0, [sp, #32]
 8007fc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f7f8 fa2e 	bl	800042c <__aeabi_dcmplt>
 8007fd0:	1e43      	subs	r3, r0, #1
 8007fd2:	4198      	sbcs	r0, r3
 8007fd4:	9b06      	ldr	r3, [sp, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	daee      	bge.n	8007fb8 <__ieee754_pow+0x25c>
 8007fda:	e7e4      	b.n	8007fa6 <__ieee754_pow+0x24a>
 8007fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <__ieee754_pow+0x2b8>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	d921      	bls.n	8008028 <__ieee754_pow+0x2cc>
 8007fe4:	9808      	ldr	r0, [sp, #32]
 8007fe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f7f8 fa1f 	bl	800042c <__aeabi_dcmplt>
 8007fee:	1e43      	subs	r3, r0, #1
 8007ff0:	4198      	sbcs	r0, r3
 8007ff2:	9b06      	ldr	r3, [sp, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dcd6      	bgt.n	8007fa6 <__ieee754_pow+0x24a>
 8007ff8:	e7de      	b.n	8007fb8 <__ieee754_pow+0x25c>
 8007ffa:	46c0      	nop			@ (mov r8, r8)
 8007ffc:	fff00000 	.word	0xfff00000
 8008000:	7ff00000 	.word	0x7ff00000
 8008004:	c0100000 	.word	0xc0100000
 8008008:	433fffff 	.word	0x433fffff
 800800c:	3fefffff 	.word	0x3fefffff
 8008010:	fffffc01 	.word	0xfffffc01
 8008014:	3ff00000 	.word	0x3ff00000
 8008018:	3fe00000 	.word	0x3fe00000
 800801c:	43f00000 	.word	0x43f00000
 8008020:	bff00000 	.word	0xbff00000
 8008024:	3feffffe 	.word	0x3feffffe
 8008028:	9800      	ldr	r0, [sp, #0]
 800802a:	9901      	ldr	r1, [sp, #4]
 800802c:	4b4f      	ldr	r3, [pc, #316]	@ (800816c <__ieee754_pow+0x410>)
 800802e:	f7f9 fd81 	bl	8001b34 <__aeabi_dsub>
 8008032:	22c0      	movs	r2, #192	@ 0xc0
 8008034:	4b4e      	ldr	r3, [pc, #312]	@ (8008170 <__ieee754_pow+0x414>)
 8008036:	05d2      	lsls	r2, r2, #23
 8008038:	0006      	movs	r6, r0
 800803a:	000f      	movs	r7, r1
 800803c:	f7f9 fab2 	bl	80015a4 <__aeabi_dmul>
 8008040:	4a4c      	ldr	r2, [pc, #304]	@ (8008174 <__ieee754_pow+0x418>)
 8008042:	9004      	str	r0, [sp, #16]
 8008044:	9105      	str	r1, [sp, #20]
 8008046:	4b4c      	ldr	r3, [pc, #304]	@ (8008178 <__ieee754_pow+0x41c>)
 8008048:	0030      	movs	r0, r6
 800804a:	0039      	movs	r1, r7
 800804c:	f7f9 faaa 	bl	80015a4 <__aeabi_dmul>
 8008050:	2200      	movs	r2, #0
 8008052:	9000      	str	r0, [sp, #0]
 8008054:	9101      	str	r1, [sp, #4]
 8008056:	4b49      	ldr	r3, [pc, #292]	@ (800817c <__ieee754_pow+0x420>)
 8008058:	0030      	movs	r0, r6
 800805a:	0039      	movs	r1, r7
 800805c:	f7f9 faa2 	bl	80015a4 <__aeabi_dmul>
 8008060:	0002      	movs	r2, r0
 8008062:	000b      	movs	r3, r1
 8008064:	4846      	ldr	r0, [pc, #280]	@ (8008180 <__ieee754_pow+0x424>)
 8008066:	4947      	ldr	r1, [pc, #284]	@ (8008184 <__ieee754_pow+0x428>)
 8008068:	f7f9 fd64 	bl	8001b34 <__aeabi_dsub>
 800806c:	0032      	movs	r2, r6
 800806e:	003b      	movs	r3, r7
 8008070:	f7f9 fa98 	bl	80015a4 <__aeabi_dmul>
 8008074:	0002      	movs	r2, r0
 8008076:	000b      	movs	r3, r1
 8008078:	2000      	movs	r0, #0
 800807a:	4943      	ldr	r1, [pc, #268]	@ (8008188 <__ieee754_pow+0x42c>)
 800807c:	f7f9 fd5a 	bl	8001b34 <__aeabi_dsub>
 8008080:	0032      	movs	r2, r6
 8008082:	0004      	movs	r4, r0
 8008084:	000d      	movs	r5, r1
 8008086:	003b      	movs	r3, r7
 8008088:	0030      	movs	r0, r6
 800808a:	0039      	movs	r1, r7
 800808c:	f7f9 fa8a 	bl	80015a4 <__aeabi_dmul>
 8008090:	0002      	movs	r2, r0
 8008092:	000b      	movs	r3, r1
 8008094:	0020      	movs	r0, r4
 8008096:	0029      	movs	r1, r5
 8008098:	f7f9 fa84 	bl	80015a4 <__aeabi_dmul>
 800809c:	4a3b      	ldr	r2, [pc, #236]	@ (800818c <__ieee754_pow+0x430>)
 800809e:	4b34      	ldr	r3, [pc, #208]	@ (8008170 <__ieee754_pow+0x414>)
 80080a0:	f7f9 fa80 	bl	80015a4 <__aeabi_dmul>
 80080a4:	0002      	movs	r2, r0
 80080a6:	000b      	movs	r3, r1
 80080a8:	9800      	ldr	r0, [sp, #0]
 80080aa:	9901      	ldr	r1, [sp, #4]
 80080ac:	f7f9 fd42 	bl	8001b34 <__aeabi_dsub>
 80080b0:	0002      	movs	r2, r0
 80080b2:	000b      	movs	r3, r1
 80080b4:	0004      	movs	r4, r0
 80080b6:	000d      	movs	r5, r1
 80080b8:	9804      	ldr	r0, [sp, #16]
 80080ba:	9905      	ldr	r1, [sp, #20]
 80080bc:	f7f8 faca 	bl	8000654 <__aeabi_dadd>
 80080c0:	9a04      	ldr	r2, [sp, #16]
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	2000      	movs	r0, #0
 80080c6:	9000      	str	r0, [sp, #0]
 80080c8:	9101      	str	r1, [sp, #4]
 80080ca:	f7f9 fd33 	bl	8001b34 <__aeabi_dsub>
 80080ce:	0002      	movs	r2, r0
 80080d0:	000b      	movs	r3, r1
 80080d2:	0020      	movs	r0, r4
 80080d4:	0029      	movs	r1, r5
 80080d6:	f7f9 fd2d 	bl	8001b34 <__aeabi_dsub>
 80080da:	9b02      	ldr	r3, [sp, #8]
 80080dc:	9c03      	ldr	r4, [sp, #12]
 80080de:	9304      	str	r3, [sp, #16]
 80080e0:	9405      	str	r4, [sp, #20]
 80080e2:	2300      	movs	r3, #0
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	9c04      	ldr	r4, [sp, #16]
 80080e8:	9d05      	ldr	r5, [sp, #20]
 80080ea:	0006      	movs	r6, r0
 80080ec:	000f      	movs	r7, r1
 80080ee:	9802      	ldr	r0, [sp, #8]
 80080f0:	9903      	ldr	r1, [sp, #12]
 80080f2:	0022      	movs	r2, r4
 80080f4:	002b      	movs	r3, r5
 80080f6:	f7f9 fd1d 	bl	8001b34 <__aeabi_dsub>
 80080fa:	9a00      	ldr	r2, [sp, #0]
 80080fc:	9b01      	ldr	r3, [sp, #4]
 80080fe:	f7f9 fa51 	bl	80015a4 <__aeabi_dmul>
 8008102:	9a02      	ldr	r2, [sp, #8]
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	9006      	str	r0, [sp, #24]
 8008108:	9107      	str	r1, [sp, #28]
 800810a:	0030      	movs	r0, r6
 800810c:	0039      	movs	r1, r7
 800810e:	f7f9 fa49 	bl	80015a4 <__aeabi_dmul>
 8008112:	0002      	movs	r2, r0
 8008114:	000b      	movs	r3, r1
 8008116:	9806      	ldr	r0, [sp, #24]
 8008118:	9907      	ldr	r1, [sp, #28]
 800811a:	f7f8 fa9b 	bl	8000654 <__aeabi_dadd>
 800811e:	0022      	movs	r2, r4
 8008120:	002b      	movs	r3, r5
 8008122:	9002      	str	r0, [sp, #8]
 8008124:	9103      	str	r1, [sp, #12]
 8008126:	9800      	ldr	r0, [sp, #0]
 8008128:	9901      	ldr	r1, [sp, #4]
 800812a:	f7f9 fa3b 	bl	80015a4 <__aeabi_dmul>
 800812e:	000b      	movs	r3, r1
 8008130:	0002      	movs	r2, r0
 8008132:	0006      	movs	r6, r0
 8008134:	000f      	movs	r7, r1
 8008136:	9802      	ldr	r0, [sp, #8]
 8008138:	9903      	ldr	r1, [sp, #12]
 800813a:	f7f8 fa8b 	bl	8000654 <__aeabi_dadd>
 800813e:	9000      	str	r0, [sp, #0]
 8008140:	9101      	str	r1, [sp, #4]
 8008142:	9c01      	ldr	r4, [sp, #4]
 8008144:	4b12      	ldr	r3, [pc, #72]	@ (8008190 <__ieee754_pow+0x434>)
 8008146:	9406      	str	r4, [sp, #24]
 8008148:	429c      	cmp	r4, r3
 800814a:	dc00      	bgt.n	800814e <__ieee754_pow+0x3f2>
 800814c:	e222      	b.n	8008594 <__ieee754_pow+0x838>
 800814e:	4a11      	ldr	r2, [pc, #68]	@ (8008194 <__ieee754_pow+0x438>)
 8008150:	18a3      	adds	r3, r4, r2
 8008152:	9a00      	ldr	r2, [sp, #0]
 8008154:	4313      	orrs	r3, r2
 8008156:	d100      	bne.n	800815a <__ieee754_pow+0x3fe>
 8008158:	e1a0      	b.n	800849c <__ieee754_pow+0x740>
 800815a:	9808      	ldr	r0, [sp, #32]
 800815c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	f7f8 f963 	bl	800042c <__aeabi_dcmplt>
 8008166:	1e43      	subs	r3, r0, #1
 8008168:	4198      	sbcs	r0, r3
 800816a:	e71c      	b.n	8007fa6 <__ieee754_pow+0x24a>
 800816c:	3ff00000 	.word	0x3ff00000
 8008170:	3ff71547 	.word	0x3ff71547
 8008174:	f85ddf44 	.word	0xf85ddf44
 8008178:	3e54ae0b 	.word	0x3e54ae0b
 800817c:	3fd00000 	.word	0x3fd00000
 8008180:	55555555 	.word	0x55555555
 8008184:	3fd55555 	.word	0x3fd55555
 8008188:	3fe00000 	.word	0x3fe00000
 800818c:	652b82fe 	.word	0x652b82fe
 8008190:	408fffff 	.word	0x408fffff
 8008194:	bf700000 	.word	0xbf700000
 8008198:	4be0      	ldr	r3, [pc, #896]	@ (800851c <__ieee754_pow+0x7c0>)
 800819a:	2200      	movs	r2, #0
 800819c:	423b      	tst	r3, r7
 800819e:	d10b      	bne.n	80081b8 <__ieee754_pow+0x45c>
 80081a0:	9800      	ldr	r0, [sp, #0]
 80081a2:	9901      	ldr	r1, [sp, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	4bde      	ldr	r3, [pc, #888]	@ (8008520 <__ieee754_pow+0x7c4>)
 80081a8:	f7f9 f9fc 	bl	80015a4 <__aeabi_dmul>
 80081ac:	2235      	movs	r2, #53	@ 0x35
 80081ae:	9000      	str	r0, [sp, #0]
 80081b0:	9101      	str	r1, [sp, #4]
 80081b2:	9b01      	ldr	r3, [sp, #4]
 80081b4:	4252      	negs	r2, r2
 80081b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80081b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ba:	49da      	ldr	r1, [pc, #872]	@ (8008524 <__ieee754_pow+0x7c8>)
 80081bc:	151b      	asrs	r3, r3, #20
 80081be:	185b      	adds	r3, r3, r1
 80081c0:	189b      	adds	r3, r3, r2
 80081c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80081c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081c6:	4dd8      	ldr	r5, [pc, #864]	@ (8008528 <__ieee754_pow+0x7cc>)
 80081c8:	031b      	lsls	r3, r3, #12
 80081ca:	4ad8      	ldr	r2, [pc, #864]	@ (800852c <__ieee754_pow+0x7d0>)
 80081cc:	0b1b      	lsrs	r3, r3, #12
 80081ce:	2600      	movs	r6, #0
 80081d0:	431d      	orrs	r5, r3
 80081d2:	4293      	cmp	r3, r2
 80081d4:	dd09      	ble.n	80081ea <__ieee754_pow+0x48e>
 80081d6:	4ad6      	ldr	r2, [pc, #856]	@ (8008530 <__ieee754_pow+0x7d4>)
 80081d8:	3601      	adds	r6, #1
 80081da:	4293      	cmp	r3, r2
 80081dc:	dd05      	ble.n	80081ea <__ieee754_pow+0x48e>
 80081de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081e0:	199b      	adds	r3, r3, r6
 80081e2:	2600      	movs	r6, #0
 80081e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80081e6:	4bd3      	ldr	r3, [pc, #844]	@ (8008534 <__ieee754_pow+0x7d8>)
 80081e8:	18ed      	adds	r5, r5, r3
 80081ea:	9800      	ldr	r0, [sp, #0]
 80081ec:	9901      	ldr	r1, [sp, #4]
 80081ee:	0029      	movs	r1, r5
 80081f0:	4bd1      	ldr	r3, [pc, #836]	@ (8008538 <__ieee754_pow+0x7dc>)
 80081f2:	00f2      	lsls	r2, r6, #3
 80081f4:	189b      	adds	r3, r3, r2
 80081f6:	685c      	ldr	r4, [r3, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	920f      	str	r2, [sp, #60]	@ 0x3c
 80081fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80081fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008200:	001a      	movs	r2, r3
 8008202:	0023      	movs	r3, r4
 8008204:	900c      	str	r0, [sp, #48]	@ 0x30
 8008206:	910d      	str	r1, [sp, #52]	@ 0x34
 8008208:	f7f9 fc94 	bl	8001b34 <__aeabi_dsub>
 800820c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800820e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008210:	9010      	str	r0, [sp, #64]	@ 0x40
 8008212:	9111      	str	r1, [sp, #68]	@ 0x44
 8008214:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008216:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008218:	f7f8 fa1c 	bl	8000654 <__aeabi_dadd>
 800821c:	0002      	movs	r2, r0
 800821e:	000b      	movs	r3, r1
 8008220:	2000      	movs	r0, #0
 8008222:	49c1      	ldr	r1, [pc, #772]	@ (8008528 <__ieee754_pow+0x7cc>)
 8008224:	f7f8 fd7a 	bl	8000d1c <__aeabi_ddiv>
 8008228:	0002      	movs	r2, r0
 800822a:	000b      	movs	r3, r1
 800822c:	9012      	str	r0, [sp, #72]	@ 0x48
 800822e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008230:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008232:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008234:	f7f9 f9b6 	bl	80015a4 <__aeabi_dmul>
 8008238:	9006      	str	r0, [sp, #24]
 800823a:	9107      	str	r1, [sp, #28]
 800823c:	9b06      	ldr	r3, [sp, #24]
 800823e:	9c07      	ldr	r4, [sp, #28]
 8008240:	2180      	movs	r1, #128	@ 0x80
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	9405      	str	r4, [sp, #20]
 8008246:	2080      	movs	r0, #128	@ 0x80
 8008248:	2300      	movs	r3, #0
 800824a:	2200      	movs	r2, #0
 800824c:	106d      	asrs	r5, r5, #1
 800824e:	0589      	lsls	r1, r1, #22
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	4329      	orrs	r1, r5
 8008254:	0300      	lsls	r0, r0, #12
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	9c05      	ldr	r4, [sp, #20]
 800825a:	1809      	adds	r1, r1, r0
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	9401      	str	r4, [sp, #4]
 8008260:	04b6      	lsls	r6, r6, #18
 8008262:	198b      	adds	r3, r1, r6
 8008264:	9800      	ldr	r0, [sp, #0]
 8008266:	9901      	ldr	r1, [sp, #4]
 8008268:	0014      	movs	r4, r2
 800826a:	001d      	movs	r5, r3
 800826c:	f7f9 f99a 	bl	80015a4 <__aeabi_dmul>
 8008270:	0002      	movs	r2, r0
 8008272:	000b      	movs	r3, r1
 8008274:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008276:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008278:	f7f9 fc5c 	bl	8001b34 <__aeabi_dsub>
 800827c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800827e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008280:	0006      	movs	r6, r0
 8008282:	000f      	movs	r7, r1
 8008284:	0020      	movs	r0, r4
 8008286:	0029      	movs	r1, r5
 8008288:	f7f9 fc54 	bl	8001b34 <__aeabi_dsub>
 800828c:	0002      	movs	r2, r0
 800828e:	000b      	movs	r3, r1
 8008290:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008292:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008294:	f7f9 fc4e 	bl	8001b34 <__aeabi_dsub>
 8008298:	9a00      	ldr	r2, [sp, #0]
 800829a:	9b01      	ldr	r3, [sp, #4]
 800829c:	f7f9 f982 	bl	80015a4 <__aeabi_dmul>
 80082a0:	0002      	movs	r2, r0
 80082a2:	000b      	movs	r3, r1
 80082a4:	0030      	movs	r0, r6
 80082a6:	0039      	movs	r1, r7
 80082a8:	f7f9 fc44 	bl	8001b34 <__aeabi_dsub>
 80082ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80082ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082b0:	f7f9 f978 	bl	80015a4 <__aeabi_dmul>
 80082b4:	9a06      	ldr	r2, [sp, #24]
 80082b6:	9b07      	ldr	r3, [sp, #28]
 80082b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80082ba:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082bc:	0010      	movs	r0, r2
 80082be:	0019      	movs	r1, r3
 80082c0:	f7f9 f970 	bl	80015a4 <__aeabi_dmul>
 80082c4:	0006      	movs	r6, r0
 80082c6:	000f      	movs	r7, r1
 80082c8:	4a9c      	ldr	r2, [pc, #624]	@ (800853c <__ieee754_pow+0x7e0>)
 80082ca:	4b9d      	ldr	r3, [pc, #628]	@ (8008540 <__ieee754_pow+0x7e4>)
 80082cc:	f7f9 f96a 	bl	80015a4 <__aeabi_dmul>
 80082d0:	4a9c      	ldr	r2, [pc, #624]	@ (8008544 <__ieee754_pow+0x7e8>)
 80082d2:	4b9d      	ldr	r3, [pc, #628]	@ (8008548 <__ieee754_pow+0x7ec>)
 80082d4:	f7f8 f9be 	bl	8000654 <__aeabi_dadd>
 80082d8:	0032      	movs	r2, r6
 80082da:	003b      	movs	r3, r7
 80082dc:	f7f9 f962 	bl	80015a4 <__aeabi_dmul>
 80082e0:	4a9a      	ldr	r2, [pc, #616]	@ (800854c <__ieee754_pow+0x7f0>)
 80082e2:	4b9b      	ldr	r3, [pc, #620]	@ (8008550 <__ieee754_pow+0x7f4>)
 80082e4:	f7f8 f9b6 	bl	8000654 <__aeabi_dadd>
 80082e8:	0032      	movs	r2, r6
 80082ea:	003b      	movs	r3, r7
 80082ec:	f7f9 f95a 	bl	80015a4 <__aeabi_dmul>
 80082f0:	4a98      	ldr	r2, [pc, #608]	@ (8008554 <__ieee754_pow+0x7f8>)
 80082f2:	4b99      	ldr	r3, [pc, #612]	@ (8008558 <__ieee754_pow+0x7fc>)
 80082f4:	f7f8 f9ae 	bl	8000654 <__aeabi_dadd>
 80082f8:	0032      	movs	r2, r6
 80082fa:	003b      	movs	r3, r7
 80082fc:	f7f9 f952 	bl	80015a4 <__aeabi_dmul>
 8008300:	4a96      	ldr	r2, [pc, #600]	@ (800855c <__ieee754_pow+0x800>)
 8008302:	4b97      	ldr	r3, [pc, #604]	@ (8008560 <__ieee754_pow+0x804>)
 8008304:	f7f8 f9a6 	bl	8000654 <__aeabi_dadd>
 8008308:	0032      	movs	r2, r6
 800830a:	003b      	movs	r3, r7
 800830c:	f7f9 f94a 	bl	80015a4 <__aeabi_dmul>
 8008310:	4a94      	ldr	r2, [pc, #592]	@ (8008564 <__ieee754_pow+0x808>)
 8008312:	4b95      	ldr	r3, [pc, #596]	@ (8008568 <__ieee754_pow+0x80c>)
 8008314:	f7f8 f99e 	bl	8000654 <__aeabi_dadd>
 8008318:	0032      	movs	r2, r6
 800831a:	0004      	movs	r4, r0
 800831c:	000d      	movs	r5, r1
 800831e:	003b      	movs	r3, r7
 8008320:	0030      	movs	r0, r6
 8008322:	0039      	movs	r1, r7
 8008324:	f7f9 f93e 	bl	80015a4 <__aeabi_dmul>
 8008328:	0002      	movs	r2, r0
 800832a:	000b      	movs	r3, r1
 800832c:	0020      	movs	r0, r4
 800832e:	0029      	movs	r1, r5
 8008330:	f7f9 f938 	bl	80015a4 <__aeabi_dmul>
 8008334:	9a00      	ldr	r2, [sp, #0]
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	0004      	movs	r4, r0
 800833a:	000d      	movs	r5, r1
 800833c:	9806      	ldr	r0, [sp, #24]
 800833e:	9907      	ldr	r1, [sp, #28]
 8008340:	f7f8 f988 	bl	8000654 <__aeabi_dadd>
 8008344:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008348:	f7f9 f92c 	bl	80015a4 <__aeabi_dmul>
 800834c:	0022      	movs	r2, r4
 800834e:	002b      	movs	r3, r5
 8008350:	f7f8 f980 	bl	8000654 <__aeabi_dadd>
 8008354:	9a00      	ldr	r2, [sp, #0]
 8008356:	9b01      	ldr	r3, [sp, #4]
 8008358:	900c      	str	r0, [sp, #48]	@ 0x30
 800835a:	910d      	str	r1, [sp, #52]	@ 0x34
 800835c:	0010      	movs	r0, r2
 800835e:	0019      	movs	r1, r3
 8008360:	f7f9 f920 	bl	80015a4 <__aeabi_dmul>
 8008364:	2200      	movs	r2, #0
 8008366:	4b81      	ldr	r3, [pc, #516]	@ (800856c <__ieee754_pow+0x810>)
 8008368:	0004      	movs	r4, r0
 800836a:	000d      	movs	r5, r1
 800836c:	f7f8 f972 	bl	8000654 <__aeabi_dadd>
 8008370:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008374:	f7f8 f96e 	bl	8000654 <__aeabi_dadd>
 8008378:	2000      	movs	r0, #0
 800837a:	000f      	movs	r7, r1
 800837c:	0006      	movs	r6, r0
 800837e:	0002      	movs	r2, r0
 8008380:	000b      	movs	r3, r1
 8008382:	9800      	ldr	r0, [sp, #0]
 8008384:	9901      	ldr	r1, [sp, #4]
 8008386:	f7f9 f90d 	bl	80015a4 <__aeabi_dmul>
 800838a:	2200      	movs	r2, #0
 800838c:	9000      	str	r0, [sp, #0]
 800838e:	9101      	str	r1, [sp, #4]
 8008390:	4b76      	ldr	r3, [pc, #472]	@ (800856c <__ieee754_pow+0x810>)
 8008392:	0030      	movs	r0, r6
 8008394:	0039      	movs	r1, r7
 8008396:	f7f9 fbcd 	bl	8001b34 <__aeabi_dsub>
 800839a:	0022      	movs	r2, r4
 800839c:	002b      	movs	r3, r5
 800839e:	f7f9 fbc9 	bl	8001b34 <__aeabi_dsub>
 80083a2:	0002      	movs	r2, r0
 80083a4:	000b      	movs	r3, r1
 80083a6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80083a8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80083aa:	f7f9 fbc3 	bl	8001b34 <__aeabi_dsub>
 80083ae:	9a06      	ldr	r2, [sp, #24]
 80083b0:	9b07      	ldr	r3, [sp, #28]
 80083b2:	f7f9 f8f7 	bl	80015a4 <__aeabi_dmul>
 80083b6:	0032      	movs	r2, r6
 80083b8:	0004      	movs	r4, r0
 80083ba:	000d      	movs	r5, r1
 80083bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083c0:	003b      	movs	r3, r7
 80083c2:	f7f9 f8ef 	bl	80015a4 <__aeabi_dmul>
 80083c6:	0002      	movs	r2, r0
 80083c8:	000b      	movs	r3, r1
 80083ca:	0020      	movs	r0, r4
 80083cc:	0029      	movs	r1, r5
 80083ce:	f7f8 f941 	bl	8000654 <__aeabi_dadd>
 80083d2:	0004      	movs	r4, r0
 80083d4:	000d      	movs	r5, r1
 80083d6:	0002      	movs	r2, r0
 80083d8:	000b      	movs	r3, r1
 80083da:	9800      	ldr	r0, [sp, #0]
 80083dc:	9901      	ldr	r1, [sp, #4]
 80083de:	f7f8 f939 	bl	8000654 <__aeabi_dadd>
 80083e2:	22e0      	movs	r2, #224	@ 0xe0
 80083e4:	2000      	movs	r0, #0
 80083e6:	4b62      	ldr	r3, [pc, #392]	@ (8008570 <__ieee754_pow+0x814>)
 80083e8:	0612      	lsls	r2, r2, #24
 80083ea:	0006      	movs	r6, r0
 80083ec:	000f      	movs	r7, r1
 80083ee:	f7f9 f8d9 	bl	80015a4 <__aeabi_dmul>
 80083f2:	9006      	str	r0, [sp, #24]
 80083f4:	9107      	str	r1, [sp, #28]
 80083f6:	9a00      	ldr	r2, [sp, #0]
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	0030      	movs	r0, r6
 80083fc:	0039      	movs	r1, r7
 80083fe:	f7f9 fb99 	bl	8001b34 <__aeabi_dsub>
 8008402:	0002      	movs	r2, r0
 8008404:	000b      	movs	r3, r1
 8008406:	0020      	movs	r0, r4
 8008408:	0029      	movs	r1, r5
 800840a:	f7f9 fb93 	bl	8001b34 <__aeabi_dsub>
 800840e:	4a59      	ldr	r2, [pc, #356]	@ (8008574 <__ieee754_pow+0x818>)
 8008410:	4b57      	ldr	r3, [pc, #348]	@ (8008570 <__ieee754_pow+0x814>)
 8008412:	f7f9 f8c7 	bl	80015a4 <__aeabi_dmul>
 8008416:	4a58      	ldr	r2, [pc, #352]	@ (8008578 <__ieee754_pow+0x81c>)
 8008418:	0004      	movs	r4, r0
 800841a:	000d      	movs	r5, r1
 800841c:	0030      	movs	r0, r6
 800841e:	0039      	movs	r1, r7
 8008420:	4b56      	ldr	r3, [pc, #344]	@ (800857c <__ieee754_pow+0x820>)
 8008422:	f7f9 f8bf 	bl	80015a4 <__aeabi_dmul>
 8008426:	0002      	movs	r2, r0
 8008428:	000b      	movs	r3, r1
 800842a:	0020      	movs	r0, r4
 800842c:	0029      	movs	r1, r5
 800842e:	f7f8 f911 	bl	8000654 <__aeabi_dadd>
 8008432:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008434:	4b52      	ldr	r3, [pc, #328]	@ (8008580 <__ieee754_pow+0x824>)
 8008436:	189b      	adds	r3, r3, r2
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f7f8 f90a 	bl	8000654 <__aeabi_dadd>
 8008440:	900a      	str	r0, [sp, #40]	@ 0x28
 8008442:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008444:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008446:	f7f9 ff6f 	bl	8002328 <__aeabi_i2d>
 800844a:	0004      	movs	r4, r0
 800844c:	000d      	movs	r5, r1
 800844e:	9806      	ldr	r0, [sp, #24]
 8008450:	9907      	ldr	r1, [sp, #28]
 8008452:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008454:	4b4b      	ldr	r3, [pc, #300]	@ (8008584 <__ieee754_pow+0x828>)
 8008456:	189b      	adds	r3, r3, r2
 8008458:	681e      	ldr	r6, [r3, #0]
 800845a:	685f      	ldr	r7, [r3, #4]
 800845c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800845e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008460:	f7f8 f8f8 	bl	8000654 <__aeabi_dadd>
 8008464:	0032      	movs	r2, r6
 8008466:	003b      	movs	r3, r7
 8008468:	f7f8 f8f4 	bl	8000654 <__aeabi_dadd>
 800846c:	0022      	movs	r2, r4
 800846e:	002b      	movs	r3, r5
 8008470:	f7f8 f8f0 	bl	8000654 <__aeabi_dadd>
 8008474:	2000      	movs	r0, #0
 8008476:	0022      	movs	r2, r4
 8008478:	002b      	movs	r3, r5
 800847a:	9000      	str	r0, [sp, #0]
 800847c:	9101      	str	r1, [sp, #4]
 800847e:	f7f9 fb59 	bl	8001b34 <__aeabi_dsub>
 8008482:	0032      	movs	r2, r6
 8008484:	003b      	movs	r3, r7
 8008486:	f7f9 fb55 	bl	8001b34 <__aeabi_dsub>
 800848a:	9a06      	ldr	r2, [sp, #24]
 800848c:	9b07      	ldr	r3, [sp, #28]
 800848e:	f7f9 fb51 	bl	8001b34 <__aeabi_dsub>
 8008492:	0002      	movs	r2, r0
 8008494:	000b      	movs	r3, r1
 8008496:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008498:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800849a:	e61c      	b.n	80080d6 <__ieee754_pow+0x37a>
 800849c:	4a3a      	ldr	r2, [pc, #232]	@ (8008588 <__ieee754_pow+0x82c>)
 800849e:	4b3b      	ldr	r3, [pc, #236]	@ (800858c <__ieee754_pow+0x830>)
 80084a0:	9802      	ldr	r0, [sp, #8]
 80084a2:	9903      	ldr	r1, [sp, #12]
 80084a4:	f7f8 f8d6 	bl	8000654 <__aeabi_dadd>
 80084a8:	0032      	movs	r2, r6
 80084aa:	003b      	movs	r3, r7
 80084ac:	9004      	str	r0, [sp, #16]
 80084ae:	9105      	str	r1, [sp, #20]
 80084b0:	9800      	ldr	r0, [sp, #0]
 80084b2:	9901      	ldr	r1, [sp, #4]
 80084b4:	f7f9 fb3e 	bl	8001b34 <__aeabi_dsub>
 80084b8:	0002      	movs	r2, r0
 80084ba:	000b      	movs	r3, r1
 80084bc:	9804      	ldr	r0, [sp, #16]
 80084be:	9905      	ldr	r1, [sp, #20]
 80084c0:	f7f7 ffc8 	bl	8000454 <__aeabi_dcmpgt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d000      	beq.n	80084ca <__ieee754_pow+0x76e>
 80084c8:	e647      	b.n	800815a <__ieee754_pow+0x3fe>
 80084ca:	2580      	movs	r5, #128	@ 0x80
 80084cc:	4b30      	ldr	r3, [pc, #192]	@ (8008590 <__ieee754_pow+0x834>)
 80084ce:	036d      	lsls	r5, r5, #13
 80084d0:	1524      	asrs	r4, r4, #20
 80084d2:	18e4      	adds	r4, r4, r3
 80084d4:	002b      	movs	r3, r5
 80084d6:	4123      	asrs	r3, r4
 80084d8:	9a06      	ldr	r2, [sp, #24]
 80084da:	4912      	ldr	r1, [pc, #72]	@ (8008524 <__ieee754_pow+0x7c8>)
 80084dc:	189b      	adds	r3, r3, r2
 80084de:	005a      	lsls	r2, r3, #1
 80084e0:	4c14      	ldr	r4, [pc, #80]	@ (8008534 <__ieee754_pow+0x7d8>)
 80084e2:	0d52      	lsrs	r2, r2, #21
 80084e4:	1852      	adds	r2, r2, r1
 80084e6:	4114      	asrs	r4, r2
 80084e8:	401c      	ands	r4, r3
 80084ea:	0021      	movs	r1, r4
 80084ec:	2414      	movs	r4, #20
 80084ee:	031b      	lsls	r3, r3, #12
 80084f0:	0b1b      	lsrs	r3, r3, #12
 80084f2:	432b      	orrs	r3, r5
 80084f4:	1aa2      	subs	r2, r4, r2
 80084f6:	4113      	asrs	r3, r2
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	9b06      	ldr	r3, [sp, #24]
 80084fc:	2000      	movs	r0, #0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	da02      	bge.n	8008508 <__ieee754_pow+0x7ac>
 8008502:	9b00      	ldr	r3, [sp, #0]
 8008504:	425b      	negs	r3, r3
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	0002      	movs	r2, r0
 800850a:	000b      	movs	r3, r1
 800850c:	0030      	movs	r0, r6
 800850e:	0039      	movs	r1, r7
 8008510:	f7f9 fb10 	bl	8001b34 <__aeabi_dsub>
 8008514:	0006      	movs	r6, r0
 8008516:	000f      	movs	r7, r1
 8008518:	e065      	b.n	80085e6 <__ieee754_pow+0x88a>
 800851a:	46c0      	nop			@ (mov r8, r8)
 800851c:	7ff00000 	.word	0x7ff00000
 8008520:	43400000 	.word	0x43400000
 8008524:	fffffc01 	.word	0xfffffc01
 8008528:	3ff00000 	.word	0x3ff00000
 800852c:	0003988e 	.word	0x0003988e
 8008530:	000bb679 	.word	0x000bb679
 8008534:	fff00000 	.word	0xfff00000
 8008538:	08008c38 	.word	0x08008c38
 800853c:	4a454eef 	.word	0x4a454eef
 8008540:	3fca7e28 	.word	0x3fca7e28
 8008544:	93c9db65 	.word	0x93c9db65
 8008548:	3fcd864a 	.word	0x3fcd864a
 800854c:	a91d4101 	.word	0xa91d4101
 8008550:	3fd17460 	.word	0x3fd17460
 8008554:	518f264d 	.word	0x518f264d
 8008558:	3fd55555 	.word	0x3fd55555
 800855c:	db6fabff 	.word	0xdb6fabff
 8008560:	3fdb6db6 	.word	0x3fdb6db6
 8008564:	33333303 	.word	0x33333303
 8008568:	3fe33333 	.word	0x3fe33333
 800856c:	40080000 	.word	0x40080000
 8008570:	3feec709 	.word	0x3feec709
 8008574:	dc3a03fd 	.word	0xdc3a03fd
 8008578:	145b01f5 	.word	0x145b01f5
 800857c:	be3e2fe0 	.word	0xbe3e2fe0
 8008580:	08008c18 	.word	0x08008c18
 8008584:	08008c28 	.word	0x08008c28
 8008588:	652b82fe 	.word	0x652b82fe
 800858c:	3c971547 	.word	0x3c971547
 8008590:	fffffc02 	.word	0xfffffc02
 8008594:	9b01      	ldr	r3, [sp, #4]
 8008596:	005c      	lsls	r4, r3, #1
 8008598:	4b72      	ldr	r3, [pc, #456]	@ (8008764 <__ieee754_pow+0xa08>)
 800859a:	0864      	lsrs	r4, r4, #1
 800859c:	429c      	cmp	r4, r3
 800859e:	d91c      	bls.n	80085da <__ieee754_pow+0x87e>
 80085a0:	4a71      	ldr	r2, [pc, #452]	@ (8008768 <__ieee754_pow+0xa0c>)
 80085a2:	9b01      	ldr	r3, [sp, #4]
 80085a4:	189b      	adds	r3, r3, r2
 80085a6:	9a00      	ldr	r2, [sp, #0]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	d008      	beq.n	80085be <__ieee754_pow+0x862>
 80085ac:	9808      	ldr	r0, [sp, #32]
 80085ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085b0:	2300      	movs	r3, #0
 80085b2:	2200      	movs	r2, #0
 80085b4:	f7f7 ff3a 	bl	800042c <__aeabi_dcmplt>
 80085b8:	1e43      	subs	r3, r0, #1
 80085ba:	4198      	sbcs	r0, r3
 80085bc:	e4fc      	b.n	8007fb8 <__ieee754_pow+0x25c>
 80085be:	0032      	movs	r2, r6
 80085c0:	9800      	ldr	r0, [sp, #0]
 80085c2:	9901      	ldr	r1, [sp, #4]
 80085c4:	003b      	movs	r3, r7
 80085c6:	f7f9 fab5 	bl	8001b34 <__aeabi_dsub>
 80085ca:	9a02      	ldr	r2, [sp, #8]
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	f7f7 ff4b 	bl	8000468 <__aeabi_dcmpge>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d1ea      	bne.n	80085ac <__ieee754_pow+0x850>
 80085d6:	4c65      	ldr	r4, [pc, #404]	@ (800876c <__ieee754_pow+0xa10>)
 80085d8:	e777      	b.n	80084ca <__ieee754_pow+0x76e>
 80085da:	9a04      	ldr	r2, [sp, #16]
 80085dc:	4b64      	ldr	r3, [pc, #400]	@ (8008770 <__ieee754_pow+0xa14>)
 80085de:	9200      	str	r2, [sp, #0]
 80085e0:	429c      	cmp	r4, r3
 80085e2:	d900      	bls.n	80085e6 <__ieee754_pow+0x88a>
 80085e4:	e771      	b.n	80084ca <__ieee754_pow+0x76e>
 80085e6:	9a02      	ldr	r2, [sp, #8]
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	0030      	movs	r0, r6
 80085ec:	0039      	movs	r1, r7
 80085ee:	f7f8 f831 	bl	8000654 <__aeabi_dadd>
 80085f2:	2000      	movs	r0, #0
 80085f4:	2200      	movs	r2, #0
 80085f6:	4b5f      	ldr	r3, [pc, #380]	@ (8008774 <__ieee754_pow+0xa18>)
 80085f8:	9004      	str	r0, [sp, #16]
 80085fa:	9105      	str	r1, [sp, #20]
 80085fc:	f7f8 ffd2 	bl	80015a4 <__aeabi_dmul>
 8008600:	0032      	movs	r2, r6
 8008602:	003b      	movs	r3, r7
 8008604:	9006      	str	r0, [sp, #24]
 8008606:	9107      	str	r1, [sp, #28]
 8008608:	9804      	ldr	r0, [sp, #16]
 800860a:	9905      	ldr	r1, [sp, #20]
 800860c:	f7f9 fa92 	bl	8001b34 <__aeabi_dsub>
 8008610:	0002      	movs	r2, r0
 8008612:	000b      	movs	r3, r1
 8008614:	9802      	ldr	r0, [sp, #8]
 8008616:	9903      	ldr	r1, [sp, #12]
 8008618:	f7f9 fa8c 	bl	8001b34 <__aeabi_dsub>
 800861c:	4a56      	ldr	r2, [pc, #344]	@ (8008778 <__ieee754_pow+0xa1c>)
 800861e:	4b57      	ldr	r3, [pc, #348]	@ (800877c <__ieee754_pow+0xa20>)
 8008620:	f7f8 ffc0 	bl	80015a4 <__aeabi_dmul>
 8008624:	4a56      	ldr	r2, [pc, #344]	@ (8008780 <__ieee754_pow+0xa24>)
 8008626:	0004      	movs	r4, r0
 8008628:	000d      	movs	r5, r1
 800862a:	9804      	ldr	r0, [sp, #16]
 800862c:	9905      	ldr	r1, [sp, #20]
 800862e:	4b55      	ldr	r3, [pc, #340]	@ (8008784 <__ieee754_pow+0xa28>)
 8008630:	f7f8 ffb8 	bl	80015a4 <__aeabi_dmul>
 8008634:	0002      	movs	r2, r0
 8008636:	000b      	movs	r3, r1
 8008638:	0020      	movs	r0, r4
 800863a:	0029      	movs	r1, r5
 800863c:	f7f8 f80a 	bl	8000654 <__aeabi_dadd>
 8008640:	0004      	movs	r4, r0
 8008642:	000d      	movs	r5, r1
 8008644:	0002      	movs	r2, r0
 8008646:	000b      	movs	r3, r1
 8008648:	9806      	ldr	r0, [sp, #24]
 800864a:	9907      	ldr	r1, [sp, #28]
 800864c:	f7f8 f802 	bl	8000654 <__aeabi_dadd>
 8008650:	9a06      	ldr	r2, [sp, #24]
 8008652:	9b07      	ldr	r3, [sp, #28]
 8008654:	0006      	movs	r6, r0
 8008656:	000f      	movs	r7, r1
 8008658:	f7f9 fa6c 	bl	8001b34 <__aeabi_dsub>
 800865c:	0002      	movs	r2, r0
 800865e:	000b      	movs	r3, r1
 8008660:	0020      	movs	r0, r4
 8008662:	0029      	movs	r1, r5
 8008664:	f7f9 fa66 	bl	8001b34 <__aeabi_dsub>
 8008668:	0032      	movs	r2, r6
 800866a:	9002      	str	r0, [sp, #8]
 800866c:	9103      	str	r1, [sp, #12]
 800866e:	003b      	movs	r3, r7
 8008670:	0030      	movs	r0, r6
 8008672:	0039      	movs	r1, r7
 8008674:	f7f8 ff96 	bl	80015a4 <__aeabi_dmul>
 8008678:	0004      	movs	r4, r0
 800867a:	000d      	movs	r5, r1
 800867c:	4a42      	ldr	r2, [pc, #264]	@ (8008788 <__ieee754_pow+0xa2c>)
 800867e:	4b43      	ldr	r3, [pc, #268]	@ (800878c <__ieee754_pow+0xa30>)
 8008680:	f7f8 ff90 	bl	80015a4 <__aeabi_dmul>
 8008684:	4a42      	ldr	r2, [pc, #264]	@ (8008790 <__ieee754_pow+0xa34>)
 8008686:	4b43      	ldr	r3, [pc, #268]	@ (8008794 <__ieee754_pow+0xa38>)
 8008688:	f7f9 fa54 	bl	8001b34 <__aeabi_dsub>
 800868c:	0022      	movs	r2, r4
 800868e:	002b      	movs	r3, r5
 8008690:	f7f8 ff88 	bl	80015a4 <__aeabi_dmul>
 8008694:	4a40      	ldr	r2, [pc, #256]	@ (8008798 <__ieee754_pow+0xa3c>)
 8008696:	4b41      	ldr	r3, [pc, #260]	@ (800879c <__ieee754_pow+0xa40>)
 8008698:	f7f7 ffdc 	bl	8000654 <__aeabi_dadd>
 800869c:	0022      	movs	r2, r4
 800869e:	002b      	movs	r3, r5
 80086a0:	f7f8 ff80 	bl	80015a4 <__aeabi_dmul>
 80086a4:	4a3e      	ldr	r2, [pc, #248]	@ (80087a0 <__ieee754_pow+0xa44>)
 80086a6:	4b3f      	ldr	r3, [pc, #252]	@ (80087a4 <__ieee754_pow+0xa48>)
 80086a8:	f7f9 fa44 	bl	8001b34 <__aeabi_dsub>
 80086ac:	0022      	movs	r2, r4
 80086ae:	002b      	movs	r3, r5
 80086b0:	f7f8 ff78 	bl	80015a4 <__aeabi_dmul>
 80086b4:	4a3c      	ldr	r2, [pc, #240]	@ (80087a8 <__ieee754_pow+0xa4c>)
 80086b6:	4b3d      	ldr	r3, [pc, #244]	@ (80087ac <__ieee754_pow+0xa50>)
 80086b8:	f7f7 ffcc 	bl	8000654 <__aeabi_dadd>
 80086bc:	0022      	movs	r2, r4
 80086be:	002b      	movs	r3, r5
 80086c0:	f7f8 ff70 	bl	80015a4 <__aeabi_dmul>
 80086c4:	0002      	movs	r2, r0
 80086c6:	000b      	movs	r3, r1
 80086c8:	0030      	movs	r0, r6
 80086ca:	0039      	movs	r1, r7
 80086cc:	f7f9 fa32 	bl	8001b34 <__aeabi_dsub>
 80086d0:	0004      	movs	r4, r0
 80086d2:	000d      	movs	r5, r1
 80086d4:	0002      	movs	r2, r0
 80086d6:	000b      	movs	r3, r1
 80086d8:	0030      	movs	r0, r6
 80086da:	0039      	movs	r1, r7
 80086dc:	f7f8 ff62 	bl	80015a4 <__aeabi_dmul>
 80086e0:	2380      	movs	r3, #128	@ 0x80
 80086e2:	9004      	str	r0, [sp, #16]
 80086e4:	9105      	str	r1, [sp, #20]
 80086e6:	2200      	movs	r2, #0
 80086e8:	0020      	movs	r0, r4
 80086ea:	0029      	movs	r1, r5
 80086ec:	05db      	lsls	r3, r3, #23
 80086ee:	f7f9 fa21 	bl	8001b34 <__aeabi_dsub>
 80086f2:	0002      	movs	r2, r0
 80086f4:	000b      	movs	r3, r1
 80086f6:	9804      	ldr	r0, [sp, #16]
 80086f8:	9905      	ldr	r1, [sp, #20]
 80086fa:	f7f8 fb0f 	bl	8000d1c <__aeabi_ddiv>
 80086fe:	9a02      	ldr	r2, [sp, #8]
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	0004      	movs	r4, r0
 8008704:	000d      	movs	r5, r1
 8008706:	0030      	movs	r0, r6
 8008708:	0039      	movs	r1, r7
 800870a:	f7f8 ff4b 	bl	80015a4 <__aeabi_dmul>
 800870e:	9a02      	ldr	r2, [sp, #8]
 8008710:	9b03      	ldr	r3, [sp, #12]
 8008712:	f7f7 ff9f 	bl	8000654 <__aeabi_dadd>
 8008716:	0002      	movs	r2, r0
 8008718:	000b      	movs	r3, r1
 800871a:	0020      	movs	r0, r4
 800871c:	0029      	movs	r1, r5
 800871e:	f7f9 fa09 	bl	8001b34 <__aeabi_dsub>
 8008722:	0032      	movs	r2, r6
 8008724:	003b      	movs	r3, r7
 8008726:	f7f9 fa05 	bl	8001b34 <__aeabi_dsub>
 800872a:	0002      	movs	r2, r0
 800872c:	000b      	movs	r3, r1
 800872e:	2000      	movs	r0, #0
 8008730:	491f      	ldr	r1, [pc, #124]	@ (80087b0 <__ieee754_pow+0xa54>)
 8008732:	f7f9 f9ff 	bl	8001b34 <__aeabi_dsub>
 8008736:	9b00      	ldr	r3, [sp, #0]
 8008738:	051b      	lsls	r3, r3, #20
 800873a:	185b      	adds	r3, r3, r1
 800873c:	151a      	asrs	r2, r3, #20
 800873e:	2a00      	cmp	r2, #0
 8008740:	dc06      	bgt.n	8008750 <__ieee754_pow+0x9f4>
 8008742:	9a00      	ldr	r2, [sp, #0]
 8008744:	f000 f83a 	bl	80087bc <scalbn>
 8008748:	9a08      	ldr	r2, [sp, #32]
 800874a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800874c:	f7ff fbee 	bl	8007f2c <__ieee754_pow+0x1d0>
 8008750:	0019      	movs	r1, r3
 8008752:	e7f9      	b.n	8008748 <__ieee754_pow+0x9ec>
 8008754:	2300      	movs	r3, #0
 8008756:	4c16      	ldr	r4, [pc, #88]	@ (80087b0 <__ieee754_pow+0xa54>)
 8008758:	f7ff fbcb 	bl	8007ef2 <__ieee754_pow+0x196>
 800875c:	2300      	movs	r3, #0
 800875e:	2400      	movs	r4, #0
 8008760:	f7ff fbc7 	bl	8007ef2 <__ieee754_pow+0x196>
 8008764:	4090cbff 	.word	0x4090cbff
 8008768:	3f6f3400 	.word	0x3f6f3400
 800876c:	4090cc00 	.word	0x4090cc00
 8008770:	3fe00000 	.word	0x3fe00000
 8008774:	3fe62e43 	.word	0x3fe62e43
 8008778:	fefa39ef 	.word	0xfefa39ef
 800877c:	3fe62e42 	.word	0x3fe62e42
 8008780:	0ca86c39 	.word	0x0ca86c39
 8008784:	be205c61 	.word	0xbe205c61
 8008788:	72bea4d0 	.word	0x72bea4d0
 800878c:	3e663769 	.word	0x3e663769
 8008790:	c5d26bf1 	.word	0xc5d26bf1
 8008794:	3ebbbd41 	.word	0x3ebbbd41
 8008798:	af25de2c 	.word	0xaf25de2c
 800879c:	3f11566a 	.word	0x3f11566a
 80087a0:	16bebd93 	.word	0x16bebd93
 80087a4:	3f66c16c 	.word	0x3f66c16c
 80087a8:	5555553e 	.word	0x5555553e
 80087ac:	3fc55555 	.word	0x3fc55555
 80087b0:	3ff00000 	.word	0x3ff00000

080087b4 <fabs>:
 80087b4:	0049      	lsls	r1, r1, #1
 80087b6:	084b      	lsrs	r3, r1, #1
 80087b8:	0019      	movs	r1, r3
 80087ba:	4770      	bx	lr

080087bc <scalbn>:
 80087bc:	004b      	lsls	r3, r1, #1
 80087be:	b570      	push	{r4, r5, r6, lr}
 80087c0:	0d5b      	lsrs	r3, r3, #21
 80087c2:	0014      	movs	r4, r2
 80087c4:	000d      	movs	r5, r1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10f      	bne.n	80087ea <scalbn+0x2e>
 80087ca:	004b      	lsls	r3, r1, #1
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	4303      	orrs	r3, r0
 80087d0:	d012      	beq.n	80087f8 <scalbn+0x3c>
 80087d2:	4b23      	ldr	r3, [pc, #140]	@ (8008860 <scalbn+0xa4>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	f7f8 fee5 	bl	80015a4 <__aeabi_dmul>
 80087da:	4b22      	ldr	r3, [pc, #136]	@ (8008864 <scalbn+0xa8>)
 80087dc:	429c      	cmp	r4, r3
 80087de:	da0c      	bge.n	80087fa <scalbn+0x3e>
 80087e0:	4a21      	ldr	r2, [pc, #132]	@ (8008868 <scalbn+0xac>)
 80087e2:	4b22      	ldr	r3, [pc, #136]	@ (800886c <scalbn+0xb0>)
 80087e4:	f7f8 fede 	bl	80015a4 <__aeabi_dmul>
 80087e8:	e006      	b.n	80087f8 <scalbn+0x3c>
 80087ea:	4a21      	ldr	r2, [pc, #132]	@ (8008870 <scalbn+0xb4>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d108      	bne.n	8008802 <scalbn+0x46>
 80087f0:	0002      	movs	r2, r0
 80087f2:	000b      	movs	r3, r1
 80087f4:	f7f7 ff2e 	bl	8000654 <__aeabi_dadd>
 80087f8:	bd70      	pop	{r4, r5, r6, pc}
 80087fa:	000d      	movs	r5, r1
 80087fc:	004b      	lsls	r3, r1, #1
 80087fe:	0d5b      	lsrs	r3, r3, #21
 8008800:	3b36      	subs	r3, #54	@ 0x36
 8008802:	4a1c      	ldr	r2, [pc, #112]	@ (8008874 <scalbn+0xb8>)
 8008804:	4294      	cmp	r4, r2
 8008806:	dd0a      	ble.n	800881e <scalbn+0x62>
 8008808:	4c1b      	ldr	r4, [pc, #108]	@ (8008878 <scalbn+0xbc>)
 800880a:	4d1c      	ldr	r5, [pc, #112]	@ (800887c <scalbn+0xc0>)
 800880c:	2900      	cmp	r1, #0
 800880e:	da01      	bge.n	8008814 <scalbn+0x58>
 8008810:	4c19      	ldr	r4, [pc, #100]	@ (8008878 <scalbn+0xbc>)
 8008812:	4d1b      	ldr	r5, [pc, #108]	@ (8008880 <scalbn+0xc4>)
 8008814:	4a18      	ldr	r2, [pc, #96]	@ (8008878 <scalbn+0xbc>)
 8008816:	4b19      	ldr	r3, [pc, #100]	@ (800887c <scalbn+0xc0>)
 8008818:	0020      	movs	r0, r4
 800881a:	0029      	movs	r1, r5
 800881c:	e7e2      	b.n	80087e4 <scalbn+0x28>
 800881e:	18e2      	adds	r2, r4, r3
 8008820:	4b18      	ldr	r3, [pc, #96]	@ (8008884 <scalbn+0xc8>)
 8008822:	429a      	cmp	r2, r3
 8008824:	dcf0      	bgt.n	8008808 <scalbn+0x4c>
 8008826:	2a00      	cmp	r2, #0
 8008828:	dd05      	ble.n	8008836 <scalbn+0x7a>
 800882a:	4b17      	ldr	r3, [pc, #92]	@ (8008888 <scalbn+0xcc>)
 800882c:	0512      	lsls	r2, r2, #20
 800882e:	402b      	ands	r3, r5
 8008830:	431a      	orrs	r2, r3
 8008832:	0011      	movs	r1, r2
 8008834:	e7e0      	b.n	80087f8 <scalbn+0x3c>
 8008836:	0013      	movs	r3, r2
 8008838:	3335      	adds	r3, #53	@ 0x35
 800883a:	da08      	bge.n	800884e <scalbn+0x92>
 800883c:	4c0a      	ldr	r4, [pc, #40]	@ (8008868 <scalbn+0xac>)
 800883e:	4d0b      	ldr	r5, [pc, #44]	@ (800886c <scalbn+0xb0>)
 8008840:	2900      	cmp	r1, #0
 8008842:	da01      	bge.n	8008848 <scalbn+0x8c>
 8008844:	4c08      	ldr	r4, [pc, #32]	@ (8008868 <scalbn+0xac>)
 8008846:	4d11      	ldr	r5, [pc, #68]	@ (800888c <scalbn+0xd0>)
 8008848:	4a07      	ldr	r2, [pc, #28]	@ (8008868 <scalbn+0xac>)
 800884a:	4b08      	ldr	r3, [pc, #32]	@ (800886c <scalbn+0xb0>)
 800884c:	e7e4      	b.n	8008818 <scalbn+0x5c>
 800884e:	4b0e      	ldr	r3, [pc, #56]	@ (8008888 <scalbn+0xcc>)
 8008850:	3236      	adds	r2, #54	@ 0x36
 8008852:	401d      	ands	r5, r3
 8008854:	0512      	lsls	r2, r2, #20
 8008856:	432a      	orrs	r2, r5
 8008858:	0011      	movs	r1, r2
 800885a:	4b0d      	ldr	r3, [pc, #52]	@ (8008890 <scalbn+0xd4>)
 800885c:	2200      	movs	r2, #0
 800885e:	e7c1      	b.n	80087e4 <scalbn+0x28>
 8008860:	43500000 	.word	0x43500000
 8008864:	ffff3cb0 	.word	0xffff3cb0
 8008868:	c2f8f359 	.word	0xc2f8f359
 800886c:	01a56e1f 	.word	0x01a56e1f
 8008870:	000007ff 	.word	0x000007ff
 8008874:	0000c350 	.word	0x0000c350
 8008878:	8800759c 	.word	0x8800759c
 800887c:	7e37e43c 	.word	0x7e37e43c
 8008880:	fe37e43c 	.word	0xfe37e43c
 8008884:	000007fe 	.word	0x000007fe
 8008888:	800fffff 	.word	0x800fffff
 800888c:	81a56e1f 	.word	0x81a56e1f
 8008890:	3c900000 	.word	0x3c900000

08008894 <with_errno>:
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	000d      	movs	r5, r1
 8008898:	0016      	movs	r6, r2
 800889a:	0004      	movs	r4, r0
 800889c:	f7ff f9b4 	bl	8007c08 <__errno>
 80088a0:	0029      	movs	r1, r5
 80088a2:	6006      	str	r6, [r0, #0]
 80088a4:	0020      	movs	r0, r4
 80088a6:	bd70      	pop	{r4, r5, r6, pc}

080088a8 <xflow>:
 80088a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088aa:	0014      	movs	r4, r2
 80088ac:	001d      	movs	r5, r3
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d002      	beq.n	80088b8 <xflow+0x10>
 80088b2:	2180      	movs	r1, #128	@ 0x80
 80088b4:	0609      	lsls	r1, r1, #24
 80088b6:	185b      	adds	r3, r3, r1
 80088b8:	9200      	str	r2, [sp, #0]
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	9a00      	ldr	r2, [sp, #0]
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	0020      	movs	r0, r4
 80088c2:	0029      	movs	r1, r5
 80088c4:	f7f8 fe6e 	bl	80015a4 <__aeabi_dmul>
 80088c8:	2222      	movs	r2, #34	@ 0x22
 80088ca:	f7ff ffe3 	bl	8008894 <with_errno>
 80088ce:	b003      	add	sp, #12
 80088d0:	bd30      	pop	{r4, r5, pc}

080088d2 <__math_uflow>:
 80088d2:	2380      	movs	r3, #128	@ 0x80
 80088d4:	b510      	push	{r4, lr}
 80088d6:	2200      	movs	r2, #0
 80088d8:	055b      	lsls	r3, r3, #21
 80088da:	f7ff ffe5 	bl	80088a8 <xflow>
 80088de:	bd10      	pop	{r4, pc}

080088e0 <__math_oflow>:
 80088e0:	23e0      	movs	r3, #224	@ 0xe0
 80088e2:	b510      	push	{r4, lr}
 80088e4:	2200      	movs	r2, #0
 80088e6:	05db      	lsls	r3, r3, #23
 80088e8:	f7ff ffde 	bl	80088a8 <xflow>
 80088ec:	bd10      	pop	{r4, pc}
	...

080088f0 <__ieee754_sqrt>:
 80088f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f2:	000a      	movs	r2, r1
 80088f4:	000d      	movs	r5, r1
 80088f6:	496d      	ldr	r1, [pc, #436]	@ (8008aac <__ieee754_sqrt+0x1bc>)
 80088f8:	0004      	movs	r4, r0
 80088fa:	0003      	movs	r3, r0
 80088fc:	0008      	movs	r0, r1
 80088fe:	b087      	sub	sp, #28
 8008900:	4028      	ands	r0, r5
 8008902:	4288      	cmp	r0, r1
 8008904:	d111      	bne.n	800892a <__ieee754_sqrt+0x3a>
 8008906:	0022      	movs	r2, r4
 8008908:	002b      	movs	r3, r5
 800890a:	0020      	movs	r0, r4
 800890c:	0029      	movs	r1, r5
 800890e:	f7f8 fe49 	bl	80015a4 <__aeabi_dmul>
 8008912:	0002      	movs	r2, r0
 8008914:	000b      	movs	r3, r1
 8008916:	0020      	movs	r0, r4
 8008918:	0029      	movs	r1, r5
 800891a:	f7f7 fe9b 	bl	8000654 <__aeabi_dadd>
 800891e:	0004      	movs	r4, r0
 8008920:	000d      	movs	r5, r1
 8008922:	0020      	movs	r0, r4
 8008924:	0029      	movs	r1, r5
 8008926:	b007      	add	sp, #28
 8008928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800892a:	2d00      	cmp	r5, #0
 800892c:	dc11      	bgt.n	8008952 <__ieee754_sqrt+0x62>
 800892e:	0069      	lsls	r1, r5, #1
 8008930:	0849      	lsrs	r1, r1, #1
 8008932:	4321      	orrs	r1, r4
 8008934:	d0f5      	beq.n	8008922 <__ieee754_sqrt+0x32>
 8008936:	2000      	movs	r0, #0
 8008938:	4285      	cmp	r5, r0
 800893a:	d010      	beq.n	800895e <__ieee754_sqrt+0x6e>
 800893c:	0022      	movs	r2, r4
 800893e:	002b      	movs	r3, r5
 8008940:	0020      	movs	r0, r4
 8008942:	0029      	movs	r1, r5
 8008944:	f7f9 f8f6 	bl	8001b34 <__aeabi_dsub>
 8008948:	0002      	movs	r2, r0
 800894a:	000b      	movs	r3, r1
 800894c:	f7f8 f9e6 	bl	8000d1c <__aeabi_ddiv>
 8008950:	e7e5      	b.n	800891e <__ieee754_sqrt+0x2e>
 8008952:	1528      	asrs	r0, r5, #20
 8008954:	d115      	bne.n	8008982 <__ieee754_sqrt+0x92>
 8008956:	2480      	movs	r4, #128	@ 0x80
 8008958:	2100      	movs	r1, #0
 800895a:	0364      	lsls	r4, r4, #13
 800895c:	e007      	b.n	800896e <__ieee754_sqrt+0x7e>
 800895e:	0ada      	lsrs	r2, r3, #11
 8008960:	3815      	subs	r0, #21
 8008962:	055b      	lsls	r3, r3, #21
 8008964:	2a00      	cmp	r2, #0
 8008966:	d0fa      	beq.n	800895e <__ieee754_sqrt+0x6e>
 8008968:	e7f5      	b.n	8008956 <__ieee754_sqrt+0x66>
 800896a:	0052      	lsls	r2, r2, #1
 800896c:	3101      	adds	r1, #1
 800896e:	4222      	tst	r2, r4
 8008970:	d0fb      	beq.n	800896a <__ieee754_sqrt+0x7a>
 8008972:	1e4c      	subs	r4, r1, #1
 8008974:	1b00      	subs	r0, r0, r4
 8008976:	2420      	movs	r4, #32
 8008978:	001d      	movs	r5, r3
 800897a:	1a64      	subs	r4, r4, r1
 800897c:	40e5      	lsrs	r5, r4
 800897e:	408b      	lsls	r3, r1
 8008980:	432a      	orrs	r2, r5
 8008982:	494b      	ldr	r1, [pc, #300]	@ (8008ab0 <__ieee754_sqrt+0x1c0>)
 8008984:	0312      	lsls	r2, r2, #12
 8008986:	1844      	adds	r4, r0, r1
 8008988:	2180      	movs	r1, #128	@ 0x80
 800898a:	0b12      	lsrs	r2, r2, #12
 800898c:	0349      	lsls	r1, r1, #13
 800898e:	4311      	orrs	r1, r2
 8008990:	07c0      	lsls	r0, r0, #31
 8008992:	d403      	bmi.n	800899c <__ieee754_sqrt+0xac>
 8008994:	0fda      	lsrs	r2, r3, #31
 8008996:	0049      	lsls	r1, r1, #1
 8008998:	1851      	adds	r1, r2, r1
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	2500      	movs	r5, #0
 800899e:	1062      	asrs	r2, r4, #1
 80089a0:	0049      	lsls	r1, r1, #1
 80089a2:	2480      	movs	r4, #128	@ 0x80
 80089a4:	9205      	str	r2, [sp, #20]
 80089a6:	0fda      	lsrs	r2, r3, #31
 80089a8:	1852      	adds	r2, r2, r1
 80089aa:	2016      	movs	r0, #22
 80089ac:	0029      	movs	r1, r5
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	03a4      	lsls	r4, r4, #14
 80089b2:	190e      	adds	r6, r1, r4
 80089b4:	4296      	cmp	r6, r2
 80089b6:	dc02      	bgt.n	80089be <__ieee754_sqrt+0xce>
 80089b8:	1931      	adds	r1, r6, r4
 80089ba:	1b92      	subs	r2, r2, r6
 80089bc:	192d      	adds	r5, r5, r4
 80089be:	0fde      	lsrs	r6, r3, #31
 80089c0:	0052      	lsls	r2, r2, #1
 80089c2:	3801      	subs	r0, #1
 80089c4:	1992      	adds	r2, r2, r6
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	0864      	lsrs	r4, r4, #1
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d1f1      	bne.n	80089b2 <__ieee754_sqrt+0xc2>
 80089ce:	2620      	movs	r6, #32
 80089d0:	2780      	movs	r7, #128	@ 0x80
 80089d2:	0004      	movs	r4, r0
 80089d4:	9604      	str	r6, [sp, #16]
 80089d6:	063f      	lsls	r7, r7, #24
 80089d8:	19c6      	adds	r6, r0, r7
 80089da:	46b4      	mov	ip, r6
 80089dc:	4291      	cmp	r1, r2
 80089de:	db02      	blt.n	80089e6 <__ieee754_sqrt+0xf6>
 80089e0:	d114      	bne.n	8008a0c <__ieee754_sqrt+0x11c>
 80089e2:	429e      	cmp	r6, r3
 80089e4:	d812      	bhi.n	8008a0c <__ieee754_sqrt+0x11c>
 80089e6:	4660      	mov	r0, ip
 80089e8:	4666      	mov	r6, ip
 80089ea:	19c0      	adds	r0, r0, r7
 80089ec:	9100      	str	r1, [sp, #0]
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	da03      	bge.n	80089fa <__ieee754_sqrt+0x10a>
 80089f2:	43c6      	mvns	r6, r0
 80089f4:	0ff6      	lsrs	r6, r6, #31
 80089f6:	198e      	adds	r6, r1, r6
 80089f8:	9600      	str	r6, [sp, #0]
 80089fa:	1a52      	subs	r2, r2, r1
 80089fc:	4563      	cmp	r3, ip
 80089fe:	4189      	sbcs	r1, r1
 8008a00:	4249      	negs	r1, r1
 8008a02:	1a52      	subs	r2, r2, r1
 8008a04:	4661      	mov	r1, ip
 8008a06:	1a5b      	subs	r3, r3, r1
 8008a08:	9900      	ldr	r1, [sp, #0]
 8008a0a:	19e4      	adds	r4, r4, r7
 8008a0c:	0fde      	lsrs	r6, r3, #31
 8008a0e:	0052      	lsls	r2, r2, #1
 8008a10:	1992      	adds	r2, r2, r6
 8008a12:	9e04      	ldr	r6, [sp, #16]
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	3e01      	subs	r6, #1
 8008a18:	087f      	lsrs	r7, r7, #1
 8008a1a:	9604      	str	r6, [sp, #16]
 8008a1c:	2e00      	cmp	r6, #0
 8008a1e:	d1db      	bne.n	80089d8 <__ieee754_sqrt+0xe8>
 8008a20:	431a      	orrs	r2, r3
 8008a22:	d01f      	beq.n	8008a64 <__ieee754_sqrt+0x174>
 8008a24:	4e23      	ldr	r6, [pc, #140]	@ (8008ab4 <__ieee754_sqrt+0x1c4>)
 8008a26:	4f24      	ldr	r7, [pc, #144]	@ (8008ab8 <__ieee754_sqrt+0x1c8>)
 8008a28:	6830      	ldr	r0, [r6, #0]
 8008a2a:	6871      	ldr	r1, [r6, #4]
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	9200      	str	r2, [sp, #0]
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	6832      	ldr	r2, [r6, #0]
 8008a36:	6873      	ldr	r3, [r6, #4]
 8008a38:	9202      	str	r2, [sp, #8]
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	9a00      	ldr	r2, [sp, #0]
 8008a3e:	9b01      	ldr	r3, [sp, #4]
 8008a40:	f7f9 f878 	bl	8001b34 <__aeabi_dsub>
 8008a44:	0002      	movs	r2, r0
 8008a46:	000b      	movs	r3, r1
 8008a48:	9802      	ldr	r0, [sp, #8]
 8008a4a:	9903      	ldr	r1, [sp, #12]
 8008a4c:	f7f7 fcf8 	bl	8000440 <__aeabi_dcmple>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d007      	beq.n	8008a64 <__ieee754_sqrt+0x174>
 8008a54:	6830      	ldr	r0, [r6, #0]
 8008a56:	6871      	ldr	r1, [r6, #4]
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	1c67      	adds	r7, r4, #1
 8008a5e:	d10f      	bne.n	8008a80 <__ieee754_sqrt+0x190>
 8008a60:	9c04      	ldr	r4, [sp, #16]
 8008a62:	3501      	adds	r5, #1
 8008a64:	4b15      	ldr	r3, [pc, #84]	@ (8008abc <__ieee754_sqrt+0x1cc>)
 8008a66:	106a      	asrs	r2, r5, #1
 8008a68:	18d2      	adds	r2, r2, r3
 8008a6a:	0863      	lsrs	r3, r4, #1
 8008a6c:	07ed      	lsls	r5, r5, #31
 8008a6e:	d502      	bpl.n	8008a76 <__ieee754_sqrt+0x186>
 8008a70:	2180      	movs	r1, #128	@ 0x80
 8008a72:	0609      	lsls	r1, r1, #24
 8008a74:	430b      	orrs	r3, r1
 8008a76:	9905      	ldr	r1, [sp, #20]
 8008a78:	001c      	movs	r4, r3
 8008a7a:	0509      	lsls	r1, r1, #20
 8008a7c:	188d      	adds	r5, r1, r2
 8008a7e:	e750      	b.n	8008922 <__ieee754_sqrt+0x32>
 8008a80:	f7f7 fde8 	bl	8000654 <__aeabi_dadd>
 8008a84:	6877      	ldr	r7, [r6, #4]
 8008a86:	6836      	ldr	r6, [r6, #0]
 8008a88:	0002      	movs	r2, r0
 8008a8a:	000b      	movs	r3, r1
 8008a8c:	0030      	movs	r0, r6
 8008a8e:	0039      	movs	r1, r7
 8008a90:	f7f7 fccc 	bl	800042c <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d004      	beq.n	8008aa2 <__ieee754_sqrt+0x1b2>
 8008a98:	3402      	adds	r4, #2
 8008a9a:	4263      	negs	r3, r4
 8008a9c:	4163      	adcs	r3, r4
 8008a9e:	18ed      	adds	r5, r5, r3
 8008aa0:	e7e0      	b.n	8008a64 <__ieee754_sqrt+0x174>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	3401      	adds	r4, #1
 8008aa6:	439c      	bics	r4, r3
 8008aa8:	e7dc      	b.n	8008a64 <__ieee754_sqrt+0x174>
 8008aaa:	46c0      	nop			@ (mov r8, r8)
 8008aac:	7ff00000 	.word	0x7ff00000
 8008ab0:	fffffc01 	.word	0xfffffc01
 8008ab4:	20000068 	.word	0x20000068
 8008ab8:	20000060 	.word	0x20000060
 8008abc:	3fe00000 	.word	0x3fe00000

08008ac0 <_init>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	46c0      	nop			@ (mov r8, r8)
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr

08008acc <_fini>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	46c0      	nop			@ (mov r8, r8)
 8008ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad2:	bc08      	pop	{r3}
 8008ad4:	469e      	mov	lr, r3
 8008ad6:	4770      	bx	lr
