
airMouse-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a0c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08007ac8  08007ac8  00008ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c28  08007c28  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c28  08007c28  00008c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c30  08007c30  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c30  08007c30  00008c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c34  08007c34  00008c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007c38  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000070  08007ca8  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08007ca8  0000936c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010650  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fa  00000000  00000000  000196e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0001bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000987  00000000  00000000  0001cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191ee  00000000  00000000  0001d4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011612  00000000  00000000  000366ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab81  00000000  00000000  00047cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2840  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  000e2884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e5a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007ab0 	.word	0x08007ab0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08007ab0 	.word	0x08007ab0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0010      	movs	r0, r2
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	0019      	movs	r1, r3
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f001 f9ff 	bl	8001814 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f93f 	bl	80016a4 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 f9f1 	bl	8001814 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f9e7 	bl	8001814 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f969 	bl	800172c <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f95f 	bl	800172c <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_uldivmod>:
 800047c:	2b00      	cmp	r3, #0
 800047e:	d111      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000480:	2a00      	cmp	r2, #0
 8000482:	d10f      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000484:	2900      	cmp	r1, #0
 8000486:	d100      	bne.n	800048a <__aeabi_uldivmod+0xe>
 8000488:	2800      	cmp	r0, #0
 800048a:	d002      	beq.n	8000492 <__aeabi_uldivmod+0x16>
 800048c:	2100      	movs	r1, #0
 800048e:	43c9      	mvns	r1, r1
 8000490:	0008      	movs	r0, r1
 8000492:	b407      	push	{r0, r1, r2}
 8000494:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <__aeabi_uldivmod+0x24>)
 8000496:	a102      	add	r1, pc, #8	@ (adr r1, 80004a0 <__aeabi_uldivmod+0x24>)
 8000498:	1840      	adds	r0, r0, r1
 800049a:	9002      	str	r0, [sp, #8]
 800049c:	bd03      	pop	{r0, r1, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	ffffff5d 	.word	0xffffff5d
 80004a4:	b403      	push	{r0, r1}
 80004a6:	4668      	mov	r0, sp
 80004a8:	b501      	push	{r0, lr}
 80004aa:	9802      	ldr	r0, [sp, #8]
 80004ac:	f000 f806 	bl	80004bc <__udivmoddi4>
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	469e      	mov	lr, r3
 80004b4:	b002      	add	sp, #8
 80004b6:	bc0c      	pop	{r2, r3}
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__udivmoddi4>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	4657      	mov	r7, sl
 80004c0:	464e      	mov	r6, r9
 80004c2:	4645      	mov	r5, r8
 80004c4:	46de      	mov	lr, fp
 80004c6:	b5e0      	push	{r5, r6, r7, lr}
 80004c8:	0004      	movs	r4, r0
 80004ca:	000d      	movs	r5, r1
 80004cc:	4692      	mov	sl, r2
 80004ce:	4699      	mov	r9, r3
 80004d0:	b083      	sub	sp, #12
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d830      	bhi.n	8000538 <__udivmoddi4+0x7c>
 80004d6:	d02d      	beq.n	8000534 <__udivmoddi4+0x78>
 80004d8:	4649      	mov	r1, r9
 80004da:	4650      	mov	r0, sl
 80004dc:	f002 f962 	bl	80027a4 <__clzdi2>
 80004e0:	0029      	movs	r1, r5
 80004e2:	0006      	movs	r6, r0
 80004e4:	0020      	movs	r0, r4
 80004e6:	f002 f95d 	bl	80027a4 <__clzdi2>
 80004ea:	1a33      	subs	r3, r6, r0
 80004ec:	4698      	mov	r8, r3
 80004ee:	3b20      	subs	r3, #32
 80004f0:	d434      	bmi.n	800055c <__udivmoddi4+0xa0>
 80004f2:	469b      	mov	fp, r3
 80004f4:	4653      	mov	r3, sl
 80004f6:	465a      	mov	r2, fp
 80004f8:	4093      	lsls	r3, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	001f      	movs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d83b      	bhi.n	8000580 <__udivmoddi4+0xc4>
 8000508:	42af      	cmp	r7, r5
 800050a:	d100      	bne.n	800050e <__udivmoddi4+0x52>
 800050c:	e079      	b.n	8000602 <__udivmoddi4+0x146>
 800050e:	465b      	mov	r3, fp
 8000510:	1ba4      	subs	r4, r4, r6
 8000512:	41bd      	sbcs	r5, r7
 8000514:	2b00      	cmp	r3, #0
 8000516:	da00      	bge.n	800051a <__udivmoddi4+0x5e>
 8000518:	e076      	b.n	8000608 <__udivmoddi4+0x14c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	465a      	mov	r2, fp
 8000526:	4093      	lsls	r3, r2
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	4642      	mov	r2, r8
 800052e:	4093      	lsls	r3, r2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	e029      	b.n	8000588 <__udivmoddi4+0xcc>
 8000534:	4282      	cmp	r2, r0
 8000536:	d9cf      	bls.n	80004d8 <__udivmoddi4+0x1c>
 8000538:	2200      	movs	r2, #0
 800053a:	2300      	movs	r3, #0
 800053c:	9200      	str	r2, [sp, #0]
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <__udivmoddi4+0x8e>
 8000546:	601c      	str	r4, [r3, #0]
 8000548:	605d      	str	r5, [r3, #4]
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	b003      	add	sp, #12
 8000550:	bcf0      	pop	{r4, r5, r6, r7}
 8000552:	46bb      	mov	fp, r7
 8000554:	46b2      	mov	sl, r6
 8000556:	46a9      	mov	r9, r5
 8000558:	46a0      	mov	r8, r4
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055c:	4642      	mov	r2, r8
 800055e:	469b      	mov	fp, r3
 8000560:	2320      	movs	r3, #32
 8000562:	1a9b      	subs	r3, r3, r2
 8000564:	4652      	mov	r2, sl
 8000566:	40da      	lsrs	r2, r3
 8000568:	4641      	mov	r1, r8
 800056a:	0013      	movs	r3, r2
 800056c:	464a      	mov	r2, r9
 800056e:	408a      	lsls	r2, r1
 8000570:	0017      	movs	r7, r2
 8000572:	4642      	mov	r2, r8
 8000574:	431f      	orrs	r7, r3
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	001e      	movs	r6, r3
 800057c:	42af      	cmp	r7, r5
 800057e:	d9c3      	bls.n	8000508 <__udivmoddi4+0x4c>
 8000580:	2200      	movs	r2, #0
 8000582:	2300      	movs	r3, #0
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	4643      	mov	r3, r8
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0d8      	beq.n	8000540 <__udivmoddi4+0x84>
 800058e:	07fb      	lsls	r3, r7, #31
 8000590:	0872      	lsrs	r2, r6, #1
 8000592:	431a      	orrs	r2, r3
 8000594:	4646      	mov	r6, r8
 8000596:	087b      	lsrs	r3, r7, #1
 8000598:	e00e      	b.n	80005b8 <__udivmoddi4+0xfc>
 800059a:	42ab      	cmp	r3, r5
 800059c:	d101      	bne.n	80005a2 <__udivmoddi4+0xe6>
 800059e:	42a2      	cmp	r2, r4
 80005a0:	d80c      	bhi.n	80005bc <__udivmoddi4+0x100>
 80005a2:	1aa4      	subs	r4, r4, r2
 80005a4:	419d      	sbcs	r5, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2100      	movs	r1, #0
 80005ae:	3e01      	subs	r6, #1
 80005b0:	1824      	adds	r4, r4, r0
 80005b2:	414d      	adcs	r5, r1
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d006      	beq.n	80005c6 <__udivmoddi4+0x10a>
 80005b8:	42ab      	cmp	r3, r5
 80005ba:	d9ee      	bls.n	800059a <__udivmoddi4+0xde>
 80005bc:	3e01      	subs	r6, #1
 80005be:	1924      	adds	r4, r4, r4
 80005c0:	416d      	adcs	r5, r5
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d1f8      	bne.n	80005b8 <__udivmoddi4+0xfc>
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	465b      	mov	r3, fp
 80005cc:	1900      	adds	r0, r0, r4
 80005ce:	4169      	adcs	r1, r5
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db24      	blt.n	800061e <__udivmoddi4+0x162>
 80005d4:	002b      	movs	r3, r5
 80005d6:	465a      	mov	r2, fp
 80005d8:	4644      	mov	r4, r8
 80005da:	40d3      	lsrs	r3, r2
 80005dc:	002a      	movs	r2, r5
 80005de:	40e2      	lsrs	r2, r4
 80005e0:	001c      	movs	r4, r3
 80005e2:	465b      	mov	r3, fp
 80005e4:	0015      	movs	r5, r2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db2a      	blt.n	8000640 <__udivmoddi4+0x184>
 80005ea:	0026      	movs	r6, r4
 80005ec:	409e      	lsls	r6, r3
 80005ee:	0033      	movs	r3, r6
 80005f0:	0026      	movs	r6, r4
 80005f2:	4647      	mov	r7, r8
 80005f4:	40be      	lsls	r6, r7
 80005f6:	0032      	movs	r2, r6
 80005f8:	1a80      	subs	r0, r0, r2
 80005fa:	4199      	sbcs	r1, r3
 80005fc:	9000      	str	r0, [sp, #0]
 80005fe:	9101      	str	r1, [sp, #4]
 8000600:	e79e      	b.n	8000540 <__udivmoddi4+0x84>
 8000602:	42a3      	cmp	r3, r4
 8000604:	d8bc      	bhi.n	8000580 <__udivmoddi4+0xc4>
 8000606:	e782      	b.n	800050e <__udivmoddi4+0x52>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	2100      	movs	r1, #0
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	2200      	movs	r2, #0
 8000612:	9100      	str	r1, [sp, #0]
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	2201      	movs	r2, #1
 8000618:	40da      	lsrs	r2, r3
 800061a:	9201      	str	r2, [sp, #4]
 800061c:	e785      	b.n	800052a <__udivmoddi4+0x6e>
 800061e:	4642      	mov	r2, r8
 8000620:	2320      	movs	r3, #32
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	002a      	movs	r2, r5
 8000626:	4646      	mov	r6, r8
 8000628:	409a      	lsls	r2, r3
 800062a:	0023      	movs	r3, r4
 800062c:	40f3      	lsrs	r3, r6
 800062e:	4644      	mov	r4, r8
 8000630:	4313      	orrs	r3, r2
 8000632:	002a      	movs	r2, r5
 8000634:	40e2      	lsrs	r2, r4
 8000636:	001c      	movs	r4, r3
 8000638:	465b      	mov	r3, fp
 800063a:	0015      	movs	r5, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	dad4      	bge.n	80005ea <__udivmoddi4+0x12e>
 8000640:	4642      	mov	r2, r8
 8000642:	002f      	movs	r7, r5
 8000644:	2320      	movs	r3, #32
 8000646:	0026      	movs	r6, r4
 8000648:	4097      	lsls	r7, r2
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	40de      	lsrs	r6, r3
 800064e:	003b      	movs	r3, r7
 8000650:	4333      	orrs	r3, r6
 8000652:	e7cd      	b.n	80005f0 <__udivmoddi4+0x134>

08000654 <__aeabi_fmul>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	464f      	mov	r7, r9
 8000658:	4646      	mov	r6, r8
 800065a:	46d6      	mov	lr, sl
 800065c:	0243      	lsls	r3, r0, #9
 800065e:	0a5b      	lsrs	r3, r3, #9
 8000660:	0045      	lsls	r5, r0, #1
 8000662:	b5c0      	push	{r6, r7, lr}
 8000664:	4699      	mov	r9, r3
 8000666:	1c0f      	adds	r7, r1, #0
 8000668:	0e2d      	lsrs	r5, r5, #24
 800066a:	0fc6      	lsrs	r6, r0, #31
 800066c:	2d00      	cmp	r5, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fmul+0x1e>
 8000670:	e088      	b.n	8000784 <__aeabi_fmul+0x130>
 8000672:	2dff      	cmp	r5, #255	@ 0xff
 8000674:	d100      	bne.n	8000678 <__aeabi_fmul+0x24>
 8000676:	e08d      	b.n	8000794 <__aeabi_fmul+0x140>
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	431a      	orrs	r2, r3
 8000680:	2300      	movs	r3, #0
 8000682:	4691      	mov	r9, r2
 8000684:	4698      	mov	r8, r3
 8000686:	469a      	mov	sl, r3
 8000688:	3d7f      	subs	r5, #127	@ 0x7f
 800068a:	027c      	lsls	r4, r7, #9
 800068c:	007b      	lsls	r3, r7, #1
 800068e:	0a64      	lsrs	r4, r4, #9
 8000690:	0e1b      	lsrs	r3, r3, #24
 8000692:	0fff      	lsrs	r7, r7, #31
 8000694:	2b00      	cmp	r3, #0
 8000696:	d068      	beq.n	800076a <__aeabi_fmul+0x116>
 8000698:	2bff      	cmp	r3, #255	@ 0xff
 800069a:	d021      	beq.n	80006e0 <__aeabi_fmul+0x8c>
 800069c:	2280      	movs	r2, #128	@ 0x80
 800069e:	00e4      	lsls	r4, r4, #3
 80006a0:	04d2      	lsls	r2, r2, #19
 80006a2:	4314      	orrs	r4, r2
 80006a4:	4642      	mov	r2, r8
 80006a6:	3b7f      	subs	r3, #127	@ 0x7f
 80006a8:	195b      	adds	r3, r3, r5
 80006aa:	2100      	movs	r1, #0
 80006ac:	1c5d      	adds	r5, r3, #1
 80006ae:	2a0a      	cmp	r2, #10
 80006b0:	dc2e      	bgt.n	8000710 <__aeabi_fmul+0xbc>
 80006b2:	407e      	eors	r6, r7
 80006b4:	4642      	mov	r2, r8
 80006b6:	2a02      	cmp	r2, #2
 80006b8:	dc23      	bgt.n	8000702 <__aeabi_fmul+0xae>
 80006ba:	3a01      	subs	r2, #1
 80006bc:	2a01      	cmp	r2, #1
 80006be:	d900      	bls.n	80006c2 <__aeabi_fmul+0x6e>
 80006c0:	e0bd      	b.n	800083e <__aeabi_fmul+0x1ea>
 80006c2:	2902      	cmp	r1, #2
 80006c4:	d06e      	beq.n	80007a4 <__aeabi_fmul+0x150>
 80006c6:	2901      	cmp	r1, #1
 80006c8:	d12c      	bne.n	8000724 <__aeabi_fmul+0xd0>
 80006ca:	2000      	movs	r0, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	05c0      	lsls	r0, r0, #23
 80006d0:	07f6      	lsls	r6, r6, #31
 80006d2:	4310      	orrs	r0, r2
 80006d4:	4330      	orrs	r0, r6
 80006d6:	bce0      	pop	{r5, r6, r7}
 80006d8:	46ba      	mov	sl, r7
 80006da:	46b1      	mov	r9, r6
 80006dc:	46a8      	mov	r8, r5
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	002b      	movs	r3, r5
 80006e2:	33ff      	adds	r3, #255	@ 0xff
 80006e4:	2c00      	cmp	r4, #0
 80006e6:	d065      	beq.n	80007b4 <__aeabi_fmul+0x160>
 80006e8:	2203      	movs	r2, #3
 80006ea:	4641      	mov	r1, r8
 80006ec:	4311      	orrs	r1, r2
 80006ee:	0032      	movs	r2, r6
 80006f0:	3501      	adds	r5, #1
 80006f2:	4688      	mov	r8, r1
 80006f4:	407a      	eors	r2, r7
 80006f6:	35ff      	adds	r5, #255	@ 0xff
 80006f8:	290a      	cmp	r1, #10
 80006fa:	dd00      	ble.n	80006fe <__aeabi_fmul+0xaa>
 80006fc:	e0d8      	b.n	80008b0 <__aeabi_fmul+0x25c>
 80006fe:	0016      	movs	r6, r2
 8000700:	2103      	movs	r1, #3
 8000702:	4640      	mov	r0, r8
 8000704:	2201      	movs	r2, #1
 8000706:	4082      	lsls	r2, r0
 8000708:	20a6      	movs	r0, #166	@ 0xa6
 800070a:	00c0      	lsls	r0, r0, #3
 800070c:	4202      	tst	r2, r0
 800070e:	d020      	beq.n	8000752 <__aeabi_fmul+0xfe>
 8000710:	4653      	mov	r3, sl
 8000712:	2b02      	cmp	r3, #2
 8000714:	d046      	beq.n	80007a4 <__aeabi_fmul+0x150>
 8000716:	2b03      	cmp	r3, #3
 8000718:	d100      	bne.n	800071c <__aeabi_fmul+0xc8>
 800071a:	e0bb      	b.n	8000894 <__aeabi_fmul+0x240>
 800071c:	4651      	mov	r1, sl
 800071e:	464c      	mov	r4, r9
 8000720:	2901      	cmp	r1, #1
 8000722:	d0d2      	beq.n	80006ca <__aeabi_fmul+0x76>
 8000724:	002b      	movs	r3, r5
 8000726:	337f      	adds	r3, #127	@ 0x7f
 8000728:	2b00      	cmp	r3, #0
 800072a:	dd70      	ble.n	800080e <__aeabi_fmul+0x1ba>
 800072c:	0762      	lsls	r2, r4, #29
 800072e:	d004      	beq.n	800073a <__aeabi_fmul+0xe6>
 8000730:	220f      	movs	r2, #15
 8000732:	4022      	ands	r2, r4
 8000734:	2a04      	cmp	r2, #4
 8000736:	d000      	beq.n	800073a <__aeabi_fmul+0xe6>
 8000738:	3404      	adds	r4, #4
 800073a:	0122      	lsls	r2, r4, #4
 800073c:	d503      	bpl.n	8000746 <__aeabi_fmul+0xf2>
 800073e:	4b63      	ldr	r3, [pc, #396]	@ (80008cc <__aeabi_fmul+0x278>)
 8000740:	401c      	ands	r4, r3
 8000742:	002b      	movs	r3, r5
 8000744:	3380      	adds	r3, #128	@ 0x80
 8000746:	2bfe      	cmp	r3, #254	@ 0xfe
 8000748:	dc2c      	bgt.n	80007a4 <__aeabi_fmul+0x150>
 800074a:	01a2      	lsls	r2, r4, #6
 800074c:	0a52      	lsrs	r2, r2, #9
 800074e:	b2d8      	uxtb	r0, r3
 8000750:	e7bd      	b.n	80006ce <__aeabi_fmul+0x7a>
 8000752:	2090      	movs	r0, #144	@ 0x90
 8000754:	0080      	lsls	r0, r0, #2
 8000756:	4202      	tst	r2, r0
 8000758:	d127      	bne.n	80007aa <__aeabi_fmul+0x156>
 800075a:	38b9      	subs	r0, #185	@ 0xb9
 800075c:	38ff      	subs	r0, #255	@ 0xff
 800075e:	4210      	tst	r0, r2
 8000760:	d06d      	beq.n	800083e <__aeabi_fmul+0x1ea>
 8000762:	003e      	movs	r6, r7
 8000764:	46a1      	mov	r9, r4
 8000766:	468a      	mov	sl, r1
 8000768:	e7d2      	b.n	8000710 <__aeabi_fmul+0xbc>
 800076a:	2c00      	cmp	r4, #0
 800076c:	d141      	bne.n	80007f2 <__aeabi_fmul+0x19e>
 800076e:	2301      	movs	r3, #1
 8000770:	4642      	mov	r2, r8
 8000772:	431a      	orrs	r2, r3
 8000774:	4690      	mov	r8, r2
 8000776:	002b      	movs	r3, r5
 8000778:	4642      	mov	r2, r8
 800077a:	2101      	movs	r1, #1
 800077c:	1c5d      	adds	r5, r3, #1
 800077e:	2a0a      	cmp	r2, #10
 8000780:	dd97      	ble.n	80006b2 <__aeabi_fmul+0x5e>
 8000782:	e7c5      	b.n	8000710 <__aeabi_fmul+0xbc>
 8000784:	2b00      	cmp	r3, #0
 8000786:	d126      	bne.n	80007d6 <__aeabi_fmul+0x182>
 8000788:	2304      	movs	r3, #4
 800078a:	4698      	mov	r8, r3
 800078c:	3b03      	subs	r3, #3
 800078e:	2500      	movs	r5, #0
 8000790:	469a      	mov	sl, r3
 8000792:	e77a      	b.n	800068a <__aeabi_fmul+0x36>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d118      	bne.n	80007ca <__aeabi_fmul+0x176>
 8000798:	2308      	movs	r3, #8
 800079a:	4698      	mov	r8, r3
 800079c:	3b06      	subs	r3, #6
 800079e:	25ff      	movs	r5, #255	@ 0xff
 80007a0:	469a      	mov	sl, r3
 80007a2:	e772      	b.n	800068a <__aeabi_fmul+0x36>
 80007a4:	20ff      	movs	r0, #255	@ 0xff
 80007a6:	2200      	movs	r2, #0
 80007a8:	e791      	b.n	80006ce <__aeabi_fmul+0x7a>
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	2600      	movs	r6, #0
 80007ae:	20ff      	movs	r0, #255	@ 0xff
 80007b0:	03d2      	lsls	r2, r2, #15
 80007b2:	e78c      	b.n	80006ce <__aeabi_fmul+0x7a>
 80007b4:	4641      	mov	r1, r8
 80007b6:	2202      	movs	r2, #2
 80007b8:	3501      	adds	r5, #1
 80007ba:	4311      	orrs	r1, r2
 80007bc:	4688      	mov	r8, r1
 80007be:	35ff      	adds	r5, #255	@ 0xff
 80007c0:	290a      	cmp	r1, #10
 80007c2:	dca5      	bgt.n	8000710 <__aeabi_fmul+0xbc>
 80007c4:	2102      	movs	r1, #2
 80007c6:	407e      	eors	r6, r7
 80007c8:	e774      	b.n	80006b4 <__aeabi_fmul+0x60>
 80007ca:	230c      	movs	r3, #12
 80007cc:	4698      	mov	r8, r3
 80007ce:	3b09      	subs	r3, #9
 80007d0:	25ff      	movs	r5, #255	@ 0xff
 80007d2:	469a      	mov	sl, r3
 80007d4:	e759      	b.n	800068a <__aeabi_fmul+0x36>
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 ffc6 	bl	8002768 <__clzsi2>
 80007dc:	464a      	mov	r2, r9
 80007de:	1f43      	subs	r3, r0, #5
 80007e0:	2576      	movs	r5, #118	@ 0x76
 80007e2:	409a      	lsls	r2, r3
 80007e4:	2300      	movs	r3, #0
 80007e6:	426d      	negs	r5, r5
 80007e8:	4691      	mov	r9, r2
 80007ea:	4698      	mov	r8, r3
 80007ec:	469a      	mov	sl, r3
 80007ee:	1a2d      	subs	r5, r5, r0
 80007f0:	e74b      	b.n	800068a <__aeabi_fmul+0x36>
 80007f2:	0020      	movs	r0, r4
 80007f4:	f001 ffb8 	bl	8002768 <__clzsi2>
 80007f8:	4642      	mov	r2, r8
 80007fa:	1f43      	subs	r3, r0, #5
 80007fc:	409c      	lsls	r4, r3
 80007fe:	1a2b      	subs	r3, r5, r0
 8000800:	3b76      	subs	r3, #118	@ 0x76
 8000802:	2100      	movs	r1, #0
 8000804:	1c5d      	adds	r5, r3, #1
 8000806:	2a0a      	cmp	r2, #10
 8000808:	dc00      	bgt.n	800080c <__aeabi_fmul+0x1b8>
 800080a:	e752      	b.n	80006b2 <__aeabi_fmul+0x5e>
 800080c:	e780      	b.n	8000710 <__aeabi_fmul+0xbc>
 800080e:	2201      	movs	r2, #1
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	2b1b      	cmp	r3, #27
 8000814:	dd00      	ble.n	8000818 <__aeabi_fmul+0x1c4>
 8000816:	e758      	b.n	80006ca <__aeabi_fmul+0x76>
 8000818:	359e      	adds	r5, #158	@ 0x9e
 800081a:	0022      	movs	r2, r4
 800081c:	40ac      	lsls	r4, r5
 800081e:	40da      	lsrs	r2, r3
 8000820:	1e63      	subs	r3, r4, #1
 8000822:	419c      	sbcs	r4, r3
 8000824:	4322      	orrs	r2, r4
 8000826:	0753      	lsls	r3, r2, #29
 8000828:	d004      	beq.n	8000834 <__aeabi_fmul+0x1e0>
 800082a:	230f      	movs	r3, #15
 800082c:	4013      	ands	r3, r2
 800082e:	2b04      	cmp	r3, #4
 8000830:	d000      	beq.n	8000834 <__aeabi_fmul+0x1e0>
 8000832:	3204      	adds	r2, #4
 8000834:	0153      	lsls	r3, r2, #5
 8000836:	d537      	bpl.n	80008a8 <__aeabi_fmul+0x254>
 8000838:	2001      	movs	r0, #1
 800083a:	2200      	movs	r2, #0
 800083c:	e747      	b.n	80006ce <__aeabi_fmul+0x7a>
 800083e:	0c21      	lsrs	r1, r4, #16
 8000840:	464a      	mov	r2, r9
 8000842:	0424      	lsls	r4, r4, #16
 8000844:	0c24      	lsrs	r4, r4, #16
 8000846:	0027      	movs	r7, r4
 8000848:	0c10      	lsrs	r0, r2, #16
 800084a:	0412      	lsls	r2, r2, #16
 800084c:	0c12      	lsrs	r2, r2, #16
 800084e:	4344      	muls	r4, r0
 8000850:	4357      	muls	r7, r2
 8000852:	4348      	muls	r0, r1
 8000854:	4351      	muls	r1, r2
 8000856:	0c3a      	lsrs	r2, r7, #16
 8000858:	1909      	adds	r1, r1, r4
 800085a:	1852      	adds	r2, r2, r1
 800085c:	4294      	cmp	r4, r2
 800085e:	d903      	bls.n	8000868 <__aeabi_fmul+0x214>
 8000860:	2180      	movs	r1, #128	@ 0x80
 8000862:	0249      	lsls	r1, r1, #9
 8000864:	468c      	mov	ip, r1
 8000866:	4460      	add	r0, ip
 8000868:	043f      	lsls	r7, r7, #16
 800086a:	0411      	lsls	r1, r2, #16
 800086c:	0c3f      	lsrs	r7, r7, #16
 800086e:	19c9      	adds	r1, r1, r7
 8000870:	018c      	lsls	r4, r1, #6
 8000872:	1e67      	subs	r7, r4, #1
 8000874:	41bc      	sbcs	r4, r7
 8000876:	0c12      	lsrs	r2, r2, #16
 8000878:	0e89      	lsrs	r1, r1, #26
 800087a:	1812      	adds	r2, r2, r0
 800087c:	430c      	orrs	r4, r1
 800087e:	0192      	lsls	r2, r2, #6
 8000880:	4314      	orrs	r4, r2
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	d50e      	bpl.n	80008a4 <__aeabi_fmul+0x250>
 8000886:	2301      	movs	r3, #1
 8000888:	0862      	lsrs	r2, r4, #1
 800088a:	401c      	ands	r4, r3
 800088c:	4314      	orrs	r4, r2
 800088e:	e749      	b.n	8000724 <__aeabi_fmul+0xd0>
 8000890:	003e      	movs	r6, r7
 8000892:	46a1      	mov	r9, r4
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	464b      	mov	r3, r9
 8000898:	03d2      	lsls	r2, r2, #15
 800089a:	431a      	orrs	r2, r3
 800089c:	0252      	lsls	r2, r2, #9
 800089e:	20ff      	movs	r0, #255	@ 0xff
 80008a0:	0a52      	lsrs	r2, r2, #9
 80008a2:	e714      	b.n	80006ce <__aeabi_fmul+0x7a>
 80008a4:	001d      	movs	r5, r3
 80008a6:	e73d      	b.n	8000724 <__aeabi_fmul+0xd0>
 80008a8:	0192      	lsls	r2, r2, #6
 80008aa:	2000      	movs	r0, #0
 80008ac:	0a52      	lsrs	r2, r2, #9
 80008ae:	e70e      	b.n	80006ce <__aeabi_fmul+0x7a>
 80008b0:	290f      	cmp	r1, #15
 80008b2:	d1ed      	bne.n	8000890 <__aeabi_fmul+0x23c>
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	464b      	mov	r3, r9
 80008b8:	03d2      	lsls	r2, r2, #15
 80008ba:	4213      	tst	r3, r2
 80008bc:	d0ea      	beq.n	8000894 <__aeabi_fmul+0x240>
 80008be:	4214      	tst	r4, r2
 80008c0:	d1e8      	bne.n	8000894 <__aeabi_fmul+0x240>
 80008c2:	003e      	movs	r6, r7
 80008c4:	20ff      	movs	r0, #255	@ 0xff
 80008c6:	4322      	orrs	r2, r4
 80008c8:	e701      	b.n	80006ce <__aeabi_fmul+0x7a>
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	f7ffffff 	.word	0xf7ffffff

080008d0 <__aeabi_f2iz>:
 80008d0:	0241      	lsls	r1, r0, #9
 80008d2:	0042      	lsls	r2, r0, #1
 80008d4:	0fc3      	lsrs	r3, r0, #31
 80008d6:	0a49      	lsrs	r1, r1, #9
 80008d8:	2000      	movs	r0, #0
 80008da:	0e12      	lsrs	r2, r2, #24
 80008dc:	2a7e      	cmp	r2, #126	@ 0x7e
 80008de:	dd03      	ble.n	80008e8 <__aeabi_f2iz+0x18>
 80008e0:	2a9d      	cmp	r2, #157	@ 0x9d
 80008e2:	dd02      	ble.n	80008ea <__aeabi_f2iz+0x1a>
 80008e4:	4a09      	ldr	r2, [pc, #36]	@ (800090c <__aeabi_f2iz+0x3c>)
 80008e6:	1898      	adds	r0, r3, r2
 80008e8:	4770      	bx	lr
 80008ea:	2080      	movs	r0, #128	@ 0x80
 80008ec:	0400      	lsls	r0, r0, #16
 80008ee:	4301      	orrs	r1, r0
 80008f0:	2a95      	cmp	r2, #149	@ 0x95
 80008f2:	dc07      	bgt.n	8000904 <__aeabi_f2iz+0x34>
 80008f4:	2096      	movs	r0, #150	@ 0x96
 80008f6:	1a82      	subs	r2, r0, r2
 80008f8:	40d1      	lsrs	r1, r2
 80008fa:	4248      	negs	r0, r1
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f3      	bne.n	80008e8 <__aeabi_f2iz+0x18>
 8000900:	0008      	movs	r0, r1
 8000902:	e7f1      	b.n	80008e8 <__aeabi_f2iz+0x18>
 8000904:	3a96      	subs	r2, #150	@ 0x96
 8000906:	4091      	lsls	r1, r2
 8000908:	e7f7      	b.n	80008fa <__aeabi_f2iz+0x2a>
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	7fffffff 	.word	0x7fffffff

08000910 <__aeabi_i2f>:
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	2800      	cmp	r0, #0
 8000914:	d013      	beq.n	800093e <__aeabi_i2f+0x2e>
 8000916:	17c3      	asrs	r3, r0, #31
 8000918:	18c5      	adds	r5, r0, r3
 800091a:	405d      	eors	r5, r3
 800091c:	0fc4      	lsrs	r4, r0, #31
 800091e:	0028      	movs	r0, r5
 8000920:	f001 ff22 	bl	8002768 <__clzsi2>
 8000924:	239e      	movs	r3, #158	@ 0x9e
 8000926:	0001      	movs	r1, r0
 8000928:	1a1b      	subs	r3, r3, r0
 800092a:	2b96      	cmp	r3, #150	@ 0x96
 800092c:	dc0f      	bgt.n	800094e <__aeabi_i2f+0x3e>
 800092e:	2808      	cmp	r0, #8
 8000930:	d034      	beq.n	800099c <__aeabi_i2f+0x8c>
 8000932:	3908      	subs	r1, #8
 8000934:	408d      	lsls	r5, r1
 8000936:	026d      	lsls	r5, r5, #9
 8000938:	0a6d      	lsrs	r5, r5, #9
 800093a:	b2d8      	uxtb	r0, r3
 800093c:	e002      	b.n	8000944 <__aeabi_i2f+0x34>
 800093e:	2400      	movs	r4, #0
 8000940:	2000      	movs	r0, #0
 8000942:	2500      	movs	r5, #0
 8000944:	05c0      	lsls	r0, r0, #23
 8000946:	4328      	orrs	r0, r5
 8000948:	07e4      	lsls	r4, r4, #31
 800094a:	4320      	orrs	r0, r4
 800094c:	bd70      	pop	{r4, r5, r6, pc}
 800094e:	2b99      	cmp	r3, #153	@ 0x99
 8000950:	dc16      	bgt.n	8000980 <__aeabi_i2f+0x70>
 8000952:	1f42      	subs	r2, r0, #5
 8000954:	2805      	cmp	r0, #5
 8000956:	d000      	beq.n	800095a <__aeabi_i2f+0x4a>
 8000958:	4095      	lsls	r5, r2
 800095a:	002a      	movs	r2, r5
 800095c:	4811      	ldr	r0, [pc, #68]	@ (80009a4 <__aeabi_i2f+0x94>)
 800095e:	4002      	ands	r2, r0
 8000960:	076e      	lsls	r6, r5, #29
 8000962:	d009      	beq.n	8000978 <__aeabi_i2f+0x68>
 8000964:	260f      	movs	r6, #15
 8000966:	4035      	ands	r5, r6
 8000968:	2d04      	cmp	r5, #4
 800096a:	d005      	beq.n	8000978 <__aeabi_i2f+0x68>
 800096c:	3204      	adds	r2, #4
 800096e:	0155      	lsls	r5, r2, #5
 8000970:	d502      	bpl.n	8000978 <__aeabi_i2f+0x68>
 8000972:	239f      	movs	r3, #159	@ 0x9f
 8000974:	4002      	ands	r2, r0
 8000976:	1a5b      	subs	r3, r3, r1
 8000978:	0192      	lsls	r2, r2, #6
 800097a:	0a55      	lsrs	r5, r2, #9
 800097c:	b2d8      	uxtb	r0, r3
 800097e:	e7e1      	b.n	8000944 <__aeabi_i2f+0x34>
 8000980:	2205      	movs	r2, #5
 8000982:	1a12      	subs	r2, r2, r0
 8000984:	0028      	movs	r0, r5
 8000986:	40d0      	lsrs	r0, r2
 8000988:	0002      	movs	r2, r0
 800098a:	0008      	movs	r0, r1
 800098c:	301b      	adds	r0, #27
 800098e:	4085      	lsls	r5, r0
 8000990:	0028      	movs	r0, r5
 8000992:	1e45      	subs	r5, r0, #1
 8000994:	41a8      	sbcs	r0, r5
 8000996:	4302      	orrs	r2, r0
 8000998:	0015      	movs	r5, r2
 800099a:	e7de      	b.n	800095a <__aeabi_i2f+0x4a>
 800099c:	026d      	lsls	r5, r5, #9
 800099e:	2096      	movs	r0, #150	@ 0x96
 80009a0:	0a6d      	lsrs	r5, r5, #9
 80009a2:	e7cf      	b.n	8000944 <__aeabi_i2f+0x34>
 80009a4:	fbffffff 	.word	0xfbffffff

080009a8 <__aeabi_dadd>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	4657      	mov	r7, sl
 80009ac:	464e      	mov	r6, r9
 80009ae:	4645      	mov	r5, r8
 80009b0:	46de      	mov	lr, fp
 80009b2:	b5e0      	push	{r5, r6, r7, lr}
 80009b4:	b083      	sub	sp, #12
 80009b6:	9000      	str	r0, [sp, #0]
 80009b8:	9101      	str	r1, [sp, #4]
 80009ba:	030c      	lsls	r4, r1, #12
 80009bc:	004f      	lsls	r7, r1, #1
 80009be:	0fce      	lsrs	r6, r1, #31
 80009c0:	0a61      	lsrs	r1, r4, #9
 80009c2:	9c00      	ldr	r4, [sp, #0]
 80009c4:	031d      	lsls	r5, r3, #12
 80009c6:	0f64      	lsrs	r4, r4, #29
 80009c8:	430c      	orrs	r4, r1
 80009ca:	9900      	ldr	r1, [sp, #0]
 80009cc:	9200      	str	r2, [sp, #0]
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	00c8      	lsls	r0, r1, #3
 80009d2:	0059      	lsls	r1, r3, #1
 80009d4:	0d4b      	lsrs	r3, r1, #21
 80009d6:	4699      	mov	r9, r3
 80009d8:	9a00      	ldr	r2, [sp, #0]
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0fd9      	lsrs	r1, r3, #31
 80009e0:	0f53      	lsrs	r3, r2, #29
 80009e2:	432b      	orrs	r3, r5
 80009e4:	469a      	mov	sl, r3
 80009e6:	9b00      	ldr	r3, [sp, #0]
 80009e8:	0d7f      	lsrs	r7, r7, #21
 80009ea:	00da      	lsls	r2, r3, #3
 80009ec:	4694      	mov	ip, r2
 80009ee:	464a      	mov	r2, r9
 80009f0:	46b0      	mov	r8, r6
 80009f2:	1aba      	subs	r2, r7, r2
 80009f4:	428e      	cmp	r6, r1
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x52>
 80009f8:	e0b0      	b.n	8000b5c <__aeabi_dadd+0x1b4>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	dc00      	bgt.n	8000a00 <__aeabi_dadd+0x58>
 80009fe:	e078      	b.n	8000af2 <__aeabi_dadd+0x14a>
 8000a00:	4649      	mov	r1, r9
 8000a02:	2900      	cmp	r1, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x60>
 8000a06:	e0e9      	b.n	8000bdc <__aeabi_dadd+0x234>
 8000a08:	49c9      	ldr	r1, [pc, #804]	@ (8000d30 <__aeabi_dadd+0x388>)
 8000a0a:	428f      	cmp	r7, r1
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dadd+0x68>
 8000a0e:	e195      	b.n	8000d3c <__aeabi_dadd+0x394>
 8000a10:	2501      	movs	r5, #1
 8000a12:	2a38      	cmp	r2, #56	@ 0x38
 8000a14:	dc16      	bgt.n	8000a44 <__aeabi_dadd+0x9c>
 8000a16:	2180      	movs	r1, #128	@ 0x80
 8000a18:	4653      	mov	r3, sl
 8000a1a:	0409      	lsls	r1, r1, #16
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	469a      	mov	sl, r3
 8000a20:	2a1f      	cmp	r2, #31
 8000a22:	dd00      	ble.n	8000a26 <__aeabi_dadd+0x7e>
 8000a24:	e1e7      	b.n	8000df6 <__aeabi_dadd+0x44e>
 8000a26:	2120      	movs	r1, #32
 8000a28:	4655      	mov	r5, sl
 8000a2a:	1a8b      	subs	r3, r1, r2
 8000a2c:	4661      	mov	r1, ip
 8000a2e:	409d      	lsls	r5, r3
 8000a30:	40d1      	lsrs	r1, r2
 8000a32:	430d      	orrs	r5, r1
 8000a34:	4661      	mov	r1, ip
 8000a36:	4099      	lsls	r1, r3
 8000a38:	1e4b      	subs	r3, r1, #1
 8000a3a:	4199      	sbcs	r1, r3
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	40d3      	lsrs	r3, r2
 8000a40:	430d      	orrs	r5, r1
 8000a42:	1ae4      	subs	r4, r4, r3
 8000a44:	1b45      	subs	r5, r0, r5
 8000a46:	42a8      	cmp	r0, r5
 8000a48:	4180      	sbcs	r0, r0
 8000a4a:	4240      	negs	r0, r0
 8000a4c:	1a24      	subs	r4, r4, r0
 8000a4e:	0223      	lsls	r3, r4, #8
 8000a50:	d400      	bmi.n	8000a54 <__aeabi_dadd+0xac>
 8000a52:	e10f      	b.n	8000c74 <__aeabi_dadd+0x2cc>
 8000a54:	0264      	lsls	r4, r4, #9
 8000a56:	0a64      	lsrs	r4, r4, #9
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0xb6>
 8000a5c:	e139      	b.n	8000cd2 <__aeabi_dadd+0x32a>
 8000a5e:	0020      	movs	r0, r4
 8000a60:	f001 fe82 	bl	8002768 <__clzsi2>
 8000a64:	0003      	movs	r3, r0
 8000a66:	3b08      	subs	r3, #8
 8000a68:	2120      	movs	r1, #32
 8000a6a:	0028      	movs	r0, r5
 8000a6c:	1aca      	subs	r2, r1, r3
 8000a6e:	40d0      	lsrs	r0, r2
 8000a70:	409c      	lsls	r4, r3
 8000a72:	0002      	movs	r2, r0
 8000a74:	409d      	lsls	r5, r3
 8000a76:	4322      	orrs	r2, r4
 8000a78:	429f      	cmp	r7, r3
 8000a7a:	dd00      	ble.n	8000a7e <__aeabi_dadd+0xd6>
 8000a7c:	e173      	b.n	8000d66 <__aeabi_dadd+0x3be>
 8000a7e:	1bd8      	subs	r0, r3, r7
 8000a80:	3001      	adds	r0, #1
 8000a82:	1a09      	subs	r1, r1, r0
 8000a84:	002c      	movs	r4, r5
 8000a86:	408d      	lsls	r5, r1
 8000a88:	40c4      	lsrs	r4, r0
 8000a8a:	1e6b      	subs	r3, r5, #1
 8000a8c:	419d      	sbcs	r5, r3
 8000a8e:	0013      	movs	r3, r2
 8000a90:	40c2      	lsrs	r2, r0
 8000a92:	408b      	lsls	r3, r1
 8000a94:	4325      	orrs	r5, r4
 8000a96:	2700      	movs	r7, #0
 8000a98:	0014      	movs	r4, r2
 8000a9a:	431d      	orrs	r5, r3
 8000a9c:	076b      	lsls	r3, r5, #29
 8000a9e:	d009      	beq.n	8000ab4 <__aeabi_dadd+0x10c>
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	402b      	ands	r3, r5
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d005      	beq.n	8000ab4 <__aeabi_dadd+0x10c>
 8000aa8:	1d2b      	adds	r3, r5, #4
 8000aaa:	42ab      	cmp	r3, r5
 8000aac:	41ad      	sbcs	r5, r5
 8000aae:	426d      	negs	r5, r5
 8000ab0:	1964      	adds	r4, r4, r5
 8000ab2:	001d      	movs	r5, r3
 8000ab4:	0223      	lsls	r3, r4, #8
 8000ab6:	d400      	bmi.n	8000aba <__aeabi_dadd+0x112>
 8000ab8:	e12d      	b.n	8000d16 <__aeabi_dadd+0x36e>
 8000aba:	4a9d      	ldr	r2, [pc, #628]	@ (8000d30 <__aeabi_dadd+0x388>)
 8000abc:	3701      	adds	r7, #1
 8000abe:	4297      	cmp	r7, r2
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x11c>
 8000ac2:	e0d3      	b.n	8000c6c <__aeabi_dadd+0x2c4>
 8000ac4:	4646      	mov	r6, r8
 8000ac6:	499b      	ldr	r1, [pc, #620]	@ (8000d34 <__aeabi_dadd+0x38c>)
 8000ac8:	08ed      	lsrs	r5, r5, #3
 8000aca:	4021      	ands	r1, r4
 8000acc:	074a      	lsls	r2, r1, #29
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	057c      	lsls	r4, r7, #21
 8000ad2:	024d      	lsls	r5, r1, #9
 8000ad4:	0b2d      	lsrs	r5, r5, #12
 8000ad6:	0d64      	lsrs	r4, r4, #21
 8000ad8:	0524      	lsls	r4, r4, #20
 8000ada:	432c      	orrs	r4, r5
 8000adc:	07f6      	lsls	r6, r6, #31
 8000ade:	4334      	orrs	r4, r6
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	b003      	add	sp, #12
 8000ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ae8:	46bb      	mov	fp, r7
 8000aea:	46b2      	mov	sl, r6
 8000aec:	46a9      	mov	r9, r5
 8000aee:	46a0      	mov	r8, r4
 8000af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x150>
 8000af6:	e084      	b.n	8000c02 <__aeabi_dadd+0x25a>
 8000af8:	464a      	mov	r2, r9
 8000afa:	1bd2      	subs	r2, r2, r7
 8000afc:	2f00      	cmp	r7, #0
 8000afe:	d000      	beq.n	8000b02 <__aeabi_dadd+0x15a>
 8000b00:	e16d      	b.n	8000dde <__aeabi_dadd+0x436>
 8000b02:	0025      	movs	r5, r4
 8000b04:	4305      	orrs	r5, r0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x162>
 8000b08:	e127      	b.n	8000d5a <__aeabi_dadd+0x3b2>
 8000b0a:	1e56      	subs	r6, r2, #1
 8000b0c:	2a01      	cmp	r2, #1
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x16a>
 8000b10:	e23b      	b.n	8000f8a <__aeabi_dadd+0x5e2>
 8000b12:	4d87      	ldr	r5, [pc, #540]	@ (8000d30 <__aeabi_dadd+0x388>)
 8000b14:	42aa      	cmp	r2, r5
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x172>
 8000b18:	e26a      	b.n	8000ff0 <__aeabi_dadd+0x648>
 8000b1a:	2501      	movs	r5, #1
 8000b1c:	2e38      	cmp	r6, #56	@ 0x38
 8000b1e:	dc12      	bgt.n	8000b46 <__aeabi_dadd+0x19e>
 8000b20:	0032      	movs	r2, r6
 8000b22:	2a1f      	cmp	r2, #31
 8000b24:	dd00      	ble.n	8000b28 <__aeabi_dadd+0x180>
 8000b26:	e1f8      	b.n	8000f1a <__aeabi_dadd+0x572>
 8000b28:	2620      	movs	r6, #32
 8000b2a:	0025      	movs	r5, r4
 8000b2c:	1ab6      	subs	r6, r6, r2
 8000b2e:	0007      	movs	r7, r0
 8000b30:	4653      	mov	r3, sl
 8000b32:	40b0      	lsls	r0, r6
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	40b5      	lsls	r5, r6
 8000b38:	40d7      	lsrs	r7, r2
 8000b3a:	1e46      	subs	r6, r0, #1
 8000b3c:	41b0      	sbcs	r0, r6
 8000b3e:	1b1b      	subs	r3, r3, r4
 8000b40:	469a      	mov	sl, r3
 8000b42:	433d      	orrs	r5, r7
 8000b44:	4305      	orrs	r5, r0
 8000b46:	4662      	mov	r2, ip
 8000b48:	1b55      	subs	r5, r2, r5
 8000b4a:	45ac      	cmp	ip, r5
 8000b4c:	4192      	sbcs	r2, r2
 8000b4e:	4653      	mov	r3, sl
 8000b50:	4252      	negs	r2, r2
 8000b52:	000e      	movs	r6, r1
 8000b54:	464f      	mov	r7, r9
 8000b56:	4688      	mov	r8, r1
 8000b58:	1a9c      	subs	r4, r3, r2
 8000b5a:	e778      	b.n	8000a4e <__aeabi_dadd+0xa6>
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	dc00      	bgt.n	8000b62 <__aeabi_dadd+0x1ba>
 8000b60:	e08e      	b.n	8000c80 <__aeabi_dadd+0x2d8>
 8000b62:	4649      	mov	r1, r9
 8000b64:	2900      	cmp	r1, #0
 8000b66:	d175      	bne.n	8000c54 <__aeabi_dadd+0x2ac>
 8000b68:	4661      	mov	r1, ip
 8000b6a:	4653      	mov	r3, sl
 8000b6c:	4319      	orrs	r1, r3
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x1ca>
 8000b70:	e0f6      	b.n	8000d60 <__aeabi_dadd+0x3b8>
 8000b72:	1e51      	subs	r1, r2, #1
 8000b74:	2a01      	cmp	r2, #1
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0x1d2>
 8000b78:	e191      	b.n	8000e9e <__aeabi_dadd+0x4f6>
 8000b7a:	4d6d      	ldr	r5, [pc, #436]	@ (8000d30 <__aeabi_dadd+0x388>)
 8000b7c:	42aa      	cmp	r2, r5
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x1da>
 8000b80:	e0dc      	b.n	8000d3c <__aeabi_dadd+0x394>
 8000b82:	2501      	movs	r5, #1
 8000b84:	2938      	cmp	r1, #56	@ 0x38
 8000b86:	dc14      	bgt.n	8000bb2 <__aeabi_dadd+0x20a>
 8000b88:	000a      	movs	r2, r1
 8000b8a:	2a1f      	cmp	r2, #31
 8000b8c:	dd00      	ble.n	8000b90 <__aeabi_dadd+0x1e8>
 8000b8e:	e1a2      	b.n	8000ed6 <__aeabi_dadd+0x52e>
 8000b90:	2120      	movs	r1, #32
 8000b92:	4653      	mov	r3, sl
 8000b94:	1a89      	subs	r1, r1, r2
 8000b96:	408b      	lsls	r3, r1
 8000b98:	001d      	movs	r5, r3
 8000b9a:	4663      	mov	r3, ip
 8000b9c:	40d3      	lsrs	r3, r2
 8000b9e:	431d      	orrs	r5, r3
 8000ba0:	4663      	mov	r3, ip
 8000ba2:	408b      	lsls	r3, r1
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	1e4b      	subs	r3, r1, #1
 8000ba8:	4199      	sbcs	r1, r3
 8000baa:	4653      	mov	r3, sl
 8000bac:	40d3      	lsrs	r3, r2
 8000bae:	430d      	orrs	r5, r1
 8000bb0:	18e4      	adds	r4, r4, r3
 8000bb2:	182d      	adds	r5, r5, r0
 8000bb4:	4285      	cmp	r5, r0
 8000bb6:	4180      	sbcs	r0, r0
 8000bb8:	4240      	negs	r0, r0
 8000bba:	1824      	adds	r4, r4, r0
 8000bbc:	0223      	lsls	r3, r4, #8
 8000bbe:	d559      	bpl.n	8000c74 <__aeabi_dadd+0x2cc>
 8000bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8000d30 <__aeabi_dadd+0x388>)
 8000bc2:	3701      	adds	r7, #1
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	d051      	beq.n	8000c6c <__aeabi_dadd+0x2c4>
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4b5a      	ldr	r3, [pc, #360]	@ (8000d34 <__aeabi_dadd+0x38c>)
 8000bcc:	086a      	lsrs	r2, r5, #1
 8000bce:	401c      	ands	r4, r3
 8000bd0:	4029      	ands	r1, r5
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	07e5      	lsls	r5, r4, #31
 8000bd6:	4315      	orrs	r5, r2
 8000bd8:	0864      	lsrs	r4, r4, #1
 8000bda:	e75f      	b.n	8000a9c <__aeabi_dadd+0xf4>
 8000bdc:	4661      	mov	r1, ip
 8000bde:	4653      	mov	r3, sl
 8000be0:	4319      	orrs	r1, r3
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dadd+0x23e>
 8000be4:	e0bc      	b.n	8000d60 <__aeabi_dadd+0x3b8>
 8000be6:	1e51      	subs	r1, r2, #1
 8000be8:	2a01      	cmp	r2, #1
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x246>
 8000bec:	e164      	b.n	8000eb8 <__aeabi_dadd+0x510>
 8000bee:	4d50      	ldr	r5, [pc, #320]	@ (8000d30 <__aeabi_dadd+0x388>)
 8000bf0:	42aa      	cmp	r2, r5
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dadd+0x24e>
 8000bf4:	e16a      	b.n	8000ecc <__aeabi_dadd+0x524>
 8000bf6:	2501      	movs	r5, #1
 8000bf8:	2938      	cmp	r1, #56	@ 0x38
 8000bfa:	dd00      	ble.n	8000bfe <__aeabi_dadd+0x256>
 8000bfc:	e722      	b.n	8000a44 <__aeabi_dadd+0x9c>
 8000bfe:	000a      	movs	r2, r1
 8000c00:	e70e      	b.n	8000a20 <__aeabi_dadd+0x78>
 8000c02:	4a4d      	ldr	r2, [pc, #308]	@ (8000d38 <__aeabi_dadd+0x390>)
 8000c04:	1c7d      	adds	r5, r7, #1
 8000c06:	4215      	tst	r5, r2
 8000c08:	d000      	beq.n	8000c0c <__aeabi_dadd+0x264>
 8000c0a:	e0d0      	b.n	8000dae <__aeabi_dadd+0x406>
 8000c0c:	0025      	movs	r5, r4
 8000c0e:	4662      	mov	r2, ip
 8000c10:	4653      	mov	r3, sl
 8000c12:	4305      	orrs	r5, r0
 8000c14:	431a      	orrs	r2, r3
 8000c16:	2f00      	cmp	r7, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_dadd+0x274>
 8000c1a:	e137      	b.n	8000e8c <__aeabi_dadd+0x4e4>
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x27a>
 8000c20:	e1a8      	b.n	8000f74 <__aeabi_dadd+0x5cc>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x280>
 8000c26:	e16a      	b.n	8000efe <__aeabi_dadd+0x556>
 8000c28:	4663      	mov	r3, ip
 8000c2a:	1ac5      	subs	r5, r0, r3
 8000c2c:	4653      	mov	r3, sl
 8000c2e:	1ae2      	subs	r2, r4, r3
 8000c30:	42a8      	cmp	r0, r5
 8000c32:	419b      	sbcs	r3, r3
 8000c34:	425b      	negs	r3, r3
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	021a      	lsls	r2, r3, #8
 8000c3a:	d400      	bmi.n	8000c3e <__aeabi_dadd+0x296>
 8000c3c:	e203      	b.n	8001046 <__aeabi_dadd+0x69e>
 8000c3e:	4663      	mov	r3, ip
 8000c40:	1a1d      	subs	r5, r3, r0
 8000c42:	45ac      	cmp	ip, r5
 8000c44:	4192      	sbcs	r2, r2
 8000c46:	4653      	mov	r3, sl
 8000c48:	4252      	negs	r2, r2
 8000c4a:	1b1c      	subs	r4, r3, r4
 8000c4c:	000e      	movs	r6, r1
 8000c4e:	4688      	mov	r8, r1
 8000c50:	1aa4      	subs	r4, r4, r2
 8000c52:	e723      	b.n	8000a9c <__aeabi_dadd+0xf4>
 8000c54:	4936      	ldr	r1, [pc, #216]	@ (8000d30 <__aeabi_dadd+0x388>)
 8000c56:	428f      	cmp	r7, r1
 8000c58:	d070      	beq.n	8000d3c <__aeabi_dadd+0x394>
 8000c5a:	2501      	movs	r5, #1
 8000c5c:	2a38      	cmp	r2, #56	@ 0x38
 8000c5e:	dca8      	bgt.n	8000bb2 <__aeabi_dadd+0x20a>
 8000c60:	2180      	movs	r1, #128	@ 0x80
 8000c62:	4653      	mov	r3, sl
 8000c64:	0409      	lsls	r1, r1, #16
 8000c66:	430b      	orrs	r3, r1
 8000c68:	469a      	mov	sl, r3
 8000c6a:	e78e      	b.n	8000b8a <__aeabi_dadd+0x1e2>
 8000c6c:	003c      	movs	r4, r7
 8000c6e:	2500      	movs	r5, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	e731      	b.n	8000ad8 <__aeabi_dadd+0x130>
 8000c74:	2307      	movs	r3, #7
 8000c76:	402b      	ands	r3, r5
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_dadd+0x2d6>
 8000c7c:	e710      	b.n	8000aa0 <__aeabi_dadd+0xf8>
 8000c7e:	e093      	b.n	8000da8 <__aeabi_dadd+0x400>
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	d074      	beq.n	8000d6e <__aeabi_dadd+0x3c6>
 8000c84:	464a      	mov	r2, r9
 8000c86:	1bd2      	subs	r2, r2, r7
 8000c88:	2f00      	cmp	r7, #0
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x2e6>
 8000c8c:	e0c7      	b.n	8000e1e <__aeabi_dadd+0x476>
 8000c8e:	4928      	ldr	r1, [pc, #160]	@ (8000d30 <__aeabi_dadd+0x388>)
 8000c90:	4589      	cmp	r9, r1
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x2ee>
 8000c94:	e185      	b.n	8000fa2 <__aeabi_dadd+0x5fa>
 8000c96:	2501      	movs	r5, #1
 8000c98:	2a38      	cmp	r2, #56	@ 0x38
 8000c9a:	dc12      	bgt.n	8000cc2 <__aeabi_dadd+0x31a>
 8000c9c:	2180      	movs	r1, #128	@ 0x80
 8000c9e:	0409      	lsls	r1, r1, #16
 8000ca0:	430c      	orrs	r4, r1
 8000ca2:	2a1f      	cmp	r2, #31
 8000ca4:	dd00      	ble.n	8000ca8 <__aeabi_dadd+0x300>
 8000ca6:	e1ab      	b.n	8001000 <__aeabi_dadd+0x658>
 8000ca8:	2120      	movs	r1, #32
 8000caa:	0025      	movs	r5, r4
 8000cac:	1a89      	subs	r1, r1, r2
 8000cae:	0007      	movs	r7, r0
 8000cb0:	4088      	lsls	r0, r1
 8000cb2:	408d      	lsls	r5, r1
 8000cb4:	40d7      	lsrs	r7, r2
 8000cb6:	1e41      	subs	r1, r0, #1
 8000cb8:	4188      	sbcs	r0, r1
 8000cba:	40d4      	lsrs	r4, r2
 8000cbc:	433d      	orrs	r5, r7
 8000cbe:	4305      	orrs	r5, r0
 8000cc0:	44a2      	add	sl, r4
 8000cc2:	4465      	add	r5, ip
 8000cc4:	4565      	cmp	r5, ip
 8000cc6:	4192      	sbcs	r2, r2
 8000cc8:	4252      	negs	r2, r2
 8000cca:	4452      	add	r2, sl
 8000ccc:	0014      	movs	r4, r2
 8000cce:	464f      	mov	r7, r9
 8000cd0:	e774      	b.n	8000bbc <__aeabi_dadd+0x214>
 8000cd2:	0028      	movs	r0, r5
 8000cd4:	f001 fd48 	bl	8002768 <__clzsi2>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	3318      	adds	r3, #24
 8000cdc:	2b1f      	cmp	r3, #31
 8000cde:	dc00      	bgt.n	8000ce2 <__aeabi_dadd+0x33a>
 8000ce0:	e6c2      	b.n	8000a68 <__aeabi_dadd+0xc0>
 8000ce2:	002a      	movs	r2, r5
 8000ce4:	3808      	subs	r0, #8
 8000ce6:	4082      	lsls	r2, r0
 8000ce8:	429f      	cmp	r7, r3
 8000cea:	dd00      	ble.n	8000cee <__aeabi_dadd+0x346>
 8000cec:	e0a9      	b.n	8000e42 <__aeabi_dadd+0x49a>
 8000cee:	1bdb      	subs	r3, r3, r7
 8000cf0:	1c58      	adds	r0, r3, #1
 8000cf2:	281f      	cmp	r0, #31
 8000cf4:	dc00      	bgt.n	8000cf8 <__aeabi_dadd+0x350>
 8000cf6:	e1ac      	b.n	8001052 <__aeabi_dadd+0x6aa>
 8000cf8:	0015      	movs	r5, r2
 8000cfa:	3b1f      	subs	r3, #31
 8000cfc:	40dd      	lsrs	r5, r3
 8000cfe:	2820      	cmp	r0, #32
 8000d00:	d005      	beq.n	8000d0e <__aeabi_dadd+0x366>
 8000d02:	2340      	movs	r3, #64	@ 0x40
 8000d04:	1a1b      	subs	r3, r3, r0
 8000d06:	409a      	lsls	r2, r3
 8000d08:	1e53      	subs	r3, r2, #1
 8000d0a:	419a      	sbcs	r2, r3
 8000d0c:	4315      	orrs	r5, r2
 8000d0e:	2307      	movs	r3, #7
 8000d10:	2700      	movs	r7, #0
 8000d12:	402b      	ands	r3, r5
 8000d14:	e7b0      	b.n	8000c78 <__aeabi_dadd+0x2d0>
 8000d16:	08ed      	lsrs	r5, r5, #3
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <__aeabi_dadd+0x388>)
 8000d1a:	0762      	lsls	r2, r4, #29
 8000d1c:	432a      	orrs	r2, r5
 8000d1e:	08e4      	lsrs	r4, r4, #3
 8000d20:	429f      	cmp	r7, r3
 8000d22:	d00f      	beq.n	8000d44 <__aeabi_dadd+0x39c>
 8000d24:	0324      	lsls	r4, r4, #12
 8000d26:	0b25      	lsrs	r5, r4, #12
 8000d28:	057c      	lsls	r4, r7, #21
 8000d2a:	0d64      	lsrs	r4, r4, #21
 8000d2c:	e6d4      	b.n	8000ad8 <__aeabi_dadd+0x130>
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	000007ff 	.word	0x000007ff
 8000d34:	ff7fffff 	.word	0xff7fffff
 8000d38:	000007fe 	.word	0x000007fe
 8000d3c:	08c0      	lsrs	r0, r0, #3
 8000d3e:	0762      	lsls	r2, r4, #29
 8000d40:	4302      	orrs	r2, r0
 8000d42:	08e4      	lsrs	r4, r4, #3
 8000d44:	0013      	movs	r3, r2
 8000d46:	4323      	orrs	r3, r4
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dadd+0x3a4>
 8000d4a:	e186      	b.n	800105a <__aeabi_dadd+0x6b2>
 8000d4c:	2580      	movs	r5, #128	@ 0x80
 8000d4e:	032d      	lsls	r5, r5, #12
 8000d50:	4325      	orrs	r5, r4
 8000d52:	032d      	lsls	r5, r5, #12
 8000d54:	4cc3      	ldr	r4, [pc, #780]	@ (8001064 <__aeabi_dadd+0x6bc>)
 8000d56:	0b2d      	lsrs	r5, r5, #12
 8000d58:	e6be      	b.n	8000ad8 <__aeabi_dadd+0x130>
 8000d5a:	4660      	mov	r0, ip
 8000d5c:	4654      	mov	r4, sl
 8000d5e:	000e      	movs	r6, r1
 8000d60:	0017      	movs	r7, r2
 8000d62:	08c5      	lsrs	r5, r0, #3
 8000d64:	e7d8      	b.n	8000d18 <__aeabi_dadd+0x370>
 8000d66:	4cc0      	ldr	r4, [pc, #768]	@ (8001068 <__aeabi_dadd+0x6c0>)
 8000d68:	1aff      	subs	r7, r7, r3
 8000d6a:	4014      	ands	r4, r2
 8000d6c:	e696      	b.n	8000a9c <__aeabi_dadd+0xf4>
 8000d6e:	4abf      	ldr	r2, [pc, #764]	@ (800106c <__aeabi_dadd+0x6c4>)
 8000d70:	1c79      	adds	r1, r7, #1
 8000d72:	4211      	tst	r1, r2
 8000d74:	d16b      	bne.n	8000e4e <__aeabi_dadd+0x4a6>
 8000d76:	0022      	movs	r2, r4
 8000d78:	4302      	orrs	r2, r0
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_dadd+0x3d8>
 8000d7e:	e0db      	b.n	8000f38 <__aeabi_dadd+0x590>
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d100      	bne.n	8000d86 <__aeabi_dadd+0x3de>
 8000d84:	e12d      	b.n	8000fe2 <__aeabi_dadd+0x63a>
 8000d86:	4662      	mov	r2, ip
 8000d88:	4653      	mov	r3, sl
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_dadd+0x3e8>
 8000d8e:	e0b6      	b.n	8000efe <__aeabi_dadd+0x556>
 8000d90:	4663      	mov	r3, ip
 8000d92:	18c5      	adds	r5, r0, r3
 8000d94:	4285      	cmp	r5, r0
 8000d96:	4180      	sbcs	r0, r0
 8000d98:	4454      	add	r4, sl
 8000d9a:	4240      	negs	r0, r0
 8000d9c:	1824      	adds	r4, r4, r0
 8000d9e:	0223      	lsls	r3, r4, #8
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_dadd+0x400>
 8000da2:	000f      	movs	r7, r1
 8000da4:	4bb0      	ldr	r3, [pc, #704]	@ (8001068 <__aeabi_dadd+0x6c0>)
 8000da6:	401c      	ands	r4, r3
 8000da8:	003a      	movs	r2, r7
 8000daa:	0028      	movs	r0, r5
 8000dac:	e7d8      	b.n	8000d60 <__aeabi_dadd+0x3b8>
 8000dae:	4662      	mov	r2, ip
 8000db0:	1a85      	subs	r5, r0, r2
 8000db2:	42a8      	cmp	r0, r5
 8000db4:	4192      	sbcs	r2, r2
 8000db6:	4653      	mov	r3, sl
 8000db8:	4252      	negs	r2, r2
 8000dba:	4691      	mov	r9, r2
 8000dbc:	1ae3      	subs	r3, r4, r3
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	1ad2      	subs	r2, r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	021a      	lsls	r2, r3, #8
 8000dca:	d454      	bmi.n	8000e76 <__aeabi_dadd+0x4ce>
 8000dcc:	464a      	mov	r2, r9
 8000dce:	464c      	mov	r4, r9
 8000dd0:	432a      	orrs	r2, r5
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x42e>
 8000dd4:	e640      	b.n	8000a58 <__aeabi_dadd+0xb0>
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	2400      	movs	r4, #0
 8000dda:	2500      	movs	r5, #0
 8000ddc:	e67c      	b.n	8000ad8 <__aeabi_dadd+0x130>
 8000dde:	4da1      	ldr	r5, [pc, #644]	@ (8001064 <__aeabi_dadd+0x6bc>)
 8000de0:	45a9      	cmp	r9, r5
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x43e>
 8000de4:	e090      	b.n	8000f08 <__aeabi_dadd+0x560>
 8000de6:	2501      	movs	r5, #1
 8000de8:	2a38      	cmp	r2, #56	@ 0x38
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x446>
 8000dec:	e6ab      	b.n	8000b46 <__aeabi_dadd+0x19e>
 8000dee:	2580      	movs	r5, #128	@ 0x80
 8000df0:	042d      	lsls	r5, r5, #16
 8000df2:	432c      	orrs	r4, r5
 8000df4:	e695      	b.n	8000b22 <__aeabi_dadd+0x17a>
 8000df6:	0011      	movs	r1, r2
 8000df8:	4655      	mov	r5, sl
 8000dfa:	3920      	subs	r1, #32
 8000dfc:	40cd      	lsrs	r5, r1
 8000dfe:	46a9      	mov	r9, r5
 8000e00:	2a20      	cmp	r2, #32
 8000e02:	d006      	beq.n	8000e12 <__aeabi_dadd+0x46a>
 8000e04:	2140      	movs	r1, #64	@ 0x40
 8000e06:	4653      	mov	r3, sl
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	4093      	lsls	r3, r2
 8000e0c:	4662      	mov	r2, ip
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	4694      	mov	ip, r2
 8000e12:	4665      	mov	r5, ip
 8000e14:	1e6b      	subs	r3, r5, #1
 8000e16:	419d      	sbcs	r5, r3
 8000e18:	464b      	mov	r3, r9
 8000e1a:	431d      	orrs	r5, r3
 8000e1c:	e612      	b.n	8000a44 <__aeabi_dadd+0x9c>
 8000e1e:	0021      	movs	r1, r4
 8000e20:	4301      	orrs	r1, r0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dadd+0x47e>
 8000e24:	e0c4      	b.n	8000fb0 <__aeabi_dadd+0x608>
 8000e26:	1e51      	subs	r1, r2, #1
 8000e28:	2a01      	cmp	r2, #1
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dadd+0x486>
 8000e2c:	e0fb      	b.n	8001026 <__aeabi_dadd+0x67e>
 8000e2e:	4d8d      	ldr	r5, [pc, #564]	@ (8001064 <__aeabi_dadd+0x6bc>)
 8000e30:	42aa      	cmp	r2, r5
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x48e>
 8000e34:	e0b5      	b.n	8000fa2 <__aeabi_dadd+0x5fa>
 8000e36:	2501      	movs	r5, #1
 8000e38:	2938      	cmp	r1, #56	@ 0x38
 8000e3a:	dd00      	ble.n	8000e3e <__aeabi_dadd+0x496>
 8000e3c:	e741      	b.n	8000cc2 <__aeabi_dadd+0x31a>
 8000e3e:	000a      	movs	r2, r1
 8000e40:	e72f      	b.n	8000ca2 <__aeabi_dadd+0x2fa>
 8000e42:	4c89      	ldr	r4, [pc, #548]	@ (8001068 <__aeabi_dadd+0x6c0>)
 8000e44:	1aff      	subs	r7, r7, r3
 8000e46:	4014      	ands	r4, r2
 8000e48:	0762      	lsls	r2, r4, #29
 8000e4a:	08e4      	lsrs	r4, r4, #3
 8000e4c:	e76a      	b.n	8000d24 <__aeabi_dadd+0x37c>
 8000e4e:	4a85      	ldr	r2, [pc, #532]	@ (8001064 <__aeabi_dadd+0x6bc>)
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x4ae>
 8000e54:	e0e3      	b.n	800101e <__aeabi_dadd+0x676>
 8000e56:	4663      	mov	r3, ip
 8000e58:	18c2      	adds	r2, r0, r3
 8000e5a:	4282      	cmp	r2, r0
 8000e5c:	4180      	sbcs	r0, r0
 8000e5e:	0023      	movs	r3, r4
 8000e60:	4240      	negs	r0, r0
 8000e62:	4453      	add	r3, sl
 8000e64:	181b      	adds	r3, r3, r0
 8000e66:	07dd      	lsls	r5, r3, #31
 8000e68:	085c      	lsrs	r4, r3, #1
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	0852      	lsrs	r2, r2, #1
 8000e6e:	4315      	orrs	r5, r2
 8000e70:	000f      	movs	r7, r1
 8000e72:	402b      	ands	r3, r5
 8000e74:	e700      	b.n	8000c78 <__aeabi_dadd+0x2d0>
 8000e76:	4663      	mov	r3, ip
 8000e78:	1a1d      	subs	r5, r3, r0
 8000e7a:	45ac      	cmp	ip, r5
 8000e7c:	4192      	sbcs	r2, r2
 8000e7e:	4653      	mov	r3, sl
 8000e80:	4252      	negs	r2, r2
 8000e82:	1b1c      	subs	r4, r3, r4
 8000e84:	000e      	movs	r6, r1
 8000e86:	4688      	mov	r8, r1
 8000e88:	1aa4      	subs	r4, r4, r2
 8000e8a:	e5e5      	b.n	8000a58 <__aeabi_dadd+0xb0>
 8000e8c:	2d00      	cmp	r5, #0
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x4ea>
 8000e90:	e091      	b.n	8000fb6 <__aeabi_dadd+0x60e>
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d138      	bne.n	8000f08 <__aeabi_dadd+0x560>
 8000e96:	2480      	movs	r4, #128	@ 0x80
 8000e98:	2600      	movs	r6, #0
 8000e9a:	0324      	lsls	r4, r4, #12
 8000e9c:	e756      	b.n	8000d4c <__aeabi_dadd+0x3a4>
 8000e9e:	4663      	mov	r3, ip
 8000ea0:	18c5      	adds	r5, r0, r3
 8000ea2:	4285      	cmp	r5, r0
 8000ea4:	4180      	sbcs	r0, r0
 8000ea6:	4454      	add	r4, sl
 8000ea8:	4240      	negs	r0, r0
 8000eaa:	1824      	adds	r4, r4, r0
 8000eac:	2701      	movs	r7, #1
 8000eae:	0223      	lsls	r3, r4, #8
 8000eb0:	d400      	bmi.n	8000eb4 <__aeabi_dadd+0x50c>
 8000eb2:	e6df      	b.n	8000c74 <__aeabi_dadd+0x2cc>
 8000eb4:	2702      	movs	r7, #2
 8000eb6:	e687      	b.n	8000bc8 <__aeabi_dadd+0x220>
 8000eb8:	4663      	mov	r3, ip
 8000eba:	1ac5      	subs	r5, r0, r3
 8000ebc:	42a8      	cmp	r0, r5
 8000ebe:	4180      	sbcs	r0, r0
 8000ec0:	4653      	mov	r3, sl
 8000ec2:	4240      	negs	r0, r0
 8000ec4:	1ae4      	subs	r4, r4, r3
 8000ec6:	2701      	movs	r7, #1
 8000ec8:	1a24      	subs	r4, r4, r0
 8000eca:	e5c0      	b.n	8000a4e <__aeabi_dadd+0xa6>
 8000ecc:	0762      	lsls	r2, r4, #29
 8000ece:	08c0      	lsrs	r0, r0, #3
 8000ed0:	4302      	orrs	r2, r0
 8000ed2:	08e4      	lsrs	r4, r4, #3
 8000ed4:	e736      	b.n	8000d44 <__aeabi_dadd+0x39c>
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	4653      	mov	r3, sl
 8000eda:	3920      	subs	r1, #32
 8000edc:	40cb      	lsrs	r3, r1
 8000ede:	4699      	mov	r9, r3
 8000ee0:	2a20      	cmp	r2, #32
 8000ee2:	d006      	beq.n	8000ef2 <__aeabi_dadd+0x54a>
 8000ee4:	2140      	movs	r1, #64	@ 0x40
 8000ee6:	4653      	mov	r3, sl
 8000ee8:	1a8a      	subs	r2, r1, r2
 8000eea:	4093      	lsls	r3, r2
 8000eec:	4662      	mov	r2, ip
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	4665      	mov	r5, ip
 8000ef4:	1e6b      	subs	r3, r5, #1
 8000ef6:	419d      	sbcs	r5, r3
 8000ef8:	464b      	mov	r3, r9
 8000efa:	431d      	orrs	r5, r3
 8000efc:	e659      	b.n	8000bb2 <__aeabi_dadd+0x20a>
 8000efe:	0762      	lsls	r2, r4, #29
 8000f00:	08c0      	lsrs	r0, r0, #3
 8000f02:	4302      	orrs	r2, r0
 8000f04:	08e4      	lsrs	r4, r4, #3
 8000f06:	e70d      	b.n	8000d24 <__aeabi_dadd+0x37c>
 8000f08:	4653      	mov	r3, sl
 8000f0a:	075a      	lsls	r2, r3, #29
 8000f0c:	4663      	mov	r3, ip
 8000f0e:	08d8      	lsrs	r0, r3, #3
 8000f10:	4653      	mov	r3, sl
 8000f12:	000e      	movs	r6, r1
 8000f14:	4302      	orrs	r2, r0
 8000f16:	08dc      	lsrs	r4, r3, #3
 8000f18:	e714      	b.n	8000d44 <__aeabi_dadd+0x39c>
 8000f1a:	0015      	movs	r5, r2
 8000f1c:	0026      	movs	r6, r4
 8000f1e:	3d20      	subs	r5, #32
 8000f20:	40ee      	lsrs	r6, r5
 8000f22:	2a20      	cmp	r2, #32
 8000f24:	d003      	beq.n	8000f2e <__aeabi_dadd+0x586>
 8000f26:	2540      	movs	r5, #64	@ 0x40
 8000f28:	1aaa      	subs	r2, r5, r2
 8000f2a:	4094      	lsls	r4, r2
 8000f2c:	4320      	orrs	r0, r4
 8000f2e:	1e42      	subs	r2, r0, #1
 8000f30:	4190      	sbcs	r0, r2
 8000f32:	0005      	movs	r5, r0
 8000f34:	4335      	orrs	r5, r6
 8000f36:	e606      	b.n	8000b46 <__aeabi_dadd+0x19e>
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d07c      	beq.n	8001036 <__aeabi_dadd+0x68e>
 8000f3c:	4662      	mov	r2, ip
 8000f3e:	4653      	mov	r3, sl
 8000f40:	08c0      	lsrs	r0, r0, #3
 8000f42:	431a      	orrs	r2, r3
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x5a0>
 8000f46:	e6fa      	b.n	8000d3e <__aeabi_dadd+0x396>
 8000f48:	0762      	lsls	r2, r4, #29
 8000f4a:	4310      	orrs	r0, r2
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	08e4      	lsrs	r4, r4, #3
 8000f50:	0312      	lsls	r2, r2, #12
 8000f52:	4214      	tst	r4, r2
 8000f54:	d008      	beq.n	8000f68 <__aeabi_dadd+0x5c0>
 8000f56:	08d9      	lsrs	r1, r3, #3
 8000f58:	4211      	tst	r1, r2
 8000f5a:	d105      	bne.n	8000f68 <__aeabi_dadd+0x5c0>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	08d8      	lsrs	r0, r3, #3
 8000f60:	4653      	mov	r3, sl
 8000f62:	000c      	movs	r4, r1
 8000f64:	075b      	lsls	r3, r3, #29
 8000f66:	4318      	orrs	r0, r3
 8000f68:	0f42      	lsrs	r2, r0, #29
 8000f6a:	00c0      	lsls	r0, r0, #3
 8000f6c:	08c0      	lsrs	r0, r0, #3
 8000f6e:	0752      	lsls	r2, r2, #29
 8000f70:	4302      	orrs	r2, r0
 8000f72:	e6e7      	b.n	8000d44 <__aeabi_dadd+0x39c>
 8000f74:	2a00      	cmp	r2, #0
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x5d2>
 8000f78:	e72d      	b.n	8000dd6 <__aeabi_dadd+0x42e>
 8000f7a:	4663      	mov	r3, ip
 8000f7c:	08d8      	lsrs	r0, r3, #3
 8000f7e:	4653      	mov	r3, sl
 8000f80:	075a      	lsls	r2, r3, #29
 8000f82:	000e      	movs	r6, r1
 8000f84:	4302      	orrs	r2, r0
 8000f86:	08dc      	lsrs	r4, r3, #3
 8000f88:	e6cc      	b.n	8000d24 <__aeabi_dadd+0x37c>
 8000f8a:	4663      	mov	r3, ip
 8000f8c:	1a1d      	subs	r5, r3, r0
 8000f8e:	45ac      	cmp	ip, r5
 8000f90:	4192      	sbcs	r2, r2
 8000f92:	4653      	mov	r3, sl
 8000f94:	4252      	negs	r2, r2
 8000f96:	1b1c      	subs	r4, r3, r4
 8000f98:	000e      	movs	r6, r1
 8000f9a:	4688      	mov	r8, r1
 8000f9c:	1aa4      	subs	r4, r4, r2
 8000f9e:	3701      	adds	r7, #1
 8000fa0:	e555      	b.n	8000a4e <__aeabi_dadd+0xa6>
 8000fa2:	4663      	mov	r3, ip
 8000fa4:	08d9      	lsrs	r1, r3, #3
 8000fa6:	4653      	mov	r3, sl
 8000fa8:	075a      	lsls	r2, r3, #29
 8000faa:	430a      	orrs	r2, r1
 8000fac:	08dc      	lsrs	r4, r3, #3
 8000fae:	e6c9      	b.n	8000d44 <__aeabi_dadd+0x39c>
 8000fb0:	4660      	mov	r0, ip
 8000fb2:	4654      	mov	r4, sl
 8000fb4:	e6d4      	b.n	8000d60 <__aeabi_dadd+0x3b8>
 8000fb6:	08c0      	lsrs	r0, r0, #3
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dadd+0x616>
 8000fbc:	e6bf      	b.n	8000d3e <__aeabi_dadd+0x396>
 8000fbe:	0762      	lsls	r2, r4, #29
 8000fc0:	4310      	orrs	r0, r2
 8000fc2:	2280      	movs	r2, #128	@ 0x80
 8000fc4:	08e4      	lsrs	r4, r4, #3
 8000fc6:	0312      	lsls	r2, r2, #12
 8000fc8:	4214      	tst	r4, r2
 8000fca:	d0cd      	beq.n	8000f68 <__aeabi_dadd+0x5c0>
 8000fcc:	08dd      	lsrs	r5, r3, #3
 8000fce:	4215      	tst	r5, r2
 8000fd0:	d1ca      	bne.n	8000f68 <__aeabi_dadd+0x5c0>
 8000fd2:	4663      	mov	r3, ip
 8000fd4:	08d8      	lsrs	r0, r3, #3
 8000fd6:	4653      	mov	r3, sl
 8000fd8:	075b      	lsls	r3, r3, #29
 8000fda:	000e      	movs	r6, r1
 8000fdc:	002c      	movs	r4, r5
 8000fde:	4318      	orrs	r0, r3
 8000fe0:	e7c2      	b.n	8000f68 <__aeabi_dadd+0x5c0>
 8000fe2:	4663      	mov	r3, ip
 8000fe4:	08d9      	lsrs	r1, r3, #3
 8000fe6:	4653      	mov	r3, sl
 8000fe8:	075a      	lsls	r2, r3, #29
 8000fea:	430a      	orrs	r2, r1
 8000fec:	08dc      	lsrs	r4, r3, #3
 8000fee:	e699      	b.n	8000d24 <__aeabi_dadd+0x37c>
 8000ff0:	4663      	mov	r3, ip
 8000ff2:	08d8      	lsrs	r0, r3, #3
 8000ff4:	4653      	mov	r3, sl
 8000ff6:	075a      	lsls	r2, r3, #29
 8000ff8:	000e      	movs	r6, r1
 8000ffa:	4302      	orrs	r2, r0
 8000ffc:	08dc      	lsrs	r4, r3, #3
 8000ffe:	e6a1      	b.n	8000d44 <__aeabi_dadd+0x39c>
 8001000:	0011      	movs	r1, r2
 8001002:	0027      	movs	r7, r4
 8001004:	3920      	subs	r1, #32
 8001006:	40cf      	lsrs	r7, r1
 8001008:	2a20      	cmp	r2, #32
 800100a:	d003      	beq.n	8001014 <__aeabi_dadd+0x66c>
 800100c:	2140      	movs	r1, #64	@ 0x40
 800100e:	1a8a      	subs	r2, r1, r2
 8001010:	4094      	lsls	r4, r2
 8001012:	4320      	orrs	r0, r4
 8001014:	1e42      	subs	r2, r0, #1
 8001016:	4190      	sbcs	r0, r2
 8001018:	0005      	movs	r5, r0
 800101a:	433d      	orrs	r5, r7
 800101c:	e651      	b.n	8000cc2 <__aeabi_dadd+0x31a>
 800101e:	000c      	movs	r4, r1
 8001020:	2500      	movs	r5, #0
 8001022:	2200      	movs	r2, #0
 8001024:	e558      	b.n	8000ad8 <__aeabi_dadd+0x130>
 8001026:	4460      	add	r0, ip
 8001028:	4560      	cmp	r0, ip
 800102a:	4192      	sbcs	r2, r2
 800102c:	4454      	add	r4, sl
 800102e:	4252      	negs	r2, r2
 8001030:	0005      	movs	r5, r0
 8001032:	18a4      	adds	r4, r4, r2
 8001034:	e73a      	b.n	8000eac <__aeabi_dadd+0x504>
 8001036:	4653      	mov	r3, sl
 8001038:	075a      	lsls	r2, r3, #29
 800103a:	4663      	mov	r3, ip
 800103c:	08d9      	lsrs	r1, r3, #3
 800103e:	4653      	mov	r3, sl
 8001040:	430a      	orrs	r2, r1
 8001042:	08dc      	lsrs	r4, r3, #3
 8001044:	e67e      	b.n	8000d44 <__aeabi_dadd+0x39c>
 8001046:	001a      	movs	r2, r3
 8001048:	001c      	movs	r4, r3
 800104a:	432a      	orrs	r2, r5
 800104c:	d000      	beq.n	8001050 <__aeabi_dadd+0x6a8>
 800104e:	e6ab      	b.n	8000da8 <__aeabi_dadd+0x400>
 8001050:	e6c1      	b.n	8000dd6 <__aeabi_dadd+0x42e>
 8001052:	2120      	movs	r1, #32
 8001054:	2500      	movs	r5, #0
 8001056:	1a09      	subs	r1, r1, r0
 8001058:	e519      	b.n	8000a8e <__aeabi_dadd+0xe6>
 800105a:	2200      	movs	r2, #0
 800105c:	2500      	movs	r5, #0
 800105e:	4c01      	ldr	r4, [pc, #4]	@ (8001064 <__aeabi_dadd+0x6bc>)
 8001060:	e53a      	b.n	8000ad8 <__aeabi_dadd+0x130>
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	000007ff 	.word	0x000007ff
 8001068:	ff7fffff 	.word	0xff7fffff
 800106c:	000007fe 	.word	0x000007fe

08001070 <__aeabi_ddiv>:
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	46de      	mov	lr, fp
 8001074:	4645      	mov	r5, r8
 8001076:	4657      	mov	r7, sl
 8001078:	464e      	mov	r6, r9
 800107a:	b5e0      	push	{r5, r6, r7, lr}
 800107c:	b087      	sub	sp, #28
 800107e:	9200      	str	r2, [sp, #0]
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	030b      	lsls	r3, r1, #12
 8001084:	0b1b      	lsrs	r3, r3, #12
 8001086:	469b      	mov	fp, r3
 8001088:	0fca      	lsrs	r2, r1, #31
 800108a:	004b      	lsls	r3, r1, #1
 800108c:	0004      	movs	r4, r0
 800108e:	4680      	mov	r8, r0
 8001090:	0d5b      	lsrs	r3, r3, #21
 8001092:	9202      	str	r2, [sp, #8]
 8001094:	d100      	bne.n	8001098 <__aeabi_ddiv+0x28>
 8001096:	e16a      	b.n	800136e <__aeabi_ddiv+0x2fe>
 8001098:	4ad4      	ldr	r2, [pc, #848]	@ (80013ec <__aeabi_ddiv+0x37c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d100      	bne.n	80010a0 <__aeabi_ddiv+0x30>
 800109e:	e18c      	b.n	80013ba <__aeabi_ddiv+0x34a>
 80010a0:	4659      	mov	r1, fp
 80010a2:	0f42      	lsrs	r2, r0, #29
 80010a4:	00c9      	lsls	r1, r1, #3
 80010a6:	430a      	orrs	r2, r1
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0409      	lsls	r1, r1, #16
 80010ac:	4311      	orrs	r1, r2
 80010ae:	00c2      	lsls	r2, r0, #3
 80010b0:	4690      	mov	r8, r2
 80010b2:	4acf      	ldr	r2, [pc, #828]	@ (80013f0 <__aeabi_ddiv+0x380>)
 80010b4:	4689      	mov	r9, r1
 80010b6:	4692      	mov	sl, r2
 80010b8:	449a      	add	sl, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	2400      	movs	r4, #0
 80010be:	9303      	str	r3, [sp, #12]
 80010c0:	9e00      	ldr	r6, [sp, #0]
 80010c2:	9f01      	ldr	r7, [sp, #4]
 80010c4:	033b      	lsls	r3, r7, #12
 80010c6:	0b1b      	lsrs	r3, r3, #12
 80010c8:	469b      	mov	fp, r3
 80010ca:	007b      	lsls	r3, r7, #1
 80010cc:	0030      	movs	r0, r6
 80010ce:	0d5b      	lsrs	r3, r3, #21
 80010d0:	0ffd      	lsrs	r5, r7, #31
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d100      	bne.n	80010d8 <__aeabi_ddiv+0x68>
 80010d6:	e128      	b.n	800132a <__aeabi_ddiv+0x2ba>
 80010d8:	4ac4      	ldr	r2, [pc, #784]	@ (80013ec <__aeabi_ddiv+0x37c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d100      	bne.n	80010e0 <__aeabi_ddiv+0x70>
 80010de:	e177      	b.n	80013d0 <__aeabi_ddiv+0x360>
 80010e0:	4659      	mov	r1, fp
 80010e2:	0f72      	lsrs	r2, r6, #29
 80010e4:	00c9      	lsls	r1, r1, #3
 80010e6:	430a      	orrs	r2, r1
 80010e8:	2180      	movs	r1, #128	@ 0x80
 80010ea:	0409      	lsls	r1, r1, #16
 80010ec:	4311      	orrs	r1, r2
 80010ee:	468b      	mov	fp, r1
 80010f0:	49bf      	ldr	r1, [pc, #764]	@ (80013f0 <__aeabi_ddiv+0x380>)
 80010f2:	00f2      	lsls	r2, r6, #3
 80010f4:	468c      	mov	ip, r1
 80010f6:	4651      	mov	r1, sl
 80010f8:	4463      	add	r3, ip
 80010fa:	1acb      	subs	r3, r1, r3
 80010fc:	469a      	mov	sl, r3
 80010fe:	2300      	movs	r3, #0
 8001100:	9e02      	ldr	r6, [sp, #8]
 8001102:	406e      	eors	r6, r5
 8001104:	2c0f      	cmp	r4, #15
 8001106:	d827      	bhi.n	8001158 <__aeabi_ddiv+0xe8>
 8001108:	49ba      	ldr	r1, [pc, #744]	@ (80013f4 <__aeabi_ddiv+0x384>)
 800110a:	00a4      	lsls	r4, r4, #2
 800110c:	5909      	ldr	r1, [r1, r4]
 800110e:	468f      	mov	pc, r1
 8001110:	46cb      	mov	fp, r9
 8001112:	4642      	mov	r2, r8
 8001114:	9e02      	ldr	r6, [sp, #8]
 8001116:	9b03      	ldr	r3, [sp, #12]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d016      	beq.n	800114a <__aeabi_ddiv+0xda>
 800111c:	2b03      	cmp	r3, #3
 800111e:	d100      	bne.n	8001122 <__aeabi_ddiv+0xb2>
 8001120:	e2a6      	b.n	8001670 <__aeabi_ddiv+0x600>
 8001122:	2b01      	cmp	r3, #1
 8001124:	d000      	beq.n	8001128 <__aeabi_ddiv+0xb8>
 8001126:	e0df      	b.n	80012e8 <__aeabi_ddiv+0x278>
 8001128:	2200      	movs	r2, #0
 800112a:	2300      	movs	r3, #0
 800112c:	2400      	movs	r4, #0
 800112e:	4690      	mov	r8, r2
 8001130:	051b      	lsls	r3, r3, #20
 8001132:	4323      	orrs	r3, r4
 8001134:	07f6      	lsls	r6, r6, #31
 8001136:	4333      	orrs	r3, r6
 8001138:	4640      	mov	r0, r8
 800113a:	0019      	movs	r1, r3
 800113c:	b007      	add	sp, #28
 800113e:	bcf0      	pop	{r4, r5, r6, r7}
 8001140:	46bb      	mov	fp, r7
 8001142:	46b2      	mov	sl, r6
 8001144:	46a9      	mov	r9, r5
 8001146:	46a0      	mov	r8, r4
 8001148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114a:	2200      	movs	r2, #0
 800114c:	2400      	movs	r4, #0
 800114e:	4690      	mov	r8, r2
 8001150:	4ba6      	ldr	r3, [pc, #664]	@ (80013ec <__aeabi_ddiv+0x37c>)
 8001152:	e7ed      	b.n	8001130 <__aeabi_ddiv+0xc0>
 8001154:	002e      	movs	r6, r5
 8001156:	e7df      	b.n	8001118 <__aeabi_ddiv+0xa8>
 8001158:	45cb      	cmp	fp, r9
 800115a:	d200      	bcs.n	800115e <__aeabi_ddiv+0xee>
 800115c:	e1d4      	b.n	8001508 <__aeabi_ddiv+0x498>
 800115e:	d100      	bne.n	8001162 <__aeabi_ddiv+0xf2>
 8001160:	e1cf      	b.n	8001502 <__aeabi_ddiv+0x492>
 8001162:	2301      	movs	r3, #1
 8001164:	425b      	negs	r3, r3
 8001166:	469c      	mov	ip, r3
 8001168:	4644      	mov	r4, r8
 800116a:	4648      	mov	r0, r9
 800116c:	2700      	movs	r7, #0
 800116e:	44e2      	add	sl, ip
 8001170:	465b      	mov	r3, fp
 8001172:	0e15      	lsrs	r5, r2, #24
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	431d      	orrs	r5, r3
 8001178:	0c19      	lsrs	r1, r3, #16
 800117a:	042b      	lsls	r3, r5, #16
 800117c:	0212      	lsls	r2, r2, #8
 800117e:	9500      	str	r5, [sp, #0]
 8001180:	0c1d      	lsrs	r5, r3, #16
 8001182:	4691      	mov	r9, r2
 8001184:	9102      	str	r1, [sp, #8]
 8001186:	9503      	str	r5, [sp, #12]
 8001188:	f7ff f84a 	bl	8000220 <__aeabi_uidivmod>
 800118c:	0002      	movs	r2, r0
 800118e:	436a      	muls	r2, r5
 8001190:	040b      	lsls	r3, r1, #16
 8001192:	0c21      	lsrs	r1, r4, #16
 8001194:	4680      	mov	r8, r0
 8001196:	4319      	orrs	r1, r3
 8001198:	428a      	cmp	r2, r1
 800119a:	d909      	bls.n	80011b0 <__aeabi_ddiv+0x140>
 800119c:	9d00      	ldr	r5, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	46ac      	mov	ip, r5
 80011a2:	425b      	negs	r3, r3
 80011a4:	4461      	add	r1, ip
 80011a6:	469c      	mov	ip, r3
 80011a8:	44e0      	add	r8, ip
 80011aa:	428d      	cmp	r5, r1
 80011ac:	d800      	bhi.n	80011b0 <__aeabi_ddiv+0x140>
 80011ae:	e1fb      	b.n	80015a8 <__aeabi_ddiv+0x538>
 80011b0:	1a88      	subs	r0, r1, r2
 80011b2:	9902      	ldr	r1, [sp, #8]
 80011b4:	f7ff f834 	bl	8000220 <__aeabi_uidivmod>
 80011b8:	9a03      	ldr	r2, [sp, #12]
 80011ba:	0424      	lsls	r4, r4, #16
 80011bc:	4342      	muls	r2, r0
 80011be:	0409      	lsls	r1, r1, #16
 80011c0:	0c24      	lsrs	r4, r4, #16
 80011c2:	0003      	movs	r3, r0
 80011c4:	430c      	orrs	r4, r1
 80011c6:	42a2      	cmp	r2, r4
 80011c8:	d906      	bls.n	80011d8 <__aeabi_ddiv+0x168>
 80011ca:	9900      	ldr	r1, [sp, #0]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	468c      	mov	ip, r1
 80011d0:	4464      	add	r4, ip
 80011d2:	42a1      	cmp	r1, r4
 80011d4:	d800      	bhi.n	80011d8 <__aeabi_ddiv+0x168>
 80011d6:	e1e1      	b.n	800159c <__aeabi_ddiv+0x52c>
 80011d8:	1aa0      	subs	r0, r4, r2
 80011da:	4642      	mov	r2, r8
 80011dc:	0412      	lsls	r2, r2, #16
 80011de:	431a      	orrs	r2, r3
 80011e0:	4693      	mov	fp, r2
 80011e2:	464b      	mov	r3, r9
 80011e4:	4659      	mov	r1, fp
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	001d      	movs	r5, r3
 80011ea:	9304      	str	r3, [sp, #16]
 80011ec:	040b      	lsls	r3, r1, #16
 80011ee:	4649      	mov	r1, r9
 80011f0:	0409      	lsls	r1, r1, #16
 80011f2:	0c09      	lsrs	r1, r1, #16
 80011f4:	000c      	movs	r4, r1
 80011f6:	0c1b      	lsrs	r3, r3, #16
 80011f8:	435c      	muls	r4, r3
 80011fa:	0c12      	lsrs	r2, r2, #16
 80011fc:	436b      	muls	r3, r5
 80011fe:	4688      	mov	r8, r1
 8001200:	4351      	muls	r1, r2
 8001202:	436a      	muls	r2, r5
 8001204:	0c25      	lsrs	r5, r4, #16
 8001206:	46ac      	mov	ip, r5
 8001208:	185b      	adds	r3, r3, r1
 800120a:	4463      	add	r3, ip
 800120c:	4299      	cmp	r1, r3
 800120e:	d903      	bls.n	8001218 <__aeabi_ddiv+0x1a8>
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	0249      	lsls	r1, r1, #9
 8001214:	468c      	mov	ip, r1
 8001216:	4462      	add	r2, ip
 8001218:	0c19      	lsrs	r1, r3, #16
 800121a:	0424      	lsls	r4, r4, #16
 800121c:	041b      	lsls	r3, r3, #16
 800121e:	0c24      	lsrs	r4, r4, #16
 8001220:	188a      	adds	r2, r1, r2
 8001222:	191c      	adds	r4, r3, r4
 8001224:	4290      	cmp	r0, r2
 8001226:	d302      	bcc.n	800122e <__aeabi_ddiv+0x1be>
 8001228:	d116      	bne.n	8001258 <__aeabi_ddiv+0x1e8>
 800122a:	42a7      	cmp	r7, r4
 800122c:	d214      	bcs.n	8001258 <__aeabi_ddiv+0x1e8>
 800122e:	465b      	mov	r3, fp
 8001230:	9d00      	ldr	r5, [sp, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	444f      	add	r7, r9
 8001236:	9305      	str	r3, [sp, #20]
 8001238:	454f      	cmp	r7, r9
 800123a:	419b      	sbcs	r3, r3
 800123c:	46ac      	mov	ip, r5
 800123e:	425b      	negs	r3, r3
 8001240:	4463      	add	r3, ip
 8001242:	18c0      	adds	r0, r0, r3
 8001244:	4285      	cmp	r5, r0
 8001246:	d300      	bcc.n	800124a <__aeabi_ddiv+0x1da>
 8001248:	e1a1      	b.n	800158e <__aeabi_ddiv+0x51e>
 800124a:	4282      	cmp	r2, r0
 800124c:	d900      	bls.n	8001250 <__aeabi_ddiv+0x1e0>
 800124e:	e1f6      	b.n	800163e <__aeabi_ddiv+0x5ce>
 8001250:	d100      	bne.n	8001254 <__aeabi_ddiv+0x1e4>
 8001252:	e1f1      	b.n	8001638 <__aeabi_ddiv+0x5c8>
 8001254:	9b05      	ldr	r3, [sp, #20]
 8001256:	469b      	mov	fp, r3
 8001258:	1b3c      	subs	r4, r7, r4
 800125a:	42a7      	cmp	r7, r4
 800125c:	41bf      	sbcs	r7, r7
 800125e:	9d00      	ldr	r5, [sp, #0]
 8001260:	1a80      	subs	r0, r0, r2
 8001262:	427f      	negs	r7, r7
 8001264:	1bc0      	subs	r0, r0, r7
 8001266:	4285      	cmp	r5, r0
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x1fc>
 800126a:	e1d0      	b.n	800160e <__aeabi_ddiv+0x59e>
 800126c:	9902      	ldr	r1, [sp, #8]
 800126e:	f7fe ffd7 	bl	8000220 <__aeabi_uidivmod>
 8001272:	9a03      	ldr	r2, [sp, #12]
 8001274:	040b      	lsls	r3, r1, #16
 8001276:	4342      	muls	r2, r0
 8001278:	0c21      	lsrs	r1, r4, #16
 800127a:	0007      	movs	r7, r0
 800127c:	4319      	orrs	r1, r3
 800127e:	428a      	cmp	r2, r1
 8001280:	d900      	bls.n	8001284 <__aeabi_ddiv+0x214>
 8001282:	e178      	b.n	8001576 <__aeabi_ddiv+0x506>
 8001284:	1a88      	subs	r0, r1, r2
 8001286:	9902      	ldr	r1, [sp, #8]
 8001288:	f7fe ffca 	bl	8000220 <__aeabi_uidivmod>
 800128c:	9a03      	ldr	r2, [sp, #12]
 800128e:	0424      	lsls	r4, r4, #16
 8001290:	4342      	muls	r2, r0
 8001292:	0409      	lsls	r1, r1, #16
 8001294:	0c24      	lsrs	r4, r4, #16
 8001296:	0003      	movs	r3, r0
 8001298:	430c      	orrs	r4, r1
 800129a:	42a2      	cmp	r2, r4
 800129c:	d900      	bls.n	80012a0 <__aeabi_ddiv+0x230>
 800129e:	e15d      	b.n	800155c <__aeabi_ddiv+0x4ec>
 80012a0:	4641      	mov	r1, r8
 80012a2:	1aa4      	subs	r4, r4, r2
 80012a4:	043a      	lsls	r2, r7, #16
 80012a6:	431a      	orrs	r2, r3
 80012a8:	9d04      	ldr	r5, [sp, #16]
 80012aa:	0413      	lsls	r3, r2, #16
 80012ac:	0c1b      	lsrs	r3, r3, #16
 80012ae:	4359      	muls	r1, r3
 80012b0:	4647      	mov	r7, r8
 80012b2:	436b      	muls	r3, r5
 80012b4:	469c      	mov	ip, r3
 80012b6:	0c10      	lsrs	r0, r2, #16
 80012b8:	4347      	muls	r7, r0
 80012ba:	0c0b      	lsrs	r3, r1, #16
 80012bc:	44bc      	add	ip, r7
 80012be:	4463      	add	r3, ip
 80012c0:	4368      	muls	r0, r5
 80012c2:	429f      	cmp	r7, r3
 80012c4:	d903      	bls.n	80012ce <__aeabi_ddiv+0x25e>
 80012c6:	2580      	movs	r5, #128	@ 0x80
 80012c8:	026d      	lsls	r5, r5, #9
 80012ca:	46ac      	mov	ip, r5
 80012cc:	4460      	add	r0, ip
 80012ce:	0c1f      	lsrs	r7, r3, #16
 80012d0:	0409      	lsls	r1, r1, #16
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	0c09      	lsrs	r1, r1, #16
 80012d6:	183f      	adds	r7, r7, r0
 80012d8:	185b      	adds	r3, r3, r1
 80012da:	42bc      	cmp	r4, r7
 80012dc:	d200      	bcs.n	80012e0 <__aeabi_ddiv+0x270>
 80012de:	e102      	b.n	80014e6 <__aeabi_ddiv+0x476>
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0x274>
 80012e2:	e0fd      	b.n	80014e0 <__aeabi_ddiv+0x470>
 80012e4:	2301      	movs	r3, #1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	4b43      	ldr	r3, [pc, #268]	@ (80013f8 <__aeabi_ddiv+0x388>)
 80012ea:	4453      	add	r3, sl
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dc00      	bgt.n	80012f2 <__aeabi_ddiv+0x282>
 80012f0:	e0ae      	b.n	8001450 <__aeabi_ddiv+0x3e0>
 80012f2:	0751      	lsls	r1, r2, #29
 80012f4:	d000      	beq.n	80012f8 <__aeabi_ddiv+0x288>
 80012f6:	e198      	b.n	800162a <__aeabi_ddiv+0x5ba>
 80012f8:	4659      	mov	r1, fp
 80012fa:	01c9      	lsls	r1, r1, #7
 80012fc:	d506      	bpl.n	800130c <__aeabi_ddiv+0x29c>
 80012fe:	4659      	mov	r1, fp
 8001300:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <__aeabi_ddiv+0x38c>)
 8001302:	4019      	ands	r1, r3
 8001304:	2380      	movs	r3, #128	@ 0x80
 8001306:	468b      	mov	fp, r1
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4453      	add	r3, sl
 800130c:	493c      	ldr	r1, [pc, #240]	@ (8001400 <__aeabi_ddiv+0x390>)
 800130e:	428b      	cmp	r3, r1
 8001310:	dd00      	ble.n	8001314 <__aeabi_ddiv+0x2a4>
 8001312:	e71a      	b.n	800114a <__aeabi_ddiv+0xda>
 8001314:	4659      	mov	r1, fp
 8001316:	08d2      	lsrs	r2, r2, #3
 8001318:	0749      	lsls	r1, r1, #29
 800131a:	4311      	orrs	r1, r2
 800131c:	465a      	mov	r2, fp
 800131e:	055b      	lsls	r3, r3, #21
 8001320:	0254      	lsls	r4, r2, #9
 8001322:	4688      	mov	r8, r1
 8001324:	0b24      	lsrs	r4, r4, #12
 8001326:	0d5b      	lsrs	r3, r3, #21
 8001328:	e702      	b.n	8001130 <__aeabi_ddiv+0xc0>
 800132a:	465a      	mov	r2, fp
 800132c:	9b00      	ldr	r3, [sp, #0]
 800132e:	431a      	orrs	r2, r3
 8001330:	d100      	bne.n	8001334 <__aeabi_ddiv+0x2c4>
 8001332:	e07e      	b.n	8001432 <__aeabi_ddiv+0x3c2>
 8001334:	465b      	mov	r3, fp
 8001336:	2b00      	cmp	r3, #0
 8001338:	d100      	bne.n	800133c <__aeabi_ddiv+0x2cc>
 800133a:	e100      	b.n	800153e <__aeabi_ddiv+0x4ce>
 800133c:	4658      	mov	r0, fp
 800133e:	f001 fa13 	bl	8002768 <__clzsi2>
 8001342:	0002      	movs	r2, r0
 8001344:	0003      	movs	r3, r0
 8001346:	3a0b      	subs	r2, #11
 8001348:	271d      	movs	r7, #29
 800134a:	9e00      	ldr	r6, [sp, #0]
 800134c:	1aba      	subs	r2, r7, r2
 800134e:	0019      	movs	r1, r3
 8001350:	4658      	mov	r0, fp
 8001352:	40d6      	lsrs	r6, r2
 8001354:	3908      	subs	r1, #8
 8001356:	4088      	lsls	r0, r1
 8001358:	0032      	movs	r2, r6
 800135a:	4302      	orrs	r2, r0
 800135c:	4693      	mov	fp, r2
 800135e:	9a00      	ldr	r2, [sp, #0]
 8001360:	408a      	lsls	r2, r1
 8001362:	4928      	ldr	r1, [pc, #160]	@ (8001404 <__aeabi_ddiv+0x394>)
 8001364:	4453      	add	r3, sl
 8001366:	468a      	mov	sl, r1
 8001368:	449a      	add	sl, r3
 800136a:	2300      	movs	r3, #0
 800136c:	e6c8      	b.n	8001100 <__aeabi_ddiv+0x90>
 800136e:	465b      	mov	r3, fp
 8001370:	4303      	orrs	r3, r0
 8001372:	4699      	mov	r9, r3
 8001374:	d056      	beq.n	8001424 <__aeabi_ddiv+0x3b4>
 8001376:	465b      	mov	r3, fp
 8001378:	2b00      	cmp	r3, #0
 800137a:	d100      	bne.n	800137e <__aeabi_ddiv+0x30e>
 800137c:	e0cd      	b.n	800151a <__aeabi_ddiv+0x4aa>
 800137e:	4658      	mov	r0, fp
 8001380:	f001 f9f2 	bl	8002768 <__clzsi2>
 8001384:	230b      	movs	r3, #11
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	0002      	movs	r2, r0
 800138c:	4484      	add	ip, r0
 800138e:	4666      	mov	r6, ip
 8001390:	231d      	movs	r3, #29
 8001392:	1b9b      	subs	r3, r3, r6
 8001394:	0026      	movs	r6, r4
 8001396:	0011      	movs	r1, r2
 8001398:	4658      	mov	r0, fp
 800139a:	40de      	lsrs	r6, r3
 800139c:	3908      	subs	r1, #8
 800139e:	4088      	lsls	r0, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	4303      	orrs	r3, r0
 80013a4:	4699      	mov	r9, r3
 80013a6:	0023      	movs	r3, r4
 80013a8:	408b      	lsls	r3, r1
 80013aa:	4698      	mov	r8, r3
 80013ac:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <__aeabi_ddiv+0x398>)
 80013ae:	2400      	movs	r4, #0
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	469a      	mov	sl, r3
 80013b4:	2300      	movs	r3, #0
 80013b6:	9303      	str	r3, [sp, #12]
 80013b8:	e682      	b.n	80010c0 <__aeabi_ddiv+0x50>
 80013ba:	465a      	mov	r2, fp
 80013bc:	4302      	orrs	r2, r0
 80013be:	4691      	mov	r9, r2
 80013c0:	d12a      	bne.n	8001418 <__aeabi_ddiv+0x3a8>
 80013c2:	2200      	movs	r2, #0
 80013c4:	469a      	mov	sl, r3
 80013c6:	2302      	movs	r3, #2
 80013c8:	4690      	mov	r8, r2
 80013ca:	2408      	movs	r4, #8
 80013cc:	9303      	str	r3, [sp, #12]
 80013ce:	e677      	b.n	80010c0 <__aeabi_ddiv+0x50>
 80013d0:	465a      	mov	r2, fp
 80013d2:	9b00      	ldr	r3, [sp, #0]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <__aeabi_ddiv+0x39c>)
 80013d8:	469c      	mov	ip, r3
 80013da:	44e2      	add	sl, ip
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d117      	bne.n	8001410 <__aeabi_ddiv+0x3a0>
 80013e0:	2302      	movs	r3, #2
 80013e2:	431c      	orrs	r4, r3
 80013e4:	2300      	movs	r3, #0
 80013e6:	469b      	mov	fp, r3
 80013e8:	3302      	adds	r3, #2
 80013ea:	e689      	b.n	8001100 <__aeabi_ddiv+0x90>
 80013ec:	000007ff 	.word	0x000007ff
 80013f0:	fffffc01 	.word	0xfffffc01
 80013f4:	08007b08 	.word	0x08007b08
 80013f8:	000003ff 	.word	0x000003ff
 80013fc:	feffffff 	.word	0xfeffffff
 8001400:	000007fe 	.word	0x000007fe
 8001404:	000003f3 	.word	0x000003f3
 8001408:	fffffc0d 	.word	0xfffffc0d
 800140c:	fffff801 	.word	0xfffff801
 8001410:	2303      	movs	r3, #3
 8001412:	0032      	movs	r2, r6
 8001414:	431c      	orrs	r4, r3
 8001416:	e673      	b.n	8001100 <__aeabi_ddiv+0x90>
 8001418:	469a      	mov	sl, r3
 800141a:	2303      	movs	r3, #3
 800141c:	46d9      	mov	r9, fp
 800141e:	240c      	movs	r4, #12
 8001420:	9303      	str	r3, [sp, #12]
 8001422:	e64d      	b.n	80010c0 <__aeabi_ddiv+0x50>
 8001424:	2300      	movs	r3, #0
 8001426:	4698      	mov	r8, r3
 8001428:	469a      	mov	sl, r3
 800142a:	3301      	adds	r3, #1
 800142c:	2404      	movs	r4, #4
 800142e:	9303      	str	r3, [sp, #12]
 8001430:	e646      	b.n	80010c0 <__aeabi_ddiv+0x50>
 8001432:	2301      	movs	r3, #1
 8001434:	431c      	orrs	r4, r3
 8001436:	2300      	movs	r3, #0
 8001438:	469b      	mov	fp, r3
 800143a:	3301      	adds	r3, #1
 800143c:	e660      	b.n	8001100 <__aeabi_ddiv+0x90>
 800143e:	2300      	movs	r3, #0
 8001440:	2480      	movs	r4, #128	@ 0x80
 8001442:	4698      	mov	r8, r3
 8001444:	2600      	movs	r6, #0
 8001446:	4b92      	ldr	r3, [pc, #584]	@ (8001690 <__aeabi_ddiv+0x620>)
 8001448:	0324      	lsls	r4, r4, #12
 800144a:	e671      	b.n	8001130 <__aeabi_ddiv+0xc0>
 800144c:	2201      	movs	r2, #1
 800144e:	4252      	negs	r2, r2
 8001450:	2101      	movs	r1, #1
 8001452:	1ac9      	subs	r1, r1, r3
 8001454:	2938      	cmp	r1, #56	@ 0x38
 8001456:	dd00      	ble.n	800145a <__aeabi_ddiv+0x3ea>
 8001458:	e666      	b.n	8001128 <__aeabi_ddiv+0xb8>
 800145a:	291f      	cmp	r1, #31
 800145c:	dc00      	bgt.n	8001460 <__aeabi_ddiv+0x3f0>
 800145e:	e0ab      	b.n	80015b8 <__aeabi_ddiv+0x548>
 8001460:	201f      	movs	r0, #31
 8001462:	4240      	negs	r0, r0
 8001464:	1ac3      	subs	r3, r0, r3
 8001466:	4658      	mov	r0, fp
 8001468:	40d8      	lsrs	r0, r3
 800146a:	0003      	movs	r3, r0
 800146c:	2920      	cmp	r1, #32
 800146e:	d004      	beq.n	800147a <__aeabi_ddiv+0x40a>
 8001470:	4658      	mov	r0, fp
 8001472:	4988      	ldr	r1, [pc, #544]	@ (8001694 <__aeabi_ddiv+0x624>)
 8001474:	4451      	add	r1, sl
 8001476:	4088      	lsls	r0, r1
 8001478:	4302      	orrs	r2, r0
 800147a:	1e51      	subs	r1, r2, #1
 800147c:	418a      	sbcs	r2, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	2307      	movs	r3, #7
 8001482:	0019      	movs	r1, r3
 8001484:	2400      	movs	r4, #0
 8001486:	4011      	ands	r1, r2
 8001488:	4213      	tst	r3, r2
 800148a:	d00c      	beq.n	80014a6 <__aeabi_ddiv+0x436>
 800148c:	230f      	movs	r3, #15
 800148e:	4013      	ands	r3, r2
 8001490:	2b04      	cmp	r3, #4
 8001492:	d100      	bne.n	8001496 <__aeabi_ddiv+0x426>
 8001494:	e0f9      	b.n	800168a <__aeabi_ddiv+0x61a>
 8001496:	1d11      	adds	r1, r2, #4
 8001498:	4291      	cmp	r1, r2
 800149a:	419b      	sbcs	r3, r3
 800149c:	000a      	movs	r2, r1
 800149e:	425b      	negs	r3, r3
 80014a0:	0759      	lsls	r1, r3, #29
 80014a2:	025b      	lsls	r3, r3, #9
 80014a4:	0b1c      	lsrs	r4, r3, #12
 80014a6:	08d2      	lsrs	r2, r2, #3
 80014a8:	430a      	orrs	r2, r1
 80014aa:	4690      	mov	r8, r2
 80014ac:	2300      	movs	r3, #0
 80014ae:	e63f      	b.n	8001130 <__aeabi_ddiv+0xc0>
 80014b0:	2480      	movs	r4, #128	@ 0x80
 80014b2:	464b      	mov	r3, r9
 80014b4:	0324      	lsls	r4, r4, #12
 80014b6:	4223      	tst	r3, r4
 80014b8:	d009      	beq.n	80014ce <__aeabi_ddiv+0x45e>
 80014ba:	465b      	mov	r3, fp
 80014bc:	4223      	tst	r3, r4
 80014be:	d106      	bne.n	80014ce <__aeabi_ddiv+0x45e>
 80014c0:	431c      	orrs	r4, r3
 80014c2:	0324      	lsls	r4, r4, #12
 80014c4:	002e      	movs	r6, r5
 80014c6:	4690      	mov	r8, r2
 80014c8:	4b71      	ldr	r3, [pc, #452]	@ (8001690 <__aeabi_ddiv+0x620>)
 80014ca:	0b24      	lsrs	r4, r4, #12
 80014cc:	e630      	b.n	8001130 <__aeabi_ddiv+0xc0>
 80014ce:	2480      	movs	r4, #128	@ 0x80
 80014d0:	464b      	mov	r3, r9
 80014d2:	0324      	lsls	r4, r4, #12
 80014d4:	431c      	orrs	r4, r3
 80014d6:	0324      	lsls	r4, r4, #12
 80014d8:	9e02      	ldr	r6, [sp, #8]
 80014da:	4b6d      	ldr	r3, [pc, #436]	@ (8001690 <__aeabi_ddiv+0x620>)
 80014dc:	0b24      	lsrs	r4, r4, #12
 80014de:	e627      	b.n	8001130 <__aeabi_ddiv+0xc0>
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d100      	bne.n	80014e6 <__aeabi_ddiv+0x476>
 80014e4:	e700      	b.n	80012e8 <__aeabi_ddiv+0x278>
 80014e6:	9800      	ldr	r0, [sp, #0]
 80014e8:	1e51      	subs	r1, r2, #1
 80014ea:	4684      	mov	ip, r0
 80014ec:	4464      	add	r4, ip
 80014ee:	4284      	cmp	r4, r0
 80014f0:	d200      	bcs.n	80014f4 <__aeabi_ddiv+0x484>
 80014f2:	e084      	b.n	80015fe <__aeabi_ddiv+0x58e>
 80014f4:	42bc      	cmp	r4, r7
 80014f6:	d200      	bcs.n	80014fa <__aeabi_ddiv+0x48a>
 80014f8:	e0ae      	b.n	8001658 <__aeabi_ddiv+0x5e8>
 80014fa:	d100      	bne.n	80014fe <__aeabi_ddiv+0x48e>
 80014fc:	e0c1      	b.n	8001682 <__aeabi_ddiv+0x612>
 80014fe:	000a      	movs	r2, r1
 8001500:	e6f0      	b.n	80012e4 <__aeabi_ddiv+0x274>
 8001502:	4542      	cmp	r2, r8
 8001504:	d900      	bls.n	8001508 <__aeabi_ddiv+0x498>
 8001506:	e62c      	b.n	8001162 <__aeabi_ddiv+0xf2>
 8001508:	464b      	mov	r3, r9
 800150a:	07dc      	lsls	r4, r3, #31
 800150c:	0858      	lsrs	r0, r3, #1
 800150e:	4643      	mov	r3, r8
 8001510:	085b      	lsrs	r3, r3, #1
 8001512:	431c      	orrs	r4, r3
 8001514:	4643      	mov	r3, r8
 8001516:	07df      	lsls	r7, r3, #31
 8001518:	e62a      	b.n	8001170 <__aeabi_ddiv+0x100>
 800151a:	f001 f925 	bl	8002768 <__clzsi2>
 800151e:	2315      	movs	r3, #21
 8001520:	469c      	mov	ip, r3
 8001522:	4484      	add	ip, r0
 8001524:	0002      	movs	r2, r0
 8001526:	4663      	mov	r3, ip
 8001528:	3220      	adds	r2, #32
 800152a:	2b1c      	cmp	r3, #28
 800152c:	dc00      	bgt.n	8001530 <__aeabi_ddiv+0x4c0>
 800152e:	e72e      	b.n	800138e <__aeabi_ddiv+0x31e>
 8001530:	0023      	movs	r3, r4
 8001532:	3808      	subs	r0, #8
 8001534:	4083      	lsls	r3, r0
 8001536:	4699      	mov	r9, r3
 8001538:	2300      	movs	r3, #0
 800153a:	4698      	mov	r8, r3
 800153c:	e736      	b.n	80013ac <__aeabi_ddiv+0x33c>
 800153e:	f001 f913 	bl	8002768 <__clzsi2>
 8001542:	0002      	movs	r2, r0
 8001544:	0003      	movs	r3, r0
 8001546:	3215      	adds	r2, #21
 8001548:	3320      	adds	r3, #32
 800154a:	2a1c      	cmp	r2, #28
 800154c:	dc00      	bgt.n	8001550 <__aeabi_ddiv+0x4e0>
 800154e:	e6fb      	b.n	8001348 <__aeabi_ddiv+0x2d8>
 8001550:	9900      	ldr	r1, [sp, #0]
 8001552:	3808      	subs	r0, #8
 8001554:	4081      	lsls	r1, r0
 8001556:	2200      	movs	r2, #0
 8001558:	468b      	mov	fp, r1
 800155a:	e702      	b.n	8001362 <__aeabi_ddiv+0x2f2>
 800155c:	9900      	ldr	r1, [sp, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	468c      	mov	ip, r1
 8001562:	4464      	add	r4, ip
 8001564:	42a1      	cmp	r1, r4
 8001566:	d900      	bls.n	800156a <__aeabi_ddiv+0x4fa>
 8001568:	e69a      	b.n	80012a0 <__aeabi_ddiv+0x230>
 800156a:	42a2      	cmp	r2, r4
 800156c:	d800      	bhi.n	8001570 <__aeabi_ddiv+0x500>
 800156e:	e697      	b.n	80012a0 <__aeabi_ddiv+0x230>
 8001570:	1e83      	subs	r3, r0, #2
 8001572:	4464      	add	r4, ip
 8001574:	e694      	b.n	80012a0 <__aeabi_ddiv+0x230>
 8001576:	46ac      	mov	ip, r5
 8001578:	4461      	add	r1, ip
 800157a:	3f01      	subs	r7, #1
 800157c:	428d      	cmp	r5, r1
 800157e:	d900      	bls.n	8001582 <__aeabi_ddiv+0x512>
 8001580:	e680      	b.n	8001284 <__aeabi_ddiv+0x214>
 8001582:	428a      	cmp	r2, r1
 8001584:	d800      	bhi.n	8001588 <__aeabi_ddiv+0x518>
 8001586:	e67d      	b.n	8001284 <__aeabi_ddiv+0x214>
 8001588:	1e87      	subs	r7, r0, #2
 800158a:	4461      	add	r1, ip
 800158c:	e67a      	b.n	8001284 <__aeabi_ddiv+0x214>
 800158e:	4285      	cmp	r5, r0
 8001590:	d000      	beq.n	8001594 <__aeabi_ddiv+0x524>
 8001592:	e65f      	b.n	8001254 <__aeabi_ddiv+0x1e4>
 8001594:	45b9      	cmp	r9, r7
 8001596:	d900      	bls.n	800159a <__aeabi_ddiv+0x52a>
 8001598:	e65c      	b.n	8001254 <__aeabi_ddiv+0x1e4>
 800159a:	e656      	b.n	800124a <__aeabi_ddiv+0x1da>
 800159c:	42a2      	cmp	r2, r4
 800159e:	d800      	bhi.n	80015a2 <__aeabi_ddiv+0x532>
 80015a0:	e61a      	b.n	80011d8 <__aeabi_ddiv+0x168>
 80015a2:	1e83      	subs	r3, r0, #2
 80015a4:	4464      	add	r4, ip
 80015a6:	e617      	b.n	80011d8 <__aeabi_ddiv+0x168>
 80015a8:	428a      	cmp	r2, r1
 80015aa:	d800      	bhi.n	80015ae <__aeabi_ddiv+0x53e>
 80015ac:	e600      	b.n	80011b0 <__aeabi_ddiv+0x140>
 80015ae:	46ac      	mov	ip, r5
 80015b0:	1e83      	subs	r3, r0, #2
 80015b2:	4698      	mov	r8, r3
 80015b4:	4461      	add	r1, ip
 80015b6:	e5fb      	b.n	80011b0 <__aeabi_ddiv+0x140>
 80015b8:	4837      	ldr	r0, [pc, #220]	@ (8001698 <__aeabi_ddiv+0x628>)
 80015ba:	0014      	movs	r4, r2
 80015bc:	4450      	add	r0, sl
 80015be:	4082      	lsls	r2, r0
 80015c0:	465b      	mov	r3, fp
 80015c2:	0017      	movs	r7, r2
 80015c4:	4083      	lsls	r3, r0
 80015c6:	40cc      	lsrs	r4, r1
 80015c8:	1e7a      	subs	r2, r7, #1
 80015ca:	4197      	sbcs	r7, r2
 80015cc:	4323      	orrs	r3, r4
 80015ce:	433b      	orrs	r3, r7
 80015d0:	001a      	movs	r2, r3
 80015d2:	465b      	mov	r3, fp
 80015d4:	40cb      	lsrs	r3, r1
 80015d6:	0751      	lsls	r1, r2, #29
 80015d8:	d009      	beq.n	80015ee <__aeabi_ddiv+0x57e>
 80015da:	210f      	movs	r1, #15
 80015dc:	4011      	ands	r1, r2
 80015de:	2904      	cmp	r1, #4
 80015e0:	d005      	beq.n	80015ee <__aeabi_ddiv+0x57e>
 80015e2:	1d11      	adds	r1, r2, #4
 80015e4:	4291      	cmp	r1, r2
 80015e6:	4192      	sbcs	r2, r2
 80015e8:	4252      	negs	r2, r2
 80015ea:	189b      	adds	r3, r3, r2
 80015ec:	000a      	movs	r2, r1
 80015ee:	0219      	lsls	r1, r3, #8
 80015f0:	d400      	bmi.n	80015f4 <__aeabi_ddiv+0x584>
 80015f2:	e755      	b.n	80014a0 <__aeabi_ddiv+0x430>
 80015f4:	2200      	movs	r2, #0
 80015f6:	2301      	movs	r3, #1
 80015f8:	2400      	movs	r4, #0
 80015fa:	4690      	mov	r8, r2
 80015fc:	e598      	b.n	8001130 <__aeabi_ddiv+0xc0>
 80015fe:	000a      	movs	r2, r1
 8001600:	42bc      	cmp	r4, r7
 8001602:	d000      	beq.n	8001606 <__aeabi_ddiv+0x596>
 8001604:	e66e      	b.n	80012e4 <__aeabi_ddiv+0x274>
 8001606:	454b      	cmp	r3, r9
 8001608:	d000      	beq.n	800160c <__aeabi_ddiv+0x59c>
 800160a:	e66b      	b.n	80012e4 <__aeabi_ddiv+0x274>
 800160c:	e66c      	b.n	80012e8 <__aeabi_ddiv+0x278>
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <__aeabi_ddiv+0x62c>)
 8001610:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <__aeabi_ddiv+0x630>)
 8001612:	4453      	add	r3, sl
 8001614:	4592      	cmp	sl, r2
 8001616:	da00      	bge.n	800161a <__aeabi_ddiv+0x5aa>
 8001618:	e718      	b.n	800144c <__aeabi_ddiv+0x3dc>
 800161a:	2101      	movs	r1, #1
 800161c:	4249      	negs	r1, r1
 800161e:	1d0a      	adds	r2, r1, #4
 8001620:	428a      	cmp	r2, r1
 8001622:	4189      	sbcs	r1, r1
 8001624:	4249      	negs	r1, r1
 8001626:	448b      	add	fp, r1
 8001628:	e666      	b.n	80012f8 <__aeabi_ddiv+0x288>
 800162a:	210f      	movs	r1, #15
 800162c:	4011      	ands	r1, r2
 800162e:	2904      	cmp	r1, #4
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x5c4>
 8001632:	e661      	b.n	80012f8 <__aeabi_ddiv+0x288>
 8001634:	0011      	movs	r1, r2
 8001636:	e7f2      	b.n	800161e <__aeabi_ddiv+0x5ae>
 8001638:	42bc      	cmp	r4, r7
 800163a:	d800      	bhi.n	800163e <__aeabi_ddiv+0x5ce>
 800163c:	e60a      	b.n	8001254 <__aeabi_ddiv+0x1e4>
 800163e:	2302      	movs	r3, #2
 8001640:	425b      	negs	r3, r3
 8001642:	469c      	mov	ip, r3
 8001644:	9900      	ldr	r1, [sp, #0]
 8001646:	444f      	add	r7, r9
 8001648:	454f      	cmp	r7, r9
 800164a:	419b      	sbcs	r3, r3
 800164c:	44e3      	add	fp, ip
 800164e:	468c      	mov	ip, r1
 8001650:	425b      	negs	r3, r3
 8001652:	4463      	add	r3, ip
 8001654:	18c0      	adds	r0, r0, r3
 8001656:	e5ff      	b.n	8001258 <__aeabi_ddiv+0x1e8>
 8001658:	4649      	mov	r1, r9
 800165a:	9d00      	ldr	r5, [sp, #0]
 800165c:	0048      	lsls	r0, r1, #1
 800165e:	4548      	cmp	r0, r9
 8001660:	4189      	sbcs	r1, r1
 8001662:	46ac      	mov	ip, r5
 8001664:	4249      	negs	r1, r1
 8001666:	4461      	add	r1, ip
 8001668:	4681      	mov	r9, r0
 800166a:	3a02      	subs	r2, #2
 800166c:	1864      	adds	r4, r4, r1
 800166e:	e7c7      	b.n	8001600 <__aeabi_ddiv+0x590>
 8001670:	2480      	movs	r4, #128	@ 0x80
 8001672:	465b      	mov	r3, fp
 8001674:	0324      	lsls	r4, r4, #12
 8001676:	431c      	orrs	r4, r3
 8001678:	0324      	lsls	r4, r4, #12
 800167a:	4690      	mov	r8, r2
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__aeabi_ddiv+0x620>)
 800167e:	0b24      	lsrs	r4, r4, #12
 8001680:	e556      	b.n	8001130 <__aeabi_ddiv+0xc0>
 8001682:	4599      	cmp	r9, r3
 8001684:	d3e8      	bcc.n	8001658 <__aeabi_ddiv+0x5e8>
 8001686:	000a      	movs	r2, r1
 8001688:	e7bd      	b.n	8001606 <__aeabi_ddiv+0x596>
 800168a:	2300      	movs	r3, #0
 800168c:	e708      	b.n	80014a0 <__aeabi_ddiv+0x430>
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	000007ff 	.word	0x000007ff
 8001694:	0000043e 	.word	0x0000043e
 8001698:	0000041e 	.word	0x0000041e
 800169c:	000003ff 	.word	0x000003ff
 80016a0:	fffffc02 	.word	0xfffffc02

080016a4 <__eqdf2>:
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	4657      	mov	r7, sl
 80016a8:	46de      	mov	lr, fp
 80016aa:	464e      	mov	r6, r9
 80016ac:	4645      	mov	r5, r8
 80016ae:	b5e0      	push	{r5, r6, r7, lr}
 80016b0:	000d      	movs	r5, r1
 80016b2:	0004      	movs	r4, r0
 80016b4:	0fe8      	lsrs	r0, r5, #31
 80016b6:	4683      	mov	fp, r0
 80016b8:	0309      	lsls	r1, r1, #12
 80016ba:	0fd8      	lsrs	r0, r3, #31
 80016bc:	0b09      	lsrs	r1, r1, #12
 80016be:	4682      	mov	sl, r0
 80016c0:	4819      	ldr	r0, [pc, #100]	@ (8001728 <__eqdf2+0x84>)
 80016c2:	468c      	mov	ip, r1
 80016c4:	031f      	lsls	r7, r3, #12
 80016c6:	0069      	lsls	r1, r5, #1
 80016c8:	005e      	lsls	r6, r3, #1
 80016ca:	0d49      	lsrs	r1, r1, #21
 80016cc:	0b3f      	lsrs	r7, r7, #12
 80016ce:	0d76      	lsrs	r6, r6, #21
 80016d0:	4281      	cmp	r1, r0
 80016d2:	d018      	beq.n	8001706 <__eqdf2+0x62>
 80016d4:	4286      	cmp	r6, r0
 80016d6:	d00f      	beq.n	80016f8 <__eqdf2+0x54>
 80016d8:	2001      	movs	r0, #1
 80016da:	42b1      	cmp	r1, r6
 80016dc:	d10d      	bne.n	80016fa <__eqdf2+0x56>
 80016de:	45bc      	cmp	ip, r7
 80016e0:	d10b      	bne.n	80016fa <__eqdf2+0x56>
 80016e2:	4294      	cmp	r4, r2
 80016e4:	d109      	bne.n	80016fa <__eqdf2+0x56>
 80016e6:	45d3      	cmp	fp, sl
 80016e8:	d01c      	beq.n	8001724 <__eqdf2+0x80>
 80016ea:	2900      	cmp	r1, #0
 80016ec:	d105      	bne.n	80016fa <__eqdf2+0x56>
 80016ee:	4660      	mov	r0, ip
 80016f0:	4320      	orrs	r0, r4
 80016f2:	1e43      	subs	r3, r0, #1
 80016f4:	4198      	sbcs	r0, r3
 80016f6:	e000      	b.n	80016fa <__eqdf2+0x56>
 80016f8:	2001      	movs	r0, #1
 80016fa:	bcf0      	pop	{r4, r5, r6, r7}
 80016fc:	46bb      	mov	fp, r7
 80016fe:	46b2      	mov	sl, r6
 8001700:	46a9      	mov	r9, r5
 8001702:	46a0      	mov	r8, r4
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001706:	2001      	movs	r0, #1
 8001708:	428e      	cmp	r6, r1
 800170a:	d1f6      	bne.n	80016fa <__eqdf2+0x56>
 800170c:	4661      	mov	r1, ip
 800170e:	4339      	orrs	r1, r7
 8001710:	000f      	movs	r7, r1
 8001712:	4317      	orrs	r7, r2
 8001714:	4327      	orrs	r7, r4
 8001716:	d1f0      	bne.n	80016fa <__eqdf2+0x56>
 8001718:	465b      	mov	r3, fp
 800171a:	4652      	mov	r2, sl
 800171c:	1a98      	subs	r0, r3, r2
 800171e:	1e43      	subs	r3, r0, #1
 8001720:	4198      	sbcs	r0, r3
 8001722:	e7ea      	b.n	80016fa <__eqdf2+0x56>
 8001724:	2000      	movs	r0, #0
 8001726:	e7e8      	b.n	80016fa <__eqdf2+0x56>
 8001728:	000007ff 	.word	0x000007ff

0800172c <__gedf2>:
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	4657      	mov	r7, sl
 8001730:	464e      	mov	r6, r9
 8001732:	4645      	mov	r5, r8
 8001734:	46de      	mov	lr, fp
 8001736:	b5e0      	push	{r5, r6, r7, lr}
 8001738:	000d      	movs	r5, r1
 800173a:	030f      	lsls	r7, r1, #12
 800173c:	0b39      	lsrs	r1, r7, #12
 800173e:	b083      	sub	sp, #12
 8001740:	0004      	movs	r4, r0
 8001742:	4680      	mov	r8, r0
 8001744:	9101      	str	r1, [sp, #4]
 8001746:	0058      	lsls	r0, r3, #1
 8001748:	0fe9      	lsrs	r1, r5, #31
 800174a:	4f31      	ldr	r7, [pc, #196]	@ (8001810 <__gedf2+0xe4>)
 800174c:	0d40      	lsrs	r0, r0, #21
 800174e:	468c      	mov	ip, r1
 8001750:	006e      	lsls	r6, r5, #1
 8001752:	0319      	lsls	r1, r3, #12
 8001754:	4682      	mov	sl, r0
 8001756:	4691      	mov	r9, r2
 8001758:	0d76      	lsrs	r6, r6, #21
 800175a:	0b09      	lsrs	r1, r1, #12
 800175c:	0fd8      	lsrs	r0, r3, #31
 800175e:	42be      	cmp	r6, r7
 8001760:	d01f      	beq.n	80017a2 <__gedf2+0x76>
 8001762:	45ba      	cmp	sl, r7
 8001764:	d00f      	beq.n	8001786 <__gedf2+0x5a>
 8001766:	2e00      	cmp	r6, #0
 8001768:	d12f      	bne.n	80017ca <__gedf2+0x9e>
 800176a:	4655      	mov	r5, sl
 800176c:	9e01      	ldr	r6, [sp, #4]
 800176e:	4334      	orrs	r4, r6
 8001770:	2d00      	cmp	r5, #0
 8001772:	d127      	bne.n	80017c4 <__gedf2+0x98>
 8001774:	430a      	orrs	r2, r1
 8001776:	d03a      	beq.n	80017ee <__gedf2+0xc2>
 8001778:	2c00      	cmp	r4, #0
 800177a:	d145      	bne.n	8001808 <__gedf2+0xdc>
 800177c:	2800      	cmp	r0, #0
 800177e:	d11a      	bne.n	80017b6 <__gedf2+0x8a>
 8001780:	2001      	movs	r0, #1
 8001782:	4240      	negs	r0, r0
 8001784:	e017      	b.n	80017b6 <__gedf2+0x8a>
 8001786:	4311      	orrs	r1, r2
 8001788:	d13b      	bne.n	8001802 <__gedf2+0xd6>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d102      	bne.n	8001794 <__gedf2+0x68>
 800178e:	9f01      	ldr	r7, [sp, #4]
 8001790:	4327      	orrs	r7, r4
 8001792:	d0f3      	beq.n	800177c <__gedf2+0x50>
 8001794:	4584      	cmp	ip, r0
 8001796:	d109      	bne.n	80017ac <__gedf2+0x80>
 8001798:	4663      	mov	r3, ip
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <__gedf2+0x54>
 800179e:	4660      	mov	r0, ip
 80017a0:	e009      	b.n	80017b6 <__gedf2+0x8a>
 80017a2:	9f01      	ldr	r7, [sp, #4]
 80017a4:	4327      	orrs	r7, r4
 80017a6:	d12c      	bne.n	8001802 <__gedf2+0xd6>
 80017a8:	45b2      	cmp	sl, r6
 80017aa:	d024      	beq.n	80017f6 <__gedf2+0xca>
 80017ac:	4663      	mov	r3, ip
 80017ae:	2002      	movs	r0, #2
 80017b0:	3b01      	subs	r3, #1
 80017b2:	4018      	ands	r0, r3
 80017b4:	3801      	subs	r0, #1
 80017b6:	b003      	add	sp, #12
 80017b8:	bcf0      	pop	{r4, r5, r6, r7}
 80017ba:	46bb      	mov	fp, r7
 80017bc:	46b2      	mov	sl, r6
 80017be:	46a9      	mov	r9, r5
 80017c0:	46a0      	mov	r8, r4
 80017c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d0d9      	beq.n	800177c <__gedf2+0x50>
 80017c8:	e7e4      	b.n	8001794 <__gedf2+0x68>
 80017ca:	4654      	mov	r4, sl
 80017cc:	2c00      	cmp	r4, #0
 80017ce:	d0ed      	beq.n	80017ac <__gedf2+0x80>
 80017d0:	4584      	cmp	ip, r0
 80017d2:	d1eb      	bne.n	80017ac <__gedf2+0x80>
 80017d4:	4556      	cmp	r6, sl
 80017d6:	dce9      	bgt.n	80017ac <__gedf2+0x80>
 80017d8:	dbde      	blt.n	8001798 <__gedf2+0x6c>
 80017da:	9b01      	ldr	r3, [sp, #4]
 80017dc:	428b      	cmp	r3, r1
 80017de:	d8e5      	bhi.n	80017ac <__gedf2+0x80>
 80017e0:	d1da      	bne.n	8001798 <__gedf2+0x6c>
 80017e2:	45c8      	cmp	r8, r9
 80017e4:	d8e2      	bhi.n	80017ac <__gedf2+0x80>
 80017e6:	2000      	movs	r0, #0
 80017e8:	45c8      	cmp	r8, r9
 80017ea:	d2e4      	bcs.n	80017b6 <__gedf2+0x8a>
 80017ec:	e7d4      	b.n	8001798 <__gedf2+0x6c>
 80017ee:	2000      	movs	r0, #0
 80017f0:	2c00      	cmp	r4, #0
 80017f2:	d0e0      	beq.n	80017b6 <__gedf2+0x8a>
 80017f4:	e7da      	b.n	80017ac <__gedf2+0x80>
 80017f6:	4311      	orrs	r1, r2
 80017f8:	d103      	bne.n	8001802 <__gedf2+0xd6>
 80017fa:	4584      	cmp	ip, r0
 80017fc:	d1d6      	bne.n	80017ac <__gedf2+0x80>
 80017fe:	2000      	movs	r0, #0
 8001800:	e7d9      	b.n	80017b6 <__gedf2+0x8a>
 8001802:	2002      	movs	r0, #2
 8001804:	4240      	negs	r0, r0
 8001806:	e7d6      	b.n	80017b6 <__gedf2+0x8a>
 8001808:	4584      	cmp	ip, r0
 800180a:	d0e6      	beq.n	80017da <__gedf2+0xae>
 800180c:	e7ce      	b.n	80017ac <__gedf2+0x80>
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	000007ff 	.word	0x000007ff

08001814 <__ledf2>:
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	4657      	mov	r7, sl
 8001818:	464e      	mov	r6, r9
 800181a:	4645      	mov	r5, r8
 800181c:	46de      	mov	lr, fp
 800181e:	b5e0      	push	{r5, r6, r7, lr}
 8001820:	000d      	movs	r5, r1
 8001822:	030f      	lsls	r7, r1, #12
 8001824:	0004      	movs	r4, r0
 8001826:	4680      	mov	r8, r0
 8001828:	0fe8      	lsrs	r0, r5, #31
 800182a:	0b39      	lsrs	r1, r7, #12
 800182c:	4684      	mov	ip, r0
 800182e:	b083      	sub	sp, #12
 8001830:	0058      	lsls	r0, r3, #1
 8001832:	4f30      	ldr	r7, [pc, #192]	@ (80018f4 <__ledf2+0xe0>)
 8001834:	0d40      	lsrs	r0, r0, #21
 8001836:	9101      	str	r1, [sp, #4]
 8001838:	031e      	lsls	r6, r3, #12
 800183a:	0069      	lsls	r1, r5, #1
 800183c:	4682      	mov	sl, r0
 800183e:	4691      	mov	r9, r2
 8001840:	0d49      	lsrs	r1, r1, #21
 8001842:	0b36      	lsrs	r6, r6, #12
 8001844:	0fd8      	lsrs	r0, r3, #31
 8001846:	42b9      	cmp	r1, r7
 8001848:	d020      	beq.n	800188c <__ledf2+0x78>
 800184a:	45ba      	cmp	sl, r7
 800184c:	d00f      	beq.n	800186e <__ledf2+0x5a>
 800184e:	2900      	cmp	r1, #0
 8001850:	d12b      	bne.n	80018aa <__ledf2+0x96>
 8001852:	9901      	ldr	r1, [sp, #4]
 8001854:	430c      	orrs	r4, r1
 8001856:	4651      	mov	r1, sl
 8001858:	2900      	cmp	r1, #0
 800185a:	d137      	bne.n	80018cc <__ledf2+0xb8>
 800185c:	4332      	orrs	r2, r6
 800185e:	d038      	beq.n	80018d2 <__ledf2+0xbe>
 8001860:	2c00      	cmp	r4, #0
 8001862:	d144      	bne.n	80018ee <__ledf2+0xda>
 8001864:	2800      	cmp	r0, #0
 8001866:	d119      	bne.n	800189c <__ledf2+0x88>
 8001868:	2001      	movs	r0, #1
 800186a:	4240      	negs	r0, r0
 800186c:	e016      	b.n	800189c <__ledf2+0x88>
 800186e:	4316      	orrs	r6, r2
 8001870:	d113      	bne.n	800189a <__ledf2+0x86>
 8001872:	2900      	cmp	r1, #0
 8001874:	d102      	bne.n	800187c <__ledf2+0x68>
 8001876:	9f01      	ldr	r7, [sp, #4]
 8001878:	4327      	orrs	r7, r4
 800187a:	d0f3      	beq.n	8001864 <__ledf2+0x50>
 800187c:	4584      	cmp	ip, r0
 800187e:	d020      	beq.n	80018c2 <__ledf2+0xae>
 8001880:	4663      	mov	r3, ip
 8001882:	2002      	movs	r0, #2
 8001884:	3b01      	subs	r3, #1
 8001886:	4018      	ands	r0, r3
 8001888:	3801      	subs	r0, #1
 800188a:	e007      	b.n	800189c <__ledf2+0x88>
 800188c:	9f01      	ldr	r7, [sp, #4]
 800188e:	4327      	orrs	r7, r4
 8001890:	d103      	bne.n	800189a <__ledf2+0x86>
 8001892:	458a      	cmp	sl, r1
 8001894:	d1f4      	bne.n	8001880 <__ledf2+0x6c>
 8001896:	4316      	orrs	r6, r2
 8001898:	d01f      	beq.n	80018da <__ledf2+0xc6>
 800189a:	2002      	movs	r0, #2
 800189c:	b003      	add	sp, #12
 800189e:	bcf0      	pop	{r4, r5, r6, r7}
 80018a0:	46bb      	mov	fp, r7
 80018a2:	46b2      	mov	sl, r6
 80018a4:	46a9      	mov	r9, r5
 80018a6:	46a0      	mov	r8, r4
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018aa:	4654      	mov	r4, sl
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	d0e7      	beq.n	8001880 <__ledf2+0x6c>
 80018b0:	4584      	cmp	ip, r0
 80018b2:	d1e5      	bne.n	8001880 <__ledf2+0x6c>
 80018b4:	4551      	cmp	r1, sl
 80018b6:	dce3      	bgt.n	8001880 <__ledf2+0x6c>
 80018b8:	db03      	blt.n	80018c2 <__ledf2+0xae>
 80018ba:	9b01      	ldr	r3, [sp, #4]
 80018bc:	42b3      	cmp	r3, r6
 80018be:	d8df      	bhi.n	8001880 <__ledf2+0x6c>
 80018c0:	d00f      	beq.n	80018e2 <__ledf2+0xce>
 80018c2:	4663      	mov	r3, ip
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0cf      	beq.n	8001868 <__ledf2+0x54>
 80018c8:	4660      	mov	r0, ip
 80018ca:	e7e7      	b.n	800189c <__ledf2+0x88>
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	d0c9      	beq.n	8001864 <__ledf2+0x50>
 80018d0:	e7d4      	b.n	800187c <__ledf2+0x68>
 80018d2:	2000      	movs	r0, #0
 80018d4:	2c00      	cmp	r4, #0
 80018d6:	d0e1      	beq.n	800189c <__ledf2+0x88>
 80018d8:	e7d2      	b.n	8001880 <__ledf2+0x6c>
 80018da:	4584      	cmp	ip, r0
 80018dc:	d1d0      	bne.n	8001880 <__ledf2+0x6c>
 80018de:	2000      	movs	r0, #0
 80018e0:	e7dc      	b.n	800189c <__ledf2+0x88>
 80018e2:	45c8      	cmp	r8, r9
 80018e4:	d8cc      	bhi.n	8001880 <__ledf2+0x6c>
 80018e6:	2000      	movs	r0, #0
 80018e8:	45c8      	cmp	r8, r9
 80018ea:	d2d7      	bcs.n	800189c <__ledf2+0x88>
 80018ec:	e7e9      	b.n	80018c2 <__ledf2+0xae>
 80018ee:	4584      	cmp	ip, r0
 80018f0:	d0e3      	beq.n	80018ba <__ledf2+0xa6>
 80018f2:	e7c5      	b.n	8001880 <__ledf2+0x6c>
 80018f4:	000007ff 	.word	0x000007ff

080018f8 <__aeabi_dmul>:
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	4657      	mov	r7, sl
 80018fc:	46de      	mov	lr, fp
 80018fe:	464e      	mov	r6, r9
 8001900:	4645      	mov	r5, r8
 8001902:	b5e0      	push	{r5, r6, r7, lr}
 8001904:	001f      	movs	r7, r3
 8001906:	030b      	lsls	r3, r1, #12
 8001908:	0b1b      	lsrs	r3, r3, #12
 800190a:	0016      	movs	r6, r2
 800190c:	469a      	mov	sl, r3
 800190e:	0fca      	lsrs	r2, r1, #31
 8001910:	004b      	lsls	r3, r1, #1
 8001912:	0004      	movs	r4, r0
 8001914:	4693      	mov	fp, r2
 8001916:	b087      	sub	sp, #28
 8001918:	0d5b      	lsrs	r3, r3, #21
 800191a:	d100      	bne.n	800191e <__aeabi_dmul+0x26>
 800191c:	e0d5      	b.n	8001aca <__aeabi_dmul+0x1d2>
 800191e:	4abb      	ldr	r2, [pc, #748]	@ (8001c0c <__aeabi_dmul+0x314>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d100      	bne.n	8001926 <__aeabi_dmul+0x2e>
 8001924:	e0f8      	b.n	8001b18 <__aeabi_dmul+0x220>
 8001926:	4651      	mov	r1, sl
 8001928:	0f42      	lsrs	r2, r0, #29
 800192a:	00c9      	lsls	r1, r1, #3
 800192c:	430a      	orrs	r2, r1
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	0409      	lsls	r1, r1, #16
 8001932:	4311      	orrs	r1, r2
 8001934:	00c2      	lsls	r2, r0, #3
 8001936:	4691      	mov	r9, r2
 8001938:	4ab5      	ldr	r2, [pc, #724]	@ (8001c10 <__aeabi_dmul+0x318>)
 800193a:	468a      	mov	sl, r1
 800193c:	189d      	adds	r5, r3, r2
 800193e:	2300      	movs	r3, #0
 8001940:	4698      	mov	r8, r3
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	033c      	lsls	r4, r7, #12
 8001946:	007b      	lsls	r3, r7, #1
 8001948:	0ffa      	lsrs	r2, r7, #31
 800194a:	0030      	movs	r0, r6
 800194c:	0b24      	lsrs	r4, r4, #12
 800194e:	0d5b      	lsrs	r3, r3, #21
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	d100      	bne.n	8001956 <__aeabi_dmul+0x5e>
 8001954:	e096      	b.n	8001a84 <__aeabi_dmul+0x18c>
 8001956:	4aad      	ldr	r2, [pc, #692]	@ (8001c0c <__aeabi_dmul+0x314>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d031      	beq.n	80019c0 <__aeabi_dmul+0xc8>
 800195c:	0f72      	lsrs	r2, r6, #29
 800195e:	00e4      	lsls	r4, r4, #3
 8001960:	4322      	orrs	r2, r4
 8001962:	2480      	movs	r4, #128	@ 0x80
 8001964:	0424      	lsls	r4, r4, #16
 8001966:	4314      	orrs	r4, r2
 8001968:	4aa9      	ldr	r2, [pc, #676]	@ (8001c10 <__aeabi_dmul+0x318>)
 800196a:	00f0      	lsls	r0, r6, #3
 800196c:	4694      	mov	ip, r2
 800196e:	4463      	add	r3, ip
 8001970:	195b      	adds	r3, r3, r5
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	9201      	str	r2, [sp, #4]
 8001976:	4642      	mov	r2, r8
 8001978:	2600      	movs	r6, #0
 800197a:	2a0a      	cmp	r2, #10
 800197c:	dc42      	bgt.n	8001a04 <__aeabi_dmul+0x10c>
 800197e:	465a      	mov	r2, fp
 8001980:	9900      	ldr	r1, [sp, #0]
 8001982:	404a      	eors	r2, r1
 8001984:	4693      	mov	fp, r2
 8001986:	4642      	mov	r2, r8
 8001988:	2a02      	cmp	r2, #2
 800198a:	dc32      	bgt.n	80019f2 <__aeabi_dmul+0xfa>
 800198c:	3a01      	subs	r2, #1
 800198e:	2a01      	cmp	r2, #1
 8001990:	d900      	bls.n	8001994 <__aeabi_dmul+0x9c>
 8001992:	e149      	b.n	8001c28 <__aeabi_dmul+0x330>
 8001994:	2e02      	cmp	r6, #2
 8001996:	d100      	bne.n	800199a <__aeabi_dmul+0xa2>
 8001998:	e0ca      	b.n	8001b30 <__aeabi_dmul+0x238>
 800199a:	2e01      	cmp	r6, #1
 800199c:	d13d      	bne.n	8001a1a <__aeabi_dmul+0x122>
 800199e:	2300      	movs	r3, #0
 80019a0:	2400      	movs	r4, #0
 80019a2:	2200      	movs	r2, #0
 80019a4:	0010      	movs	r0, r2
 80019a6:	465a      	mov	r2, fp
 80019a8:	051b      	lsls	r3, r3, #20
 80019aa:	4323      	orrs	r3, r4
 80019ac:	07d2      	lsls	r2, r2, #31
 80019ae:	4313      	orrs	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	b007      	add	sp, #28
 80019b4:	bcf0      	pop	{r4, r5, r6, r7}
 80019b6:	46bb      	mov	fp, r7
 80019b8:	46b2      	mov	sl, r6
 80019ba:	46a9      	mov	r9, r5
 80019bc:	46a0      	mov	r8, r4
 80019be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c0:	4b92      	ldr	r3, [pc, #584]	@ (8001c0c <__aeabi_dmul+0x314>)
 80019c2:	4326      	orrs	r6, r4
 80019c4:	18eb      	adds	r3, r5, r3
 80019c6:	2e00      	cmp	r6, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dmul+0xd4>
 80019ca:	e0bb      	b.n	8001b44 <__aeabi_dmul+0x24c>
 80019cc:	2203      	movs	r2, #3
 80019ce:	4641      	mov	r1, r8
 80019d0:	4311      	orrs	r1, r2
 80019d2:	465a      	mov	r2, fp
 80019d4:	4688      	mov	r8, r1
 80019d6:	9900      	ldr	r1, [sp, #0]
 80019d8:	404a      	eors	r2, r1
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	0109      	lsls	r1, r1, #4
 80019de:	468c      	mov	ip, r1
 80019e0:	0029      	movs	r1, r5
 80019e2:	4461      	add	r1, ip
 80019e4:	9101      	str	r1, [sp, #4]
 80019e6:	4641      	mov	r1, r8
 80019e8:	290a      	cmp	r1, #10
 80019ea:	dd00      	ble.n	80019ee <__aeabi_dmul+0xf6>
 80019ec:	e233      	b.n	8001e56 <__aeabi_dmul+0x55e>
 80019ee:	4693      	mov	fp, r2
 80019f0:	2603      	movs	r6, #3
 80019f2:	4642      	mov	r2, r8
 80019f4:	2701      	movs	r7, #1
 80019f6:	4097      	lsls	r7, r2
 80019f8:	21a6      	movs	r1, #166	@ 0xa6
 80019fa:	003a      	movs	r2, r7
 80019fc:	00c9      	lsls	r1, r1, #3
 80019fe:	400a      	ands	r2, r1
 8001a00:	420f      	tst	r7, r1
 8001a02:	d031      	beq.n	8001a68 <__aeabi_dmul+0x170>
 8001a04:	9e02      	ldr	r6, [sp, #8]
 8001a06:	2e02      	cmp	r6, #2
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dmul+0x114>
 8001a0a:	e235      	b.n	8001e78 <__aeabi_dmul+0x580>
 8001a0c:	2e03      	cmp	r6, #3
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dmul+0x11a>
 8001a10:	e1d2      	b.n	8001db8 <__aeabi_dmul+0x4c0>
 8001a12:	4654      	mov	r4, sl
 8001a14:	4648      	mov	r0, r9
 8001a16:	2e01      	cmp	r6, #1
 8001a18:	d0c1      	beq.n	800199e <__aeabi_dmul+0xa6>
 8001a1a:	9a01      	ldr	r2, [sp, #4]
 8001a1c:	4b7d      	ldr	r3, [pc, #500]	@ (8001c14 <__aeabi_dmul+0x31c>)
 8001a1e:	4694      	mov	ip, r2
 8001a20:	4463      	add	r3, ip
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	dc00      	bgt.n	8001a28 <__aeabi_dmul+0x130>
 8001a26:	e0c0      	b.n	8001baa <__aeabi_dmul+0x2b2>
 8001a28:	0742      	lsls	r2, r0, #29
 8001a2a:	d009      	beq.n	8001a40 <__aeabi_dmul+0x148>
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	4002      	ands	r2, r0
 8001a30:	2a04      	cmp	r2, #4
 8001a32:	d005      	beq.n	8001a40 <__aeabi_dmul+0x148>
 8001a34:	1d02      	adds	r2, r0, #4
 8001a36:	4282      	cmp	r2, r0
 8001a38:	4180      	sbcs	r0, r0
 8001a3a:	4240      	negs	r0, r0
 8001a3c:	1824      	adds	r4, r4, r0
 8001a3e:	0010      	movs	r0, r2
 8001a40:	01e2      	lsls	r2, r4, #7
 8001a42:	d506      	bpl.n	8001a52 <__aeabi_dmul+0x15a>
 8001a44:	4b74      	ldr	r3, [pc, #464]	@ (8001c18 <__aeabi_dmul+0x320>)
 8001a46:	9a01      	ldr	r2, [sp, #4]
 8001a48:	401c      	ands	r4, r3
 8001a4a:	2380      	movs	r3, #128	@ 0x80
 8001a4c:	4694      	mov	ip, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4463      	add	r3, ip
 8001a52:	4a72      	ldr	r2, [pc, #456]	@ (8001c1c <__aeabi_dmul+0x324>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	dc6b      	bgt.n	8001b30 <__aeabi_dmul+0x238>
 8001a58:	0762      	lsls	r2, r4, #29
 8001a5a:	08c0      	lsrs	r0, r0, #3
 8001a5c:	0264      	lsls	r4, r4, #9
 8001a5e:	055b      	lsls	r3, r3, #21
 8001a60:	4302      	orrs	r2, r0
 8001a62:	0b24      	lsrs	r4, r4, #12
 8001a64:	0d5b      	lsrs	r3, r3, #21
 8001a66:	e79d      	b.n	80019a4 <__aeabi_dmul+0xac>
 8001a68:	2190      	movs	r1, #144	@ 0x90
 8001a6a:	0089      	lsls	r1, r1, #2
 8001a6c:	420f      	tst	r7, r1
 8001a6e:	d163      	bne.n	8001b38 <__aeabi_dmul+0x240>
 8001a70:	2288      	movs	r2, #136	@ 0x88
 8001a72:	423a      	tst	r2, r7
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dmul+0x180>
 8001a76:	e0d7      	b.n	8001c28 <__aeabi_dmul+0x330>
 8001a78:	9b00      	ldr	r3, [sp, #0]
 8001a7a:	46a2      	mov	sl, r4
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	4681      	mov	r9, r0
 8001a80:	9602      	str	r6, [sp, #8]
 8001a82:	e7bf      	b.n	8001a04 <__aeabi_dmul+0x10c>
 8001a84:	0023      	movs	r3, r4
 8001a86:	4333      	orrs	r3, r6
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dmul+0x194>
 8001a8a:	e07f      	b.n	8001b8c <__aeabi_dmul+0x294>
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dmul+0x19a>
 8001a90:	e1ad      	b.n	8001dee <__aeabi_dmul+0x4f6>
 8001a92:	0020      	movs	r0, r4
 8001a94:	f000 fe68 	bl	8002768 <__clzsi2>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	3a0b      	subs	r2, #11
 8001a9e:	201d      	movs	r0, #29
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	1a82      	subs	r2, r0, r2
 8001aa4:	0030      	movs	r0, r6
 8001aa6:	3908      	subs	r1, #8
 8001aa8:	40d0      	lsrs	r0, r2
 8001aaa:	408c      	lsls	r4, r1
 8001aac:	4304      	orrs	r4, r0
 8001aae:	0030      	movs	r0, r6
 8001ab0:	4088      	lsls	r0, r1
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8001c20 <__aeabi_dmul+0x328>)
 8001ab4:	1aeb      	subs	r3, r5, r3
 8001ab6:	4694      	mov	ip, r2
 8001ab8:	4463      	add	r3, ip
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	9201      	str	r2, [sp, #4]
 8001abe:	4642      	mov	r2, r8
 8001ac0:	2600      	movs	r6, #0
 8001ac2:	2a0a      	cmp	r2, #10
 8001ac4:	dc00      	bgt.n	8001ac8 <__aeabi_dmul+0x1d0>
 8001ac6:	e75a      	b.n	800197e <__aeabi_dmul+0x86>
 8001ac8:	e79c      	b.n	8001a04 <__aeabi_dmul+0x10c>
 8001aca:	4653      	mov	r3, sl
 8001acc:	4303      	orrs	r3, r0
 8001ace:	4699      	mov	r9, r3
 8001ad0:	d054      	beq.n	8001b7c <__aeabi_dmul+0x284>
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dmul+0x1e2>
 8001ad8:	e177      	b.n	8001dca <__aeabi_dmul+0x4d2>
 8001ada:	4650      	mov	r0, sl
 8001adc:	f000 fe44 	bl	8002768 <__clzsi2>
 8001ae0:	230b      	movs	r3, #11
 8001ae2:	425b      	negs	r3, r3
 8001ae4:	469c      	mov	ip, r3
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	4484      	add	ip, r0
 8001aea:	0011      	movs	r1, r2
 8001aec:	4650      	mov	r0, sl
 8001aee:	3908      	subs	r1, #8
 8001af0:	4088      	lsls	r0, r1
 8001af2:	231d      	movs	r3, #29
 8001af4:	4680      	mov	r8, r0
 8001af6:	4660      	mov	r0, ip
 8001af8:	1a1b      	subs	r3, r3, r0
 8001afa:	0020      	movs	r0, r4
 8001afc:	40d8      	lsrs	r0, r3
 8001afe:	0003      	movs	r3, r0
 8001b00:	4640      	mov	r0, r8
 8001b02:	4303      	orrs	r3, r0
 8001b04:	469a      	mov	sl, r3
 8001b06:	0023      	movs	r3, r4
 8001b08:	408b      	lsls	r3, r1
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	4d44      	ldr	r5, [pc, #272]	@ (8001c20 <__aeabi_dmul+0x328>)
 8001b10:	4698      	mov	r8, r3
 8001b12:	1aad      	subs	r5, r5, r2
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	e715      	b.n	8001944 <__aeabi_dmul+0x4c>
 8001b18:	4652      	mov	r2, sl
 8001b1a:	4302      	orrs	r2, r0
 8001b1c:	4691      	mov	r9, r2
 8001b1e:	d126      	bne.n	8001b6e <__aeabi_dmul+0x276>
 8001b20:	2200      	movs	r2, #0
 8001b22:	001d      	movs	r5, r3
 8001b24:	2302      	movs	r3, #2
 8001b26:	4692      	mov	sl, r2
 8001b28:	3208      	adds	r2, #8
 8001b2a:	4690      	mov	r8, r2
 8001b2c:	9302      	str	r3, [sp, #8]
 8001b2e:	e709      	b.n	8001944 <__aeabi_dmul+0x4c>
 8001b30:	2400      	movs	r4, #0
 8001b32:	2200      	movs	r2, #0
 8001b34:	4b35      	ldr	r3, [pc, #212]	@ (8001c0c <__aeabi_dmul+0x314>)
 8001b36:	e735      	b.n	80019a4 <__aeabi_dmul+0xac>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2480      	movs	r4, #128	@ 0x80
 8001b3c:	469b      	mov	fp, r3
 8001b3e:	0324      	lsls	r4, r4, #12
 8001b40:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <__aeabi_dmul+0x314>)
 8001b42:	e72f      	b.n	80019a4 <__aeabi_dmul+0xac>
 8001b44:	2202      	movs	r2, #2
 8001b46:	4641      	mov	r1, r8
 8001b48:	4311      	orrs	r1, r2
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	4694      	mov	ip, r2
 8001b50:	002a      	movs	r2, r5
 8001b52:	4462      	add	r2, ip
 8001b54:	4688      	mov	r8, r1
 8001b56:	9201      	str	r2, [sp, #4]
 8001b58:	290a      	cmp	r1, #10
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dmul+0x266>
 8001b5c:	e752      	b.n	8001a04 <__aeabi_dmul+0x10c>
 8001b5e:	465a      	mov	r2, fp
 8001b60:	2000      	movs	r0, #0
 8001b62:	9900      	ldr	r1, [sp, #0]
 8001b64:	0004      	movs	r4, r0
 8001b66:	404a      	eors	r2, r1
 8001b68:	4693      	mov	fp, r2
 8001b6a:	2602      	movs	r6, #2
 8001b6c:	e70b      	b.n	8001986 <__aeabi_dmul+0x8e>
 8001b6e:	220c      	movs	r2, #12
 8001b70:	001d      	movs	r5, r3
 8001b72:	2303      	movs	r3, #3
 8001b74:	4681      	mov	r9, r0
 8001b76:	4690      	mov	r8, r2
 8001b78:	9302      	str	r3, [sp, #8]
 8001b7a:	e6e3      	b.n	8001944 <__aeabi_dmul+0x4c>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	469a      	mov	sl, r3
 8001b80:	3304      	adds	r3, #4
 8001b82:	4698      	mov	r8, r3
 8001b84:	3b03      	subs	r3, #3
 8001b86:	2500      	movs	r5, #0
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	e6db      	b.n	8001944 <__aeabi_dmul+0x4c>
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	3301      	adds	r3, #1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	002b      	movs	r3, r5
 8001b94:	4690      	mov	r8, r2
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	9201      	str	r2, [sp, #4]
 8001b9a:	4642      	mov	r2, r8
 8001b9c:	2400      	movs	r4, #0
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	2601      	movs	r6, #1
 8001ba2:	2a0a      	cmp	r2, #10
 8001ba4:	dc00      	bgt.n	8001ba8 <__aeabi_dmul+0x2b0>
 8001ba6:	e6ea      	b.n	800197e <__aeabi_dmul+0x86>
 8001ba8:	e72c      	b.n	8001a04 <__aeabi_dmul+0x10c>
 8001baa:	2201      	movs	r2, #1
 8001bac:	1ad2      	subs	r2, r2, r3
 8001bae:	2a38      	cmp	r2, #56	@ 0x38
 8001bb0:	dd00      	ble.n	8001bb4 <__aeabi_dmul+0x2bc>
 8001bb2:	e6f4      	b.n	800199e <__aeabi_dmul+0xa6>
 8001bb4:	2a1f      	cmp	r2, #31
 8001bb6:	dc00      	bgt.n	8001bba <__aeabi_dmul+0x2c2>
 8001bb8:	e12a      	b.n	8001e10 <__aeabi_dmul+0x518>
 8001bba:	211f      	movs	r1, #31
 8001bbc:	4249      	negs	r1, r1
 8001bbe:	1acb      	subs	r3, r1, r3
 8001bc0:	0021      	movs	r1, r4
 8001bc2:	40d9      	lsrs	r1, r3
 8001bc4:	000b      	movs	r3, r1
 8001bc6:	2a20      	cmp	r2, #32
 8001bc8:	d005      	beq.n	8001bd6 <__aeabi_dmul+0x2de>
 8001bca:	4a16      	ldr	r2, [pc, #88]	@ (8001c24 <__aeabi_dmul+0x32c>)
 8001bcc:	9d01      	ldr	r5, [sp, #4]
 8001bce:	4694      	mov	ip, r2
 8001bd0:	4465      	add	r5, ip
 8001bd2:	40ac      	lsls	r4, r5
 8001bd4:	4320      	orrs	r0, r4
 8001bd6:	1e42      	subs	r2, r0, #1
 8001bd8:	4190      	sbcs	r0, r2
 8001bda:	4318      	orrs	r0, r3
 8001bdc:	2307      	movs	r3, #7
 8001bde:	0019      	movs	r1, r3
 8001be0:	2400      	movs	r4, #0
 8001be2:	4001      	ands	r1, r0
 8001be4:	4203      	tst	r3, r0
 8001be6:	d00c      	beq.n	8001c02 <__aeabi_dmul+0x30a>
 8001be8:	230f      	movs	r3, #15
 8001bea:	4003      	ands	r3, r0
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dmul+0x2fa>
 8001bf0:	e140      	b.n	8001e74 <__aeabi_dmul+0x57c>
 8001bf2:	1d03      	adds	r3, r0, #4
 8001bf4:	4283      	cmp	r3, r0
 8001bf6:	41a4      	sbcs	r4, r4
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	4264      	negs	r4, r4
 8001bfc:	0761      	lsls	r1, r4, #29
 8001bfe:	0264      	lsls	r4, r4, #9
 8001c00:	0b24      	lsrs	r4, r4, #12
 8001c02:	08c2      	lsrs	r2, r0, #3
 8001c04:	2300      	movs	r3, #0
 8001c06:	430a      	orrs	r2, r1
 8001c08:	e6cc      	b.n	80019a4 <__aeabi_dmul+0xac>
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	000007ff 	.word	0x000007ff
 8001c10:	fffffc01 	.word	0xfffffc01
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	feffffff 	.word	0xfeffffff
 8001c1c:	000007fe 	.word	0x000007fe
 8001c20:	fffffc0d 	.word	0xfffffc0d
 8001c24:	0000043e 	.word	0x0000043e
 8001c28:	4649      	mov	r1, r9
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	0409      	lsls	r1, r1, #16
 8001c2e:	0c09      	lsrs	r1, r1, #16
 8001c30:	000d      	movs	r5, r1
 8001c32:	0c16      	lsrs	r6, r2, #16
 8001c34:	0c02      	lsrs	r2, r0, #16
 8001c36:	0400      	lsls	r0, r0, #16
 8001c38:	0c00      	lsrs	r0, r0, #16
 8001c3a:	4345      	muls	r5, r0
 8001c3c:	46ac      	mov	ip, r5
 8001c3e:	0005      	movs	r5, r0
 8001c40:	4375      	muls	r5, r6
 8001c42:	46a8      	mov	r8, r5
 8001c44:	0015      	movs	r5, r2
 8001c46:	000f      	movs	r7, r1
 8001c48:	4375      	muls	r5, r6
 8001c4a:	9200      	str	r2, [sp, #0]
 8001c4c:	9502      	str	r5, [sp, #8]
 8001c4e:	002a      	movs	r2, r5
 8001c50:	9d00      	ldr	r5, [sp, #0]
 8001c52:	436f      	muls	r7, r5
 8001c54:	4665      	mov	r5, ip
 8001c56:	0c2d      	lsrs	r5, r5, #16
 8001c58:	46a9      	mov	r9, r5
 8001c5a:	4447      	add	r7, r8
 8001c5c:	444f      	add	r7, r9
 8001c5e:	45b8      	cmp	r8, r7
 8001c60:	d905      	bls.n	8001c6e <__aeabi_dmul+0x376>
 8001c62:	0015      	movs	r5, r2
 8001c64:	2280      	movs	r2, #128	@ 0x80
 8001c66:	0252      	lsls	r2, r2, #9
 8001c68:	4690      	mov	r8, r2
 8001c6a:	4445      	add	r5, r8
 8001c6c:	9502      	str	r5, [sp, #8]
 8001c6e:	0c3d      	lsrs	r5, r7, #16
 8001c70:	9503      	str	r5, [sp, #12]
 8001c72:	4665      	mov	r5, ip
 8001c74:	042d      	lsls	r5, r5, #16
 8001c76:	043f      	lsls	r7, r7, #16
 8001c78:	0c2d      	lsrs	r5, r5, #16
 8001c7a:	46ac      	mov	ip, r5
 8001c7c:	003d      	movs	r5, r7
 8001c7e:	4465      	add	r5, ip
 8001c80:	9504      	str	r5, [sp, #16]
 8001c82:	0c25      	lsrs	r5, r4, #16
 8001c84:	0424      	lsls	r4, r4, #16
 8001c86:	0c24      	lsrs	r4, r4, #16
 8001c88:	46ac      	mov	ip, r5
 8001c8a:	0025      	movs	r5, r4
 8001c8c:	4375      	muls	r5, r6
 8001c8e:	46a8      	mov	r8, r5
 8001c90:	4665      	mov	r5, ip
 8001c92:	000f      	movs	r7, r1
 8001c94:	4369      	muls	r1, r5
 8001c96:	4441      	add	r1, r8
 8001c98:	4689      	mov	r9, r1
 8001c9a:	4367      	muls	r7, r4
 8001c9c:	0c39      	lsrs	r1, r7, #16
 8001c9e:	4449      	add	r1, r9
 8001ca0:	436e      	muls	r6, r5
 8001ca2:	4588      	cmp	r8, r1
 8001ca4:	d903      	bls.n	8001cae <__aeabi_dmul+0x3b6>
 8001ca6:	2280      	movs	r2, #128	@ 0x80
 8001ca8:	0252      	lsls	r2, r2, #9
 8001caa:	4690      	mov	r8, r2
 8001cac:	4446      	add	r6, r8
 8001cae:	0c0d      	lsrs	r5, r1, #16
 8001cb0:	46a8      	mov	r8, r5
 8001cb2:	0035      	movs	r5, r6
 8001cb4:	4445      	add	r5, r8
 8001cb6:	9505      	str	r5, [sp, #20]
 8001cb8:	9d03      	ldr	r5, [sp, #12]
 8001cba:	043f      	lsls	r7, r7, #16
 8001cbc:	46a8      	mov	r8, r5
 8001cbe:	0c3f      	lsrs	r7, r7, #16
 8001cc0:	0409      	lsls	r1, r1, #16
 8001cc2:	19c9      	adds	r1, r1, r7
 8001cc4:	4488      	add	r8, r1
 8001cc6:	4645      	mov	r5, r8
 8001cc8:	9503      	str	r5, [sp, #12]
 8001cca:	4655      	mov	r5, sl
 8001ccc:	042e      	lsls	r6, r5, #16
 8001cce:	0c36      	lsrs	r6, r6, #16
 8001cd0:	0c2f      	lsrs	r7, r5, #16
 8001cd2:	0035      	movs	r5, r6
 8001cd4:	4345      	muls	r5, r0
 8001cd6:	4378      	muls	r0, r7
 8001cd8:	4681      	mov	r9, r0
 8001cda:	0038      	movs	r0, r7
 8001cdc:	46a8      	mov	r8, r5
 8001cde:	0c2d      	lsrs	r5, r5, #16
 8001ce0:	46aa      	mov	sl, r5
 8001ce2:	9a00      	ldr	r2, [sp, #0]
 8001ce4:	4350      	muls	r0, r2
 8001ce6:	4372      	muls	r2, r6
 8001ce8:	444a      	add	r2, r9
 8001cea:	4452      	add	r2, sl
 8001cec:	4591      	cmp	r9, r2
 8001cee:	d903      	bls.n	8001cf8 <__aeabi_dmul+0x400>
 8001cf0:	2580      	movs	r5, #128	@ 0x80
 8001cf2:	026d      	lsls	r5, r5, #9
 8001cf4:	46a9      	mov	r9, r5
 8001cf6:	4448      	add	r0, r9
 8001cf8:	0c15      	lsrs	r5, r2, #16
 8001cfa:	46a9      	mov	r9, r5
 8001cfc:	4645      	mov	r5, r8
 8001cfe:	042d      	lsls	r5, r5, #16
 8001d00:	0c2d      	lsrs	r5, r5, #16
 8001d02:	46a8      	mov	r8, r5
 8001d04:	4665      	mov	r5, ip
 8001d06:	437d      	muls	r5, r7
 8001d08:	0412      	lsls	r2, r2, #16
 8001d0a:	4448      	add	r0, r9
 8001d0c:	4490      	add	r8, r2
 8001d0e:	46a9      	mov	r9, r5
 8001d10:	0032      	movs	r2, r6
 8001d12:	4665      	mov	r5, ip
 8001d14:	4362      	muls	r2, r4
 8001d16:	436e      	muls	r6, r5
 8001d18:	437c      	muls	r4, r7
 8001d1a:	0c17      	lsrs	r7, r2, #16
 8001d1c:	1936      	adds	r6, r6, r4
 8001d1e:	19bf      	adds	r7, r7, r6
 8001d20:	42bc      	cmp	r4, r7
 8001d22:	d903      	bls.n	8001d2c <__aeabi_dmul+0x434>
 8001d24:	2480      	movs	r4, #128	@ 0x80
 8001d26:	0264      	lsls	r4, r4, #9
 8001d28:	46a4      	mov	ip, r4
 8001d2a:	44e1      	add	r9, ip
 8001d2c:	9c02      	ldr	r4, [sp, #8]
 8001d2e:	9e03      	ldr	r6, [sp, #12]
 8001d30:	46a4      	mov	ip, r4
 8001d32:	9d05      	ldr	r5, [sp, #20]
 8001d34:	4466      	add	r6, ip
 8001d36:	428e      	cmp	r6, r1
 8001d38:	4189      	sbcs	r1, r1
 8001d3a:	46ac      	mov	ip, r5
 8001d3c:	0412      	lsls	r2, r2, #16
 8001d3e:	043c      	lsls	r4, r7, #16
 8001d40:	0c12      	lsrs	r2, r2, #16
 8001d42:	18a2      	adds	r2, r4, r2
 8001d44:	4462      	add	r2, ip
 8001d46:	4249      	negs	r1, r1
 8001d48:	1854      	adds	r4, r2, r1
 8001d4a:	4446      	add	r6, r8
 8001d4c:	46a4      	mov	ip, r4
 8001d4e:	4546      	cmp	r6, r8
 8001d50:	41a4      	sbcs	r4, r4
 8001d52:	4682      	mov	sl, r0
 8001d54:	4264      	negs	r4, r4
 8001d56:	46a0      	mov	r8, r4
 8001d58:	42aa      	cmp	r2, r5
 8001d5a:	4192      	sbcs	r2, r2
 8001d5c:	458c      	cmp	ip, r1
 8001d5e:	4189      	sbcs	r1, r1
 8001d60:	44e2      	add	sl, ip
 8001d62:	44d0      	add	r8, sl
 8001d64:	4249      	negs	r1, r1
 8001d66:	4252      	negs	r2, r2
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	45a0      	cmp	r8, r4
 8001d6c:	41a4      	sbcs	r4, r4
 8001d6e:	4582      	cmp	sl, r0
 8001d70:	4189      	sbcs	r1, r1
 8001d72:	4264      	negs	r4, r4
 8001d74:	4249      	negs	r1, r1
 8001d76:	430c      	orrs	r4, r1
 8001d78:	4641      	mov	r1, r8
 8001d7a:	0c3f      	lsrs	r7, r7, #16
 8001d7c:	19d2      	adds	r2, r2, r7
 8001d7e:	1912      	adds	r2, r2, r4
 8001d80:	0dcc      	lsrs	r4, r1, #23
 8001d82:	9904      	ldr	r1, [sp, #16]
 8001d84:	0270      	lsls	r0, r6, #9
 8001d86:	4308      	orrs	r0, r1
 8001d88:	1e41      	subs	r1, r0, #1
 8001d8a:	4188      	sbcs	r0, r1
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	444a      	add	r2, r9
 8001d90:	0df6      	lsrs	r6, r6, #23
 8001d92:	0252      	lsls	r2, r2, #9
 8001d94:	4330      	orrs	r0, r6
 8001d96:	0249      	lsls	r1, r1, #9
 8001d98:	4314      	orrs	r4, r2
 8001d9a:	4308      	orrs	r0, r1
 8001d9c:	01d2      	lsls	r2, r2, #7
 8001d9e:	d535      	bpl.n	8001e0c <__aeabi_dmul+0x514>
 8001da0:	2201      	movs	r2, #1
 8001da2:	0843      	lsrs	r3, r0, #1
 8001da4:	4002      	ands	r2, r0
 8001da6:	4313      	orrs	r3, r2
 8001da8:	07e0      	lsls	r0, r4, #31
 8001daa:	4318      	orrs	r0, r3
 8001dac:	0864      	lsrs	r4, r4, #1
 8001dae:	e634      	b.n	8001a1a <__aeabi_dmul+0x122>
 8001db0:	9b00      	ldr	r3, [sp, #0]
 8001db2:	46a2      	mov	sl, r4
 8001db4:	469b      	mov	fp, r3
 8001db6:	4681      	mov	r9, r0
 8001db8:	2480      	movs	r4, #128	@ 0x80
 8001dba:	4653      	mov	r3, sl
 8001dbc:	0324      	lsls	r4, r4, #12
 8001dbe:	431c      	orrs	r4, r3
 8001dc0:	0324      	lsls	r4, r4, #12
 8001dc2:	464a      	mov	r2, r9
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e80 <__aeabi_dmul+0x588>)
 8001dc6:	0b24      	lsrs	r4, r4, #12
 8001dc8:	e5ec      	b.n	80019a4 <__aeabi_dmul+0xac>
 8001dca:	f000 fccd 	bl	8002768 <__clzsi2>
 8001dce:	2315      	movs	r3, #21
 8001dd0:	469c      	mov	ip, r3
 8001dd2:	4484      	add	ip, r0
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	3220      	adds	r2, #32
 8001dda:	2b1c      	cmp	r3, #28
 8001ddc:	dc00      	bgt.n	8001de0 <__aeabi_dmul+0x4e8>
 8001dde:	e684      	b.n	8001aea <__aeabi_dmul+0x1f2>
 8001de0:	2300      	movs	r3, #0
 8001de2:	4699      	mov	r9, r3
 8001de4:	0023      	movs	r3, r4
 8001de6:	3808      	subs	r0, #8
 8001de8:	4083      	lsls	r3, r0
 8001dea:	469a      	mov	sl, r3
 8001dec:	e68e      	b.n	8001b0c <__aeabi_dmul+0x214>
 8001dee:	f000 fcbb 	bl	8002768 <__clzsi2>
 8001df2:	0002      	movs	r2, r0
 8001df4:	0003      	movs	r3, r0
 8001df6:	3215      	adds	r2, #21
 8001df8:	3320      	adds	r3, #32
 8001dfa:	2a1c      	cmp	r2, #28
 8001dfc:	dc00      	bgt.n	8001e00 <__aeabi_dmul+0x508>
 8001dfe:	e64e      	b.n	8001a9e <__aeabi_dmul+0x1a6>
 8001e00:	0002      	movs	r2, r0
 8001e02:	0034      	movs	r4, r6
 8001e04:	3a08      	subs	r2, #8
 8001e06:	2000      	movs	r0, #0
 8001e08:	4094      	lsls	r4, r2
 8001e0a:	e652      	b.n	8001ab2 <__aeabi_dmul+0x1ba>
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	e604      	b.n	8001a1a <__aeabi_dmul+0x122>
 8001e10:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <__aeabi_dmul+0x58c>)
 8001e12:	0021      	movs	r1, r4
 8001e14:	469c      	mov	ip, r3
 8001e16:	0003      	movs	r3, r0
 8001e18:	9d01      	ldr	r5, [sp, #4]
 8001e1a:	40d3      	lsrs	r3, r2
 8001e1c:	4465      	add	r5, ip
 8001e1e:	40a9      	lsls	r1, r5
 8001e20:	4319      	orrs	r1, r3
 8001e22:	0003      	movs	r3, r0
 8001e24:	40ab      	lsls	r3, r5
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	4183      	sbcs	r3, r0
 8001e2a:	4319      	orrs	r1, r3
 8001e2c:	0008      	movs	r0, r1
 8001e2e:	40d4      	lsrs	r4, r2
 8001e30:	074b      	lsls	r3, r1, #29
 8001e32:	d009      	beq.n	8001e48 <__aeabi_dmul+0x550>
 8001e34:	230f      	movs	r3, #15
 8001e36:	400b      	ands	r3, r1
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d005      	beq.n	8001e48 <__aeabi_dmul+0x550>
 8001e3c:	1d0b      	adds	r3, r1, #4
 8001e3e:	428b      	cmp	r3, r1
 8001e40:	4180      	sbcs	r0, r0
 8001e42:	4240      	negs	r0, r0
 8001e44:	1824      	adds	r4, r4, r0
 8001e46:	0018      	movs	r0, r3
 8001e48:	0223      	lsls	r3, r4, #8
 8001e4a:	d400      	bmi.n	8001e4e <__aeabi_dmul+0x556>
 8001e4c:	e6d6      	b.n	8001bfc <__aeabi_dmul+0x304>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	2400      	movs	r4, #0
 8001e52:	2200      	movs	r2, #0
 8001e54:	e5a6      	b.n	80019a4 <__aeabi_dmul+0xac>
 8001e56:	290f      	cmp	r1, #15
 8001e58:	d1aa      	bne.n	8001db0 <__aeabi_dmul+0x4b8>
 8001e5a:	2380      	movs	r3, #128	@ 0x80
 8001e5c:	4652      	mov	r2, sl
 8001e5e:	031b      	lsls	r3, r3, #12
 8001e60:	421a      	tst	r2, r3
 8001e62:	d0a9      	beq.n	8001db8 <__aeabi_dmul+0x4c0>
 8001e64:	421c      	tst	r4, r3
 8001e66:	d1a7      	bne.n	8001db8 <__aeabi_dmul+0x4c0>
 8001e68:	431c      	orrs	r4, r3
 8001e6a:	9b00      	ldr	r3, [sp, #0]
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	469b      	mov	fp, r3
 8001e70:	4b03      	ldr	r3, [pc, #12]	@ (8001e80 <__aeabi_dmul+0x588>)
 8001e72:	e597      	b.n	80019a4 <__aeabi_dmul+0xac>
 8001e74:	2400      	movs	r4, #0
 8001e76:	e6c1      	b.n	8001bfc <__aeabi_dmul+0x304>
 8001e78:	2400      	movs	r4, #0
 8001e7a:	4b01      	ldr	r3, [pc, #4]	@ (8001e80 <__aeabi_dmul+0x588>)
 8001e7c:	0022      	movs	r2, r4
 8001e7e:	e591      	b.n	80019a4 <__aeabi_dmul+0xac>
 8001e80:	000007ff 	.word	0x000007ff
 8001e84:	0000041e 	.word	0x0000041e

08001e88 <__aeabi_dsub>:
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	464e      	mov	r6, r9
 8001e8c:	4645      	mov	r5, r8
 8001e8e:	46de      	mov	lr, fp
 8001e90:	4657      	mov	r7, sl
 8001e92:	b5e0      	push	{r5, r6, r7, lr}
 8001e94:	b085      	sub	sp, #20
 8001e96:	9000      	str	r0, [sp, #0]
 8001e98:	9101      	str	r1, [sp, #4]
 8001e9a:	030c      	lsls	r4, r1, #12
 8001e9c:	004f      	lsls	r7, r1, #1
 8001e9e:	0fce      	lsrs	r6, r1, #31
 8001ea0:	0a61      	lsrs	r1, r4, #9
 8001ea2:	9c00      	ldr	r4, [sp, #0]
 8001ea4:	46b0      	mov	r8, r6
 8001ea6:	0f64      	lsrs	r4, r4, #29
 8001ea8:	430c      	orrs	r4, r1
 8001eaa:	9900      	ldr	r1, [sp, #0]
 8001eac:	0d7f      	lsrs	r7, r7, #21
 8001eae:	00c8      	lsls	r0, r1, #3
 8001eb0:	0011      	movs	r1, r2
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	031b      	lsls	r3, r3, #12
 8001eb6:	469c      	mov	ip, r3
 8001eb8:	9100      	str	r1, [sp, #0]
 8001eba:	9201      	str	r2, [sp, #4]
 8001ebc:	0051      	lsls	r1, r2, #1
 8001ebe:	0d4b      	lsrs	r3, r1, #21
 8001ec0:	4699      	mov	r9, r3
 8001ec2:	9b01      	ldr	r3, [sp, #4]
 8001ec4:	9d00      	ldr	r5, [sp, #0]
 8001ec6:	0fd9      	lsrs	r1, r3, #31
 8001ec8:	4663      	mov	r3, ip
 8001eca:	0f6a      	lsrs	r2, r5, #29
 8001ecc:	0a5b      	lsrs	r3, r3, #9
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	00ea      	lsls	r2, r5, #3
 8001ed2:	4694      	mov	ip, r2
 8001ed4:	4693      	mov	fp, r2
 8001ed6:	4ac1      	ldr	r2, [pc, #772]	@ (80021dc <__aeabi_dsub+0x354>)
 8001ed8:	9003      	str	r0, [sp, #12]
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	4591      	cmp	r9, r2
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x5a>
 8001ee0:	e0cd      	b.n	800207e <__aeabi_dsub+0x1f6>
 8001ee2:	2501      	movs	r5, #1
 8001ee4:	4069      	eors	r1, r5
 8001ee6:	464d      	mov	r5, r9
 8001ee8:	1b7d      	subs	r5, r7, r5
 8001eea:	46aa      	mov	sl, r5
 8001eec:	428e      	cmp	r6, r1
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dsub+0x6a>
 8001ef0:	e080      	b.n	8001ff4 <__aeabi_dsub+0x16c>
 8001ef2:	2d00      	cmp	r5, #0
 8001ef4:	dc00      	bgt.n	8001ef8 <__aeabi_dsub+0x70>
 8001ef6:	e335      	b.n	8002564 <__aeabi_dsub+0x6dc>
 8001ef8:	4649      	mov	r1, r9
 8001efa:	2900      	cmp	r1, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x78>
 8001efe:	e0df      	b.n	80020c0 <__aeabi_dsub+0x238>
 8001f00:	4297      	cmp	r7, r2
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x7e>
 8001f04:	e194      	b.n	8002230 <__aeabi_dsub+0x3a8>
 8001f06:	4652      	mov	r2, sl
 8001f08:	2501      	movs	r5, #1
 8001f0a:	2a38      	cmp	r2, #56	@ 0x38
 8001f0c:	dc19      	bgt.n	8001f42 <__aeabi_dsub+0xba>
 8001f0e:	2280      	movs	r2, #128	@ 0x80
 8001f10:	9b02      	ldr	r3, [sp, #8]
 8001f12:	0412      	lsls	r2, r2, #16
 8001f14:	4313      	orrs	r3, r2
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	4652      	mov	r2, sl
 8001f1a:	2a1f      	cmp	r2, #31
 8001f1c:	dd00      	ble.n	8001f20 <__aeabi_dsub+0x98>
 8001f1e:	e1e3      	b.n	80022e8 <__aeabi_dsub+0x460>
 8001f20:	4653      	mov	r3, sl
 8001f22:	2220      	movs	r2, #32
 8001f24:	4661      	mov	r1, ip
 8001f26:	9d02      	ldr	r5, [sp, #8]
 8001f28:	1ad2      	subs	r2, r2, r3
 8001f2a:	4095      	lsls	r5, r2
 8001f2c:	40d9      	lsrs	r1, r3
 8001f2e:	430d      	orrs	r5, r1
 8001f30:	4661      	mov	r1, ip
 8001f32:	4091      	lsls	r1, r2
 8001f34:	000a      	movs	r2, r1
 8001f36:	1e51      	subs	r1, r2, #1
 8001f38:	418a      	sbcs	r2, r1
 8001f3a:	4315      	orrs	r5, r2
 8001f3c:	9a02      	ldr	r2, [sp, #8]
 8001f3e:	40da      	lsrs	r2, r3
 8001f40:	1aa4      	subs	r4, r4, r2
 8001f42:	1b45      	subs	r5, r0, r5
 8001f44:	42a8      	cmp	r0, r5
 8001f46:	4180      	sbcs	r0, r0
 8001f48:	4240      	negs	r0, r0
 8001f4a:	1a24      	subs	r4, r4, r0
 8001f4c:	0223      	lsls	r3, r4, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0xca>
 8001f50:	e13d      	b.n	80021ce <__aeabi_dsub+0x346>
 8001f52:	0264      	lsls	r4, r4, #9
 8001f54:	0a64      	lsrs	r4, r4, #9
 8001f56:	2c00      	cmp	r4, #0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0xd4>
 8001f5a:	e147      	b.n	80021ec <__aeabi_dsub+0x364>
 8001f5c:	0020      	movs	r0, r4
 8001f5e:	f000 fc03 	bl	8002768 <__clzsi2>
 8001f62:	0003      	movs	r3, r0
 8001f64:	3b08      	subs	r3, #8
 8001f66:	2120      	movs	r1, #32
 8001f68:	0028      	movs	r0, r5
 8001f6a:	1aca      	subs	r2, r1, r3
 8001f6c:	40d0      	lsrs	r0, r2
 8001f6e:	409c      	lsls	r4, r3
 8001f70:	0002      	movs	r2, r0
 8001f72:	409d      	lsls	r5, r3
 8001f74:	4322      	orrs	r2, r4
 8001f76:	429f      	cmp	r7, r3
 8001f78:	dd00      	ble.n	8001f7c <__aeabi_dsub+0xf4>
 8001f7a:	e177      	b.n	800226c <__aeabi_dsub+0x3e4>
 8001f7c:	1bd8      	subs	r0, r3, r7
 8001f7e:	3001      	adds	r0, #1
 8001f80:	1a09      	subs	r1, r1, r0
 8001f82:	002c      	movs	r4, r5
 8001f84:	408d      	lsls	r5, r1
 8001f86:	40c4      	lsrs	r4, r0
 8001f88:	1e6b      	subs	r3, r5, #1
 8001f8a:	419d      	sbcs	r5, r3
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	40c2      	lsrs	r2, r0
 8001f90:	408b      	lsls	r3, r1
 8001f92:	4325      	orrs	r5, r4
 8001f94:	2700      	movs	r7, #0
 8001f96:	0014      	movs	r4, r2
 8001f98:	431d      	orrs	r5, r3
 8001f9a:	076b      	lsls	r3, r5, #29
 8001f9c:	d009      	beq.n	8001fb2 <__aeabi_dsub+0x12a>
 8001f9e:	230f      	movs	r3, #15
 8001fa0:	402b      	ands	r3, r5
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d005      	beq.n	8001fb2 <__aeabi_dsub+0x12a>
 8001fa6:	1d2b      	adds	r3, r5, #4
 8001fa8:	42ab      	cmp	r3, r5
 8001faa:	41ad      	sbcs	r5, r5
 8001fac:	426d      	negs	r5, r5
 8001fae:	1964      	adds	r4, r4, r5
 8001fb0:	001d      	movs	r5, r3
 8001fb2:	0223      	lsls	r3, r4, #8
 8001fb4:	d400      	bmi.n	8001fb8 <__aeabi_dsub+0x130>
 8001fb6:	e140      	b.n	800223a <__aeabi_dsub+0x3b2>
 8001fb8:	4a88      	ldr	r2, [pc, #544]	@ (80021dc <__aeabi_dsub+0x354>)
 8001fba:	3701      	adds	r7, #1
 8001fbc:	4297      	cmp	r7, r2
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x13a>
 8001fc0:	e101      	b.n	80021c6 <__aeabi_dsub+0x33e>
 8001fc2:	2601      	movs	r6, #1
 8001fc4:	4643      	mov	r3, r8
 8001fc6:	4986      	ldr	r1, [pc, #536]	@ (80021e0 <__aeabi_dsub+0x358>)
 8001fc8:	08ed      	lsrs	r5, r5, #3
 8001fca:	4021      	ands	r1, r4
 8001fcc:	074a      	lsls	r2, r1, #29
 8001fce:	432a      	orrs	r2, r5
 8001fd0:	057c      	lsls	r4, r7, #21
 8001fd2:	024d      	lsls	r5, r1, #9
 8001fd4:	0b2d      	lsrs	r5, r5, #12
 8001fd6:	0d64      	lsrs	r4, r4, #21
 8001fd8:	401e      	ands	r6, r3
 8001fda:	0524      	lsls	r4, r4, #20
 8001fdc:	432c      	orrs	r4, r5
 8001fde:	07f6      	lsls	r6, r6, #31
 8001fe0:	4334      	orrs	r4, r6
 8001fe2:	0010      	movs	r0, r2
 8001fe4:	0021      	movs	r1, r4
 8001fe6:	b005      	add	sp, #20
 8001fe8:	bcf0      	pop	{r4, r5, r6, r7}
 8001fea:	46bb      	mov	fp, r7
 8001fec:	46b2      	mov	sl, r6
 8001fee:	46a9      	mov	r9, r5
 8001ff0:	46a0      	mov	r8, r4
 8001ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff4:	2d00      	cmp	r5, #0
 8001ff6:	dc00      	bgt.n	8001ffa <__aeabi_dsub+0x172>
 8001ff8:	e2d0      	b.n	800259c <__aeabi_dsub+0x714>
 8001ffa:	4649      	mov	r1, r9
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d000      	beq.n	8002002 <__aeabi_dsub+0x17a>
 8002000:	e0d4      	b.n	80021ac <__aeabi_dsub+0x324>
 8002002:	4661      	mov	r1, ip
 8002004:	9b02      	ldr	r3, [sp, #8]
 8002006:	4319      	orrs	r1, r3
 8002008:	d100      	bne.n	800200c <__aeabi_dsub+0x184>
 800200a:	e12b      	b.n	8002264 <__aeabi_dsub+0x3dc>
 800200c:	1e69      	subs	r1, r5, #1
 800200e:	2d01      	cmp	r5, #1
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x18c>
 8002012:	e1d9      	b.n	80023c8 <__aeabi_dsub+0x540>
 8002014:	4295      	cmp	r5, r2
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x192>
 8002018:	e10a      	b.n	8002230 <__aeabi_dsub+0x3a8>
 800201a:	2501      	movs	r5, #1
 800201c:	2938      	cmp	r1, #56	@ 0x38
 800201e:	dc17      	bgt.n	8002050 <__aeabi_dsub+0x1c8>
 8002020:	468a      	mov	sl, r1
 8002022:	4653      	mov	r3, sl
 8002024:	2b1f      	cmp	r3, #31
 8002026:	dd00      	ble.n	800202a <__aeabi_dsub+0x1a2>
 8002028:	e1e7      	b.n	80023fa <__aeabi_dsub+0x572>
 800202a:	2220      	movs	r2, #32
 800202c:	1ad2      	subs	r2, r2, r3
 800202e:	9b02      	ldr	r3, [sp, #8]
 8002030:	4661      	mov	r1, ip
 8002032:	4093      	lsls	r3, r2
 8002034:	001d      	movs	r5, r3
 8002036:	4653      	mov	r3, sl
 8002038:	40d9      	lsrs	r1, r3
 800203a:	4663      	mov	r3, ip
 800203c:	4093      	lsls	r3, r2
 800203e:	001a      	movs	r2, r3
 8002040:	430d      	orrs	r5, r1
 8002042:	1e51      	subs	r1, r2, #1
 8002044:	418a      	sbcs	r2, r1
 8002046:	4653      	mov	r3, sl
 8002048:	4315      	orrs	r5, r2
 800204a:	9a02      	ldr	r2, [sp, #8]
 800204c:	40da      	lsrs	r2, r3
 800204e:	18a4      	adds	r4, r4, r2
 8002050:	182d      	adds	r5, r5, r0
 8002052:	4285      	cmp	r5, r0
 8002054:	4180      	sbcs	r0, r0
 8002056:	4240      	negs	r0, r0
 8002058:	1824      	adds	r4, r4, r0
 800205a:	0223      	lsls	r3, r4, #8
 800205c:	d400      	bmi.n	8002060 <__aeabi_dsub+0x1d8>
 800205e:	e0b6      	b.n	80021ce <__aeabi_dsub+0x346>
 8002060:	4b5e      	ldr	r3, [pc, #376]	@ (80021dc <__aeabi_dsub+0x354>)
 8002062:	3701      	adds	r7, #1
 8002064:	429f      	cmp	r7, r3
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x1e2>
 8002068:	e0ad      	b.n	80021c6 <__aeabi_dsub+0x33e>
 800206a:	2101      	movs	r1, #1
 800206c:	4b5c      	ldr	r3, [pc, #368]	@ (80021e0 <__aeabi_dsub+0x358>)
 800206e:	086a      	lsrs	r2, r5, #1
 8002070:	401c      	ands	r4, r3
 8002072:	4029      	ands	r1, r5
 8002074:	430a      	orrs	r2, r1
 8002076:	07e5      	lsls	r5, r4, #31
 8002078:	4315      	orrs	r5, r2
 800207a:	0864      	lsrs	r4, r4, #1
 800207c:	e78d      	b.n	8001f9a <__aeabi_dsub+0x112>
 800207e:	4a59      	ldr	r2, [pc, #356]	@ (80021e4 <__aeabi_dsub+0x35c>)
 8002080:	9b02      	ldr	r3, [sp, #8]
 8002082:	4692      	mov	sl, r2
 8002084:	4662      	mov	r2, ip
 8002086:	44ba      	add	sl, r7
 8002088:	431a      	orrs	r2, r3
 800208a:	d02c      	beq.n	80020e6 <__aeabi_dsub+0x25e>
 800208c:	428e      	cmp	r6, r1
 800208e:	d02e      	beq.n	80020ee <__aeabi_dsub+0x266>
 8002090:	4652      	mov	r2, sl
 8002092:	2a00      	cmp	r2, #0
 8002094:	d060      	beq.n	8002158 <__aeabi_dsub+0x2d0>
 8002096:	2f00      	cmp	r7, #0
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x214>
 800209a:	e0db      	b.n	8002254 <__aeabi_dsub+0x3cc>
 800209c:	4663      	mov	r3, ip
 800209e:	000e      	movs	r6, r1
 80020a0:	9c02      	ldr	r4, [sp, #8]
 80020a2:	08d8      	lsrs	r0, r3, #3
 80020a4:	0762      	lsls	r2, r4, #29
 80020a6:	4302      	orrs	r2, r0
 80020a8:	08e4      	lsrs	r4, r4, #3
 80020aa:	0013      	movs	r3, r2
 80020ac:	4323      	orrs	r3, r4
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x22a>
 80020b0:	e254      	b.n	800255c <__aeabi_dsub+0x6d4>
 80020b2:	2580      	movs	r5, #128	@ 0x80
 80020b4:	032d      	lsls	r5, r5, #12
 80020b6:	4325      	orrs	r5, r4
 80020b8:	032d      	lsls	r5, r5, #12
 80020ba:	4c48      	ldr	r4, [pc, #288]	@ (80021dc <__aeabi_dsub+0x354>)
 80020bc:	0b2d      	lsrs	r5, r5, #12
 80020be:	e78c      	b.n	8001fda <__aeabi_dsub+0x152>
 80020c0:	4661      	mov	r1, ip
 80020c2:	9b02      	ldr	r3, [sp, #8]
 80020c4:	4319      	orrs	r1, r3
 80020c6:	d100      	bne.n	80020ca <__aeabi_dsub+0x242>
 80020c8:	e0cc      	b.n	8002264 <__aeabi_dsub+0x3dc>
 80020ca:	0029      	movs	r1, r5
 80020cc:	3901      	subs	r1, #1
 80020ce:	2d01      	cmp	r5, #1
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x24c>
 80020d2:	e188      	b.n	80023e6 <__aeabi_dsub+0x55e>
 80020d4:	4295      	cmp	r5, r2
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x252>
 80020d8:	e0aa      	b.n	8002230 <__aeabi_dsub+0x3a8>
 80020da:	2501      	movs	r5, #1
 80020dc:	2938      	cmp	r1, #56	@ 0x38
 80020de:	dd00      	ble.n	80020e2 <__aeabi_dsub+0x25a>
 80020e0:	e72f      	b.n	8001f42 <__aeabi_dsub+0xba>
 80020e2:	468a      	mov	sl, r1
 80020e4:	e718      	b.n	8001f18 <__aeabi_dsub+0x90>
 80020e6:	2201      	movs	r2, #1
 80020e8:	4051      	eors	r1, r2
 80020ea:	428e      	cmp	r6, r1
 80020ec:	d1d0      	bne.n	8002090 <__aeabi_dsub+0x208>
 80020ee:	4653      	mov	r3, sl
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x26e>
 80020f4:	e0be      	b.n	8002274 <__aeabi_dsub+0x3ec>
 80020f6:	2f00      	cmp	r7, #0
 80020f8:	d000      	beq.n	80020fc <__aeabi_dsub+0x274>
 80020fa:	e138      	b.n	800236e <__aeabi_dsub+0x4e6>
 80020fc:	46ca      	mov	sl, r9
 80020fe:	0022      	movs	r2, r4
 8002100:	4302      	orrs	r2, r0
 8002102:	d100      	bne.n	8002106 <__aeabi_dsub+0x27e>
 8002104:	e1e2      	b.n	80024cc <__aeabi_dsub+0x644>
 8002106:	4653      	mov	r3, sl
 8002108:	1e59      	subs	r1, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d100      	bne.n	8002110 <__aeabi_dsub+0x288>
 800210e:	e20d      	b.n	800252c <__aeabi_dsub+0x6a4>
 8002110:	4a32      	ldr	r2, [pc, #200]	@ (80021dc <__aeabi_dsub+0x354>)
 8002112:	4592      	cmp	sl, r2
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x290>
 8002116:	e1d2      	b.n	80024be <__aeabi_dsub+0x636>
 8002118:	2701      	movs	r7, #1
 800211a:	2938      	cmp	r1, #56	@ 0x38
 800211c:	dc13      	bgt.n	8002146 <__aeabi_dsub+0x2be>
 800211e:	291f      	cmp	r1, #31
 8002120:	dd00      	ble.n	8002124 <__aeabi_dsub+0x29c>
 8002122:	e1ee      	b.n	8002502 <__aeabi_dsub+0x67a>
 8002124:	2220      	movs	r2, #32
 8002126:	9b02      	ldr	r3, [sp, #8]
 8002128:	1a52      	subs	r2, r2, r1
 800212a:	0025      	movs	r5, r4
 800212c:	0007      	movs	r7, r0
 800212e:	469a      	mov	sl, r3
 8002130:	40cc      	lsrs	r4, r1
 8002132:	4090      	lsls	r0, r2
 8002134:	4095      	lsls	r5, r2
 8002136:	40cf      	lsrs	r7, r1
 8002138:	44a2      	add	sl, r4
 800213a:	1e42      	subs	r2, r0, #1
 800213c:	4190      	sbcs	r0, r2
 800213e:	4653      	mov	r3, sl
 8002140:	432f      	orrs	r7, r5
 8002142:	4307      	orrs	r7, r0
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	003d      	movs	r5, r7
 8002148:	4465      	add	r5, ip
 800214a:	4565      	cmp	r5, ip
 800214c:	4192      	sbcs	r2, r2
 800214e:	9b02      	ldr	r3, [sp, #8]
 8002150:	4252      	negs	r2, r2
 8002152:	464f      	mov	r7, r9
 8002154:	18d4      	adds	r4, r2, r3
 8002156:	e780      	b.n	800205a <__aeabi_dsub+0x1d2>
 8002158:	4a23      	ldr	r2, [pc, #140]	@ (80021e8 <__aeabi_dsub+0x360>)
 800215a:	1c7d      	adds	r5, r7, #1
 800215c:	4215      	tst	r5, r2
 800215e:	d000      	beq.n	8002162 <__aeabi_dsub+0x2da>
 8002160:	e0aa      	b.n	80022b8 <__aeabi_dsub+0x430>
 8002162:	4662      	mov	r2, ip
 8002164:	0025      	movs	r5, r4
 8002166:	9b02      	ldr	r3, [sp, #8]
 8002168:	4305      	orrs	r5, r0
 800216a:	431a      	orrs	r2, r3
 800216c:	2f00      	cmp	r7, #0
 800216e:	d000      	beq.n	8002172 <__aeabi_dsub+0x2ea>
 8002170:	e0f5      	b.n	800235e <__aeabi_dsub+0x4d6>
 8002172:	2d00      	cmp	r5, #0
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x2f0>
 8002176:	e16b      	b.n	8002450 <__aeabi_dsub+0x5c8>
 8002178:	2a00      	cmp	r2, #0
 800217a:	d100      	bne.n	800217e <__aeabi_dsub+0x2f6>
 800217c:	e152      	b.n	8002424 <__aeabi_dsub+0x59c>
 800217e:	4663      	mov	r3, ip
 8002180:	1ac5      	subs	r5, r0, r3
 8002182:	9b02      	ldr	r3, [sp, #8]
 8002184:	1ae2      	subs	r2, r4, r3
 8002186:	42a8      	cmp	r0, r5
 8002188:	419b      	sbcs	r3, r3
 800218a:	425b      	negs	r3, r3
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	021a      	lsls	r2, r3, #8
 8002190:	d400      	bmi.n	8002194 <__aeabi_dsub+0x30c>
 8002192:	e1d5      	b.n	8002540 <__aeabi_dsub+0x6b8>
 8002194:	4663      	mov	r3, ip
 8002196:	1a1d      	subs	r5, r3, r0
 8002198:	45ac      	cmp	ip, r5
 800219a:	4192      	sbcs	r2, r2
 800219c:	2601      	movs	r6, #1
 800219e:	9b02      	ldr	r3, [sp, #8]
 80021a0:	4252      	negs	r2, r2
 80021a2:	1b1c      	subs	r4, r3, r4
 80021a4:	4688      	mov	r8, r1
 80021a6:	1aa4      	subs	r4, r4, r2
 80021a8:	400e      	ands	r6, r1
 80021aa:	e6f6      	b.n	8001f9a <__aeabi_dsub+0x112>
 80021ac:	4297      	cmp	r7, r2
 80021ae:	d03f      	beq.n	8002230 <__aeabi_dsub+0x3a8>
 80021b0:	4652      	mov	r2, sl
 80021b2:	2501      	movs	r5, #1
 80021b4:	2a38      	cmp	r2, #56	@ 0x38
 80021b6:	dd00      	ble.n	80021ba <__aeabi_dsub+0x332>
 80021b8:	e74a      	b.n	8002050 <__aeabi_dsub+0x1c8>
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	9b02      	ldr	r3, [sp, #8]
 80021be:	0412      	lsls	r2, r2, #16
 80021c0:	4313      	orrs	r3, r2
 80021c2:	9302      	str	r3, [sp, #8]
 80021c4:	e72d      	b.n	8002022 <__aeabi_dsub+0x19a>
 80021c6:	003c      	movs	r4, r7
 80021c8:	2500      	movs	r5, #0
 80021ca:	2200      	movs	r2, #0
 80021cc:	e705      	b.n	8001fda <__aeabi_dsub+0x152>
 80021ce:	2307      	movs	r3, #7
 80021d0:	402b      	ands	r3, r5
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d000      	beq.n	80021d8 <__aeabi_dsub+0x350>
 80021d6:	e6e2      	b.n	8001f9e <__aeabi_dsub+0x116>
 80021d8:	e06b      	b.n	80022b2 <__aeabi_dsub+0x42a>
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	000007ff 	.word	0x000007ff
 80021e0:	ff7fffff 	.word	0xff7fffff
 80021e4:	fffff801 	.word	0xfffff801
 80021e8:	000007fe 	.word	0x000007fe
 80021ec:	0028      	movs	r0, r5
 80021ee:	f000 fabb 	bl	8002768 <__clzsi2>
 80021f2:	0003      	movs	r3, r0
 80021f4:	3318      	adds	r3, #24
 80021f6:	2b1f      	cmp	r3, #31
 80021f8:	dc00      	bgt.n	80021fc <__aeabi_dsub+0x374>
 80021fa:	e6b4      	b.n	8001f66 <__aeabi_dsub+0xde>
 80021fc:	002a      	movs	r2, r5
 80021fe:	3808      	subs	r0, #8
 8002200:	4082      	lsls	r2, r0
 8002202:	429f      	cmp	r7, r3
 8002204:	dd00      	ble.n	8002208 <__aeabi_dsub+0x380>
 8002206:	e0b9      	b.n	800237c <__aeabi_dsub+0x4f4>
 8002208:	1bdb      	subs	r3, r3, r7
 800220a:	1c58      	adds	r0, r3, #1
 800220c:	281f      	cmp	r0, #31
 800220e:	dc00      	bgt.n	8002212 <__aeabi_dsub+0x38a>
 8002210:	e1a0      	b.n	8002554 <__aeabi_dsub+0x6cc>
 8002212:	0015      	movs	r5, r2
 8002214:	3b1f      	subs	r3, #31
 8002216:	40dd      	lsrs	r5, r3
 8002218:	2820      	cmp	r0, #32
 800221a:	d005      	beq.n	8002228 <__aeabi_dsub+0x3a0>
 800221c:	2340      	movs	r3, #64	@ 0x40
 800221e:	1a1b      	subs	r3, r3, r0
 8002220:	409a      	lsls	r2, r3
 8002222:	1e53      	subs	r3, r2, #1
 8002224:	419a      	sbcs	r2, r3
 8002226:	4315      	orrs	r5, r2
 8002228:	2307      	movs	r3, #7
 800222a:	2700      	movs	r7, #0
 800222c:	402b      	ands	r3, r5
 800222e:	e7d0      	b.n	80021d2 <__aeabi_dsub+0x34a>
 8002230:	08c0      	lsrs	r0, r0, #3
 8002232:	0762      	lsls	r2, r4, #29
 8002234:	4302      	orrs	r2, r0
 8002236:	08e4      	lsrs	r4, r4, #3
 8002238:	e737      	b.n	80020aa <__aeabi_dsub+0x222>
 800223a:	08ea      	lsrs	r2, r5, #3
 800223c:	0763      	lsls	r3, r4, #29
 800223e:	431a      	orrs	r2, r3
 8002240:	4bd3      	ldr	r3, [pc, #844]	@ (8002590 <__aeabi_dsub+0x708>)
 8002242:	08e4      	lsrs	r4, r4, #3
 8002244:	429f      	cmp	r7, r3
 8002246:	d100      	bne.n	800224a <__aeabi_dsub+0x3c2>
 8002248:	e72f      	b.n	80020aa <__aeabi_dsub+0x222>
 800224a:	0324      	lsls	r4, r4, #12
 800224c:	0b25      	lsrs	r5, r4, #12
 800224e:	057c      	lsls	r4, r7, #21
 8002250:	0d64      	lsrs	r4, r4, #21
 8002252:	e6c2      	b.n	8001fda <__aeabi_dsub+0x152>
 8002254:	46ca      	mov	sl, r9
 8002256:	0022      	movs	r2, r4
 8002258:	4302      	orrs	r2, r0
 800225a:	d158      	bne.n	800230e <__aeabi_dsub+0x486>
 800225c:	4663      	mov	r3, ip
 800225e:	000e      	movs	r6, r1
 8002260:	9c02      	ldr	r4, [sp, #8]
 8002262:	9303      	str	r3, [sp, #12]
 8002264:	9b03      	ldr	r3, [sp, #12]
 8002266:	4657      	mov	r7, sl
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	e7e7      	b.n	800223c <__aeabi_dsub+0x3b4>
 800226c:	4cc9      	ldr	r4, [pc, #804]	@ (8002594 <__aeabi_dsub+0x70c>)
 800226e:	1aff      	subs	r7, r7, r3
 8002270:	4014      	ands	r4, r2
 8002272:	e692      	b.n	8001f9a <__aeabi_dsub+0x112>
 8002274:	4dc8      	ldr	r5, [pc, #800]	@ (8002598 <__aeabi_dsub+0x710>)
 8002276:	1c7a      	adds	r2, r7, #1
 8002278:	422a      	tst	r2, r5
 800227a:	d000      	beq.n	800227e <__aeabi_dsub+0x3f6>
 800227c:	e084      	b.n	8002388 <__aeabi_dsub+0x500>
 800227e:	0022      	movs	r2, r4
 8002280:	4302      	orrs	r2, r0
 8002282:	2f00      	cmp	r7, #0
 8002284:	d000      	beq.n	8002288 <__aeabi_dsub+0x400>
 8002286:	e0ef      	b.n	8002468 <__aeabi_dsub+0x5e0>
 8002288:	2a00      	cmp	r2, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x406>
 800228c:	e0e5      	b.n	800245a <__aeabi_dsub+0x5d2>
 800228e:	4662      	mov	r2, ip
 8002290:	9902      	ldr	r1, [sp, #8]
 8002292:	430a      	orrs	r2, r1
 8002294:	d100      	bne.n	8002298 <__aeabi_dsub+0x410>
 8002296:	e0c5      	b.n	8002424 <__aeabi_dsub+0x59c>
 8002298:	4663      	mov	r3, ip
 800229a:	18c5      	adds	r5, r0, r3
 800229c:	468c      	mov	ip, r1
 800229e:	4285      	cmp	r5, r0
 80022a0:	4180      	sbcs	r0, r0
 80022a2:	4464      	add	r4, ip
 80022a4:	4240      	negs	r0, r0
 80022a6:	1824      	adds	r4, r4, r0
 80022a8:	0223      	lsls	r3, r4, #8
 80022aa:	d502      	bpl.n	80022b2 <__aeabi_dsub+0x42a>
 80022ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002594 <__aeabi_dsub+0x70c>)
 80022ae:	3701      	adds	r7, #1
 80022b0:	401c      	ands	r4, r3
 80022b2:	46ba      	mov	sl, r7
 80022b4:	9503      	str	r5, [sp, #12]
 80022b6:	e7d5      	b.n	8002264 <__aeabi_dsub+0x3dc>
 80022b8:	4662      	mov	r2, ip
 80022ba:	1a85      	subs	r5, r0, r2
 80022bc:	42a8      	cmp	r0, r5
 80022be:	4192      	sbcs	r2, r2
 80022c0:	4252      	negs	r2, r2
 80022c2:	4691      	mov	r9, r2
 80022c4:	9b02      	ldr	r3, [sp, #8]
 80022c6:	1ae3      	subs	r3, r4, r3
 80022c8:	001a      	movs	r2, r3
 80022ca:	464b      	mov	r3, r9
 80022cc:	1ad2      	subs	r2, r2, r3
 80022ce:	0013      	movs	r3, r2
 80022d0:	4691      	mov	r9, r2
 80022d2:	021a      	lsls	r2, r3, #8
 80022d4:	d46c      	bmi.n	80023b0 <__aeabi_dsub+0x528>
 80022d6:	464a      	mov	r2, r9
 80022d8:	464c      	mov	r4, r9
 80022da:	432a      	orrs	r2, r5
 80022dc:	d000      	beq.n	80022e0 <__aeabi_dsub+0x458>
 80022de:	e63a      	b.n	8001f56 <__aeabi_dsub+0xce>
 80022e0:	2600      	movs	r6, #0
 80022e2:	2400      	movs	r4, #0
 80022e4:	2500      	movs	r5, #0
 80022e6:	e678      	b.n	8001fda <__aeabi_dsub+0x152>
 80022e8:	9902      	ldr	r1, [sp, #8]
 80022ea:	4653      	mov	r3, sl
 80022ec:	000d      	movs	r5, r1
 80022ee:	3a20      	subs	r2, #32
 80022f0:	40d5      	lsrs	r5, r2
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d006      	beq.n	8002304 <__aeabi_dsub+0x47c>
 80022f6:	2240      	movs	r2, #64	@ 0x40
 80022f8:	1ad2      	subs	r2, r2, r3
 80022fa:	000b      	movs	r3, r1
 80022fc:	4093      	lsls	r3, r2
 80022fe:	4662      	mov	r2, ip
 8002300:	431a      	orrs	r2, r3
 8002302:	4693      	mov	fp, r2
 8002304:	465b      	mov	r3, fp
 8002306:	1e5a      	subs	r2, r3, #1
 8002308:	4193      	sbcs	r3, r2
 800230a:	431d      	orrs	r5, r3
 800230c:	e619      	b.n	8001f42 <__aeabi_dsub+0xba>
 800230e:	4653      	mov	r3, sl
 8002310:	1e5a      	subs	r2, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d100      	bne.n	8002318 <__aeabi_dsub+0x490>
 8002316:	e0c6      	b.n	80024a6 <__aeabi_dsub+0x61e>
 8002318:	4e9d      	ldr	r6, [pc, #628]	@ (8002590 <__aeabi_dsub+0x708>)
 800231a:	45b2      	cmp	sl, r6
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x498>
 800231e:	e6bd      	b.n	800209c <__aeabi_dsub+0x214>
 8002320:	4688      	mov	r8, r1
 8002322:	000e      	movs	r6, r1
 8002324:	2501      	movs	r5, #1
 8002326:	2a38      	cmp	r2, #56	@ 0x38
 8002328:	dc10      	bgt.n	800234c <__aeabi_dsub+0x4c4>
 800232a:	2a1f      	cmp	r2, #31
 800232c:	dc7f      	bgt.n	800242e <__aeabi_dsub+0x5a6>
 800232e:	2120      	movs	r1, #32
 8002330:	0025      	movs	r5, r4
 8002332:	1a89      	subs	r1, r1, r2
 8002334:	0007      	movs	r7, r0
 8002336:	4088      	lsls	r0, r1
 8002338:	408d      	lsls	r5, r1
 800233a:	40d7      	lsrs	r7, r2
 800233c:	40d4      	lsrs	r4, r2
 800233e:	1e41      	subs	r1, r0, #1
 8002340:	4188      	sbcs	r0, r1
 8002342:	9b02      	ldr	r3, [sp, #8]
 8002344:	433d      	orrs	r5, r7
 8002346:	1b1b      	subs	r3, r3, r4
 8002348:	4305      	orrs	r5, r0
 800234a:	9302      	str	r3, [sp, #8]
 800234c:	4662      	mov	r2, ip
 800234e:	1b55      	subs	r5, r2, r5
 8002350:	45ac      	cmp	ip, r5
 8002352:	4192      	sbcs	r2, r2
 8002354:	9b02      	ldr	r3, [sp, #8]
 8002356:	4252      	negs	r2, r2
 8002358:	464f      	mov	r7, r9
 800235a:	1a9c      	subs	r4, r3, r2
 800235c:	e5f6      	b.n	8001f4c <__aeabi_dsub+0xc4>
 800235e:	2d00      	cmp	r5, #0
 8002360:	d000      	beq.n	8002364 <__aeabi_dsub+0x4dc>
 8002362:	e0b7      	b.n	80024d4 <__aeabi_dsub+0x64c>
 8002364:	2a00      	cmp	r2, #0
 8002366:	d100      	bne.n	800236a <__aeabi_dsub+0x4e2>
 8002368:	e0f0      	b.n	800254c <__aeabi_dsub+0x6c4>
 800236a:	2601      	movs	r6, #1
 800236c:	400e      	ands	r6, r1
 800236e:	4663      	mov	r3, ip
 8002370:	9802      	ldr	r0, [sp, #8]
 8002372:	08d9      	lsrs	r1, r3, #3
 8002374:	0742      	lsls	r2, r0, #29
 8002376:	430a      	orrs	r2, r1
 8002378:	08c4      	lsrs	r4, r0, #3
 800237a:	e696      	b.n	80020aa <__aeabi_dsub+0x222>
 800237c:	4c85      	ldr	r4, [pc, #532]	@ (8002594 <__aeabi_dsub+0x70c>)
 800237e:	1aff      	subs	r7, r7, r3
 8002380:	4014      	ands	r4, r2
 8002382:	0762      	lsls	r2, r4, #29
 8002384:	08e4      	lsrs	r4, r4, #3
 8002386:	e760      	b.n	800224a <__aeabi_dsub+0x3c2>
 8002388:	4981      	ldr	r1, [pc, #516]	@ (8002590 <__aeabi_dsub+0x708>)
 800238a:	428a      	cmp	r2, r1
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x508>
 800238e:	e0c9      	b.n	8002524 <__aeabi_dsub+0x69c>
 8002390:	4663      	mov	r3, ip
 8002392:	18c1      	adds	r1, r0, r3
 8002394:	4281      	cmp	r1, r0
 8002396:	4180      	sbcs	r0, r0
 8002398:	9b02      	ldr	r3, [sp, #8]
 800239a:	4240      	negs	r0, r0
 800239c:	18e3      	adds	r3, r4, r3
 800239e:	181b      	adds	r3, r3, r0
 80023a0:	07dd      	lsls	r5, r3, #31
 80023a2:	085c      	lsrs	r4, r3, #1
 80023a4:	2307      	movs	r3, #7
 80023a6:	0849      	lsrs	r1, r1, #1
 80023a8:	430d      	orrs	r5, r1
 80023aa:	0017      	movs	r7, r2
 80023ac:	402b      	ands	r3, r5
 80023ae:	e710      	b.n	80021d2 <__aeabi_dsub+0x34a>
 80023b0:	4663      	mov	r3, ip
 80023b2:	1a1d      	subs	r5, r3, r0
 80023b4:	45ac      	cmp	ip, r5
 80023b6:	4192      	sbcs	r2, r2
 80023b8:	2601      	movs	r6, #1
 80023ba:	9b02      	ldr	r3, [sp, #8]
 80023bc:	4252      	negs	r2, r2
 80023be:	1b1c      	subs	r4, r3, r4
 80023c0:	4688      	mov	r8, r1
 80023c2:	1aa4      	subs	r4, r4, r2
 80023c4:	400e      	ands	r6, r1
 80023c6:	e5c6      	b.n	8001f56 <__aeabi_dsub+0xce>
 80023c8:	4663      	mov	r3, ip
 80023ca:	18c5      	adds	r5, r0, r3
 80023cc:	9b02      	ldr	r3, [sp, #8]
 80023ce:	4285      	cmp	r5, r0
 80023d0:	4180      	sbcs	r0, r0
 80023d2:	469c      	mov	ip, r3
 80023d4:	4240      	negs	r0, r0
 80023d6:	4464      	add	r4, ip
 80023d8:	1824      	adds	r4, r4, r0
 80023da:	2701      	movs	r7, #1
 80023dc:	0223      	lsls	r3, r4, #8
 80023de:	d400      	bmi.n	80023e2 <__aeabi_dsub+0x55a>
 80023e0:	e6f5      	b.n	80021ce <__aeabi_dsub+0x346>
 80023e2:	2702      	movs	r7, #2
 80023e4:	e641      	b.n	800206a <__aeabi_dsub+0x1e2>
 80023e6:	4663      	mov	r3, ip
 80023e8:	1ac5      	subs	r5, r0, r3
 80023ea:	42a8      	cmp	r0, r5
 80023ec:	4180      	sbcs	r0, r0
 80023ee:	9b02      	ldr	r3, [sp, #8]
 80023f0:	4240      	negs	r0, r0
 80023f2:	1ae4      	subs	r4, r4, r3
 80023f4:	2701      	movs	r7, #1
 80023f6:	1a24      	subs	r4, r4, r0
 80023f8:	e5a8      	b.n	8001f4c <__aeabi_dsub+0xc4>
 80023fa:	9d02      	ldr	r5, [sp, #8]
 80023fc:	4652      	mov	r2, sl
 80023fe:	002b      	movs	r3, r5
 8002400:	3a20      	subs	r2, #32
 8002402:	40d3      	lsrs	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	4653      	mov	r3, sl
 8002408:	2b20      	cmp	r3, #32
 800240a:	d006      	beq.n	800241a <__aeabi_dsub+0x592>
 800240c:	2240      	movs	r2, #64	@ 0x40
 800240e:	1ad2      	subs	r2, r2, r3
 8002410:	002b      	movs	r3, r5
 8002412:	4093      	lsls	r3, r2
 8002414:	4662      	mov	r2, ip
 8002416:	431a      	orrs	r2, r3
 8002418:	4693      	mov	fp, r2
 800241a:	465d      	mov	r5, fp
 800241c:	1e6b      	subs	r3, r5, #1
 800241e:	419d      	sbcs	r5, r3
 8002420:	430d      	orrs	r5, r1
 8002422:	e615      	b.n	8002050 <__aeabi_dsub+0x1c8>
 8002424:	0762      	lsls	r2, r4, #29
 8002426:	08c0      	lsrs	r0, r0, #3
 8002428:	4302      	orrs	r2, r0
 800242a:	08e4      	lsrs	r4, r4, #3
 800242c:	e70d      	b.n	800224a <__aeabi_dsub+0x3c2>
 800242e:	0011      	movs	r1, r2
 8002430:	0027      	movs	r7, r4
 8002432:	3920      	subs	r1, #32
 8002434:	40cf      	lsrs	r7, r1
 8002436:	2a20      	cmp	r2, #32
 8002438:	d005      	beq.n	8002446 <__aeabi_dsub+0x5be>
 800243a:	2140      	movs	r1, #64	@ 0x40
 800243c:	1a8a      	subs	r2, r1, r2
 800243e:	4094      	lsls	r4, r2
 8002440:	0025      	movs	r5, r4
 8002442:	4305      	orrs	r5, r0
 8002444:	9503      	str	r5, [sp, #12]
 8002446:	9d03      	ldr	r5, [sp, #12]
 8002448:	1e6a      	subs	r2, r5, #1
 800244a:	4195      	sbcs	r5, r2
 800244c:	433d      	orrs	r5, r7
 800244e:	e77d      	b.n	800234c <__aeabi_dsub+0x4c4>
 8002450:	2a00      	cmp	r2, #0
 8002452:	d100      	bne.n	8002456 <__aeabi_dsub+0x5ce>
 8002454:	e744      	b.n	80022e0 <__aeabi_dsub+0x458>
 8002456:	2601      	movs	r6, #1
 8002458:	400e      	ands	r6, r1
 800245a:	4663      	mov	r3, ip
 800245c:	08d9      	lsrs	r1, r3, #3
 800245e:	9b02      	ldr	r3, [sp, #8]
 8002460:	075a      	lsls	r2, r3, #29
 8002462:	430a      	orrs	r2, r1
 8002464:	08dc      	lsrs	r4, r3, #3
 8002466:	e6f0      	b.n	800224a <__aeabi_dsub+0x3c2>
 8002468:	2a00      	cmp	r2, #0
 800246a:	d028      	beq.n	80024be <__aeabi_dsub+0x636>
 800246c:	4662      	mov	r2, ip
 800246e:	9f02      	ldr	r7, [sp, #8]
 8002470:	08c0      	lsrs	r0, r0, #3
 8002472:	433a      	orrs	r2, r7
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x5f0>
 8002476:	e6dc      	b.n	8002232 <__aeabi_dsub+0x3aa>
 8002478:	0762      	lsls	r2, r4, #29
 800247a:	4310      	orrs	r0, r2
 800247c:	2280      	movs	r2, #128	@ 0x80
 800247e:	08e4      	lsrs	r4, r4, #3
 8002480:	0312      	lsls	r2, r2, #12
 8002482:	4214      	tst	r4, r2
 8002484:	d009      	beq.n	800249a <__aeabi_dsub+0x612>
 8002486:	08fd      	lsrs	r5, r7, #3
 8002488:	4215      	tst	r5, r2
 800248a:	d106      	bne.n	800249a <__aeabi_dsub+0x612>
 800248c:	4663      	mov	r3, ip
 800248e:	2601      	movs	r6, #1
 8002490:	002c      	movs	r4, r5
 8002492:	08d8      	lsrs	r0, r3, #3
 8002494:	077b      	lsls	r3, r7, #29
 8002496:	4318      	orrs	r0, r3
 8002498:	400e      	ands	r6, r1
 800249a:	0f42      	lsrs	r2, r0, #29
 800249c:	00c0      	lsls	r0, r0, #3
 800249e:	08c0      	lsrs	r0, r0, #3
 80024a0:	0752      	lsls	r2, r2, #29
 80024a2:	4302      	orrs	r2, r0
 80024a4:	e601      	b.n	80020aa <__aeabi_dsub+0x222>
 80024a6:	4663      	mov	r3, ip
 80024a8:	1a1d      	subs	r5, r3, r0
 80024aa:	45ac      	cmp	ip, r5
 80024ac:	4192      	sbcs	r2, r2
 80024ae:	9b02      	ldr	r3, [sp, #8]
 80024b0:	4252      	negs	r2, r2
 80024b2:	1b1c      	subs	r4, r3, r4
 80024b4:	000e      	movs	r6, r1
 80024b6:	4688      	mov	r8, r1
 80024b8:	2701      	movs	r7, #1
 80024ba:	1aa4      	subs	r4, r4, r2
 80024bc:	e546      	b.n	8001f4c <__aeabi_dsub+0xc4>
 80024be:	4663      	mov	r3, ip
 80024c0:	08d9      	lsrs	r1, r3, #3
 80024c2:	9b02      	ldr	r3, [sp, #8]
 80024c4:	075a      	lsls	r2, r3, #29
 80024c6:	430a      	orrs	r2, r1
 80024c8:	08dc      	lsrs	r4, r3, #3
 80024ca:	e5ee      	b.n	80020aa <__aeabi_dsub+0x222>
 80024cc:	4663      	mov	r3, ip
 80024ce:	9c02      	ldr	r4, [sp, #8]
 80024d0:	9303      	str	r3, [sp, #12]
 80024d2:	e6c7      	b.n	8002264 <__aeabi_dsub+0x3dc>
 80024d4:	08c0      	lsrs	r0, r0, #3
 80024d6:	2a00      	cmp	r2, #0
 80024d8:	d100      	bne.n	80024dc <__aeabi_dsub+0x654>
 80024da:	e6aa      	b.n	8002232 <__aeabi_dsub+0x3aa>
 80024dc:	0762      	lsls	r2, r4, #29
 80024de:	4310      	orrs	r0, r2
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	08e4      	lsrs	r4, r4, #3
 80024e4:	0312      	lsls	r2, r2, #12
 80024e6:	4214      	tst	r4, r2
 80024e8:	d0d7      	beq.n	800249a <__aeabi_dsub+0x612>
 80024ea:	9f02      	ldr	r7, [sp, #8]
 80024ec:	08fd      	lsrs	r5, r7, #3
 80024ee:	4215      	tst	r5, r2
 80024f0:	d1d3      	bne.n	800249a <__aeabi_dsub+0x612>
 80024f2:	4663      	mov	r3, ip
 80024f4:	2601      	movs	r6, #1
 80024f6:	08d8      	lsrs	r0, r3, #3
 80024f8:	077b      	lsls	r3, r7, #29
 80024fa:	002c      	movs	r4, r5
 80024fc:	4318      	orrs	r0, r3
 80024fe:	400e      	ands	r6, r1
 8002500:	e7cb      	b.n	800249a <__aeabi_dsub+0x612>
 8002502:	000a      	movs	r2, r1
 8002504:	0027      	movs	r7, r4
 8002506:	3a20      	subs	r2, #32
 8002508:	40d7      	lsrs	r7, r2
 800250a:	2920      	cmp	r1, #32
 800250c:	d005      	beq.n	800251a <__aeabi_dsub+0x692>
 800250e:	2240      	movs	r2, #64	@ 0x40
 8002510:	1a52      	subs	r2, r2, r1
 8002512:	4094      	lsls	r4, r2
 8002514:	0025      	movs	r5, r4
 8002516:	4305      	orrs	r5, r0
 8002518:	9503      	str	r5, [sp, #12]
 800251a:	9d03      	ldr	r5, [sp, #12]
 800251c:	1e6a      	subs	r2, r5, #1
 800251e:	4195      	sbcs	r5, r2
 8002520:	432f      	orrs	r7, r5
 8002522:	e610      	b.n	8002146 <__aeabi_dsub+0x2be>
 8002524:	0014      	movs	r4, r2
 8002526:	2500      	movs	r5, #0
 8002528:	2200      	movs	r2, #0
 800252a:	e556      	b.n	8001fda <__aeabi_dsub+0x152>
 800252c:	9b02      	ldr	r3, [sp, #8]
 800252e:	4460      	add	r0, ip
 8002530:	4699      	mov	r9, r3
 8002532:	4560      	cmp	r0, ip
 8002534:	4192      	sbcs	r2, r2
 8002536:	444c      	add	r4, r9
 8002538:	4252      	negs	r2, r2
 800253a:	0005      	movs	r5, r0
 800253c:	18a4      	adds	r4, r4, r2
 800253e:	e74c      	b.n	80023da <__aeabi_dsub+0x552>
 8002540:	001a      	movs	r2, r3
 8002542:	001c      	movs	r4, r3
 8002544:	432a      	orrs	r2, r5
 8002546:	d000      	beq.n	800254a <__aeabi_dsub+0x6c2>
 8002548:	e6b3      	b.n	80022b2 <__aeabi_dsub+0x42a>
 800254a:	e6c9      	b.n	80022e0 <__aeabi_dsub+0x458>
 800254c:	2480      	movs	r4, #128	@ 0x80
 800254e:	2600      	movs	r6, #0
 8002550:	0324      	lsls	r4, r4, #12
 8002552:	e5ae      	b.n	80020b2 <__aeabi_dsub+0x22a>
 8002554:	2120      	movs	r1, #32
 8002556:	2500      	movs	r5, #0
 8002558:	1a09      	subs	r1, r1, r0
 800255a:	e517      	b.n	8001f8c <__aeabi_dsub+0x104>
 800255c:	2200      	movs	r2, #0
 800255e:	2500      	movs	r5, #0
 8002560:	4c0b      	ldr	r4, [pc, #44]	@ (8002590 <__aeabi_dsub+0x708>)
 8002562:	e53a      	b.n	8001fda <__aeabi_dsub+0x152>
 8002564:	2d00      	cmp	r5, #0
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x6e2>
 8002568:	e5f6      	b.n	8002158 <__aeabi_dsub+0x2d0>
 800256a:	464b      	mov	r3, r9
 800256c:	1bda      	subs	r2, r3, r7
 800256e:	4692      	mov	sl, r2
 8002570:	2f00      	cmp	r7, #0
 8002572:	d100      	bne.n	8002576 <__aeabi_dsub+0x6ee>
 8002574:	e66f      	b.n	8002256 <__aeabi_dsub+0x3ce>
 8002576:	2a38      	cmp	r2, #56	@ 0x38
 8002578:	dc05      	bgt.n	8002586 <__aeabi_dsub+0x6fe>
 800257a:	2680      	movs	r6, #128	@ 0x80
 800257c:	0436      	lsls	r6, r6, #16
 800257e:	4334      	orrs	r4, r6
 8002580:	4688      	mov	r8, r1
 8002582:	000e      	movs	r6, r1
 8002584:	e6d1      	b.n	800232a <__aeabi_dsub+0x4a2>
 8002586:	4688      	mov	r8, r1
 8002588:	000e      	movs	r6, r1
 800258a:	2501      	movs	r5, #1
 800258c:	e6de      	b.n	800234c <__aeabi_dsub+0x4c4>
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	000007ff 	.word	0x000007ff
 8002594:	ff7fffff 	.word	0xff7fffff
 8002598:	000007fe 	.word	0x000007fe
 800259c:	2d00      	cmp	r5, #0
 800259e:	d100      	bne.n	80025a2 <__aeabi_dsub+0x71a>
 80025a0:	e668      	b.n	8002274 <__aeabi_dsub+0x3ec>
 80025a2:	464b      	mov	r3, r9
 80025a4:	1bd9      	subs	r1, r3, r7
 80025a6:	2f00      	cmp	r7, #0
 80025a8:	d101      	bne.n	80025ae <__aeabi_dsub+0x726>
 80025aa:	468a      	mov	sl, r1
 80025ac:	e5a7      	b.n	80020fe <__aeabi_dsub+0x276>
 80025ae:	2701      	movs	r7, #1
 80025b0:	2938      	cmp	r1, #56	@ 0x38
 80025b2:	dd00      	ble.n	80025b6 <__aeabi_dsub+0x72e>
 80025b4:	e5c7      	b.n	8002146 <__aeabi_dsub+0x2be>
 80025b6:	2280      	movs	r2, #128	@ 0x80
 80025b8:	0412      	lsls	r2, r2, #16
 80025ba:	4314      	orrs	r4, r2
 80025bc:	e5af      	b.n	800211e <__aeabi_dsub+0x296>
 80025be:	46c0      	nop			@ (mov r8, r8)

080025c0 <__aeabi_dcmpun>:
 80025c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c2:	46c6      	mov	lr, r8
 80025c4:	031e      	lsls	r6, r3, #12
 80025c6:	0b36      	lsrs	r6, r6, #12
 80025c8:	46b0      	mov	r8, r6
 80025ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002600 <__aeabi_dcmpun+0x40>)
 80025cc:	030c      	lsls	r4, r1, #12
 80025ce:	004d      	lsls	r5, r1, #1
 80025d0:	005f      	lsls	r7, r3, #1
 80025d2:	b500      	push	{lr}
 80025d4:	0b24      	lsrs	r4, r4, #12
 80025d6:	0d6d      	lsrs	r5, r5, #21
 80025d8:	0d7f      	lsrs	r7, r7, #21
 80025da:	42b5      	cmp	r5, r6
 80025dc:	d00b      	beq.n	80025f6 <__aeabi_dcmpun+0x36>
 80025de:	4908      	ldr	r1, [pc, #32]	@ (8002600 <__aeabi_dcmpun+0x40>)
 80025e0:	2000      	movs	r0, #0
 80025e2:	428f      	cmp	r7, r1
 80025e4:	d104      	bne.n	80025f0 <__aeabi_dcmpun+0x30>
 80025e6:	4646      	mov	r6, r8
 80025e8:	4316      	orrs	r6, r2
 80025ea:	0030      	movs	r0, r6
 80025ec:	1e43      	subs	r3, r0, #1
 80025ee:	4198      	sbcs	r0, r3
 80025f0:	bc80      	pop	{r7}
 80025f2:	46b8      	mov	r8, r7
 80025f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f6:	4304      	orrs	r4, r0
 80025f8:	2001      	movs	r0, #1
 80025fa:	2c00      	cmp	r4, #0
 80025fc:	d1f8      	bne.n	80025f0 <__aeabi_dcmpun+0x30>
 80025fe:	e7ee      	b.n	80025de <__aeabi_dcmpun+0x1e>
 8002600:	000007ff 	.word	0x000007ff

08002604 <__aeabi_d2iz>:
 8002604:	000b      	movs	r3, r1
 8002606:	0002      	movs	r2, r0
 8002608:	b570      	push	{r4, r5, r6, lr}
 800260a:	4d16      	ldr	r5, [pc, #88]	@ (8002664 <__aeabi_d2iz+0x60>)
 800260c:	030c      	lsls	r4, r1, #12
 800260e:	b082      	sub	sp, #8
 8002610:	0049      	lsls	r1, r1, #1
 8002612:	2000      	movs	r0, #0
 8002614:	9200      	str	r2, [sp, #0]
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	0b24      	lsrs	r4, r4, #12
 800261a:	0d49      	lsrs	r1, r1, #21
 800261c:	0fde      	lsrs	r6, r3, #31
 800261e:	42a9      	cmp	r1, r5
 8002620:	dd04      	ble.n	800262c <__aeabi_d2iz+0x28>
 8002622:	4811      	ldr	r0, [pc, #68]	@ (8002668 <__aeabi_d2iz+0x64>)
 8002624:	4281      	cmp	r1, r0
 8002626:	dd03      	ble.n	8002630 <__aeabi_d2iz+0x2c>
 8002628:	4b10      	ldr	r3, [pc, #64]	@ (800266c <__aeabi_d2iz+0x68>)
 800262a:	18f0      	adds	r0, r6, r3
 800262c:	b002      	add	sp, #8
 800262e:	bd70      	pop	{r4, r5, r6, pc}
 8002630:	2080      	movs	r0, #128	@ 0x80
 8002632:	0340      	lsls	r0, r0, #13
 8002634:	4320      	orrs	r0, r4
 8002636:	4c0e      	ldr	r4, [pc, #56]	@ (8002670 <__aeabi_d2iz+0x6c>)
 8002638:	1a64      	subs	r4, r4, r1
 800263a:	2c1f      	cmp	r4, #31
 800263c:	dd08      	ble.n	8002650 <__aeabi_d2iz+0x4c>
 800263e:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <__aeabi_d2iz+0x70>)
 8002640:	1a5b      	subs	r3, r3, r1
 8002642:	40d8      	lsrs	r0, r3
 8002644:	0003      	movs	r3, r0
 8002646:	4258      	negs	r0, r3
 8002648:	2e00      	cmp	r6, #0
 800264a:	d1ef      	bne.n	800262c <__aeabi_d2iz+0x28>
 800264c:	0018      	movs	r0, r3
 800264e:	e7ed      	b.n	800262c <__aeabi_d2iz+0x28>
 8002650:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <__aeabi_d2iz+0x74>)
 8002652:	9a00      	ldr	r2, [sp, #0]
 8002654:	469c      	mov	ip, r3
 8002656:	0003      	movs	r3, r0
 8002658:	4461      	add	r1, ip
 800265a:	408b      	lsls	r3, r1
 800265c:	40e2      	lsrs	r2, r4
 800265e:	4313      	orrs	r3, r2
 8002660:	e7f1      	b.n	8002646 <__aeabi_d2iz+0x42>
 8002662:	46c0      	nop			@ (mov r8, r8)
 8002664:	000003fe 	.word	0x000003fe
 8002668:	0000041d 	.word	0x0000041d
 800266c:	7fffffff 	.word	0x7fffffff
 8002670:	00000433 	.word	0x00000433
 8002674:	00000413 	.word	0x00000413
 8002678:	fffffbed 	.word	0xfffffbed

0800267c <__aeabi_i2d>:
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	2800      	cmp	r0, #0
 8002680:	d016      	beq.n	80026b0 <__aeabi_i2d+0x34>
 8002682:	17c3      	asrs	r3, r0, #31
 8002684:	18c5      	adds	r5, r0, r3
 8002686:	405d      	eors	r5, r3
 8002688:	0fc4      	lsrs	r4, r0, #31
 800268a:	0028      	movs	r0, r5
 800268c:	f000 f86c 	bl	8002768 <__clzsi2>
 8002690:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <__aeabi_i2d+0x58>)
 8002692:	1a1b      	subs	r3, r3, r0
 8002694:	055b      	lsls	r3, r3, #21
 8002696:	0d5b      	lsrs	r3, r3, #21
 8002698:	280a      	cmp	r0, #10
 800269a:	dc14      	bgt.n	80026c6 <__aeabi_i2d+0x4a>
 800269c:	0002      	movs	r2, r0
 800269e:	002e      	movs	r6, r5
 80026a0:	3215      	adds	r2, #21
 80026a2:	4096      	lsls	r6, r2
 80026a4:	220b      	movs	r2, #11
 80026a6:	1a12      	subs	r2, r2, r0
 80026a8:	40d5      	lsrs	r5, r2
 80026aa:	032d      	lsls	r5, r5, #12
 80026ac:	0b2d      	lsrs	r5, r5, #12
 80026ae:	e003      	b.n	80026b8 <__aeabi_i2d+0x3c>
 80026b0:	2400      	movs	r4, #0
 80026b2:	2300      	movs	r3, #0
 80026b4:	2500      	movs	r5, #0
 80026b6:	2600      	movs	r6, #0
 80026b8:	051b      	lsls	r3, r3, #20
 80026ba:	432b      	orrs	r3, r5
 80026bc:	07e4      	lsls	r4, r4, #31
 80026be:	4323      	orrs	r3, r4
 80026c0:	0030      	movs	r0, r6
 80026c2:	0019      	movs	r1, r3
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
 80026c6:	380b      	subs	r0, #11
 80026c8:	4085      	lsls	r5, r0
 80026ca:	032d      	lsls	r5, r5, #12
 80026cc:	2600      	movs	r6, #0
 80026ce:	0b2d      	lsrs	r5, r5, #12
 80026d0:	e7f2      	b.n	80026b8 <__aeabi_i2d+0x3c>
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	0000041e 	.word	0x0000041e

080026d8 <__aeabi_f2d>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	0242      	lsls	r2, r0, #9
 80026dc:	0043      	lsls	r3, r0, #1
 80026de:	0fc4      	lsrs	r4, r0, #31
 80026e0:	20fe      	movs	r0, #254	@ 0xfe
 80026e2:	0e1b      	lsrs	r3, r3, #24
 80026e4:	1c59      	adds	r1, r3, #1
 80026e6:	0a55      	lsrs	r5, r2, #9
 80026e8:	4208      	tst	r0, r1
 80026ea:	d00c      	beq.n	8002706 <__aeabi_f2d+0x2e>
 80026ec:	21e0      	movs	r1, #224	@ 0xe0
 80026ee:	0089      	lsls	r1, r1, #2
 80026f0:	468c      	mov	ip, r1
 80026f2:	076d      	lsls	r5, r5, #29
 80026f4:	0b12      	lsrs	r2, r2, #12
 80026f6:	4463      	add	r3, ip
 80026f8:	051b      	lsls	r3, r3, #20
 80026fa:	4313      	orrs	r3, r2
 80026fc:	07e4      	lsls	r4, r4, #31
 80026fe:	4323      	orrs	r3, r4
 8002700:	0028      	movs	r0, r5
 8002702:	0019      	movs	r1, r3
 8002704:	bd70      	pop	{r4, r5, r6, pc}
 8002706:	2b00      	cmp	r3, #0
 8002708:	d114      	bne.n	8002734 <__aeabi_f2d+0x5c>
 800270a:	2d00      	cmp	r5, #0
 800270c:	d01b      	beq.n	8002746 <__aeabi_f2d+0x6e>
 800270e:	0028      	movs	r0, r5
 8002710:	f000 f82a 	bl	8002768 <__clzsi2>
 8002714:	280a      	cmp	r0, #10
 8002716:	dc1c      	bgt.n	8002752 <__aeabi_f2d+0x7a>
 8002718:	230b      	movs	r3, #11
 800271a:	002a      	movs	r2, r5
 800271c:	1a1b      	subs	r3, r3, r0
 800271e:	40da      	lsrs	r2, r3
 8002720:	0003      	movs	r3, r0
 8002722:	3315      	adds	r3, #21
 8002724:	409d      	lsls	r5, r3
 8002726:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <__aeabi_f2d+0x88>)
 8002728:	0312      	lsls	r2, r2, #12
 800272a:	1a1b      	subs	r3, r3, r0
 800272c:	055b      	lsls	r3, r3, #21
 800272e:	0b12      	lsrs	r2, r2, #12
 8002730:	0d5b      	lsrs	r3, r3, #21
 8002732:	e7e1      	b.n	80026f8 <__aeabi_f2d+0x20>
 8002734:	2d00      	cmp	r5, #0
 8002736:	d009      	beq.n	800274c <__aeabi_f2d+0x74>
 8002738:	0b13      	lsrs	r3, r2, #12
 800273a:	2280      	movs	r2, #128	@ 0x80
 800273c:	0312      	lsls	r2, r2, #12
 800273e:	431a      	orrs	r2, r3
 8002740:	076d      	lsls	r5, r5, #29
 8002742:	4b08      	ldr	r3, [pc, #32]	@ (8002764 <__aeabi_f2d+0x8c>)
 8002744:	e7d8      	b.n	80026f8 <__aeabi_f2d+0x20>
 8002746:	2300      	movs	r3, #0
 8002748:	2200      	movs	r2, #0
 800274a:	e7d5      	b.n	80026f8 <__aeabi_f2d+0x20>
 800274c:	2200      	movs	r2, #0
 800274e:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <__aeabi_f2d+0x8c>)
 8002750:	e7d2      	b.n	80026f8 <__aeabi_f2d+0x20>
 8002752:	0003      	movs	r3, r0
 8002754:	002a      	movs	r2, r5
 8002756:	3b0b      	subs	r3, #11
 8002758:	409a      	lsls	r2, r3
 800275a:	2500      	movs	r5, #0
 800275c:	e7e3      	b.n	8002726 <__aeabi_f2d+0x4e>
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	00000389 	.word	0x00000389
 8002764:	000007ff 	.word	0x000007ff

08002768 <__clzsi2>:
 8002768:	211c      	movs	r1, #28
 800276a:	2301      	movs	r3, #1
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	4298      	cmp	r0, r3
 8002770:	d301      	bcc.n	8002776 <__clzsi2+0xe>
 8002772:	0c00      	lsrs	r0, r0, #16
 8002774:	3910      	subs	r1, #16
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	4298      	cmp	r0, r3
 800277a:	d301      	bcc.n	8002780 <__clzsi2+0x18>
 800277c:	0a00      	lsrs	r0, r0, #8
 800277e:	3908      	subs	r1, #8
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	4298      	cmp	r0, r3
 8002784:	d301      	bcc.n	800278a <__clzsi2+0x22>
 8002786:	0900      	lsrs	r0, r0, #4
 8002788:	3904      	subs	r1, #4
 800278a:	a202      	add	r2, pc, #8	@ (adr r2, 8002794 <__clzsi2+0x2c>)
 800278c:	5c10      	ldrb	r0, [r2, r0]
 800278e:	1840      	adds	r0, r0, r1
 8002790:	4770      	bx	lr
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	02020304 	.word	0x02020304
 8002798:	01010101 	.word	0x01010101
	...

080027a4 <__clzdi2>:
 80027a4:	b510      	push	{r4, lr}
 80027a6:	2900      	cmp	r1, #0
 80027a8:	d103      	bne.n	80027b2 <__clzdi2+0xe>
 80027aa:	f7ff ffdd 	bl	8002768 <__clzsi2>
 80027ae:	3020      	adds	r0, #32
 80027b0:	e002      	b.n	80027b8 <__clzdi2+0x14>
 80027b2:	0008      	movs	r0, r1
 80027b4:	f7ff ffd8 	bl	8002768 <__clzsi2>
 80027b8:	bd10      	pop	{r4, pc}
 80027ba:	46c0      	nop			@ (mov r8, r8)

080027bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027c2:	1dfb      	adds	r3, r7, #7
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_Init+0x3c>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_Init+0x3c>)
 80027ce:	2180      	movs	r1, #128	@ 0x80
 80027d0:	0049      	lsls	r1, r1, #1
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027d6:	2003      	movs	r0, #3
 80027d8:	f000 f810 	bl	80027fc <HAL_InitTick>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d003      	beq.n	80027e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e001      	b.n	80027ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80027e8:	f003 fffc 	bl	80067e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	781b      	ldrb	r3, [r3, #0]
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40022000 	.word	0x40022000

080027fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002804:	230f      	movs	r3, #15
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800280c:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <HAL_InitTick+0x88>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d02b      	beq.n	800286c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002814:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <HAL_InitTick+0x8c>)
 8002816:	681c      	ldr	r4, [r3, #0]
 8002818:	4b1a      	ldr	r3, [pc, #104]	@ (8002884 <HAL_InitTick+0x88>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	0019      	movs	r1, r3
 800281e:	23fa      	movs	r3, #250	@ 0xfa
 8002820:	0098      	lsls	r0, r3, #2
 8002822:	f7fd fc77 	bl	8000114 <__udivsi3>
 8002826:	0003      	movs	r3, r0
 8002828:	0019      	movs	r1, r3
 800282a:	0020      	movs	r0, r4
 800282c:	f7fd fc72 	bl	8000114 <__udivsi3>
 8002830:	0003      	movs	r3, r0
 8002832:	0018      	movs	r0, r3
 8002834:	f000 f913 	bl	8002a5e <HAL_SYSTICK_Config>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d112      	bne.n	8002862 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d80a      	bhi.n	8002858 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	2301      	movs	r3, #1
 8002846:	425b      	negs	r3, r3
 8002848:	2200      	movs	r2, #0
 800284a:	0018      	movs	r0, r3
 800284c:	f000 f8f2 	bl	8002a34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002850:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <HAL_InitTick+0x90>)
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e00d      	b.n	8002874 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002858:	230f      	movs	r3, #15
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e008      	b.n	8002874 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002862:	230f      	movs	r3, #15
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e003      	b.n	8002874 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800286c:	230f      	movs	r3, #15
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002874:	230f      	movs	r3, #15
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	781b      	ldrb	r3, [r3, #0]
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b005      	add	sp, #20
 8002880:	bd90      	pop	{r4, r7, pc}
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	20000004 	.word	0x20000004
 8002888:	20000008 	.word	0x20000008
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_IncTick+0x1c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	001a      	movs	r2, r3
 800289a:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <HAL_IncTick+0x20>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	18d2      	adds	r2, r2, r3
 80028a0:	4b03      	ldr	r3, [pc, #12]	@ (80028b0 <HAL_IncTick+0x20>)
 80028a2:	601a      	str	r2, [r3, #0]
}
 80028a4:	46c0      	nop			@ (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	20000004 	.word	0x20000004
 80028b0:	2000008c 	.word	0x2000008c

080028b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  return uwTick;
 80028b8:	4b02      	ldr	r3, [pc, #8]	@ (80028c4 <HAL_GetTick+0x10>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	2000008c 	.word	0x2000008c

080028c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff fff0 	bl	80028b4 <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3301      	adds	r3, #1
 80028e0:	d005      	beq.n	80028ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e2:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <HAL_Delay+0x44>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	001a      	movs	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	189b      	adds	r3, r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	f7ff ffe0 	bl	80028b4 <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d8f7      	bhi.n	80028f0 <HAL_Delay+0x28>
  {
  }
}
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b004      	add	sp, #16
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	20000004 	.word	0x20000004

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	0002      	movs	r2, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800291e:	1dfb      	adds	r3, r7, #7
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b7f      	cmp	r3, #127	@ 0x7f
 8002924:	d828      	bhi.n	8002978 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002926:	4a2f      	ldr	r2, [pc, #188]	@ (80029e4 <__NVIC_SetPriority+0xd4>)
 8002928:	1dfb      	adds	r3, r7, #7
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b25b      	sxtb	r3, r3
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	33c0      	adds	r3, #192	@ 0xc0
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	589b      	ldr	r3, [r3, r2]
 8002936:	1dfa      	adds	r2, r7, #7
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	0011      	movs	r1, r2
 800293c:	2203      	movs	r2, #3
 800293e:	400a      	ands	r2, r1
 8002940:	00d2      	lsls	r2, r2, #3
 8002942:	21ff      	movs	r1, #255	@ 0xff
 8002944:	4091      	lsls	r1, r2
 8002946:	000a      	movs	r2, r1
 8002948:	43d2      	mvns	r2, r2
 800294a:	401a      	ands	r2, r3
 800294c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	019b      	lsls	r3, r3, #6
 8002952:	22ff      	movs	r2, #255	@ 0xff
 8002954:	401a      	ands	r2, r3
 8002956:	1dfb      	adds	r3, r7, #7
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	0018      	movs	r0, r3
 800295c:	2303      	movs	r3, #3
 800295e:	4003      	ands	r3, r0
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002964:	481f      	ldr	r0, [pc, #124]	@ (80029e4 <__NVIC_SetPriority+0xd4>)
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	b25b      	sxtb	r3, r3
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	430a      	orrs	r2, r1
 8002970:	33c0      	adds	r3, #192	@ 0xc0
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002976:	e031      	b.n	80029dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002978:	4a1b      	ldr	r2, [pc, #108]	@ (80029e8 <__NVIC_SetPriority+0xd8>)
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	0019      	movs	r1, r3
 8002980:	230f      	movs	r3, #15
 8002982:	400b      	ands	r3, r1
 8002984:	3b08      	subs	r3, #8
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3306      	adds	r3, #6
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	18d3      	adds	r3, r2, r3
 800298e:	3304      	adds	r3, #4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	1dfa      	adds	r2, r7, #7
 8002994:	7812      	ldrb	r2, [r2, #0]
 8002996:	0011      	movs	r1, r2
 8002998:	2203      	movs	r2, #3
 800299a:	400a      	ands	r2, r1
 800299c:	00d2      	lsls	r2, r2, #3
 800299e:	21ff      	movs	r1, #255	@ 0xff
 80029a0:	4091      	lsls	r1, r2
 80029a2:	000a      	movs	r2, r1
 80029a4:	43d2      	mvns	r2, r2
 80029a6:	401a      	ands	r2, r3
 80029a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	019b      	lsls	r3, r3, #6
 80029ae:	22ff      	movs	r2, #255	@ 0xff
 80029b0:	401a      	ands	r2, r3
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	0018      	movs	r0, r3
 80029b8:	2303      	movs	r3, #3
 80029ba:	4003      	ands	r3, r0
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c0:	4809      	ldr	r0, [pc, #36]	@ (80029e8 <__NVIC_SetPriority+0xd8>)
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	001c      	movs	r4, r3
 80029c8:	230f      	movs	r3, #15
 80029ca:	4023      	ands	r3, r4
 80029cc:	3b08      	subs	r3, #8
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	430a      	orrs	r2, r1
 80029d2:	3306      	adds	r3, #6
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	18c3      	adds	r3, r0, r3
 80029d8:	3304      	adds	r3, #4
 80029da:	601a      	str	r2, [r3, #0]
}
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b003      	add	sp, #12
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	e000e100 	.word	0xe000e100
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	045b      	lsls	r3, r3, #17
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d301      	bcc.n	8002a04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a00:	2301      	movs	r3, #1
 8002a02:	e010      	b.n	8002a26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a04:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <SysTick_Config+0x44>)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	425b      	negs	r3, r3
 8002a10:	2103      	movs	r1, #3
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7ff ff7c 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a18:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <SysTick_Config+0x44>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1e:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <SysTick_Config+0x44>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	e000e010 	.word	0xe000e010

08002a34 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	210f      	movs	r1, #15
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	1c02      	adds	r2, r0, #0
 8002a44:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b25b      	sxtb	r3, r3
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b004      	add	sp, #16
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff ffbf 	bl	80029ec <SysTick_Config>
 8002a6e:	0003      	movs	r3, r0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a86:	e147      	b.n	8002d18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4091      	lsls	r1, r2
 8002a92:	000a      	movs	r2, r1
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d100      	bne.n	8002aa0 <HAL_GPIO_Init+0x28>
 8002a9e:	e138      	b.n	8002d12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d005      	beq.n	8002ab8 <HAL_GPIO_Init+0x40>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d130      	bne.n	8002b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	0013      	movs	r3, r2
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	0013      	movs	r3, r2
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aee:	2201      	movs	r2, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
 8002af4:	0013      	movs	r3, r2
 8002af6:	43da      	mvns	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	2201      	movs	r2, #1
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d017      	beq.n	8002b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	409a      	lsls	r2, r3
 8002b34:	0013      	movs	r3, r2
 8002b36:	43da      	mvns	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	0013      	movs	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d123      	bne.n	8002baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	08da      	lsrs	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3208      	adds	r2, #8
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	58d3      	ldr	r3, [r2, r3]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2207      	movs	r2, #7
 8002b74:	4013      	ands	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2107      	movs	r1, #7
 8002b8e:	400b      	ands	r3, r1
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	409a      	lsls	r2, r3
 8002b94:	0013      	movs	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	0092      	lsls	r2, r2, #2
 8002ba6:	6939      	ldr	r1, [r7, #16]
 8002ba8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	401a      	ands	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	23c0      	movs	r3, #192	@ 0xc0
 8002be4:	029b      	lsls	r3, r3, #10
 8002be6:	4013      	ands	r3, r2
 8002be8:	d100      	bne.n	8002bec <HAL_GPIO_Init+0x174>
 8002bea:	e092      	b.n	8002d12 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002bec:	4a50      	ldr	r2, [pc, #320]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3318      	adds	r3, #24
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	589b      	ldr	r3, [r3, r2]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	220f      	movs	r2, #15
 8002c04:	409a      	lsls	r2, r3
 8002c06:	0013      	movs	r3, r2
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	23a0      	movs	r3, #160	@ 0xa0
 8002c14:	05db      	lsls	r3, r3, #23
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x1ca>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a45      	ldr	r2, [pc, #276]	@ (8002d34 <HAL_GPIO_Init+0x2bc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x1c6>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a44      	ldr	r2, [pc, #272]	@ (8002d38 <HAL_GPIO_Init+0x2c0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x1c2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a43      	ldr	r2, [pc, #268]	@ (8002d3c <HAL_GPIO_Init+0x2c4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x1be>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x1cc>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e004      	b.n	8002c44 <HAL_GPIO_Init+0x1cc>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_Init+0x1cc>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x1cc>
 8002c42:	2300      	movs	r3, #0
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	2103      	movs	r1, #3
 8002c48:	400a      	ands	r2, r1
 8002c4a:	00d2      	lsls	r2, r2, #3
 8002c4c:	4093      	lsls	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c54:	4936      	ldr	r1, [pc, #216]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3318      	adds	r3, #24
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c62:	4b33      	ldr	r3, [pc, #204]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	035b      	lsls	r3, r3, #13
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c86:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c8c:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	039b      	lsls	r3, r3, #14
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002cb8:	2384      	movs	r3, #132	@ 0x84
 8002cba:	58d3      	ldr	r3, [r2, r3]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	2380      	movs	r3, #128	@ 0x80
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cdc:	4914      	ldr	r1, [pc, #80]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002cde:	2284      	movs	r2, #132	@ 0x84
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002ce4:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002ce6:	2380      	movs	r3, #128	@ 0x80
 8002ce8:	58d3      	ldr	r3, [r2, r3]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	025b      	lsls	r3, r3, #9
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d0a:	4909      	ldr	r1, [pc, #36]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002d0c:	2280      	movs	r2, #128	@ 0x80
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	40da      	lsrs	r2, r3
 8002d20:	1e13      	subs	r3, r2, #0
 8002d22:	d000      	beq.n	8002d26 <HAL_GPIO_Init+0x2ae>
 8002d24:	e6b0      	b.n	8002a88 <HAL_GPIO_Init+0x10>
  }
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46c0      	nop			@ (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b006      	add	sp, #24
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021800 	.word	0x40021800
 8002d34:	50000400 	.word	0x50000400
 8002d38:	50000800 	.word	0x50000800
 8002d3c:	50000c00 	.word	0x50000c00

08002d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	000a      	movs	r2, r1
 8002d4a:	1cbb      	adds	r3, r7, #2
 8002d4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	1cba      	adds	r2, r7, #2
 8002d54:	8812      	ldrh	r2, [r2, #0]
 8002d56:	4013      	ands	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d5a:	230f      	movs	r3, #15
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e003      	b.n	8002d6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d64:	230f      	movs	r3, #15
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	781b      	ldrb	r3, [r3, #0]
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	0008      	movs	r0, r1
 8002d84:	0011      	movs	r1, r2
 8002d86:	1cbb      	adds	r3, r7, #2
 8002d88:	1c02      	adds	r2, r0, #0
 8002d8a:	801a      	strh	r2, [r3, #0]
 8002d8c:	1c7b      	adds	r3, r7, #1
 8002d8e:	1c0a      	adds	r2, r1, #0
 8002d90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d92:	1c7b      	adds	r3, r7, #1
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d9a:	1cbb      	adds	r3, r7, #2
 8002d9c:	881a      	ldrh	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da2:	e003      	b.n	8002dac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002da4:	1cbb      	adds	r3, r7, #2
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e08f      	b.n	8002ee6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2241      	movs	r2, #65	@ 0x41
 8002dca:	5c9b      	ldrb	r3, [r3, r2]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2240      	movs	r2, #64	@ 0x40
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f003 f875 	bl	8005ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2241      	movs	r2, #65	@ 0x41
 8002de6:	2124      	movs	r1, #36	@ 0x24
 8002de8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	438a      	bics	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	493b      	ldr	r1, [pc, #236]	@ (8002ef0 <HAL_I2C_Init+0x13c>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4938      	ldr	r1, [pc, #224]	@ (8002ef4 <HAL_I2C_Init+0x140>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d108      	bne.n	8002e32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2180      	movs	r1, #128	@ 0x80
 8002e2a:	0209      	lsls	r1, r1, #8
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	e007      	b.n	8002e42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2184      	movs	r1, #132	@ 0x84
 8002e3c:	0209      	lsls	r1, r1, #8
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d109      	bne.n	8002e5e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2180      	movs	r1, #128	@ 0x80
 8002e56:	0109      	lsls	r1, r1, #4
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	e007      	b.n	8002e6e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4923      	ldr	r1, [pc, #140]	@ (8002ef8 <HAL_I2C_Init+0x144>)
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4920      	ldr	r1, [pc, #128]	@ (8002efc <HAL_I2C_Init+0x148>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	491a      	ldr	r1, [pc, #104]	@ (8002ef4 <HAL_I2C_Init+0x140>)
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69d9      	ldr	r1, [r3, #28]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2241      	movs	r2, #65	@ 0x41
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2242      	movs	r2, #66	@ 0x42
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b002      	add	sp, #8
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	f0ffffff 	.word	0xf0ffffff
 8002ef4:	ffff7fff 	.word	0xffff7fff
 8002ef8:	fffff7ff 	.word	0xfffff7ff
 8002efc:	02008000 	.word	0x02008000

08002f00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b089      	sub	sp, #36	@ 0x24
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	000c      	movs	r4, r1
 8002f0a:	0010      	movs	r0, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	230a      	movs	r3, #10
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	1c22      	adds	r2, r4, #0
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	2308      	movs	r3, #8
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	1c02      	adds	r2, r0, #0
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	1dbb      	adds	r3, r7, #6
 8002f20:	1c0a      	adds	r2, r1, #0
 8002f22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2241      	movs	r2, #65	@ 0x41
 8002f28:	5c9b      	ldrb	r3, [r3, r2]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d000      	beq.n	8002f32 <HAL_I2C_Mem_Write+0x32>
 8002f30:	e10c      	b.n	800314c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_I2C_Mem_Write+0x42>
 8002f38:	232c      	movs	r3, #44	@ 0x2c
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2280      	movs	r2, #128	@ 0x80
 8002f46:	0092      	lsls	r2, r2, #2
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0ff      	b.n	800314e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2240      	movs	r2, #64	@ 0x40
 8002f52:	5c9b      	ldrb	r3, [r3, r2]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_I2C_Mem_Write+0x5c>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0f8      	b.n	800314e <HAL_I2C_Mem_Write+0x24e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	2101      	movs	r1, #1
 8002f62:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f64:	f7ff fca6 	bl	80028b4 <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	0219      	lsls	r1, r3, #8
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2319      	movs	r3, #25
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f000 fb0b 	bl	8003594 <I2C_WaitOnFlagUntilTimeout>
 8002f7e:	1e03      	subs	r3, r0, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0e3      	b.n	800314e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2241      	movs	r2, #65	@ 0x41
 8002f8a:	2121      	movs	r1, #33	@ 0x21
 8002f8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2242      	movs	r2, #66	@ 0x42
 8002f92:	2140      	movs	r1, #64	@ 0x40
 8002f94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	222c      	movs	r2, #44	@ 0x2c
 8002fa6:	18ba      	adds	r2, r7, r2
 8002fa8:	8812      	ldrh	r2, [r2, #0]
 8002faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fb2:	1dbb      	adds	r3, r7, #6
 8002fb4:	881c      	ldrh	r4, [r3, #0]
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	230a      	movs	r3, #10
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	8819      	ldrh	r1, [r3, #0]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	0023      	movs	r3, r4
 8002fce:	f000 f9f9 	bl	80033c4 <I2C_RequestMemoryWrite>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2240      	movs	r2, #64	@ 0x40
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0b5      	b.n	800314e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2bff      	cmp	r3, #255	@ 0xff
 8002fea:	d911      	bls.n	8003010 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	22ff      	movs	r2, #255	@ 0xff
 8002ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	045c      	lsls	r4, r3, #17
 8002ffc:	230a      	movs	r3, #10
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	8819      	ldrh	r1, [r3, #0]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	2300      	movs	r3, #0
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	0023      	movs	r3, r4
 800300a:	f000 fc9d 	bl	8003948 <I2C_TransferConfig>
 800300e:	e012      	b.n	8003036 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	b2da      	uxtb	r2, r3
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	049c      	lsls	r4, r3, #18
 8003024:	230a      	movs	r3, #10
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	8819      	ldrh	r1, [r3, #0]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	2300      	movs	r3, #0
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	0023      	movs	r3, r4
 8003032:	f000 fc89 	bl	8003948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	0018      	movs	r0, r3
 800303e:	f000 fb01 	bl	8003644 <I2C_WaitOnTXISFlagUntilTimeout>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e081      	b.n	800314e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d03a      	beq.n	80030fa <HAL_I2C_Mem_Write+0x1fa>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	d136      	bne.n	80030fa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800308c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	0013      	movs	r3, r2
 8003096:	2200      	movs	r2, #0
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	f000 fa7b 	bl	8003594 <I2C_WaitOnFlagUntilTimeout>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e053      	b.n	800314e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2bff      	cmp	r3, #255	@ 0xff
 80030ae:	d911      	bls.n	80030d4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	22ff      	movs	r2, #255	@ 0xff
 80030b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	045c      	lsls	r4, r3, #17
 80030c0:	230a      	movs	r3, #10
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	8819      	ldrh	r1, [r3, #0]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	0023      	movs	r3, r4
 80030ce:	f000 fc3b 	bl	8003948 <I2C_TransferConfig>
 80030d2:	e012      	b.n	80030fa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	2380      	movs	r3, #128	@ 0x80
 80030e6:	049c      	lsls	r4, r3, #18
 80030e8:	230a      	movs	r3, #10
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	8819      	ldrh	r1, [r3, #0]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	2300      	movs	r3, #0
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	0023      	movs	r3, r4
 80030f6:	f000 fc27 	bl	8003948 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d198      	bne.n	8003036 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fae0 	bl	80036d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e01a      	b.n	800314e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2220      	movs	r2, #32
 800311e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	490b      	ldr	r1, [pc, #44]	@ (8003158 <HAL_I2C_Mem_Write+0x258>)
 800312c:	400a      	ands	r2, r1
 800312e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2241      	movs	r2, #65	@ 0x41
 8003134:	2120      	movs	r1, #32
 8003136:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2242      	movs	r2, #66	@ 0x42
 800313c:	2100      	movs	r1, #0
 800313e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2240      	movs	r2, #64	@ 0x40
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b007      	add	sp, #28
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	fe00e800 	.word	0xfe00e800

0800315c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b089      	sub	sp, #36	@ 0x24
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	000c      	movs	r4, r1
 8003166:	0010      	movs	r0, r2
 8003168:	0019      	movs	r1, r3
 800316a:	230a      	movs	r3, #10
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	1c22      	adds	r2, r4, #0
 8003170:	801a      	strh	r2, [r3, #0]
 8003172:	2308      	movs	r3, #8
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	1c02      	adds	r2, r0, #0
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	1dbb      	adds	r3, r7, #6
 800317c:	1c0a      	adds	r2, r1, #0
 800317e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2241      	movs	r2, #65	@ 0x41
 8003184:	5c9b      	ldrb	r3, [r3, r2]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b20      	cmp	r3, #32
 800318a:	d000      	beq.n	800318e <HAL_I2C_Mem_Read+0x32>
 800318c:	e110      	b.n	80033b0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800318e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <HAL_I2C_Mem_Read+0x42>
 8003194:	232c      	movs	r3, #44	@ 0x2c
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2280      	movs	r2, #128	@ 0x80
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e103      	b.n	80033b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2240      	movs	r2, #64	@ 0x40
 80031ae:	5c9b      	ldrb	r3, [r3, r2]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_I2C_Mem_Read+0x5c>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0fc      	b.n	80033b2 <HAL_I2C_Mem_Read+0x256>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2240      	movs	r2, #64	@ 0x40
 80031bc:	2101      	movs	r1, #1
 80031be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031c0:	f7ff fb78 	bl	80028b4 <HAL_GetTick>
 80031c4:	0003      	movs	r3, r0
 80031c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	0219      	lsls	r1, r3, #8
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2319      	movs	r3, #25
 80031d4:	2201      	movs	r2, #1
 80031d6:	f000 f9dd 	bl	8003594 <I2C_WaitOnFlagUntilTimeout>
 80031da:	1e03      	subs	r3, r0, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0e7      	b.n	80033b2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2241      	movs	r2, #65	@ 0x41
 80031e6:	2122      	movs	r1, #34	@ 0x22
 80031e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2242      	movs	r2, #66	@ 0x42
 80031ee:	2140      	movs	r1, #64	@ 0x40
 80031f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	222c      	movs	r2, #44	@ 0x2c
 8003202:	18ba      	adds	r2, r7, r2
 8003204:	8812      	ldrh	r2, [r2, #0]
 8003206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800320e:	1dbb      	adds	r3, r7, #6
 8003210:	881c      	ldrh	r4, [r3, #0]
 8003212:	2308      	movs	r3, #8
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	230a      	movs	r3, #10
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	8819      	ldrh	r1, [r3, #0]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	0023      	movs	r3, r4
 800322a:	f000 f92f 	bl	800348c <I2C_RequestMemoryRead>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d005      	beq.n	800323e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2240      	movs	r2, #64	@ 0x40
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0b9      	b.n	80033b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2bff      	cmp	r3, #255	@ 0xff
 8003246:	d911      	bls.n	800326c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	@ 0xff
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	b2da      	uxtb	r2, r3
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	045c      	lsls	r4, r3, #17
 8003258:	230a      	movs	r3, #10
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	8819      	ldrh	r1, [r3, #0]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	4b56      	ldr	r3, [pc, #344]	@ (80033bc <HAL_I2C_Mem_Read+0x260>)
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	0023      	movs	r3, r4
 8003266:	f000 fb6f 	bl	8003948 <I2C_TransferConfig>
 800326a:	e012      	b.n	8003292 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327a:	b2da      	uxtb	r2, r3
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	049c      	lsls	r4, r3, #18
 8003280:	230a      	movs	r3, #10
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	8819      	ldrh	r1, [r3, #0]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	4b4c      	ldr	r3, [pc, #304]	@ (80033bc <HAL_I2C_Mem_Read+0x260>)
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	0023      	movs	r3, r4
 800328e:	f000 fb5b 	bl	8003948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	0013      	movs	r3, r2
 800329c:	2200      	movs	r2, #0
 800329e:	2104      	movs	r1, #4
 80032a0:	f000 f978 	bl	8003594 <I2C_WaitOnFlagUntilTimeout>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d001      	beq.n	80032ac <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e082      	b.n	80033b2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d03a      	beq.n	800335e <HAL_I2C_Mem_Read+0x202>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d136      	bne.n	800335e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	0013      	movs	r3, r2
 80032fa:	2200      	movs	r2, #0
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	f000 f949 	bl	8003594 <I2C_WaitOnFlagUntilTimeout>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e053      	b.n	80033b2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	2bff      	cmp	r3, #255	@ 0xff
 8003312:	d911      	bls.n	8003338 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	22ff      	movs	r2, #255	@ 0xff
 8003318:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331e:	b2da      	uxtb	r2, r3
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	045c      	lsls	r4, r3, #17
 8003324:	230a      	movs	r3, #10
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	8819      	ldrh	r1, [r3, #0]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	2300      	movs	r3, #0
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	0023      	movs	r3, r4
 8003332:	f000 fb09 	bl	8003948 <I2C_TransferConfig>
 8003336:	e012      	b.n	800335e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003346:	b2da      	uxtb	r2, r3
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	049c      	lsls	r4, r3, #18
 800334c:	230a      	movs	r3, #10
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	8819      	ldrh	r1, [r3, #0]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	2300      	movs	r3, #0
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	0023      	movs	r3, r4
 800335a:	f000 faf5 	bl	8003948 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d194      	bne.n	8003292 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 f9ae 	bl	80036d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d001      	beq.n	800337c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e01a      	b.n	80033b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2220      	movs	r2, #32
 8003382:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	490c      	ldr	r1, [pc, #48]	@ (80033c0 <HAL_I2C_Mem_Read+0x264>)
 8003390:	400a      	ands	r2, r1
 8003392:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2241      	movs	r2, #65	@ 0x41
 8003398:	2120      	movs	r1, #32
 800339a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2242      	movs	r2, #66	@ 0x42
 80033a0:	2100      	movs	r1, #0
 80033a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2240      	movs	r2, #64	@ 0x40
 80033a8:	2100      	movs	r1, #0
 80033aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e000      	b.n	80033b2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
  }
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b007      	add	sp, #28
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	80002400 	.word	0x80002400
 80033c0:	fe00e800 	.word	0xfe00e800

080033c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033c4:	b5b0      	push	{r4, r5, r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	000c      	movs	r4, r1
 80033ce:	0010      	movs	r0, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	250a      	movs	r5, #10
 80033d4:	197b      	adds	r3, r7, r5
 80033d6:	1c22      	adds	r2, r4, #0
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	2308      	movs	r3, #8
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	1c02      	adds	r2, r0, #0
 80033e0:	801a      	strh	r2, [r3, #0]
 80033e2:	1dbb      	adds	r3, r7, #6
 80033e4:	1c0a      	adds	r2, r1, #0
 80033e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033e8:	1dbb      	adds	r3, r7, #6
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	2380      	movs	r3, #128	@ 0x80
 80033f0:	045c      	lsls	r4, r3, #17
 80033f2:	197b      	adds	r3, r7, r5
 80033f4:	8819      	ldrh	r1, [r3, #0]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	4b23      	ldr	r3, [pc, #140]	@ (8003488 <I2C_RequestMemoryWrite+0xc4>)
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	0023      	movs	r3, r4
 80033fe:	f000 faa3 	bl	8003948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	6a39      	ldr	r1, [r7, #32]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	0018      	movs	r0, r3
 800340a:	f000 f91b 	bl	8003644 <I2C_WaitOnTXISFlagUntilTimeout>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d001      	beq.n	8003416 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e033      	b.n	800347e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003416:	1dbb      	adds	r3, r7, #6
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d107      	bne.n	800342e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800341e:	2308      	movs	r3, #8
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	629a      	str	r2, [r3, #40]	@ 0x28
 800342c:	e019      	b.n	8003462 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800342e:	2308      	movs	r3, #8
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	b29b      	uxth	r3, r3
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003442:	6a39      	ldr	r1, [r7, #32]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	0018      	movs	r0, r3
 8003448:	f000 f8fc 	bl	8003644 <I2C_WaitOnTXISFlagUntilTimeout>
 800344c:	1e03      	subs	r3, r0, #0
 800344e:	d001      	beq.n	8003454 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e014      	b.n	800347e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003454:	2308      	movs	r3, #8
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003462:	6a3a      	ldr	r2, [r7, #32]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	0013      	movs	r3, r2
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	@ 0x80
 8003470:	f000 f890 	bl	8003594 <I2C_WaitOnFlagUntilTimeout>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d001      	beq.n	800347c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bdb0      	pop	{r4, r5, r7, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	80002000 	.word	0x80002000

0800348c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	000c      	movs	r4, r1
 8003496:	0010      	movs	r0, r2
 8003498:	0019      	movs	r1, r3
 800349a:	250a      	movs	r5, #10
 800349c:	197b      	adds	r3, r7, r5
 800349e:	1c22      	adds	r2, r4, #0
 80034a0:	801a      	strh	r2, [r3, #0]
 80034a2:	2308      	movs	r3, #8
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	1c02      	adds	r2, r0, #0
 80034a8:	801a      	strh	r2, [r3, #0]
 80034aa:	1dbb      	adds	r3, r7, #6
 80034ac:	1c0a      	adds	r2, r1, #0
 80034ae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034b0:	1dbb      	adds	r3, r7, #6
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	197b      	adds	r3, r7, r5
 80034b8:	8819      	ldrh	r1, [r3, #0]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	4b23      	ldr	r3, [pc, #140]	@ (800354c <I2C_RequestMemoryRead+0xc0>)
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	f000 fa41 	bl	8003948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c8:	6a39      	ldr	r1, [r7, #32]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 f8b9 	bl	8003644 <I2C_WaitOnTXISFlagUntilTimeout>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d001      	beq.n	80034da <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e033      	b.n	8003542 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034da:	1dbb      	adds	r3, r7, #6
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d107      	bne.n	80034f2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034e2:	2308      	movs	r3, #8
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80034f0:	e019      	b.n	8003526 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034f2:	2308      	movs	r3, #8
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003506:	6a39      	ldr	r1, [r7, #32]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	0018      	movs	r0, r3
 800350c:	f000 f89a 	bl	8003644 <I2C_WaitOnTXISFlagUntilTimeout>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d001      	beq.n	8003518 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e014      	b.n	8003542 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003518:	2308      	movs	r3, #8
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003526:	6a3a      	ldr	r2, [r7, #32]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	0013      	movs	r3, r2
 8003530:	2200      	movs	r2, #0
 8003532:	2140      	movs	r1, #64	@ 0x40
 8003534:	f000 f82e 	bl	8003594 <I2C_WaitOnFlagUntilTimeout>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	0018      	movs	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bdb0      	pop	{r4, r5, r7, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	80002000 	.word	0x80002000

08003550 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2202      	movs	r2, #2
 8003560:	4013      	ands	r3, r2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d103      	bne.n	800356e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	2b01      	cmp	r3, #1
 800357a:	d007      	beq.n	800358c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2101      	movs	r1, #1
 8003588:	430a      	orrs	r2, r1
 800358a:	619a      	str	r2, [r3, #24]
  }
}
 800358c:	46c0      	nop			@ (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a4:	e03a      	b.n	800361c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 f8d3 	bl	8003758 <I2C_IsErrorOccurred>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d001      	beq.n	80035ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e040      	b.n	800363c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	d02d      	beq.n	800361c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7ff f978 	bl	80028b4 <HAL_GetTick>
 80035c4:	0002      	movs	r2, r0
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d122      	bne.n	800361c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	425a      	negs	r2, r3
 80035e6:	4153      	adcs	r3, r2
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	001a      	movs	r2, r3
 80035ec:	1dfb      	adds	r3, r7, #7
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d113      	bne.n	800361c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f8:	2220      	movs	r2, #32
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2241      	movs	r2, #65	@ 0x41
 8003604:	2120      	movs	r1, #32
 8003606:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2242      	movs	r2, #66	@ 0x42
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2240      	movs	r2, #64	@ 0x40
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e00f      	b.n	800363c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	425a      	negs	r2, r3
 800362c:	4153      	adcs	r3, r2
 800362e:	b2db      	uxtb	r3, r3
 8003630:	001a      	movs	r2, r3
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d0b5      	beq.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	b004      	add	sp, #16
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003650:	e032      	b.n	80036b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 f87d 	bl	8003758 <I2C_IsErrorOccurred>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e030      	b.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	3301      	adds	r3, #1
 800366a:	d025      	beq.n	80036b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366c:	f7ff f922 	bl	80028b4 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d302      	bcc.n	8003682 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11a      	bne.n	80036b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2202      	movs	r2, #2
 800368a:	4013      	ands	r3, r2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d013      	beq.n	80036b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	2220      	movs	r2, #32
 8003696:	431a      	orrs	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2241      	movs	r2, #65	@ 0x41
 80036a0:	2120      	movs	r1, #32
 80036a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2242      	movs	r2, #66	@ 0x42
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2240      	movs	r2, #64	@ 0x40
 80036b0:	2100      	movs	r1, #0
 80036b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e007      	b.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2202      	movs	r2, #2
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d1c5      	bne.n	8003652 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b004      	add	sp, #16
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036dc:	e02f      	b.n	800373e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f837 	bl	8003758 <I2C_IsErrorOccurred>
 80036ea:	1e03      	subs	r3, r0, #0
 80036ec:	d001      	beq.n	80036f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e02d      	b.n	800374e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7ff f8df 	bl	80028b4 <HAL_GetTick>
 80036f6:	0002      	movs	r2, r0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d11a      	bne.n	800373e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2220      	movs	r2, #32
 8003710:	4013      	ands	r3, r2
 8003712:	2b20      	cmp	r3, #32
 8003714:	d013      	beq.n	800373e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	2220      	movs	r2, #32
 800371c:	431a      	orrs	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2241      	movs	r2, #65	@ 0x41
 8003726:	2120      	movs	r1, #32
 8003728:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2242      	movs	r2, #66	@ 0x42
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2240      	movs	r2, #64	@ 0x40
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e007      	b.n	800374e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2220      	movs	r2, #32
 8003746:	4013      	ands	r3, r2
 8003748:	2b20      	cmp	r3, #32
 800374a:	d1c8      	bne.n	80036de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	@ 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2327      	movs	r3, #39	@ 0x27
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2210      	movs	r2, #16
 8003780:	4013      	ands	r3, r2
 8003782:	d100      	bne.n	8003786 <I2C_IsErrorOccurred+0x2e>
 8003784:	e079      	b.n	800387a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2210      	movs	r2, #16
 800378c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800378e:	e057      	b.n	8003840 <I2C_IsErrorOccurred+0xe8>
 8003790:	2227      	movs	r2, #39	@ 0x27
 8003792:	18bb      	adds	r3, r7, r2
 8003794:	18ba      	adds	r2, r7, r2
 8003796:	7812      	ldrb	r2, [r2, #0]
 8003798:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3301      	adds	r3, #1
 800379e:	d04f      	beq.n	8003840 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037a0:	f7ff f888 	bl	80028b4 <HAL_GetTick>
 80037a4:	0002      	movs	r2, r0
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <I2C_IsErrorOccurred+0x5e>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d144      	bne.n	8003840 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	2380      	movs	r3, #128	@ 0x80
 80037be:	01db      	lsls	r3, r3, #7
 80037c0:	4013      	ands	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037c4:	2013      	movs	r0, #19
 80037c6:	183b      	adds	r3, r7, r0
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	2142      	movs	r1, #66	@ 0x42
 80037cc:	5c52      	ldrb	r2, [r2, r1]
 80037ce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	2380      	movs	r3, #128	@ 0x80
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	401a      	ands	r2, r3
 80037dc:	2380      	movs	r3, #128	@ 0x80
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d126      	bne.n	8003832 <I2C_IsErrorOccurred+0xda>
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	2380      	movs	r3, #128	@ 0x80
 80037e8:	01db      	lsls	r3, r3, #7
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d021      	beq.n	8003832 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80037ee:	183b      	adds	r3, r7, r0
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d01d      	beq.n	8003832 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2180      	movs	r1, #128	@ 0x80
 8003802:	01c9      	lsls	r1, r1, #7
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003808:	f7ff f854 	bl	80028b4 <HAL_GetTick>
 800380c:	0003      	movs	r3, r0
 800380e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003810:	e00f      	b.n	8003832 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003812:	f7ff f84f 	bl	80028b4 <HAL_GetTick>
 8003816:	0002      	movs	r2, r0
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b19      	cmp	r3, #25
 800381e:	d908      	bls.n	8003832 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	2220      	movs	r2, #32
 8003824:	4313      	orrs	r3, r2
 8003826:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003828:	2327      	movs	r3, #39	@ 0x27
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]

              break;
 8003830:	e006      	b.n	8003840 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2220      	movs	r2, #32
 800383a:	4013      	ands	r3, r2
 800383c:	2b20      	cmp	r3, #32
 800383e:	d1e8      	bne.n	8003812 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2220      	movs	r2, #32
 8003848:	4013      	ands	r3, r2
 800384a:	2b20      	cmp	r3, #32
 800384c:	d004      	beq.n	8003858 <I2C_IsErrorOccurred+0x100>
 800384e:	2327      	movs	r3, #39	@ 0x27
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d09b      	beq.n	8003790 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003858:	2327      	movs	r3, #39	@ 0x27
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2220      	movs	r2, #32
 8003868:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	2204      	movs	r2, #4
 800386e:	4313      	orrs	r3, r2
 8003870:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003872:	2327      	movs	r3, #39	@ 0x27
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4013      	ands	r3, r2
 800388a:	d00c      	beq.n	80038a6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	2201      	movs	r2, #1
 8003890:	4313      	orrs	r3, r2
 8003892:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2280      	movs	r2, #128	@ 0x80
 800389a:	0052      	lsls	r2, r2, #1
 800389c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800389e:	2327      	movs	r3, #39	@ 0x27
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4013      	ands	r3, r2
 80038ae:	d00c      	beq.n	80038ca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	2208      	movs	r2, #8
 80038b4:	4313      	orrs	r3, r2
 80038b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2280      	movs	r2, #128	@ 0x80
 80038be:	00d2      	lsls	r2, r2, #3
 80038c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038c2:	2327      	movs	r3, #39	@ 0x27
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	2380      	movs	r3, #128	@ 0x80
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4013      	ands	r3, r2
 80038d2:	d00c      	beq.n	80038ee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	2202      	movs	r2, #2
 80038d8:	4313      	orrs	r3, r2
 80038da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2280      	movs	r2, #128	@ 0x80
 80038e2:	0092      	lsls	r2, r2, #2
 80038e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038e6:	2327      	movs	r3, #39	@ 0x27
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80038ee:	2327      	movs	r3, #39	@ 0x27
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01d      	beq.n	8003934 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	0018      	movs	r0, r3
 80038fc:	f7ff fe28 	bl	8003550 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	490e      	ldr	r1, [pc, #56]	@ (8003944 <I2C_IsErrorOccurred+0x1ec>)
 800390c:	400a      	ands	r2, r1
 800390e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	431a      	orrs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2241      	movs	r2, #65	@ 0x41
 8003920:	2120      	movs	r1, #32
 8003922:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2242      	movs	r2, #66	@ 0x42
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2240      	movs	r2, #64	@ 0x40
 8003930:	2100      	movs	r1, #0
 8003932:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003934:	2327      	movs	r3, #39	@ 0x27
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	781b      	ldrb	r3, [r3, #0]
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b00a      	add	sp, #40	@ 0x28
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	fe00e800 	.word	0xfe00e800

08003948 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	0008      	movs	r0, r1
 8003952:	0011      	movs	r1, r2
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	240a      	movs	r4, #10
 8003958:	193b      	adds	r3, r7, r4
 800395a:	1c02      	adds	r2, r0, #0
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	2009      	movs	r0, #9
 8003960:	183b      	adds	r3, r7, r0
 8003962:	1c0a      	adds	r2, r1, #0
 8003964:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003966:	193b      	adds	r3, r7, r4
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	059b      	lsls	r3, r3, #22
 800396c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800396e:	183b      	adds	r3, r7, r0
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	0419      	lsls	r1, r3, #16
 8003974:	23ff      	movs	r3, #255	@ 0xff
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800397a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003982:	4313      	orrs	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003992:	0d51      	lsrs	r1, r2, #21
 8003994:	2280      	movs	r2, #128	@ 0x80
 8003996:	00d2      	lsls	r2, r2, #3
 8003998:	400a      	ands	r2, r1
 800399a:	4907      	ldr	r1, [pc, #28]	@ (80039b8 <I2C_TransferConfig+0x70>)
 800399c:	430a      	orrs	r2, r1
 800399e:	43d2      	mvns	r2, r2
 80039a0:	401a      	ands	r2, r3
 80039a2:	0011      	movs	r1, r2
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b007      	add	sp, #28
 80039b4:	bd90      	pop	{r4, r7, pc}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	03ff63ff 	.word	0x03ff63ff

080039bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2241      	movs	r2, #65	@ 0x41
 80039ca:	5c9b      	ldrb	r3, [r3, r2]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d138      	bne.n	8003a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2240      	movs	r2, #64	@ 0x40
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039dc:	2302      	movs	r3, #2
 80039de:	e032      	b.n	8003a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2240      	movs	r2, #64	@ 0x40
 80039e4:	2101      	movs	r1, #1
 80039e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2241      	movs	r2, #65	@ 0x41
 80039ec:	2124      	movs	r1, #36	@ 0x24
 80039ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	438a      	bics	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4911      	ldr	r1, [pc, #68]	@ (8003a50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2241      	movs	r2, #65	@ 0x41
 8003a34:	2120      	movs	r1, #32
 8003a36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2240      	movs	r2, #64	@ 0x40
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e000      	b.n	8003a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	ffffefff 	.word	0xffffefff

08003a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2241      	movs	r2, #65	@ 0x41
 8003a62:	5c9b      	ldrb	r3, [r3, r2]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d139      	bne.n	8003ade <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2240      	movs	r2, #64	@ 0x40
 8003a6e:	5c9b      	ldrb	r3, [r3, r2]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e033      	b.n	8003ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2240      	movs	r2, #64	@ 0x40
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2241      	movs	r2, #65	@ 0x41
 8003a84:	2124      	movs	r1, #36	@ 0x24
 8003a86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2101      	movs	r1, #1
 8003a94:	438a      	bics	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a11      	ldr	r2, [pc, #68]	@ (8003ae8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2241      	movs	r2, #65	@ 0x41
 8003ace:	2120      	movs	r1, #32
 8003ad0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2240      	movs	r2, #64	@ 0x40
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
  }
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	fffff0ff 	.word	0xfffff0ff

08003aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003af4:	4b19      	ldr	r3, [pc, #100]	@ (8003b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	@ (8003b60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	4b17      	ldr	r3, [pc, #92]	@ (8003b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	2380      	movs	r3, #128	@ 0x80
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d11f      	bne.n	8003b50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003b10:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	0013      	movs	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4912      	ldr	r1, [pc, #72]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f7fc faf8 	bl	8000114 <__udivsi3>
 8003b24:	0003      	movs	r3, r0
 8003b26:	3301      	adds	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b2a:	e008      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e001      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e009      	b.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3e:	4b07      	ldr	r3, [pc, #28]	@ (8003b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	401a      	ands	r2, r3
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0ed      	beq.n	8003b2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	0018      	movs	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	fffff9ff 	.word	0xfffff9ff
 8003b64:	20000008 	.word	0x20000008
 8003b68:	000f4240 	.word	0x000f4240

08003b6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003b70:	4b03      	ldr	r3, [pc, #12]	@ (8003b80 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	23e0      	movs	r3, #224	@ 0xe0
 8003b76:	01db      	lsls	r3, r3, #7
 8003b78:	4013      	ands	r3, r2
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e2fe      	b.n	8004194 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x1e>
 8003ba0:	e07c      	b.n	8003c9c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba2:	4bc3      	ldr	r3, [pc, #780]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2238      	movs	r2, #56	@ 0x38
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bac:	4bc0      	ldr	r3, [pc, #768]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d102      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3e>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	4bb9      	ldr	r3, [pc, #740]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	2380      	movs	r3, #128	@ 0x80
 8003bce:	029b      	lsls	r3, r3, #10
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d062      	beq.n	8003c9a <HAL_RCC_OscConfig+0x116>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d15e      	bne.n	8003c9a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e2d9      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	025b      	lsls	r3, r3, #9
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_OscConfig+0x78>
 8003bec:	4bb0      	ldr	r3, [pc, #704]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4baf      	ldr	r3, [pc, #700]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003bf2:	2180      	movs	r1, #128	@ 0x80
 8003bf4:	0249      	lsls	r1, r1, #9
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e020      	b.n	8003c3e <HAL_RCC_OscConfig+0xba>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	23a0      	movs	r3, #160	@ 0xa0
 8003c02:	02db      	lsls	r3, r3, #11
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d10e      	bne.n	8003c26 <HAL_RCC_OscConfig+0xa2>
 8003c08:	4ba9      	ldr	r3, [pc, #676]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4ba8      	ldr	r3, [pc, #672]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	2180      	movs	r1, #128	@ 0x80
 8003c10:	02c9      	lsls	r1, r1, #11
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	4ba6      	ldr	r3, [pc, #664]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4ba5      	ldr	r3, [pc, #660]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	2180      	movs	r1, #128	@ 0x80
 8003c1e:	0249      	lsls	r1, r1, #9
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e00b      	b.n	8003c3e <HAL_RCC_OscConfig+0xba>
 8003c26:	4ba2      	ldr	r3, [pc, #648]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4ba1      	ldr	r3, [pc, #644]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c2c:	49a1      	ldr	r1, [pc, #644]	@ (8003eb4 <HAL_RCC_OscConfig+0x330>)
 8003c2e:	400a      	ands	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	4b9f      	ldr	r3, [pc, #636]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b9e      	ldr	r3, [pc, #632]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c38:	499f      	ldr	r1, [pc, #636]	@ (8003eb8 <HAL_RCC_OscConfig+0x334>)
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d014      	beq.n	8003c70 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe fe35 	bl	80028b4 <HAL_GetTick>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fe fe30 	bl	80028b4 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	@ 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e298      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c62:	4b93      	ldr	r3, [pc, #588]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	2380      	movs	r3, #128	@ 0x80
 8003c68:	029b      	lsls	r3, r3, #10
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0xcc>
 8003c6e:	e015      	b.n	8003c9c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fe20 	bl	80028b4 <HAL_GetTick>
 8003c74:	0003      	movs	r3, r0
 8003c76:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c7a:	f7fe fe1b 	bl	80028b4 <HAL_GetTick>
 8003c7e:	0002      	movs	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b64      	cmp	r3, #100	@ 0x64
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e283      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8c:	4b88      	ldr	r3, [pc, #544]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	@ 0x80
 8003c92:	029b      	lsls	r3, r3, #10
 8003c94:	4013      	ands	r3, r2
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0xf6>
 8003c98:	e000      	b.n	8003c9c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d100      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x124>
 8003ca6:	e099      	b.n	8003ddc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca8:	4b81      	ldr	r3, [pc, #516]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2238      	movs	r2, #56	@ 0x38
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	4013      	ands	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d102      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x144>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d002      	beq.n	8003cce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d135      	bne.n	8003d3a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cce:	4b78      	ldr	r3, [pc, #480]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	2380      	movs	r3, #128	@ 0x80
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x162>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e256      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b72      	ldr	r3, [pc, #456]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4a74      	ldr	r2, [pc, #464]	@ (8003ebc <HAL_RCC_OscConfig+0x338>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	021a      	lsls	r2, r3, #8
 8003cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d112      	bne.n	8003d28 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d02:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6e      	ldr	r2, [pc, #440]	@ (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	4b67      	ldr	r3, [pc, #412]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d12:	430a      	orrs	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d16:	4b66      	ldr	r3, [pc, #408]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	0adb      	lsrs	r3, r3, #11
 8003d1c:	2207      	movs	r2, #7
 8003d1e:	4013      	ands	r3, r2
 8003d20:	4a68      	ldr	r2, [pc, #416]	@ (8003ec4 <HAL_RCC_OscConfig+0x340>)
 8003d22:	40da      	lsrs	r2, r3
 8003d24:	4b68      	ldr	r3, [pc, #416]	@ (8003ec8 <HAL_RCC_OscConfig+0x344>)
 8003d26:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d28:	4b68      	ldr	r3, [pc, #416]	@ (8003ecc <HAL_RCC_OscConfig+0x348>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fe fd65 	bl	80027fc <HAL_InitTick>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d051      	beq.n	8003dda <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e22c      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d030      	beq.n	8003da4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d42:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5e      	ldr	r2, [pc, #376]	@ (8003ec0 <HAL_RCC_OscConfig+0x33c>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	4b57      	ldr	r3, [pc, #348]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d52:	430a      	orrs	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003d56:	4b56      	ldr	r3, [pc, #344]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b55      	ldr	r3, [pc, #340]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d5c:	2180      	movs	r1, #128	@ 0x80
 8003d5e:	0049      	lsls	r1, r1, #1
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe fda6 	bl	80028b4 <HAL_GetTick>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6e:	f7fe fda1 	bl	80028b4 <HAL_GetTick>
 8003d72:	0002      	movs	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e209      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d80:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2380      	movs	r3, #128	@ 0x80
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8c:	4b48      	ldr	r3, [pc, #288]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4a4a      	ldr	r2, [pc, #296]	@ (8003ebc <HAL_RCC_OscConfig+0x338>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	0019      	movs	r1, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	021a      	lsls	r2, r3, #8
 8003d9c:	4b44      	ldr	r3, [pc, #272]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	e01b      	b.n	8003ddc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003da4:	4b42      	ldr	r3, [pc, #264]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b41      	ldr	r3, [pc, #260]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003daa:	4949      	ldr	r1, [pc, #292]	@ (8003ed0 <HAL_RCC_OscConfig+0x34c>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fe fd80 	bl	80028b4 <HAL_GetTick>
 8003db4:	0003      	movs	r3, r0
 8003db6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dba:	f7fe fd7b 	bl	80028b4 <HAL_GetTick>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1e3      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dcc:	4b38      	ldr	r3, [pc, #224]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x236>
 8003dd8:	e000      	b.n	8003ddc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dda:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2208      	movs	r2, #8
 8003de2:	4013      	ands	r3, r2
 8003de4:	d047      	beq.n	8003e76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003de6:	4b32      	ldr	r3, [pc, #200]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2238      	movs	r2, #56	@ 0x38
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b18      	cmp	r3, #24
 8003df0:	d10a      	bne.n	8003e08 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003df2:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df6:	2202      	movs	r2, #2
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d03c      	beq.n	8003e76 <HAL_RCC_OscConfig+0x2f2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d138      	bne.n	8003e76 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e1c5      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d019      	beq.n	8003e44 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003e10:	4b27      	ldr	r3, [pc, #156]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003e12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e14:	4b26      	ldr	r3, [pc, #152]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003e16:	2101      	movs	r1, #1
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fe fd4a 	bl	80028b4 <HAL_GetTick>
 8003e20:	0003      	movs	r3, r0
 8003e22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e26:	f7fe fd45 	bl	80028b4 <HAL_GetTick>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e1ad      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e38:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d0f1      	beq.n	8003e26 <HAL_RCC_OscConfig+0x2a2>
 8003e42:	e018      	b.n	8003e76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003e44:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003e46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e48:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	438a      	bics	r2, r1
 8003e4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fe fd30 	bl	80028b4 <HAL_GetTick>
 8003e54:	0003      	movs	r3, r0
 8003e56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5a:	f7fe fd2b 	bl	80028b4 <HAL_GetTick>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e193      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e6c:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e70:	2202      	movs	r2, #2
 8003e72:	4013      	ands	r3, r2
 8003e74:	d1f1      	bne.n	8003e5a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d100      	bne.n	8003e82 <HAL_RCC_OscConfig+0x2fe>
 8003e80:	e0c6      	b.n	8004010 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e82:	231f      	movs	r3, #31
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e8a:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2238      	movs	r2, #56	@ 0x38
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d11e      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <HAL_RCC_OscConfig+0x32c>)
 8003e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x31e>
 8003ea0:	e0b6      	b.n	8004010 <HAL_RCC_OscConfig+0x48c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d000      	beq.n	8003eac <HAL_RCC_OscConfig+0x328>
 8003eaa:	e0b1      	b.n	8004010 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e171      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	fffeffff 	.word	0xfffeffff
 8003eb8:	fffbffff 	.word	0xfffbffff
 8003ebc:	ffff80ff 	.word	0xffff80ff
 8003ec0:	ffffc7ff 	.word	0xffffc7ff
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	20000008 	.word	0x20000008
 8003ecc:	20000000 	.word	0x20000000
 8003ed0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ed4:	4bb1      	ldr	r3, [pc, #708]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ed8:	2380      	movs	r3, #128	@ 0x80
 8003eda:	055b      	lsls	r3, r3, #21
 8003edc:	4013      	ands	r3, r2
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x360>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x362>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d011      	beq.n	8003f0e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	4bac      	ldr	r3, [pc, #688]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eee:	4bab      	ldr	r3, [pc, #684]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003ef0:	2180      	movs	r1, #128	@ 0x80
 8003ef2:	0549      	lsls	r1, r1, #21
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ef8:	4ba8      	ldr	r3, [pc, #672]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	055b      	lsls	r3, r3, #21
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003f06:	231f      	movs	r3, #31
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f0e:	4ba4      	ldr	r3, [pc, #656]	@ (80041a0 <HAL_RCC_OscConfig+0x61c>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	2380      	movs	r3, #128	@ 0x80
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4013      	ands	r3, r2
 8003f18:	d11a      	bne.n	8003f50 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f1a:	4ba1      	ldr	r3, [pc, #644]	@ (80041a0 <HAL_RCC_OscConfig+0x61c>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4ba0      	ldr	r3, [pc, #640]	@ (80041a0 <HAL_RCC_OscConfig+0x61c>)
 8003f20:	2180      	movs	r1, #128	@ 0x80
 8003f22:	0049      	lsls	r1, r1, #1
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003f28:	f7fe fcc4 	bl	80028b4 <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f32:	f7fe fcbf 	bl	80028b4 <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e127      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f44:	4b96      	ldr	r3, [pc, #600]	@ (80041a0 <HAL_RCC_OscConfig+0x61c>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	@ 0x80
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3e2>
 8003f58:	4b90      	ldr	r3, [pc, #576]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f5e:	2101      	movs	r1, #1
 8003f60:	430a      	orrs	r2, r1
 8003f62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f64:	e01c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x41c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x404>
 8003f6e:	4b8b      	ldr	r3, [pc, #556]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f72:	4b8a      	ldr	r3, [pc, #552]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f74:	2104      	movs	r1, #4
 8003f76:	430a      	orrs	r2, r1
 8003f78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f7a:	4b88      	ldr	r3, [pc, #544]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f7e:	4b87      	ldr	r3, [pc, #540]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f80:	2101      	movs	r1, #1
 8003f82:	430a      	orrs	r2, r1
 8003f84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x41c>
 8003f88:	4b84      	ldr	r3, [pc, #528]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f8c:	4b83      	ldr	r3, [pc, #524]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f8e:	2101      	movs	r1, #1
 8003f90:	438a      	bics	r2, r1
 8003f92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f94:	4b81      	ldr	r3, [pc, #516]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f98:	4b80      	ldr	r3, [pc, #512]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d014      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fe fc84 	bl	80028b4 <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb0:	e009      	b.n	8003fc6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fe fc7f 	bl	80028b4 <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	4a79      	ldr	r2, [pc, #484]	@ (80041a4 <HAL_RCC_OscConfig+0x620>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0e6      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc6:	4b75      	ldr	r3, [pc, #468]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x42e>
 8003fd0:	e013      	b.n	8003ffa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe fc6f 	bl	80028b4 <HAL_GetTick>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fda:	e009      	b.n	8003ff0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fe fc6a 	bl	80028b4 <HAL_GetTick>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	4a6f      	ldr	r2, [pc, #444]	@ (80041a4 <HAL_RCC_OscConfig+0x620>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0d1      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ffa:	231f      	movs	r3, #31
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4b65      	ldr	r3, [pc, #404]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8004006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004008:	4b64      	ldr	r3, [pc, #400]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 800400a:	4967      	ldr	r1, [pc, #412]	@ (80041a8 <HAL_RCC_OscConfig+0x624>)
 800400c:	400a      	ands	r2, r1
 800400e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d100      	bne.n	800401a <HAL_RCC_OscConfig+0x496>
 8004018:	e0bb      	b.n	8004192 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401a:	4b60      	ldr	r3, [pc, #384]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2238      	movs	r2, #56	@ 0x38
 8004020:	4013      	ands	r3, r2
 8004022:	2b10      	cmp	r3, #16
 8004024:	d100      	bne.n	8004028 <HAL_RCC_OscConfig+0x4a4>
 8004026:	e07b      	b.n	8004120 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d156      	bne.n	80040de <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b5a      	ldr	r3, [pc, #360]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b59      	ldr	r3, [pc, #356]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8004036:	495d      	ldr	r1, [pc, #372]	@ (80041ac <HAL_RCC_OscConfig+0x628>)
 8004038:	400a      	ands	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fc3a 	bl	80028b4 <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004046:	f7fe fc35 	bl	80028b4 <HAL_GetTick>
 800404a:	0002      	movs	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e09d      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004058:	4b50      	ldr	r3, [pc, #320]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	049b      	lsls	r3, r3, #18
 8004060:	4013      	ands	r3, r2
 8004062:	d1f0      	bne.n	8004046 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004064:	4b4d      	ldr	r3, [pc, #308]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a51      	ldr	r2, [pc, #324]	@ (80041b0 <HAL_RCC_OscConfig+0x62c>)
 800406a:	4013      	ands	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1a      	ldr	r2, [r3, #32]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004090:	431a      	orrs	r2, r3
 8004092:	4b42      	ldr	r3, [pc, #264]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004098:	4b40      	ldr	r3, [pc, #256]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b3f      	ldr	r3, [pc, #252]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 800409e:	2180      	movs	r1, #128	@ 0x80
 80040a0:	0449      	lsls	r1, r1, #17
 80040a2:	430a      	orrs	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80040a6:	4b3d      	ldr	r3, [pc, #244]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	4b3c      	ldr	r3, [pc, #240]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 80040ac:	2180      	movs	r1, #128	@ 0x80
 80040ae:	0549      	lsls	r1, r1, #21
 80040b0:	430a      	orrs	r2, r1
 80040b2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe fbfe 	bl	80028b4 <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040be:	f7fe fbf9 	bl	80028b4 <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e061      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d0:	4b32      	ldr	r3, [pc, #200]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	049b      	lsls	r3, r3, #18
 80040d8:	4013      	ands	r3, r2
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x53a>
 80040dc:	e059      	b.n	8004192 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	4b2f      	ldr	r3, [pc, #188]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b2e      	ldr	r3, [pc, #184]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 80040e4:	4931      	ldr	r1, [pc, #196]	@ (80041ac <HAL_RCC_OscConfig+0x628>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fe fbe3 	bl	80028b4 <HAL_GetTick>
 80040ee:	0003      	movs	r3, r0
 80040f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fe fbde 	bl	80028b4 <HAL_GetTick>
 80040f8:	0002      	movs	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e046      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004106:	4b25      	ldr	r3, [pc, #148]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	2380      	movs	r3, #128	@ 0x80
 800410c:	049b      	lsls	r3, r3, #18
 800410e:	4013      	ands	r3, r2
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004112:	4b22      	ldr	r3, [pc, #136]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	4b21      	ldr	r3, [pc, #132]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 8004118:	4926      	ldr	r1, [pc, #152]	@ (80041b4 <HAL_RCC_OscConfig+0x630>)
 800411a:	400a      	ands	r2, r1
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	e038      	b.n	8004192 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e033      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800412c:	4b1b      	ldr	r3, [pc, #108]	@ (800419c <HAL_RCC_OscConfig+0x618>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2203      	movs	r2, #3
 8004136:	401a      	ands	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	429a      	cmp	r2, r3
 800413e:	d126      	bne.n	800418e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2270      	movs	r2, #112	@ 0x70
 8004144:	401a      	ands	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d11f      	bne.n	800418e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	23fe      	movs	r3, #254	@ 0xfe
 8004152:	01db      	lsls	r3, r3, #7
 8004154:	401a      	ands	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d116      	bne.n	800418e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	23f8      	movs	r3, #248	@ 0xf8
 8004164:	039b      	lsls	r3, r3, #14
 8004166:	401a      	ands	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d10e      	bne.n	800418e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	23e0      	movs	r3, #224	@ 0xe0
 8004174:	051b      	lsls	r3, r3, #20
 8004176:	401a      	ands	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d106      	bne.n	800418e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	0f5b      	lsrs	r3, r3, #29
 8004184:	075a      	lsls	r2, r3, #29
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d001      	beq.n	8004192 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	b008      	add	sp, #32
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40021000 	.word	0x40021000
 80041a0:	40007000 	.word	0x40007000
 80041a4:	00001388 	.word	0x00001388
 80041a8:	efffffff 	.word	0xefffffff
 80041ac:	feffffff 	.word	0xfeffffff
 80041b0:	11c1808c 	.word	0x11c1808c
 80041b4:	eefefffc 	.word	0xeefefffc

080041b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0e9      	b.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b76      	ldr	r3, [pc, #472]	@ (80043a8 <HAL_RCC_ClockConfig+0x1f0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2207      	movs	r2, #7
 80041d2:	4013      	ands	r3, r2
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d91e      	bls.n	8004218 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b73      	ldr	r3, [pc, #460]	@ (80043a8 <HAL_RCC_ClockConfig+0x1f0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2207      	movs	r2, #7
 80041e0:	4393      	bics	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	4b70      	ldr	r3, [pc, #448]	@ (80043a8 <HAL_RCC_ClockConfig+0x1f0>)
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041ec:	f7fe fb62 	bl	80028b4 <HAL_GetTick>
 80041f0:	0003      	movs	r3, r0
 80041f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041f4:	e009      	b.n	800420a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f6:	f7fe fb5d 	bl	80028b4 <HAL_GetTick>
 80041fa:	0002      	movs	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	4a6a      	ldr	r2, [pc, #424]	@ (80043ac <HAL_RCC_ClockConfig+0x1f4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e0ca      	b.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800420a:	4b67      	ldr	r3, [pc, #412]	@ (80043a8 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2207      	movs	r2, #7
 8004210:	4013      	ands	r3, r2
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d1ee      	bne.n	80041f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2202      	movs	r2, #2
 800421e:	4013      	ands	r3, r2
 8004220:	d015      	beq.n	800424e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2204      	movs	r2, #4
 8004228:	4013      	ands	r3, r2
 800422a:	d006      	beq.n	800423a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800422c:	4b60      	ldr	r3, [pc, #384]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b5f      	ldr	r3, [pc, #380]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004232:	21e0      	movs	r1, #224	@ 0xe0
 8004234:	01c9      	lsls	r1, r1, #7
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423a:	4b5d      	ldr	r3, [pc, #372]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4a5d      	ldr	r2, [pc, #372]	@ (80043b4 <HAL_RCC_ClockConfig+0x1fc>)
 8004240:	4013      	ands	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	4b59      	ldr	r3, [pc, #356]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2201      	movs	r2, #1
 8004254:	4013      	ands	r3, r2
 8004256:	d057      	beq.n	8004308 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d107      	bne.n	8004270 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004260:	4b53      	ldr	r3, [pc, #332]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2380      	movs	r3, #128	@ 0x80
 8004266:	029b      	lsls	r3, r3, #10
 8004268:	4013      	ands	r3, r2
 800426a:	d12b      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e097      	b.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d107      	bne.n	8004288 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004278:	4b4d      	ldr	r3, [pc, #308]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	049b      	lsls	r3, r3, #18
 8004280:	4013      	ands	r3, r2
 8004282:	d11f      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e08b      	b.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004290:	4b47      	ldr	r3, [pc, #284]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4013      	ands	r3, r2
 800429a:	d113      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e07f      	b.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a8:	4b41      	ldr	r3, [pc, #260]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 80042aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ac:	2202      	movs	r2, #2
 80042ae:	4013      	ands	r3, r2
 80042b0:	d108      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e074      	b.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b6:	4b3e      	ldr	r3, [pc, #248]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 80042b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ba:	2202      	movs	r2, #2
 80042bc:	4013      	ands	r3, r2
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e06d      	b.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042c4:	4b3a      	ldr	r3, [pc, #232]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2207      	movs	r2, #7
 80042ca:	4393      	bics	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	4b37      	ldr	r3, [pc, #220]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d8:	f7fe faec 	bl	80028b4 <HAL_GetTick>
 80042dc:	0003      	movs	r3, r0
 80042de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e0:	e009      	b.n	80042f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e2:	f7fe fae7 	bl	80028b4 <HAL_GetTick>
 80042e6:	0002      	movs	r2, r0
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	4a2f      	ldr	r2, [pc, #188]	@ (80043ac <HAL_RCC_ClockConfig+0x1f4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e054      	b.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f6:	4b2e      	ldr	r3, [pc, #184]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2238      	movs	r2, #56	@ 0x38
 80042fc:	401a      	ands	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	429a      	cmp	r2, r3
 8004306:	d1ec      	bne.n	80042e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004308:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2207      	movs	r2, #7
 800430e:	4013      	ands	r3, r2
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d21e      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2207      	movs	r2, #7
 800431c:	4393      	bics	r3, r2
 800431e:	0019      	movs	r1, r3
 8004320:	4b21      	ldr	r3, [pc, #132]	@ (80043a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004328:	f7fe fac4 	bl	80028b4 <HAL_GetTick>
 800432c:	0003      	movs	r3, r0
 800432e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004330:	e009      	b.n	8004346 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004332:	f7fe fabf 	bl	80028b4 <HAL_GetTick>
 8004336:	0002      	movs	r2, r0
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	4a1b      	ldr	r2, [pc, #108]	@ (80043ac <HAL_RCC_ClockConfig+0x1f4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e02c      	b.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004346:	4b18      	ldr	r3, [pc, #96]	@ (80043a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2207      	movs	r2, #7
 800434c:	4013      	ands	r3, r2
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d1ee      	bne.n	8004332 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2204      	movs	r2, #4
 800435a:	4013      	ands	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800435e:	4b14      	ldr	r3, [pc, #80]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	4a15      	ldr	r2, [pc, #84]	@ (80043b8 <HAL_RCC_ClockConfig+0x200>)
 8004364:	4013      	ands	r3, r2
 8004366:	0019      	movs	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	4b10      	ldr	r3, [pc, #64]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004372:	f000 f829 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004376:	0001      	movs	r1, r0
 8004378:	4b0d      	ldr	r3, [pc, #52]	@ (80043b0 <HAL_RCC_ClockConfig+0x1f8>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	220f      	movs	r2, #15
 8004380:	401a      	ands	r2, r3
 8004382:	4b0e      	ldr	r3, [pc, #56]	@ (80043bc <HAL_RCC_ClockConfig+0x204>)
 8004384:	0092      	lsls	r2, r2, #2
 8004386:	58d3      	ldr	r3, [r2, r3]
 8004388:	221f      	movs	r2, #31
 800438a:	4013      	ands	r3, r2
 800438c:	000a      	movs	r2, r1
 800438e:	40da      	lsrs	r2, r3
 8004390:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <HAL_RCC_ClockConfig+0x208>)
 8004392:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004394:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <HAL_RCC_ClockConfig+0x20c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0018      	movs	r0, r3
 800439a:	f7fe fa2f 	bl	80027fc <HAL_InitTick>
 800439e:	0003      	movs	r3, r0
}
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b004      	add	sp, #16
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40022000 	.word	0x40022000
 80043ac:	00001388 	.word	0x00001388
 80043b0:	40021000 	.word	0x40021000
 80043b4:	fffff0ff 	.word	0xfffff0ff
 80043b8:	ffff8fff 	.word	0xffff8fff
 80043bc:	08007b70 	.word	0x08007b70
 80043c0:	20000008 	.word	0x20000008
 80043c4:	20000000 	.word	0x20000000

080043c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ce:	4b3c      	ldr	r3, [pc, #240]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2238      	movs	r2, #56	@ 0x38
 80043d4:	4013      	ands	r3, r2
 80043d6:	d10f      	bne.n	80043f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80043d8:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	0adb      	lsrs	r3, r3, #11
 80043de:	2207      	movs	r2, #7
 80043e0:	4013      	ands	r3, r2
 80043e2:	2201      	movs	r2, #1
 80043e4:	409a      	lsls	r2, r3
 80043e6:	0013      	movs	r3, r2
 80043e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80043ea:	6839      	ldr	r1, [r7, #0]
 80043ec:	4835      	ldr	r0, [pc, #212]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043ee:	f7fb fe91 	bl	8000114 <__udivsi3>
 80043f2:	0003      	movs	r3, r0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	e05d      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043f8:	4b31      	ldr	r3, [pc, #196]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2238      	movs	r2, #56	@ 0x38
 80043fe:	4013      	ands	r3, r2
 8004400:	2b08      	cmp	r3, #8
 8004402:	d102      	bne.n	800440a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004404:	4b30      	ldr	r3, [pc, #192]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	e054      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800440a:	4b2d      	ldr	r3, [pc, #180]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2238      	movs	r2, #56	@ 0x38
 8004410:	4013      	ands	r3, r2
 8004412:	2b10      	cmp	r3, #16
 8004414:	d138      	bne.n	8004488 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004416:	4b2a      	ldr	r3, [pc, #168]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2203      	movs	r2, #3
 800441c:	4013      	ands	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004420:	4b27      	ldr	r3, [pc, #156]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	2207      	movs	r2, #7
 8004428:	4013      	ands	r3, r2
 800442a:	3301      	adds	r3, #1
 800442c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d10d      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4824      	ldr	r0, [pc, #144]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004438:	f7fb fe6c 	bl	8000114 <__udivsi3>
 800443c:	0003      	movs	r3, r0
 800443e:	0019      	movs	r1, r3
 8004440:	4b1f      	ldr	r3, [pc, #124]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	227f      	movs	r2, #127	@ 0x7f
 8004448:	4013      	ands	r3, r2
 800444a:	434b      	muls	r3, r1
 800444c:	617b      	str	r3, [r7, #20]
        break;
 800444e:	e00d      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	481c      	ldr	r0, [pc, #112]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004454:	f7fb fe5e 	bl	8000114 <__udivsi3>
 8004458:	0003      	movs	r3, r0
 800445a:	0019      	movs	r1, r3
 800445c:	4b18      	ldr	r3, [pc, #96]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	227f      	movs	r2, #127	@ 0x7f
 8004464:	4013      	ands	r3, r2
 8004466:	434b      	muls	r3, r1
 8004468:	617b      	str	r3, [r7, #20]
        break;
 800446a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800446c:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	0f5b      	lsrs	r3, r3, #29
 8004472:	2207      	movs	r2, #7
 8004474:	4013      	ands	r3, r2
 8004476:	3301      	adds	r3, #1
 8004478:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	6978      	ldr	r0, [r7, #20]
 800447e:	f7fb fe49 	bl	8000114 <__udivsi3>
 8004482:	0003      	movs	r3, r0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e015      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004488:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2238      	movs	r2, #56	@ 0x38
 800448e:	4013      	ands	r3, r2
 8004490:	2b20      	cmp	r3, #32
 8004492:	d103      	bne.n	800449c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004494:	2380      	movs	r3, #128	@ 0x80
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800449c:	4b08      	ldr	r3, [pc, #32]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2238      	movs	r2, #56	@ 0x38
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b18      	cmp	r3, #24
 80044a6:	d103      	bne.n	80044b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80044a8:	23fa      	movs	r3, #250	@ 0xfa
 80044aa:	01db      	lsls	r3, r3, #7
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	e001      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044b4:	693b      	ldr	r3, [r7, #16]
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b006      	add	sp, #24
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	40021000 	.word	0x40021000
 80044c4:	00f42400 	.word	0x00f42400
 80044c8:	007a1200 	.word	0x007a1200

080044cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d0:	4b02      	ldr	r3, [pc, #8]	@ (80044dc <HAL_RCC_GetHCLKFreq+0x10>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	20000008 	.word	0x20000008

080044e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e0:	b5b0      	push	{r4, r5, r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80044e4:	f7ff fff2 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 80044e8:	0004      	movs	r4, r0
 80044ea:	f7ff fb3f 	bl	8003b6c <LL_RCC_GetAPB1Prescaler>
 80044ee:	0003      	movs	r3, r0
 80044f0:	0b1a      	lsrs	r2, r3, #12
 80044f2:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044f4:	0092      	lsls	r2, r2, #2
 80044f6:	58d3      	ldr	r3, [r2, r3]
 80044f8:	221f      	movs	r2, #31
 80044fa:	4013      	ands	r3, r2
 80044fc:	40dc      	lsrs	r4, r3
 80044fe:	0023      	movs	r3, r4
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	bdb0      	pop	{r4, r5, r7, pc}
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	08007bb0 	.word	0x08007bb0

0800450c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004514:	2313      	movs	r3, #19
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800451c:	2312      	movs	r3, #18
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	2380      	movs	r3, #128	@ 0x80
 800452a:	029b      	lsls	r3, r3, #10
 800452c:	4013      	ands	r3, r2
 800452e:	d100      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004530:	e0a3      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004532:	2011      	movs	r0, #17
 8004534:	183b      	adds	r3, r7, r0
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453a:	4bc3      	ldr	r3, [pc, #780]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800453c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800453e:	2380      	movs	r3, #128	@ 0x80
 8004540:	055b      	lsls	r3, r3, #21
 8004542:	4013      	ands	r3, r2
 8004544:	d110      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	4bc0      	ldr	r3, [pc, #768]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800454a:	4bbf      	ldr	r3, [pc, #764]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800454c:	2180      	movs	r1, #128	@ 0x80
 800454e:	0549      	lsls	r1, r1, #21
 8004550:	430a      	orrs	r2, r1
 8004552:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004554:	4bbc      	ldr	r3, [pc, #752]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	055b      	lsls	r3, r3, #21
 800455c:	4013      	ands	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004562:	183b      	adds	r3, r7, r0
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004568:	4bb8      	ldr	r3, [pc, #736]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4bb7      	ldr	r3, [pc, #732]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800456e:	2180      	movs	r1, #128	@ 0x80
 8004570:	0049      	lsls	r1, r1, #1
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004576:	f7fe f99d 	bl	80028b4 <HAL_GetTick>
 800457a:	0003      	movs	r3, r0
 800457c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800457e:	e00b      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004580:	f7fe f998 	bl	80028b4 <HAL_GetTick>
 8004584:	0002      	movs	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d904      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800458e:	2313      	movs	r3, #19
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2203      	movs	r2, #3
 8004594:	701a      	strb	r2, [r3, #0]
        break;
 8004596:	e005      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004598:	4bac      	ldr	r3, [pc, #688]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	2380      	movs	r3, #128	@ 0x80
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	4013      	ands	r3, r2
 80045a2:	d0ed      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80045a4:	2313      	movs	r3, #19
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d154      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ae:	4ba6      	ldr	r3, [pc, #664]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045b2:	23c0      	movs	r3, #192	@ 0xc0
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4013      	ands	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d019      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d014      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045ca:	4b9f      	ldr	r3, [pc, #636]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ce:	4aa0      	ldr	r2, [pc, #640]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045d4:	4b9c      	ldr	r3, [pc, #624]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045d8:	4b9b      	ldr	r3, [pc, #620]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045da:	2180      	movs	r1, #128	@ 0x80
 80045dc:	0249      	lsls	r1, r1, #9
 80045de:	430a      	orrs	r2, r1
 80045e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045e2:	4b99      	ldr	r3, [pc, #612]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045e6:	4b98      	ldr	r3, [pc, #608]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e8:	499a      	ldr	r1, [pc, #616]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80045ea:	400a      	ands	r2, r1
 80045ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045ee:	4b96      	ldr	r3, [pc, #600]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4013      	ands	r3, r2
 80045fa:	d016      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fe f95a 	bl	80028b4 <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004604:	e00c      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004606:	f7fe f955 	bl	80028b4 <HAL_GetTick>
 800460a:	0002      	movs	r2, r0
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	4a91      	ldr	r2, [pc, #580]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d904      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004616:	2313      	movs	r3, #19
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2203      	movs	r2, #3
 800461c:	701a      	strb	r2, [r3, #0]
            break;
 800461e:	e004      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004620:	4b89      	ldr	r3, [pc, #548]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	d0ed      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800462a:	2313      	movs	r3, #19
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004634:	4b84      	ldr	r3, [pc, #528]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004638:	4a85      	ldr	r2, [pc, #532]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800463a:	4013      	ands	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004642:	4b81      	ldr	r3, [pc, #516]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004644:	430a      	orrs	r2, r1
 8004646:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004648:	e00c      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800464a:	2312      	movs	r3, #18
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2213      	movs	r2, #19
 8004650:	18ba      	adds	r2, r7, r2
 8004652:	7812      	ldrb	r2, [r2, #0]
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e005      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	2312      	movs	r3, #18
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	2213      	movs	r2, #19
 800465e:	18ba      	adds	r2, r7, r2
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004664:	2311      	movs	r3, #17
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466e:	4b76      	ldr	r3, [pc, #472]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004670:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004672:	4b75      	ldr	r3, [pc, #468]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004674:	4979      	ldr	r1, [pc, #484]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004676:	400a      	ands	r2, r1
 8004678:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2201      	movs	r2, #1
 8004680:	4013      	ands	r3, r2
 8004682:	d009      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004684:	4b70      	ldr	r3, [pc, #448]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004688:	2203      	movs	r2, #3
 800468a:	4393      	bics	r3, r2
 800468c:	0019      	movs	r1, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	4b6d      	ldr	r3, [pc, #436]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004694:	430a      	orrs	r2, r1
 8004696:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2202      	movs	r2, #2
 800469e:	4013      	ands	r3, r2
 80046a0:	d009      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046a2:	4b69      	ldr	r3, [pc, #420]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	220c      	movs	r2, #12
 80046a8:	4393      	bics	r3, r2
 80046aa:	0019      	movs	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b65      	ldr	r3, [pc, #404]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046b2:	430a      	orrs	r2, r1
 80046b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2210      	movs	r2, #16
 80046bc:	4013      	ands	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046c0:	4b61      	ldr	r3, [pc, #388]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c4:	4a66      	ldr	r2, [pc, #408]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046d0:	430a      	orrs	r2, r1
 80046d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2380      	movs	r3, #128	@ 0x80
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4013      	ands	r3, r2
 80046de:	d009      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046e0:	4b59      	ldr	r3, [pc, #356]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	0019      	movs	r1, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	4b56      	ldr	r3, [pc, #344]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046f0:	430a      	orrs	r2, r1
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2380      	movs	r3, #128	@ 0x80
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4013      	ands	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004700:	4b51      	ldr	r3, [pc, #324]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004704:	4a58      	ldr	r2, [pc, #352]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	4b4e      	ldr	r3, [pc, #312]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004710:	430a      	orrs	r2, r1
 8004712:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2220      	movs	r2, #32
 800471a:	4013      	ands	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800471e:	4b4a      	ldr	r3, [pc, #296]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	4a52      	ldr	r2, [pc, #328]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004724:	4013      	ands	r3, r2
 8004726:	0019      	movs	r1, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	4b46      	ldr	r3, [pc, #280]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800472e:	430a      	orrs	r2, r1
 8004730:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	2380      	movs	r3, #128	@ 0x80
 8004738:	01db      	lsls	r3, r3, #7
 800473a:	4013      	ands	r3, r2
 800473c:	d015      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800473e:	4b42      	ldr	r3, [pc, #264]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	0899      	lsrs	r1, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1a      	ldr	r2, [r3, #32]
 800474a:	4b3f      	ldr	r3, [pc, #252]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800474c:	430a      	orrs	r2, r1
 800474e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	2380      	movs	r3, #128	@ 0x80
 8004756:	05db      	lsls	r3, r3, #23
 8004758:	429a      	cmp	r2, r3
 800475a:	d106      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800475c:	4b3a      	ldr	r3, [pc, #232]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	4b39      	ldr	r3, [pc, #228]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004762:	2180      	movs	r1, #128	@ 0x80
 8004764:	0249      	lsls	r1, r1, #9
 8004766:	430a      	orrs	r2, r1
 8004768:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	2380      	movs	r3, #128	@ 0x80
 8004770:	031b      	lsls	r3, r3, #12
 8004772:	4013      	ands	r3, r2
 8004774:	d009      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004776:	4b34      	ldr	r3, [pc, #208]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477a:	2240      	movs	r2, #64	@ 0x40
 800477c:	4393      	bics	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004784:	4b30      	ldr	r3, [pc, #192]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004786:	430a      	orrs	r2, r1
 8004788:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	2380      	movs	r3, #128	@ 0x80
 8004790:	039b      	lsls	r3, r3, #14
 8004792:	4013      	ands	r3, r2
 8004794:	d016      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004796:	4b2c      	ldr	r3, [pc, #176]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	4a35      	ldr	r2, [pc, #212]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800479c:	4013      	ands	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047a4:	4b28      	ldr	r3, [pc, #160]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047a6:	430a      	orrs	r2, r1
 80047a8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047ae:	2380      	movs	r3, #128	@ 0x80
 80047b0:	03db      	lsls	r3, r3, #15
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d106      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80047b6:	4b24      	ldr	r3, [pc, #144]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	4b23      	ldr	r3, [pc, #140]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047bc:	2180      	movs	r1, #128	@ 0x80
 80047be:	0449      	lsls	r1, r1, #17
 80047c0:	430a      	orrs	r2, r1
 80047c2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2380      	movs	r3, #128	@ 0x80
 80047ca:	03db      	lsls	r3, r3, #15
 80047cc:	4013      	ands	r3, r2
 80047ce:	d016      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80047d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	4a27      	ldr	r2, [pc, #156]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047de:	4b1a      	ldr	r3, [pc, #104]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047e0:	430a      	orrs	r2, r1
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e8:	2380      	movs	r3, #128	@ 0x80
 80047ea:	045b      	lsls	r3, r3, #17
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d106      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80047f0:	4b15      	ldr	r3, [pc, #84]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4b14      	ldr	r3, [pc, #80]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047f6:	2180      	movs	r1, #128	@ 0x80
 80047f8:	0449      	lsls	r1, r1, #17
 80047fa:	430a      	orrs	r2, r1
 80047fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2380      	movs	r3, #128	@ 0x80
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	4013      	ands	r3, r2
 8004808:	d016      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800480a:	4b0f      	ldr	r3, [pc, #60]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800480c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480e:	4a1a      	ldr	r2, [pc, #104]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004810:	4013      	ands	r3, r2
 8004812:	0019      	movs	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800481a:	430a      	orrs	r2, r1
 800481c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	2380      	movs	r3, #128	@ 0x80
 8004824:	01db      	lsls	r3, r3, #7
 8004826:	429a      	cmp	r2, r3
 8004828:	d106      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800482a:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004830:	2180      	movs	r1, #128	@ 0x80
 8004832:	0249      	lsls	r1, r1, #9
 8004834:	430a      	orrs	r2, r1
 8004836:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004838:	2312      	movs	r3, #18
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	781b      	ldrb	r3, [r3, #0]
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b006      	add	sp, #24
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	40021000 	.word	0x40021000
 800484c:	40007000 	.word	0x40007000
 8004850:	fffffcff 	.word	0xfffffcff
 8004854:	fffeffff 	.word	0xfffeffff
 8004858:	00001388 	.word	0x00001388
 800485c:	efffffff 	.word	0xefffffff
 8004860:	fffff3ff 	.word	0xfffff3ff
 8004864:	fff3ffff 	.word	0xfff3ffff
 8004868:	ffcfffff 	.word	0xffcfffff
 800486c:	ffffcfff 	.word	0xffffcfff
 8004870:	ffbfffff 	.word	0xffbfffff
 8004874:	feffffff 	.word	0xfeffffff
 8004878:	ffff3fff 	.word	0xffff3fff

0800487c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e046      	b.n	800491c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2288      	movs	r2, #136	@ 0x88
 8004892:	589b      	ldr	r3, [r3, r2]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2284      	movs	r2, #132	@ 0x84
 800489c:	2100      	movs	r1, #0
 800489e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	0018      	movs	r0, r3
 80048a4:	f002 f87c 	bl	80069a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2288      	movs	r2, #136	@ 0x88
 80048ac:	2124      	movs	r1, #36	@ 0x24
 80048ae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2101      	movs	r1, #1
 80048bc:	438a      	bics	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 fb8e 	bl	8004fec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 f8cc 	bl	8004a70 <UART_SetConfig>
 80048d8:	0003      	movs	r3, r0
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e01c      	b.n	800491c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	490d      	ldr	r1, [pc, #52]	@ (8004924 <HAL_UART_Init+0xa8>)
 80048ee:	400a      	ands	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	212a      	movs	r1, #42	@ 0x2a
 80048fe:	438a      	bics	r2, r1
 8004900:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2101      	movs	r1, #1
 800490e:	430a      	orrs	r2, r1
 8004910:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0018      	movs	r0, r3
 8004916:	f000 fc1d 	bl	8005154 <UART_CheckIdleState>
 800491a:	0003      	movs	r3, r0
}
 800491c:	0018      	movs	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	b002      	add	sp, #8
 8004922:	bd80      	pop	{r7, pc}
 8004924:	ffffb7ff 	.word	0xffffb7ff

08004928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	@ 0x28
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	1dbb      	adds	r3, r7, #6
 8004936:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2288      	movs	r2, #136	@ 0x88
 800493c:	589b      	ldr	r3, [r3, r2]
 800493e:	2b20      	cmp	r3, #32
 8004940:	d000      	beq.n	8004944 <HAL_UART_Transmit+0x1c>
 8004942:	e090      	b.n	8004a66 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_UART_Transmit+0x2a>
 800494a:	1dbb      	adds	r3, r7, #6
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e088      	b.n	8004a68 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	2380      	movs	r3, #128	@ 0x80
 800495c:	015b      	lsls	r3, r3, #5
 800495e:	429a      	cmp	r2, r3
 8004960:	d109      	bne.n	8004976 <HAL_UART_Transmit+0x4e>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2201      	movs	r2, #1
 800496e:	4013      	ands	r3, r2
 8004970:	d001      	beq.n	8004976 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e078      	b.n	8004a68 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2290      	movs	r2, #144	@ 0x90
 800497a:	2100      	movs	r1, #0
 800497c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2288      	movs	r2, #136	@ 0x88
 8004982:	2121      	movs	r1, #33	@ 0x21
 8004984:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004986:	f7fd ff95 	bl	80028b4 <HAL_GetTick>
 800498a:	0003      	movs	r3, r0
 800498c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1dba      	adds	r2, r7, #6
 8004992:	2154      	movs	r1, #84	@ 0x54
 8004994:	8812      	ldrh	r2, [r2, #0]
 8004996:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1dba      	adds	r2, r7, #6
 800499c:	2156      	movs	r1, #86	@ 0x56
 800499e:	8812      	ldrh	r2, [r2, #0]
 80049a0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	2380      	movs	r3, #128	@ 0x80
 80049a8:	015b      	lsls	r3, r3, #5
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d108      	bne.n	80049c0 <HAL_UART_Transmit+0x98>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	e003      	b.n	80049c8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049c8:	e030      	b.n	8004a2c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	0013      	movs	r3, r2
 80049d4:	2200      	movs	r2, #0
 80049d6:	2180      	movs	r1, #128	@ 0x80
 80049d8:	f000 fc66 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 80049dc:	1e03      	subs	r3, r0, #0
 80049de:	d005      	beq.n	80049ec <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2288      	movs	r2, #136	@ 0x88
 80049e4:	2120      	movs	r1, #32
 80049e6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e03d      	b.n	8004a68 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	001a      	movs	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	05d2      	lsls	r2, r2, #23
 80049fe:	0dd2      	lsrs	r2, r2, #23
 8004a00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	3302      	adds	r3, #2
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	e007      	b.n	8004a1a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3301      	adds	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2256      	movs	r2, #86	@ 0x56
 8004a1e:	5a9b      	ldrh	r3, [r3, r2]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b299      	uxth	r1, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2256      	movs	r2, #86	@ 0x56
 8004a2a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2256      	movs	r2, #86	@ 0x56
 8004a30:	5a9b      	ldrh	r3, [r3, r2]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1c8      	bne.n	80049ca <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	0013      	movs	r3, r2
 8004a42:	2200      	movs	r2, #0
 8004a44:	2140      	movs	r1, #64	@ 0x40
 8004a46:	f000 fc2f 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 8004a4a:	1e03      	subs	r3, r0, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2288      	movs	r2, #136	@ 0x88
 8004a52:	2120      	movs	r1, #32
 8004a54:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e006      	b.n	8004a68 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2288      	movs	r2, #136	@ 0x88
 8004a5e:	2120      	movs	r1, #32
 8004a60:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b008      	add	sp, #32
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b090      	sub	sp, #64	@ 0x40
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a78:	231a      	movs	r3, #26
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	189b      	adds	r3, r3, r2
 8004a7e:	19db      	adds	r3, r3, r7
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4aaf      	ldr	r2, [pc, #700]	@ (8004d60 <UART_SetConfig+0x2f0>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4aaa      	ldr	r2, [pc, #680]	@ (8004d64 <UART_SetConfig+0x2f4>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	0018      	movs	r0, r3
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	68d9      	ldr	r1, [r3, #12]
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4aa4      	ldr	r2, [pc, #656]	@ (8004d68 <UART_SetConfig+0x2f8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4a9f      	ldr	r2, [pc, #636]	@ (8004d6c <UART_SetConfig+0x2fc>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	0019      	movs	r1, r3
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	220f      	movs	r2, #15
 8004b04:	4393      	bics	r3, r2
 8004b06:	0018      	movs	r0, r3
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	0003      	movs	r3, r0
 8004b12:	430b      	orrs	r3, r1
 8004b14:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a95      	ldr	r2, [pc, #596]	@ (8004d70 <UART_SetConfig+0x300>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d131      	bne.n	8004b84 <UART_SetConfig+0x114>
 8004b20:	4b94      	ldr	r3, [pc, #592]	@ (8004d74 <UART_SetConfig+0x304>)
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	2203      	movs	r2, #3
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d01d      	beq.n	8004b68 <UART_SetConfig+0xf8>
 8004b2c:	d823      	bhi.n	8004b76 <UART_SetConfig+0x106>
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d00c      	beq.n	8004b4c <UART_SetConfig+0xdc>
 8004b32:	d820      	bhi.n	8004b76 <UART_SetConfig+0x106>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <UART_SetConfig+0xce>
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d00e      	beq.n	8004b5a <UART_SetConfig+0xea>
 8004b3c:	e01b      	b.n	8004b76 <UART_SetConfig+0x106>
 8004b3e:	231b      	movs	r3, #27
 8004b40:	2220      	movs	r2, #32
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	19db      	adds	r3, r3, r7
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	e0b4      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004b4c:	231b      	movs	r3, #27
 8004b4e:	2220      	movs	r2, #32
 8004b50:	189b      	adds	r3, r3, r2
 8004b52:	19db      	adds	r3, r3, r7
 8004b54:	2202      	movs	r2, #2
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e0ad      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004b5a:	231b      	movs	r3, #27
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	19db      	adds	r3, r3, r7
 8004b62:	2204      	movs	r2, #4
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e0a6      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004b68:	231b      	movs	r3, #27
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	189b      	adds	r3, r3, r2
 8004b6e:	19db      	adds	r3, r3, r7
 8004b70:	2208      	movs	r2, #8
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e09f      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004b76:	231b      	movs	r3, #27
 8004b78:	2220      	movs	r2, #32
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	19db      	adds	r3, r3, r7
 8004b7e:	2210      	movs	r2, #16
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e098      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a7b      	ldr	r2, [pc, #492]	@ (8004d78 <UART_SetConfig+0x308>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d131      	bne.n	8004bf2 <UART_SetConfig+0x182>
 8004b8e:	4b79      	ldr	r3, [pc, #484]	@ (8004d74 <UART_SetConfig+0x304>)
 8004b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b92:	220c      	movs	r2, #12
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d01d      	beq.n	8004bd6 <UART_SetConfig+0x166>
 8004b9a:	d823      	bhi.n	8004be4 <UART_SetConfig+0x174>
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d00c      	beq.n	8004bba <UART_SetConfig+0x14a>
 8004ba0:	d820      	bhi.n	8004be4 <UART_SetConfig+0x174>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <UART_SetConfig+0x13c>
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d00e      	beq.n	8004bc8 <UART_SetConfig+0x158>
 8004baa:	e01b      	b.n	8004be4 <UART_SetConfig+0x174>
 8004bac:	231b      	movs	r3, #27
 8004bae:	2220      	movs	r2, #32
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	19db      	adds	r3, r3, r7
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	e07d      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004bba:	231b      	movs	r3, #27
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	19db      	adds	r3, r3, r7
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	e076      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004bc8:	231b      	movs	r3, #27
 8004bca:	2220      	movs	r2, #32
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	19db      	adds	r3, r3, r7
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e06f      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004bd6:	231b      	movs	r3, #27
 8004bd8:	2220      	movs	r2, #32
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	19db      	adds	r3, r3, r7
 8004bde:	2208      	movs	r2, #8
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e068      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004be4:	231b      	movs	r3, #27
 8004be6:	2220      	movs	r2, #32
 8004be8:	189b      	adds	r3, r3, r2
 8004bea:	19db      	adds	r3, r3, r7
 8004bec:	2210      	movs	r2, #16
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e061      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a61      	ldr	r2, [pc, #388]	@ (8004d7c <UART_SetConfig+0x30c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d106      	bne.n	8004c0a <UART_SetConfig+0x19a>
 8004bfc:	231b      	movs	r3, #27
 8004bfe:	2220      	movs	r2, #32
 8004c00:	189b      	adds	r3, r3, r2
 8004c02:	19db      	adds	r3, r3, r7
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e055      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a5c      	ldr	r2, [pc, #368]	@ (8004d80 <UART_SetConfig+0x310>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d106      	bne.n	8004c22 <UART_SetConfig+0x1b2>
 8004c14:	231b      	movs	r3, #27
 8004c16:	2220      	movs	r2, #32
 8004c18:	189b      	adds	r3, r3, r2
 8004c1a:	19db      	adds	r3, r3, r7
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e049      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a50      	ldr	r2, [pc, #320]	@ (8004d68 <UART_SetConfig+0x2f8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d13e      	bne.n	8004caa <UART_SetConfig+0x23a>
 8004c2c:	4b51      	ldr	r3, [pc, #324]	@ (8004d74 <UART_SetConfig+0x304>)
 8004c2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c30:	23c0      	movs	r3, #192	@ 0xc0
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	4013      	ands	r3, r2
 8004c36:	22c0      	movs	r2, #192	@ 0xc0
 8004c38:	0112      	lsls	r2, r2, #4
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d027      	beq.n	8004c8e <UART_SetConfig+0x21e>
 8004c3e:	22c0      	movs	r2, #192	@ 0xc0
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d82a      	bhi.n	8004c9c <UART_SetConfig+0x22c>
 8004c46:	2280      	movs	r2, #128	@ 0x80
 8004c48:	0112      	lsls	r2, r2, #4
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d011      	beq.n	8004c72 <UART_SetConfig+0x202>
 8004c4e:	2280      	movs	r2, #128	@ 0x80
 8004c50:	0112      	lsls	r2, r2, #4
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d822      	bhi.n	8004c9c <UART_SetConfig+0x22c>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <UART_SetConfig+0x1f4>
 8004c5a:	2280      	movs	r2, #128	@ 0x80
 8004c5c:	00d2      	lsls	r2, r2, #3
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <UART_SetConfig+0x210>
 8004c62:	e01b      	b.n	8004c9c <UART_SetConfig+0x22c>
 8004c64:	231b      	movs	r3, #27
 8004c66:	2220      	movs	r2, #32
 8004c68:	189b      	adds	r3, r3, r2
 8004c6a:	19db      	adds	r3, r3, r7
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e021      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004c72:	231b      	movs	r3, #27
 8004c74:	2220      	movs	r2, #32
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	19db      	adds	r3, r3, r7
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e01a      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004c80:	231b      	movs	r3, #27
 8004c82:	2220      	movs	r2, #32
 8004c84:	189b      	adds	r3, r3, r2
 8004c86:	19db      	adds	r3, r3, r7
 8004c88:	2204      	movs	r2, #4
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	e013      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004c8e:	231b      	movs	r3, #27
 8004c90:	2220      	movs	r2, #32
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	19db      	adds	r3, r3, r7
 8004c96:	2208      	movs	r2, #8
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e00c      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004c9c:	231b      	movs	r3, #27
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	189b      	adds	r3, r3, r2
 8004ca2:	19db      	adds	r3, r3, r7
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e005      	b.n	8004cb6 <UART_SetConfig+0x246>
 8004caa:	231b      	movs	r3, #27
 8004cac:	2220      	movs	r2, #32
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	19db      	adds	r3, r3, r7
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2b      	ldr	r2, [pc, #172]	@ (8004d68 <UART_SetConfig+0x2f8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d000      	beq.n	8004cc2 <UART_SetConfig+0x252>
 8004cc0:	e0a9      	b.n	8004e16 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cc2:	231b      	movs	r3, #27
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	19db      	adds	r3, r3, r7
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d015      	beq.n	8004cfc <UART_SetConfig+0x28c>
 8004cd0:	dc18      	bgt.n	8004d04 <UART_SetConfig+0x294>
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d00d      	beq.n	8004cf2 <UART_SetConfig+0x282>
 8004cd6:	dc15      	bgt.n	8004d04 <UART_SetConfig+0x294>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <UART_SetConfig+0x272>
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d005      	beq.n	8004cec <UART_SetConfig+0x27c>
 8004ce0:	e010      	b.n	8004d04 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce2:	f7ff fbfd 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cea:	e014      	b.n	8004d16 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b25      	ldr	r3, [pc, #148]	@ (8004d84 <UART_SetConfig+0x314>)
 8004cee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cf0:	e011      	b.n	8004d16 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7ff fb69 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cfa:	e00c      	b.n	8004d16 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d02:	e008      	b.n	8004d16 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004d08:	231a      	movs	r3, #26
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	19db      	adds	r3, r3, r7
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
        break;
 8004d14:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d100      	bne.n	8004d1e <UART_SetConfig+0x2ae>
 8004d1c:	e14b      	b.n	8004fb6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d22:	4b19      	ldr	r3, [pc, #100]	@ (8004d88 <UART_SetConfig+0x318>)
 8004d24:	0052      	lsls	r2, r2, #1
 8004d26:	5ad3      	ldrh	r3, [r2, r3]
 8004d28:	0019      	movs	r1, r3
 8004d2a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d2c:	f7fb f9f2 	bl	8000114 <__udivsi3>
 8004d30:	0003      	movs	r3, r0
 8004d32:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	0013      	movs	r3, r2
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	189b      	adds	r3, r3, r2
 8004d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d305      	bcc.n	8004d50 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d91d      	bls.n	8004d8c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004d50:	231a      	movs	r3, #26
 8004d52:	2220      	movs	r2, #32
 8004d54:	189b      	adds	r3, r3, r2
 8004d56:	19db      	adds	r3, r3, r7
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e12b      	b.n	8004fb6 <UART_SetConfig+0x546>
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	cfff69f3 	.word	0xcfff69f3
 8004d64:	ffffcfff 	.word	0xffffcfff
 8004d68:	40008000 	.word	0x40008000
 8004d6c:	11fff4ff 	.word	0x11fff4ff
 8004d70:	40013800 	.word	0x40013800
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40004400 	.word	0x40004400
 8004d7c:	40004800 	.word	0x40004800
 8004d80:	40004c00 	.word	0x40004c00
 8004d84:	00f42400 	.word	0x00f42400
 8004d88:	08007b48 	.word	0x08007b48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d98:	4b92      	ldr	r3, [pc, #584]	@ (8004fe4 <UART_SetConfig+0x574>)
 8004d9a:	0052      	lsls	r2, r2, #1
 8004d9c:	5ad3      	ldrh	r3, [r2, r3]
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	69b8      	ldr	r0, [r7, #24]
 8004daa:	69f9      	ldr	r1, [r7, #28]
 8004dac:	f7fb fb66 	bl	800047c <__aeabi_uldivmod>
 8004db0:	0002      	movs	r2, r0
 8004db2:	000b      	movs	r3, r1
 8004db4:	0e11      	lsrs	r1, r2, #24
 8004db6:	021d      	lsls	r5, r3, #8
 8004db8:	430d      	orrs	r5, r1
 8004dba:	0214      	lsls	r4, r2, #8
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68b8      	ldr	r0, [r7, #8]
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	1900      	adds	r0, r0, r4
 8004dce:	4169      	adcs	r1, r5
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f7fb fb4d 	bl	800047c <__aeabi_uldivmod>
 8004de2:	0002      	movs	r2, r0
 8004de4:	000b      	movs	r3, r1
 8004de6:	0013      	movs	r3, r2
 8004de8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dec:	23c0      	movs	r3, #192	@ 0xc0
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d309      	bcc.n	8004e08 <UART_SetConfig+0x398>
 8004df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	035b      	lsls	r3, r3, #13
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d204      	bcs.n	8004e08 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	e0d6      	b.n	8004fb6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004e08:	231a      	movs	r3, #26
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	189b      	adds	r3, r3, r2
 8004e0e:	19db      	adds	r3, r3, r7
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e0cf      	b.n	8004fb6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	69da      	ldr	r2, [r3, #28]
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d000      	beq.n	8004e24 <UART_SetConfig+0x3b4>
 8004e22:	e070      	b.n	8004f06 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004e24:	231b      	movs	r3, #27
 8004e26:	2220      	movs	r2, #32
 8004e28:	189b      	adds	r3, r3, r2
 8004e2a:	19db      	adds	r3, r3, r7
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d015      	beq.n	8004e5e <UART_SetConfig+0x3ee>
 8004e32:	dc18      	bgt.n	8004e66 <UART_SetConfig+0x3f6>
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d00d      	beq.n	8004e54 <UART_SetConfig+0x3e4>
 8004e38:	dc15      	bgt.n	8004e66 <UART_SetConfig+0x3f6>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <UART_SetConfig+0x3d4>
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d005      	beq.n	8004e4e <UART_SetConfig+0x3de>
 8004e42:	e010      	b.n	8004e66 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e44:	f7ff fb4c 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e4c:	e014      	b.n	8004e78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e4e:	4b66      	ldr	r3, [pc, #408]	@ (8004fe8 <UART_SetConfig+0x578>)
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e52:	e011      	b.n	8004e78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e54:	f7ff fab8 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e5c:	e00c      	b.n	8004e78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5e:	2380      	movs	r3, #128	@ 0x80
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e64:	e008      	b.n	8004e78 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004e6a:	231a      	movs	r3, #26
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	189b      	adds	r3, r3, r2
 8004e70:	19db      	adds	r3, r3, r7
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
        break;
 8004e76:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d100      	bne.n	8004e80 <UART_SetConfig+0x410>
 8004e7e:	e09a      	b.n	8004fb6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e84:	4b57      	ldr	r3, [pc, #348]	@ (8004fe4 <UART_SetConfig+0x574>)
 8004e86:	0052      	lsls	r2, r2, #1
 8004e88:	5ad3      	ldrh	r3, [r2, r3]
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e8e:	f7fb f941 	bl	8000114 <__udivsi3>
 8004e92:	0003      	movs	r3, r0
 8004e94:	005a      	lsls	r2, r3, #1
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	085b      	lsrs	r3, r3, #1
 8004e9c:	18d2      	adds	r2, r2, r3
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	0019      	movs	r1, r3
 8004ea4:	0010      	movs	r0, r2
 8004ea6:	f7fb f935 	bl	8000114 <__udivsi3>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	2b0f      	cmp	r3, #15
 8004eb2:	d921      	bls.n	8004ef8 <UART_SetConfig+0x488>
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb6:	2380      	movs	r3, #128	@ 0x80
 8004eb8:	025b      	lsls	r3, r3, #9
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d21c      	bcs.n	8004ef8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	200e      	movs	r0, #14
 8004ec4:	2420      	movs	r4, #32
 8004ec6:	1903      	adds	r3, r0, r4
 8004ec8:	19db      	adds	r3, r3, r7
 8004eca:	210f      	movs	r1, #15
 8004ecc:	438a      	bics	r2, r1
 8004ece:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2207      	movs	r2, #7
 8004ed8:	4013      	ands	r3, r2
 8004eda:	b299      	uxth	r1, r3
 8004edc:	1903      	adds	r3, r0, r4
 8004ede:	19db      	adds	r3, r3, r7
 8004ee0:	1902      	adds	r2, r0, r4
 8004ee2:	19d2      	adds	r2, r2, r7
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	1902      	adds	r2, r0, r4
 8004ef0:	19d2      	adds	r2, r2, r7
 8004ef2:	8812      	ldrh	r2, [r2, #0]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	e05e      	b.n	8004fb6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef8:	231a      	movs	r3, #26
 8004efa:	2220      	movs	r2, #32
 8004efc:	189b      	adds	r3, r3, r2
 8004efe:	19db      	adds	r3, r3, r7
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	e057      	b.n	8004fb6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f06:	231b      	movs	r3, #27
 8004f08:	2220      	movs	r2, #32
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	19db      	adds	r3, r3, r7
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d015      	beq.n	8004f40 <UART_SetConfig+0x4d0>
 8004f14:	dc18      	bgt.n	8004f48 <UART_SetConfig+0x4d8>
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d00d      	beq.n	8004f36 <UART_SetConfig+0x4c6>
 8004f1a:	dc15      	bgt.n	8004f48 <UART_SetConfig+0x4d8>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <UART_SetConfig+0x4b6>
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d005      	beq.n	8004f30 <UART_SetConfig+0x4c0>
 8004f24:	e010      	b.n	8004f48 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f26:	f7ff fadb 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f2e:	e014      	b.n	8004f5a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f30:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe8 <UART_SetConfig+0x578>)
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f34:	e011      	b.n	8004f5a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f36:	f7ff fa47 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f3e:	e00c      	b.n	8004f5a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f40:	2380      	movs	r3, #128	@ 0x80
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f46:	e008      	b.n	8004f5a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004f4c:	231a      	movs	r3, #26
 8004f4e:	2220      	movs	r2, #32
 8004f50:	189b      	adds	r3, r3, r2
 8004f52:	19db      	adds	r3, r3, r7
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
        break;
 8004f58:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02a      	beq.n	8004fb6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f64:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <UART_SetConfig+0x574>)
 8004f66:	0052      	lsls	r2, r2, #1
 8004f68:	5ad3      	ldrh	r3, [r2, r3]
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f6e:	f7fb f8d1 	bl	8000114 <__udivsi3>
 8004f72:	0003      	movs	r3, r0
 8004f74:	001a      	movs	r2, r3
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	18d2      	adds	r2, r2, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	0019      	movs	r1, r3
 8004f84:	0010      	movs	r0, r2
 8004f86:	f7fb f8c5 	bl	8000114 <__udivsi3>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	2b0f      	cmp	r3, #15
 8004f92:	d90a      	bls.n	8004faa <UART_SetConfig+0x53a>
 8004f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f96:	2380      	movs	r3, #128	@ 0x80
 8004f98:	025b      	lsls	r3, r3, #9
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d205      	bcs.n	8004faa <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	e005      	b.n	8004fb6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004faa:	231a      	movs	r3, #26
 8004fac:	2220      	movs	r2, #32
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	19db      	adds	r3, r3, r7
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	226a      	movs	r2, #106	@ 0x6a
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	2268      	movs	r2, #104	@ 0x68
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	2200      	movs	r2, #0
 8004fca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	2200      	movs	r2, #0
 8004fd0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fd2:	231a      	movs	r3, #26
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	19db      	adds	r3, r3, r7
 8004fda:	781b      	ldrb	r3, [r3, #0]
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b010      	add	sp, #64	@ 0x40
 8004fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fe4:	08007b48 	.word	0x08007b48
 8004fe8:	00f42400 	.word	0x00f42400

08004fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d00b      	beq.n	8005016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4a4a      	ldr	r2, [pc, #296]	@ (8005130 <UART_AdvFeatureConfig+0x144>)
 8005006:	4013      	ands	r3, r2
 8005008:	0019      	movs	r1, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	2201      	movs	r2, #1
 800501c:	4013      	ands	r3, r2
 800501e:	d00b      	beq.n	8005038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4a43      	ldr	r2, [pc, #268]	@ (8005134 <UART_AdvFeatureConfig+0x148>)
 8005028:	4013      	ands	r3, r2
 800502a:	0019      	movs	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	2202      	movs	r2, #2
 800503e:	4013      	ands	r3, r2
 8005040:	d00b      	beq.n	800505a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4a3b      	ldr	r2, [pc, #236]	@ (8005138 <UART_AdvFeatureConfig+0x14c>)
 800504a:	4013      	ands	r3, r2
 800504c:	0019      	movs	r1, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	2204      	movs	r2, #4
 8005060:	4013      	ands	r3, r2
 8005062:	d00b      	beq.n	800507c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	4a34      	ldr	r2, [pc, #208]	@ (800513c <UART_AdvFeatureConfig+0x150>)
 800506c:	4013      	ands	r3, r2
 800506e:	0019      	movs	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	2210      	movs	r2, #16
 8005082:	4013      	ands	r3, r2
 8005084:	d00b      	beq.n	800509e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4a2c      	ldr	r2, [pc, #176]	@ (8005140 <UART_AdvFeatureConfig+0x154>)
 800508e:	4013      	ands	r3, r2
 8005090:	0019      	movs	r1, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a2:	2220      	movs	r2, #32
 80050a4:	4013      	ands	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	4a25      	ldr	r2, [pc, #148]	@ (8005144 <UART_AdvFeatureConfig+0x158>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	0019      	movs	r1, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c4:	2240      	movs	r2, #64	@ 0x40
 80050c6:	4013      	ands	r3, r2
 80050c8:	d01d      	beq.n	8005106 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005148 <UART_AdvFeatureConfig+0x15c>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	0019      	movs	r1, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050e6:	2380      	movs	r3, #128	@ 0x80
 80050e8:	035b      	lsls	r3, r3, #13
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d10b      	bne.n	8005106 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4a15      	ldr	r2, [pc, #84]	@ (800514c <UART_AdvFeatureConfig+0x160>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510a:	2280      	movs	r2, #128	@ 0x80
 800510c:	4013      	ands	r3, r2
 800510e:	d00b      	beq.n	8005128 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4a0e      	ldr	r2, [pc, #56]	@ (8005150 <UART_AdvFeatureConfig+0x164>)
 8005118:	4013      	ands	r3, r2
 800511a:	0019      	movs	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	605a      	str	r2, [r3, #4]
  }
}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b002      	add	sp, #8
 800512e:	bd80      	pop	{r7, pc}
 8005130:	ffff7fff 	.word	0xffff7fff
 8005134:	fffdffff 	.word	0xfffdffff
 8005138:	fffeffff 	.word	0xfffeffff
 800513c:	fffbffff 	.word	0xfffbffff
 8005140:	ffffefff 	.word	0xffffefff
 8005144:	ffffdfff 	.word	0xffffdfff
 8005148:	ffefffff 	.word	0xffefffff
 800514c:	ff9fffff 	.word	0xff9fffff
 8005150:	fff7ffff 	.word	0xfff7ffff

08005154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b092      	sub	sp, #72	@ 0x48
 8005158:	af02      	add	r7, sp, #8
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2290      	movs	r2, #144	@ 0x90
 8005160:	2100      	movs	r1, #0
 8005162:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005164:	f7fd fba6 	bl	80028b4 <HAL_GetTick>
 8005168:	0003      	movs	r3, r0
 800516a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2208      	movs	r2, #8
 8005174:	4013      	ands	r3, r2
 8005176:	2b08      	cmp	r3, #8
 8005178:	d12d      	bne.n	80051d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800517a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800517c:	2280      	movs	r2, #128	@ 0x80
 800517e:	0391      	lsls	r1, r2, #14
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4a47      	ldr	r2, [pc, #284]	@ (80052a0 <UART_CheckIdleState+0x14c>)
 8005184:	9200      	str	r2, [sp, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	f000 f88e 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 800518c:	1e03      	subs	r3, r0, #0
 800518e:	d022      	beq.n	80051d6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005190:	f3ef 8310 	mrs	r3, PRIMASK
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005198:	63bb      	str	r3, [r7, #56]	@ 0x38
 800519a:	2301      	movs	r3, #1
 800519c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	f383 8810 	msr	PRIMASK, r3
}
 80051a4:	46c0      	nop			@ (mov r8, r8)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2180      	movs	r1, #128	@ 0x80
 80051b2:	438a      	bics	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051bc:	f383 8810 	msr	PRIMASK, r3
}
 80051c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2288      	movs	r2, #136	@ 0x88
 80051c6:	2120      	movs	r1, #32
 80051c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2284      	movs	r2, #132	@ 0x84
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e060      	b.n	8005298 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2204      	movs	r2, #4
 80051de:	4013      	ands	r3, r2
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d146      	bne.n	8005272 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e6:	2280      	movs	r2, #128	@ 0x80
 80051e8:	03d1      	lsls	r1, r2, #15
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4a2c      	ldr	r2, [pc, #176]	@ (80052a0 <UART_CheckIdleState+0x14c>)
 80051ee:	9200      	str	r2, [sp, #0]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f000 f859 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 80051f6:	1e03      	subs	r3, r0, #0
 80051f8:	d03b      	beq.n	8005272 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fa:	f3ef 8310 	mrs	r3, PRIMASK
 80051fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005200:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
 8005204:	2301      	movs	r3, #1
 8005206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f383 8810 	msr	PRIMASK, r3
}
 800520e:	46c0      	nop			@ (mov r8, r8)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4922      	ldr	r1, [pc, #136]	@ (80052a4 <UART_CheckIdleState+0x150>)
 800521c:	400a      	ands	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522c:	f3ef 8310 	mrs	r3, PRIMASK
 8005230:	61bb      	str	r3, [r7, #24]
  return(result);
 8005232:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005234:	633b      	str	r3, [r7, #48]	@ 0x30
 8005236:	2301      	movs	r3, #1
 8005238:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f383 8810 	msr	PRIMASK, r3
}
 8005240:	46c0      	nop			@ (mov r8, r8)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2101      	movs	r1, #1
 800524e:	438a      	bics	r2, r1
 8005250:	609a      	str	r2, [r3, #8]
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	f383 8810 	msr	PRIMASK, r3
}
 800525c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	228c      	movs	r2, #140	@ 0x8c
 8005262:	2120      	movs	r1, #32
 8005264:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2284      	movs	r2, #132	@ 0x84
 800526a:	2100      	movs	r1, #0
 800526c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e012      	b.n	8005298 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2288      	movs	r2, #136	@ 0x88
 8005276:	2120      	movs	r1, #32
 8005278:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	228c      	movs	r2, #140	@ 0x8c
 800527e:	2120      	movs	r1, #32
 8005280:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2284      	movs	r2, #132	@ 0x84
 8005292:	2100      	movs	r1, #0
 8005294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	0018      	movs	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	b010      	add	sp, #64	@ 0x40
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	01ffffff 	.word	0x01ffffff
 80052a4:	fffffedf 	.word	0xfffffedf

080052a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	1dfb      	adds	r3, r7, #7
 80052b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b8:	e051      	b.n	800535e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	3301      	adds	r3, #1
 80052be:	d04e      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c0:	f7fd faf8 	bl	80028b4 <HAL_GetTick>
 80052c4:	0002      	movs	r2, r0
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e051      	b.n	800537e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2204      	movs	r2, #4
 80052e2:	4013      	ands	r3, r2
 80052e4:	d03b      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0xb6>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b80      	cmp	r3, #128	@ 0x80
 80052ea:	d038      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0xb6>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b40      	cmp	r3, #64	@ 0x40
 80052f0:	d035      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	2208      	movs	r2, #8
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d111      	bne.n	8005324 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2208      	movs	r2, #8
 8005306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	0018      	movs	r0, r3
 800530c:	f000 f83c 	bl	8005388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2290      	movs	r2, #144	@ 0x90
 8005314:	2108      	movs	r1, #8
 8005316:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2284      	movs	r2, #132	@ 0x84
 800531c:	2100      	movs	r1, #0
 800531e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e02c      	b.n	800537e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69da      	ldr	r2, [r3, #28]
 800532a:	2380      	movs	r3, #128	@ 0x80
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	401a      	ands	r2, r3
 8005330:	2380      	movs	r3, #128	@ 0x80
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	429a      	cmp	r2, r3
 8005336:	d112      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2280      	movs	r2, #128	@ 0x80
 800533e:	0112      	lsls	r2, r2, #4
 8005340:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	0018      	movs	r0, r3
 8005346:	f000 f81f 	bl	8005388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2290      	movs	r2, #144	@ 0x90
 800534e:	2120      	movs	r1, #32
 8005350:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2284      	movs	r2, #132	@ 0x84
 8005356:	2100      	movs	r1, #0
 8005358:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e00f      	b.n	800537e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	4013      	ands	r3, r2
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	425a      	negs	r2, r3
 800536e:	4153      	adcs	r3, r2
 8005370:	b2db      	uxtb	r3, r3
 8005372:	001a      	movs	r2, r3
 8005374:	1dfb      	adds	r3, r7, #7
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d09e      	beq.n	80052ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b004      	add	sp, #16
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08e      	sub	sp, #56	@ 0x38
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005390:	f3ef 8310 	mrs	r3, PRIMASK
 8005394:	617b      	str	r3, [r7, #20]
  return(result);
 8005396:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005398:	637b      	str	r3, [r7, #52]	@ 0x34
 800539a:	2301      	movs	r3, #1
 800539c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f383 8810 	msr	PRIMASK, r3
}
 80053a4:	46c0      	nop			@ (mov r8, r8)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4926      	ldr	r1, [pc, #152]	@ (800544c <UART_EndRxTransfer+0xc4>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f383 8810 	msr	PRIMASK, r3
}
 80053c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c2:	f3ef 8310 	mrs	r3, PRIMASK
 80053c6:	623b      	str	r3, [r7, #32]
  return(result);
 80053c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80053cc:	2301      	movs	r3, #1
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	f383 8810 	msr	PRIMASK, r3
}
 80053d6:	46c0      	nop			@ (mov r8, r8)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	491b      	ldr	r1, [pc, #108]	@ (8005450 <UART_EndRxTransfer+0xc8>)
 80053e4:	400a      	ands	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	f383 8810 	msr	PRIMASK, r3
}
 80053f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d118      	bne.n	800542e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005400:	60bb      	str	r3, [r7, #8]
  return(result);
 8005402:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005406:	2301      	movs	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f383 8810 	msr	PRIMASK, r3
}
 8005410:	46c0      	nop			@ (mov r8, r8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2110      	movs	r1, #16
 800541e:	438a      	bics	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f383 8810 	msr	PRIMASK, r3
}
 800542c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	228c      	movs	r2, #140	@ 0x8c
 8005432:	2120      	movs	r1, #32
 8005434:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	46bd      	mov	sp, r7
 8005446:	b00e      	add	sp, #56	@ 0x38
 8005448:	bd80      	pop	{r7, pc}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	fffffedf 	.word	0xfffffedf
 8005450:	effffffe 	.word	0xeffffffe

08005454 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2284      	movs	r2, #132	@ 0x84
 8005460:	5c9b      	ldrb	r3, [r3, r2]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_UARTEx_DisableFifoMode+0x16>
 8005466:	2302      	movs	r3, #2
 8005468:	e027      	b.n	80054ba <HAL_UARTEx_DisableFifoMode+0x66>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2284      	movs	r2, #132	@ 0x84
 800546e:	2101      	movs	r1, #1
 8005470:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2288      	movs	r2, #136	@ 0x88
 8005476:	2124      	movs	r1, #36	@ 0x24
 8005478:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2101      	movs	r1, #1
 800548e:	438a      	bics	r2, r1
 8005490:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a0b      	ldr	r2, [pc, #44]	@ (80054c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005496:	4013      	ands	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2288      	movs	r2, #136	@ 0x88
 80054ac:	2120      	movs	r1, #32
 80054ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2284      	movs	r2, #132	@ 0x84
 80054b4:	2100      	movs	r1, #0
 80054b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b004      	add	sp, #16
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	dfffffff 	.word	0xdfffffff

080054c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2284      	movs	r2, #132	@ 0x84
 80054d6:	5c9b      	ldrb	r3, [r3, r2]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054dc:	2302      	movs	r3, #2
 80054de:	e02e      	b.n	800553e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2284      	movs	r2, #132	@ 0x84
 80054e4:	2101      	movs	r1, #1
 80054e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2288      	movs	r2, #136	@ 0x88
 80054ec:	2124      	movs	r1, #36	@ 0x24
 80054ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2101      	movs	r1, #1
 8005504:	438a      	bics	r2, r1
 8005506:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	08d9      	lsrs	r1, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	0018      	movs	r0, r3
 8005520:	f000 f854 	bl	80055cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2288      	movs	r2, #136	@ 0x88
 8005530:	2120      	movs	r1, #32
 8005532:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2284      	movs	r2, #132	@ 0x84
 8005538:	2100      	movs	r1, #0
 800553a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	0018      	movs	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	b004      	add	sp, #16
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2284      	movs	r2, #132	@ 0x84
 8005556:	5c9b      	ldrb	r3, [r3, r2]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800555c:	2302      	movs	r3, #2
 800555e:	e02f      	b.n	80055c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2284      	movs	r2, #132	@ 0x84
 8005564:	2101      	movs	r1, #1
 8005566:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2288      	movs	r2, #136	@ 0x88
 800556c:	2124      	movs	r1, #36	@ 0x24
 800556e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2101      	movs	r1, #1
 8005584:	438a      	bics	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	4a0e      	ldr	r2, [pc, #56]	@ (80055c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005590:	4013      	ands	r3, r2
 8005592:	0019      	movs	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 f813 	bl	80055cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2288      	movs	r2, #136	@ 0x88
 80055b2:	2120      	movs	r1, #32
 80055b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2284      	movs	r2, #132	@ 0x84
 80055ba:	2100      	movs	r1, #0
 80055bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b004      	add	sp, #16
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	f1ffffff 	.word	0xf1ffffff

080055cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d108      	bne.n	80055ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	226a      	movs	r2, #106	@ 0x6a
 80055e0:	2101      	movs	r1, #1
 80055e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2268      	movs	r2, #104	@ 0x68
 80055e8:	2101      	movs	r1, #1
 80055ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055ec:	e043      	b.n	8005676 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055ee:	260f      	movs	r6, #15
 80055f0:	19bb      	adds	r3, r7, r6
 80055f2:	2208      	movs	r2, #8
 80055f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055f6:	200e      	movs	r0, #14
 80055f8:	183b      	adds	r3, r7, r0
 80055fa:	2208      	movs	r2, #8
 80055fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	0e5b      	lsrs	r3, r3, #25
 8005606:	b2da      	uxtb	r2, r3
 8005608:	240d      	movs	r4, #13
 800560a:	193b      	adds	r3, r7, r4
 800560c:	2107      	movs	r1, #7
 800560e:	400a      	ands	r2, r1
 8005610:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	0f5b      	lsrs	r3, r3, #29
 800561a:	b2da      	uxtb	r2, r3
 800561c:	250c      	movs	r5, #12
 800561e:	197b      	adds	r3, r7, r5
 8005620:	2107      	movs	r1, #7
 8005622:	400a      	ands	r2, r1
 8005624:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005626:	183b      	adds	r3, r7, r0
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	197a      	adds	r2, r7, r5
 800562c:	7812      	ldrb	r2, [r2, #0]
 800562e:	4914      	ldr	r1, [pc, #80]	@ (8005680 <UARTEx_SetNbDataToProcess+0xb4>)
 8005630:	5c8a      	ldrb	r2, [r1, r2]
 8005632:	435a      	muls	r2, r3
 8005634:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005636:	197b      	adds	r3, r7, r5
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	4a12      	ldr	r2, [pc, #72]	@ (8005684 <UARTEx_SetNbDataToProcess+0xb8>)
 800563c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800563e:	0019      	movs	r1, r3
 8005640:	f7fa fdf2 	bl	8000228 <__divsi3>
 8005644:	0003      	movs	r3, r0
 8005646:	b299      	uxth	r1, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	226a      	movs	r2, #106	@ 0x6a
 800564c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800564e:	19bb      	adds	r3, r7, r6
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	193a      	adds	r2, r7, r4
 8005654:	7812      	ldrb	r2, [r2, #0]
 8005656:	490a      	ldr	r1, [pc, #40]	@ (8005680 <UARTEx_SetNbDataToProcess+0xb4>)
 8005658:	5c8a      	ldrb	r2, [r1, r2]
 800565a:	435a      	muls	r2, r3
 800565c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800565e:	193b      	adds	r3, r7, r4
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	4a08      	ldr	r2, [pc, #32]	@ (8005684 <UARTEx_SetNbDataToProcess+0xb8>)
 8005664:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005666:	0019      	movs	r1, r3
 8005668:	f7fa fdde 	bl	8000228 <__divsi3>
 800566c:	0003      	movs	r3, r0
 800566e:	b299      	uxth	r1, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2268      	movs	r2, #104	@ 0x68
 8005674:	5299      	strh	r1, [r3, r2]
}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	46bd      	mov	sp, r7
 800567a:	b005      	add	sp, #20
 800567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	08007b60 	.word	0x08007b60
 8005684:	08007b68 	.word	0x08007b68

08005688 <uartSend>:
//---------------------------IMPLICIT FUNCTIONS---------------------------
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
espat_state_t uartSend(espat_uartInstance_t *uart, char *data, uint32_t size) {
 8005688:	b5b0      	push	{r4, r5, r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]


	HAL_StatusTypeDef state = HAL_UART_Transmit(uart->uart, (uint8_t*) data,
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2517      	movs	r5, #23
 80056a2:	197c      	adds	r4, r7, r5
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	f7ff f93f 	bl	8004928 <HAL_UART_Transmit>
 80056aa:	0003      	movs	r3, r0
 80056ac:	7023      	strb	r3, [r4, #0]
			size, uart->sendTimeout);

	if (state == HAL_OK)
 80056ae:	197b      	adds	r3, r7, r5
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <uartSend+0x32>
		return ESPAT_STATE_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e007      	b.n	80056ca <uartSend+0x42>
	else if (state == HAL_TIMEOUT)
 80056ba:	2317      	movs	r3, #23
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d101      	bne.n	80056c8 <uartSend+0x40>
		return ESPAT_STATE_TIMEOUT;
 80056c4:	2302      	movs	r3, #2
 80056c6:	e000      	b.n	80056ca <uartSend+0x42>
	else
		return ESPAT_STATE_ERR;
 80056c8:	2301      	movs	r3, #1
}
 80056ca:	0018      	movs	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b006      	add	sp, #24
 80056d0:	bdb0      	pop	{r4, r5, r7, pc}

080056d2 <espAt_init>:
 * @param: timout for receive
 *
 * @retval: always ESPATHID_OK
 */
espat_state_t espAt_init(espat_radio_t *radio, UART_HandleTypeDef *uart,
		uint32_t txTimeout, uint32_t rxTimeout) { //port
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]

	radio->espUart.uart = uart;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	601a      	str	r2, [r3, #0]
	radio->espUart.sendTimeout = txTimeout;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	605a      	str	r2, [r3, #4]
	radio->espUart.receiveTimeout = rxTimeout;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	609a      	str	r2, [r3, #8]
	return ESPAT_STATE_OK;
 80056f2:	2300      	movs	r3, #0

}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b004      	add	sp, #16
 80056fa:	bd80      	pop	{r7, pc}

080056fc <espAt_sendParams>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendParams(espat_radio_t *radio, char *command,
		uint16_t paramCount, ...) {
 80056fc:	b40c      	push	{r2, r3}
 80056fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005700:	46c6      	mov	lr, r8
 8005702:	b500      	push	{lr}
 8005704:	b0a2      	sub	sp, #136	@ 0x88
 8005706:	af00      	add	r7, sp, #0
 8005708:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800570a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800570c:	466b      	mov	r3, sp
 800570e:	4698      	mov	r8, r3

	//check if command are valid
	if (command == NULL)
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <espAt_sendParams+0x1e>
		return ESPAT_STATE_ERR;
 8005716:	2301      	movs	r3, #1
 8005718:	e1b7      	b.n	8005a8a <espAt_sendParams+0x38e>

	va_list ap;
	va_start(ap, paramCount);
 800571a:	236c      	movs	r3, #108	@ 0x6c
 800571c:	2238      	movs	r2, #56	@ 0x38
 800571e:	189b      	adds	r3, r3, r2
 8005720:	19db      	adds	r3, r3, r7
 8005722:	663b      	str	r3, [r7, #96]	@ 0x60

	//make parameters array
	int32_t parameters[paramCount];
 8005724:	2368      	movs	r3, #104	@ 0x68
 8005726:	189b      	adds	r3, r3, r2
 8005728:	19db      	adds	r3, r3, r7
 800572a:	881a      	ldrh	r2, [r3, #0]
 800572c:	0013      	movs	r3, r2
 800572e:	3b01      	subs	r3, #1
 8005730:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005732:	61ba      	str	r2, [r7, #24]
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	69b8      	ldr	r0, [r7, #24]
 800573a:	69f9      	ldr	r1, [r7, #28]
 800573c:	0003      	movs	r3, r0
 800573e:	0edb      	lsrs	r3, r3, #27
 8005740:	000e      	movs	r6, r1
 8005742:	0175      	lsls	r5, r6, #5
 8005744:	431d      	orrs	r5, r3
 8005746:	0003      	movs	r3, r0
 8005748:	015c      	lsls	r4, r3, #5
 800574a:	613a      	str	r2, [r7, #16]
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	6938      	ldr	r0, [r7, #16]
 8005752:	6979      	ldr	r1, [r7, #20]
 8005754:	0003      	movs	r3, r0
 8005756:	0edb      	lsrs	r3, r3, #27
 8005758:	000c      	movs	r4, r1
 800575a:	0164      	lsls	r4, r4, #5
 800575c:	637c      	str	r4, [r7, #52]	@ 0x34
 800575e:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8005760:	431c      	orrs	r4, r3
 8005762:	637c      	str	r4, [r7, #52]	@ 0x34
 8005764:	0003      	movs	r3, r0
 8005766:	015b      	lsls	r3, r3, #5
 8005768:	633b      	str	r3, [r7, #48]	@ 0x30
 800576a:	0013      	movs	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	3307      	adds	r3, #7
 8005770:	08db      	lsrs	r3, r3, #3
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	466a      	mov	r2, sp
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	469d      	mov	sp, r3
 800577a:	466b      	mov	r3, sp
 800577c:	3303      	adds	r3, #3
 800577e:	089b      	lsrs	r3, r3, #2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	67bb      	str	r3, [r7, #120]	@ 0x78

	//fill parameters array
	for (uint16_t i = 0; i < paramCount; i++) {
 8005784:	234e      	movs	r3, #78	@ 0x4e
 8005786:	2238      	movs	r2, #56	@ 0x38
 8005788:	189b      	adds	r3, r3, r2
 800578a:	19db      	adds	r3, r3, r7
 800578c:	2200      	movs	r2, #0
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e012      	b.n	80057b8 <espAt_sendParams+0xbc>
		parameters[i] = va_arg(ap, int32_t);
 8005792:	204e      	movs	r0, #78	@ 0x4e
 8005794:	2438      	movs	r4, #56	@ 0x38
 8005796:	1903      	adds	r3, r0, r4
 8005798:	19db      	adds	r3, r3, r7
 800579a:	881a      	ldrh	r2, [r3, #0]
 800579c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800579e:	1d19      	adds	r1, r3, #4
 80057a0:	6639      	str	r1, [r7, #96]	@ 0x60
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057a6:	0092      	lsls	r2, r2, #2
 80057a8:	50d1      	str	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 80057aa:	1903      	adds	r3, r0, r4
 80057ac:	19db      	adds	r3, r3, r7
 80057ae:	881a      	ldrh	r2, [r3, #0]
 80057b0:	1903      	adds	r3, r0, r4
 80057b2:	19db      	adds	r3, r3, r7
 80057b4:	3201      	adds	r2, #1
 80057b6:	801a      	strh	r2, [r3, #0]
 80057b8:	234e      	movs	r3, #78	@ 0x4e
 80057ba:	2138      	movs	r1, #56	@ 0x38
 80057bc:	185b      	adds	r3, r3, r1
 80057be:	19da      	adds	r2, r3, r7
 80057c0:	2368      	movs	r3, #104	@ 0x68
 80057c2:	185b      	adds	r3, r3, r1
 80057c4:	19db      	adds	r3, r3, r7
 80057c6:	8812      	ldrh	r2, [r2, #0]
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d3e1      	bcc.n	8005792 <espAt_sendParams+0x96>
	}

	//make arguments list string
	uint16_t characterCounter = 0;
 80057ce:	234c      	movs	r3, #76	@ 0x4c
 80057d0:	185b      	adds	r3, r3, r1
 80057d2:	19db      	adds	r3, r3, r7
 80057d4:	2200      	movs	r2, #0
 80057d6:	801a      	strh	r2, [r3, #0]
	char argumentsBuffer[AT_BUFFER_SIZE];
	memset(argumentsBuffer, '\0', AT_BUFFER_SIZE);
 80057d8:	2308      	movs	r3, #8
 80057da:	000c      	movs	r4, r1
 80057dc:	185b      	adds	r3, r3, r1
 80057de:	19db      	adds	r3, r3, r7
 80057e0:	221e      	movs	r2, #30
 80057e2:	2100      	movs	r1, #0
 80057e4:	0018      	movs	r0, r3
 80057e6:	f001 f9ff 	bl	8006be8 <memset>

	for (uint16_t i = 0; i < paramCount; i++) {
 80057ea:	234a      	movs	r3, #74	@ 0x4a
 80057ec:	191b      	adds	r3, r3, r4
 80057ee:	19db      	adds	r3, r3, r7
 80057f0:	2200      	movs	r2, #0
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	e048      	b.n	8005888 <espAt_sendParams+0x18c>
		itoa(parameters[i], &argumentsBuffer[characterCounter], 10);
 80057f6:	234a      	movs	r3, #74	@ 0x4a
 80057f8:	001e      	movs	r6, r3
 80057fa:	2138      	movs	r1, #56	@ 0x38
 80057fc:	185b      	adds	r3, r3, r1
 80057fe:	19db      	adds	r3, r3, r7
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005804:	0092      	lsls	r2, r2, #2
 8005806:	58d0      	ldr	r0, [r2, r3]
 8005808:	244c      	movs	r4, #76	@ 0x4c
 800580a:	1863      	adds	r3, r4, r1
 800580c:	19db      	adds	r3, r3, r7
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	2508      	movs	r5, #8
 8005812:	186a      	adds	r2, r5, r1
 8005814:	19d2      	adds	r2, r2, r7
 8005816:	18d3      	adds	r3, r2, r3
 8005818:	220a      	movs	r2, #10
 800581a:	0019      	movs	r1, r3
 800581c:	f001 f9ab 	bl	8006b76 <itoa>
		characterCounter += strlen(&argumentsBuffer[characterCounter]) + 1;
 8005820:	2038      	movs	r0, #56	@ 0x38
 8005822:	1823      	adds	r3, r4, r0
 8005824:	19db      	adds	r3, r3, r7
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	182a      	adds	r2, r5, r0
 800582a:	19d2      	adds	r2, r2, r7
 800582c:	18d3      	adds	r3, r2, r3
 800582e:	0018      	movs	r0, r3
 8005830:	f7fa fc68 	bl	8000104 <strlen>
 8005834:	0003      	movs	r3, r0
 8005836:	b29a      	uxth	r2, r3
 8005838:	0021      	movs	r1, r4
 800583a:	2038      	movs	r0, #56	@ 0x38
 800583c:	180b      	adds	r3, r1, r0
 800583e:	19db      	adds	r3, r3, r7
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	18d3      	adds	r3, r2, r3
 8005844:	b29a      	uxth	r2, r3
 8005846:	180b      	adds	r3, r1, r0
 8005848:	19db      	adds	r3, r3, r7
 800584a:	3201      	adds	r2, #1
 800584c:	801a      	strh	r2, [r3, #0]
		if (i < paramCount - 1)
 800584e:	0033      	movs	r3, r6
 8005850:	181b      	adds	r3, r3, r0
 8005852:	19db      	adds	r3, r3, r7
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	2368      	movs	r3, #104	@ 0x68
 8005858:	181b      	adds	r3, r3, r0
 800585a:	19db      	adds	r3, r3, r7
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	3b01      	subs	r3, #1
 8005860:	429a      	cmp	r2, r3
 8005862:	da08      	bge.n	8005876 <espAt_sendParams+0x17a>
			argumentsBuffer[characterCounter - 1] = ','; //add comma only if NOT last parameter
 8005864:	0002      	movs	r2, r0
 8005866:	188b      	adds	r3, r1, r2
 8005868:	19db      	adds	r3, r3, r7
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	18aa      	adds	r2, r5, r2
 8005870:	19d2      	adds	r2, r2, r7
 8005872:	212c      	movs	r1, #44	@ 0x2c
 8005874:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 8005876:	214a      	movs	r1, #74	@ 0x4a
 8005878:	2038      	movs	r0, #56	@ 0x38
 800587a:	180b      	adds	r3, r1, r0
 800587c:	19db      	adds	r3, r3, r7
 800587e:	881a      	ldrh	r2, [r3, #0]
 8005880:	180b      	adds	r3, r1, r0
 8005882:	19db      	adds	r3, r3, r7
 8005884:	3201      	adds	r2, #1
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	234a      	movs	r3, #74	@ 0x4a
 800588a:	2638      	movs	r6, #56	@ 0x38
 800588c:	199b      	adds	r3, r3, r6
 800588e:	19da      	adds	r2, r3, r7
 8005890:	2368      	movs	r3, #104	@ 0x68
 8005892:	199b      	adds	r3, r3, r6
 8005894:	19db      	adds	r3, r3, r7
 8005896:	8812      	ldrh	r2, [r2, #0]
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d3ab      	bcc.n	80057f6 <espAt_sendParams+0xfa>
	}

	va_end(ap);

	//count buffer length
	uint16_t prefixLength = strlen(AT_PREFIX);
 800589e:	243e      	movs	r4, #62	@ 0x3e
 80058a0:	19a3      	adds	r3, r4, r6
 80058a2:	19db      	adds	r3, r3, r7
 80058a4:	2203      	movs	r2, #3
 80058a6:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 80058a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fa fc2a 	bl	8000104 <strlen>
 80058b0:	0002      	movs	r2, r0
 80058b2:	253c      	movs	r5, #60	@ 0x3c
 80058b4:	19ab      	adds	r3, r5, r6
 80058b6:	19db      	adds	r3, r3, r7
 80058b8:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 80058ba:	213a      	movs	r1, #58	@ 0x3a
 80058bc:	198b      	adds	r3, r1, r6
 80058be:	19db      	adds	r3, r3, r7
 80058c0:	2201      	movs	r2, #1
 80058c2:	801a      	strh	r2, [r3, #0]
	uint16_t parametersLength = --characterCounter;
 80058c4:	224c      	movs	r2, #76	@ 0x4c
 80058c6:	0030      	movs	r0, r6
 80058c8:	1993      	adds	r3, r2, r6
 80058ca:	19db      	adds	r3, r3, r7
 80058cc:	0016      	movs	r6, r2
 80058ce:	1812      	adds	r2, r2, r0
 80058d0:	19d2      	adds	r2, r2, r7
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	3a01      	subs	r2, #1
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	2038      	movs	r0, #56	@ 0x38
 80058da:	2338      	movs	r3, #56	@ 0x38
 80058dc:	18c2      	adds	r2, r0, r3
 80058de:	19d3      	adds	r3, r2, r7
 80058e0:	0032      	movs	r2, r6
 80058e2:	2638      	movs	r6, #56	@ 0x38
 80058e4:	1992      	adds	r2, r2, r6
 80058e6:	19d2      	adds	r2, r2, r7
 80058e8:	8812      	ldrh	r2, [r2, #0]
 80058ea:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 80058ec:	2336      	movs	r3, #54	@ 0x36
 80058ee:	001e      	movs	r6, r3
 80058f0:	2238      	movs	r2, #56	@ 0x38
 80058f2:	189a      	adds	r2, r3, r2
 80058f4:	19d3      	adds	r3, r2, r7
 80058f6:	2202      	movs	r2, #2
 80058f8:	801a      	strh	r2, [r3, #0]

	//create master buffer and clear it
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 80058fa:	2338      	movs	r3, #56	@ 0x38
 80058fc:	18e2      	adds	r2, r4, r3
 80058fe:	19d2      	adds	r2, r2, r7
 8005900:	18eb      	adds	r3, r5, r3
 8005902:	19db      	adds	r3, r3, r7
 8005904:	8812      	ldrh	r2, [r2, #0]
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	18d3      	adds	r3, r2, r3
 800590a:	b29a      	uxth	r2, r3
 800590c:	2338      	movs	r3, #56	@ 0x38
 800590e:	18c9      	adds	r1, r1, r3
 8005910:	19cb      	adds	r3, r1, r7
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	18d3      	adds	r3, r2, r3
 8005916:	b29a      	uxth	r2, r3
			+ parametersLength + endingLength;
 8005918:	2338      	movs	r3, #56	@ 0x38
 800591a:	18c1      	adds	r1, r0, r3
 800591c:	19cb      	adds	r3, r1, r7
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	18d3      	adds	r3, r2, r3
 8005922:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8005924:	2234      	movs	r2, #52	@ 0x34
 8005926:	0010      	movs	r0, r2
 8005928:	2338      	movs	r3, #56	@ 0x38
 800592a:	18d2      	adds	r2, r2, r3
 800592c:	19d3      	adds	r3, r2, r7
 800592e:	0032      	movs	r2, r6
 8005930:	2638      	movs	r6, #56	@ 0x38
 8005932:	1992      	adds	r2, r2, r6
 8005934:	19d2      	adds	r2, r2, r7
 8005936:	8812      	ldrh	r2, [r2, #0]
 8005938:	188a      	adds	r2, r1, r2
 800593a:	801a      	strh	r2, [r3, #0]
	char buffer[bufferSize];
 800593c:	0002      	movs	r2, r0
 800593e:	1993      	adds	r3, r2, r6
 8005940:	19db      	adds	r3, r3, r7
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	001a      	movs	r2, r3
 8005946:	3a01      	subs	r2, #1
 8005948:	66ba      	str	r2, [r7, #104]	@ 0x68
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	60fa      	str	r2, [r7, #12]
 8005950:	68b8      	ldr	r0, [r7, #8]
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	0006      	movs	r6, r0
 8005956:	0f72      	lsrs	r2, r6, #29
 8005958:	000e      	movs	r6, r1
 800595a:	00f6      	lsls	r6, r6, #3
 800595c:	62fe      	str	r6, [r7, #44]	@ 0x2c
 800595e:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8005960:	4316      	orrs	r6, r2
 8005962:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8005964:	0006      	movs	r6, r0
 8005966:	00f6      	lsls	r6, r6, #3
 8005968:	62be      	str	r6, [r7, #40]	@ 0x28
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	2200      	movs	r2, #0
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	6838      	ldr	r0, [r7, #0]
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	0006      	movs	r6, r0
 8005976:	0f72      	lsrs	r2, r6, #29
 8005978:	000e      	movs	r6, r1
 800597a:	00f6      	lsls	r6, r6, #3
 800597c:	627e      	str	r6, [r7, #36]	@ 0x24
 800597e:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8005980:	4316      	orrs	r6, r2
 8005982:	627e      	str	r6, [r7, #36]	@ 0x24
 8005984:	0006      	movs	r6, r0
 8005986:	00f6      	lsls	r6, r6, #3
 8005988:	623e      	str	r6, [r7, #32]
 800598a:	3307      	adds	r3, #7
 800598c:	08db      	lsrs	r3, r3, #3
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	466e      	mov	r6, sp
 8005992:	1af6      	subs	r6, r6, r3
 8005994:	46b5      	mov	sp, r6
 8005996:	466b      	mov	r3, sp
 8005998:	3300      	adds	r3, #0
 800599a:	667b      	str	r3, [r7, #100]	@ 0x64
	memset(buffer, ' ', bufferSize);
 800599c:	2234      	movs	r2, #52	@ 0x34
 800599e:	2638      	movs	r6, #56	@ 0x38
 80059a0:	1993      	adds	r3, r2, r6
 80059a2:	19db      	adds	r3, r3, r7
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059a8:	2120      	movs	r1, #32
 80059aa:	0018      	movs	r0, r3
 80059ac:	f001 f91c 	bl	8006be8 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 80059b0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80059b2:	19a3      	adds	r3, r4, r6
 80059b4:	19db      	adds	r3, r3, r7
 80059b6:	881a      	ldrh	r2, [r3, #0]
 80059b8:	4b39      	ldr	r3, [pc, #228]	@ (8005aa0 <espAt_sendParams+0x3a4>)
 80059ba:	0019      	movs	r1, r3
 80059bc:	f001 f946 	bl	8006c4c <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 80059c0:	0031      	movs	r1, r6
 80059c2:	19a3      	adds	r3, r4, r6
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80059ca:	18d0      	adds	r0, r2, r3
 80059cc:	000e      	movs	r6, r1
 80059ce:	186b      	adds	r3, r5, r1
 80059d0:	19db      	adds	r3, r3, r7
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	0019      	movs	r1, r3
 80059d8:	f001 f938 	bl	8006c4c <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 80059dc:	0031      	movs	r1, r6
 80059de:	1863      	adds	r3, r4, r1
 80059e0:	19db      	adds	r3, r3, r7
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	1868      	adds	r0, r5, r1
 80059e6:	19c3      	adds	r3, r0, r7
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	18d3      	adds	r3, r2, r3
 80059ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80059ee:	18d0      	adds	r0, r2, r3
 80059f0:	213a      	movs	r1, #58	@ 0x3a
 80059f2:	000e      	movs	r6, r1
 80059f4:	2338      	movs	r3, #56	@ 0x38
 80059f6:	18ca      	adds	r2, r1, r3
 80059f8:	19d3      	adds	r3, r2, r7
 80059fa:	881a      	ldrh	r2, [r3, #0]
 80059fc:	4b29      	ldr	r3, [pc, #164]	@ (8005aa4 <espAt_sendParams+0x3a8>)
 80059fe:	0019      	movs	r1, r3
 8005a00:	f001 f924 	bl	8006c4c <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8005a04:	2038      	movs	r0, #56	@ 0x38
 8005a06:	1823      	adds	r3, r4, r0
 8005a08:	19db      	adds	r3, r3, r7
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	182b      	adds	r3, r5, r0
 8005a0e:	19db      	adds	r3, r3, r7
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	18d2      	adds	r2, r2, r3
 8005a14:	0031      	movs	r1, r6
 8005a16:	0006      	movs	r6, r0
 8005a18:	180b      	adds	r3, r1, r0
 8005a1a:	19db      	adds	r3, r3, r7
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	18d3      	adds	r3, r2, r3
 8005a20:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a22:	18d0      	adds	r0, r2, r3
 8005a24:	2338      	movs	r3, #56	@ 0x38
 8005a26:	0031      	movs	r1, r6
 8005a28:	185b      	adds	r3, r3, r1
 8005a2a:	19db      	adds	r3, r3, r7
 8005a2c:	881a      	ldrh	r2, [r3, #0]
 8005a2e:	2608      	movs	r6, #8
 8005a30:	1873      	adds	r3, r6, r1
 8005a32:	19db      	adds	r3, r3, r7
 8005a34:	0019      	movs	r1, r3
 8005a36:	f001 f909 	bl	8006c4c <memcpy>
			argumentsBuffer, parametersLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8005a3a:	2038      	movs	r0, #56	@ 0x38
 8005a3c:	1823      	adds	r3, r4, r0
 8005a3e:	19db      	adds	r3, r3, r7
 8005a40:	881a      	ldrh	r2, [r3, #0]
 8005a42:	182b      	adds	r3, r5, r0
 8005a44:	19db      	adds	r3, r3, r7
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	18d2      	adds	r2, r2, r3
 8005a4a:	213a      	movs	r1, #58	@ 0x3a
 8005a4c:	180b      	adds	r3, r1, r0
 8005a4e:	19db      	adds	r3, r3, r7
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	18d2      	adds	r2, r2, r3
					+ parametersLength], AT_ENDING, endingLength);
 8005a54:	2338      	movs	r3, #56	@ 0x38
 8005a56:	0001      	movs	r1, r0
 8005a58:	185b      	adds	r3, r3, r1
 8005a5a:	19db      	adds	r3, r3, r7
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8005a60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a62:	18d0      	adds	r0, r2, r3
	memcpy(
 8005a64:	2336      	movs	r3, #54	@ 0x36
 8005a66:	000c      	movs	r4, r1
 8005a68:	185b      	adds	r3, r3, r1
 8005a6a:	19db      	adds	r3, r3, r7
 8005a6c:	881a      	ldrh	r2, [r3, #0]
 8005a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005aa8 <espAt_sendParams+0x3ac>)
 8005a70:	0019      	movs	r1, r3
 8005a72:	f001 f8eb 	bl	8006c4c <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 8005a76:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a78:	2234      	movs	r2, #52	@ 0x34
 8005a7a:	1913      	adds	r3, r2, r4
 8005a7c:	19db      	adds	r3, r3, r7
 8005a7e:	881a      	ldrh	r2, [r3, #0]
 8005a80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a82:	0019      	movs	r1, r3
 8005a84:	f7ff fe00 	bl	8005688 <uartSend>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	46c5      	mov	sp, r8

}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b022      	add	sp, #136	@ 0x88
 8005a92:	bc80      	pop	{r7}
 8005a94:	46b8      	mov	r8, r7
 8005a96:	bcf0      	pop	{r4, r5, r6, r7}
 8005a98:	bc08      	pop	{r3}
 8005a9a:	b002      	add	sp, #8
 8005a9c:	4718      	bx	r3
 8005a9e:	46c0      	nop			@ (mov r8, r8)
 8005aa0:	08007ac8 	.word	0x08007ac8
 8005aa4:	08007ad0 	.word	0x08007ad0
 8005aa8:	08007acc 	.word	0x08007acc

08005aac <espAt_sendString>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendString(espat_radio_t *radio, char *command,
		char *string) {
 8005aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aae:	46c6      	mov	lr, r8
 8005ab0:	b500      	push	{lr}
 8005ab2:	b090      	sub	sp, #64	@ 0x40
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ab8:	6239      	str	r1, [r7, #32]
 8005aba:	61fa      	str	r2, [r7, #28]
 8005abc:	466b      	mov	r3, sp
 8005abe:	4698      	mov	r8, r3

	//check if command and string are valid
	if (command == NULL || string == NULL)
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <espAt_sendString+0x20>
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <espAt_sendString+0x24>
		return ESPAT_STATE_ERR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e139      	b.n	8005d44 <espAt_sendString+0x298>

	uint16_t prefixLength = strlen(AT_PREFIX);
 8005ad0:	2326      	movs	r3, #38	@ 0x26
 8005ad2:	2618      	movs	r6, #24
 8005ad4:	199b      	adds	r3, r3, r6
 8005ad6:	19db      	adds	r3, r3, r7
 8005ad8:	2203      	movs	r2, #3
 8005ada:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f7fa fb10 	bl	8000104 <strlen>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	2124      	movs	r1, #36	@ 0x24
 8005ae8:	198b      	adds	r3, r1, r6
 8005aea:	19db      	adds	r3, r3, r7
 8005aec:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 8005aee:	2222      	movs	r2, #34	@ 0x22
 8005af0:	1993      	adds	r3, r2, r6
 8005af2:	19db      	adds	r3, r3, r7
 8005af4:	2201      	movs	r2, #1
 8005af6:	801a      	strh	r2, [r3, #0]
	uint16_t quoteLength = strlen(AT_STRING_QUOTE_MARK);
 8005af8:	2220      	movs	r2, #32
 8005afa:	1993      	adds	r3, r2, r6
 8005afc:	19db      	adds	r3, r3, r7
 8005afe:	2201      	movs	r2, #1
 8005b00:	801a      	strh	r2, [r3, #0]
	uint16_t stringLength = strlen(string);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fa fafd 	bl	8000104 <strlen>
 8005b0a:	0002      	movs	r2, r0
 8005b0c:	231e      	movs	r3, #30
 8005b0e:	0031      	movs	r1, r6
 8005b10:	185b      	adds	r3, r3, r1
 8005b12:	19db      	adds	r3, r3, r7
 8005b14:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8005b16:	221c      	movs	r2, #28
 8005b18:	0016      	movs	r6, r2
 8005b1a:	1853      	adds	r3, r2, r1
 8005b1c:	19db      	adds	r3, r3, r7
 8005b1e:	2202      	movs	r2, #2
 8005b20:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8005b22:	2326      	movs	r3, #38	@ 0x26
 8005b24:	0008      	movs	r0, r1
 8005b26:	185b      	adds	r3, r3, r1
 8005b28:	19da      	adds	r2, r3, r7
 8005b2a:	2124      	movs	r1, #36	@ 0x24
 8005b2c:	180b      	adds	r3, r1, r0
 8005b2e:	19db      	adds	r3, r3, r7
 8005b30:	8812      	ldrh	r2, [r2, #0]
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	18d3      	adds	r3, r2, r3
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	2022      	movs	r0, #34	@ 0x22
 8005b3a:	2118      	movs	r1, #24
 8005b3c:	1843      	adds	r3, r0, r1
 8005b3e:	19db      	adds	r3, r3, r7
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	18d3      	adds	r3, r2, r3
 8005b44:	b29a      	uxth	r2, r3
			+ (quoteLength * 2) + stringLength + endingLength;
 8005b46:	2020      	movs	r0, #32
 8005b48:	1840      	adds	r0, r0, r1
 8005b4a:	19c3      	adds	r3, r0, r7
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	18db      	adds	r3, r3, r3
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	18d3      	adds	r3, r2, r3
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	211e      	movs	r1, #30
 8005b58:	2318      	movs	r3, #24
 8005b5a:	18c9      	adds	r1, r1, r3
 8005b5c:	19cb      	adds	r3, r1, r7
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	18d3      	adds	r3, r2, r3
 8005b62:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8005b64:	201a      	movs	r0, #26
 8005b66:	2318      	movs	r3, #24
 8005b68:	18c2      	adds	r2, r0, r3
 8005b6a:	19d3      	adds	r3, r2, r7
 8005b6c:	0032      	movs	r2, r6
 8005b6e:	2618      	movs	r6, #24
 8005b70:	1992      	adds	r2, r2, r6
 8005b72:	19d2      	adds	r2, r2, r7
 8005b74:	8812      	ldrh	r2, [r2, #0]
 8005b76:	188a      	adds	r2, r1, r2
 8005b78:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 8005b7a:	1983      	adds	r3, r0, r6
 8005b7c:	19db      	adds	r3, r3, r7
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	001a      	movs	r2, r3
 8005b82:	3a01      	subs	r2, #1
 8005b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b86:	60bb      	str	r3, [r7, #8]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	60fa      	str	r2, [r7, #12]
 8005b8c:	68b8      	ldr	r0, [r7, #8]
 8005b8e:	68f9      	ldr	r1, [r7, #12]
 8005b90:	0006      	movs	r6, r0
 8005b92:	0f72      	lsrs	r2, r6, #29
 8005b94:	000e      	movs	r6, r1
 8005b96:	00f6      	lsls	r6, r6, #3
 8005b98:	617e      	str	r6, [r7, #20]
 8005b9a:	697e      	ldr	r6, [r7, #20]
 8005b9c:	4316      	orrs	r6, r2
 8005b9e:	617e      	str	r6, [r7, #20]
 8005ba0:	0006      	movs	r6, r0
 8005ba2:	00f6      	lsls	r6, r6, #3
 8005ba4:	613e      	str	r6, [r7, #16]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	6838      	ldr	r0, [r7, #0]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	0006      	movs	r6, r0
 8005bb2:	0f72      	lsrs	r2, r6, #29
 8005bb4:	000e      	movs	r6, r1
 8005bb6:	00f5      	lsls	r5, r6, #3
 8005bb8:	4315      	orrs	r5, r2
 8005bba:	0006      	movs	r6, r0
 8005bbc:	00f4      	lsls	r4, r6, #3
 8005bbe:	3307      	adds	r3, #7
 8005bc0:	08db      	lsrs	r3, r3, #3
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	466e      	mov	r6, sp
 8005bc6:	1af6      	subs	r6, r6, r3
 8005bc8:	46b5      	mov	sp, r6
 8005bca:	466b      	mov	r3, sp
 8005bcc:	3300      	adds	r3, #0
 8005bce:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(buffer, ' ', bufferSize);
 8005bd0:	221a      	movs	r2, #26
 8005bd2:	2618      	movs	r6, #24
 8005bd4:	1993      	adds	r3, r2, r6
 8005bd6:	19db      	adds	r3, r3, r7
 8005bd8:	881a      	ldrh	r2, [r3, #0]
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	2120      	movs	r1, #32
 8005bde:	0018      	movs	r0, r3
 8005be0:	f001 f802 	bl	8006be8 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8005be4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005be6:	2426      	movs	r4, #38	@ 0x26
 8005be8:	19a3      	adds	r3, r4, r6
 8005bea:	19db      	adds	r3, r3, r7
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	4b59      	ldr	r3, [pc, #356]	@ (8005d54 <espAt_sendString+0x2a8>)
 8005bf0:	0019      	movs	r1, r3
 8005bf2:	f001 f82b 	bl	8006c4c <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8005bf6:	19a3      	adds	r3, r4, r6
 8005bf8:	19db      	adds	r3, r3, r7
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bfe:	18d0      	adds	r0, r2, r3
 8005c00:	2524      	movs	r5, #36	@ 0x24
 8005c02:	19ab      	adds	r3, r5, r6
 8005c04:	19db      	adds	r3, r3, r7
 8005c06:	881a      	ldrh	r2, [r3, #0]
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	0019      	movs	r1, r3
 8005c0c:	f001 f81e 	bl	8006c4c <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8005c10:	0031      	movs	r1, r6
 8005c12:	1863      	adds	r3, r4, r1
 8005c14:	19db      	adds	r3, r3, r7
 8005c16:	881a      	ldrh	r2, [r3, #0]
 8005c18:	186b      	adds	r3, r5, r1
 8005c1a:	19db      	adds	r3, r3, r7
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	18d3      	adds	r3, r2, r3
 8005c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c22:	18d0      	adds	r0, r2, r3
 8005c24:	2222      	movs	r2, #34	@ 0x22
 8005c26:	0016      	movs	r6, r2
 8005c28:	1853      	adds	r3, r2, r1
 8005c2a:	19db      	adds	r3, r3, r7
 8005c2c:	881a      	ldrh	r2, [r3, #0]
 8005c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d58 <espAt_sendString+0x2ac>)
 8005c30:	0019      	movs	r1, r3
 8005c32:	f001 f80b 	bl	8006c4c <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8005c36:	2118      	movs	r1, #24
 8005c38:	1863      	adds	r3, r4, r1
 8005c3a:	19db      	adds	r3, r3, r7
 8005c3c:	881a      	ldrh	r2, [r3, #0]
 8005c3e:	186b      	adds	r3, r5, r1
 8005c40:	19db      	adds	r3, r3, r7
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	18d2      	adds	r2, r2, r3
 8005c46:	0030      	movs	r0, r6
 8005c48:	1843      	adds	r3, r0, r1
 8005c4a:	19db      	adds	r3, r3, r7
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	18d3      	adds	r3, r2, r3
 8005c50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c52:	18d0      	adds	r0, r2, r3
 8005c54:	2320      	movs	r3, #32
 8005c56:	001e      	movs	r6, r3
 8005c58:	185b      	adds	r3, r3, r1
 8005c5a:	19db      	adds	r3, r3, r7
 8005c5c:	881a      	ldrh	r2, [r3, #0]
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d5c <espAt_sendString+0x2b0>)
 8005c60:	0019      	movs	r1, r3
 8005c62:	f000 fff3 	bl	8006c4c <memcpy>
	AT_STRING_QUOTE_MARK, quoteLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8005c66:	2118      	movs	r1, #24
 8005c68:	1863      	adds	r3, r4, r1
 8005c6a:	19db      	adds	r3, r3, r7
 8005c6c:	881a      	ldrh	r2, [r3, #0]
 8005c6e:	186b      	adds	r3, r5, r1
 8005c70:	19db      	adds	r3, r3, r7
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	18d2      	adds	r2, r2, r3
 8005c76:	2022      	movs	r0, #34	@ 0x22
 8005c78:	1843      	adds	r3, r0, r1
 8005c7a:	19db      	adds	r3, r3, r7
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	18d2      	adds	r2, r2, r3
					+ quoteLength], string, stringLength);
 8005c80:	0033      	movs	r3, r6
 8005c82:	1858      	adds	r0, r3, r1
 8005c84:	19c3      	adds	r3, r0, r7
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8005c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c8c:	18d0      	adds	r0, r2, r3
	memcpy(
 8005c8e:	211e      	movs	r1, #30
 8005c90:	000e      	movs	r6, r1
 8005c92:	2318      	movs	r3, #24
 8005c94:	18ca      	adds	r2, r1, r3
 8005c96:	19d3      	adds	r3, r2, r7
 8005c98:	881a      	ldrh	r2, [r3, #0]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	0019      	movs	r1, r3
 8005c9e:	f000 ffd5 	bl	8006c4c <memcpy>
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8005ca2:	2118      	movs	r1, #24
 8005ca4:	1863      	adds	r3, r4, r1
 8005ca6:	19db      	adds	r3, r3, r7
 8005ca8:	881a      	ldrh	r2, [r3, #0]
 8005caa:	186b      	adds	r3, r5, r1
 8005cac:	19db      	adds	r3, r3, r7
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	18d2      	adds	r2, r2, r3
 8005cb2:	2022      	movs	r0, #34	@ 0x22
 8005cb4:	1843      	adds	r3, r0, r1
 8005cb6:	19db      	adds	r3, r3, r7
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	18d2      	adds	r2, r2, r3
					+ quoteLength + stringLength], AT_STRING_QUOTE_MARK,
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	0008      	movs	r0, r1
 8005cc0:	185b      	adds	r3, r3, r1
 8005cc2:	19db      	adds	r3, r3, r7
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	18d2      	adds	r2, r2, r3
 8005cc8:	0031      	movs	r1, r6
 8005cca:	180e      	adds	r6, r1, r0
 8005ccc:	19f3      	adds	r3, r6, r7
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8005cd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cd4:	18d0      	adds	r0, r2, r3
	memcpy(
 8005cd6:	000e      	movs	r6, r1
 8005cd8:	2318      	movs	r3, #24
 8005cda:	18ca      	adds	r2, r1, r3
 8005cdc:	19d3      	adds	r3, r2, r7
 8005cde:	881a      	ldrh	r2, [r3, #0]
 8005ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d5c <espAt_sendString+0x2b0>)
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	f000 ffb2 	bl	8006c4c <memcpy>
			stringLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8005ce8:	2118      	movs	r1, #24
 8005cea:	1863      	adds	r3, r4, r1
 8005cec:	19db      	adds	r3, r3, r7
 8005cee:	881a      	ldrh	r2, [r3, #0]
 8005cf0:	186b      	adds	r3, r5, r1
 8005cf2:	19db      	adds	r3, r3, r7
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	18d2      	adds	r2, r2, r3
 8005cf8:	2022      	movs	r0, #34	@ 0x22
 8005cfa:	1843      	adds	r3, r0, r1
 8005cfc:	19db      	adds	r3, r3, r7
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	18d2      	adds	r2, r2, r3
					+ (quoteLength * 2) + stringLength], AT_ENDING,
 8005d02:	2320      	movs	r3, #32
 8005d04:	0008      	movs	r0, r1
 8005d06:	185b      	adds	r3, r3, r1
 8005d08:	19db      	adds	r3, r3, r7
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	18d2      	adds	r2, r2, r3
 8005d10:	0031      	movs	r1, r6
 8005d12:	0004      	movs	r4, r0
 8005d14:	180b      	adds	r3, r1, r0
 8005d16:	19db      	adds	r3, r3, r7
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8005d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d1e:	18d0      	adds	r0, r2, r3
	memcpy(
 8005d20:	231c      	movs	r3, #28
 8005d22:	191b      	adds	r3, r3, r4
 8005d24:	19db      	adds	r3, r3, r7
 8005d26:	881a      	ldrh	r2, [r3, #0]
 8005d28:	4b0d      	ldr	r3, [pc, #52]	@ (8005d60 <espAt_sendString+0x2b4>)
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	f000 ff8e 	bl	8006c4c <memcpy>
			endingLength);

	return uartSend(&radio->espUart, buffer, bufferSize);
 8005d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d32:	221a      	movs	r2, #26
 8005d34:	1913      	adds	r3, r2, r4
 8005d36:	19db      	adds	r3, r3, r7
 8005d38:	881a      	ldrh	r2, [r3, #0]
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	0019      	movs	r1, r3
 8005d3e:	f7ff fca3 	bl	8005688 <uartSend>
 8005d42:	0003      	movs	r3, r0
 8005d44:	46c5      	mov	sp, r8

}
 8005d46:	0018      	movs	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b010      	add	sp, #64	@ 0x40
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	46b8      	mov	r8, r7
 8005d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d52:	46c0      	nop			@ (mov r8, r8)
 8005d54:	08007ac8 	.word	0x08007ac8
 8005d58:	08007ad0 	.word	0x08007ad0
 8005d5c:	08007ad4 	.word	0x08007ad4
 8005d60:	08007acc 	.word	0x08007acc

08005d64 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b089      	sub	sp, #36	@ 0x24
 8005d68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d6a:	240c      	movs	r4, #12
 8005d6c:	193b      	adds	r3, r7, r4
 8005d6e:	0018      	movs	r0, r3
 8005d70:	2314      	movs	r3, #20
 8005d72:	001a      	movs	r2, r3
 8005d74:	2100      	movs	r1, #0
 8005d76:	f000 ff37 	bl	8006be8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d7a:	4b32      	ldr	r3, [pc, #200]	@ (8005e44 <MX_GPIO_Init+0xe0>)
 8005d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7e:	4b31      	ldr	r3, [pc, #196]	@ (8005e44 <MX_GPIO_Init+0xe0>)
 8005d80:	2104      	movs	r1, #4
 8005d82:	430a      	orrs	r2, r1
 8005d84:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d86:	4b2f      	ldr	r3, [pc, #188]	@ (8005e44 <MX_GPIO_Init+0xe0>)
 8005d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d92:	4b2c      	ldr	r3, [pc, #176]	@ (8005e44 <MX_GPIO_Init+0xe0>)
 8005d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d96:	4b2b      	ldr	r3, [pc, #172]	@ (8005e44 <MX_GPIO_Init+0xe0>)
 8005d98:	2101      	movs	r1, #1
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d9e:	4b29      	ldr	r3, [pc, #164]	@ (8005e44 <MX_GPIO_Init+0xe0>)
 8005da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da2:	2201      	movs	r2, #1
 8005da4:	4013      	ands	r3, r2
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005daa:	4b26      	ldr	r3, [pc, #152]	@ (8005e44 <MX_GPIO_Init+0xe0>)
 8005dac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dae:	4b25      	ldr	r3, [pc, #148]	@ (8005e44 <MX_GPIO_Init+0xe0>)
 8005db0:	2102      	movs	r1, #2
 8005db2:	430a      	orrs	r2, r1
 8005db4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005db6:	4b23      	ldr	r3, [pc, #140]	@ (8005e44 <MX_GPIO_Init+0xe0>)
 8005db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dba:	2202      	movs	r2, #2
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8005dc2:	23a0      	movs	r3, #160	@ 0xa0
 8005dc4:	05db      	lsls	r3, r3, #23
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2120      	movs	r1, #32
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f7fc ffd5 	bl	8002d7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8005dd0:	193b      	adds	r3, r7, r4
 8005dd2:	2280      	movs	r2, #128	@ 0x80
 8005dd4:	0192      	lsls	r2, r2, #6
 8005dd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dd8:	193b      	adds	r3, r7, r4
 8005dda:	2200      	movs	r2, #0
 8005ddc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dde:	193b      	adds	r3, r7, r4
 8005de0:	2200      	movs	r2, #0
 8005de2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005de4:	193b      	adds	r3, r7, r4
 8005de6:	4a18      	ldr	r2, [pc, #96]	@ (8005e48 <MX_GPIO_Init+0xe4>)
 8005de8:	0019      	movs	r1, r3
 8005dea:	0010      	movs	r0, r2
 8005dec:	f7fc fe44 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8005df0:	193b      	adds	r3, r7, r4
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005df6:	193b      	adds	r3, r7, r4
 8005df8:	2288      	movs	r2, #136	@ 0x88
 8005dfa:	0352      	lsls	r2, r2, #13
 8005dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfe:	193b      	adds	r3, r7, r4
 8005e00:	2200      	movs	r2, #0
 8005e02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8005e04:	193a      	adds	r2, r7, r4
 8005e06:	23a0      	movs	r3, #160	@ 0xa0
 8005e08:	05db      	lsls	r3, r3, #23
 8005e0a:	0011      	movs	r1, r2
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f7fc fe33 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8005e12:	0021      	movs	r1, r4
 8005e14:	187b      	adds	r3, r7, r1
 8005e16:	2220      	movs	r2, #32
 8005e18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e1a:	187b      	adds	r3, r7, r1
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e20:	187b      	adds	r3, r7, r1
 8005e22:	2200      	movs	r2, #0
 8005e24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e26:	187b      	adds	r3, r7, r1
 8005e28:	2200      	movs	r2, #0
 8005e2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8005e2c:	187a      	adds	r2, r7, r1
 8005e2e:	23a0      	movs	r3, #160	@ 0xa0
 8005e30:	05db      	lsls	r3, r3, #23
 8005e32:	0011      	movs	r1, r2
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7fc fe1f 	bl	8002a78 <HAL_GPIO_Init>

}
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b009      	add	sp, #36	@ 0x24
 8005e40:	bd90      	pop	{r4, r7, pc}
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	40021000 	.word	0x40021000
 8005e48:	50000800 	.word	0x50000800

08005e4c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005e50:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e52:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec4 <MX_I2C1_Init+0x78>)
 8005e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8005e56:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e58:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec8 <MX_I2C1_Init+0x7c>)
 8005e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005e5c:	4b18      	ldr	r3, [pc, #96]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e62:	4b17      	ldr	r3, [pc, #92]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e68:	4b15      	ldr	r3, [pc, #84]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005e6e:	4b14      	ldr	r3, [pc, #80]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005e74:	4b12      	ldr	r3, [pc, #72]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e7a:	4b11      	ldr	r3, [pc, #68]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005e86:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7fc ff93 	bl	8002db4 <HAL_I2C_Init>
 8005e8e:	1e03      	subs	r3, r0, #0
 8005e90:	d001      	beq.n	8005e96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005e92:	f000 fca1 	bl	80067d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005e96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005e98:	2100      	movs	r1, #0
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f7fd fd8e 	bl	80039bc <HAL_I2CEx_ConfigAnalogFilter>
 8005ea0:	1e03      	subs	r3, r0, #0
 8005ea2:	d001      	beq.n	8005ea8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005ea4:	f000 fc98 	bl	80067d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005ea8:	4b05      	ldr	r3, [pc, #20]	@ (8005ec0 <MX_I2C1_Init+0x74>)
 8005eaa:	2100      	movs	r1, #0
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7fd fdd1 	bl	8003a54 <HAL_I2CEx_ConfigDigitalFilter>
 8005eb2:	1e03      	subs	r3, r0, #0
 8005eb4:	d001      	beq.n	8005eba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005eb6:	f000 fc8f 	bl	80067d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000090 	.word	0x20000090
 8005ec4:	40005400 	.word	0x40005400
 8005ec8:	00c12166 	.word	0x00c12166

08005ecc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b097      	sub	sp, #92	@ 0x5c
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ed4:	2344      	movs	r3, #68	@ 0x44
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	0018      	movs	r0, r3
 8005eda:	2314      	movs	r3, #20
 8005edc:	001a      	movs	r2, r3
 8005ede:	2100      	movs	r1, #0
 8005ee0:	f000 fe82 	bl	8006be8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ee4:	2410      	movs	r4, #16
 8005ee6:	193b      	adds	r3, r7, r4
 8005ee8:	0018      	movs	r0, r3
 8005eea:	2334      	movs	r3, #52	@ 0x34
 8005eec:	001a      	movs	r2, r3
 8005eee:	2100      	movs	r1, #0
 8005ef0:	f000 fe7a 	bl	8006be8 <memset>
  if(i2cHandle->Instance==I2C1)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a22      	ldr	r2, [pc, #136]	@ (8005f84 <HAL_I2C_MspInit+0xb8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d13e      	bne.n	8005f7c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005efe:	193b      	adds	r3, r7, r4
 8005f00:	2220      	movs	r2, #32
 8005f02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005f04:	193b      	adds	r3, r7, r4
 8005f06:	2200      	movs	r2, #0
 8005f08:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f0a:	193b      	adds	r3, r7, r4
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f7fe fafd 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 8005f12:	1e03      	subs	r3, r0, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005f16:	f000 fc5f 	bl	80067d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005f88 <HAL_I2C_MspInit+0xbc>)
 8005f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f88 <HAL_I2C_MspInit+0xbc>)
 8005f20:	2102      	movs	r1, #2
 8005f22:	430a      	orrs	r2, r1
 8005f24:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f26:	4b18      	ldr	r3, [pc, #96]	@ (8005f88 <HAL_I2C_MspInit+0xbc>)
 8005f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f32:	2144      	movs	r1, #68	@ 0x44
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	22c0      	movs	r2, #192	@ 0xc0
 8005f38:	0092      	lsls	r2, r2, #2
 8005f3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f3c:	187b      	adds	r3, r7, r1
 8005f3e:	2212      	movs	r2, #18
 8005f40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f42:	187b      	adds	r3, r7, r1
 8005f44:	2200      	movs	r2, #0
 8005f46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f48:	187b      	adds	r3, r7, r1
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005f4e:	187b      	adds	r3, r7, r1
 8005f50:	2206      	movs	r2, #6
 8005f52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	4a0d      	ldr	r2, [pc, #52]	@ (8005f8c <HAL_I2C_MspInit+0xc0>)
 8005f58:	0019      	movs	r1, r3
 8005f5a:	0010      	movs	r0, r2
 8005f5c:	f7fc fd8c 	bl	8002a78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f60:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <HAL_I2C_MspInit+0xbc>)
 8005f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f64:	4b08      	ldr	r3, [pc, #32]	@ (8005f88 <HAL_I2C_MspInit+0xbc>)
 8005f66:	2180      	movs	r1, #128	@ 0x80
 8005f68:	0389      	lsls	r1, r1, #14
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <HAL_I2C_MspInit+0xbc>)
 8005f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f72:	2380      	movs	r3, #128	@ 0x80
 8005f74:	039b      	lsls	r3, r3, #14
 8005f76:	4013      	ands	r3, r2
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005f7c:	46c0      	nop			@ (mov r8, r8)
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b017      	add	sp, #92	@ 0x5c
 8005f82:	bd90      	pop	{r4, r7, pc}
 8005f84:	40005400 	.word	0x40005400
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	50000400 	.word	0x50000400

08005f90 <i2cSend>:
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
lsm6ds_state_t i2cSend(lsm6ds_i2cInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 8005f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f92:	b08b      	sub	sp, #44	@ 0x2c
 8005f94:	af04      	add	r7, sp, #16
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	0008      	movs	r0, r1
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	607b      	str	r3, [r7, #4]
 8005f9e:	260a      	movs	r6, #10
 8005fa0:	19bb      	adds	r3, r7, r6
 8005fa2:	1c02      	adds	r2, r0, #0
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	2508      	movs	r5, #8
 8005fa8:	197b      	adds	r3, r7, r5
 8005faa:	1c0a      	adds	r2, r1, #0
 8005fac:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Write(i2c->i2c, devAddr, memAddr,
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2117      	movs	r1, #23
 8005fbc:	187c      	adds	r4, r7, r1
 8005fbe:	1979      	adds	r1, r7, r5
 8005fc0:	880d      	ldrh	r5, [r1, #0]
 8005fc2:	19b9      	adds	r1, r7, r6
 8005fc4:	8809      	ldrh	r1, [r1, #0]
 8005fc6:	9302      	str	r3, [sp, #8]
 8005fc8:	9201      	str	r2, [sp, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	2301      	movs	r3, #1
 8005fd0:	002a      	movs	r2, r5
 8005fd2:	f7fc ff95 	bl	8002f00 <HAL_I2C_Mem_Write>
 8005fd6:	0003      	movs	r3, r0
 8005fd8:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->sendTimeout);

	if (state == HAL_OK)
 8005fda:	2117      	movs	r1, #23
 8005fdc:	187b      	adds	r3, r7, r1
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <i2cSend+0x58>
		return LSM6DS_STATE_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e007      	b.n	8005ff8 <i2cSend+0x68>
	else if (state == HAL_TIMEOUT)
 8005fe8:	2317      	movs	r3, #23
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d101      	bne.n	8005ff6 <i2cSend+0x66>
		return LSM6DS_STATE_TIMEOUT;
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e000      	b.n	8005ff8 <i2cSend+0x68>
	else
		return LSM6DS_STATE_ERR;
 8005ff6:	2301      	movs	r3, #1
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b007      	add	sp, #28
 8005ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006000 <i2cReceive>:

//port
lsm6ds_state_t i2cReceive(lsm6ds_i2cInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 8006000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006002:	b08b      	sub	sp, #44	@ 0x2c
 8006004:	af04      	add	r7, sp, #16
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	0008      	movs	r0, r1
 800600a:	0011      	movs	r1, r2
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	260a      	movs	r6, #10
 8006010:	19bb      	adds	r3, r7, r6
 8006012:	1c02      	adds	r2, r0, #0
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	2508      	movs	r5, #8
 8006018:	197b      	adds	r3, r7, r5
 800601a:	1c0a      	adds	r2, r1, #0
 800601c:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Read(i2c->i2c, devAddr, memAddr,
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2117      	movs	r1, #23
 800602c:	187c      	adds	r4, r7, r1
 800602e:	1979      	adds	r1, r7, r5
 8006030:	880d      	ldrh	r5, [r1, #0]
 8006032:	19b9      	adds	r1, r7, r6
 8006034:	8809      	ldrh	r1, [r1, #0]
 8006036:	9302      	str	r3, [sp, #8]
 8006038:	9201      	str	r2, [sp, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	2301      	movs	r3, #1
 8006040:	002a      	movs	r2, r5
 8006042:	f7fd f88b 	bl	800315c <HAL_I2C_Mem_Read>
 8006046:	0003      	movs	r3, r0
 8006048:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->receiveTimeout);

	if (state == HAL_OK)
 800604a:	2117      	movs	r1, #23
 800604c:	187b      	adds	r3, r7, r1
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <i2cReceive+0x58>
		return LSM6DS_STATE_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e007      	b.n	8006068 <i2cReceive+0x68>
	else if (state == HAL_TIMEOUT)
 8006058:	2317      	movs	r3, #23
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b03      	cmp	r3, #3
 8006060:	d101      	bne.n	8006066 <i2cReceive+0x66>
		return LSM6DS_STATE_TIMEOUT;
 8006062:	2302      	movs	r3, #2
 8006064:	e000      	b.n	8006068 <i2cReceive+0x68>
	else
		return LSM6DS_STATE_ERR;
 8006066:	2301      	movs	r3, #1
}
 8006068:	0018      	movs	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	b007      	add	sp, #28
 800606e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006070 <modifyReg>:
 * @param: register address
 * @param: bitmask
 * @param: value
 */
lsm6ds_state_t modifyReg(lsm6ds_sensor_t *sensor, uint16_t regAddr,
		uint8_t bitmask, uint16_t value) {
 8006070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006072:	b089      	sub	sp, #36	@ 0x24
 8006074:	af02      	add	r7, sp, #8
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	000c      	movs	r4, r1
 800607a:	0010      	movs	r0, r2
 800607c:	0019      	movs	r1, r3
 800607e:	230a      	movs	r3, #10
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	1c22      	adds	r2, r4, #0
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	2209      	movs	r2, #9
 8006088:	18bb      	adds	r3, r7, r2
 800608a:	1c02      	adds	r2, r0, #0
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	1dbb      	adds	r3, r7, #6
 8006090:	1c0a      	adds	r2, r1, #0
 8006092:	801a      	strh	r2, [r3, #0]

	uint8_t readedReg = 0;
 8006094:	2516      	movs	r5, #22
 8006096:	197b      	adds	r3, r7, r5
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 800609c:	2617      	movs	r6, #23
 800609e:	19bb      	adds	r3, r7, r6
 80060a0:	2201      	movs	r2, #1
 80060a2:	701a      	strb	r2, [r3, #0]

	//read original register
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr,
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8999      	ldrh	r1, [r3, #12]
 80060aa:	19bc      	adds	r4, r7, r6
 80060ac:	197d      	adds	r5, r7, r5
 80060ae:	230a      	movs	r3, #10
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	881a      	ldrh	r2, [r3, #0]
 80060b4:	2301      	movs	r3, #1
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	002b      	movs	r3, r5
 80060ba:	f7ff ffa1 	bl	8006000 <i2cReceive>
 80060be:	0003      	movs	r3, r0
 80060c0:	7023      	strb	r3, [r4, #0]
			&readedReg, 1);

	if (state != LSM6DS_STATE_OK)
 80060c2:	19bb      	adds	r3, r7, r6
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <modifyReg+0x60>
		return state;
 80060ca:	19bb      	adds	r3, r7, r6
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	e02c      	b.n	800612a <modifyReg+0xba>

	//clear bits corresponding to mask
	readedReg &= ~(bitmask);
 80060d0:	2009      	movs	r0, #9
 80060d2:	183b      	adds	r3, r7, r0
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	b25b      	sxtb	r3, r3
 80060d8:	43db      	mvns	r3, r3
 80060da:	b25b      	sxtb	r3, r3
 80060dc:	2116      	movs	r1, #22
 80060de:	187a      	adds	r2, r7, r1
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	b252      	sxtb	r2, r2
 80060e4:	4013      	ands	r3, r2
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	187b      	adds	r3, r7, r1
 80060ec:	701a      	strb	r2, [r3, #0]

	//modify register
	uint8_t regToWrite = readedReg | (bitmask & value);
 80060ee:	1dbb      	adds	r3, r7, #6
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	183a      	adds	r2, r7, r0
 80060f6:	7812      	ldrb	r2, [r2, #0]
 80060f8:	4013      	ands	r3, r2
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	b25a      	sxtb	r2, r3
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	b25b      	sxtb	r3, r3
 8006104:	4313      	orrs	r3, r2
 8006106:	b25b      	sxtb	r3, r3
 8006108:	b2da      	uxtb	r2, r3
 800610a:	2415      	movs	r4, #21
 800610c:	193b      	adds	r3, r7, r4
 800610e:	701a      	strb	r2, [r3, #0]

	//write register
	return i2cSend(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr, &regToWrite,
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8999      	ldrh	r1, [r3, #12]
 8006116:	193c      	adds	r4, r7, r4
 8006118:	230a      	movs	r3, #10
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	881a      	ldrh	r2, [r3, #0]
 800611e:	2301      	movs	r3, #1
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	0023      	movs	r3, r4
 8006124:	f7ff ff34 	bl	8005f90 <i2cSend>
 8006128:	0003      	movs	r3, r0
			1);

}
 800612a:	0018      	movs	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	b007      	add	sp, #28
 8006130:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006132 <lsm6ds_init>:
 * @param: rxTimeout
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_init(lsm6ds_sensor_t *sensor, uint16_t devAddr,
		I2C_HandleTypeDef *i2c, uint32_t txTimeout, uint32_t rxTimeout) { //port
 8006132:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006134:	b089      	sub	sp, #36	@ 0x24
 8006136:	af02      	add	r7, sp, #8
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	200a      	movs	r0, #10
 8006140:	183b      	adds	r3, r7, r0
 8006142:	1c0a      	adds	r2, r1, #0
 8006144:	801a      	strh	r2, [r3, #0]

	sensor->deviceAddr = devAddr;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	183a      	adds	r2, r7, r0
 800614a:	8812      	ldrh	r2, [r2, #0]
 800614c:	819a      	strh	r2, [r3, #12]
	sensor->lsm6dsI2c.i2c = i2c;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]
	sensor->lsm6dsI2c.receiveTimeout = rxTimeout;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006158:	609a      	str	r2, [r3, #8]
	sensor->lsm6dsI2c.sendTimeout = txTimeout;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	605a      	str	r2, [r3, #4]

	memset(&sensor->outGR, 0, sizeof(sensor->outGR));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3314      	adds	r3, #20
 8006164:	2206      	movs	r2, #6
 8006166:	2100      	movs	r1, #0
 8006168:	0018      	movs	r0, r3
 800616a:	f000 fd3d 	bl	8006be8 <memset>
	memset(&sensor->outXL, 0, sizeof(sensor->outXL));
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	330e      	adds	r3, #14
 8006172:	2206      	movs	r2, #6
 8006174:	2100      	movs	r1, #0
 8006176:	0018      	movs	r0, r3
 8006178:	f000 fd36 	bl	8006be8 <memset>
	sensor->outTemperature = 0;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	835a      	strh	r2, [r3, #26]

	//check communication
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8006182:	2417      	movs	r4, #23
 8006184:	193b      	adds	r3, r7, r4
 8006186:	2201      	movs	r2, #1
 8006188:	701a      	strb	r2, [r3, #0]
	uint8_t receivedWhoIAm = 0;
 800618a:	2616      	movs	r6, #22
 800618c:	19bb      	adds	r3, r7, r6
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr,
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8999      	ldrh	r1, [r3, #12]
 8006198:	0025      	movs	r5, r4
 800619a:	193c      	adds	r4, r7, r4
 800619c:	19bb      	adds	r3, r7, r6
 800619e:	2201      	movs	r2, #1
 80061a0:	9200      	str	r2, [sp, #0]
 80061a2:	220f      	movs	r2, #15
 80061a4:	f7ff ff2c 	bl	8006000 <i2cReceive>
 80061a8:	0003      	movs	r3, r0
 80061aa:	7023      	strb	r3, [r4, #0]
	LSM6DS_REG_WHO_AM_I, &receivedWhoIAm, 1);
	if (state == LSM6DS_STATE_ERR)
 80061ac:	197b      	adds	r3, r7, r5
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <lsm6ds_init+0x86>
		return LSM6DS_STATE_ERR_I2C;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e00f      	b.n	80061d8 <lsm6ds_init+0xa6>
	else if (state == LSM6DS_STATE_TIMEOUT)
 80061b8:	2217      	movs	r2, #23
 80061ba:	18bb      	adds	r3, r7, r2
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d102      	bne.n	80061c8 <lsm6ds_init+0x96>
		return state;
 80061c2:	18bb      	adds	r3, r7, r2
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	e007      	b.n	80061d8 <lsm6ds_init+0xa6>
	else {
		if (receivedWhoIAm == LSM6DS_WHO_AM_I)
 80061c8:	2316      	movs	r3, #22
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b6a      	cmp	r3, #106	@ 0x6a
 80061d0:	d101      	bne.n	80061d6 <lsm6ds_init+0xa4>
			return LSM6DS_STATE_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e000      	b.n	80061d8 <lsm6ds_init+0xa6>
		else
			return LSM6DS_STATE_WRONG_WHOAMI;
 80061d6:	2304      	movs	r3, #4
	}

}
 80061d8:	0018      	movs	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	b007      	add	sp, #28
 80061de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061e0 <lsm6ds_setXLOutputDataRate>:
 * @param: sensor
 * @param: LSM6DS_ODR_XL_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setXLOutputDataRate(lsm6ds_sensor_t *sensor, uint8_t odr) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	000a      	movs	r2, r1
 80061ea:	1cfb      	adds	r3, r7, #3
 80061ec:	701a      	strb	r2, [r3, #0]

	return modifyReg(sensor, LSM6DS_REG_CTRL1_XL, LSM6DS_MASK_ODR_XL, odr);
 80061ee:	1cfb      	adds	r3, r7, #3
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	22f0      	movs	r2, #240	@ 0xf0
 80061f8:	2110      	movs	r1, #16
 80061fa:	f7ff ff39 	bl	8006070 <modifyReg>
 80061fe:	0003      	movs	r3, r0

}
 8006200:	0018      	movs	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	b002      	add	sp, #8
 8006206:	bd80      	pop	{r7, pc}

08006208 <lsm6ds_setXLFullScale>:
 * @param: sensor
 * @param: LSM6DS_FS_XL_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setXLFullScale(lsm6ds_sensor_t *sensor, uint8_t fs) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	000a      	movs	r2, r1
 8006212:	1cfb      	adds	r3, r7, #3
 8006214:	701a      	strb	r2, [r3, #0]

	return modifyReg(sensor, LSM6DS_REG_CTRL1_XL, LSM6DS_MASK_FS_XL, fs);
 8006216:	1cfb      	adds	r3, r7, #3
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	220c      	movs	r2, #12
 8006220:	2110      	movs	r1, #16
 8006222:	f7ff ff25 	bl	8006070 <modifyReg>
 8006226:	0003      	movs	r3, r0

}
 8006228:	0018      	movs	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	b002      	add	sp, #8
 800622e:	bd80      	pop	{r7, pc}

08006230 <lsm6ds_setGROutputDataRate>:
 * @param: sensor
 * @param: LSM6DS_ODR_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGROutputDataRate(lsm6ds_sensor_t *sensor, uint8_t odr) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	000a      	movs	r2, r1
 800623a:	1cfb      	adds	r3, r7, #3
 800623c:	701a      	strb	r2, [r3, #0]
	return modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_ODR_G, odr);
 800623e:	1cfb      	adds	r3, r7, #3
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	22f0      	movs	r2, #240	@ 0xf0
 8006248:	2111      	movs	r1, #17
 800624a:	f7ff ff11 	bl	8006070 <modifyReg>
 800624e:	0003      	movs	r3, r0

}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b002      	add	sp, #8
 8006256:	bd80      	pop	{r7, pc}

08006258 <lsm6ds_setGRFullScale>:
 * @param: sensor
 * @param: LSM6DS_FS_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGRFullScale(lsm6ds_sensor_t *sensor, uint8_t fs) {
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	000a      	movs	r2, r1
 8006262:	1cfb      	adds	r3, r7, #3
 8006264:	701a      	strb	r2, [r3, #0]

	lsm6ds_state_t stat = LSM6DS_STATE_ERR;
 8006266:	250f      	movs	r5, #15
 8006268:	197b      	adds	r3, r7, r5
 800626a:	2201      	movs	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]

	if (fs == LSM6DS_FS_G_125DPS) {
 800626e:	1cfb      	adds	r3, r7, #3
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d120      	bne.n	80062b8 <lsm6ds_setGRFullScale+0x60>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G,
 8006276:	197c      	adds	r4, r7, r5
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	2300      	movs	r3, #0
 800627c:	220c      	movs	r2, #12
 800627e:	2111      	movs	r1, #17
 8006280:	f7ff fef6 	bl	8006070 <modifyReg>
 8006284:	0003      	movs	r3, r0
 8006286:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_245DPS);
		if (stat != LSM6DS_STATE_OK)
 8006288:	197b      	adds	r3, r7, r5
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <lsm6ds_setGRFullScale+0x3e>
			return stat;
 8006290:	197b      	adds	r3, r7, r5
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	e037      	b.n	8006306 <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125,
 8006296:	250f      	movs	r5, #15
 8006298:	197c      	adds	r4, r7, r5
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	2302      	movs	r3, #2
 800629e:	2202      	movs	r2, #2
 80062a0:	2111      	movs	r1, #17
 80062a2:	f7ff fee5 	bl	8006070 <modifyReg>
 80062a6:	0003      	movs	r3, r0
 80062a8:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_125DPS);
		if (stat != LSM6DS_STATE_OK)
 80062aa:	197b      	adds	r3, r7, r5
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d026      	beq.n	8006300 <lsm6ds_setGRFullScale+0xa8>
			return stat;
 80062b2:	197b      	adds	r3, r7, r5
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	e026      	b.n	8006306 <lsm6ds_setGRFullScale+0xae>

	} else {

		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125, 0);
 80062b8:	250f      	movs	r5, #15
 80062ba:	197c      	adds	r4, r7, r5
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	2300      	movs	r3, #0
 80062c0:	2202      	movs	r2, #2
 80062c2:	2111      	movs	r1, #17
 80062c4:	f7ff fed4 	bl	8006070 <modifyReg>
 80062c8:	0003      	movs	r3, r0
 80062ca:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 80062cc:	197b      	adds	r3, r7, r5
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <lsm6ds_setGRFullScale+0x82>
			return stat;
 80062d4:	197b      	adds	r3, r7, r5
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	e015      	b.n	8006306 <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G, fs);
 80062da:	1cfb      	adds	r3, r7, #3
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	250f      	movs	r5, #15
 80062e2:	197c      	adds	r4, r7, r5
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	220c      	movs	r2, #12
 80062e8:	2111      	movs	r1, #17
 80062ea:	f7ff fec1 	bl	8006070 <modifyReg>
 80062ee:	0003      	movs	r3, r0
 80062f0:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 80062f2:	197b      	adds	r3, r7, r5
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <lsm6ds_setGRFullScale+0xa8>
			return stat;
 80062fa:	197b      	adds	r3, r7, r5
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	e002      	b.n	8006306 <lsm6ds_setGRFullScale+0xae>

	}

	return stat;
 8006300:	230f      	movs	r3, #15
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	781b      	ldrb	r3, [r3, #0]

}
 8006306:	0018      	movs	r0, r3
 8006308:	46bd      	mov	sp, r7
 800630a:	b004      	add	sp, #16
 800630c:	bdb0      	pop	{r4, r5, r7, pc}

0800630e <lsm6ds_reset>:
 * software reset
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_reset(lsm6ds_sensor_t *sensor) {
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
	return modifyReg(sensor, LSM6DS_REG_CTRL3_C, LSM6DS_MASK_SW_RESET,
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	2301      	movs	r3, #1
 800631a:	2201      	movs	r2, #1
 800631c:	2112      	movs	r1, #18
 800631e:	f7ff fea7 	bl	8006070 <modifyReg>
 8006322:	0003      	movs	r3, r0
	LSM6DS_SW_RESET);
}
 8006324:	0018      	movs	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	b002      	add	sp, #8
 800632a:	bd80      	pop	{r7, pc}

0800632c <lsm6ds_newDataAvailableCheck>:
 * @output: check output with LSM6DS_TDA/GDA/XLDA
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_newDataAvailableCheck(lsm6ds_sensor_t *sensor,
		uint8_t *newData) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af02      	add	r7, sp, #8
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]

	return i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr,
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	8999      	ldrh	r1, [r3, #12]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2201      	movs	r2, #1
 8006340:	9200      	str	r2, [sp, #0]
 8006342:	221e      	movs	r2, #30
 8006344:	f7ff fe5c 	bl	8006000 <i2cReceive>
 8006348:	0003      	movs	r3, r0
			LSM6DS_REG_STATUS_REG, newData, 1);

}
 800634a:	0018      	movs	r0, r3
 800634c:	46bd      	mov	sp, r7
 800634e:	b002      	add	sp, #8
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <lsm6ds_updateTemp>:
 * updates temperature in sensor struct
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_updateTemp(lsm6ds_sensor_t *sensor){
 8006354:	b5b0      	push	{r4, r5, r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af02      	add	r7, sp, #8
 800635a:	6078      	str	r0, [r7, #4]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 800635c:	250f      	movs	r5, #15
 800635e:	197b      	adds	r3, r7, r5
 8006360:	2201      	movs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
	union {
		uint8_t array[2];
		int16_t value;
	}outputData;

	status = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, LSM6DS_REG_OUT_TEMP_L, outputData.array, 2);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	8999      	ldrh	r1, [r3, #12]
 800636a:	197c      	adds	r4, r7, r5
 800636c:	230c      	movs	r3, #12
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	2202      	movs	r2, #2
 8006372:	9200      	str	r2, [sp, #0]
 8006374:	2220      	movs	r2, #32
 8006376:	f7ff fe43 	bl	8006000 <i2cReceive>
 800637a:	0003      	movs	r3, r0
 800637c:	7023      	strb	r3, [r4, #0]

	if(status != LSM6DS_STATE_OK)
 800637e:	197b      	adds	r3, r7, r5
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <lsm6ds_updateTemp+0x38>
		return status;
 8006386:	197b      	adds	r3, r7, r5
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	e015      	b.n	80063b8 <lsm6ds_updateTemp+0x64>

	sensor->outTemperature = 2500+(((int32_t)outputData.value*100)/256);
 800638c:	230c      	movs	r3, #12
 800638e:	18fb      	adds	r3, r7, r3
 8006390:	2200      	movs	r2, #0
 8006392:	5e9b      	ldrsh	r3, [r3, r2]
 8006394:	001a      	movs	r2, r3
 8006396:	2364      	movs	r3, #100	@ 0x64
 8006398:	4353      	muls	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	da00      	bge.n	80063a0 <lsm6ds_updateTemp+0x4c>
 800639e:	33ff      	adds	r3, #255	@ 0xff
 80063a0:	121b      	asrs	r3, r3, #8
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	4a06      	ldr	r2, [pc, #24]	@ (80063c0 <lsm6ds_updateTemp+0x6c>)
 80063a6:	4694      	mov	ip, r2
 80063a8:	4463      	add	r3, ip
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	b21a      	sxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	835a      	strh	r2, [r3, #26]

	return status;
 80063b2:	230f      	movs	r3, #15
 80063b4:	18fb      	adds	r3, r7, r3
 80063b6:	781b      	ldrb	r3, [r3, #0]

}
 80063b8:	0018      	movs	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b004      	add	sp, #16
 80063be:	bdb0      	pop	{r4, r5, r7, pc}
 80063c0:	000009c4 	.word	0x000009c4

080063c4 <lsm6ds_updateGR>:
 * updates gyro data in sensor struct
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_updateGR(lsm6ds_sensor_t *sensor){
 80063c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 80063cc:	250f      	movs	r5, #15
 80063ce:	197b      	adds	r3, r7, r5
 80063d0:	2201      	movs	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
	union{
		uint8_t raw[6];
		int16_t separated[3];
	}outputData;

	memset(&outputData, 0, sizeof(outputData));
 80063d4:	2608      	movs	r6, #8
 80063d6:	19bb      	adds	r3, r7, r6
 80063d8:	2206      	movs	r2, #6
 80063da:	2100      	movs	r1, #0
 80063dc:	0018      	movs	r0, r3
 80063de:	f000 fc03 	bl	8006be8 <memset>

	status = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, LSM6DS_REG_OUTX_L_G, outputData.raw, 6);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8999      	ldrh	r1, [r3, #12]
 80063e8:	197c      	adds	r4, r7, r5
 80063ea:	19bb      	adds	r3, r7, r6
 80063ec:	2206      	movs	r2, #6
 80063ee:	9200      	str	r2, [sp, #0]
 80063f0:	2222      	movs	r2, #34	@ 0x22
 80063f2:	f7ff fe05 	bl	8006000 <i2cReceive>
 80063f6:	0003      	movs	r3, r0
 80063f8:	7023      	strb	r3, [r4, #0]

	if(status != LSM6DS_STATE_OK)
 80063fa:	197b      	adds	r3, r7, r5
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <lsm6ds_updateGR+0x44>
		return status;
 8006402:	197b      	adds	r3, r7, r5
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	e012      	b.n	800642e <lsm6ds_updateGR+0x6a>

	sensor->outGR.x = outputData.separated[0];
 8006408:	2108      	movs	r1, #8
 800640a:	187b      	adds	r3, r7, r1
 800640c:	2200      	movs	r2, #0
 800640e:	5e9a      	ldrsh	r2, [r3, r2]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	829a      	strh	r2, [r3, #20]
	sensor->outGR.y = outputData.separated[1];
 8006414:	187b      	adds	r3, r7, r1
 8006416:	2202      	movs	r2, #2
 8006418:	5e9a      	ldrsh	r2, [r3, r2]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	82da      	strh	r2, [r3, #22]
	sensor->outGR.z = outputData.separated[2];
 800641e:	187b      	adds	r3, r7, r1
 8006420:	2204      	movs	r2, #4
 8006422:	5e9a      	ldrsh	r2, [r3, r2]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	831a      	strh	r2, [r3, #24]


	return status;
 8006428:	230f      	movs	r3, #15
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	781b      	ldrb	r3, [r3, #0]

}
 800642e:	0018      	movs	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	b005      	add	sp, #20
 8006434:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643a:	b095      	sub	sp, #84	@ 0x54
 800643c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800643e:	f7fc f9bd 	bl	80027bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006442:	f000 f96b 	bl	800671c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006446:	f7ff fc8d 	bl	8005d64 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800644a:	f000 fa0d 	bl	8006868 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800644e:	f000 fa59 	bl	8006904 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8006452:	f7ff fcfb 	bl	8005e4c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	lsm6ds_state_t sensorStat = lsm6ds_init(&mems, LSM6DS_ADDR_SA0_L, &hi2c1,
 8006456:	2517      	movs	r5, #23
 8006458:	2620      	movs	r6, #32
 800645a:	19ab      	adds	r3, r5, r6
 800645c:	19dc      	adds	r4, r3, r7
 800645e:	4aa4      	ldr	r2, [pc, #656]	@ (80066f0 <main+0x2b8>)
 8006460:	48a4      	ldr	r0, [pc, #656]	@ (80066f4 <main+0x2bc>)
 8006462:	2364      	movs	r3, #100	@ 0x64
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	2364      	movs	r3, #100	@ 0x64
 8006468:	21d4      	movs	r1, #212	@ 0xd4
 800646a:	f7ff fe62 	bl	8006132 <lsm6ds_init>
 800646e:	0003      	movs	r3, r0
 8006470:	7023      	strb	r3, [r4, #0]
			100, 100);

	espAt_init(&bleRadio, &huart1, 50, 2000);
 8006472:	23fa      	movs	r3, #250	@ 0xfa
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	49a0      	ldr	r1, [pc, #640]	@ (80066f8 <main+0x2c0>)
 8006478:	48a0      	ldr	r0, [pc, #640]	@ (80066fc <main+0x2c4>)
 800647a:	2232      	movs	r2, #50	@ 0x32
 800647c:	f7ff f929 	bl	80056d2 <espAt_init>

//	espAt_sendCommand(&bleRadio, G_RST);
//	HAL_Delay(1000);

	espAt_sendString(&bleRadio, S_BHN, "bartsHID");
 8006480:	4a9f      	ldr	r2, [pc, #636]	@ (8006700 <main+0x2c8>)
 8006482:	49a0      	ldr	r1, [pc, #640]	@ (8006704 <main+0x2cc>)
 8006484:	4b9d      	ldr	r3, [pc, #628]	@ (80066fc <main+0x2c4>)
 8006486:	0018      	movs	r0, r3
 8006488:	f7ff fb10 	bl	8005aac <espAt_sendString>
	HAL_Delay(200);
 800648c:	20c8      	movs	r0, #200	@ 0xc8
 800648e:	f7fc fa1b 	bl	80028c8 <HAL_Delay>
	espAt_sendParams(&bleRadio, P_BHI, 1, 1);
 8006492:	499d      	ldr	r1, [pc, #628]	@ (8006708 <main+0x2d0>)
 8006494:	4899      	ldr	r0, [pc, #612]	@ (80066fc <main+0x2c4>)
 8006496:	2301      	movs	r3, #1
 8006498:	2201      	movs	r2, #1
 800649a:	f7ff f92f 	bl	80056fc <espAt_sendParams>
	HAL_Delay(200);
 800649e:	20c8      	movs	r0, #200	@ 0xc8
 80064a0:	f7fc fa12 	bl	80028c8 <HAL_Delay>

	sensorStat = lsm6ds_reset(&mems);
 80064a4:	19ab      	adds	r3, r5, r6
 80064a6:	19dc      	adds	r4, r3, r7
 80064a8:	4b92      	ldr	r3, [pc, #584]	@ (80066f4 <main+0x2bc>)
 80064aa:	0018      	movs	r0, r3
 80064ac:	f7ff ff2f 	bl	800630e <lsm6ds_reset>
 80064b0:	0003      	movs	r3, r0
 80064b2:	7023      	strb	r3, [r4, #0]

	sensorStat = lsm6ds_setXLOutputDataRate(&mems, LSM6DS_ODR_XL_12_5_HZ);
 80064b4:	19ab      	adds	r3, r5, r6
 80064b6:	19dc      	adds	r4, r3, r7
 80064b8:	4b8e      	ldr	r3, [pc, #568]	@ (80066f4 <main+0x2bc>)
 80064ba:	2110      	movs	r1, #16
 80064bc:	0018      	movs	r0, r3
 80064be:	f7ff fe8f 	bl	80061e0 <lsm6ds_setXLOutputDataRate>
 80064c2:	0003      	movs	r3, r0
 80064c4:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setGROutputDataRate(&mems, LSM6DS_ODR_G_208_HZ);
 80064c6:	19ab      	adds	r3, r5, r6
 80064c8:	19dc      	adds	r4, r3, r7
 80064ca:	4b8a      	ldr	r3, [pc, #552]	@ (80066f4 <main+0x2bc>)
 80064cc:	2150      	movs	r1, #80	@ 0x50
 80064ce:	0018      	movs	r0, r3
 80064d0:	f7ff feae 	bl	8006230 <lsm6ds_setGROutputDataRate>
 80064d4:	0003      	movs	r3, r0
 80064d6:	7023      	strb	r3, [r4, #0]

	sensorStat = lsm6ds_setXLFullScale(&mems, LSM6DS_FS_XL_16G);
 80064d8:	19ab      	adds	r3, r5, r6
 80064da:	19dc      	adds	r4, r3, r7
 80064dc:	4b85      	ldr	r3, [pc, #532]	@ (80066f4 <main+0x2bc>)
 80064de:	2104      	movs	r1, #4
 80064e0:	0018      	movs	r0, r3
 80064e2:	f7ff fe91 	bl	8006208 <lsm6ds_setXLFullScale>
 80064e6:	0003      	movs	r3, r0
 80064e8:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setGRFullScale(&mems, LSM6DS_FS_G_2000DPS);
 80064ea:	19ab      	adds	r3, r5, r6
 80064ec:	19dc      	adds	r4, r3, r7
 80064ee:	4b81      	ldr	r3, [pc, #516]	@ (80066f4 <main+0x2bc>)
 80064f0:	210c      	movs	r1, #12
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7ff feb0 	bl	8006258 <lsm6ds_setGRFullScale>
 80064f8:	0003      	movs	r3, r0
 80064fa:	7023      	strb	r3, [r4, #0]

	int32_t amx = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int32_t amy = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t amz = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	63bb      	str	r3, [r7, #56]	@ 0x38

	float amMultiplier = 0.005;
 8006508:	4b80      	ldr	r3, [pc, #512]	@ (800670c <main+0x2d4>)
 800650a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float amAcceleration = 1.8;
 800650c:	4b80      	ldr	r3, [pc, #512]	@ (8006710 <main+0x2d8>)
 800650e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		uint8_t newDataAvailable = 0;
 8006510:	2127      	movs	r1, #39	@ 0x27
 8006512:	187b      	adds	r3, r7, r1
 8006514:	2200      	movs	r2, #0
 8006516:	701a      	strb	r2, [r3, #0]
		sensorStat = lsm6ds_newDataAvailableCheck(&mems, &newDataAvailable);
 8006518:	2517      	movs	r5, #23
 800651a:	2320      	movs	r3, #32
 800651c:	18ea      	adds	r2, r5, r3
 800651e:	19d4      	adds	r4, r2, r7
 8006520:	000e      	movs	r6, r1
 8006522:	187a      	adds	r2, r7, r1
 8006524:	4b73      	ldr	r3, [pc, #460]	@ (80066f4 <main+0x2bc>)
 8006526:	0011      	movs	r1, r2
 8006528:	0018      	movs	r0, r3
 800652a:	f7ff feff 	bl	800632c <lsm6ds_newDataAvailableCheck>
 800652e:	0003      	movs	r3, r0
 8006530:	7023      	strb	r3, [r4, #0]

		if (newDataAvailable & LSM6DS_TDA) {
 8006532:	19bb      	adds	r3, r7, r6
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	001a      	movs	r2, r3
 8006538:	2304      	movs	r3, #4
 800653a:	4013      	ands	r3, r2
 800653c:	d008      	beq.n	8006550 <main+0x118>
			sensorStat = lsm6ds_updateTemp(&mems);
 800653e:	2320      	movs	r3, #32
 8006540:	18eb      	adds	r3, r5, r3
 8006542:	19dc      	adds	r4, r3, r7
 8006544:	4b6b      	ldr	r3, [pc, #428]	@ (80066f4 <main+0x2bc>)
 8006546:	0018      	movs	r0, r3
 8006548:	f7ff ff04 	bl	8006354 <lsm6ds_updateTemp>
 800654c:	0003      	movs	r3, r0
 800654e:	7023      	strb	r3, [r4, #0]
		}
		if (newDataAvailable & LSM6DS_GDA) {
 8006550:	2327      	movs	r3, #39	@ 0x27
 8006552:	18fb      	adds	r3, r7, r3
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	001a      	movs	r2, r3
 8006558:	2302      	movs	r3, #2
 800655a:	4013      	ands	r3, r2
 800655c:	d0d8      	beq.n	8006510 <main+0xd8>
			sensorStat = lsm6ds_updateGR(&mems);
 800655e:	2317      	movs	r3, #23
 8006560:	2220      	movs	r2, #32
 8006562:	189b      	adds	r3, r3, r2
 8006564:	19dc      	adds	r4, r3, r7
 8006566:	4b63      	ldr	r3, [pc, #396]	@ (80066f4 <main+0x2bc>)
 8006568:	0018      	movs	r0, r3
 800656a:	f7ff ff2b 	bl	80063c4 <lsm6ds_updateGR>
 800656e:	0003      	movs	r3, r0
 8006570:	7023      	strb	r3, [r4, #0]
			amx = mems.outGR.x *= amMultiplier;
 8006572:	4b60      	ldr	r3, [pc, #384]	@ (80066f4 <main+0x2bc>)
 8006574:	2214      	movs	r2, #20
 8006576:	5e9b      	ldrsh	r3, [r3, r2]
 8006578:	0018      	movs	r0, r3
 800657a:	f7fa f9c9 	bl	8000910 <__aeabi_i2f>
 800657e:	1c03      	adds	r3, r0, #0
 8006580:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006582:	1c18      	adds	r0, r3, #0
 8006584:	f7fa f866 	bl	8000654 <__aeabi_fmul>
 8006588:	1c03      	adds	r3, r0, #0
 800658a:	1c18      	adds	r0, r3, #0
 800658c:	f7fa f9a0 	bl	80008d0 <__aeabi_f2iz>
 8006590:	0003      	movs	r3, r0
 8006592:	b21a      	sxth	r2, r3
 8006594:	4b57      	ldr	r3, [pc, #348]	@ (80066f4 <main+0x2bc>)
 8006596:	829a      	strh	r2, [r3, #20]
 8006598:	4b56      	ldr	r3, [pc, #344]	@ (80066f4 <main+0x2bc>)
 800659a:	2214      	movs	r2, #20
 800659c:	5e9b      	ldrsh	r3, [r3, r2]
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			amz = mems.outGR.z *= amMultiplier;
 80065a0:	4b54      	ldr	r3, [pc, #336]	@ (80066f4 <main+0x2bc>)
 80065a2:	2218      	movs	r2, #24
 80065a4:	5e9b      	ldrsh	r3, [r3, r2]
 80065a6:	0018      	movs	r0, r3
 80065a8:	f7fa f9b2 	bl	8000910 <__aeabi_i2f>
 80065ac:	1c03      	adds	r3, r0, #0
 80065ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065b0:	1c18      	adds	r0, r3, #0
 80065b2:	f7fa f84f 	bl	8000654 <__aeabi_fmul>
 80065b6:	1c03      	adds	r3, r0, #0
 80065b8:	1c18      	adds	r0, r3, #0
 80065ba:	f7fa f989 	bl	80008d0 <__aeabi_f2iz>
 80065be:	0003      	movs	r3, r0
 80065c0:	b21a      	sxth	r2, r3
 80065c2:	4b4c      	ldr	r3, [pc, #304]	@ (80066f4 <main+0x2bc>)
 80065c4:	831a      	strh	r2, [r3, #24]
 80065c6:	4b4b      	ldr	r3, [pc, #300]	@ (80066f4 <main+0x2bc>)
 80065c8:	2218      	movs	r2, #24
 80065ca:	5e9b      	ldrsh	r3, [r3, r2]
 80065cc:	63bb      	str	r3, [r7, #56]	@ 0x38


			//power with preserving sign
			if(amx < 0){
 80065ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	da22      	bge.n	800661a <main+0x1e2>
				amx = -pow(-(double)amx, amAcceleration);
 80065d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80065d6:	f7fc f851 	bl	800267c <__aeabi_i2d>
 80065da:	0002      	movs	r2, r0
 80065dc:	000b      	movs	r3, r1
 80065de:	0011      	movs	r1, r2
 80065e0:	61b9      	str	r1, [r7, #24]
 80065e2:	2180      	movs	r1, #128	@ 0x80
 80065e4:	0609      	lsls	r1, r1, #24
 80065e6:	4059      	eors	r1, r3
 80065e8:	61f9      	str	r1, [r7, #28]
 80065ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ec:	f7fc f874 	bl	80026d8 <__aeabi_f2d>
 80065f0:	0002      	movs	r2, r0
 80065f2:	000b      	movs	r3, r1
 80065f4:	69b8      	ldr	r0, [r7, #24]
 80065f6:	69f9      	ldr	r1, [r7, #28]
 80065f8:	f000 fb32 	bl	8006c60 <pow>
 80065fc:	0002      	movs	r2, r0
 80065fe:	000b      	movs	r3, r1
 8006600:	0011      	movs	r1, r2
 8006602:	6139      	str	r1, [r7, #16]
 8006604:	2180      	movs	r1, #128	@ 0x80
 8006606:	0609      	lsls	r1, r1, #24
 8006608:	4059      	eors	r1, r3
 800660a:	6179      	str	r1, [r7, #20]
 800660c:	6938      	ldr	r0, [r7, #16]
 800660e:	6979      	ldr	r1, [r7, #20]
 8006610:	f7fb fff8 	bl	8002604 <__aeabi_d2iz>
 8006614:	0003      	movs	r3, r0
 8006616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006618:	e015      	b.n	8006646 <main+0x20e>
			}else{
				amx = pow((double)amx, amAcceleration);
 800661a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800661c:	f7fc f82e 	bl	800267c <__aeabi_i2d>
 8006620:	0004      	movs	r4, r0
 8006622:	000d      	movs	r5, r1
 8006624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006626:	f7fc f857 	bl	80026d8 <__aeabi_f2d>
 800662a:	0002      	movs	r2, r0
 800662c:	000b      	movs	r3, r1
 800662e:	0020      	movs	r0, r4
 8006630:	0029      	movs	r1, r5
 8006632:	f000 fb15 	bl	8006c60 <pow>
 8006636:	0002      	movs	r2, r0
 8006638:	000b      	movs	r3, r1
 800663a:	0010      	movs	r0, r2
 800663c:	0019      	movs	r1, r3
 800663e:	f7fb ffe1 	bl	8002604 <__aeabi_d2iz>
 8006642:	0003      	movs	r3, r0
 8006644:	63fb      	str	r3, [r7, #60]	@ 0x3c
			}

			if(amz < 0){
 8006646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	da22      	bge.n	8006692 <main+0x25a>
				amz = -pow(-(double)amz, amAcceleration);
 800664c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800664e:	f7fc f815 	bl	800267c <__aeabi_i2d>
 8006652:	0002      	movs	r2, r0
 8006654:	000b      	movs	r3, r1
 8006656:	0011      	movs	r1, r2
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	2180      	movs	r1, #128	@ 0x80
 800665c:	0609      	lsls	r1, r1, #24
 800665e:	4059      	eors	r1, r3
 8006660:	60f9      	str	r1, [r7, #12]
 8006662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006664:	f7fc f838 	bl	80026d8 <__aeabi_f2d>
 8006668:	0002      	movs	r2, r0
 800666a:	000b      	movs	r3, r1
 800666c:	68b8      	ldr	r0, [r7, #8]
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	f000 faf6 	bl	8006c60 <pow>
 8006674:	0002      	movs	r2, r0
 8006676:	000b      	movs	r3, r1
 8006678:	0011      	movs	r1, r2
 800667a:	6039      	str	r1, [r7, #0]
 800667c:	2180      	movs	r1, #128	@ 0x80
 800667e:	0609      	lsls	r1, r1, #24
 8006680:	4059      	eors	r1, r3
 8006682:	6079      	str	r1, [r7, #4]
 8006684:	6838      	ldr	r0, [r7, #0]
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	f7fb ffbc 	bl	8002604 <__aeabi_d2iz>
 800668c:	0003      	movs	r3, r0
 800668e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006690:	e015      	b.n	80066be <main+0x286>
			}else{
				amz = pow((double)amz, amAcceleration);
 8006692:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006694:	f7fb fff2 	bl	800267c <__aeabi_i2d>
 8006698:	0004      	movs	r4, r0
 800669a:	000d      	movs	r5, r1
 800669c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800669e:	f7fc f81b 	bl	80026d8 <__aeabi_f2d>
 80066a2:	0002      	movs	r2, r0
 80066a4:	000b      	movs	r3, r1
 80066a6:	0020      	movs	r0, r4
 80066a8:	0029      	movs	r1, r5
 80066aa:	f000 fad9 	bl	8006c60 <pow>
 80066ae:	0002      	movs	r2, r0
 80066b0:	000b      	movs	r3, r1
 80066b2:	0010      	movs	r0, r2
 80066b4:	0019      	movs	r1, r3
 80066b6:	f7fb ffa5 	bl	8002604 <__aeabi_d2iz>
 80066ba:	0003      	movs	r3, r0
 80066bc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}


			if (HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin)
 80066be:	2380      	movs	r3, #128	@ 0x80
 80066c0:	019b      	lsls	r3, r3, #6
 80066c2:	4a14      	ldr	r2, [pc, #80]	@ (8006714 <main+0x2dc>)
 80066c4:	0019      	movs	r1, r3
 80066c6:	0010      	movs	r0, r2
 80066c8:	f7fc fb3a 	bl	8002d40 <HAL_GPIO_ReadPin>
 80066cc:	1e03      	subs	r3, r0, #0
 80066ce:	d000      	beq.n	80066d2 <main+0x29a>
 80066d0:	e71e      	b.n	8006510 <main+0xd8>
					== GPIO_PIN_RESET) {
				espAt_sendParams(&bleRadio, P_BHM, 4, 0, amz*-1, amx*-1, 0);
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	425a      	negs	r2, r3
 80066d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d8:	425b      	negs	r3, r3
 80066da:	490f      	ldr	r1, [pc, #60]	@ (8006718 <main+0x2e0>)
 80066dc:	4807      	ldr	r0, [pc, #28]	@ (80066fc <main+0x2c4>)
 80066de:	2400      	movs	r4, #0
 80066e0:	9402      	str	r4, [sp, #8]
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	9200      	str	r2, [sp, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	2204      	movs	r2, #4
 80066ea:	f7ff f807 	bl	80056fc <espAt_sendParams>
	while (1) {
 80066ee:	e70f      	b.n	8006510 <main+0xd8>
 80066f0:	20000090 	.word	0x20000090
 80066f4:	200000f0 	.word	0x200000f0
 80066f8:	2000010c 	.word	0x2000010c
 80066fc:	200000e4 	.word	0x200000e4
 8006700:	08007ad8 	.word	0x08007ad8
 8006704:	08007ae4 	.word	0x08007ae4
 8006708:	08007af0 	.word	0x08007af0
 800670c:	3ba3d70a 	.word	0x3ba3d70a
 8006710:	3fe66666 	.word	0x3fe66666
 8006714:	50000800 	.word	0x50000800
 8006718:	08007afc 	.word	0x08007afc

0800671c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800671c:	b590      	push	{r4, r7, lr}
 800671e:	b093      	sub	sp, #76	@ 0x4c
 8006720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006722:	2410      	movs	r4, #16
 8006724:	193b      	adds	r3, r7, r4
 8006726:	0018      	movs	r0, r3
 8006728:	2338      	movs	r3, #56	@ 0x38
 800672a:	001a      	movs	r2, r3
 800672c:	2100      	movs	r1, #0
 800672e:	f000 fa5b 	bl	8006be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006732:	003b      	movs	r3, r7
 8006734:	0018      	movs	r0, r3
 8006736:	2310      	movs	r3, #16
 8006738:	001a      	movs	r2, r3
 800673a:	2100      	movs	r1, #0
 800673c:	f000 fa54 	bl	8006be8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006740:	2380      	movs	r3, #128	@ 0x80
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	0018      	movs	r0, r3
 8006746:	f7fd f9d1 	bl	8003aec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800674a:	193b      	adds	r3, r7, r4
 800674c:	2202      	movs	r2, #2
 800674e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006750:	193b      	adds	r3, r7, r4
 8006752:	2280      	movs	r2, #128	@ 0x80
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006758:	0021      	movs	r1, r4
 800675a:	187b      	adds	r3, r7, r1
 800675c:	2200      	movs	r2, #0
 800675e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006760:	187b      	adds	r3, r7, r1
 8006762:	2240      	movs	r2, #64	@ 0x40
 8006764:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006766:	187b      	adds	r3, r7, r1
 8006768:	2202      	movs	r2, #2
 800676a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800676c:	187b      	adds	r3, r7, r1
 800676e:	2202      	movs	r2, #2
 8006770:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006772:	187b      	adds	r3, r7, r1
 8006774:	2200      	movs	r2, #0
 8006776:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8006778:	187b      	adds	r3, r7, r1
 800677a:	2208      	movs	r2, #8
 800677c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800677e:	187b      	adds	r3, r7, r1
 8006780:	2280      	movs	r2, #128	@ 0x80
 8006782:	0292      	lsls	r2, r2, #10
 8006784:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006786:	187b      	adds	r3, r7, r1
 8006788:	2280      	movs	r2, #128	@ 0x80
 800678a:	0492      	lsls	r2, r2, #18
 800678c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800678e:	187b      	adds	r3, r7, r1
 8006790:	2280      	movs	r2, #128	@ 0x80
 8006792:	0592      	lsls	r2, r2, #22
 8006794:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006796:	187b      	adds	r3, r7, r1
 8006798:	0018      	movs	r0, r3
 800679a:	f7fd f9f3 	bl	8003b84 <HAL_RCC_OscConfig>
 800679e:	1e03      	subs	r3, r0, #0
 80067a0:	d001      	beq.n	80067a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80067a2:	f000 f819 	bl	80067d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067a6:	003b      	movs	r3, r7
 80067a8:	2207      	movs	r2, #7
 80067aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80067ac:	003b      	movs	r3, r7
 80067ae:	2202      	movs	r2, #2
 80067b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067b2:	003b      	movs	r3, r7
 80067b4:	2200      	movs	r2, #0
 80067b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80067b8:	003b      	movs	r3, r7
 80067ba:	2200      	movs	r2, #0
 80067bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80067be:	003b      	movs	r3, r7
 80067c0:	2102      	movs	r1, #2
 80067c2:	0018      	movs	r0, r3
 80067c4:	f7fd fcf8 	bl	80041b8 <HAL_RCC_ClockConfig>
 80067c8:	1e03      	subs	r3, r0, #0
 80067ca:	d001      	beq.n	80067d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80067cc:	f000 f804 	bl	80067d8 <Error_Handler>
  }
}
 80067d0:	46c0      	nop			@ (mov r8, r8)
 80067d2:	46bd      	mov	sp, r7
 80067d4:	b013      	add	sp, #76	@ 0x4c
 80067d6:	bd90      	pop	{r4, r7, pc}

080067d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80067dc:	b672      	cpsid	i
}
 80067de:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80067e0:	46c0      	nop			@ (mov r8, r8)
 80067e2:	e7fd      	b.n	80067e0 <Error_Handler+0x8>

080067e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006828 <HAL_MspInit+0x44>)
 80067ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006828 <HAL_MspInit+0x44>)
 80067f0:	2101      	movs	r1, #1
 80067f2:	430a      	orrs	r2, r1
 80067f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80067f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006828 <HAL_MspInit+0x44>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fa:	2201      	movs	r2, #1
 80067fc:	4013      	ands	r3, r2
 80067fe:	607b      	str	r3, [r7, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006802:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <HAL_MspInit+0x44>)
 8006804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006806:	4b08      	ldr	r3, [pc, #32]	@ (8006828 <HAL_MspInit+0x44>)
 8006808:	2180      	movs	r1, #128	@ 0x80
 800680a:	0549      	lsls	r1, r1, #21
 800680c:	430a      	orrs	r2, r1
 800680e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006810:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <HAL_MspInit+0x44>)
 8006812:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006814:	2380      	movs	r3, #128	@ 0x80
 8006816:	055b      	lsls	r3, r3, #21
 8006818:	4013      	ands	r3, r2
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800681e:	46c0      	nop			@ (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	b002      	add	sp, #8
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	40021000 	.word	0x40021000

0800682c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006830:	46c0      	nop			@ (mov r8, r8)
 8006832:	e7fd      	b.n	8006830 <NMI_Handler+0x4>

08006834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006838:	46c0      	nop			@ (mov r8, r8)
 800683a:	e7fd      	b.n	8006838 <HardFault_Handler+0x4>

0800683c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006840:	46c0      	nop			@ (mov r8, r8)
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006854:	f7fc f81c 	bl	8002890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006858:	46c0      	nop			@ (mov r8, r8)
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800686c:	4b23      	ldr	r3, [pc, #140]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 800686e:	4a24      	ldr	r2, [pc, #144]	@ (8006900 <MX_USART1_UART_Init+0x98>)
 8006870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006872:	4b22      	ldr	r3, [pc, #136]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 8006874:	22e1      	movs	r2, #225	@ 0xe1
 8006876:	0252      	lsls	r2, r2, #9
 8006878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800687a:	4b20      	ldr	r3, [pc, #128]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 800687c:	2200      	movs	r2, #0
 800687e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006880:	4b1e      	ldr	r3, [pc, #120]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 8006882:	2200      	movs	r2, #0
 8006884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006886:	4b1d      	ldr	r3, [pc, #116]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 8006888:	2200      	movs	r2, #0
 800688a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800688c:	4b1b      	ldr	r3, [pc, #108]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 800688e:	220c      	movs	r2, #12
 8006890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006892:	4b1a      	ldr	r3, [pc, #104]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 8006894:	2200      	movs	r2, #0
 8006896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006898:	4b18      	ldr	r3, [pc, #96]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 800689a:	2200      	movs	r2, #0
 800689c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800689e:	4b17      	ldr	r3, [pc, #92]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068a4:	4b15      	ldr	r3, [pc, #84]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068aa:	4b14      	ldr	r3, [pc, #80]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80068b0:	4b12      	ldr	r3, [pc, #72]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 80068b2:	0018      	movs	r0, r3
 80068b4:	f7fd ffe2 	bl	800487c <HAL_UART_Init>
 80068b8:	1e03      	subs	r3, r0, #0
 80068ba:	d001      	beq.n	80068c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80068bc:	f7ff ff8c 	bl	80067d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068c0:	4b0e      	ldr	r3, [pc, #56]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 80068c2:	2100      	movs	r1, #0
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7fe fdff 	bl	80054c8 <HAL_UARTEx_SetTxFifoThreshold>
 80068ca:	1e03      	subs	r3, r0, #0
 80068cc:	d001      	beq.n	80068d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80068ce:	f7ff ff83 	bl	80067d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068d2:	4b0a      	ldr	r3, [pc, #40]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 80068d4:	2100      	movs	r1, #0
 80068d6:	0018      	movs	r0, r3
 80068d8:	f7fe fe36 	bl	8005548 <HAL_UARTEx_SetRxFifoThreshold>
 80068dc:	1e03      	subs	r3, r0, #0
 80068de:	d001      	beq.n	80068e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80068e0:	f7ff ff7a 	bl	80067d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80068e4:	4b05      	ldr	r3, [pc, #20]	@ (80068fc <MX_USART1_UART_Init+0x94>)
 80068e6:	0018      	movs	r0, r3
 80068e8:	f7fe fdb4 	bl	8005454 <HAL_UARTEx_DisableFifoMode>
 80068ec:	1e03      	subs	r3, r0, #0
 80068ee:	d001      	beq.n	80068f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80068f0:	f7ff ff72 	bl	80067d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80068f4:	46c0      	nop			@ (mov r8, r8)
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	2000010c 	.word	0x2000010c
 8006900:	40013800 	.word	0x40013800

08006904 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006908:	4b23      	ldr	r3, [pc, #140]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 800690a:	4a24      	ldr	r2, [pc, #144]	@ (800699c <MX_USART2_UART_Init+0x98>)
 800690c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800690e:	4b22      	ldr	r3, [pc, #136]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 8006910:	22e1      	movs	r2, #225	@ 0xe1
 8006912:	0252      	lsls	r2, r2, #9
 8006914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006916:	4b20      	ldr	r3, [pc, #128]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 8006918:	2200      	movs	r2, #0
 800691a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800691c:	4b1e      	ldr	r3, [pc, #120]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 800691e:	2200      	movs	r2, #0
 8006920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006922:	4b1d      	ldr	r3, [pc, #116]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 8006924:	2200      	movs	r2, #0
 8006926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006928:	4b1b      	ldr	r3, [pc, #108]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 800692a:	220c      	movs	r2, #12
 800692c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800692e:	4b1a      	ldr	r3, [pc, #104]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 8006930:	2200      	movs	r2, #0
 8006932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006934:	4b18      	ldr	r3, [pc, #96]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 8006936:	2200      	movs	r2, #0
 8006938:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800693a:	4b17      	ldr	r3, [pc, #92]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 800693c:	2200      	movs	r2, #0
 800693e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006940:	4b15      	ldr	r3, [pc, #84]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 8006942:	2200      	movs	r2, #0
 8006944:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006946:	4b14      	ldr	r3, [pc, #80]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 8006948:	2200      	movs	r2, #0
 800694a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800694c:	4b12      	ldr	r3, [pc, #72]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 800694e:	0018      	movs	r0, r3
 8006950:	f7fd ff94 	bl	800487c <HAL_UART_Init>
 8006954:	1e03      	subs	r3, r0, #0
 8006956:	d001      	beq.n	800695c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006958:	f7ff ff3e 	bl	80067d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800695c:	4b0e      	ldr	r3, [pc, #56]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 800695e:	2100      	movs	r1, #0
 8006960:	0018      	movs	r0, r3
 8006962:	f7fe fdb1 	bl	80054c8 <HAL_UARTEx_SetTxFifoThreshold>
 8006966:	1e03      	subs	r3, r0, #0
 8006968:	d001      	beq.n	800696e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800696a:	f7ff ff35 	bl	80067d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800696e:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 8006970:	2100      	movs	r1, #0
 8006972:	0018      	movs	r0, r3
 8006974:	f7fe fde8 	bl	8005548 <HAL_UARTEx_SetRxFifoThreshold>
 8006978:	1e03      	subs	r3, r0, #0
 800697a:	d001      	beq.n	8006980 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800697c:	f7ff ff2c 	bl	80067d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006980:	4b05      	ldr	r3, [pc, #20]	@ (8006998 <MX_USART2_UART_Init+0x94>)
 8006982:	0018      	movs	r0, r3
 8006984:	f7fe fd66 	bl	8005454 <HAL_UARTEx_DisableFifoMode>
 8006988:	1e03      	subs	r3, r0, #0
 800698a:	d001      	beq.n	8006990 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800698c:	f7ff ff24 	bl	80067d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006990:	46c0      	nop			@ (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	200001a0 	.word	0x200001a0
 800699c:	40004400 	.word	0x40004400

080069a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b099      	sub	sp, #100	@ 0x64
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069a8:	234c      	movs	r3, #76	@ 0x4c
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	0018      	movs	r0, r3
 80069ae:	2314      	movs	r3, #20
 80069b0:	001a      	movs	r2, r3
 80069b2:	2100      	movs	r1, #0
 80069b4:	f000 f918 	bl	8006be8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80069b8:	2418      	movs	r4, #24
 80069ba:	193b      	adds	r3, r7, r4
 80069bc:	0018      	movs	r0, r3
 80069be:	2334      	movs	r3, #52	@ 0x34
 80069c0:	001a      	movs	r2, r3
 80069c2:	2100      	movs	r1, #0
 80069c4:	f000 f910 	bl	8006be8 <memset>
  if(uartHandle->Instance==USART1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a45      	ldr	r2, [pc, #276]	@ (8006ae4 <HAL_UART_MspInit+0x144>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d13e      	bne.n	8006a50 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80069d2:	193b      	adds	r3, r7, r4
 80069d4:	2201      	movs	r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80069d8:	193b      	adds	r3, r7, r4
 80069da:	2200      	movs	r2, #0
 80069dc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80069de:	193b      	adds	r3, r7, r4
 80069e0:	0018      	movs	r0, r3
 80069e2:	f7fd fd93 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 80069e6:	1e03      	subs	r3, r0, #0
 80069e8:	d001      	beq.n	80069ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80069ea:	f7ff fef5 	bl	80067d8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80069ee:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 80069f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069f2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 80069f4:	2180      	movs	r1, #128	@ 0x80
 80069f6:	01c9      	lsls	r1, r1, #7
 80069f8:	430a      	orrs	r2, r1
 80069fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80069fc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 80069fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a00:	2380      	movs	r3, #128	@ 0x80
 8006a02:	01db      	lsls	r3, r3, #7
 8006a04:	4013      	ands	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a0a:	4b37      	ldr	r3, [pc, #220]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 8006a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a0e:	4b36      	ldr	r3, [pc, #216]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 8006a10:	2104      	movs	r1, #4
 8006a12:	430a      	orrs	r2, r1
 8006a14:	635a      	str	r2, [r3, #52]	@ 0x34
 8006a16:	4b34      	ldr	r3, [pc, #208]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 8006a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8006a22:	214c      	movs	r1, #76	@ 0x4c
 8006a24:	187b      	adds	r3, r7, r1
 8006a26:	2230      	movs	r2, #48	@ 0x30
 8006a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a2a:	187b      	adds	r3, r7, r1
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	2200      	movs	r2, #0
 8006a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a36:	187b      	adds	r3, r7, r1
 8006a38:	2200      	movs	r2, #0
 8006a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006a3c:	187b      	adds	r3, r7, r1
 8006a3e:	2201      	movs	r2, #1
 8006a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	4a29      	ldr	r2, [pc, #164]	@ (8006aec <HAL_UART_MspInit+0x14c>)
 8006a46:	0019      	movs	r1, r3
 8006a48:	0010      	movs	r0, r2
 8006a4a:	f7fc f815 	bl	8002a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006a4e:	e044      	b.n	8006ada <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a26      	ldr	r2, [pc, #152]	@ (8006af0 <HAL_UART_MspInit+0x150>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d13f      	bne.n	8006ada <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006a5a:	2118      	movs	r1, #24
 8006a5c:	187b      	adds	r3, r7, r1
 8006a5e:	2202      	movs	r2, #2
 8006a60:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006a62:	187b      	adds	r3, r7, r1
 8006a64:	2200      	movs	r2, #0
 8006a66:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f7fd fd4e 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 8006a70:	1e03      	subs	r3, r0, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8006a74:	f7ff feb0 	bl	80067d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a78:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 8006a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 8006a7e:	2180      	movs	r1, #128	@ 0x80
 8006a80:	0289      	lsls	r1, r1, #10
 8006a82:	430a      	orrs	r2, r1
 8006a84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006a86:	4b18      	ldr	r3, [pc, #96]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 8006a88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a8a:	2380      	movs	r3, #128	@ 0x80
 8006a8c:	029b      	lsls	r3, r3, #10
 8006a8e:	4013      	ands	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a94:	4b14      	ldr	r3, [pc, #80]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 8006a96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a98:	4b13      	ldr	r3, [pc, #76]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006aa0:	4b11      	ldr	r3, [pc, #68]	@ (8006ae8 <HAL_UART_MspInit+0x148>)
 8006aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006aac:	214c      	movs	r1, #76	@ 0x4c
 8006aae:	187b      	adds	r3, r7, r1
 8006ab0:	220c      	movs	r2, #12
 8006ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ab4:	187b      	adds	r3, r7, r1
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aba:	187b      	adds	r3, r7, r1
 8006abc:	2200      	movs	r2, #0
 8006abe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ac0:	187b      	adds	r3, r7, r1
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8006ac6:	187b      	adds	r3, r7, r1
 8006ac8:	2201      	movs	r2, #1
 8006aca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006acc:	187a      	adds	r2, r7, r1
 8006ace:	23a0      	movs	r3, #160	@ 0xa0
 8006ad0:	05db      	lsls	r3, r3, #23
 8006ad2:	0011      	movs	r1, r2
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f7fb ffcf 	bl	8002a78 <HAL_GPIO_Init>
}
 8006ada:	46c0      	nop			@ (mov r8, r8)
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b019      	add	sp, #100	@ 0x64
 8006ae0:	bd90      	pop	{r4, r7, pc}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
 8006ae4:	40013800 	.word	0x40013800
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	50000800 	.word	0x50000800
 8006af0:	40004400 	.word	0x40004400

08006af4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006af4:	480d      	ldr	r0, [pc, #52]	@ (8006b2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006af6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006af8:	f7ff feb1 	bl	800685e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006afc:	480c      	ldr	r0, [pc, #48]	@ (8006b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8006afe:	490d      	ldr	r1, [pc, #52]	@ (8006b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006b00:	4a0d      	ldr	r2, [pc, #52]	@ (8006b38 <LoopForever+0xe>)
  movs r3, #0
 8006b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b04:	e002      	b.n	8006b0c <LoopCopyDataInit>

08006b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b0a:	3304      	adds	r3, #4

08006b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b10:	d3f9      	bcc.n	8006b06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b12:	4a0a      	ldr	r2, [pc, #40]	@ (8006b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006b14:	4c0a      	ldr	r4, [pc, #40]	@ (8006b40 <LoopForever+0x16>)
  movs r3, #0
 8006b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b18:	e001      	b.n	8006b1e <LoopFillZerobss>

08006b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b1c:	3204      	adds	r2, #4

08006b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b20:	d3fb      	bcc.n	8006b1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006b22:	f000 f86f 	bl	8006c04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006b26:	f7ff fc87 	bl	8006438 <main>

08006b2a <LoopForever>:

LoopForever:
  b LoopForever
 8006b2a:	e7fe      	b.n	8006b2a <LoopForever>
  ldr   r0, =_estack
 8006b2c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8006b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8006b38:	08007c38 	.word	0x08007c38
  ldr r2, =_sbss
 8006b3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8006b40:	2000036c 	.word	0x2000036c

08006b44 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b44:	e7fe      	b.n	8006b44 <ADC1_COMP_IRQHandler>

08006b46 <__itoa>:
 8006b46:	1e93      	subs	r3, r2, #2
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	000c      	movs	r4, r1
 8006b4c:	2b22      	cmp	r3, #34	@ 0x22
 8006b4e:	d904      	bls.n	8006b5a <__itoa+0x14>
 8006b50:	2300      	movs	r3, #0
 8006b52:	001c      	movs	r4, r3
 8006b54:	700b      	strb	r3, [r1, #0]
 8006b56:	0020      	movs	r0, r4
 8006b58:	bd10      	pop	{r4, pc}
 8006b5a:	2a0a      	cmp	r2, #10
 8006b5c:	d109      	bne.n	8006b72 <__itoa+0x2c>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	da07      	bge.n	8006b72 <__itoa+0x2c>
 8006b62:	232d      	movs	r3, #45	@ 0x2d
 8006b64:	700b      	strb	r3, [r1, #0]
 8006b66:	2101      	movs	r1, #1
 8006b68:	4240      	negs	r0, r0
 8006b6a:	1861      	adds	r1, r4, r1
 8006b6c:	f000 f808 	bl	8006b80 <__utoa>
 8006b70:	e7f1      	b.n	8006b56 <__itoa+0x10>
 8006b72:	2100      	movs	r1, #0
 8006b74:	e7f9      	b.n	8006b6a <__itoa+0x24>

08006b76 <itoa>:
 8006b76:	b510      	push	{r4, lr}
 8006b78:	f7ff ffe5 	bl	8006b46 <__itoa>
 8006b7c:	bd10      	pop	{r4, pc}
	...

08006b80 <__utoa>:
 8006b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b82:	000c      	movs	r4, r1
 8006b84:	0016      	movs	r6, r2
 8006b86:	b08d      	sub	sp, #52	@ 0x34
 8006b88:	2225      	movs	r2, #37	@ 0x25
 8006b8a:	0007      	movs	r7, r0
 8006b8c:	4915      	ldr	r1, [pc, #84]	@ (8006be4 <__utoa+0x64>)
 8006b8e:	a802      	add	r0, sp, #8
 8006b90:	f000 f85c 	bl	8006c4c <memcpy>
 8006b94:	1e62      	subs	r2, r4, #1
 8006b96:	1eb3      	subs	r3, r6, #2
 8006b98:	2500      	movs	r5, #0
 8006b9a:	9201      	str	r2, [sp, #4]
 8006b9c:	2b22      	cmp	r3, #34	@ 0x22
 8006b9e:	d904      	bls.n	8006baa <__utoa+0x2a>
 8006ba0:	7025      	strb	r5, [r4, #0]
 8006ba2:	002c      	movs	r4, r5
 8006ba4:	0020      	movs	r0, r4
 8006ba6:	b00d      	add	sp, #52	@ 0x34
 8006ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006baa:	0038      	movs	r0, r7
 8006bac:	0031      	movs	r1, r6
 8006bae:	f7f9 fb37 	bl	8000220 <__aeabi_uidivmod>
 8006bb2:	000b      	movs	r3, r1
 8006bb4:	aa02      	add	r2, sp, #8
 8006bb6:	5cd3      	ldrb	r3, [r2, r3]
 8006bb8:	9a01      	ldr	r2, [sp, #4]
 8006bba:	0029      	movs	r1, r5
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	5553      	strb	r3, [r2, r5]
 8006bc0:	003b      	movs	r3, r7
 8006bc2:	0007      	movs	r7, r0
 8006bc4:	429e      	cmp	r6, r3
 8006bc6:	d9f0      	bls.n	8006baa <__utoa+0x2a>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	0022      	movs	r2, r4
 8006bcc:	5563      	strb	r3, [r4, r5]
 8006bce:	000b      	movs	r3, r1
 8006bd0:	1ac8      	subs	r0, r1, r3
 8006bd2:	4283      	cmp	r3, r0
 8006bd4:	dde6      	ble.n	8006ba4 <__utoa+0x24>
 8006bd6:	7810      	ldrb	r0, [r2, #0]
 8006bd8:	5ce5      	ldrb	r5, [r4, r3]
 8006bda:	7015      	strb	r5, [r2, #0]
 8006bdc:	54e0      	strb	r0, [r4, r3]
 8006bde:	3201      	adds	r2, #1
 8006be0:	3b01      	subs	r3, #1
 8006be2:	e7f5      	b.n	8006bd0 <__utoa+0x50>
 8006be4:	08007bd0 	.word	0x08007bd0

08006be8 <memset>:
 8006be8:	0003      	movs	r3, r0
 8006bea:	1882      	adds	r2, r0, r2
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d100      	bne.n	8006bf2 <memset+0xa>
 8006bf0:	4770      	bx	lr
 8006bf2:	7019      	strb	r1, [r3, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	e7f9      	b.n	8006bec <memset+0x4>

08006bf8 <__errno>:
 8006bf8:	4b01      	ldr	r3, [pc, #4]	@ (8006c00 <__errno+0x8>)
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	4770      	bx	lr
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	2000000c 	.word	0x2000000c

08006c04 <__libc_init_array>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	2600      	movs	r6, #0
 8006c08:	4c0c      	ldr	r4, [pc, #48]	@ (8006c3c <__libc_init_array+0x38>)
 8006c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c40 <__libc_init_array+0x3c>)
 8006c0c:	1b64      	subs	r4, r4, r5
 8006c0e:	10a4      	asrs	r4, r4, #2
 8006c10:	42a6      	cmp	r6, r4
 8006c12:	d109      	bne.n	8006c28 <__libc_init_array+0x24>
 8006c14:	2600      	movs	r6, #0
 8006c16:	f000 ff4b 	bl	8007ab0 <_init>
 8006c1a:	4c0a      	ldr	r4, [pc, #40]	@ (8006c44 <__libc_init_array+0x40>)
 8006c1c:	4d0a      	ldr	r5, [pc, #40]	@ (8006c48 <__libc_init_array+0x44>)
 8006c1e:	1b64      	subs	r4, r4, r5
 8006c20:	10a4      	asrs	r4, r4, #2
 8006c22:	42a6      	cmp	r6, r4
 8006c24:	d105      	bne.n	8006c32 <__libc_init_array+0x2e>
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	00b3      	lsls	r3, r6, #2
 8006c2a:	58eb      	ldr	r3, [r5, r3]
 8006c2c:	4798      	blx	r3
 8006c2e:	3601      	adds	r6, #1
 8006c30:	e7ee      	b.n	8006c10 <__libc_init_array+0xc>
 8006c32:	00b3      	lsls	r3, r6, #2
 8006c34:	58eb      	ldr	r3, [r5, r3]
 8006c36:	4798      	blx	r3
 8006c38:	3601      	adds	r6, #1
 8006c3a:	e7f2      	b.n	8006c22 <__libc_init_array+0x1e>
 8006c3c:	08007c30 	.word	0x08007c30
 8006c40:	08007c30 	.word	0x08007c30
 8006c44:	08007c34 	.word	0x08007c34
 8006c48:	08007c30 	.word	0x08007c30

08006c4c <memcpy>:
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d100      	bne.n	8006c56 <memcpy+0xa>
 8006c54:	bd10      	pop	{r4, pc}
 8006c56:	5ccc      	ldrb	r4, [r1, r3]
 8006c58:	54c4      	strb	r4, [r0, r3]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	e7f8      	b.n	8006c50 <memcpy+0x4>
	...

08006c60 <pow>:
 8006c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c62:	0014      	movs	r4, r2
 8006c64:	001d      	movs	r5, r3
 8006c66:	9000      	str	r0, [sp, #0]
 8006c68:	9101      	str	r1, [sp, #4]
 8006c6a:	f000 f86f 	bl	8006d4c <__ieee754_pow>
 8006c6e:	0022      	movs	r2, r4
 8006c70:	0006      	movs	r6, r0
 8006c72:	000f      	movs	r7, r1
 8006c74:	002b      	movs	r3, r5
 8006c76:	0020      	movs	r0, r4
 8006c78:	0029      	movs	r1, r5
 8006c7a:	f7fb fca1 	bl	80025c0 <__aeabi_dcmpun>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d13f      	bne.n	8006d02 <pow+0xa2>
 8006c82:	9800      	ldr	r0, [sp, #0]
 8006c84:	9901      	ldr	r1, [sp, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f7f9 fbc9 	bl	8000420 <__aeabi_dcmpeq>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d019      	beq.n	8006cc6 <pow+0x66>
 8006c92:	2200      	movs	r2, #0
 8006c94:	2300      	movs	r3, #0
 8006c96:	0020      	movs	r0, r4
 8006c98:	0029      	movs	r1, r5
 8006c9a:	f7f9 fbc1 	bl	8000420 <__aeabi_dcmpeq>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d146      	bne.n	8006d30 <pow+0xd0>
 8006ca2:	0020      	movs	r0, r4
 8006ca4:	0029      	movs	r1, r5
 8006ca6:	f000 f849 	bl	8006d3c <finite>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d029      	beq.n	8006d02 <pow+0xa2>
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	0020      	movs	r0, r4
 8006cb4:	0029      	movs	r1, r5
 8006cb6:	f7f9 fbb9 	bl	800042c <__aeabi_dcmplt>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d021      	beq.n	8006d02 <pow+0xa2>
 8006cbe:	f7ff ff9b 	bl	8006bf8 <__errno>
 8006cc2:	2322      	movs	r3, #34	@ 0x22
 8006cc4:	e01c      	b.n	8006d00 <pow+0xa0>
 8006cc6:	0030      	movs	r0, r6
 8006cc8:	0039      	movs	r1, r7
 8006cca:	f000 f837 	bl	8006d3c <finite>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d11b      	bne.n	8006d0a <pow+0xaa>
 8006cd2:	9800      	ldr	r0, [sp, #0]
 8006cd4:	9901      	ldr	r1, [sp, #4]
 8006cd6:	f000 f831 	bl	8006d3c <finite>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d015      	beq.n	8006d0a <pow+0xaa>
 8006cde:	0020      	movs	r0, r4
 8006ce0:	0029      	movs	r1, r5
 8006ce2:	f000 f82b 	bl	8006d3c <finite>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d00f      	beq.n	8006d0a <pow+0xaa>
 8006cea:	0032      	movs	r2, r6
 8006cec:	003b      	movs	r3, r7
 8006cee:	0030      	movs	r0, r6
 8006cf0:	0039      	movs	r1, r7
 8006cf2:	f7fb fc65 	bl	80025c0 <__aeabi_dcmpun>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d0e1      	beq.n	8006cbe <pow+0x5e>
 8006cfa:	f7ff ff7d 	bl	8006bf8 <__errno>
 8006cfe:	2321      	movs	r3, #33	@ 0x21
 8006d00:	6003      	str	r3, [r0, #0]
 8006d02:	0030      	movs	r0, r6
 8006d04:	0039      	movs	r1, r7
 8006d06:	b003      	add	sp, #12
 8006d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	0030      	movs	r0, r6
 8006d10:	0039      	movs	r1, r7
 8006d12:	f7f9 fb85 	bl	8000420 <__aeabi_dcmpeq>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d0f3      	beq.n	8006d02 <pow+0xa2>
 8006d1a:	9800      	ldr	r0, [sp, #0]
 8006d1c:	9901      	ldr	r1, [sp, #4]
 8006d1e:	f000 f80d 	bl	8006d3c <finite>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d0ed      	beq.n	8006d02 <pow+0xa2>
 8006d26:	0020      	movs	r0, r4
 8006d28:	0029      	movs	r1, r5
 8006d2a:	f000 f807 	bl	8006d3c <finite>
 8006d2e:	e7c4      	b.n	8006cba <pow+0x5a>
 8006d30:	2600      	movs	r6, #0
 8006d32:	4f01      	ldr	r7, [pc, #4]	@ (8006d38 <pow+0xd8>)
 8006d34:	e7e5      	b.n	8006d02 <pow+0xa2>
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	3ff00000 	.word	0x3ff00000

08006d3c <finite>:
 8006d3c:	4b02      	ldr	r3, [pc, #8]	@ (8006d48 <finite+0xc>)
 8006d3e:	0048      	lsls	r0, r1, #1
 8006d40:	0840      	lsrs	r0, r0, #1
 8006d42:	18c0      	adds	r0, r0, r3
 8006d44:	0fc0      	lsrs	r0, r0, #31
 8006d46:	4770      	bx	lr
 8006d48:	80100000 	.word	0x80100000

08006d4c <__ieee754_pow>:
 8006d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d4e:	b095      	sub	sp, #84	@ 0x54
 8006d50:	9202      	str	r2, [sp, #8]
 8006d52:	9303      	str	r3, [sp, #12]
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	9a03      	ldr	r2, [sp, #12]
 8006d58:	9306      	str	r3, [sp, #24]
 8006d5a:	0052      	lsls	r2, r2, #1
 8006d5c:	9b02      	ldr	r3, [sp, #8]
 8006d5e:	0852      	lsrs	r2, r2, #1
 8006d60:	9204      	str	r2, [sp, #16]
 8006d62:	001a      	movs	r2, r3
 8006d64:	000f      	movs	r7, r1
 8006d66:	9904      	ldr	r1, [sp, #16]
 8006d68:	0006      	movs	r6, r0
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	d119      	bne.n	8006da2 <__ieee754_pow+0x56>
 8006d6e:	2180      	movs	r1, #128	@ 0x80
 8006d70:	0309      	lsls	r1, r1, #12
 8006d72:	4079      	eors	r1, r7
 8006d74:	0002      	movs	r2, r0
 8006d76:	000b      	movs	r3, r1
 8006d78:	1892      	adds	r2, r2, r2
 8006d7a:	415b      	adcs	r3, r3
 8006d7c:	499b      	ldr	r1, [pc, #620]	@ (8006fec <__ieee754_pow+0x2a0>)
 8006d7e:	428b      	cmp	r3, r1
 8006d80:	d806      	bhi.n	8006d90 <__ieee754_pow+0x44>
 8006d82:	d001      	beq.n	8006d88 <__ieee754_pow+0x3c>
 8006d84:	f000 fcde 	bl	8007744 <__ieee754_pow+0x9f8>
 8006d88:	2a00      	cmp	r2, #0
 8006d8a:	d101      	bne.n	8006d90 <__ieee754_pow+0x44>
 8006d8c:	f000 fcda 	bl	8007744 <__ieee754_pow+0x9f8>
 8006d90:	9a02      	ldr	r2, [sp, #8]
 8006d92:	9b03      	ldr	r3, [sp, #12]
 8006d94:	0030      	movs	r0, r6
 8006d96:	0039      	movs	r1, r7
 8006d98:	f7f9 fe06 	bl	80009a8 <__aeabi_dadd>
 8006d9c:	9000      	str	r0, [sp, #0]
 8006d9e:	9101      	str	r1, [sp, #4]
 8006da0:	e0af      	b.n	8006f02 <__ieee754_pow+0x1b6>
 8006da2:	4a93      	ldr	r2, [pc, #588]	@ (8006ff0 <__ieee754_pow+0x2a4>)
 8006da4:	007c      	lsls	r4, r7, #1
 8006da6:	9708      	str	r7, [sp, #32]
 8006da8:	900e      	str	r0, [sp, #56]	@ 0x38
 8006daa:	0864      	lsrs	r4, r4, #1
 8006dac:	4294      	cmp	r4, r2
 8006dae:	d809      	bhi.n	8006dc4 <__ieee754_pow+0x78>
 8006db0:	d101      	bne.n	8006db6 <__ieee754_pow+0x6a>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d1ec      	bne.n	8006d90 <__ieee754_pow+0x44>
 8006db6:	9904      	ldr	r1, [sp, #16]
 8006db8:	4a8d      	ldr	r2, [pc, #564]	@ (8006ff0 <__ieee754_pow+0x2a4>)
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	d802      	bhi.n	8006dc4 <__ieee754_pow+0x78>
 8006dbe:	d10c      	bne.n	8006dda <__ieee754_pow+0x8e>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <__ieee754_pow+0x8e>
 8006dc4:	4b8b      	ldr	r3, [pc, #556]	@ (8006ff4 <__ieee754_pow+0x2a8>)
 8006dc6:	18fb      	adds	r3, r7, r3
 8006dc8:	4333      	orrs	r3, r6
 8006dca:	d1e1      	bne.n	8006d90 <__ieee754_pow+0x44>
 8006dcc:	2180      	movs	r1, #128	@ 0x80
 8006dce:	9803      	ldr	r0, [sp, #12]
 8006dd0:	0309      	lsls	r1, r1, #12
 8006dd2:	4048      	eors	r0, r1
 8006dd4:	0003      	movs	r3, r0
 8006dd6:	9a02      	ldr	r2, [sp, #8]
 8006dd8:	e7ce      	b.n	8006d78 <__ieee754_pow+0x2c>
 8006dda:	2500      	movs	r5, #0
 8006ddc:	9a08      	ldr	r2, [sp, #32]
 8006dde:	940a      	str	r4, [sp, #40]	@ 0x28
 8006de0:	42aa      	cmp	r2, r5
 8006de2:	da68      	bge.n	8006eb6 <__ieee754_pow+0x16a>
 8006de4:	4a84      	ldr	r2, [pc, #528]	@ (8006ff8 <__ieee754_pow+0x2ac>)
 8006de6:	9904      	ldr	r1, [sp, #16]
 8006de8:	4291      	cmp	r1, r2
 8006dea:	d863      	bhi.n	8006eb4 <__ieee754_pow+0x168>
 8006dec:	4a83      	ldr	r2, [pc, #524]	@ (8006ffc <__ieee754_pow+0x2b0>)
 8006dee:	4291      	cmp	r1, r2
 8006df0:	d910      	bls.n	8006e14 <__ieee754_pow+0xc8>
 8006df2:	150a      	asrs	r2, r1, #20
 8006df4:	4982      	ldr	r1, [pc, #520]	@ (8007000 <__ieee754_pow+0x2b4>)
 8006df6:	1852      	adds	r2, r2, r1
 8006df8:	2a14      	cmp	r2, #20
 8006dfa:	dd3b      	ble.n	8006e74 <__ieee754_pow+0x128>
 8006dfc:	2134      	movs	r1, #52	@ 0x34
 8006dfe:	1a89      	subs	r1, r1, r2
 8006e00:	9a02      	ldr	r2, [sp, #8]
 8006e02:	40ca      	lsrs	r2, r1
 8006e04:	0010      	movs	r0, r2
 8006e06:	4088      	lsls	r0, r1
 8006e08:	4298      	cmp	r0, r3
 8006e0a:	d103      	bne.n	8006e14 <__ieee754_pow+0xc8>
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	3502      	adds	r5, #2
 8006e10:	400a      	ands	r2, r1
 8006e12:	1aad      	subs	r5, r5, r2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d03d      	beq.n	8006e94 <__ieee754_pow+0x148>
 8006e18:	0030      	movs	r0, r6
 8006e1a:	0039      	movs	r1, r7
 8006e1c:	f000 fcc2 	bl	80077a4 <fabs>
 8006e20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e22:	9000      	str	r0, [sp, #0]
 8006e24:	9101      	str	r1, [sp, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d000      	beq.n	8006e2c <__ieee754_pow+0xe0>
 8006e2a:	e093      	b.n	8006f54 <__ieee754_pow+0x208>
 8006e2c:	4a75      	ldr	r2, [pc, #468]	@ (8007004 <__ieee754_pow+0x2b8>)
 8006e2e:	00bb      	lsls	r3, r7, #2
 8006e30:	089b      	lsrs	r3, r3, #2
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d002      	beq.n	8006e3c <__ieee754_pow+0xf0>
 8006e36:	2c00      	cmp	r4, #0
 8006e38:	d000      	beq.n	8006e3c <__ieee754_pow+0xf0>
 8006e3a:	e08b      	b.n	8006f54 <__ieee754_pow+0x208>
 8006e3c:	9b06      	ldr	r3, [sp, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	da07      	bge.n	8006e52 <__ieee754_pow+0x106>
 8006e42:	9a00      	ldr	r2, [sp, #0]
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	2000      	movs	r0, #0
 8006e48:	496e      	ldr	r1, [pc, #440]	@ (8007004 <__ieee754_pow+0x2b8>)
 8006e4a:	f7fa f911 	bl	8001070 <__aeabi_ddiv>
 8006e4e:	9000      	str	r0, [sp, #0]
 8006e50:	9101      	str	r1, [sp, #4]
 8006e52:	9b08      	ldr	r3, [sp, #32]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	da54      	bge.n	8006f02 <__ieee754_pow+0x1b6>
 8006e58:	4b66      	ldr	r3, [pc, #408]	@ (8006ff4 <__ieee754_pow+0x2a8>)
 8006e5a:	18e4      	adds	r4, r4, r3
 8006e5c:	432c      	orrs	r4, r5
 8006e5e:	d000      	beq.n	8006e62 <__ieee754_pow+0x116>
 8006e60:	e06d      	b.n	8006f3e <__ieee754_pow+0x1f2>
 8006e62:	9a00      	ldr	r2, [sp, #0]
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	0010      	movs	r0, r2
 8006e68:	0019      	movs	r1, r3
 8006e6a:	f7fb f80d 	bl	8001e88 <__aeabi_dsub>
 8006e6e:	0002      	movs	r2, r0
 8006e70:	000b      	movs	r3, r1
 8006e72:	e01c      	b.n	8006eae <__ieee754_pow+0x162>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1cf      	bne.n	8006e18 <__ieee754_pow+0xcc>
 8006e78:	3314      	adds	r3, #20
 8006e7a:	1a9a      	subs	r2, r3, r2
 8006e7c:	9b04      	ldr	r3, [sp, #16]
 8006e7e:	4113      	asrs	r3, r2
 8006e80:	0019      	movs	r1, r3
 8006e82:	4091      	lsls	r1, r2
 8006e84:	000a      	movs	r2, r1
 8006e86:	9904      	ldr	r1, [sp, #16]
 8006e88:	428a      	cmp	r2, r1
 8006e8a:	d103      	bne.n	8006e94 <__ieee754_pow+0x148>
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	2502      	movs	r5, #2
 8006e90:	4013      	ands	r3, r2
 8006e92:	1aed      	subs	r5, r5, r3
 8006e94:	4b5b      	ldr	r3, [pc, #364]	@ (8007004 <__ieee754_pow+0x2b8>)
 8006e96:	9a04      	ldr	r2, [sp, #16]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d136      	bne.n	8006f0a <__ieee754_pow+0x1be>
 8006e9c:	9b06      	ldr	r3, [sp, #24]
 8006e9e:	9600      	str	r6, [sp, #0]
 8006ea0:	9701      	str	r7, [sp, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da2d      	bge.n	8006f02 <__ieee754_pow+0x1b6>
 8006ea6:	0032      	movs	r2, r6
 8006ea8:	003b      	movs	r3, r7
 8006eaa:	2000      	movs	r0, #0
 8006eac:	4955      	ldr	r1, [pc, #340]	@ (8007004 <__ieee754_pow+0x2b8>)
 8006eae:	f7fa f8df 	bl	8001070 <__aeabi_ddiv>
 8006eb2:	e773      	b.n	8006d9c <__ieee754_pow+0x50>
 8006eb4:	2502      	movs	r5, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1ae      	bne.n	8006e18 <__ieee754_pow+0xcc>
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	4a4c      	ldr	r2, [pc, #304]	@ (8006ff0 <__ieee754_pow+0x2a4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d1e8      	bne.n	8006e94 <__ieee754_pow+0x148>
 8006ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ff4 <__ieee754_pow+0x2a8>)
 8006ec4:	18e3      	adds	r3, r4, r3
 8006ec6:	4333      	orrs	r3, r6
 8006ec8:	d101      	bne.n	8006ece <__ieee754_pow+0x182>
 8006eca:	f000 fc3b 	bl	8007744 <__ieee754_pow+0x9f8>
 8006ece:	4b4b      	ldr	r3, [pc, #300]	@ (8006ffc <__ieee754_pow+0x2b0>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	d909      	bls.n	8006ee8 <__ieee754_pow+0x19c>
 8006ed4:	9b06      	ldr	r3, [sp, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da01      	bge.n	8006ede <__ieee754_pow+0x192>
 8006eda:	f000 fc37 	bl	800774c <__ieee754_pow+0xa00>
 8006ede:	9b02      	ldr	r3, [sp, #8]
 8006ee0:	9c03      	ldr	r4, [sp, #12]
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	9401      	str	r4, [sp, #4]
 8006ee6:	e00c      	b.n	8006f02 <__ieee754_pow+0x1b6>
 8006ee8:	9b06      	ldr	r3, [sp, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	db01      	blt.n	8006ef2 <__ieee754_pow+0x1a6>
 8006eee:	f000 fc2d 	bl	800774c <__ieee754_pow+0xa00>
 8006ef2:	2280      	movs	r2, #128	@ 0x80
 8006ef4:	0612      	lsls	r2, r2, #24
 8006ef6:	4694      	mov	ip, r2
 8006ef8:	9b02      	ldr	r3, [sp, #8]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	4463      	add	r3, ip
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	9800      	ldr	r0, [sp, #0]
 8006f04:	9901      	ldr	r1, [sp, #4]
 8006f06:	b015      	add	sp, #84	@ 0x54
 8006f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0a:	2380      	movs	r3, #128	@ 0x80
 8006f0c:	9a06      	ldr	r2, [sp, #24]
 8006f0e:	05db      	lsls	r3, r3, #23
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d106      	bne.n	8006f22 <__ieee754_pow+0x1d6>
 8006f14:	0032      	movs	r2, r6
 8006f16:	003b      	movs	r3, r7
 8006f18:	0030      	movs	r0, r6
 8006f1a:	0039      	movs	r1, r7
 8006f1c:	f7fa fcec 	bl	80018f8 <__aeabi_dmul>
 8006f20:	e73c      	b.n	8006d9c <__ieee754_pow+0x50>
 8006f22:	4b39      	ldr	r3, [pc, #228]	@ (8007008 <__ieee754_pow+0x2bc>)
 8006f24:	9a06      	ldr	r2, [sp, #24]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d000      	beq.n	8006f2c <__ieee754_pow+0x1e0>
 8006f2a:	e775      	b.n	8006e18 <__ieee754_pow+0xcc>
 8006f2c:	9b08      	ldr	r3, [sp, #32]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	da00      	bge.n	8006f34 <__ieee754_pow+0x1e8>
 8006f32:	e771      	b.n	8006e18 <__ieee754_pow+0xcc>
 8006f34:	0030      	movs	r0, r6
 8006f36:	0039      	movs	r1, r7
 8006f38:	f000 fcd2 	bl	80078e0 <__ieee754_sqrt>
 8006f3c:	e72e      	b.n	8006d9c <__ieee754_pow+0x50>
 8006f3e:	2d01      	cmp	r5, #1
 8006f40:	d1df      	bne.n	8006f02 <__ieee754_pow+0x1b6>
 8006f42:	9800      	ldr	r0, [sp, #0]
 8006f44:	2180      	movs	r1, #128	@ 0x80
 8006f46:	0002      	movs	r2, r0
 8006f48:	9801      	ldr	r0, [sp, #4]
 8006f4a:	0609      	lsls	r1, r1, #24
 8006f4c:	1843      	adds	r3, r0, r1
 8006f4e:	9200      	str	r2, [sp, #0]
 8006f50:	9301      	str	r3, [sp, #4]
 8006f52:	e7d6      	b.n	8006f02 <__ieee754_pow+0x1b6>
 8006f54:	0ffb      	lsrs	r3, r7, #31
 8006f56:	3b01      	subs	r3, #1
 8006f58:	001a      	movs	r2, r3
 8006f5a:	432a      	orrs	r2, r5
 8006f5c:	d104      	bne.n	8006f68 <__ieee754_pow+0x21c>
 8006f5e:	0032      	movs	r2, r6
 8006f60:	003b      	movs	r3, r7
 8006f62:	0030      	movs	r0, r6
 8006f64:	0039      	movs	r1, r7
 8006f66:	e780      	b.n	8006e6a <__ieee754_pow+0x11e>
 8006f68:	3d01      	subs	r5, #1
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	431d      	orrs	r5, r3
 8006f6e:	d015      	beq.n	8006f9c <__ieee754_pow+0x250>
 8006f70:	4b24      	ldr	r3, [pc, #144]	@ (8007004 <__ieee754_pow+0x2b8>)
 8006f72:	9208      	str	r2, [sp, #32]
 8006f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f76:	2384      	movs	r3, #132	@ 0x84
 8006f78:	9a04      	ldr	r2, [sp, #16]
 8006f7a:	05db      	lsls	r3, r3, #23
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d800      	bhi.n	8006f82 <__ieee754_pow+0x236>
 8006f80:	e102      	b.n	8007188 <__ieee754_pow+0x43c>
 8006f82:	4b22      	ldr	r3, [pc, #136]	@ (800700c <__ieee754_pow+0x2c0>)
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d912      	bls.n	8006fae <__ieee754_pow+0x262>
 8006f88:	4b1c      	ldr	r3, [pc, #112]	@ (8006ffc <__ieee754_pow+0x2b0>)
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d808      	bhi.n	8006fa0 <__ieee754_pow+0x254>
 8006f8e:	9b06      	ldr	r3, [sp, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da08      	bge.n	8006fa6 <__ieee754_pow+0x25a>
 8006f94:	2000      	movs	r0, #0
 8006f96:	f000 fc9b 	bl	80078d0 <__math_oflow>
 8006f9a:	e6ff      	b.n	8006d9c <__ieee754_pow+0x50>
 8006f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8007010 <__ieee754_pow+0x2c4>)
 8006f9e:	e7e8      	b.n	8006f72 <__ieee754_pow+0x226>
 8006fa0:	9b06      	ldr	r3, [sp, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	dcf6      	bgt.n	8006f94 <__ieee754_pow+0x248>
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	f000 fc8b 	bl	80078c2 <__math_uflow>
 8006fac:	e6f6      	b.n	8006d9c <__ieee754_pow+0x50>
 8006fae:	4b19      	ldr	r3, [pc, #100]	@ (8007014 <__ieee754_pow+0x2c8>)
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	d80b      	bhi.n	8006fcc <__ieee754_pow+0x280>
 8006fb4:	9808      	ldr	r0, [sp, #32]
 8006fb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f7f9 fa36 	bl	800042c <__aeabi_dcmplt>
 8006fc0:	1e43      	subs	r3, r0, #1
 8006fc2:	4198      	sbcs	r0, r3
 8006fc4:	9b06      	ldr	r3, [sp, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	daee      	bge.n	8006fa8 <__ieee754_pow+0x25c>
 8006fca:	e7e4      	b.n	8006f96 <__ieee754_pow+0x24a>
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8007004 <__ieee754_pow+0x2b8>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	429c      	cmp	r4, r3
 8006fd2:	d921      	bls.n	8007018 <__ieee754_pow+0x2cc>
 8006fd4:	9808      	ldr	r0, [sp, #32]
 8006fd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f7f9 fa27 	bl	800042c <__aeabi_dcmplt>
 8006fde:	1e43      	subs	r3, r0, #1
 8006fe0:	4198      	sbcs	r0, r3
 8006fe2:	9b06      	ldr	r3, [sp, #24]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	dcd6      	bgt.n	8006f96 <__ieee754_pow+0x24a>
 8006fe8:	e7de      	b.n	8006fa8 <__ieee754_pow+0x25c>
 8006fea:	46c0      	nop			@ (mov r8, r8)
 8006fec:	fff00000 	.word	0xfff00000
 8006ff0:	7ff00000 	.word	0x7ff00000
 8006ff4:	c0100000 	.word	0xc0100000
 8006ff8:	433fffff 	.word	0x433fffff
 8006ffc:	3fefffff 	.word	0x3fefffff
 8007000:	fffffc01 	.word	0xfffffc01
 8007004:	3ff00000 	.word	0x3ff00000
 8007008:	3fe00000 	.word	0x3fe00000
 800700c:	43f00000 	.word	0x43f00000
 8007010:	bff00000 	.word	0xbff00000
 8007014:	3feffffe 	.word	0x3feffffe
 8007018:	9800      	ldr	r0, [sp, #0]
 800701a:	9901      	ldr	r1, [sp, #4]
 800701c:	4b4f      	ldr	r3, [pc, #316]	@ (800715c <__ieee754_pow+0x410>)
 800701e:	f7fa ff33 	bl	8001e88 <__aeabi_dsub>
 8007022:	22c0      	movs	r2, #192	@ 0xc0
 8007024:	4b4e      	ldr	r3, [pc, #312]	@ (8007160 <__ieee754_pow+0x414>)
 8007026:	05d2      	lsls	r2, r2, #23
 8007028:	0006      	movs	r6, r0
 800702a:	000f      	movs	r7, r1
 800702c:	f7fa fc64 	bl	80018f8 <__aeabi_dmul>
 8007030:	4a4c      	ldr	r2, [pc, #304]	@ (8007164 <__ieee754_pow+0x418>)
 8007032:	9004      	str	r0, [sp, #16]
 8007034:	9105      	str	r1, [sp, #20]
 8007036:	4b4c      	ldr	r3, [pc, #304]	@ (8007168 <__ieee754_pow+0x41c>)
 8007038:	0030      	movs	r0, r6
 800703a:	0039      	movs	r1, r7
 800703c:	f7fa fc5c 	bl	80018f8 <__aeabi_dmul>
 8007040:	2200      	movs	r2, #0
 8007042:	9000      	str	r0, [sp, #0]
 8007044:	9101      	str	r1, [sp, #4]
 8007046:	4b49      	ldr	r3, [pc, #292]	@ (800716c <__ieee754_pow+0x420>)
 8007048:	0030      	movs	r0, r6
 800704a:	0039      	movs	r1, r7
 800704c:	f7fa fc54 	bl	80018f8 <__aeabi_dmul>
 8007050:	0002      	movs	r2, r0
 8007052:	000b      	movs	r3, r1
 8007054:	4846      	ldr	r0, [pc, #280]	@ (8007170 <__ieee754_pow+0x424>)
 8007056:	4947      	ldr	r1, [pc, #284]	@ (8007174 <__ieee754_pow+0x428>)
 8007058:	f7fa ff16 	bl	8001e88 <__aeabi_dsub>
 800705c:	0032      	movs	r2, r6
 800705e:	003b      	movs	r3, r7
 8007060:	f7fa fc4a 	bl	80018f8 <__aeabi_dmul>
 8007064:	0002      	movs	r2, r0
 8007066:	000b      	movs	r3, r1
 8007068:	2000      	movs	r0, #0
 800706a:	4943      	ldr	r1, [pc, #268]	@ (8007178 <__ieee754_pow+0x42c>)
 800706c:	f7fa ff0c 	bl	8001e88 <__aeabi_dsub>
 8007070:	0032      	movs	r2, r6
 8007072:	0004      	movs	r4, r0
 8007074:	000d      	movs	r5, r1
 8007076:	003b      	movs	r3, r7
 8007078:	0030      	movs	r0, r6
 800707a:	0039      	movs	r1, r7
 800707c:	f7fa fc3c 	bl	80018f8 <__aeabi_dmul>
 8007080:	0002      	movs	r2, r0
 8007082:	000b      	movs	r3, r1
 8007084:	0020      	movs	r0, r4
 8007086:	0029      	movs	r1, r5
 8007088:	f7fa fc36 	bl	80018f8 <__aeabi_dmul>
 800708c:	4a3b      	ldr	r2, [pc, #236]	@ (800717c <__ieee754_pow+0x430>)
 800708e:	4b34      	ldr	r3, [pc, #208]	@ (8007160 <__ieee754_pow+0x414>)
 8007090:	f7fa fc32 	bl	80018f8 <__aeabi_dmul>
 8007094:	0002      	movs	r2, r0
 8007096:	000b      	movs	r3, r1
 8007098:	9800      	ldr	r0, [sp, #0]
 800709a:	9901      	ldr	r1, [sp, #4]
 800709c:	f7fa fef4 	bl	8001e88 <__aeabi_dsub>
 80070a0:	0002      	movs	r2, r0
 80070a2:	000b      	movs	r3, r1
 80070a4:	0004      	movs	r4, r0
 80070a6:	000d      	movs	r5, r1
 80070a8:	9804      	ldr	r0, [sp, #16]
 80070aa:	9905      	ldr	r1, [sp, #20]
 80070ac:	f7f9 fc7c 	bl	80009a8 <__aeabi_dadd>
 80070b0:	9a04      	ldr	r2, [sp, #16]
 80070b2:	9b05      	ldr	r3, [sp, #20]
 80070b4:	2000      	movs	r0, #0
 80070b6:	9000      	str	r0, [sp, #0]
 80070b8:	9101      	str	r1, [sp, #4]
 80070ba:	f7fa fee5 	bl	8001e88 <__aeabi_dsub>
 80070be:	0002      	movs	r2, r0
 80070c0:	000b      	movs	r3, r1
 80070c2:	0020      	movs	r0, r4
 80070c4:	0029      	movs	r1, r5
 80070c6:	f7fa fedf 	bl	8001e88 <__aeabi_dsub>
 80070ca:	9b02      	ldr	r3, [sp, #8]
 80070cc:	9c03      	ldr	r4, [sp, #12]
 80070ce:	9304      	str	r3, [sp, #16]
 80070d0:	9405      	str	r4, [sp, #20]
 80070d2:	2300      	movs	r3, #0
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	9c04      	ldr	r4, [sp, #16]
 80070d8:	9d05      	ldr	r5, [sp, #20]
 80070da:	0006      	movs	r6, r0
 80070dc:	000f      	movs	r7, r1
 80070de:	9802      	ldr	r0, [sp, #8]
 80070e0:	9903      	ldr	r1, [sp, #12]
 80070e2:	0022      	movs	r2, r4
 80070e4:	002b      	movs	r3, r5
 80070e6:	f7fa fecf 	bl	8001e88 <__aeabi_dsub>
 80070ea:	9a00      	ldr	r2, [sp, #0]
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	f7fa fc03 	bl	80018f8 <__aeabi_dmul>
 80070f2:	9a02      	ldr	r2, [sp, #8]
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	9006      	str	r0, [sp, #24]
 80070f8:	9107      	str	r1, [sp, #28]
 80070fa:	0030      	movs	r0, r6
 80070fc:	0039      	movs	r1, r7
 80070fe:	f7fa fbfb 	bl	80018f8 <__aeabi_dmul>
 8007102:	0002      	movs	r2, r0
 8007104:	000b      	movs	r3, r1
 8007106:	9806      	ldr	r0, [sp, #24]
 8007108:	9907      	ldr	r1, [sp, #28]
 800710a:	f7f9 fc4d 	bl	80009a8 <__aeabi_dadd>
 800710e:	0022      	movs	r2, r4
 8007110:	002b      	movs	r3, r5
 8007112:	9002      	str	r0, [sp, #8]
 8007114:	9103      	str	r1, [sp, #12]
 8007116:	9800      	ldr	r0, [sp, #0]
 8007118:	9901      	ldr	r1, [sp, #4]
 800711a:	f7fa fbed 	bl	80018f8 <__aeabi_dmul>
 800711e:	000b      	movs	r3, r1
 8007120:	0002      	movs	r2, r0
 8007122:	0006      	movs	r6, r0
 8007124:	000f      	movs	r7, r1
 8007126:	9802      	ldr	r0, [sp, #8]
 8007128:	9903      	ldr	r1, [sp, #12]
 800712a:	f7f9 fc3d 	bl	80009a8 <__aeabi_dadd>
 800712e:	9000      	str	r0, [sp, #0]
 8007130:	9101      	str	r1, [sp, #4]
 8007132:	9c01      	ldr	r4, [sp, #4]
 8007134:	4b12      	ldr	r3, [pc, #72]	@ (8007180 <__ieee754_pow+0x434>)
 8007136:	9406      	str	r4, [sp, #24]
 8007138:	429c      	cmp	r4, r3
 800713a:	dc00      	bgt.n	800713e <__ieee754_pow+0x3f2>
 800713c:	e222      	b.n	8007584 <__ieee754_pow+0x838>
 800713e:	4a11      	ldr	r2, [pc, #68]	@ (8007184 <__ieee754_pow+0x438>)
 8007140:	18a3      	adds	r3, r4, r2
 8007142:	9a00      	ldr	r2, [sp, #0]
 8007144:	4313      	orrs	r3, r2
 8007146:	d100      	bne.n	800714a <__ieee754_pow+0x3fe>
 8007148:	e1a0      	b.n	800748c <__ieee754_pow+0x740>
 800714a:	9808      	ldr	r0, [sp, #32]
 800714c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800714e:	2300      	movs	r3, #0
 8007150:	2200      	movs	r2, #0
 8007152:	f7f9 f96b 	bl	800042c <__aeabi_dcmplt>
 8007156:	1e43      	subs	r3, r0, #1
 8007158:	4198      	sbcs	r0, r3
 800715a:	e71c      	b.n	8006f96 <__ieee754_pow+0x24a>
 800715c:	3ff00000 	.word	0x3ff00000
 8007160:	3ff71547 	.word	0x3ff71547
 8007164:	f85ddf44 	.word	0xf85ddf44
 8007168:	3e54ae0b 	.word	0x3e54ae0b
 800716c:	3fd00000 	.word	0x3fd00000
 8007170:	55555555 	.word	0x55555555
 8007174:	3fd55555 	.word	0x3fd55555
 8007178:	3fe00000 	.word	0x3fe00000
 800717c:	652b82fe 	.word	0x652b82fe
 8007180:	408fffff 	.word	0x408fffff
 8007184:	bf700000 	.word	0xbf700000
 8007188:	4be0      	ldr	r3, [pc, #896]	@ (800750c <__ieee754_pow+0x7c0>)
 800718a:	2200      	movs	r2, #0
 800718c:	423b      	tst	r3, r7
 800718e:	d10b      	bne.n	80071a8 <__ieee754_pow+0x45c>
 8007190:	9800      	ldr	r0, [sp, #0]
 8007192:	9901      	ldr	r1, [sp, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	4bde      	ldr	r3, [pc, #888]	@ (8007510 <__ieee754_pow+0x7c4>)
 8007198:	f7fa fbae 	bl	80018f8 <__aeabi_dmul>
 800719c:	2235      	movs	r2, #53	@ 0x35
 800719e:	9000      	str	r0, [sp, #0]
 80071a0:	9101      	str	r1, [sp, #4]
 80071a2:	9b01      	ldr	r3, [sp, #4]
 80071a4:	4252      	negs	r2, r2
 80071a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071aa:	49da      	ldr	r1, [pc, #872]	@ (8007514 <__ieee754_pow+0x7c8>)
 80071ac:	151b      	asrs	r3, r3, #20
 80071ae:	185b      	adds	r3, r3, r1
 80071b0:	189b      	adds	r3, r3, r2
 80071b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80071b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071b6:	4dd8      	ldr	r5, [pc, #864]	@ (8007518 <__ieee754_pow+0x7cc>)
 80071b8:	031b      	lsls	r3, r3, #12
 80071ba:	4ad8      	ldr	r2, [pc, #864]	@ (800751c <__ieee754_pow+0x7d0>)
 80071bc:	0b1b      	lsrs	r3, r3, #12
 80071be:	2600      	movs	r6, #0
 80071c0:	431d      	orrs	r5, r3
 80071c2:	4293      	cmp	r3, r2
 80071c4:	dd09      	ble.n	80071da <__ieee754_pow+0x48e>
 80071c6:	4ad6      	ldr	r2, [pc, #856]	@ (8007520 <__ieee754_pow+0x7d4>)
 80071c8:	3601      	adds	r6, #1
 80071ca:	4293      	cmp	r3, r2
 80071cc:	dd05      	ble.n	80071da <__ieee754_pow+0x48e>
 80071ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071d0:	199b      	adds	r3, r3, r6
 80071d2:	2600      	movs	r6, #0
 80071d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80071d6:	4bd3      	ldr	r3, [pc, #844]	@ (8007524 <__ieee754_pow+0x7d8>)
 80071d8:	18ed      	adds	r5, r5, r3
 80071da:	9800      	ldr	r0, [sp, #0]
 80071dc:	9901      	ldr	r1, [sp, #4]
 80071de:	0029      	movs	r1, r5
 80071e0:	4bd1      	ldr	r3, [pc, #836]	@ (8007528 <__ieee754_pow+0x7dc>)
 80071e2:	00f2      	lsls	r2, r6, #3
 80071e4:	189b      	adds	r3, r3, r2
 80071e6:	685c      	ldr	r4, [r3, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	920f      	str	r2, [sp, #60]	@ 0x3c
 80071ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80071ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071f0:	001a      	movs	r2, r3
 80071f2:	0023      	movs	r3, r4
 80071f4:	900c      	str	r0, [sp, #48]	@ 0x30
 80071f6:	910d      	str	r1, [sp, #52]	@ 0x34
 80071f8:	f7fa fe46 	bl	8001e88 <__aeabi_dsub>
 80071fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007200:	9010      	str	r0, [sp, #64]	@ 0x40
 8007202:	9111      	str	r1, [sp, #68]	@ 0x44
 8007204:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007206:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007208:	f7f9 fbce 	bl	80009a8 <__aeabi_dadd>
 800720c:	0002      	movs	r2, r0
 800720e:	000b      	movs	r3, r1
 8007210:	2000      	movs	r0, #0
 8007212:	49c1      	ldr	r1, [pc, #772]	@ (8007518 <__ieee754_pow+0x7cc>)
 8007214:	f7f9 ff2c 	bl	8001070 <__aeabi_ddiv>
 8007218:	0002      	movs	r2, r0
 800721a:	000b      	movs	r3, r1
 800721c:	9012      	str	r0, [sp, #72]	@ 0x48
 800721e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007220:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007222:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007224:	f7fa fb68 	bl	80018f8 <__aeabi_dmul>
 8007228:	9006      	str	r0, [sp, #24]
 800722a:	9107      	str	r1, [sp, #28]
 800722c:	9b06      	ldr	r3, [sp, #24]
 800722e:	9c07      	ldr	r4, [sp, #28]
 8007230:	2180      	movs	r1, #128	@ 0x80
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	9405      	str	r4, [sp, #20]
 8007236:	2080      	movs	r0, #128	@ 0x80
 8007238:	2300      	movs	r3, #0
 800723a:	2200      	movs	r2, #0
 800723c:	106d      	asrs	r5, r5, #1
 800723e:	0589      	lsls	r1, r1, #22
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	4329      	orrs	r1, r5
 8007244:	0300      	lsls	r0, r0, #12
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	9c05      	ldr	r4, [sp, #20]
 800724a:	1809      	adds	r1, r1, r0
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	9401      	str	r4, [sp, #4]
 8007250:	04b6      	lsls	r6, r6, #18
 8007252:	198b      	adds	r3, r1, r6
 8007254:	9800      	ldr	r0, [sp, #0]
 8007256:	9901      	ldr	r1, [sp, #4]
 8007258:	0014      	movs	r4, r2
 800725a:	001d      	movs	r5, r3
 800725c:	f7fa fb4c 	bl	80018f8 <__aeabi_dmul>
 8007260:	0002      	movs	r2, r0
 8007262:	000b      	movs	r3, r1
 8007264:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007266:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007268:	f7fa fe0e 	bl	8001e88 <__aeabi_dsub>
 800726c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800726e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007270:	0006      	movs	r6, r0
 8007272:	000f      	movs	r7, r1
 8007274:	0020      	movs	r0, r4
 8007276:	0029      	movs	r1, r5
 8007278:	f7fa fe06 	bl	8001e88 <__aeabi_dsub>
 800727c:	0002      	movs	r2, r0
 800727e:	000b      	movs	r3, r1
 8007280:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007282:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007284:	f7fa fe00 	bl	8001e88 <__aeabi_dsub>
 8007288:	9a00      	ldr	r2, [sp, #0]
 800728a:	9b01      	ldr	r3, [sp, #4]
 800728c:	f7fa fb34 	bl	80018f8 <__aeabi_dmul>
 8007290:	0002      	movs	r2, r0
 8007292:	000b      	movs	r3, r1
 8007294:	0030      	movs	r0, r6
 8007296:	0039      	movs	r1, r7
 8007298:	f7fa fdf6 	bl	8001e88 <__aeabi_dsub>
 800729c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800729e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072a0:	f7fa fb2a 	bl	80018f8 <__aeabi_dmul>
 80072a4:	9a06      	ldr	r2, [sp, #24]
 80072a6:	9b07      	ldr	r3, [sp, #28]
 80072a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80072aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072ac:	0010      	movs	r0, r2
 80072ae:	0019      	movs	r1, r3
 80072b0:	f7fa fb22 	bl	80018f8 <__aeabi_dmul>
 80072b4:	0006      	movs	r6, r0
 80072b6:	000f      	movs	r7, r1
 80072b8:	4a9c      	ldr	r2, [pc, #624]	@ (800752c <__ieee754_pow+0x7e0>)
 80072ba:	4b9d      	ldr	r3, [pc, #628]	@ (8007530 <__ieee754_pow+0x7e4>)
 80072bc:	f7fa fb1c 	bl	80018f8 <__aeabi_dmul>
 80072c0:	4a9c      	ldr	r2, [pc, #624]	@ (8007534 <__ieee754_pow+0x7e8>)
 80072c2:	4b9d      	ldr	r3, [pc, #628]	@ (8007538 <__ieee754_pow+0x7ec>)
 80072c4:	f7f9 fb70 	bl	80009a8 <__aeabi_dadd>
 80072c8:	0032      	movs	r2, r6
 80072ca:	003b      	movs	r3, r7
 80072cc:	f7fa fb14 	bl	80018f8 <__aeabi_dmul>
 80072d0:	4a9a      	ldr	r2, [pc, #616]	@ (800753c <__ieee754_pow+0x7f0>)
 80072d2:	4b9b      	ldr	r3, [pc, #620]	@ (8007540 <__ieee754_pow+0x7f4>)
 80072d4:	f7f9 fb68 	bl	80009a8 <__aeabi_dadd>
 80072d8:	0032      	movs	r2, r6
 80072da:	003b      	movs	r3, r7
 80072dc:	f7fa fb0c 	bl	80018f8 <__aeabi_dmul>
 80072e0:	4a98      	ldr	r2, [pc, #608]	@ (8007544 <__ieee754_pow+0x7f8>)
 80072e2:	4b99      	ldr	r3, [pc, #612]	@ (8007548 <__ieee754_pow+0x7fc>)
 80072e4:	f7f9 fb60 	bl	80009a8 <__aeabi_dadd>
 80072e8:	0032      	movs	r2, r6
 80072ea:	003b      	movs	r3, r7
 80072ec:	f7fa fb04 	bl	80018f8 <__aeabi_dmul>
 80072f0:	4a96      	ldr	r2, [pc, #600]	@ (800754c <__ieee754_pow+0x800>)
 80072f2:	4b97      	ldr	r3, [pc, #604]	@ (8007550 <__ieee754_pow+0x804>)
 80072f4:	f7f9 fb58 	bl	80009a8 <__aeabi_dadd>
 80072f8:	0032      	movs	r2, r6
 80072fa:	003b      	movs	r3, r7
 80072fc:	f7fa fafc 	bl	80018f8 <__aeabi_dmul>
 8007300:	4a94      	ldr	r2, [pc, #592]	@ (8007554 <__ieee754_pow+0x808>)
 8007302:	4b95      	ldr	r3, [pc, #596]	@ (8007558 <__ieee754_pow+0x80c>)
 8007304:	f7f9 fb50 	bl	80009a8 <__aeabi_dadd>
 8007308:	0032      	movs	r2, r6
 800730a:	0004      	movs	r4, r0
 800730c:	000d      	movs	r5, r1
 800730e:	003b      	movs	r3, r7
 8007310:	0030      	movs	r0, r6
 8007312:	0039      	movs	r1, r7
 8007314:	f7fa faf0 	bl	80018f8 <__aeabi_dmul>
 8007318:	0002      	movs	r2, r0
 800731a:	000b      	movs	r3, r1
 800731c:	0020      	movs	r0, r4
 800731e:	0029      	movs	r1, r5
 8007320:	f7fa faea 	bl	80018f8 <__aeabi_dmul>
 8007324:	9a00      	ldr	r2, [sp, #0]
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	0004      	movs	r4, r0
 800732a:	000d      	movs	r5, r1
 800732c:	9806      	ldr	r0, [sp, #24]
 800732e:	9907      	ldr	r1, [sp, #28]
 8007330:	f7f9 fb3a 	bl	80009a8 <__aeabi_dadd>
 8007334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007338:	f7fa fade 	bl	80018f8 <__aeabi_dmul>
 800733c:	0022      	movs	r2, r4
 800733e:	002b      	movs	r3, r5
 8007340:	f7f9 fb32 	bl	80009a8 <__aeabi_dadd>
 8007344:	9a00      	ldr	r2, [sp, #0]
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	900c      	str	r0, [sp, #48]	@ 0x30
 800734a:	910d      	str	r1, [sp, #52]	@ 0x34
 800734c:	0010      	movs	r0, r2
 800734e:	0019      	movs	r1, r3
 8007350:	f7fa fad2 	bl	80018f8 <__aeabi_dmul>
 8007354:	2200      	movs	r2, #0
 8007356:	4b81      	ldr	r3, [pc, #516]	@ (800755c <__ieee754_pow+0x810>)
 8007358:	0004      	movs	r4, r0
 800735a:	000d      	movs	r5, r1
 800735c:	f7f9 fb24 	bl	80009a8 <__aeabi_dadd>
 8007360:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007364:	f7f9 fb20 	bl	80009a8 <__aeabi_dadd>
 8007368:	2000      	movs	r0, #0
 800736a:	000f      	movs	r7, r1
 800736c:	0006      	movs	r6, r0
 800736e:	0002      	movs	r2, r0
 8007370:	000b      	movs	r3, r1
 8007372:	9800      	ldr	r0, [sp, #0]
 8007374:	9901      	ldr	r1, [sp, #4]
 8007376:	f7fa fabf 	bl	80018f8 <__aeabi_dmul>
 800737a:	2200      	movs	r2, #0
 800737c:	9000      	str	r0, [sp, #0]
 800737e:	9101      	str	r1, [sp, #4]
 8007380:	4b76      	ldr	r3, [pc, #472]	@ (800755c <__ieee754_pow+0x810>)
 8007382:	0030      	movs	r0, r6
 8007384:	0039      	movs	r1, r7
 8007386:	f7fa fd7f 	bl	8001e88 <__aeabi_dsub>
 800738a:	0022      	movs	r2, r4
 800738c:	002b      	movs	r3, r5
 800738e:	f7fa fd7b 	bl	8001e88 <__aeabi_dsub>
 8007392:	0002      	movs	r2, r0
 8007394:	000b      	movs	r3, r1
 8007396:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007398:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800739a:	f7fa fd75 	bl	8001e88 <__aeabi_dsub>
 800739e:	9a06      	ldr	r2, [sp, #24]
 80073a0:	9b07      	ldr	r3, [sp, #28]
 80073a2:	f7fa faa9 	bl	80018f8 <__aeabi_dmul>
 80073a6:	0032      	movs	r2, r6
 80073a8:	0004      	movs	r4, r0
 80073aa:	000d      	movs	r5, r1
 80073ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073b0:	003b      	movs	r3, r7
 80073b2:	f7fa faa1 	bl	80018f8 <__aeabi_dmul>
 80073b6:	0002      	movs	r2, r0
 80073b8:	000b      	movs	r3, r1
 80073ba:	0020      	movs	r0, r4
 80073bc:	0029      	movs	r1, r5
 80073be:	f7f9 faf3 	bl	80009a8 <__aeabi_dadd>
 80073c2:	0004      	movs	r4, r0
 80073c4:	000d      	movs	r5, r1
 80073c6:	0002      	movs	r2, r0
 80073c8:	000b      	movs	r3, r1
 80073ca:	9800      	ldr	r0, [sp, #0]
 80073cc:	9901      	ldr	r1, [sp, #4]
 80073ce:	f7f9 faeb 	bl	80009a8 <__aeabi_dadd>
 80073d2:	22e0      	movs	r2, #224	@ 0xe0
 80073d4:	2000      	movs	r0, #0
 80073d6:	4b62      	ldr	r3, [pc, #392]	@ (8007560 <__ieee754_pow+0x814>)
 80073d8:	0612      	lsls	r2, r2, #24
 80073da:	0006      	movs	r6, r0
 80073dc:	000f      	movs	r7, r1
 80073de:	f7fa fa8b 	bl	80018f8 <__aeabi_dmul>
 80073e2:	9006      	str	r0, [sp, #24]
 80073e4:	9107      	str	r1, [sp, #28]
 80073e6:	9a00      	ldr	r2, [sp, #0]
 80073e8:	9b01      	ldr	r3, [sp, #4]
 80073ea:	0030      	movs	r0, r6
 80073ec:	0039      	movs	r1, r7
 80073ee:	f7fa fd4b 	bl	8001e88 <__aeabi_dsub>
 80073f2:	0002      	movs	r2, r0
 80073f4:	000b      	movs	r3, r1
 80073f6:	0020      	movs	r0, r4
 80073f8:	0029      	movs	r1, r5
 80073fa:	f7fa fd45 	bl	8001e88 <__aeabi_dsub>
 80073fe:	4a59      	ldr	r2, [pc, #356]	@ (8007564 <__ieee754_pow+0x818>)
 8007400:	4b57      	ldr	r3, [pc, #348]	@ (8007560 <__ieee754_pow+0x814>)
 8007402:	f7fa fa79 	bl	80018f8 <__aeabi_dmul>
 8007406:	4a58      	ldr	r2, [pc, #352]	@ (8007568 <__ieee754_pow+0x81c>)
 8007408:	0004      	movs	r4, r0
 800740a:	000d      	movs	r5, r1
 800740c:	0030      	movs	r0, r6
 800740e:	0039      	movs	r1, r7
 8007410:	4b56      	ldr	r3, [pc, #344]	@ (800756c <__ieee754_pow+0x820>)
 8007412:	f7fa fa71 	bl	80018f8 <__aeabi_dmul>
 8007416:	0002      	movs	r2, r0
 8007418:	000b      	movs	r3, r1
 800741a:	0020      	movs	r0, r4
 800741c:	0029      	movs	r1, r5
 800741e:	f7f9 fac3 	bl	80009a8 <__aeabi_dadd>
 8007422:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007424:	4b52      	ldr	r3, [pc, #328]	@ (8007570 <__ieee754_pow+0x824>)
 8007426:	189b      	adds	r3, r3, r2
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f7f9 fabc 	bl	80009a8 <__aeabi_dadd>
 8007430:	900a      	str	r0, [sp, #40]	@ 0x28
 8007432:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007434:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007436:	f7fb f921 	bl	800267c <__aeabi_i2d>
 800743a:	0004      	movs	r4, r0
 800743c:	000d      	movs	r5, r1
 800743e:	9806      	ldr	r0, [sp, #24]
 8007440:	9907      	ldr	r1, [sp, #28]
 8007442:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007444:	4b4b      	ldr	r3, [pc, #300]	@ (8007574 <__ieee754_pow+0x828>)
 8007446:	189b      	adds	r3, r3, r2
 8007448:	681e      	ldr	r6, [r3, #0]
 800744a:	685f      	ldr	r7, [r3, #4]
 800744c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800744e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007450:	f7f9 faaa 	bl	80009a8 <__aeabi_dadd>
 8007454:	0032      	movs	r2, r6
 8007456:	003b      	movs	r3, r7
 8007458:	f7f9 faa6 	bl	80009a8 <__aeabi_dadd>
 800745c:	0022      	movs	r2, r4
 800745e:	002b      	movs	r3, r5
 8007460:	f7f9 faa2 	bl	80009a8 <__aeabi_dadd>
 8007464:	2000      	movs	r0, #0
 8007466:	0022      	movs	r2, r4
 8007468:	002b      	movs	r3, r5
 800746a:	9000      	str	r0, [sp, #0]
 800746c:	9101      	str	r1, [sp, #4]
 800746e:	f7fa fd0b 	bl	8001e88 <__aeabi_dsub>
 8007472:	0032      	movs	r2, r6
 8007474:	003b      	movs	r3, r7
 8007476:	f7fa fd07 	bl	8001e88 <__aeabi_dsub>
 800747a:	9a06      	ldr	r2, [sp, #24]
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	f7fa fd03 	bl	8001e88 <__aeabi_dsub>
 8007482:	0002      	movs	r2, r0
 8007484:	000b      	movs	r3, r1
 8007486:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007488:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800748a:	e61c      	b.n	80070c6 <__ieee754_pow+0x37a>
 800748c:	4a3a      	ldr	r2, [pc, #232]	@ (8007578 <__ieee754_pow+0x82c>)
 800748e:	4b3b      	ldr	r3, [pc, #236]	@ (800757c <__ieee754_pow+0x830>)
 8007490:	9802      	ldr	r0, [sp, #8]
 8007492:	9903      	ldr	r1, [sp, #12]
 8007494:	f7f9 fa88 	bl	80009a8 <__aeabi_dadd>
 8007498:	0032      	movs	r2, r6
 800749a:	003b      	movs	r3, r7
 800749c:	9004      	str	r0, [sp, #16]
 800749e:	9105      	str	r1, [sp, #20]
 80074a0:	9800      	ldr	r0, [sp, #0]
 80074a2:	9901      	ldr	r1, [sp, #4]
 80074a4:	f7fa fcf0 	bl	8001e88 <__aeabi_dsub>
 80074a8:	0002      	movs	r2, r0
 80074aa:	000b      	movs	r3, r1
 80074ac:	9804      	ldr	r0, [sp, #16]
 80074ae:	9905      	ldr	r1, [sp, #20]
 80074b0:	f7f8 ffd0 	bl	8000454 <__aeabi_dcmpgt>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d000      	beq.n	80074ba <__ieee754_pow+0x76e>
 80074b8:	e647      	b.n	800714a <__ieee754_pow+0x3fe>
 80074ba:	2580      	movs	r5, #128	@ 0x80
 80074bc:	4b30      	ldr	r3, [pc, #192]	@ (8007580 <__ieee754_pow+0x834>)
 80074be:	036d      	lsls	r5, r5, #13
 80074c0:	1524      	asrs	r4, r4, #20
 80074c2:	18e4      	adds	r4, r4, r3
 80074c4:	002b      	movs	r3, r5
 80074c6:	4123      	asrs	r3, r4
 80074c8:	9a06      	ldr	r2, [sp, #24]
 80074ca:	4912      	ldr	r1, [pc, #72]	@ (8007514 <__ieee754_pow+0x7c8>)
 80074cc:	189b      	adds	r3, r3, r2
 80074ce:	005a      	lsls	r2, r3, #1
 80074d0:	4c14      	ldr	r4, [pc, #80]	@ (8007524 <__ieee754_pow+0x7d8>)
 80074d2:	0d52      	lsrs	r2, r2, #21
 80074d4:	1852      	adds	r2, r2, r1
 80074d6:	4114      	asrs	r4, r2
 80074d8:	401c      	ands	r4, r3
 80074da:	0021      	movs	r1, r4
 80074dc:	2414      	movs	r4, #20
 80074de:	031b      	lsls	r3, r3, #12
 80074e0:	0b1b      	lsrs	r3, r3, #12
 80074e2:	432b      	orrs	r3, r5
 80074e4:	1aa2      	subs	r2, r4, r2
 80074e6:	4113      	asrs	r3, r2
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	9b06      	ldr	r3, [sp, #24]
 80074ec:	2000      	movs	r0, #0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da02      	bge.n	80074f8 <__ieee754_pow+0x7ac>
 80074f2:	9b00      	ldr	r3, [sp, #0]
 80074f4:	425b      	negs	r3, r3
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	0002      	movs	r2, r0
 80074fa:	000b      	movs	r3, r1
 80074fc:	0030      	movs	r0, r6
 80074fe:	0039      	movs	r1, r7
 8007500:	f7fa fcc2 	bl	8001e88 <__aeabi_dsub>
 8007504:	0006      	movs	r6, r0
 8007506:	000f      	movs	r7, r1
 8007508:	e065      	b.n	80075d6 <__ieee754_pow+0x88a>
 800750a:	46c0      	nop			@ (mov r8, r8)
 800750c:	7ff00000 	.word	0x7ff00000
 8007510:	43400000 	.word	0x43400000
 8007514:	fffffc01 	.word	0xfffffc01
 8007518:	3ff00000 	.word	0x3ff00000
 800751c:	0003988e 	.word	0x0003988e
 8007520:	000bb679 	.word	0x000bb679
 8007524:	fff00000 	.word	0xfff00000
 8007528:	08007c18 	.word	0x08007c18
 800752c:	4a454eef 	.word	0x4a454eef
 8007530:	3fca7e28 	.word	0x3fca7e28
 8007534:	93c9db65 	.word	0x93c9db65
 8007538:	3fcd864a 	.word	0x3fcd864a
 800753c:	a91d4101 	.word	0xa91d4101
 8007540:	3fd17460 	.word	0x3fd17460
 8007544:	518f264d 	.word	0x518f264d
 8007548:	3fd55555 	.word	0x3fd55555
 800754c:	db6fabff 	.word	0xdb6fabff
 8007550:	3fdb6db6 	.word	0x3fdb6db6
 8007554:	33333303 	.word	0x33333303
 8007558:	3fe33333 	.word	0x3fe33333
 800755c:	40080000 	.word	0x40080000
 8007560:	3feec709 	.word	0x3feec709
 8007564:	dc3a03fd 	.word	0xdc3a03fd
 8007568:	145b01f5 	.word	0x145b01f5
 800756c:	be3e2fe0 	.word	0xbe3e2fe0
 8007570:	08007bf8 	.word	0x08007bf8
 8007574:	08007c08 	.word	0x08007c08
 8007578:	652b82fe 	.word	0x652b82fe
 800757c:	3c971547 	.word	0x3c971547
 8007580:	fffffc02 	.word	0xfffffc02
 8007584:	9b01      	ldr	r3, [sp, #4]
 8007586:	005c      	lsls	r4, r3, #1
 8007588:	4b72      	ldr	r3, [pc, #456]	@ (8007754 <__ieee754_pow+0xa08>)
 800758a:	0864      	lsrs	r4, r4, #1
 800758c:	429c      	cmp	r4, r3
 800758e:	d91c      	bls.n	80075ca <__ieee754_pow+0x87e>
 8007590:	4a71      	ldr	r2, [pc, #452]	@ (8007758 <__ieee754_pow+0xa0c>)
 8007592:	9b01      	ldr	r3, [sp, #4]
 8007594:	189b      	adds	r3, r3, r2
 8007596:	9a00      	ldr	r2, [sp, #0]
 8007598:	4313      	orrs	r3, r2
 800759a:	d008      	beq.n	80075ae <__ieee754_pow+0x862>
 800759c:	9808      	ldr	r0, [sp, #32]
 800759e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075a0:	2300      	movs	r3, #0
 80075a2:	2200      	movs	r2, #0
 80075a4:	f7f8 ff42 	bl	800042c <__aeabi_dcmplt>
 80075a8:	1e43      	subs	r3, r0, #1
 80075aa:	4198      	sbcs	r0, r3
 80075ac:	e4fc      	b.n	8006fa8 <__ieee754_pow+0x25c>
 80075ae:	0032      	movs	r2, r6
 80075b0:	9800      	ldr	r0, [sp, #0]
 80075b2:	9901      	ldr	r1, [sp, #4]
 80075b4:	003b      	movs	r3, r7
 80075b6:	f7fa fc67 	bl	8001e88 <__aeabi_dsub>
 80075ba:	9a02      	ldr	r2, [sp, #8]
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	f7f8 ff53 	bl	8000468 <__aeabi_dcmpge>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d1ea      	bne.n	800759c <__ieee754_pow+0x850>
 80075c6:	4c65      	ldr	r4, [pc, #404]	@ (800775c <__ieee754_pow+0xa10>)
 80075c8:	e777      	b.n	80074ba <__ieee754_pow+0x76e>
 80075ca:	9a04      	ldr	r2, [sp, #16]
 80075cc:	4b64      	ldr	r3, [pc, #400]	@ (8007760 <__ieee754_pow+0xa14>)
 80075ce:	9200      	str	r2, [sp, #0]
 80075d0:	429c      	cmp	r4, r3
 80075d2:	d900      	bls.n	80075d6 <__ieee754_pow+0x88a>
 80075d4:	e771      	b.n	80074ba <__ieee754_pow+0x76e>
 80075d6:	9a02      	ldr	r2, [sp, #8]
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	0030      	movs	r0, r6
 80075dc:	0039      	movs	r1, r7
 80075de:	f7f9 f9e3 	bl	80009a8 <__aeabi_dadd>
 80075e2:	2000      	movs	r0, #0
 80075e4:	2200      	movs	r2, #0
 80075e6:	4b5f      	ldr	r3, [pc, #380]	@ (8007764 <__ieee754_pow+0xa18>)
 80075e8:	9004      	str	r0, [sp, #16]
 80075ea:	9105      	str	r1, [sp, #20]
 80075ec:	f7fa f984 	bl	80018f8 <__aeabi_dmul>
 80075f0:	0032      	movs	r2, r6
 80075f2:	003b      	movs	r3, r7
 80075f4:	9006      	str	r0, [sp, #24]
 80075f6:	9107      	str	r1, [sp, #28]
 80075f8:	9804      	ldr	r0, [sp, #16]
 80075fa:	9905      	ldr	r1, [sp, #20]
 80075fc:	f7fa fc44 	bl	8001e88 <__aeabi_dsub>
 8007600:	0002      	movs	r2, r0
 8007602:	000b      	movs	r3, r1
 8007604:	9802      	ldr	r0, [sp, #8]
 8007606:	9903      	ldr	r1, [sp, #12]
 8007608:	f7fa fc3e 	bl	8001e88 <__aeabi_dsub>
 800760c:	4a56      	ldr	r2, [pc, #344]	@ (8007768 <__ieee754_pow+0xa1c>)
 800760e:	4b57      	ldr	r3, [pc, #348]	@ (800776c <__ieee754_pow+0xa20>)
 8007610:	f7fa f972 	bl	80018f8 <__aeabi_dmul>
 8007614:	4a56      	ldr	r2, [pc, #344]	@ (8007770 <__ieee754_pow+0xa24>)
 8007616:	0004      	movs	r4, r0
 8007618:	000d      	movs	r5, r1
 800761a:	9804      	ldr	r0, [sp, #16]
 800761c:	9905      	ldr	r1, [sp, #20]
 800761e:	4b55      	ldr	r3, [pc, #340]	@ (8007774 <__ieee754_pow+0xa28>)
 8007620:	f7fa f96a 	bl	80018f8 <__aeabi_dmul>
 8007624:	0002      	movs	r2, r0
 8007626:	000b      	movs	r3, r1
 8007628:	0020      	movs	r0, r4
 800762a:	0029      	movs	r1, r5
 800762c:	f7f9 f9bc 	bl	80009a8 <__aeabi_dadd>
 8007630:	0004      	movs	r4, r0
 8007632:	000d      	movs	r5, r1
 8007634:	0002      	movs	r2, r0
 8007636:	000b      	movs	r3, r1
 8007638:	9806      	ldr	r0, [sp, #24]
 800763a:	9907      	ldr	r1, [sp, #28]
 800763c:	f7f9 f9b4 	bl	80009a8 <__aeabi_dadd>
 8007640:	9a06      	ldr	r2, [sp, #24]
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	0006      	movs	r6, r0
 8007646:	000f      	movs	r7, r1
 8007648:	f7fa fc1e 	bl	8001e88 <__aeabi_dsub>
 800764c:	0002      	movs	r2, r0
 800764e:	000b      	movs	r3, r1
 8007650:	0020      	movs	r0, r4
 8007652:	0029      	movs	r1, r5
 8007654:	f7fa fc18 	bl	8001e88 <__aeabi_dsub>
 8007658:	0032      	movs	r2, r6
 800765a:	9002      	str	r0, [sp, #8]
 800765c:	9103      	str	r1, [sp, #12]
 800765e:	003b      	movs	r3, r7
 8007660:	0030      	movs	r0, r6
 8007662:	0039      	movs	r1, r7
 8007664:	f7fa f948 	bl	80018f8 <__aeabi_dmul>
 8007668:	0004      	movs	r4, r0
 800766a:	000d      	movs	r5, r1
 800766c:	4a42      	ldr	r2, [pc, #264]	@ (8007778 <__ieee754_pow+0xa2c>)
 800766e:	4b43      	ldr	r3, [pc, #268]	@ (800777c <__ieee754_pow+0xa30>)
 8007670:	f7fa f942 	bl	80018f8 <__aeabi_dmul>
 8007674:	4a42      	ldr	r2, [pc, #264]	@ (8007780 <__ieee754_pow+0xa34>)
 8007676:	4b43      	ldr	r3, [pc, #268]	@ (8007784 <__ieee754_pow+0xa38>)
 8007678:	f7fa fc06 	bl	8001e88 <__aeabi_dsub>
 800767c:	0022      	movs	r2, r4
 800767e:	002b      	movs	r3, r5
 8007680:	f7fa f93a 	bl	80018f8 <__aeabi_dmul>
 8007684:	4a40      	ldr	r2, [pc, #256]	@ (8007788 <__ieee754_pow+0xa3c>)
 8007686:	4b41      	ldr	r3, [pc, #260]	@ (800778c <__ieee754_pow+0xa40>)
 8007688:	f7f9 f98e 	bl	80009a8 <__aeabi_dadd>
 800768c:	0022      	movs	r2, r4
 800768e:	002b      	movs	r3, r5
 8007690:	f7fa f932 	bl	80018f8 <__aeabi_dmul>
 8007694:	4a3e      	ldr	r2, [pc, #248]	@ (8007790 <__ieee754_pow+0xa44>)
 8007696:	4b3f      	ldr	r3, [pc, #252]	@ (8007794 <__ieee754_pow+0xa48>)
 8007698:	f7fa fbf6 	bl	8001e88 <__aeabi_dsub>
 800769c:	0022      	movs	r2, r4
 800769e:	002b      	movs	r3, r5
 80076a0:	f7fa f92a 	bl	80018f8 <__aeabi_dmul>
 80076a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007798 <__ieee754_pow+0xa4c>)
 80076a6:	4b3d      	ldr	r3, [pc, #244]	@ (800779c <__ieee754_pow+0xa50>)
 80076a8:	f7f9 f97e 	bl	80009a8 <__aeabi_dadd>
 80076ac:	0022      	movs	r2, r4
 80076ae:	002b      	movs	r3, r5
 80076b0:	f7fa f922 	bl	80018f8 <__aeabi_dmul>
 80076b4:	0002      	movs	r2, r0
 80076b6:	000b      	movs	r3, r1
 80076b8:	0030      	movs	r0, r6
 80076ba:	0039      	movs	r1, r7
 80076bc:	f7fa fbe4 	bl	8001e88 <__aeabi_dsub>
 80076c0:	0004      	movs	r4, r0
 80076c2:	000d      	movs	r5, r1
 80076c4:	0002      	movs	r2, r0
 80076c6:	000b      	movs	r3, r1
 80076c8:	0030      	movs	r0, r6
 80076ca:	0039      	movs	r1, r7
 80076cc:	f7fa f914 	bl	80018f8 <__aeabi_dmul>
 80076d0:	2380      	movs	r3, #128	@ 0x80
 80076d2:	9004      	str	r0, [sp, #16]
 80076d4:	9105      	str	r1, [sp, #20]
 80076d6:	2200      	movs	r2, #0
 80076d8:	0020      	movs	r0, r4
 80076da:	0029      	movs	r1, r5
 80076dc:	05db      	lsls	r3, r3, #23
 80076de:	f7fa fbd3 	bl	8001e88 <__aeabi_dsub>
 80076e2:	0002      	movs	r2, r0
 80076e4:	000b      	movs	r3, r1
 80076e6:	9804      	ldr	r0, [sp, #16]
 80076e8:	9905      	ldr	r1, [sp, #20]
 80076ea:	f7f9 fcc1 	bl	8001070 <__aeabi_ddiv>
 80076ee:	9a02      	ldr	r2, [sp, #8]
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	0004      	movs	r4, r0
 80076f4:	000d      	movs	r5, r1
 80076f6:	0030      	movs	r0, r6
 80076f8:	0039      	movs	r1, r7
 80076fa:	f7fa f8fd 	bl	80018f8 <__aeabi_dmul>
 80076fe:	9a02      	ldr	r2, [sp, #8]
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	f7f9 f951 	bl	80009a8 <__aeabi_dadd>
 8007706:	0002      	movs	r2, r0
 8007708:	000b      	movs	r3, r1
 800770a:	0020      	movs	r0, r4
 800770c:	0029      	movs	r1, r5
 800770e:	f7fa fbbb 	bl	8001e88 <__aeabi_dsub>
 8007712:	0032      	movs	r2, r6
 8007714:	003b      	movs	r3, r7
 8007716:	f7fa fbb7 	bl	8001e88 <__aeabi_dsub>
 800771a:	0002      	movs	r2, r0
 800771c:	000b      	movs	r3, r1
 800771e:	2000      	movs	r0, #0
 8007720:	491f      	ldr	r1, [pc, #124]	@ (80077a0 <__ieee754_pow+0xa54>)
 8007722:	f7fa fbb1 	bl	8001e88 <__aeabi_dsub>
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	051b      	lsls	r3, r3, #20
 800772a:	185b      	adds	r3, r3, r1
 800772c:	151a      	asrs	r2, r3, #20
 800772e:	2a00      	cmp	r2, #0
 8007730:	dc06      	bgt.n	8007740 <__ieee754_pow+0x9f4>
 8007732:	9a00      	ldr	r2, [sp, #0]
 8007734:	f000 f83a 	bl	80077ac <scalbn>
 8007738:	9a08      	ldr	r2, [sp, #32]
 800773a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800773c:	f7ff fbee 	bl	8006f1c <__ieee754_pow+0x1d0>
 8007740:	0019      	movs	r1, r3
 8007742:	e7f9      	b.n	8007738 <__ieee754_pow+0x9ec>
 8007744:	2300      	movs	r3, #0
 8007746:	4c16      	ldr	r4, [pc, #88]	@ (80077a0 <__ieee754_pow+0xa54>)
 8007748:	f7ff fbcb 	bl	8006ee2 <__ieee754_pow+0x196>
 800774c:	2300      	movs	r3, #0
 800774e:	2400      	movs	r4, #0
 8007750:	f7ff fbc7 	bl	8006ee2 <__ieee754_pow+0x196>
 8007754:	4090cbff 	.word	0x4090cbff
 8007758:	3f6f3400 	.word	0x3f6f3400
 800775c:	4090cc00 	.word	0x4090cc00
 8007760:	3fe00000 	.word	0x3fe00000
 8007764:	3fe62e43 	.word	0x3fe62e43
 8007768:	fefa39ef 	.word	0xfefa39ef
 800776c:	3fe62e42 	.word	0x3fe62e42
 8007770:	0ca86c39 	.word	0x0ca86c39
 8007774:	be205c61 	.word	0xbe205c61
 8007778:	72bea4d0 	.word	0x72bea4d0
 800777c:	3e663769 	.word	0x3e663769
 8007780:	c5d26bf1 	.word	0xc5d26bf1
 8007784:	3ebbbd41 	.word	0x3ebbbd41
 8007788:	af25de2c 	.word	0xaf25de2c
 800778c:	3f11566a 	.word	0x3f11566a
 8007790:	16bebd93 	.word	0x16bebd93
 8007794:	3f66c16c 	.word	0x3f66c16c
 8007798:	5555553e 	.word	0x5555553e
 800779c:	3fc55555 	.word	0x3fc55555
 80077a0:	3ff00000 	.word	0x3ff00000

080077a4 <fabs>:
 80077a4:	0049      	lsls	r1, r1, #1
 80077a6:	084b      	lsrs	r3, r1, #1
 80077a8:	0019      	movs	r1, r3
 80077aa:	4770      	bx	lr

080077ac <scalbn>:
 80077ac:	004b      	lsls	r3, r1, #1
 80077ae:	b570      	push	{r4, r5, r6, lr}
 80077b0:	0d5b      	lsrs	r3, r3, #21
 80077b2:	0014      	movs	r4, r2
 80077b4:	000d      	movs	r5, r1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10f      	bne.n	80077da <scalbn+0x2e>
 80077ba:	004b      	lsls	r3, r1, #1
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	4303      	orrs	r3, r0
 80077c0:	d012      	beq.n	80077e8 <scalbn+0x3c>
 80077c2:	4b23      	ldr	r3, [pc, #140]	@ (8007850 <scalbn+0xa4>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	f7fa f897 	bl	80018f8 <__aeabi_dmul>
 80077ca:	4b22      	ldr	r3, [pc, #136]	@ (8007854 <scalbn+0xa8>)
 80077cc:	429c      	cmp	r4, r3
 80077ce:	da0c      	bge.n	80077ea <scalbn+0x3e>
 80077d0:	4a21      	ldr	r2, [pc, #132]	@ (8007858 <scalbn+0xac>)
 80077d2:	4b22      	ldr	r3, [pc, #136]	@ (800785c <scalbn+0xb0>)
 80077d4:	f7fa f890 	bl	80018f8 <__aeabi_dmul>
 80077d8:	e006      	b.n	80077e8 <scalbn+0x3c>
 80077da:	4a21      	ldr	r2, [pc, #132]	@ (8007860 <scalbn+0xb4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d108      	bne.n	80077f2 <scalbn+0x46>
 80077e0:	0002      	movs	r2, r0
 80077e2:	000b      	movs	r3, r1
 80077e4:	f7f9 f8e0 	bl	80009a8 <__aeabi_dadd>
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
 80077ea:	000d      	movs	r5, r1
 80077ec:	004b      	lsls	r3, r1, #1
 80077ee:	0d5b      	lsrs	r3, r3, #21
 80077f0:	3b36      	subs	r3, #54	@ 0x36
 80077f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007864 <scalbn+0xb8>)
 80077f4:	4294      	cmp	r4, r2
 80077f6:	dd0a      	ble.n	800780e <scalbn+0x62>
 80077f8:	4c1b      	ldr	r4, [pc, #108]	@ (8007868 <scalbn+0xbc>)
 80077fa:	4d1c      	ldr	r5, [pc, #112]	@ (800786c <scalbn+0xc0>)
 80077fc:	2900      	cmp	r1, #0
 80077fe:	da01      	bge.n	8007804 <scalbn+0x58>
 8007800:	4c19      	ldr	r4, [pc, #100]	@ (8007868 <scalbn+0xbc>)
 8007802:	4d1b      	ldr	r5, [pc, #108]	@ (8007870 <scalbn+0xc4>)
 8007804:	4a18      	ldr	r2, [pc, #96]	@ (8007868 <scalbn+0xbc>)
 8007806:	4b19      	ldr	r3, [pc, #100]	@ (800786c <scalbn+0xc0>)
 8007808:	0020      	movs	r0, r4
 800780a:	0029      	movs	r1, r5
 800780c:	e7e2      	b.n	80077d4 <scalbn+0x28>
 800780e:	18e2      	adds	r2, r4, r3
 8007810:	4b18      	ldr	r3, [pc, #96]	@ (8007874 <scalbn+0xc8>)
 8007812:	429a      	cmp	r2, r3
 8007814:	dcf0      	bgt.n	80077f8 <scalbn+0x4c>
 8007816:	2a00      	cmp	r2, #0
 8007818:	dd05      	ble.n	8007826 <scalbn+0x7a>
 800781a:	4b17      	ldr	r3, [pc, #92]	@ (8007878 <scalbn+0xcc>)
 800781c:	0512      	lsls	r2, r2, #20
 800781e:	402b      	ands	r3, r5
 8007820:	431a      	orrs	r2, r3
 8007822:	0011      	movs	r1, r2
 8007824:	e7e0      	b.n	80077e8 <scalbn+0x3c>
 8007826:	0013      	movs	r3, r2
 8007828:	3335      	adds	r3, #53	@ 0x35
 800782a:	da08      	bge.n	800783e <scalbn+0x92>
 800782c:	4c0a      	ldr	r4, [pc, #40]	@ (8007858 <scalbn+0xac>)
 800782e:	4d0b      	ldr	r5, [pc, #44]	@ (800785c <scalbn+0xb0>)
 8007830:	2900      	cmp	r1, #0
 8007832:	da01      	bge.n	8007838 <scalbn+0x8c>
 8007834:	4c08      	ldr	r4, [pc, #32]	@ (8007858 <scalbn+0xac>)
 8007836:	4d11      	ldr	r5, [pc, #68]	@ (800787c <scalbn+0xd0>)
 8007838:	4a07      	ldr	r2, [pc, #28]	@ (8007858 <scalbn+0xac>)
 800783a:	4b08      	ldr	r3, [pc, #32]	@ (800785c <scalbn+0xb0>)
 800783c:	e7e4      	b.n	8007808 <scalbn+0x5c>
 800783e:	4b0e      	ldr	r3, [pc, #56]	@ (8007878 <scalbn+0xcc>)
 8007840:	3236      	adds	r2, #54	@ 0x36
 8007842:	401d      	ands	r5, r3
 8007844:	0512      	lsls	r2, r2, #20
 8007846:	432a      	orrs	r2, r5
 8007848:	0011      	movs	r1, r2
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <scalbn+0xd4>)
 800784c:	2200      	movs	r2, #0
 800784e:	e7c1      	b.n	80077d4 <scalbn+0x28>
 8007850:	43500000 	.word	0x43500000
 8007854:	ffff3cb0 	.word	0xffff3cb0
 8007858:	c2f8f359 	.word	0xc2f8f359
 800785c:	01a56e1f 	.word	0x01a56e1f
 8007860:	000007ff 	.word	0x000007ff
 8007864:	0000c350 	.word	0x0000c350
 8007868:	8800759c 	.word	0x8800759c
 800786c:	7e37e43c 	.word	0x7e37e43c
 8007870:	fe37e43c 	.word	0xfe37e43c
 8007874:	000007fe 	.word	0x000007fe
 8007878:	800fffff 	.word	0x800fffff
 800787c:	81a56e1f 	.word	0x81a56e1f
 8007880:	3c900000 	.word	0x3c900000

08007884 <with_errno>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	000d      	movs	r5, r1
 8007888:	0016      	movs	r6, r2
 800788a:	0004      	movs	r4, r0
 800788c:	f7ff f9b4 	bl	8006bf8 <__errno>
 8007890:	0029      	movs	r1, r5
 8007892:	6006      	str	r6, [r0, #0]
 8007894:	0020      	movs	r0, r4
 8007896:	bd70      	pop	{r4, r5, r6, pc}

08007898 <xflow>:
 8007898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800789a:	0014      	movs	r4, r2
 800789c:	001d      	movs	r5, r3
 800789e:	2800      	cmp	r0, #0
 80078a0:	d002      	beq.n	80078a8 <xflow+0x10>
 80078a2:	2180      	movs	r1, #128	@ 0x80
 80078a4:	0609      	lsls	r1, r1, #24
 80078a6:	185b      	adds	r3, r3, r1
 80078a8:	9200      	str	r2, [sp, #0]
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	9a00      	ldr	r2, [sp, #0]
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	0020      	movs	r0, r4
 80078b2:	0029      	movs	r1, r5
 80078b4:	f7fa f820 	bl	80018f8 <__aeabi_dmul>
 80078b8:	2222      	movs	r2, #34	@ 0x22
 80078ba:	f7ff ffe3 	bl	8007884 <with_errno>
 80078be:	b003      	add	sp, #12
 80078c0:	bd30      	pop	{r4, r5, pc}

080078c2 <__math_uflow>:
 80078c2:	2380      	movs	r3, #128	@ 0x80
 80078c4:	b510      	push	{r4, lr}
 80078c6:	2200      	movs	r2, #0
 80078c8:	055b      	lsls	r3, r3, #21
 80078ca:	f7ff ffe5 	bl	8007898 <xflow>
 80078ce:	bd10      	pop	{r4, pc}

080078d0 <__math_oflow>:
 80078d0:	23e0      	movs	r3, #224	@ 0xe0
 80078d2:	b510      	push	{r4, lr}
 80078d4:	2200      	movs	r2, #0
 80078d6:	05db      	lsls	r3, r3, #23
 80078d8:	f7ff ffde 	bl	8007898 <xflow>
 80078dc:	bd10      	pop	{r4, pc}
	...

080078e0 <__ieee754_sqrt>:
 80078e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e2:	000a      	movs	r2, r1
 80078e4:	000d      	movs	r5, r1
 80078e6:	496d      	ldr	r1, [pc, #436]	@ (8007a9c <__ieee754_sqrt+0x1bc>)
 80078e8:	0004      	movs	r4, r0
 80078ea:	0003      	movs	r3, r0
 80078ec:	0008      	movs	r0, r1
 80078ee:	b087      	sub	sp, #28
 80078f0:	4028      	ands	r0, r5
 80078f2:	4288      	cmp	r0, r1
 80078f4:	d111      	bne.n	800791a <__ieee754_sqrt+0x3a>
 80078f6:	0022      	movs	r2, r4
 80078f8:	002b      	movs	r3, r5
 80078fa:	0020      	movs	r0, r4
 80078fc:	0029      	movs	r1, r5
 80078fe:	f7f9 fffb 	bl	80018f8 <__aeabi_dmul>
 8007902:	0002      	movs	r2, r0
 8007904:	000b      	movs	r3, r1
 8007906:	0020      	movs	r0, r4
 8007908:	0029      	movs	r1, r5
 800790a:	f7f9 f84d 	bl	80009a8 <__aeabi_dadd>
 800790e:	0004      	movs	r4, r0
 8007910:	000d      	movs	r5, r1
 8007912:	0020      	movs	r0, r4
 8007914:	0029      	movs	r1, r5
 8007916:	b007      	add	sp, #28
 8007918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800791a:	2d00      	cmp	r5, #0
 800791c:	dc11      	bgt.n	8007942 <__ieee754_sqrt+0x62>
 800791e:	0069      	lsls	r1, r5, #1
 8007920:	0849      	lsrs	r1, r1, #1
 8007922:	4321      	orrs	r1, r4
 8007924:	d0f5      	beq.n	8007912 <__ieee754_sqrt+0x32>
 8007926:	2000      	movs	r0, #0
 8007928:	4285      	cmp	r5, r0
 800792a:	d010      	beq.n	800794e <__ieee754_sqrt+0x6e>
 800792c:	0022      	movs	r2, r4
 800792e:	002b      	movs	r3, r5
 8007930:	0020      	movs	r0, r4
 8007932:	0029      	movs	r1, r5
 8007934:	f7fa faa8 	bl	8001e88 <__aeabi_dsub>
 8007938:	0002      	movs	r2, r0
 800793a:	000b      	movs	r3, r1
 800793c:	f7f9 fb98 	bl	8001070 <__aeabi_ddiv>
 8007940:	e7e5      	b.n	800790e <__ieee754_sqrt+0x2e>
 8007942:	1528      	asrs	r0, r5, #20
 8007944:	d115      	bne.n	8007972 <__ieee754_sqrt+0x92>
 8007946:	2480      	movs	r4, #128	@ 0x80
 8007948:	2100      	movs	r1, #0
 800794a:	0364      	lsls	r4, r4, #13
 800794c:	e007      	b.n	800795e <__ieee754_sqrt+0x7e>
 800794e:	0ada      	lsrs	r2, r3, #11
 8007950:	3815      	subs	r0, #21
 8007952:	055b      	lsls	r3, r3, #21
 8007954:	2a00      	cmp	r2, #0
 8007956:	d0fa      	beq.n	800794e <__ieee754_sqrt+0x6e>
 8007958:	e7f5      	b.n	8007946 <__ieee754_sqrt+0x66>
 800795a:	0052      	lsls	r2, r2, #1
 800795c:	3101      	adds	r1, #1
 800795e:	4222      	tst	r2, r4
 8007960:	d0fb      	beq.n	800795a <__ieee754_sqrt+0x7a>
 8007962:	1e4c      	subs	r4, r1, #1
 8007964:	1b00      	subs	r0, r0, r4
 8007966:	2420      	movs	r4, #32
 8007968:	001d      	movs	r5, r3
 800796a:	1a64      	subs	r4, r4, r1
 800796c:	40e5      	lsrs	r5, r4
 800796e:	408b      	lsls	r3, r1
 8007970:	432a      	orrs	r2, r5
 8007972:	494b      	ldr	r1, [pc, #300]	@ (8007aa0 <__ieee754_sqrt+0x1c0>)
 8007974:	0312      	lsls	r2, r2, #12
 8007976:	1844      	adds	r4, r0, r1
 8007978:	2180      	movs	r1, #128	@ 0x80
 800797a:	0b12      	lsrs	r2, r2, #12
 800797c:	0349      	lsls	r1, r1, #13
 800797e:	4311      	orrs	r1, r2
 8007980:	07c0      	lsls	r0, r0, #31
 8007982:	d403      	bmi.n	800798c <__ieee754_sqrt+0xac>
 8007984:	0fda      	lsrs	r2, r3, #31
 8007986:	0049      	lsls	r1, r1, #1
 8007988:	1851      	adds	r1, r2, r1
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	2500      	movs	r5, #0
 800798e:	1062      	asrs	r2, r4, #1
 8007990:	0049      	lsls	r1, r1, #1
 8007992:	2480      	movs	r4, #128	@ 0x80
 8007994:	9205      	str	r2, [sp, #20]
 8007996:	0fda      	lsrs	r2, r3, #31
 8007998:	1852      	adds	r2, r2, r1
 800799a:	2016      	movs	r0, #22
 800799c:	0029      	movs	r1, r5
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	03a4      	lsls	r4, r4, #14
 80079a2:	190e      	adds	r6, r1, r4
 80079a4:	4296      	cmp	r6, r2
 80079a6:	dc02      	bgt.n	80079ae <__ieee754_sqrt+0xce>
 80079a8:	1931      	adds	r1, r6, r4
 80079aa:	1b92      	subs	r2, r2, r6
 80079ac:	192d      	adds	r5, r5, r4
 80079ae:	0fde      	lsrs	r6, r3, #31
 80079b0:	0052      	lsls	r2, r2, #1
 80079b2:	3801      	subs	r0, #1
 80079b4:	1992      	adds	r2, r2, r6
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	0864      	lsrs	r4, r4, #1
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d1f1      	bne.n	80079a2 <__ieee754_sqrt+0xc2>
 80079be:	2620      	movs	r6, #32
 80079c0:	2780      	movs	r7, #128	@ 0x80
 80079c2:	0004      	movs	r4, r0
 80079c4:	9604      	str	r6, [sp, #16]
 80079c6:	063f      	lsls	r7, r7, #24
 80079c8:	19c6      	adds	r6, r0, r7
 80079ca:	46b4      	mov	ip, r6
 80079cc:	4291      	cmp	r1, r2
 80079ce:	db02      	blt.n	80079d6 <__ieee754_sqrt+0xf6>
 80079d0:	d114      	bne.n	80079fc <__ieee754_sqrt+0x11c>
 80079d2:	429e      	cmp	r6, r3
 80079d4:	d812      	bhi.n	80079fc <__ieee754_sqrt+0x11c>
 80079d6:	4660      	mov	r0, ip
 80079d8:	4666      	mov	r6, ip
 80079da:	19c0      	adds	r0, r0, r7
 80079dc:	9100      	str	r1, [sp, #0]
 80079de:	2e00      	cmp	r6, #0
 80079e0:	da03      	bge.n	80079ea <__ieee754_sqrt+0x10a>
 80079e2:	43c6      	mvns	r6, r0
 80079e4:	0ff6      	lsrs	r6, r6, #31
 80079e6:	198e      	adds	r6, r1, r6
 80079e8:	9600      	str	r6, [sp, #0]
 80079ea:	1a52      	subs	r2, r2, r1
 80079ec:	4563      	cmp	r3, ip
 80079ee:	4189      	sbcs	r1, r1
 80079f0:	4249      	negs	r1, r1
 80079f2:	1a52      	subs	r2, r2, r1
 80079f4:	4661      	mov	r1, ip
 80079f6:	1a5b      	subs	r3, r3, r1
 80079f8:	9900      	ldr	r1, [sp, #0]
 80079fa:	19e4      	adds	r4, r4, r7
 80079fc:	0fde      	lsrs	r6, r3, #31
 80079fe:	0052      	lsls	r2, r2, #1
 8007a00:	1992      	adds	r2, r2, r6
 8007a02:	9e04      	ldr	r6, [sp, #16]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	3e01      	subs	r6, #1
 8007a08:	087f      	lsrs	r7, r7, #1
 8007a0a:	9604      	str	r6, [sp, #16]
 8007a0c:	2e00      	cmp	r6, #0
 8007a0e:	d1db      	bne.n	80079c8 <__ieee754_sqrt+0xe8>
 8007a10:	431a      	orrs	r2, r3
 8007a12:	d01f      	beq.n	8007a54 <__ieee754_sqrt+0x174>
 8007a14:	4e23      	ldr	r6, [pc, #140]	@ (8007aa4 <__ieee754_sqrt+0x1c4>)
 8007a16:	4f24      	ldr	r7, [pc, #144]	@ (8007aa8 <__ieee754_sqrt+0x1c8>)
 8007a18:	6830      	ldr	r0, [r6, #0]
 8007a1a:	6871      	ldr	r1, [r6, #4]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	9200      	str	r2, [sp, #0]
 8007a22:	9301      	str	r3, [sp, #4]
 8007a24:	6832      	ldr	r2, [r6, #0]
 8007a26:	6873      	ldr	r3, [r6, #4]
 8007a28:	9202      	str	r2, [sp, #8]
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	9a00      	ldr	r2, [sp, #0]
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	f7fa fa2a 	bl	8001e88 <__aeabi_dsub>
 8007a34:	0002      	movs	r2, r0
 8007a36:	000b      	movs	r3, r1
 8007a38:	9802      	ldr	r0, [sp, #8]
 8007a3a:	9903      	ldr	r1, [sp, #12]
 8007a3c:	f7f8 fd00 	bl	8000440 <__aeabi_dcmple>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d007      	beq.n	8007a54 <__ieee754_sqrt+0x174>
 8007a44:	6830      	ldr	r0, [r6, #0]
 8007a46:	6871      	ldr	r1, [r6, #4]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	1c67      	adds	r7, r4, #1
 8007a4e:	d10f      	bne.n	8007a70 <__ieee754_sqrt+0x190>
 8007a50:	9c04      	ldr	r4, [sp, #16]
 8007a52:	3501      	adds	r5, #1
 8007a54:	4b15      	ldr	r3, [pc, #84]	@ (8007aac <__ieee754_sqrt+0x1cc>)
 8007a56:	106a      	asrs	r2, r5, #1
 8007a58:	18d2      	adds	r2, r2, r3
 8007a5a:	0863      	lsrs	r3, r4, #1
 8007a5c:	07ed      	lsls	r5, r5, #31
 8007a5e:	d502      	bpl.n	8007a66 <__ieee754_sqrt+0x186>
 8007a60:	2180      	movs	r1, #128	@ 0x80
 8007a62:	0609      	lsls	r1, r1, #24
 8007a64:	430b      	orrs	r3, r1
 8007a66:	9905      	ldr	r1, [sp, #20]
 8007a68:	001c      	movs	r4, r3
 8007a6a:	0509      	lsls	r1, r1, #20
 8007a6c:	188d      	adds	r5, r1, r2
 8007a6e:	e750      	b.n	8007912 <__ieee754_sqrt+0x32>
 8007a70:	f7f8 ff9a 	bl	80009a8 <__aeabi_dadd>
 8007a74:	6877      	ldr	r7, [r6, #4]
 8007a76:	6836      	ldr	r6, [r6, #0]
 8007a78:	0002      	movs	r2, r0
 8007a7a:	000b      	movs	r3, r1
 8007a7c:	0030      	movs	r0, r6
 8007a7e:	0039      	movs	r1, r7
 8007a80:	f7f8 fcd4 	bl	800042c <__aeabi_dcmplt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d004      	beq.n	8007a92 <__ieee754_sqrt+0x1b2>
 8007a88:	3402      	adds	r4, #2
 8007a8a:	4263      	negs	r3, r4
 8007a8c:	4163      	adcs	r3, r4
 8007a8e:	18ed      	adds	r5, r5, r3
 8007a90:	e7e0      	b.n	8007a54 <__ieee754_sqrt+0x174>
 8007a92:	2301      	movs	r3, #1
 8007a94:	3401      	adds	r4, #1
 8007a96:	439c      	bics	r4, r3
 8007a98:	e7dc      	b.n	8007a54 <__ieee754_sqrt+0x174>
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	7ff00000 	.word	0x7ff00000
 8007aa0:	fffffc01 	.word	0xfffffc01
 8007aa4:	20000068 	.word	0x20000068
 8007aa8:	20000060 	.word	0x20000060
 8007aac:	3fe00000 	.word	0x3fe00000

08007ab0 <_init>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	46c0      	nop			@ (mov r8, r8)
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr

08007abc <_fini>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr
