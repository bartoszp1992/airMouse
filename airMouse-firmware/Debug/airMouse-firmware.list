
airMouse-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003514  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080035d0  080035d0  000045d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003698  08003698  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003698  08003698  00004698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a0  080036a0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a0  080036a0  000046a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036a4  080036a4  000046a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  080036b4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080036b4  000051b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7e4  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002311  00000000  00000000  00011818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00013b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071a  00000000  00000000  00014480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018205  00000000  00000000  00014b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0c3  00000000  00000000  0002cd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096376  00000000  00000000  00039e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d01d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff0  00000000  00000000  000d021c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080035b8 	.word	0x080035b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080035b8 	.word	0x080035b8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	@ (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	@ (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	@ (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <HAL_Init+0x3c>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_Init+0x3c>)
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	0049      	lsls	r1, r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000646:	2003      	movs	r0, #3
 8000648:	f000 f810 	bl	800066c <HAL_InitTick>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d003      	beq.n	8000658 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e001      	b.n	800065c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f002 fd3a 	bl	80030d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40022000 	.word	0x40022000

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000674:	230f      	movs	r3, #15
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <HAL_InitTick+0x88>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d02b      	beq.n	80006dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <HAL_InitTick+0x8c>)
 8000686:	681c      	ldr	r4, [r3, #0]
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <HAL_InitTick+0x88>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	0019      	movs	r1, r3
 800068e:	23fa      	movs	r3, #250	@ 0xfa
 8000690:	0098      	lsls	r0, r3, #2
 8000692:	f7ff fd3f 	bl	8000114 <__udivsi3>
 8000696:	0003      	movs	r3, r0
 8000698:	0019      	movs	r1, r3
 800069a:	0020      	movs	r0, r4
 800069c:	f7ff fd3a 	bl	8000114 <__udivsi3>
 80006a0:	0003      	movs	r3, r0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f93d 	bl	8000922 <HAL_SYSTICK_Config>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d112      	bne.n	80006d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 f90c 	bl	80008d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <HAL_InitTick+0x90>)
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e00d      	b.n	80006e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e008      	b.n	80006e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d2:	230f      	movs	r3, #15
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e003      	b.n	80006e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	781b      	ldrb	r3, [r3, #0]
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b005      	add	sp, #20
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000000 	.word	0x20000000

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <HAL_IncTick+0x1c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	001a      	movs	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_IncTick+0x20>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	18d2      	adds	r2, r2, r3
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <HAL_IncTick+0x20>)
 8000712:	601a      	str	r2, [r3, #0]
}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	20000004 	.word	0x20000004
 8000720:	20000028 	.word	0x20000028

08000724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;
 8000728:	4b02      	ldr	r3, [pc, #8]	@ (8000734 <HAL_GetTick+0x10>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	20000028 	.word	0x20000028

08000738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff fff0 	bl	8000724 <HAL_GetTick>
 8000744:	0003      	movs	r3, r0
 8000746:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	d005      	beq.n	800075e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_Delay+0x44>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	001a      	movs	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	189b      	adds	r3, r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	f7ff ffe0 	bl	8000724 <HAL_GetTick>
 8000764:	0002      	movs	r2, r0
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8f7      	bhi.n	8000760 <HAL_Delay+0x28>
  {
  }
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b004      	add	sp, #16
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000004 	.word	0x20000004

08000780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b7f      	cmp	r3, #127	@ 0x7f
 8000792:	d809      	bhi.n	80007a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	001a      	movs	r2, r3
 800079a:	231f      	movs	r3, #31
 800079c:	401a      	ands	r2, r3
 800079e:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <__NVIC_EnableIRQ+0x30>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	4091      	lsls	r1, r2
 80007a4:	000a      	movs	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	0002      	movs	r2, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007c8:	d828      	bhi.n	800081c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000888 <__NVIC_SetPriority+0xd4>)
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	33c0      	adds	r3, #192	@ 0xc0
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	589b      	ldr	r3, [r3, r2]
 80007da:	1dfa      	adds	r2, r7, #7
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	0011      	movs	r1, r2
 80007e0:	2203      	movs	r2, #3
 80007e2:	400a      	ands	r2, r1
 80007e4:	00d2      	lsls	r2, r2, #3
 80007e6:	21ff      	movs	r1, #255	@ 0xff
 80007e8:	4091      	lsls	r1, r2
 80007ea:	000a      	movs	r2, r1
 80007ec:	43d2      	mvns	r2, r2
 80007ee:	401a      	ands	r2, r3
 80007f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	019b      	lsls	r3, r3, #6
 80007f6:	22ff      	movs	r2, #255	@ 0xff
 80007f8:	401a      	ands	r2, r3
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	0018      	movs	r0, r3
 8000800:	2303      	movs	r3, #3
 8000802:	4003      	ands	r3, r0
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000808:	481f      	ldr	r0, [pc, #124]	@ (8000888 <__NVIC_SetPriority+0xd4>)
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b25b      	sxtb	r3, r3
 8000810:	089b      	lsrs	r3, r3, #2
 8000812:	430a      	orrs	r2, r1
 8000814:	33c0      	adds	r3, #192	@ 0xc0
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800081a:	e031      	b.n	8000880 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800081c:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <__NVIC_SetPriority+0xd8>)
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	0019      	movs	r1, r3
 8000824:	230f      	movs	r3, #15
 8000826:	400b      	ands	r3, r1
 8000828:	3b08      	subs	r3, #8
 800082a:	089b      	lsrs	r3, r3, #2
 800082c:	3306      	adds	r3, #6
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	18d3      	adds	r3, r2, r3
 8000832:	3304      	adds	r3, #4
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1dfa      	adds	r2, r7, #7
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	0011      	movs	r1, r2
 800083c:	2203      	movs	r2, #3
 800083e:	400a      	ands	r2, r1
 8000840:	00d2      	lsls	r2, r2, #3
 8000842:	21ff      	movs	r1, #255	@ 0xff
 8000844:	4091      	lsls	r1, r2
 8000846:	000a      	movs	r2, r1
 8000848:	43d2      	mvns	r2, r2
 800084a:	401a      	ands	r2, r3
 800084c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	019b      	lsls	r3, r3, #6
 8000852:	22ff      	movs	r2, #255	@ 0xff
 8000854:	401a      	ands	r2, r3
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	0018      	movs	r0, r3
 800085c:	2303      	movs	r3, #3
 800085e:	4003      	ands	r3, r0
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000864:	4809      	ldr	r0, [pc, #36]	@ (800088c <__NVIC_SetPriority+0xd8>)
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	001c      	movs	r4, r3
 800086c:	230f      	movs	r3, #15
 800086e:	4023      	ands	r3, r4
 8000870:	3b08      	subs	r3, #8
 8000872:	089b      	lsrs	r3, r3, #2
 8000874:	430a      	orrs	r2, r1
 8000876:	3306      	adds	r3, #6
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	18c3      	adds	r3, r0, r3
 800087c:	3304      	adds	r3, #4
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b003      	add	sp, #12
 8000886:	bd90      	pop	{r4, r7, pc}
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	045b      	lsls	r3, r3, #17
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d301      	bcc.n	80008a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a4:	2301      	movs	r3, #1
 80008a6:	e010      	b.n	80008ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <SysTick_Config+0x44>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	3a01      	subs	r2, #1
 80008ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b0:	2301      	movs	r3, #1
 80008b2:	425b      	negs	r3, r3
 80008b4:	2103      	movs	r1, #3
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff ff7c 	bl	80007b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <SysTick_Config+0x44>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <SysTick_Config+0x44>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	0018      	movs	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	e000e010 	.word	0xe000e010

080008d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	210f      	movs	r1, #15
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	1c02      	adds	r2, r0, #0
 80008e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ff5d 	bl	80007b4 <__NVIC_SetPriority>
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b004      	add	sp, #16
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	0002      	movs	r2, r0
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b25b      	sxtb	r3, r3
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff ff33 	bl	8000780 <__NVIC_EnableIRQ>
}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff ffaf 	bl	8000890 <SysTick_Config>
 8000932:	0003      	movs	r3, r0
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}

0800093c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e077      	b.n	8000a3e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a3d      	ldr	r2, [pc, #244]	@ (8000a48 <HAL_DMA_Init+0x10c>)
 8000954:	4694      	mov	ip, r2
 8000956:	4463      	add	r3, ip
 8000958:	2114      	movs	r1, #20
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fbda 	bl	8000114 <__udivsi3>
 8000960:	0003      	movs	r3, r0
 8000962:	009a      	lsls	r2, r3, #2
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2225      	movs	r2, #37	@ 0x25
 800096c:	2102      	movs	r1, #2
 800096e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4934      	ldr	r1, [pc, #208]	@ (8000a4c <HAL_DMA_Init+0x110>)
 800097c:	400a      	ands	r2, r1
 800097e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6819      	ldr	r1, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	431a      	orrs	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	431a      	orrs	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a1b      	ldr	r3, [r3, #32]
 80009ac:	431a      	orrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 f8fb 	bl	8000bb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	01db      	lsls	r3, r3, #7
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d102      	bne.n	80009d0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d8:	213f      	movs	r1, #63	@ 0x3f
 80009da:	400a      	ands	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80009e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d011      	beq.n	8000a14 <HAL_DMA_Init+0xd8>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d80d      	bhi.n	8000a14 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f906 	bl	8000c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	e008      	b.n	8000a26 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2225      	movs	r2, #37	@ 0x25
 8000a30:	2101      	movs	r1, #1
 8000a32:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2224      	movs	r2, #36	@ 0x24
 8000a38:	2100      	movs	r1, #0
 8000a3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b002      	add	sp, #8
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	bffdfff8 	.word	0xbffdfff8
 8000a4c:	ffff800f 	.word	0xffff800f

08000a50 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000a58:	4b55      	ldr	r3, [pc, #340]	@ (8000bb0 <HAL_DMA_IRQHandler+0x160>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	221c      	movs	r2, #28
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2204      	movs	r2, #4
 8000a70:	409a      	lsls	r2, r3
 8000a72:	0013      	movs	r3, r2
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	4013      	ands	r3, r2
 8000a78:	d027      	beq.n	8000aca <HAL_DMA_IRQHandler+0x7a>
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d023      	beq.n	8000aca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2220      	movs	r2, #32
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	d107      	bne.n	8000a9e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2104      	movs	r1, #4
 8000a9a:	438a      	bics	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000a9e:	4b44      	ldr	r3, [pc, #272]	@ (8000bb0 <HAL_DMA_IRQHandler+0x160>)
 8000aa0:	6859      	ldr	r1, [r3, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	221c      	movs	r2, #28
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	2204      	movs	r2, #4
 8000aac:	409a      	lsls	r2, r3
 8000aae:	4b40      	ldr	r3, [pc, #256]	@ (8000bb0 <HAL_DMA_IRQHandler+0x160>)
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d100      	bne.n	8000abe <HAL_DMA_IRQHandler+0x6e>
 8000abc:	e073      	b.n	8000ba6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000ac8:	e06d      	b.n	8000ba6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	221c      	movs	r2, #28
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4013      	ands	r3, r2
 8000adc:	d02e      	beq.n	8000b3c <HAL_DMA_IRQHandler+0xec>
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	d02a      	beq.n	8000b3c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2220      	movs	r2, #32
 8000aee:	4013      	ands	r3, r2
 8000af0:	d10b      	bne.n	8000b0a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	210a      	movs	r1, #10
 8000afe:	438a      	bics	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2225      	movs	r2, #37	@ 0x25
 8000b06:	2101      	movs	r1, #1
 8000b08:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000b0a:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <HAL_DMA_IRQHandler+0x160>)
 8000b0c:	6859      	ldr	r1, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	221c      	movs	r2, #28
 8000b14:	4013      	ands	r3, r2
 8000b16:	2202      	movs	r2, #2
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	4b25      	ldr	r3, [pc, #148]	@ (8000bb0 <HAL_DMA_IRQHandler+0x160>)
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2224      	movs	r2, #36	@ 0x24
 8000b24:	2100      	movs	r1, #0
 8000b26:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d03a      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	0010      	movs	r0, r2
 8000b38:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000b3a:	e034      	b.n	8000ba6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	221c      	movs	r2, #28
 8000b42:	4013      	ands	r3, r2
 8000b44:	2208      	movs	r2, #8
 8000b46:	409a      	lsls	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d02b      	beq.n	8000ba8 <HAL_DMA_IRQHandler+0x158>
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2208      	movs	r2, #8
 8000b54:	4013      	ands	r3, r2
 8000b56:	d027      	beq.n	8000ba8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	210e      	movs	r1, #14
 8000b64:	438a      	bics	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_DMA_IRQHandler+0x160>)
 8000b6a:	6859      	ldr	r1, [r3, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	221c      	movs	r2, #28
 8000b72:	4013      	ands	r3, r2
 8000b74:	2201      	movs	r2, #1
 8000b76:	409a      	lsls	r2, r3
 8000b78:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_DMA_IRQHandler+0x160>)
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2225      	movs	r2, #37	@ 0x25
 8000b88:	2101      	movs	r1, #1
 8000b8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2224      	movs	r2, #36	@ 0x24
 8000b90:	2100      	movs	r1, #0
 8000b92:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	0010      	movs	r0, r2
 8000ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	46c0      	nop			@ (mov r8, r8)
}
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b004      	add	sp, #16
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	4463      	add	r3, ip
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	001a      	movs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	23ff      	movs	r3, #255	@ 0xff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	3b08      	subs	r3, #8
 8000bdc:	2114      	movs	r1, #20
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fa98 	bl	8000114 <__udivsi3>
 8000be4:	0003      	movs	r3, r0
 8000be6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a07      	ldr	r2, [pc, #28]	@ (8000c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000bec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	221f      	movs	r2, #31
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b004      	add	sp, #16
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	10008200 	.word	0x10008200
 8000c08:	40020880 	.word	0x40020880

08000c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	223f      	movs	r2, #63	@ 0x3f
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000c22:	4694      	mov	ip, r2
 8000c24:	4463      	add	r3, ip
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	001a      	movs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000c32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b004      	add	sp, #16
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	1000823f 	.word	0x1000823f
 8000c50:	40020940 	.word	0x40020940

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	e147      	b.n	8000ef4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d100      	bne.n	8000c7c <HAL_GPIO_Init+0x28>
 8000c7a:	e138      	b.n	8000eee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2203      	movs	r2, #3
 8000c82:	4013      	ands	r3, r2
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d005      	beq.n	8000c94 <HAL_GPIO_Init+0x40>
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d130      	bne.n	8000cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	0013      	movs	r3, r2
 8000ca4:	43da      	mvns	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cca:	2201      	movs	r2, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d017      	beq.n	8000d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d123      	bne.n	8000d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	58d3      	ldr	r3, [r2, r3]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2207      	movs	r2, #7
 8000d50:	4013      	ands	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2107      	movs	r1, #7
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	08da      	lsrs	r2, r3, #3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	6939      	ldr	r1, [r7, #16]
 8000d84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	401a      	ands	r2, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	23c0      	movs	r3, #192	@ 0xc0
 8000dc0:	029b      	lsls	r3, r3, #10
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d100      	bne.n	8000dc8 <HAL_GPIO_Init+0x174>
 8000dc6:	e092      	b.n	8000eee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000dc8:	4a50      	ldr	r2, [pc, #320]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3318      	adds	r3, #24
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	589b      	ldr	r3, [r3, r2]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2203      	movs	r2, #3
 8000dda:	4013      	ands	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	220f      	movs	r2, #15
 8000de0:	409a      	lsls	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	43da      	mvns	r2, r3
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	23a0      	movs	r3, #160	@ 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0x1ca>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a45      	ldr	r2, [pc, #276]	@ (8000f10 <HAL_GPIO_Init+0x2bc>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00d      	beq.n	8000e1a <HAL_GPIO_Init+0x1c6>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a44      	ldr	r2, [pc, #272]	@ (8000f14 <HAL_GPIO_Init+0x2c0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d007      	beq.n	8000e16 <HAL_GPIO_Init+0x1c2>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a43      	ldr	r2, [pc, #268]	@ (8000f18 <HAL_GPIO_Init+0x2c4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_GPIO_Init+0x1be>
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e006      	b.n	8000e20 <HAL_GPIO_Init+0x1cc>
 8000e12:	2305      	movs	r3, #5
 8000e14:	e004      	b.n	8000e20 <HAL_GPIO_Init+0x1cc>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e002      	b.n	8000e20 <HAL_GPIO_Init+0x1cc>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x1cc>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	2103      	movs	r1, #3
 8000e24:	400a      	ands	r2, r1
 8000e26:	00d2      	lsls	r2, r2, #3
 8000e28:	4093      	lsls	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e30:	4936      	ldr	r1, [pc, #216]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3318      	adds	r3, #24
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e3e:	4b33      	ldr	r3, [pc, #204]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	035b      	lsls	r3, r3, #13
 8000e56:	4013      	ands	r3, r2
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e62:	4b2a      	ldr	r3, [pc, #168]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e68:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43da      	mvns	r2, r3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	039b      	lsls	r3, r3, #14
 8000e80:	4013      	ands	r3, r2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e92:	4a1e      	ldr	r2, [pc, #120]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000e94:	2384      	movs	r3, #132	@ 0x84
 8000e96:	58d3      	ldr	r3, [r2, r3]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	029b      	lsls	r3, r3, #10
 8000eac:	4013      	ands	r3, r2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eb8:	4914      	ldr	r1, [pc, #80]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000eba:	2284      	movs	r2, #132	@ 0x84
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ec0:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000ec2:	2380      	movs	r3, #128	@ 0x80
 8000ec4:	58d3      	ldr	r3, [r2, r3]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	2380      	movs	r3, #128	@ 0x80
 8000ed8:	025b      	lsls	r3, r3, #9
 8000eda:	4013      	ands	r3, r2
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ee6:	4909      	ldr	r1, [pc, #36]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	40da      	lsrs	r2, r3
 8000efc:	1e13      	subs	r3, r2, #0
 8000efe:	d000      	beq.n	8000f02 <HAL_GPIO_Init+0x2ae>
 8000f00:	e6b0      	b.n	8000c64 <HAL_GPIO_Init+0x10>
  }
}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	46c0      	nop			@ (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b006      	add	sp, #24
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40021800 	.word	0x40021800
 8000f10:	50000400 	.word	0x50000400
 8000f14:	50000800 	.word	0x50000800
 8000f18:	50000c00 	.word	0x50000c00

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	0008      	movs	r0, r1
 8000f26:	0011      	movs	r1, r2
 8000f28:	1cbb      	adds	r3, r7, #2
 8000f2a:	1c02      	adds	r2, r0, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	1c7b      	adds	r3, r7, #1
 8000f30:	1c0a      	adds	r2, r1, #0
 8000f32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f34:	1c7b      	adds	r3, r7, #1
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3c:	1cbb      	adds	r3, r7, #2
 8000f3e:	881a      	ldrh	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f44:	e003      	b.n	8000f4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f46:	1cbb      	adds	r3, r7, #2
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a19      	ldr	r2, [pc, #100]	@ (8000fcc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	0019      	movs	r1, r3
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	2380      	movs	r3, #128	@ 0x80
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d11f      	bne.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	0013      	movs	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	189b      	adds	r3, r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4912      	ldr	r1, [pc, #72]	@ (8000fd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff f8c2 	bl	8000114 <__udivsi3>
 8000f90:	0003      	movs	r3, r0
 8000f92:	3301      	adds	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f96:	e008      	b.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	e001      	b.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e009      	b.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	2380      	movs	r3, #128	@ 0x80
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d0ed      	beq.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b004      	add	sp, #16
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	fffff9ff 	.word	0xfffff9ff
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	000f4240 	.word	0x000f4240

08000fd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <LL_RCC_GetAPB1Prescaler+0x14>)
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	23e0      	movs	r3, #224	@ 0xe0
 8000fe2:	01db      	lsls	r3, r3, #7
 8000fe4:	4013      	ands	r3, r2
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e2fe      	b.n	8001600 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	4013      	ands	r3, r2
 800100a:	d100      	bne.n	800100e <HAL_RCC_OscConfig+0x1e>
 800100c:	e07c      	b.n	8001108 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100e:	4bc3      	ldr	r3, [pc, #780]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2238      	movs	r2, #56	@ 0x38
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001018:	4bc0      	ldr	r3, [pc, #768]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2203      	movs	r2, #3
 800101e:	4013      	ands	r3, r2
 8001020:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	2b10      	cmp	r3, #16
 8001026:	d102      	bne.n	800102e <HAL_RCC_OscConfig+0x3e>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d002      	beq.n	8001034 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	2b08      	cmp	r3, #8
 8001032:	d10b      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	4bb9      	ldr	r3, [pc, #740]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	4013      	ands	r3, r2
 800103e:	d062      	beq.n	8001106 <HAL_RCC_OscConfig+0x116>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d15e      	bne.n	8001106 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e2d9      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	025b      	lsls	r3, r3, #9
 8001054:	429a      	cmp	r2, r3
 8001056:	d107      	bne.n	8001068 <HAL_RCC_OscConfig+0x78>
 8001058:	4bb0      	ldr	r3, [pc, #704]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4baf      	ldr	r3, [pc, #700]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 800105e:	2180      	movs	r1, #128	@ 0x80
 8001060:	0249      	lsls	r1, r1, #9
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e020      	b.n	80010aa <HAL_RCC_OscConfig+0xba>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	23a0      	movs	r3, #160	@ 0xa0
 800106e:	02db      	lsls	r3, r3, #11
 8001070:	429a      	cmp	r2, r3
 8001072:	d10e      	bne.n	8001092 <HAL_RCC_OscConfig+0xa2>
 8001074:	4ba9      	ldr	r3, [pc, #676]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4ba8      	ldr	r3, [pc, #672]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 800107a:	2180      	movs	r1, #128	@ 0x80
 800107c:	02c9      	lsls	r1, r1, #11
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	4ba6      	ldr	r3, [pc, #664]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4ba5      	ldr	r3, [pc, #660]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	0249      	lsls	r1, r1, #9
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e00b      	b.n	80010aa <HAL_RCC_OscConfig+0xba>
 8001092:	4ba2      	ldr	r3, [pc, #648]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4ba1      	ldr	r3, [pc, #644]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001098:	49a1      	ldr	r1, [pc, #644]	@ (8001320 <HAL_RCC_OscConfig+0x330>)
 800109a:	400a      	ands	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	4b9f      	ldr	r3, [pc, #636]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b9e      	ldr	r3, [pc, #632]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80010a4:	499f      	ldr	r1, [pc, #636]	@ (8001324 <HAL_RCC_OscConfig+0x334>)
 80010a6:	400a      	ands	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d014      	beq.n	80010dc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fb37 	bl	8000724 <HAL_GetTick>
 80010b6:	0003      	movs	r3, r0
 80010b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fb32 	bl	8000724 <HAL_GetTick>
 80010c0:	0002      	movs	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	@ 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e298      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ce:	4b93      	ldr	r3, [pc, #588]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	029b      	lsls	r3, r3, #10
 80010d6:	4013      	ands	r3, r2
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0xcc>
 80010da:	e015      	b.n	8001108 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fb22 	bl	8000724 <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e6:	f7ff fb1d 	bl	8000724 <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b64      	cmp	r3, #100	@ 0x64
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e283      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010f8:	4b88      	ldr	r3, [pc, #544]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	029b      	lsls	r3, r3, #10
 8001100:	4013      	ands	r3, r2
 8001102:	d1f0      	bne.n	80010e6 <HAL_RCC_OscConfig+0xf6>
 8001104:	e000      	b.n	8001108 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001106:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2202      	movs	r2, #2
 800110e:	4013      	ands	r3, r2
 8001110:	d100      	bne.n	8001114 <HAL_RCC_OscConfig+0x124>
 8001112:	e099      	b.n	8001248 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001114:	4b81      	ldr	r3, [pc, #516]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2238      	movs	r2, #56	@ 0x38
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800111e:	4b7f      	ldr	r3, [pc, #508]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2203      	movs	r2, #3
 8001124:	4013      	ands	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2b10      	cmp	r3, #16
 800112c:	d102      	bne.n	8001134 <HAL_RCC_OscConfig+0x144>
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d002      	beq.n	800113a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d135      	bne.n	80011a6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800113a:	4b78      	ldr	r3, [pc, #480]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4013      	ands	r3, r2
 8001144:	d005      	beq.n	8001152 <HAL_RCC_OscConfig+0x162>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e256      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001152:	4b72      	ldr	r3, [pc, #456]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4a74      	ldr	r2, [pc, #464]	@ (8001328 <HAL_RCC_OscConfig+0x338>)
 8001158:	4013      	ands	r3, r2
 800115a:	0019      	movs	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	021a      	lsls	r2, r3, #8
 8001162:	4b6e      	ldr	r3, [pc, #440]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001164:	430a      	orrs	r2, r1
 8001166:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d112      	bne.n	8001194 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800116e:	4b6b      	ldr	r3, [pc, #428]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6e      	ldr	r2, [pc, #440]	@ (800132c <HAL_RCC_OscConfig+0x33c>)
 8001174:	4013      	ands	r3, r2
 8001176:	0019      	movs	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	4b67      	ldr	r3, [pc, #412]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001182:	4b66      	ldr	r3, [pc, #408]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0adb      	lsrs	r3, r3, #11
 8001188:	2207      	movs	r2, #7
 800118a:	4013      	ands	r3, r2
 800118c:	4a68      	ldr	r2, [pc, #416]	@ (8001330 <HAL_RCC_OscConfig+0x340>)
 800118e:	40da      	lsrs	r2, r3
 8001190:	4b68      	ldr	r3, [pc, #416]	@ (8001334 <HAL_RCC_OscConfig+0x344>)
 8001192:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001194:	4b68      	ldr	r3, [pc, #416]	@ (8001338 <HAL_RCC_OscConfig+0x348>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff fa67 	bl	800066c <HAL_InitTick>
 800119e:	1e03      	subs	r3, r0, #0
 80011a0:	d051      	beq.n	8001246 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e22c      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d030      	beq.n	8001210 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011ae:	4b5b      	ldr	r3, [pc, #364]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a5e      	ldr	r2, [pc, #376]	@ (800132c <HAL_RCC_OscConfig+0x33c>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	0019      	movs	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	4b57      	ldr	r3, [pc, #348]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80011c2:	4b56      	ldr	r3, [pc, #344]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b55      	ldr	r3, [pc, #340]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80011c8:	2180      	movs	r1, #128	@ 0x80
 80011ca:	0049      	lsls	r1, r1, #1
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff faa8 	bl	8000724 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff faa3 	bl	8000724 <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e209      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ec:	4b4b      	ldr	r3, [pc, #300]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4013      	ands	r3, r2
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b48      	ldr	r3, [pc, #288]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001328 <HAL_RCC_OscConfig+0x338>)
 80011fe:	4013      	ands	r3, r2
 8001200:	0019      	movs	r1, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	021a      	lsls	r2, r3, #8
 8001208:	4b44      	ldr	r3, [pc, #272]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 800120a:	430a      	orrs	r2, r1
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	e01b      	b.n	8001248 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001210:	4b42      	ldr	r3, [pc, #264]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b41      	ldr	r3, [pc, #260]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001216:	4949      	ldr	r1, [pc, #292]	@ (800133c <HAL_RCC_OscConfig+0x34c>)
 8001218:	400a      	ands	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fa82 	bl	8000724 <HAL_GetTick>
 8001220:	0003      	movs	r3, r0
 8001222:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fa7d 	bl	8000724 <HAL_GetTick>
 800122a:	0002      	movs	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e1e3      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001238:	4b38      	ldr	r3, [pc, #224]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4013      	ands	r3, r2
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x236>
 8001244:	e000      	b.n	8001248 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001246:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2208      	movs	r2, #8
 800124e:	4013      	ands	r3, r2
 8001250:	d047      	beq.n	80012e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001252:	4b32      	ldr	r3, [pc, #200]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2238      	movs	r2, #56	@ 0x38
 8001258:	4013      	ands	r3, r2
 800125a:	2b18      	cmp	r3, #24
 800125c:	d10a      	bne.n	8001274 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800125e:	4b2f      	ldr	r3, [pc, #188]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001262:	2202      	movs	r2, #2
 8001264:	4013      	ands	r3, r2
 8001266:	d03c      	beq.n	80012e2 <HAL_RCC_OscConfig+0x2f2>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d138      	bne.n	80012e2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e1c5      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d019      	beq.n	80012b0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800127c:	4b27      	ldr	r3, [pc, #156]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 800127e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001280:	4b26      	ldr	r3, [pc, #152]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001282:	2101      	movs	r1, #1
 8001284:	430a      	orrs	r2, r1
 8001286:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	f7ff fa4c 	bl	8000724 <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff fa47 	bl	8000724 <HAL_GetTick>
 8001296:	0002      	movs	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e1ad      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80012a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a8:	2202      	movs	r2, #2
 80012aa:	4013      	ands	r3, r2
 80012ac:	d0f1      	beq.n	8001292 <HAL_RCC_OscConfig+0x2a2>
 80012ae:	e018      	b.n	80012e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80012b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	438a      	bics	r2, r1
 80012ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fa32 	bl	8000724 <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff fa2d 	bl	8000724 <HAL_GetTick>
 80012ca:	0002      	movs	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e193      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012dc:	2202      	movs	r2, #2
 80012de:	4013      	ands	r3, r2
 80012e0:	d1f1      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2204      	movs	r2, #4
 80012e8:	4013      	ands	r3, r2
 80012ea:	d100      	bne.n	80012ee <HAL_RCC_OscConfig+0x2fe>
 80012ec:	e0c6      	b.n	800147c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ee:	231f      	movs	r3, #31
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2238      	movs	r2, #56	@ 0x38
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b20      	cmp	r3, #32
 8001300:	d11e      	bne.n	8001340 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_RCC_OscConfig+0x32c>)
 8001304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001306:	2202      	movs	r2, #2
 8001308:	4013      	ands	r3, r2
 800130a:	d100      	bne.n	800130e <HAL_RCC_OscConfig+0x31e>
 800130c:	e0b6      	b.n	800147c <HAL_RCC_OscConfig+0x48c>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d000      	beq.n	8001318 <HAL_RCC_OscConfig+0x328>
 8001316:	e0b1      	b.n	800147c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e171      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
 800131c:	40021000 	.word	0x40021000
 8001320:	fffeffff 	.word	0xfffeffff
 8001324:	fffbffff 	.word	0xfffbffff
 8001328:	ffff80ff 	.word	0xffff80ff
 800132c:	ffffc7ff 	.word	0xffffc7ff
 8001330:	00f42400 	.word	0x00f42400
 8001334:	20000008 	.word	0x20000008
 8001338:	20000000 	.word	0x20000000
 800133c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001340:	4bb1      	ldr	r3, [pc, #708]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	055b      	lsls	r3, r3, #21
 8001348:	4013      	ands	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x360>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x362>
 8001350:	2300      	movs	r3, #0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d011      	beq.n	800137a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4bac      	ldr	r3, [pc, #688]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800135a:	4bab      	ldr	r3, [pc, #684]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 800135c:	2180      	movs	r1, #128	@ 0x80
 800135e:	0549      	lsls	r1, r1, #21
 8001360:	430a      	orrs	r2, r1
 8001362:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001364:	4ba8      	ldr	r3, [pc, #672]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	055b      	lsls	r3, r3, #21
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001372:	231f      	movs	r3, #31
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800137a:	4ba4      	ldr	r3, [pc, #656]	@ (800160c <HAL_RCC_OscConfig+0x61c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	2380      	movs	r3, #128	@ 0x80
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4013      	ands	r3, r2
 8001384:	d11a      	bne.n	80013bc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001386:	4ba1      	ldr	r3, [pc, #644]	@ (800160c <HAL_RCC_OscConfig+0x61c>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4ba0      	ldr	r3, [pc, #640]	@ (800160c <HAL_RCC_OscConfig+0x61c>)
 800138c:	2180      	movs	r1, #128	@ 0x80
 800138e:	0049      	lsls	r1, r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001394:	f7ff f9c6 	bl	8000724 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139e:	f7ff f9c1 	bl	8000724 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e127      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b0:	4b96      	ldr	r3, [pc, #600]	@ (800160c <HAL_RCC_OscConfig+0x61c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x3e2>
 80013c4:	4b90      	ldr	r3, [pc, #576]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80013c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x41c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x404>
 80013da:	4b8b      	ldr	r3, [pc, #556]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80013dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013de:	4b8a      	ldr	r3, [pc, #552]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80013e0:	2104      	movs	r1, #4
 80013e2:	430a      	orrs	r2, r1
 80013e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013e6:	4b88      	ldr	r3, [pc, #544]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80013e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013ea:	4b87      	ldr	r3, [pc, #540]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0x41c>
 80013f4:	4b84      	ldr	r3, [pc, #528]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80013f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013f8:	4b83      	ldr	r3, [pc, #524]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80013fa:	2101      	movs	r1, #1
 80013fc:	438a      	bics	r2, r1
 80013fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001400:	4b81      	ldr	r3, [pc, #516]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001402:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001404:	4b80      	ldr	r3, [pc, #512]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001406:	2104      	movs	r1, #4
 8001408:	438a      	bics	r2, r1
 800140a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d014      	beq.n	800143e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff f986 	bl	8000724 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800141c:	e009      	b.n	8001432 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff f981 	bl	8000724 <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	4a79      	ldr	r2, [pc, #484]	@ (8001610 <HAL_RCC_OscConfig+0x620>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e0e6      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001432:	4b75      	ldr	r3, [pc, #468]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001436:	2202      	movs	r2, #2
 8001438:	4013      	ands	r3, r2
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x42e>
 800143c:	e013      	b.n	8001466 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff f971 	bl	8000724 <HAL_GetTick>
 8001442:	0003      	movs	r3, r0
 8001444:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001446:	e009      	b.n	800145c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff f96c 	bl	8000724 <HAL_GetTick>
 800144c:	0002      	movs	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	4a6f      	ldr	r2, [pc, #444]	@ (8001610 <HAL_RCC_OscConfig+0x620>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e0d1      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800145c:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 800145e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001460:	2202      	movs	r2, #2
 8001462:	4013      	ands	r3, r2
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001466:	231f      	movs	r3, #31
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001470:	4b65      	ldr	r3, [pc, #404]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001474:	4b64      	ldr	r3, [pc, #400]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001476:	4967      	ldr	r1, [pc, #412]	@ (8001614 <HAL_RCC_OscConfig+0x624>)
 8001478:	400a      	ands	r2, r1
 800147a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d100      	bne.n	8001486 <HAL_RCC_OscConfig+0x496>
 8001484:	e0bb      	b.n	80015fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001486:	4b60      	ldr	r3, [pc, #384]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2238      	movs	r2, #56	@ 0x38
 800148c:	4013      	ands	r3, r2
 800148e:	2b10      	cmp	r3, #16
 8001490:	d100      	bne.n	8001494 <HAL_RCC_OscConfig+0x4a4>
 8001492:	e07b      	b.n	800158c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d156      	bne.n	800154a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b5a      	ldr	r3, [pc, #360]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b59      	ldr	r3, [pc, #356]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80014a2:	495d      	ldr	r1, [pc, #372]	@ (8001618 <HAL_RCC_OscConfig+0x628>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff f93c 	bl	8000724 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff f937 	bl	8000724 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e09d      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c4:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	049b      	lsls	r3, r3, #18
 80014cc:	4013      	ands	r3, r2
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a51      	ldr	r2, [pc, #324]	@ (800161c <HAL_RCC_OscConfig+0x62c>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014fc:	431a      	orrs	r2, r3
 80014fe:	4b42      	ldr	r3, [pc, #264]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001500:	430a      	orrs	r2, r1
 8001502:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b40      	ldr	r3, [pc, #256]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 800150a:	2180      	movs	r1, #128	@ 0x80
 800150c:	0449      	lsls	r1, r1, #17
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001512:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	4b3c      	ldr	r3, [pc, #240]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	0549      	lsls	r1, r1, #21
 800151c:	430a      	orrs	r2, r1
 800151e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff f900 	bl	8000724 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff f8fb 	bl	8000724 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e061      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153c:	4b32      	ldr	r3, [pc, #200]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	049b      	lsls	r3, r3, #18
 8001544:	4013      	ands	r3, r2
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x53a>
 8001548:	e059      	b.n	80015fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154a:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b2e      	ldr	r3, [pc, #184]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001550:	4931      	ldr	r1, [pc, #196]	@ (8001618 <HAL_RCC_OscConfig+0x628>)
 8001552:	400a      	ands	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff f8e5 	bl	8000724 <HAL_GetTick>
 800155a:	0003      	movs	r3, r0
 800155c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff f8e0 	bl	8000724 <HAL_GetTick>
 8001564:	0002      	movs	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e046      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	049b      	lsls	r3, r3, #18
 800157a:	4013      	ands	r3, r2
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 8001584:	4926      	ldr	r1, [pc, #152]	@ (8001620 <HAL_RCC_OscConfig+0x630>)
 8001586:	400a      	ands	r2, r1
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	e038      	b.n	80015fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e033      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_RCC_OscConfig+0x618>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2203      	movs	r2, #3
 80015a2:	401a      	ands	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d126      	bne.n	80015fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2270      	movs	r2, #112	@ 0x70
 80015b0:	401a      	ands	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d11f      	bne.n	80015fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	23fe      	movs	r3, #254	@ 0xfe
 80015be:	01db      	lsls	r3, r3, #7
 80015c0:	401a      	ands	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d116      	bne.n	80015fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	23f8      	movs	r3, #248	@ 0xf8
 80015d0:	039b      	lsls	r3, r3, #14
 80015d2:	401a      	ands	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d10e      	bne.n	80015fa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	23e0      	movs	r3, #224	@ 0xe0
 80015e0:	051b      	lsls	r3, r3, #20
 80015e2:	401a      	ands	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	0f5b      	lsrs	r3, r3, #29
 80015f0:	075a      	lsls	r2, r3, #29
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b008      	add	sp, #32
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	40007000 	.word	0x40007000
 8001610:	00001388 	.word	0x00001388
 8001614:	efffffff 	.word	0xefffffff
 8001618:	feffffff 	.word	0xfeffffff
 800161c:	11c1808c 	.word	0x11c1808c
 8001620:	eefefffc 	.word	0xeefefffc

08001624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0e9      	b.n	800180c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001638:	4b76      	ldr	r3, [pc, #472]	@ (8001814 <HAL_RCC_ClockConfig+0x1f0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2207      	movs	r2, #7
 800163e:	4013      	ands	r3, r2
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d91e      	bls.n	8001684 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b73      	ldr	r3, [pc, #460]	@ (8001814 <HAL_RCC_ClockConfig+0x1f0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2207      	movs	r2, #7
 800164c:	4393      	bics	r3, r2
 800164e:	0019      	movs	r1, r3
 8001650:	4b70      	ldr	r3, [pc, #448]	@ (8001814 <HAL_RCC_ClockConfig+0x1f0>)
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001658:	f7ff f864 	bl	8000724 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001660:	e009      	b.n	8001676 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001662:	f7ff f85f 	bl	8000724 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	4a6a      	ldr	r2, [pc, #424]	@ (8001818 <HAL_RCC_ClockConfig+0x1f4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0ca      	b.n	800180c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001676:	4b67      	ldr	r3, [pc, #412]	@ (8001814 <HAL_RCC_ClockConfig+0x1f0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2207      	movs	r2, #7
 800167c:	4013      	ands	r3, r2
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d1ee      	bne.n	8001662 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2202      	movs	r2, #2
 800168a:	4013      	ands	r3, r2
 800168c:	d015      	beq.n	80016ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2204      	movs	r2, #4
 8001694:	4013      	ands	r3, r2
 8001696:	d006      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001698:	4b60      	ldr	r3, [pc, #384]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 800169e:	21e0      	movs	r1, #224	@ 0xe0
 80016a0:	01c9      	lsls	r1, r1, #7
 80016a2:	430a      	orrs	r2, r1
 80016a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a6:	4b5d      	ldr	r3, [pc, #372]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4a5d      	ldr	r2, [pc, #372]	@ (8001820 <HAL_RCC_ClockConfig+0x1fc>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	0019      	movs	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	4b59      	ldr	r3, [pc, #356]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	d057      	beq.n	8001774 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016cc:	4b53      	ldr	r3, [pc, #332]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	029b      	lsls	r3, r3, #10
 80016d4:	4013      	ands	r3, r2
 80016d6:	d12b      	bne.n	8001730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e097      	b.n	800180c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e4:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	049b      	lsls	r3, r3, #18
 80016ec:	4013      	ands	r3, r2
 80016ee:	d11f      	bne.n	8001730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e08b      	b.n	800180c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d107      	bne.n	800170c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fc:	4b47      	ldr	r3, [pc, #284]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4013      	ands	r3, r2
 8001706:	d113      	bne.n	8001730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e07f      	b.n	800180c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d106      	bne.n	8001722 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001714:	4b41      	ldr	r3, [pc, #260]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 8001716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d108      	bne.n	8001730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e074      	b.n	800180c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001722:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 8001724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001726:	2202      	movs	r2, #2
 8001728:	4013      	ands	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e06d      	b.n	800180c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001730:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2207      	movs	r2, #7
 8001736:	4393      	bics	r3, r2
 8001738:	0019      	movs	r1, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001744:	f7fe ffee 	bl	8000724 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174c:	e009      	b.n	8001762 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174e:	f7fe ffe9 	bl	8000724 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a2f      	ldr	r2, [pc, #188]	@ (8001818 <HAL_RCC_ClockConfig+0x1f4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e054      	b.n	800180c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001762:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2238      	movs	r2, #56	@ 0x38
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	429a      	cmp	r2, r3
 8001772:	d1ec      	bne.n	800174e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <HAL_RCC_ClockConfig+0x1f0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2207      	movs	r2, #7
 800177a:	4013      	ands	r3, r2
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d21e      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <HAL_RCC_ClockConfig+0x1f0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2207      	movs	r2, #7
 8001788:	4393      	bics	r3, r2
 800178a:	0019      	movs	r1, r3
 800178c:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <HAL_RCC_ClockConfig+0x1f0>)
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001794:	f7fe ffc6 	bl	8000724 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800179c:	e009      	b.n	80017b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179e:	f7fe ffc1 	bl	8000724 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <HAL_RCC_ClockConfig+0x1f4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e02c      	b.n	800180c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017b2:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <HAL_RCC_ClockConfig+0x1f0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2207      	movs	r2, #7
 80017b8:	4013      	ands	r3, r2
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1ee      	bne.n	800179e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2204      	movs	r2, #4
 80017c6:	4013      	ands	r3, r2
 80017c8:	d009      	beq.n	80017de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <HAL_RCC_ClockConfig+0x200>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017de:	f000 f829 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80017e2:	0001      	movs	r1, r0
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	220f      	movs	r2, #15
 80017ec:	401a      	ands	r2, r3
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_RCC_ClockConfig+0x204>)
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	58d3      	ldr	r3, [r2, r3]
 80017f4:	221f      	movs	r2, #31
 80017f6:	4013      	ands	r3, r2
 80017f8:	000a      	movs	r2, r1
 80017fa:	40da      	lsrs	r2, r3
 80017fc:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <HAL_RCC_ClockConfig+0x208>)
 80017fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_RCC_ClockConfig+0x20c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0018      	movs	r0, r3
 8001806:	f7fe ff31 	bl	800066c <HAL_InitTick>
 800180a:	0003      	movs	r3, r0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b004      	add	sp, #16
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40022000 	.word	0x40022000
 8001818:	00001388 	.word	0x00001388
 800181c:	40021000 	.word	0x40021000
 8001820:	fffff0ff 	.word	0xfffff0ff
 8001824:	ffff8fff 	.word	0xffff8fff
 8001828:	08003610 	.word	0x08003610
 800182c:	20000008 	.word	0x20000008
 8001830:	20000000 	.word	0x20000000

08001834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800183a:	4b3c      	ldr	r3, [pc, #240]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2238      	movs	r2, #56	@ 0x38
 8001840:	4013      	ands	r3, r2
 8001842:	d10f      	bne.n	8001864 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001844:	4b39      	ldr	r3, [pc, #228]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0adb      	lsrs	r3, r3, #11
 800184a:	2207      	movs	r2, #7
 800184c:	4013      	ands	r3, r2
 800184e:	2201      	movs	r2, #1
 8001850:	409a      	lsls	r2, r3
 8001852:	0013      	movs	r3, r2
 8001854:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001856:	6839      	ldr	r1, [r7, #0]
 8001858:	4835      	ldr	r0, [pc, #212]	@ (8001930 <HAL_RCC_GetSysClockFreq+0xfc>)
 800185a:	f7fe fc5b 	bl	8000114 <__udivsi3>
 800185e:	0003      	movs	r3, r0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	e05d      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001864:	4b31      	ldr	r3, [pc, #196]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2238      	movs	r2, #56	@ 0x38
 800186a:	4013      	ands	r3, r2
 800186c:	2b08      	cmp	r3, #8
 800186e:	d102      	bne.n	8001876 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001870:	4b30      	ldr	r3, [pc, #192]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x100>)
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	e054      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001876:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2238      	movs	r2, #56	@ 0x38
 800187c:	4013      	ands	r3, r2
 800187e:	2b10      	cmp	r3, #16
 8001880:	d138      	bne.n	80018f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001882:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2203      	movs	r2, #3
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800188c:	4b27      	ldr	r3, [pc, #156]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	2207      	movs	r2, #7
 8001894:	4013      	ands	r3, r2
 8001896:	3301      	adds	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d10d      	bne.n	80018bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	4824      	ldr	r0, [pc, #144]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x100>)
 80018a4:	f7fe fc36 	bl	8000114 <__udivsi3>
 80018a8:	0003      	movs	r3, r0
 80018aa:	0019      	movs	r1, r3
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	227f      	movs	r2, #127	@ 0x7f
 80018b4:	4013      	ands	r3, r2
 80018b6:	434b      	muls	r3, r1
 80018b8:	617b      	str	r3, [r7, #20]
        break;
 80018ba:	e00d      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	481c      	ldr	r0, [pc, #112]	@ (8001930 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018c0:	f7fe fc28 	bl	8000114 <__udivsi3>
 80018c4:	0003      	movs	r3, r0
 80018c6:	0019      	movs	r1, r3
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	227f      	movs	r2, #127	@ 0x7f
 80018d0:	4013      	ands	r3, r2
 80018d2:	434b      	muls	r3, r1
 80018d4:	617b      	str	r3, [r7, #20]
        break;
 80018d6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0f5b      	lsrs	r3, r3, #29
 80018de:	2207      	movs	r2, #7
 80018e0:	4013      	ands	r3, r2
 80018e2:	3301      	adds	r3, #1
 80018e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	6978      	ldr	r0, [r7, #20]
 80018ea:	f7fe fc13 	bl	8000114 <__udivsi3>
 80018ee:	0003      	movs	r3, r0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	e015      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2238      	movs	r2, #56	@ 0x38
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d103      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001900:	2380      	movs	r3, #128	@ 0x80
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e00b      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <HAL_RCC_GetSysClockFreq+0xf8>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2238      	movs	r2, #56	@ 0x38
 800190e:	4013      	ands	r3, r2
 8001910:	2b18      	cmp	r3, #24
 8001912:	d103      	bne.n	800191c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001914:	23fa      	movs	r3, #250	@ 0xfa
 8001916:	01db      	lsls	r3, r3, #7
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	e001      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001920:	693b      	ldr	r3, [r7, #16]
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b006      	add	sp, #24
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	40021000 	.word	0x40021000
 8001930:	00f42400 	.word	0x00f42400
 8001934:	007a1200 	.word	0x007a1200

08001938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b02      	ldr	r3, [pc, #8]	@ (8001948 <HAL_RCC_GetHCLKFreq+0x10>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001950:	f7ff fff2 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001954:	0004      	movs	r4, r0
 8001956:	f7ff fb3f 	bl	8000fd8 <LL_RCC_GetAPB1Prescaler>
 800195a:	0003      	movs	r3, r0
 800195c:	0b1a      	lsrs	r2, r3, #12
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	58d3      	ldr	r3, [r2, r3]
 8001964:	221f      	movs	r2, #31
 8001966:	4013      	ands	r3, r2
 8001968:	40dc      	lsrs	r4, r3
 800196a:	0023      	movs	r3, r4
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	08003650 	.word	0x08003650

08001978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001980:	2313      	movs	r3, #19
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001988:	2312      	movs	r3, #18
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	029b      	lsls	r3, r3, #10
 8001998:	4013      	ands	r3, r2
 800199a:	d100      	bne.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800199c:	e0a3      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199e:	2011      	movs	r0, #17
 80019a0:	183b      	adds	r3, r7, r0
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a6:	4bc3      	ldr	r3, [pc, #780]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	055b      	lsls	r3, r3, #21
 80019ae:	4013      	ands	r3, r2
 80019b0:	d110      	bne.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4bc0      	ldr	r3, [pc, #768]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019b6:	4bbf      	ldr	r3, [pc, #764]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019b8:	2180      	movs	r1, #128	@ 0x80
 80019ba:	0549      	lsls	r1, r1, #21
 80019bc:	430a      	orrs	r2, r1
 80019be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019c0:	4bbc      	ldr	r3, [pc, #752]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ce:	183b      	adds	r3, r7, r0
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d4:	4bb8      	ldr	r3, [pc, #736]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4bb7      	ldr	r3, [pc, #732]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	0049      	lsls	r1, r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019e2:	f7fe fe9f 	bl	8000724 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019ea:	e00b      	b.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7fe fe9a 	bl	8000724 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d904      	bls.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80019fa:	2313      	movs	r3, #19
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2203      	movs	r2, #3
 8001a00:	701a      	strb	r2, [r3, #0]
        break;
 8001a02:	e005      	b.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a04:	4bac      	ldr	r3, [pc, #688]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d0ed      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001a10:	2313      	movs	r3, #19
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d154      	bne.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a1a:	4ba6      	ldr	r3, [pc, #664]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a1e:	23c0      	movs	r3, #192	@ 0xc0
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d019      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d014      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a36:	4b9f      	ldr	r3, [pc, #636]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3a:	4aa0      	ldr	r2, [pc, #640]	@ (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a40:	4b9c      	ldr	r3, [pc, #624]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a44:	4b9b      	ldr	r3, [pc, #620]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a46:	2180      	movs	r1, #128	@ 0x80
 8001a48:	0249      	lsls	r1, r1, #9
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a4e:	4b99      	ldr	r3, [pc, #612]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a52:	4b98      	ldr	r3, [pc, #608]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a54:	499a      	ldr	r1, [pc, #616]	@ (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001a56:	400a      	ands	r2, r1
 8001a58:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a5a:	4b96      	ldr	r3, [pc, #600]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2201      	movs	r2, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	d016      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7fe fe5c 	bl	8000724 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a70:	e00c      	b.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7fe fe57 	bl	8000724 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	4a91      	ldr	r2, [pc, #580]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d904      	bls.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001a82:	2313      	movs	r3, #19
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	2203      	movs	r2, #3
 8001a88:	701a      	strb	r2, [r3, #0]
            break;
 8001a8a:	e004      	b.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8c:	4b89      	ldr	r3, [pc, #548]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a90:	2202      	movs	r2, #2
 8001a92:	4013      	ands	r3, r2
 8001a94:	d0ed      	beq.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001a96:	2313      	movs	r3, #19
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10a      	bne.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aa0:	4b84      	ldr	r3, [pc, #528]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa4:	4a85      	ldr	r2, [pc, #532]	@ (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aae:	4b81      	ldr	r3, [pc, #516]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ab4:	e00c      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ab6:	2312      	movs	r3, #18
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	2213      	movs	r2, #19
 8001abc:	18ba      	adds	r2, r7, r2
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e005      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	2213      	movs	r2, #19
 8001aca:	18ba      	adds	r2, r7, r2
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ad0:	2311      	movs	r3, #17
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ada:	4b76      	ldr	r3, [pc, #472]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001adc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ade:	4b75      	ldr	r3, [pc, #468]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ae0:	4979      	ldr	r1, [pc, #484]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d009      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001af0:	4b70      	ldr	r3, [pc, #448]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af4:	2203      	movs	r2, #3
 8001af6:	4393      	bics	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b0e:	4b69      	ldr	r3, [pc, #420]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b12:	220c      	movs	r2, #12
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b65      	ldr	r3, [pc, #404]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2210      	movs	r2, #16
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b2c:	4b61      	ldr	r3, [pc, #388]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b30:	4a66      	ldr	r2, [pc, #408]	@ (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d009      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b4c:	4b59      	ldr	r3, [pc, #356]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b50:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	4b56      	ldr	r3, [pc, #344]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d009      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b6c:	4b51      	ldr	r3, [pc, #324]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b70:	4a58      	ldr	r2, [pc, #352]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2220      	movs	r2, #32
 8001b86:	4013      	ands	r3, r2
 8001b88:	d009      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8e:	4a52      	ldr	r2, [pc, #328]	@ (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	4b46      	ldr	r3, [pc, #280]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	@ 0x80
 8001ba4:	01db      	lsls	r3, r3, #7
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d015      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001baa:	4b42      	ldr	r3, [pc, #264]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	0899      	lsrs	r1, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1a      	ldr	r2, [r3, #32]
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1a      	ldr	r2, [r3, #32]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	05db      	lsls	r3, r3, #23
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4b39      	ldr	r3, [pc, #228]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bce:	2180      	movs	r1, #128	@ 0x80
 8001bd0:	0249      	lsls	r1, r1, #9
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	031b      	lsls	r3, r3, #12
 8001bde:	4013      	ands	r3, r2
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001be2:	4b34      	ldr	r3, [pc, #208]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be6:	2240      	movs	r2, #64	@ 0x40
 8001be8:	4393      	bics	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bf0:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	039b      	lsls	r3, r3, #14
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d016      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c02:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c06:	4a35      	ldr	r2, [pc, #212]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	03db      	lsls	r3, r3, #15
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d106      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001c22:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c28:	2180      	movs	r1, #128	@ 0x80
 8001c2a:	0449      	lsls	r1, r1, #17
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	03db      	lsls	r3, r3, #15
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d016      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c40:	4a27      	ldr	r2, [pc, #156]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	045b      	lsls	r3, r3, #17
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c62:	2180      	movs	r1, #128	@ 0x80
 8001c64:	0449      	lsls	r1, r1, #17
 8001c66:	430a      	orrs	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	2380      	movs	r3, #128	@ 0x80
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4013      	ands	r3, r2
 8001c74:	d016      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c76:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	0019      	movs	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c86:	430a      	orrs	r2, r1
 8001c88:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	2380      	movs	r3, #128	@ 0x80
 8001c90:	01db      	lsls	r3, r3, #7
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c96:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c9c:	2180      	movs	r1, #128	@ 0x80
 8001c9e:	0249      	lsls	r1, r1, #9
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001ca4:	2312      	movs	r3, #18
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b006      	add	sp, #24
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	fffffcff 	.word	0xfffffcff
 8001cc0:	fffeffff 	.word	0xfffeffff
 8001cc4:	00001388 	.word	0x00001388
 8001cc8:	efffffff 	.word	0xefffffff
 8001ccc:	fffff3ff 	.word	0xfffff3ff
 8001cd0:	fff3ffff 	.word	0xfff3ffff
 8001cd4:	ffcfffff 	.word	0xffcfffff
 8001cd8:	ffffcfff 	.word	0xffffcfff
 8001cdc:	ffbfffff 	.word	0xffbfffff
 8001ce0:	feffffff 	.word	0xfeffffff
 8001ce4:	ffff3fff 	.word	0xffff3fff

08001ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e046      	b.n	8001d88 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2288      	movs	r2, #136	@ 0x88
 8001cfe:	589b      	ldr	r3, [r3, r2]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2284      	movs	r2, #132	@ 0x84
 8001d08:	2100      	movs	r1, #0
 8001d0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f001 faca 	bl	80032a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2288      	movs	r2, #136	@ 0x88
 8001d18:	2124      	movs	r1, #36	@ 0x24
 8001d1a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	438a      	bics	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 fb8e 	bl	8002458 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 f8cc 	bl	8001edc <UART_SetConfig>
 8001d44:	0003      	movs	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e01c      	b.n	8001d88 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	490d      	ldr	r1, [pc, #52]	@ (8001d90 <HAL_UART_Init+0xa8>)
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	212a      	movs	r1, #42	@ 0x2a
 8001d6a:	438a      	bics	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0018      	movs	r0, r3
 8001d82:	f000 fc1d 	bl	80025c0 <UART_CheckIdleState>
 8001d86:	0003      	movs	r3, r0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	ffffb7ff 	.word	0xffffb7ff

08001d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	1dbb      	adds	r3, r7, #6
 8001da2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2288      	movs	r2, #136	@ 0x88
 8001da8:	589b      	ldr	r3, [r3, r2]
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d000      	beq.n	8001db0 <HAL_UART_Transmit+0x1c>
 8001dae:	e090      	b.n	8001ed2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_UART_Transmit+0x2a>
 8001db6:	1dbb      	adds	r3, r7, #6
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e088      	b.n	8001ed4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	015b      	lsls	r3, r3, #5
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d109      	bne.n	8001de2 <HAL_UART_Transmit+0x4e>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d001      	beq.n	8001de2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e078      	b.n	8001ed4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2290      	movs	r2, #144	@ 0x90
 8001de6:	2100      	movs	r1, #0
 8001de8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2288      	movs	r2, #136	@ 0x88
 8001dee:	2121      	movs	r1, #33	@ 0x21
 8001df0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001df2:	f7fe fc97 	bl	8000724 <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1dba      	adds	r2, r7, #6
 8001dfe:	2154      	movs	r1, #84	@ 0x54
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1dba      	adds	r2, r7, #6
 8001e08:	2156      	movs	r1, #86	@ 0x56
 8001e0a:	8812      	ldrh	r2, [r2, #0]
 8001e0c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	015b      	lsls	r3, r3, #5
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d108      	bne.n	8001e2c <HAL_UART_Transmit+0x98>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d104      	bne.n	8001e2c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	e003      	b.n	8001e34 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e34:	e030      	b.n	8001e98 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	0013      	movs	r3, r2
 8001e40:	2200      	movs	r2, #0
 8001e42:	2180      	movs	r1, #128	@ 0x80
 8001e44:	f000 fc66 	bl	8002714 <UART_WaitOnFlagUntilTimeout>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2288      	movs	r2, #136	@ 0x88
 8001e50:	2120      	movs	r1, #32
 8001e52:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e03d      	b.n	8001ed4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10b      	bne.n	8001e76 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	001a      	movs	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	05d2      	lsls	r2, r2, #23
 8001e6a:	0dd2      	lsrs	r2, r2, #23
 8001e6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	3302      	adds	r3, #2
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	e007      	b.n	8001e86 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	3301      	adds	r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2256      	movs	r2, #86	@ 0x56
 8001e8a:	5a9b      	ldrh	r3, [r3, r2]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b299      	uxth	r1, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2256      	movs	r2, #86	@ 0x56
 8001e96:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2256      	movs	r2, #86	@ 0x56
 8001e9c:	5a9b      	ldrh	r3, [r3, r2]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1c8      	bne.n	8001e36 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	0013      	movs	r3, r2
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2140      	movs	r1, #64	@ 0x40
 8001eb2:	f000 fc2f 	bl	8002714 <UART_WaitOnFlagUntilTimeout>
 8001eb6:	1e03      	subs	r3, r0, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2288      	movs	r2, #136	@ 0x88
 8001ebe:	2120      	movs	r1, #32
 8001ec0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e006      	b.n	8001ed4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2288      	movs	r2, #136	@ 0x88
 8001eca:	2120      	movs	r1, #32
 8001ecc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
  }
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b008      	add	sp, #32
 8001eda:	bd80      	pop	{r7, pc}

08001edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b090      	sub	sp, #64	@ 0x40
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ee4:	231a      	movs	r3, #26
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	189b      	adds	r3, r3, r2
 8001eea:	19db      	adds	r3, r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4aaf      	ldr	r2, [pc, #700]	@ (80021cc <UART_SetConfig+0x2f0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	0019      	movs	r1, r3
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4aaa      	ldr	r2, [pc, #680]	@ (80021d0 <UART_SetConfig+0x2f4>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	0018      	movs	r0, r3
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	68d9      	ldr	r1, [r3, #12]
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	0003      	movs	r3, r0
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4aa4      	ldr	r2, [pc, #656]	@ (80021d4 <UART_SetConfig+0x2f8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a9f      	ldr	r2, [pc, #636]	@ (80021d8 <UART_SetConfig+0x2fc>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6e:	220f      	movs	r2, #15
 8001f70:	4393      	bics	r3, r2
 8001f72:	0018      	movs	r0, r3
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a95      	ldr	r2, [pc, #596]	@ (80021dc <UART_SetConfig+0x300>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d131      	bne.n	8001ff0 <UART_SetConfig+0x114>
 8001f8c:	4b94      	ldr	r3, [pc, #592]	@ (80021e0 <UART_SetConfig+0x304>)
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f90:	2203      	movs	r2, #3
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d01d      	beq.n	8001fd4 <UART_SetConfig+0xf8>
 8001f98:	d823      	bhi.n	8001fe2 <UART_SetConfig+0x106>
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d00c      	beq.n	8001fb8 <UART_SetConfig+0xdc>
 8001f9e:	d820      	bhi.n	8001fe2 <UART_SetConfig+0x106>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <UART_SetConfig+0xce>
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d00e      	beq.n	8001fc6 <UART_SetConfig+0xea>
 8001fa8:	e01b      	b.n	8001fe2 <UART_SetConfig+0x106>
 8001faa:	231b      	movs	r3, #27
 8001fac:	2220      	movs	r2, #32
 8001fae:	189b      	adds	r3, r3, r2
 8001fb0:	19db      	adds	r3, r3, r7
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e0b4      	b.n	8002122 <UART_SetConfig+0x246>
 8001fb8:	231b      	movs	r3, #27
 8001fba:	2220      	movs	r2, #32
 8001fbc:	189b      	adds	r3, r3, r2
 8001fbe:	19db      	adds	r3, r3, r7
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e0ad      	b.n	8002122 <UART_SetConfig+0x246>
 8001fc6:	231b      	movs	r3, #27
 8001fc8:	2220      	movs	r2, #32
 8001fca:	189b      	adds	r3, r3, r2
 8001fcc:	19db      	adds	r3, r3, r7
 8001fce:	2204      	movs	r2, #4
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e0a6      	b.n	8002122 <UART_SetConfig+0x246>
 8001fd4:	231b      	movs	r3, #27
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	189b      	adds	r3, r3, r2
 8001fda:	19db      	adds	r3, r3, r7
 8001fdc:	2208      	movs	r2, #8
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e09f      	b.n	8002122 <UART_SetConfig+0x246>
 8001fe2:	231b      	movs	r3, #27
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	19db      	adds	r3, r3, r7
 8001fea:	2210      	movs	r2, #16
 8001fec:	701a      	strb	r2, [r3, #0]
 8001fee:	e098      	b.n	8002122 <UART_SetConfig+0x246>
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a7b      	ldr	r2, [pc, #492]	@ (80021e4 <UART_SetConfig+0x308>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d131      	bne.n	800205e <UART_SetConfig+0x182>
 8001ffa:	4b79      	ldr	r3, [pc, #484]	@ (80021e0 <UART_SetConfig+0x304>)
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffe:	220c      	movs	r2, #12
 8002000:	4013      	ands	r3, r2
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d01d      	beq.n	8002042 <UART_SetConfig+0x166>
 8002006:	d823      	bhi.n	8002050 <UART_SetConfig+0x174>
 8002008:	2b08      	cmp	r3, #8
 800200a:	d00c      	beq.n	8002026 <UART_SetConfig+0x14a>
 800200c:	d820      	bhi.n	8002050 <UART_SetConfig+0x174>
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <UART_SetConfig+0x13c>
 8002012:	2b04      	cmp	r3, #4
 8002014:	d00e      	beq.n	8002034 <UART_SetConfig+0x158>
 8002016:	e01b      	b.n	8002050 <UART_SetConfig+0x174>
 8002018:	231b      	movs	r3, #27
 800201a:	2220      	movs	r2, #32
 800201c:	189b      	adds	r3, r3, r2
 800201e:	19db      	adds	r3, r3, r7
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	e07d      	b.n	8002122 <UART_SetConfig+0x246>
 8002026:	231b      	movs	r3, #27
 8002028:	2220      	movs	r2, #32
 800202a:	189b      	adds	r3, r3, r2
 800202c:	19db      	adds	r3, r3, r7
 800202e:	2202      	movs	r2, #2
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	e076      	b.n	8002122 <UART_SetConfig+0x246>
 8002034:	231b      	movs	r3, #27
 8002036:	2220      	movs	r2, #32
 8002038:	189b      	adds	r3, r3, r2
 800203a:	19db      	adds	r3, r3, r7
 800203c:	2204      	movs	r2, #4
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e06f      	b.n	8002122 <UART_SetConfig+0x246>
 8002042:	231b      	movs	r3, #27
 8002044:	2220      	movs	r2, #32
 8002046:	189b      	adds	r3, r3, r2
 8002048:	19db      	adds	r3, r3, r7
 800204a:	2208      	movs	r2, #8
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	e068      	b.n	8002122 <UART_SetConfig+0x246>
 8002050:	231b      	movs	r3, #27
 8002052:	2220      	movs	r2, #32
 8002054:	189b      	adds	r3, r3, r2
 8002056:	19db      	adds	r3, r3, r7
 8002058:	2210      	movs	r2, #16
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e061      	b.n	8002122 <UART_SetConfig+0x246>
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a61      	ldr	r2, [pc, #388]	@ (80021e8 <UART_SetConfig+0x30c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d106      	bne.n	8002076 <UART_SetConfig+0x19a>
 8002068:	231b      	movs	r3, #27
 800206a:	2220      	movs	r2, #32
 800206c:	189b      	adds	r3, r3, r2
 800206e:	19db      	adds	r3, r3, r7
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e055      	b.n	8002122 <UART_SetConfig+0x246>
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5c      	ldr	r2, [pc, #368]	@ (80021ec <UART_SetConfig+0x310>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d106      	bne.n	800208e <UART_SetConfig+0x1b2>
 8002080:	231b      	movs	r3, #27
 8002082:	2220      	movs	r2, #32
 8002084:	189b      	adds	r3, r3, r2
 8002086:	19db      	adds	r3, r3, r7
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	e049      	b.n	8002122 <UART_SetConfig+0x246>
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a50      	ldr	r2, [pc, #320]	@ (80021d4 <UART_SetConfig+0x2f8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d13e      	bne.n	8002116 <UART_SetConfig+0x23a>
 8002098:	4b51      	ldr	r3, [pc, #324]	@ (80021e0 <UART_SetConfig+0x304>)
 800209a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800209c:	23c0      	movs	r3, #192	@ 0xc0
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	4013      	ands	r3, r2
 80020a2:	22c0      	movs	r2, #192	@ 0xc0
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d027      	beq.n	80020fa <UART_SetConfig+0x21e>
 80020aa:	22c0      	movs	r2, #192	@ 0xc0
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d82a      	bhi.n	8002108 <UART_SetConfig+0x22c>
 80020b2:	2280      	movs	r2, #128	@ 0x80
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d011      	beq.n	80020de <UART_SetConfig+0x202>
 80020ba:	2280      	movs	r2, #128	@ 0x80
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	4293      	cmp	r3, r2
 80020c0:	d822      	bhi.n	8002108 <UART_SetConfig+0x22c>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <UART_SetConfig+0x1f4>
 80020c6:	2280      	movs	r2, #128	@ 0x80
 80020c8:	00d2      	lsls	r2, r2, #3
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <UART_SetConfig+0x210>
 80020ce:	e01b      	b.n	8002108 <UART_SetConfig+0x22c>
 80020d0:	231b      	movs	r3, #27
 80020d2:	2220      	movs	r2, #32
 80020d4:	189b      	adds	r3, r3, r2
 80020d6:	19db      	adds	r3, r3, r7
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e021      	b.n	8002122 <UART_SetConfig+0x246>
 80020de:	231b      	movs	r3, #27
 80020e0:	2220      	movs	r2, #32
 80020e2:	189b      	adds	r3, r3, r2
 80020e4:	19db      	adds	r3, r3, r7
 80020e6:	2202      	movs	r2, #2
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e01a      	b.n	8002122 <UART_SetConfig+0x246>
 80020ec:	231b      	movs	r3, #27
 80020ee:	2220      	movs	r2, #32
 80020f0:	189b      	adds	r3, r3, r2
 80020f2:	19db      	adds	r3, r3, r7
 80020f4:	2204      	movs	r2, #4
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e013      	b.n	8002122 <UART_SetConfig+0x246>
 80020fa:	231b      	movs	r3, #27
 80020fc:	2220      	movs	r2, #32
 80020fe:	189b      	adds	r3, r3, r2
 8002100:	19db      	adds	r3, r3, r7
 8002102:	2208      	movs	r2, #8
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e00c      	b.n	8002122 <UART_SetConfig+0x246>
 8002108:	231b      	movs	r3, #27
 800210a:	2220      	movs	r2, #32
 800210c:	189b      	adds	r3, r3, r2
 800210e:	19db      	adds	r3, r3, r7
 8002110:	2210      	movs	r2, #16
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e005      	b.n	8002122 <UART_SetConfig+0x246>
 8002116:	231b      	movs	r3, #27
 8002118:	2220      	movs	r2, #32
 800211a:	189b      	adds	r3, r3, r2
 800211c:	19db      	adds	r3, r3, r7
 800211e:	2210      	movs	r2, #16
 8002120:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2b      	ldr	r2, [pc, #172]	@ (80021d4 <UART_SetConfig+0x2f8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d000      	beq.n	800212e <UART_SetConfig+0x252>
 800212c:	e0a9      	b.n	8002282 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800212e:	231b      	movs	r3, #27
 8002130:	2220      	movs	r2, #32
 8002132:	189b      	adds	r3, r3, r2
 8002134:	19db      	adds	r3, r3, r7
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d015      	beq.n	8002168 <UART_SetConfig+0x28c>
 800213c:	dc18      	bgt.n	8002170 <UART_SetConfig+0x294>
 800213e:	2b04      	cmp	r3, #4
 8002140:	d00d      	beq.n	800215e <UART_SetConfig+0x282>
 8002142:	dc15      	bgt.n	8002170 <UART_SetConfig+0x294>
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <UART_SetConfig+0x272>
 8002148:	2b02      	cmp	r3, #2
 800214a:	d005      	beq.n	8002158 <UART_SetConfig+0x27c>
 800214c:	e010      	b.n	8002170 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800214e:	f7ff fbfd 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8002152:	0003      	movs	r3, r0
 8002154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002156:	e014      	b.n	8002182 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002158:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <UART_SetConfig+0x314>)
 800215a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800215c:	e011      	b.n	8002182 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800215e:	f7ff fb69 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 8002162:	0003      	movs	r3, r0
 8002164:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002166:	e00c      	b.n	8002182 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800216e:	e008      	b.n	8002182 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002174:	231a      	movs	r3, #26
 8002176:	2220      	movs	r2, #32
 8002178:	189b      	adds	r3, r3, r2
 800217a:	19db      	adds	r3, r3, r7
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
        break;
 8002180:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002184:	2b00      	cmp	r3, #0
 8002186:	d100      	bne.n	800218a <UART_SetConfig+0x2ae>
 8002188:	e14b      	b.n	8002422 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <UART_SetConfig+0x318>)
 8002190:	0052      	lsls	r2, r2, #1
 8002192:	5ad3      	ldrh	r3, [r2, r3]
 8002194:	0019      	movs	r1, r3
 8002196:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002198:	f7fd ffbc 	bl	8000114 <__udivsi3>
 800219c:	0003      	movs	r3, r0
 800219e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	0013      	movs	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	189b      	adds	r3, r3, r2
 80021aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d305      	bcc.n	80021bc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d91d      	bls.n	80021f8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80021bc:	231a      	movs	r3, #26
 80021be:	2220      	movs	r2, #32
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	19db      	adds	r3, r3, r7
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e12b      	b.n	8002422 <UART_SetConfig+0x546>
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	cfff69f3 	.word	0xcfff69f3
 80021d0:	ffffcfff 	.word	0xffffcfff
 80021d4:	40008000 	.word	0x40008000
 80021d8:	11fff4ff 	.word	0x11fff4ff
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40004400 	.word	0x40004400
 80021e8:	40004800 	.word	0x40004800
 80021ec:	40004c00 	.word	0x40004c00
 80021f0:	00f42400 	.word	0x00f42400
 80021f4:	080035e8 	.word	0x080035e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002204:	4b92      	ldr	r3, [pc, #584]	@ (8002450 <UART_SetConfig+0x574>)
 8002206:	0052      	lsls	r2, r2, #1
 8002208:	5ad3      	ldrh	r3, [r2, r3]
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	69b8      	ldr	r0, [r7, #24]
 8002216:	69f9      	ldr	r1, [r7, #28]
 8002218:	f7fe f8f2 	bl	8000400 <__aeabi_uldivmod>
 800221c:	0002      	movs	r2, r0
 800221e:	000b      	movs	r3, r1
 8002220:	0e11      	lsrs	r1, r2, #24
 8002222:	021d      	lsls	r5, r3, #8
 8002224:	430d      	orrs	r5, r1
 8002226:	0214      	lsls	r4, r2, #8
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68b8      	ldr	r0, [r7, #8]
 8002236:	68f9      	ldr	r1, [r7, #12]
 8002238:	1900      	adds	r0, r0, r4
 800223a:	4169      	adcs	r1, r5
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f7fe f8d9 	bl	8000400 <__aeabi_uldivmod>
 800224e:	0002      	movs	r2, r0
 8002250:	000b      	movs	r3, r1
 8002252:	0013      	movs	r3, r2
 8002254:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002258:	23c0      	movs	r3, #192	@ 0xc0
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d309      	bcc.n	8002274 <UART_SetConfig+0x398>
 8002260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	035b      	lsls	r3, r3, #13
 8002266:	429a      	cmp	r2, r3
 8002268:	d204      	bcs.n	8002274 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	e0d6      	b.n	8002422 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002274:	231a      	movs	r3, #26
 8002276:	2220      	movs	r2, #32
 8002278:	189b      	adds	r3, r3, r2
 800227a:	19db      	adds	r3, r3, r7
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e0cf      	b.n	8002422 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	2380      	movs	r3, #128	@ 0x80
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	429a      	cmp	r2, r3
 800228c:	d000      	beq.n	8002290 <UART_SetConfig+0x3b4>
 800228e:	e070      	b.n	8002372 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002290:	231b      	movs	r3, #27
 8002292:	2220      	movs	r2, #32
 8002294:	189b      	adds	r3, r3, r2
 8002296:	19db      	adds	r3, r3, r7
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b08      	cmp	r3, #8
 800229c:	d015      	beq.n	80022ca <UART_SetConfig+0x3ee>
 800229e:	dc18      	bgt.n	80022d2 <UART_SetConfig+0x3f6>
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d00d      	beq.n	80022c0 <UART_SetConfig+0x3e4>
 80022a4:	dc15      	bgt.n	80022d2 <UART_SetConfig+0x3f6>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <UART_SetConfig+0x3d4>
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d005      	beq.n	80022ba <UART_SetConfig+0x3de>
 80022ae:	e010      	b.n	80022d2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022b0:	f7ff fb4c 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 80022b4:	0003      	movs	r3, r0
 80022b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022b8:	e014      	b.n	80022e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022ba:	4b66      	ldr	r3, [pc, #408]	@ (8002454 <UART_SetConfig+0x578>)
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022be:	e011      	b.n	80022e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022c0:	f7ff fab8 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80022c4:	0003      	movs	r3, r0
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022c8:	e00c      	b.n	80022e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022d0:	e008      	b.n	80022e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80022d6:	231a      	movs	r3, #26
 80022d8:	2220      	movs	r2, #32
 80022da:	189b      	adds	r3, r3, r2
 80022dc:	19db      	adds	r3, r3, r7
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
        break;
 80022e2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d100      	bne.n	80022ec <UART_SetConfig+0x410>
 80022ea:	e09a      	b.n	8002422 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022f0:	4b57      	ldr	r3, [pc, #348]	@ (8002450 <UART_SetConfig+0x574>)
 80022f2:	0052      	lsls	r2, r2, #1
 80022f4:	5ad3      	ldrh	r3, [r2, r3]
 80022f6:	0019      	movs	r1, r3
 80022f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80022fa:	f7fd ff0b 	bl	8000114 <__udivsi3>
 80022fe:	0003      	movs	r3, r0
 8002300:	005a      	lsls	r2, r3, #1
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	18d2      	adds	r2, r2, r3
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0019      	movs	r1, r3
 8002310:	0010      	movs	r0, r2
 8002312:	f7fd feff 	bl	8000114 <__udivsi3>
 8002316:	0003      	movs	r3, r0
 8002318:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800231a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231c:	2b0f      	cmp	r3, #15
 800231e:	d921      	bls.n	8002364 <UART_SetConfig+0x488>
 8002320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002322:	2380      	movs	r3, #128	@ 0x80
 8002324:	025b      	lsls	r3, r3, #9
 8002326:	429a      	cmp	r2, r3
 8002328:	d21c      	bcs.n	8002364 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	b29a      	uxth	r2, r3
 800232e:	200e      	movs	r0, #14
 8002330:	2420      	movs	r4, #32
 8002332:	1903      	adds	r3, r0, r4
 8002334:	19db      	adds	r3, r3, r7
 8002336:	210f      	movs	r1, #15
 8002338:	438a      	bics	r2, r1
 800233a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	2207      	movs	r2, #7
 8002344:	4013      	ands	r3, r2
 8002346:	b299      	uxth	r1, r3
 8002348:	1903      	adds	r3, r0, r4
 800234a:	19db      	adds	r3, r3, r7
 800234c:	1902      	adds	r2, r0, r4
 800234e:	19d2      	adds	r2, r2, r7
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	1902      	adds	r2, r0, r4
 800235c:	19d2      	adds	r2, r2, r7
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	e05e      	b.n	8002422 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002364:	231a      	movs	r3, #26
 8002366:	2220      	movs	r2, #32
 8002368:	189b      	adds	r3, r3, r2
 800236a:	19db      	adds	r3, r3, r7
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e057      	b.n	8002422 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002372:	231b      	movs	r3, #27
 8002374:	2220      	movs	r2, #32
 8002376:	189b      	adds	r3, r3, r2
 8002378:	19db      	adds	r3, r3, r7
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d015      	beq.n	80023ac <UART_SetConfig+0x4d0>
 8002380:	dc18      	bgt.n	80023b4 <UART_SetConfig+0x4d8>
 8002382:	2b04      	cmp	r3, #4
 8002384:	d00d      	beq.n	80023a2 <UART_SetConfig+0x4c6>
 8002386:	dc15      	bgt.n	80023b4 <UART_SetConfig+0x4d8>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <UART_SetConfig+0x4b6>
 800238c:	2b02      	cmp	r3, #2
 800238e:	d005      	beq.n	800239c <UART_SetConfig+0x4c0>
 8002390:	e010      	b.n	80023b4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002392:	f7ff fadb 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8002396:	0003      	movs	r3, r0
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800239a:	e014      	b.n	80023c6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800239c:	4b2d      	ldr	r3, [pc, #180]	@ (8002454 <UART_SetConfig+0x578>)
 800239e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023a0:	e011      	b.n	80023c6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023a2:	f7ff fa47 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80023a6:	0003      	movs	r3, r0
 80023a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023aa:	e00c      	b.n	80023c6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023b2:	e008      	b.n	80023c6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80023b8:	231a      	movs	r3, #26
 80023ba:	2220      	movs	r2, #32
 80023bc:	189b      	adds	r3, r3, r2
 80023be:	19db      	adds	r3, r3, r7
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
        break;
 80023c4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80023c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d02a      	beq.n	8002422 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <UART_SetConfig+0x574>)
 80023d2:	0052      	lsls	r2, r2, #1
 80023d4:	5ad3      	ldrh	r3, [r2, r3]
 80023d6:	0019      	movs	r1, r3
 80023d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80023da:	f7fd fe9b 	bl	8000114 <__udivsi3>
 80023de:	0003      	movs	r3, r0
 80023e0:	001a      	movs	r2, r3
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	18d2      	adds	r2, r2, r3
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	0019      	movs	r1, r3
 80023f0:	0010      	movs	r0, r2
 80023f2:	f7fd fe8f 	bl	8000114 <__udivsi3>
 80023f6:	0003      	movs	r3, r0
 80023f8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fc:	2b0f      	cmp	r3, #15
 80023fe:	d90a      	bls.n	8002416 <UART_SetConfig+0x53a>
 8002400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002402:	2380      	movs	r3, #128	@ 0x80
 8002404:	025b      	lsls	r3, r3, #9
 8002406:	429a      	cmp	r2, r3
 8002408:	d205      	bcs.n	8002416 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240c:	b29a      	uxth	r2, r3
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	e005      	b.n	8002422 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002416:	231a      	movs	r3, #26
 8002418:	2220      	movs	r2, #32
 800241a:	189b      	adds	r3, r3, r2
 800241c:	19db      	adds	r3, r3, r7
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	226a      	movs	r2, #106	@ 0x6a
 8002426:	2101      	movs	r1, #1
 8002428:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	2268      	movs	r2, #104	@ 0x68
 800242e:	2101      	movs	r1, #1
 8002430:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	2200      	movs	r2, #0
 8002436:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	2200      	movs	r2, #0
 800243c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800243e:	231a      	movs	r3, #26
 8002440:	2220      	movs	r2, #32
 8002442:	189b      	adds	r3, r3, r2
 8002444:	19db      	adds	r3, r3, r7
 8002446:	781b      	ldrb	r3, [r3, #0]
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b010      	add	sp, #64	@ 0x40
 800244e:	bdb0      	pop	{r4, r5, r7, pc}
 8002450:	080035e8 	.word	0x080035e8
 8002454:	00f42400 	.word	0x00f42400

08002458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	2208      	movs	r2, #8
 8002466:	4013      	ands	r3, r2
 8002468:	d00b      	beq.n	8002482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a4a      	ldr	r2, [pc, #296]	@ (800259c <UART_AdvFeatureConfig+0x144>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	2201      	movs	r2, #1
 8002488:	4013      	ands	r3, r2
 800248a:	d00b      	beq.n	80024a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a43      	ldr	r2, [pc, #268]	@ (80025a0 <UART_AdvFeatureConfig+0x148>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	2202      	movs	r2, #2
 80024aa:	4013      	ands	r3, r2
 80024ac:	d00b      	beq.n	80024c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a3b      	ldr	r2, [pc, #236]	@ (80025a4 <UART_AdvFeatureConfig+0x14c>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	2204      	movs	r2, #4
 80024cc:	4013      	ands	r3, r2
 80024ce:	d00b      	beq.n	80024e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a34      	ldr	r2, [pc, #208]	@ (80025a8 <UART_AdvFeatureConfig+0x150>)
 80024d8:	4013      	ands	r3, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	2210      	movs	r2, #16
 80024ee:	4013      	ands	r3, r2
 80024f0:	d00b      	beq.n	800250a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4a2c      	ldr	r2, [pc, #176]	@ (80025ac <UART_AdvFeatureConfig+0x154>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250e:	2220      	movs	r2, #32
 8002510:	4013      	ands	r3, r2
 8002512:	d00b      	beq.n	800252c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4a25      	ldr	r2, [pc, #148]	@ (80025b0 <UART_AdvFeatureConfig+0x158>)
 800251c:	4013      	ands	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	2240      	movs	r2, #64	@ 0x40
 8002532:	4013      	ands	r3, r2
 8002534:	d01d      	beq.n	8002572 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <UART_AdvFeatureConfig+0x15c>)
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	035b      	lsls	r3, r3, #13
 8002556:	429a      	cmp	r2, r3
 8002558:	d10b      	bne.n	8002572 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a15      	ldr	r2, [pc, #84]	@ (80025b8 <UART_AdvFeatureConfig+0x160>)
 8002562:	4013      	ands	r3, r2
 8002564:	0019      	movs	r1, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002576:	2280      	movs	r2, #128	@ 0x80
 8002578:	4013      	ands	r3, r2
 800257a:	d00b      	beq.n	8002594 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <UART_AdvFeatureConfig+0x164>)
 8002584:	4013      	ands	r3, r2
 8002586:	0019      	movs	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
  }
}
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}
 800259c:	ffff7fff 	.word	0xffff7fff
 80025a0:	fffdffff 	.word	0xfffdffff
 80025a4:	fffeffff 	.word	0xfffeffff
 80025a8:	fffbffff 	.word	0xfffbffff
 80025ac:	ffffefff 	.word	0xffffefff
 80025b0:	ffffdfff 	.word	0xffffdfff
 80025b4:	ffefffff 	.word	0xffefffff
 80025b8:	ff9fffff 	.word	0xff9fffff
 80025bc:	fff7ffff 	.word	0xfff7ffff

080025c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b092      	sub	sp, #72	@ 0x48
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2290      	movs	r2, #144	@ 0x90
 80025cc:	2100      	movs	r1, #0
 80025ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025d0:	f7fe f8a8 	bl	8000724 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2208      	movs	r2, #8
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d12d      	bne.n	8002642 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e8:	2280      	movs	r2, #128	@ 0x80
 80025ea:	0391      	lsls	r1, r2, #14
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4a47      	ldr	r2, [pc, #284]	@ (800270c <UART_CheckIdleState+0x14c>)
 80025f0:	9200      	str	r2, [sp, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f000 f88e 	bl	8002714 <UART_WaitOnFlagUntilTimeout>
 80025f8:	1e03      	subs	r3, r0, #0
 80025fa:	d022      	beq.n	8002642 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002604:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002606:	2301      	movs	r3, #1
 8002608:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260c:	f383 8810 	msr	PRIMASK, r3
}
 8002610:	46c0      	nop			@ (mov r8, r8)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	438a      	bics	r2, r1
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002628:	f383 8810 	msr	PRIMASK, r3
}
 800262c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2288      	movs	r2, #136	@ 0x88
 8002632:	2120      	movs	r1, #32
 8002634:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2284      	movs	r2, #132	@ 0x84
 800263a:	2100      	movs	r1, #0
 800263c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e060      	b.n	8002704 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2204      	movs	r2, #4
 800264a:	4013      	ands	r3, r2
 800264c:	2b04      	cmp	r3, #4
 800264e:	d146      	bne.n	80026de <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002652:	2280      	movs	r2, #128	@ 0x80
 8002654:	03d1      	lsls	r1, r2, #15
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4a2c      	ldr	r2, [pc, #176]	@ (800270c <UART_CheckIdleState+0x14c>)
 800265a:	9200      	str	r2, [sp, #0]
 800265c:	2200      	movs	r2, #0
 800265e:	f000 f859 	bl	8002714 <UART_WaitOnFlagUntilTimeout>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d03b      	beq.n	80026de <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002666:	f3ef 8310 	mrs	r3, PRIMASK
 800266a:	60fb      	str	r3, [r7, #12]
  return(result);
 800266c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800266e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002670:	2301      	movs	r3, #1
 8002672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f383 8810 	msr	PRIMASK, r3
}
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4922      	ldr	r1, [pc, #136]	@ (8002710 <UART_CheckIdleState+0x150>)
 8002688:	400a      	ands	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002698:	f3ef 8310 	mrs	r3, PRIMASK
 800269c:	61bb      	str	r3, [r7, #24]
  return(result);
 800269e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80026a2:	2301      	movs	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f383 8810 	msr	PRIMASK, r3
}
 80026ac:	46c0      	nop			@ (mov r8, r8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	438a      	bics	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f383 8810 	msr	PRIMASK, r3
}
 80026c8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	228c      	movs	r2, #140	@ 0x8c
 80026ce:	2120      	movs	r1, #32
 80026d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2284      	movs	r2, #132	@ 0x84
 80026d6:	2100      	movs	r1, #0
 80026d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e012      	b.n	8002704 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2288      	movs	r2, #136	@ 0x88
 80026e2:	2120      	movs	r1, #32
 80026e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	228c      	movs	r2, #140	@ 0x8c
 80026ea:	2120      	movs	r1, #32
 80026ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2284      	movs	r2, #132	@ 0x84
 80026fe:	2100      	movs	r1, #0
 8002700:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b010      	add	sp, #64	@ 0x40
 800270a:	bd80      	pop	{r7, pc}
 800270c:	01ffffff 	.word	0x01ffffff
 8002710:	fffffedf 	.word	0xfffffedf

08002714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	1dfb      	adds	r3, r7, #7
 8002722:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002724:	e051      	b.n	80027ca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	3301      	adds	r3, #1
 800272a:	d04e      	beq.n	80027ca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272c:	f7fd fffa 	bl	8000724 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	429a      	cmp	r2, r3
 800273a:	d302      	bcc.n	8002742 <UART_WaitOnFlagUntilTimeout+0x2e>
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e051      	b.n	80027ea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2204      	movs	r2, #4
 800274e:	4013      	ands	r3, r2
 8002750:	d03b      	beq.n	80027ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b80      	cmp	r3, #128	@ 0x80
 8002756:	d038      	beq.n	80027ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b40      	cmp	r3, #64	@ 0x40
 800275c:	d035      	beq.n	80027ca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2208      	movs	r2, #8
 8002766:	4013      	ands	r3, r2
 8002768:	2b08      	cmp	r3, #8
 800276a:	d111      	bne.n	8002790 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2208      	movs	r2, #8
 8002772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	0018      	movs	r0, r3
 8002778:	f000 f83c 	bl	80027f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2290      	movs	r2, #144	@ 0x90
 8002780:	2108      	movs	r1, #8
 8002782:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2284      	movs	r2, #132	@ 0x84
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e02c      	b.n	80027ea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	401a      	ands	r2, r3
 800279c:	2380      	movs	r3, #128	@ 0x80
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d112      	bne.n	80027ca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 f81f 	bl	80027f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2290      	movs	r2, #144	@ 0x90
 80027ba:	2120      	movs	r1, #32
 80027bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2284      	movs	r2, #132	@ 0x84
 80027c2:	2100      	movs	r1, #0
 80027c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e00f      	b.n	80027ea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	425a      	negs	r2, r3
 80027da:	4153      	adcs	r3, r2
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	001a      	movs	r2, r3
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d09e      	beq.n	8002726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b004      	add	sp, #16
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08e      	sub	sp, #56	@ 0x38
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002800:	617b      	str	r3, [r7, #20]
  return(result);
 8002802:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002804:	637b      	str	r3, [r7, #52]	@ 0x34
 8002806:	2301      	movs	r3, #1
 8002808:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	f383 8810 	msr	PRIMASK, r3
}
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4926      	ldr	r1, [pc, #152]	@ (80028b8 <UART_EndRxTransfer+0xc4>)
 800281e:	400a      	ands	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002824:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f383 8810 	msr	PRIMASK, r3
}
 800282c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282e:	f3ef 8310 	mrs	r3, PRIMASK
 8002832:	623b      	str	r3, [r7, #32]
  return(result);
 8002834:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
 8002838:	2301      	movs	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	f383 8810 	msr	PRIMASK, r3
}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	491b      	ldr	r1, [pc, #108]	@ (80028bc <UART_EndRxTransfer+0xc8>)
 8002850:	400a      	ands	r2, r1
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002856:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	f383 8810 	msr	PRIMASK, r3
}
 800285e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d118      	bne.n	800289a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002868:	f3ef 8310 	mrs	r3, PRIMASK
 800286c:	60bb      	str	r3, [r7, #8]
  return(result);
 800286e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002872:	2301      	movs	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f383 8810 	msr	PRIMASK, r3
}
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2110      	movs	r1, #16
 800288a:	438a      	bics	r2, r1
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002890:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f383 8810 	msr	PRIMASK, r3
}
 8002898:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	228c      	movs	r2, #140	@ 0x8c
 800289e:	2120      	movs	r1, #32
 80028a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b00e      	add	sp, #56	@ 0x38
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	fffffedf 	.word	0xfffffedf
 80028bc:	effffffe 	.word	0xeffffffe

080028c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2284      	movs	r2, #132	@ 0x84
 80028cc:	5c9b      	ldrb	r3, [r3, r2]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e027      	b.n	8002926 <HAL_UARTEx_DisableFifoMode+0x66>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2284      	movs	r2, #132	@ 0x84
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2288      	movs	r2, #136	@ 0x88
 80028e2:	2124      	movs	r1, #36	@ 0x24
 80028e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	438a      	bics	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4a0b      	ldr	r2, [pc, #44]	@ (8002930 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2288      	movs	r2, #136	@ 0x88
 8002918:	2120      	movs	r1, #32
 800291a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2284      	movs	r2, #132	@ 0x84
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b004      	add	sp, #16
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	dfffffff 	.word	0xdfffffff

08002934 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2284      	movs	r2, #132	@ 0x84
 8002942:	5c9b      	ldrb	r3, [r3, r2]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002948:	2302      	movs	r3, #2
 800294a:	e02e      	b.n	80029aa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2284      	movs	r2, #132	@ 0x84
 8002950:	2101      	movs	r1, #1
 8002952:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2288      	movs	r2, #136	@ 0x88
 8002958:	2124      	movs	r1, #36	@ 0x24
 800295a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2101      	movs	r1, #1
 8002970:	438a      	bics	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	08d9      	lsrs	r1, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0018      	movs	r0, r3
 800298c:	f000 f854 	bl	8002a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2288      	movs	r2, #136	@ 0x88
 800299c:	2120      	movs	r1, #32
 800299e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2284      	movs	r2, #132	@ 0x84
 80029a4:	2100      	movs	r1, #0
 80029a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b004      	add	sp, #16
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2284      	movs	r2, #132	@ 0x84
 80029c2:	5c9b      	ldrb	r3, [r3, r2]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e02f      	b.n	8002a2c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2284      	movs	r2, #132	@ 0x84
 80029d0:	2101      	movs	r1, #1
 80029d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2288      	movs	r2, #136	@ 0x88
 80029d8:	2124      	movs	r1, #36	@ 0x24
 80029da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	438a      	bics	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002a34 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 f813 	bl	8002a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2288      	movs	r2, #136	@ 0x88
 8002a1e:	2120      	movs	r1, #32
 8002a20:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2284      	movs	r2, #132	@ 0x84
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b004      	add	sp, #16
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	f1ffffff 	.word	0xf1ffffff

08002a38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d108      	bne.n	8002a5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	226a      	movs	r2, #106	@ 0x6a
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2268      	movs	r2, #104	@ 0x68
 8002a54:	2101      	movs	r1, #1
 8002a56:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002a58:	e043      	b.n	8002ae2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002a5a:	260f      	movs	r6, #15
 8002a5c:	19bb      	adds	r3, r7, r6
 8002a5e:	2208      	movs	r2, #8
 8002a60:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002a62:	200e      	movs	r0, #14
 8002a64:	183b      	adds	r3, r7, r0
 8002a66:	2208      	movs	r2, #8
 8002a68:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	0e5b      	lsrs	r3, r3, #25
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	240d      	movs	r4, #13
 8002a76:	193b      	adds	r3, r7, r4
 8002a78:	2107      	movs	r1, #7
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	0f5b      	lsrs	r3, r3, #29
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	250c      	movs	r5, #12
 8002a8a:	197b      	adds	r3, r7, r5
 8002a8c:	2107      	movs	r1, #7
 8002a8e:	400a      	ands	r2, r1
 8002a90:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002a92:	183b      	adds	r3, r7, r0
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	197a      	adds	r2, r7, r5
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	4914      	ldr	r1, [pc, #80]	@ (8002aec <UARTEx_SetNbDataToProcess+0xb4>)
 8002a9c:	5c8a      	ldrb	r2, [r1, r2]
 8002a9e:	435a      	muls	r2, r3
 8002aa0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002aa2:	197b      	adds	r3, r7, r5
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <UARTEx_SetNbDataToProcess+0xb8>)
 8002aa8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002aaa:	0019      	movs	r1, r3
 8002aac:	f7fd fbbc 	bl	8000228 <__divsi3>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	b299      	uxth	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	226a      	movs	r2, #106	@ 0x6a
 8002ab8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002aba:	19bb      	adds	r3, r7, r6
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	193a      	adds	r2, r7, r4
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	490a      	ldr	r1, [pc, #40]	@ (8002aec <UARTEx_SetNbDataToProcess+0xb4>)
 8002ac4:	5c8a      	ldrb	r2, [r1, r2]
 8002ac6:	435a      	muls	r2, r3
 8002ac8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002aca:	193b      	adds	r3, r7, r4
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	4a08      	ldr	r2, [pc, #32]	@ (8002af0 <UARTEx_SetNbDataToProcess+0xb8>)
 8002ad0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	f7fd fba8 	bl	8000228 <__divsi3>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	b299      	uxth	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2268      	movs	r2, #104	@ 0x68
 8002ae0:	5299      	strh	r1, [r3, r2]
}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b005      	add	sp, #20
 8002ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	08003600 	.word	0x08003600
 8002af0:	08003608 	.word	0x08003608

08002af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afa:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <MX_DMA_Init+0x38>)
 8002afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002afe:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <MX_DMA_Init+0x38>)
 8002b00:	2101      	movs	r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b06:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <MX_DMA_Init+0x38>)
 8002b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	2009      	movs	r0, #9
 8002b18:	f7fd fede 	bl	80008d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b1c:	2009      	movs	r0, #9
 8002b1e:	f7fd fef0 	bl	8000902 <HAL_NVIC_EnableIRQ>

}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b002      	add	sp, #8
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	40021000 	.word	0x40021000

08002b30 <uartSend>:

//---------------------------IMPLICIT FUNCTIONS---------------------------
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 */
espat_state_t uartSend(espat_uartInstance_t *uart, char *data, uint32_t size) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit(uart->uart, (uint8_t*) data, size, uart->timeout)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	f7ff f923 	bl	8001d94 <HAL_UART_Transmit>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d101      	bne.n	8002b56 <uartSend+0x26>
			== HAL_OK)
		return ESPAT_STATE_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <uartSend+0x28>
	else
		return ESPAT_STATE_ERR;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b004      	add	sp, #16
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <espAt_Init>:
 * @param: timeout
 *
 * @retval: always ESPATHID_OK
 */
espat_state_t espAt_Init(espat_radio_t *radio, UART_HandleTypeDef *uart,
		uint32_t timeout) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]

	radio->uart->uart = uart;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	601a      	str	r2, [r3, #0]
	radio->uart->timeout = timeout;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	605a      	str	r2, [r3, #4]
	return ESPAT_STATE_OK;
 8002b7c:	2300      	movs	r3, #0

}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <espAt_sendCommand>:

espat_state_t espAt_sendCommand(espat_radio_t *radio, char *command,
		uint16_t paramCount, ...) {
 8002b88:	b40c      	push	{r2, r3}
 8002b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8c:	46c6      	mov	lr, r8
 8002b8e:	b500      	push	{lr}
 8002b90:	b0a2      	sub	sp, #136	@ 0x88
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002b96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b98:	466b      	mov	r3, sp
 8002b9a:	4698      	mov	r8, r3

	//check if command are valid
	if (command == NULL)
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <espAt_sendCommand+0x1e>
		return ESPAT_STATE_ERR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1b8      	b.n	8002f18 <espAt_sendCommand+0x390>

	va_list ap;
	va_start(ap, paramCount);
 8002ba6:	236c      	movs	r3, #108	@ 0x6c
 8002ba8:	2238      	movs	r2, #56	@ 0x38
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	19db      	adds	r3, r3, r7
 8002bae:	663b      	str	r3, [r7, #96]	@ 0x60

	//make parameters array
	uint32_t parameters[paramCount];
 8002bb0:	2368      	movs	r3, #104	@ 0x68
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	19db      	adds	r3, r3, r7
 8002bb6:	881a      	ldrh	r2, [r3, #0]
 8002bb8:	0013      	movs	r3, r2
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bbe:	61ba      	str	r2, [r7, #24]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69b8      	ldr	r0, [r7, #24]
 8002bc6:	69f9      	ldr	r1, [r7, #28]
 8002bc8:	0003      	movs	r3, r0
 8002bca:	0edb      	lsrs	r3, r3, #27
 8002bcc:	000e      	movs	r6, r1
 8002bce:	0175      	lsls	r5, r6, #5
 8002bd0:	431d      	orrs	r5, r3
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	015c      	lsls	r4, r3, #5
 8002bd6:	613a      	str	r2, [r7, #16]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	6938      	ldr	r0, [r7, #16]
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	0003      	movs	r3, r0
 8002be2:	0edb      	lsrs	r3, r3, #27
 8002be4:	000c      	movs	r4, r1
 8002be6:	0164      	lsls	r4, r4, #5
 8002be8:	637c      	str	r4, [r7, #52]	@ 0x34
 8002bea:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8002bec:	431c      	orrs	r4, r3
 8002bee:	637c      	str	r4, [r7, #52]	@ 0x34
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	015b      	lsls	r3, r3, #5
 8002bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bf6:	0013      	movs	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	3307      	adds	r3, #7
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	466a      	mov	r2, sp
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	469d      	mov	sp, r3
 8002c06:	466b      	mov	r3, sp
 8002c08:	3303      	adds	r3, #3
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	67bb      	str	r3, [r7, #120]	@ 0x78

	//fill parameters array
	for (uint16_t i = 0; i < paramCount; i++) {
 8002c10:	234e      	movs	r3, #78	@ 0x4e
 8002c12:	2238      	movs	r2, #56	@ 0x38
 8002c14:	189b      	adds	r3, r3, r2
 8002c16:	19db      	adds	r3, r3, r7
 8002c18:	2200      	movs	r2, #0
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	e012      	b.n	8002c44 <espAt_sendCommand+0xbc>
		parameters[i] = va_arg(ap, uint32_t);
 8002c1e:	204e      	movs	r0, #78	@ 0x4e
 8002c20:	2438      	movs	r4, #56	@ 0x38
 8002c22:	1903      	adds	r3, r0, r4
 8002c24:	19db      	adds	r3, r3, r7
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c2a:	1d19      	adds	r1, r3, #4
 8002c2c:	6639      	str	r1, [r7, #96]	@ 0x60
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	50d1      	str	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 8002c36:	1903      	adds	r3, r0, r4
 8002c38:	19db      	adds	r3, r3, r7
 8002c3a:	881a      	ldrh	r2, [r3, #0]
 8002c3c:	1903      	adds	r3, r0, r4
 8002c3e:	19db      	adds	r3, r3, r7
 8002c40:	3201      	adds	r2, #1
 8002c42:	801a      	strh	r2, [r3, #0]
 8002c44:	234e      	movs	r3, #78	@ 0x4e
 8002c46:	2138      	movs	r1, #56	@ 0x38
 8002c48:	185b      	adds	r3, r3, r1
 8002c4a:	19da      	adds	r2, r3, r7
 8002c4c:	2368      	movs	r3, #104	@ 0x68
 8002c4e:	185b      	adds	r3, r3, r1
 8002c50:	19db      	adds	r3, r3, r7
 8002c52:	8812      	ldrh	r2, [r2, #0]
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3e1      	bcc.n	8002c1e <espAt_sendCommand+0x96>
	}

	//make arguments list string
	uint16_t characterCounter = 0;
 8002c5a:	234c      	movs	r3, #76	@ 0x4c
 8002c5c:	185b      	adds	r3, r3, r1
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	2200      	movs	r2, #0
 8002c62:	801a      	strh	r2, [r3, #0]
	char argumentsBuffer[AT_BUFFER_SIZE];
	memset(argumentsBuffer, '\0', AT_BUFFER_SIZE);
 8002c64:	2308      	movs	r3, #8
 8002c66:	000c      	movs	r4, r1
 8002c68:	185b      	adds	r3, r3, r1
 8002c6a:	19db      	adds	r3, r3, r7
 8002c6c:	221e      	movs	r2, #30
 8002c6e:	2100      	movs	r1, #0
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 fc6b 	bl	800354c <memset>

	for (uint16_t i = 0; i < paramCount; i++) {
 8002c76:	234a      	movs	r3, #74	@ 0x4a
 8002c78:	191b      	adds	r3, r3, r4
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	801a      	strh	r2, [r3, #0]
 8002c80:	e049      	b.n	8002d16 <espAt_sendCommand+0x18e>
		itoa(parameters[i], &argumentsBuffer[characterCounter], 10);
 8002c82:	234a      	movs	r3, #74	@ 0x4a
 8002c84:	001e      	movs	r6, r3
 8002c86:	2138      	movs	r1, #56	@ 0x38
 8002c88:	185b      	adds	r3, r3, r1
 8002c8a:	19db      	adds	r3, r3, r7
 8002c8c:	881a      	ldrh	r2, [r3, #0]
 8002c8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c90:	0092      	lsls	r2, r2, #2
 8002c92:	58d3      	ldr	r3, [r2, r3]
 8002c94:	0018      	movs	r0, r3
 8002c96:	244c      	movs	r4, #76	@ 0x4c
 8002c98:	1863      	adds	r3, r4, r1
 8002c9a:	19db      	adds	r3, r3, r7
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	2508      	movs	r5, #8
 8002ca0:	186a      	adds	r2, r5, r1
 8002ca2:	19d2      	adds	r2, r2, r7
 8002ca4:	18d3      	adds	r3, r2, r3
 8002ca6:	220a      	movs	r2, #10
 8002ca8:	0019      	movs	r1, r3
 8002caa:	f000 fc16 	bl	80034da <itoa>
		characterCounter += strlen(&argumentsBuffer[characterCounter]) + 1;
 8002cae:	2038      	movs	r0, #56	@ 0x38
 8002cb0:	1823      	adds	r3, r4, r0
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	182a      	adds	r2, r5, r0
 8002cb8:	19d2      	adds	r2, r2, r7
 8002cba:	18d3      	adds	r3, r2, r3
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7fd fa21 	bl	8000104 <strlen>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	0021      	movs	r1, r4
 8002cc8:	2038      	movs	r0, #56	@ 0x38
 8002cca:	180b      	adds	r3, r1, r0
 8002ccc:	19db      	adds	r3, r3, r7
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	180b      	adds	r3, r1, r0
 8002cd6:	19db      	adds	r3, r3, r7
 8002cd8:	3201      	adds	r2, #1
 8002cda:	801a      	strh	r2, [r3, #0]
		if (i < paramCount - 1)
 8002cdc:	0033      	movs	r3, r6
 8002cde:	181b      	adds	r3, r3, r0
 8002ce0:	19db      	adds	r3, r3, r7
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	2368      	movs	r3, #104	@ 0x68
 8002ce6:	181b      	adds	r3, r3, r0
 8002ce8:	19db      	adds	r3, r3, r7
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	da08      	bge.n	8002d04 <espAt_sendCommand+0x17c>
			argumentsBuffer[characterCounter - 1] = ','; //add comma only if NOT last parameter
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	188b      	adds	r3, r1, r2
 8002cf6:	19db      	adds	r3, r3, r7
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	18aa      	adds	r2, r5, r2
 8002cfe:	19d2      	adds	r2, r2, r7
 8002d00:	212c      	movs	r1, #44	@ 0x2c
 8002d02:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 8002d04:	214a      	movs	r1, #74	@ 0x4a
 8002d06:	2038      	movs	r0, #56	@ 0x38
 8002d08:	180b      	adds	r3, r1, r0
 8002d0a:	19db      	adds	r3, r3, r7
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	180b      	adds	r3, r1, r0
 8002d10:	19db      	adds	r3, r3, r7
 8002d12:	3201      	adds	r2, #1
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	234a      	movs	r3, #74	@ 0x4a
 8002d18:	2638      	movs	r6, #56	@ 0x38
 8002d1a:	199b      	adds	r3, r3, r6
 8002d1c:	19da      	adds	r2, r3, r7
 8002d1e:	2368      	movs	r3, #104	@ 0x68
 8002d20:	199b      	adds	r3, r3, r6
 8002d22:	19db      	adds	r3, r3, r7
 8002d24:	8812      	ldrh	r2, [r2, #0]
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d3aa      	bcc.n	8002c82 <espAt_sendCommand+0xfa>
	}

	va_end(ap);

	//count buffer length
	uint16_t prefixLength = strlen(AT_PREFIX);
 8002d2c:	243e      	movs	r4, #62	@ 0x3e
 8002d2e:	19a3      	adds	r3, r4, r6
 8002d30:	19db      	adds	r3, r3, r7
 8002d32:	2203      	movs	r2, #3
 8002d34:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8002d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7fd f9e3 	bl	8000104 <strlen>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	253c      	movs	r5, #60	@ 0x3c
 8002d42:	19ab      	adds	r3, r5, r6
 8002d44:	19db      	adds	r3, r3, r7
 8002d46:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 8002d48:	213a      	movs	r1, #58	@ 0x3a
 8002d4a:	198b      	adds	r3, r1, r6
 8002d4c:	19db      	adds	r3, r3, r7
 8002d4e:	2201      	movs	r2, #1
 8002d50:	801a      	strh	r2, [r3, #0]
	uint16_t parametersLength = --characterCounter;
 8002d52:	224c      	movs	r2, #76	@ 0x4c
 8002d54:	0030      	movs	r0, r6
 8002d56:	1993      	adds	r3, r2, r6
 8002d58:	19db      	adds	r3, r3, r7
 8002d5a:	0016      	movs	r6, r2
 8002d5c:	1812      	adds	r2, r2, r0
 8002d5e:	19d2      	adds	r2, r2, r7
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	3a01      	subs	r2, #1
 8002d64:	801a      	strh	r2, [r3, #0]
 8002d66:	2038      	movs	r0, #56	@ 0x38
 8002d68:	2338      	movs	r3, #56	@ 0x38
 8002d6a:	18c2      	adds	r2, r0, r3
 8002d6c:	19d3      	adds	r3, r2, r7
 8002d6e:	0032      	movs	r2, r6
 8002d70:	2638      	movs	r6, #56	@ 0x38
 8002d72:	1992      	adds	r2, r2, r6
 8002d74:	19d2      	adds	r2, r2, r7
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8002d7a:	2336      	movs	r3, #54	@ 0x36
 8002d7c:	001e      	movs	r6, r3
 8002d7e:	2238      	movs	r2, #56	@ 0x38
 8002d80:	189a      	adds	r2, r3, r2
 8002d82:	19d3      	adds	r3, r2, r7
 8002d84:	2202      	movs	r2, #2
 8002d86:	801a      	strh	r2, [r3, #0]

	//create master buffer and clear it
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength + parametersLength
 8002d88:	2338      	movs	r3, #56	@ 0x38
 8002d8a:	18e2      	adds	r2, r4, r3
 8002d8c:	19d2      	adds	r2, r2, r7
 8002d8e:	18eb      	adds	r3, r5, r3
 8002d90:	19db      	adds	r3, r3, r7
 8002d92:	8812      	ldrh	r2, [r2, #0]
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	18d3      	adds	r3, r2, r3
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	2338      	movs	r3, #56	@ 0x38
 8002d9c:	18c9      	adds	r1, r1, r3
 8002d9e:	19cb      	adds	r3, r1, r7
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	18d3      	adds	r3, r2, r3
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	2338      	movs	r3, #56	@ 0x38
 8002da8:	18c1      	adds	r1, r0, r3
 8002daa:	19cb      	adds	r3, r1, r7
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	18d3      	adds	r3, r2, r3
 8002db0:	b299      	uxth	r1, r3
 8002db2:	2234      	movs	r2, #52	@ 0x34
 8002db4:	0010      	movs	r0, r2
 8002db6:	2338      	movs	r3, #56	@ 0x38
 8002db8:	18d2      	adds	r2, r2, r3
 8002dba:	19d3      	adds	r3, r2, r7
 8002dbc:	0032      	movs	r2, r6
 8002dbe:	2638      	movs	r6, #56	@ 0x38
 8002dc0:	1992      	adds	r2, r2, r6
 8002dc2:	19d2      	adds	r2, r2, r7
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	188a      	adds	r2, r1, r2
 8002dc8:	801a      	strh	r2, [r3, #0]
			+ endingLength;
	char buffer[bufferSize];
 8002dca:	0002      	movs	r2, r0
 8002dcc:	1993      	adds	r3, r2, r6
 8002dce:	19db      	adds	r3, r3, r7
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	001a      	movs	r2, r3
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	60fa      	str	r2, [r7, #12]
 8002dde:	68b8      	ldr	r0, [r7, #8]
 8002de0:	68f9      	ldr	r1, [r7, #12]
 8002de2:	0006      	movs	r6, r0
 8002de4:	0f72      	lsrs	r2, r6, #29
 8002de6:	000e      	movs	r6, r1
 8002de8:	00f6      	lsls	r6, r6, #3
 8002dea:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8002dec:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8002dee:	4316      	orrs	r6, r2
 8002df0:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8002df2:	0006      	movs	r6, r0
 8002df4:	00f6      	lsls	r6, r6, #3
 8002df6:	62be      	str	r6, [r7, #40]	@ 0x28
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	6838      	ldr	r0, [r7, #0]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	0006      	movs	r6, r0
 8002e04:	0f72      	lsrs	r2, r6, #29
 8002e06:	000e      	movs	r6, r1
 8002e08:	00f6      	lsls	r6, r6, #3
 8002e0a:	627e      	str	r6, [r7, #36]	@ 0x24
 8002e0c:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8002e0e:	4316      	orrs	r6, r2
 8002e10:	627e      	str	r6, [r7, #36]	@ 0x24
 8002e12:	0006      	movs	r6, r0
 8002e14:	00f6      	lsls	r6, r6, #3
 8002e16:	623e      	str	r6, [r7, #32]
 8002e18:	3307      	adds	r3, #7
 8002e1a:	08db      	lsrs	r3, r3, #3
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	466e      	mov	r6, sp
 8002e20:	1af6      	subs	r6, r6, r3
 8002e22:	46b5      	mov	sp, r6
 8002e24:	466b      	mov	r3, sp
 8002e26:	3300      	adds	r3, #0
 8002e28:	667b      	str	r3, [r7, #100]	@ 0x64
	memset(buffer, ' ', bufferSize);
 8002e2a:	2234      	movs	r2, #52	@ 0x34
 8002e2c:	2638      	movs	r6, #56	@ 0x38
 8002e2e:	1993      	adds	r3, r2, r6
 8002e30:	19db      	adds	r3, r3, r7
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e36:	2120      	movs	r1, #32
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 fb87 	bl	800354c <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8002e3e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002e40:	19a3      	adds	r3, r4, r6
 8002e42:	19db      	adds	r3, r3, r7
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <espAt_sendCommand+0x3a4>)
 8002e48:	0019      	movs	r1, r3
 8002e4a:	f000 fbab 	bl	80035a4 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8002e4e:	0031      	movs	r1, r6
 8002e50:	19a3      	adds	r3, r4, r6
 8002e52:	19db      	adds	r3, r3, r7
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002e58:	18d0      	adds	r0, r2, r3
 8002e5a:	000e      	movs	r6, r1
 8002e5c:	186b      	adds	r3, r5, r1
 8002e5e:	19db      	adds	r3, r3, r7
 8002e60:	881a      	ldrh	r2, [r3, #0]
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e64:	0019      	movs	r1, r3
 8002e66:	f000 fb9d 	bl	80035a4 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8002e6a:	0031      	movs	r1, r6
 8002e6c:	1863      	adds	r3, r4, r1
 8002e6e:	19db      	adds	r3, r3, r7
 8002e70:	881a      	ldrh	r2, [r3, #0]
 8002e72:	1868      	adds	r0, r5, r1
 8002e74:	19c3      	adds	r3, r0, r7
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002e7c:	18d0      	adds	r0, r2, r3
 8002e7e:	213a      	movs	r1, #58	@ 0x3a
 8002e80:	000e      	movs	r6, r1
 8002e82:	2338      	movs	r3, #56	@ 0x38
 8002e84:	18ca      	adds	r2, r1, r3
 8002e86:	19d3      	adds	r3, r2, r7
 8002e88:	881a      	ldrh	r2, [r3, #0]
 8002e8a:	4b29      	ldr	r3, [pc, #164]	@ (8002f30 <espAt_sendCommand+0x3a8>)
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	f000 fb89 	bl	80035a4 <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8002e92:	2038      	movs	r0, #56	@ 0x38
 8002e94:	1823      	adds	r3, r4, r0
 8002e96:	19db      	adds	r3, r3, r7
 8002e98:	881a      	ldrh	r2, [r3, #0]
 8002e9a:	182b      	adds	r3, r5, r0
 8002e9c:	19db      	adds	r3, r3, r7
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	18d2      	adds	r2, r2, r3
 8002ea2:	0031      	movs	r1, r6
 8002ea4:	0006      	movs	r6, r0
 8002ea6:	180b      	adds	r3, r1, r0
 8002ea8:	19db      	adds	r3, r3, r7
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002eb0:	18d0      	adds	r0, r2, r3
 8002eb2:	2338      	movs	r3, #56	@ 0x38
 8002eb4:	0031      	movs	r1, r6
 8002eb6:	199b      	adds	r3, r3, r6
 8002eb8:	19db      	adds	r3, r3, r7
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	2608      	movs	r6, #8
 8002ebe:	1873      	adds	r3, r6, r1
 8002ec0:	19db      	adds	r3, r3, r7
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	f000 fb6e 	bl	80035a4 <memcpy>
			argumentsBuffer, parametersLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8002ec8:	2638      	movs	r6, #56	@ 0x38
 8002eca:	19a3      	adds	r3, r4, r6
 8002ecc:	19db      	adds	r3, r3, r7
 8002ece:	881a      	ldrh	r2, [r3, #0]
 8002ed0:	0034      	movs	r4, r6
 8002ed2:	192b      	adds	r3, r5, r4
 8002ed4:	19db      	adds	r3, r3, r7
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	18d2      	adds	r2, r2, r3
 8002eda:	213a      	movs	r1, #58	@ 0x3a
 8002edc:	190b      	adds	r3, r1, r4
 8002ede:	19db      	adds	r3, r3, r7
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	18d2      	adds	r2, r2, r3
					+ parametersLength], AT_ENDING, endingLength);
 8002ee4:	2338      	movs	r3, #56	@ 0x38
 8002ee6:	191b      	adds	r3, r3, r4
 8002ee8:	19db      	adds	r3, r3, r7
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8002eee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ef0:	18d0      	adds	r0, r2, r3
	memcpy(
 8002ef2:	2336      	movs	r3, #54	@ 0x36
 8002ef4:	191b      	adds	r3, r3, r4
 8002ef6:	19db      	adds	r3, r3, r7
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <espAt_sendCommand+0x3ac>)
 8002efc:	0019      	movs	r1, r3
 8002efe:	f000 fb51 	bl	80035a4 <memcpy>

	uartSend(radio->uart, buffer, bufferSize);
 8002f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	2234      	movs	r2, #52	@ 0x34
 8002f08:	1913      	adds	r3, r2, r4
 8002f0a:	19db      	adds	r3, r3, r7
 8002f0c:	881a      	ldrh	r2, [r3, #0]
 8002f0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f10:	0019      	movs	r1, r3
 8002f12:	f7ff fe0d 	bl	8002b30 <uartSend>

	return ESPAT_STATE_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	46c5      	mov	sp, r8

}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b022      	add	sp, #136	@ 0x88
 8002f20:	bc80      	pop	{r7}
 8002f22:	46b8      	mov	r8, r7
 8002f24:	bcf0      	pop	{r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	b002      	add	sp, #8
 8002f2a:	4718      	bx	r3
 8002f2c:	080035d0 	.word	0x080035d0
 8002f30:	080035d4 	.word	0x080035d4
 8002f34:	080035d8 	.word	0x080035d8

08002f38 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b089      	sub	sp, #36	@ 0x24
 8002f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3e:	240c      	movs	r4, #12
 8002f40:	193b      	adds	r3, r7, r4
 8002f42:	0018      	movs	r0, r3
 8002f44:	2314      	movs	r3, #20
 8002f46:	001a      	movs	r2, r3
 8002f48:	2100      	movs	r1, #0
 8002f4a:	f000 faff 	bl	800354c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4e:	4b23      	ldr	r3, [pc, #140]	@ (8002fdc <MX_GPIO_Init+0xa4>)
 8002f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f52:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <MX_GPIO_Init+0xa4>)
 8002f54:	2104      	movs	r1, #4
 8002f56:	430a      	orrs	r2, r1
 8002f58:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <MX_GPIO_Init+0xa4>)
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5e:	2204      	movs	r2, #4
 8002f60:	4013      	ands	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <MX_GPIO_Init+0xa4>)
 8002f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fdc <MX_GPIO_Init+0xa4>)
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f72:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <MX_GPIO_Init+0xa4>)
 8002f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f76:	2201      	movs	r2, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002f7e:	23a0      	movs	r3, #160	@ 0xa0
 8002f80:	05db      	lsls	r3, r3, #23
 8002f82:	2200      	movs	r2, #0
 8002f84:	2120      	movs	r1, #32
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7fd ffc8 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	2280      	movs	r2, #128	@ 0x80
 8002f90:	0192      	lsls	r2, r2, #6
 8002f92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	2200      	movs	r2, #0
 8002f98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	193b      	adds	r3, r7, r4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002fa0:	193b      	adds	r3, r7, r4
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe0 <MX_GPIO_Init+0xa8>)
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	0010      	movs	r0, r2
 8002fa8:	f7fd fe54 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002fac:	0021      	movs	r1, r4
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002fc6:	187a      	adds	r2, r7, r1
 8002fc8:	23a0      	movs	r3, #160	@ 0xa0
 8002fca:	05db      	lsls	r3, r3, #23
 8002fcc:	0011      	movs	r1, r2
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f7fd fe40 	bl	8000c54 <HAL_GPIO_Init>

}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b009      	add	sp, #36	@ 0x24
 8002fda:	bd90      	pop	{r4, r7, pc}
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	50000800 	.word	0x50000800

08002fe4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002fe8:	f7fd fb20 	bl	800062c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002fec:	f000 f822 	bl	8003034 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ff0:	f7ff ffa2 	bl	8002f38 <MX_GPIO_Init>
	MX_DMA_Init();
 8002ff4:	f7ff fd7e 	bl	8002af4 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8002ff8:	f000 f8ba 	bl	8003170 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002ffc:	f000 f906 	bl	800320c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(3000);
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <main+0x40>)
 8003002:	0018      	movs	r0, r3
 8003004:	f7fd fb98 	bl	8000738 <HAL_Delay>
	espAt_Init(&bleRadio, &huart1, 50);
 8003008:	4907      	ldr	r1, [pc, #28]	@ (8003028 <main+0x44>)
 800300a:	4b08      	ldr	r3, [pc, #32]	@ (800302c <main+0x48>)
 800300c:	2232      	movs	r2, #50	@ 0x32
 800300e:	0018      	movs	r0, r3
 8003010:	f7ff fda6 	bl	8002b60 <espAt_Init>
	espAt_sendCommand(&bleRadio, BLEHIDINIT, 1, 1);
 8003014:	4906      	ldr	r1, [pc, #24]	@ (8003030 <main+0x4c>)
 8003016:	4805      	ldr	r0, [pc, #20]	@ (800302c <main+0x48>)
 8003018:	2301      	movs	r3, #1
 800301a:	2201      	movs	r2, #1
 800301c:	f7ff fdb4 	bl	8002b88 <espAt_sendCommand>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	e7fd      	b.n	8003020 <main+0x3c>
 8003024:	00000bb8 	.word	0x00000bb8
 8003028:	20000030 	.word	0x20000030
 800302c:	2000002c 	.word	0x2000002c
 8003030:	080035dc 	.word	0x080035dc

08003034 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b093      	sub	sp, #76	@ 0x4c
 8003038:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800303a:	2410      	movs	r4, #16
 800303c:	193b      	adds	r3, r7, r4
 800303e:	0018      	movs	r0, r3
 8003040:	2338      	movs	r3, #56	@ 0x38
 8003042:	001a      	movs	r2, r3
 8003044:	2100      	movs	r1, #0
 8003046:	f000 fa81 	bl	800354c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800304a:	003b      	movs	r3, r7
 800304c:	0018      	movs	r0, r3
 800304e:	2310      	movs	r3, #16
 8003050:	001a      	movs	r2, r3
 8003052:	2100      	movs	r1, #0
 8003054:	f000 fa7a 	bl	800354c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003058:	2380      	movs	r3, #128	@ 0x80
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	0018      	movs	r0, r3
 800305e:	f7fd ff7b 	bl	8000f58 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003062:	193b      	adds	r3, r7, r4
 8003064:	2202      	movs	r2, #2
 8003066:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003068:	193b      	adds	r3, r7, r4
 800306a:	2280      	movs	r2, #128	@ 0x80
 800306c:	0052      	lsls	r2, r2, #1
 800306e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003070:	193b      	adds	r3, r7, r4
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003076:	193b      	adds	r3, r7, r4
 8003078:	2240      	movs	r2, #64	@ 0x40
 800307a:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800307c:	193b      	adds	r3, r7, r4
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003082:	193b      	adds	r3, r7, r4
 8003084:	0018      	movs	r0, r3
 8003086:	f7fd ffb3 	bl	8000ff0 <HAL_RCC_OscConfig>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d001      	beq.n	8003092 <SystemClock_Config+0x5e>
		Error_Handler();
 800308e:	f000 f819 	bl	80030c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003092:	003b      	movs	r3, r7
 8003094:	2207      	movs	r2, #7
 8003096:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003098:	003b      	movs	r3, r7
 800309a:	2200      	movs	r2, #0
 800309c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800309e:	003b      	movs	r3, r7
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030a4:	003b      	movs	r3, r7
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80030aa:	003b      	movs	r3, r7
 80030ac:	2100      	movs	r1, #0
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7fe fab8 	bl	8001624 <HAL_RCC_ClockConfig>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	d001      	beq.n	80030bc <SystemClock_Config+0x88>
		Error_Handler();
 80030b8:	f000 f804 	bl	80030c4 <Error_Handler>
	}
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b013      	add	sp, #76	@ 0x4c
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030c8:	b672      	cpsid	i
}
 80030ca:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	e7fd      	b.n	80030cc <Error_Handler+0x8>

080030d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003114 <HAL_MspInit+0x44>)
 80030d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030da:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <HAL_MspInit+0x44>)
 80030dc:	2101      	movs	r1, #1
 80030de:	430a      	orrs	r2, r1
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80030e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <HAL_MspInit+0x44>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <HAL_MspInit+0x44>)
 80030f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030f2:	4b08      	ldr	r3, [pc, #32]	@ (8003114 <HAL_MspInit+0x44>)
 80030f4:	2180      	movs	r1, #128	@ 0x80
 80030f6:	0549      	lsls	r1, r1, #21
 80030f8:	430a      	orrs	r2, r1
 80030fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_MspInit+0x44>)
 80030fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003100:	2380      	movs	r3, #128	@ 0x80
 8003102:	055b      	lsls	r3, r3, #21
 8003104:	4013      	ands	r3, r2
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b002      	add	sp, #8
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	40021000 	.word	0x40021000

08003118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800311c:	46c0      	nop			@ (mov r8, r8)
 800311e:	e7fd      	b.n	800311c <NMI_Handler+0x4>

08003120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	e7fd      	b.n	8003124 <HardFault_Handler+0x4>

08003128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003140:	f7fd fade 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003150:	4b03      	ldr	r3, [pc, #12]	@ (8003160 <DMA1_Channel1_IRQHandler+0x14>)
 8003152:	0018      	movs	r0, r3
 8003154:	f7fd fc7c 	bl	8000a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003158:	46c0      	nop			@ (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	20000158 	.word	0x20000158

08003164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003168:	46c0      	nop			@ (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003174:	4b23      	ldr	r3, [pc, #140]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 8003176:	4a24      	ldr	r2, [pc, #144]	@ (8003208 <MX_USART1_UART_Init+0x98>)
 8003178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800317a:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 800317c:	22e1      	movs	r2, #225	@ 0xe1
 800317e:	0252      	lsls	r2, r2, #9
 8003180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003182:	4b20      	ldr	r3, [pc, #128]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003188:	4b1e      	ldr	r3, [pc, #120]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800318e:	4b1d      	ldr	r3, [pc, #116]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003194:	4b1b      	ldr	r3, [pc, #108]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 8003196:	220c      	movs	r2, #12
 8003198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800319a:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a0:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031a6:	4b17      	ldr	r3, [pc, #92]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031ac:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b2:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031b8:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7fe fd94 	bl	8001ce8 <HAL_UART_Init>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	d001      	beq.n	80031c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80031c4:	f7ff ff7e 	bl	80030c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 80031ca:	2100      	movs	r1, #0
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7ff fbb1 	bl	8002934 <HAL_UARTEx_SetTxFifoThreshold>
 80031d2:	1e03      	subs	r3, r0, #0
 80031d4:	d001      	beq.n	80031da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80031d6:	f7ff ff75 	bl	80030c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031da:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 80031dc:	2100      	movs	r1, #0
 80031de:	0018      	movs	r0, r3
 80031e0:	f7ff fbe8 	bl	80029b4 <HAL_UARTEx_SetRxFifoThreshold>
 80031e4:	1e03      	subs	r3, r0, #0
 80031e6:	d001      	beq.n	80031ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80031e8:	f7ff ff6c 	bl	80030c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7ff fb66 	bl	80028c0 <HAL_UARTEx_DisableFifoMode>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80031f8:	f7ff ff64 	bl	80030c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031fc:	46c0      	nop			@ (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	20000030 	.word	0x20000030
 8003208:	40013800 	.word	0x40013800

0800320c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003210:	4b23      	ldr	r3, [pc, #140]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003212:	4a24      	ldr	r2, [pc, #144]	@ (80032a4 <MX_USART2_UART_Init+0x98>)
 8003214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003216:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003218:	22e1      	movs	r2, #225	@ 0xe1
 800321a:	0252      	lsls	r2, r2, #9
 800321c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003224:	4b1e      	ldr	r3, [pc, #120]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800322a:	4b1d      	ldr	r3, [pc, #116]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003230:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003232:	220c      	movs	r2, #12
 8003234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003236:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800323c:	4b18      	ldr	r3, [pc, #96]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003242:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003244:	2200      	movs	r2, #0
 8003246:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003248:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800324e:	4b14      	ldr	r3, [pc, #80]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003250:	2200      	movs	r2, #0
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003254:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003256:	0018      	movs	r0, r3
 8003258:	f7fe fd46 	bl	8001ce8 <HAL_UART_Init>
 800325c:	1e03      	subs	r3, r0, #0
 800325e:	d001      	beq.n	8003264 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003260:	f7ff ff30 	bl	80030c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003264:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003266:	2100      	movs	r1, #0
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff fb63 	bl	8002934 <HAL_UARTEx_SetTxFifoThreshold>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d001      	beq.n	8003276 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003272:	f7ff ff27 	bl	80030c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 8003278:	2100      	movs	r1, #0
 800327a:	0018      	movs	r0, r3
 800327c:	f7ff fb9a 	bl	80029b4 <HAL_UARTEx_SetRxFifoThreshold>
 8003280:	1e03      	subs	r3, r0, #0
 8003282:	d001      	beq.n	8003288 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003284:	f7ff ff1e 	bl	80030c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003288:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <MX_USART2_UART_Init+0x94>)
 800328a:	0018      	movs	r0, r3
 800328c:	f7ff fb18 	bl	80028c0 <HAL_UARTEx_DisableFifoMode>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003294:	f7ff ff16 	bl	80030c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003298:	46c0      	nop			@ (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	200000c4 	.word	0x200000c4
 80032a4:	40004400 	.word	0x40004400

080032a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b099      	sub	sp, #100	@ 0x64
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	234c      	movs	r3, #76	@ 0x4c
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	0018      	movs	r0, r3
 80032b6:	2314      	movs	r3, #20
 80032b8:	001a      	movs	r2, r3
 80032ba:	2100      	movs	r1, #0
 80032bc:	f000 f946 	bl	800354c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032c0:	2418      	movs	r4, #24
 80032c2:	193b      	adds	r3, r7, r4
 80032c4:	0018      	movs	r0, r3
 80032c6:	2334      	movs	r3, #52	@ 0x34
 80032c8:	001a      	movs	r2, r3
 80032ca:	2100      	movs	r1, #0
 80032cc:	f000 f93e 	bl	800354c <memset>
  if(uartHandle->Instance==USART1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003440 <HAL_UART_MspInit+0x198>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d168      	bne.n	80033ac <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80032e0:	193b      	adds	r3, r7, r4
 80032e2:	2200      	movs	r2, #0
 80032e4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7fe fb45 	bl	8001978 <HAL_RCCEx_PeriphCLKConfig>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80032f2:	f7ff fee7 	bl	80030c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032f6:	4b53      	ldr	r3, [pc, #332]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 80032f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032fa:	4b52      	ldr	r3, [pc, #328]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	01c9      	lsls	r1, r1, #7
 8003300:	430a      	orrs	r2, r1
 8003302:	641a      	str	r2, [r3, #64]	@ 0x40
 8003304:	4b4f      	ldr	r3, [pc, #316]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 8003306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003308:	2380      	movs	r3, #128	@ 0x80
 800330a:	01db      	lsls	r3, r3, #7
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003312:	4b4c      	ldr	r3, [pc, #304]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 8003314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003316:	4b4b      	ldr	r3, [pc, #300]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 8003318:	2104      	movs	r1, #4
 800331a:	430a      	orrs	r2, r1
 800331c:	635a      	str	r2, [r3, #52]	@ 0x34
 800331e:	4b49      	ldr	r3, [pc, #292]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 8003320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003322:	2204      	movs	r2, #4
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 800332a:	214c      	movs	r1, #76	@ 0x4c
 800332c:	187b      	adds	r3, r7, r1
 800332e:	2230      	movs	r2, #48	@ 0x30
 8003330:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2202      	movs	r2, #2
 8003336:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	187b      	adds	r3, r7, r1
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	187b      	adds	r3, r7, r1
 8003340:	2200      	movs	r2, #0
 8003342:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003344:	187b      	adds	r3, r7, r1
 8003346:	2201      	movs	r2, #1
 8003348:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334a:	187b      	adds	r3, r7, r1
 800334c:	4a3e      	ldr	r2, [pc, #248]	@ (8003448 <HAL_UART_MspInit+0x1a0>)
 800334e:	0019      	movs	r1, r3
 8003350:	0010      	movs	r0, r2
 8003352:	f7fd fc7f 	bl	8000c54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003356:	4b3d      	ldr	r3, [pc, #244]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 8003358:	4a3d      	ldr	r2, [pc, #244]	@ (8003450 <HAL_UART_MspInit+0x1a8>)
 800335a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800335c:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 800335e:	2232      	movs	r2, #50	@ 0x32
 8003360:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003362:	4b3a      	ldr	r3, [pc, #232]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003368:	4b38      	ldr	r3, [pc, #224]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 800336a:	2200      	movs	r2, #0
 800336c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800336e:	4b37      	ldr	r3, [pc, #220]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 8003370:	2280      	movs	r2, #128	@ 0x80
 8003372:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003374:	4b35      	ldr	r3, [pc, #212]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 8003376:	2200      	movs	r2, #0
 8003378:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800337a:	4b34      	ldr	r3, [pc, #208]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003380:	4b32      	ldr	r3, [pc, #200]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 8003382:	2220      	movs	r2, #32
 8003384:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003386:	4b31      	ldr	r3, [pc, #196]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 8003388:	2200      	movs	r2, #0
 800338a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800338c:	4b2f      	ldr	r3, [pc, #188]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 800338e:	0018      	movs	r0, r3
 8003390:	f7fd fad4 	bl	800093c <HAL_DMA_Init>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8003398:	f7ff fe94 	bl	80030c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2180      	movs	r1, #128	@ 0x80
 80033a0:	4a2a      	ldr	r2, [pc, #168]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 80033a2:	505a      	str	r2, [r3, r1]
 80033a4:	4b29      	ldr	r3, [pc, #164]	@ (800344c <HAL_UART_MspInit+0x1a4>)
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033aa:	e044      	b.n	8003436 <HAL_UART_MspInit+0x18e>
  else if(uartHandle->Instance==USART2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a28      	ldr	r2, [pc, #160]	@ (8003454 <HAL_UART_MspInit+0x1ac>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d13f      	bne.n	8003436 <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033b6:	2118      	movs	r1, #24
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	2202      	movs	r2, #2
 80033bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033be:	187b      	adds	r3, r7, r1
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fe fad6 	bl	8001978 <HAL_RCCEx_PeriphCLKConfig>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 80033d0:	f7ff fe78 	bl	80030c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 80033d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 80033da:	2180      	movs	r1, #128	@ 0x80
 80033dc:	0289      	lsls	r1, r1, #10
 80033de:	430a      	orrs	r2, r1
 80033e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033e2:	4b18      	ldr	r3, [pc, #96]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 80033e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	029b      	lsls	r3, r3, #10
 80033ea:	4013      	ands	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f0:	4b14      	ldr	r3, [pc, #80]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 80033f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f4:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 80033f6:	2101      	movs	r1, #1
 80033f8:	430a      	orrs	r2, r1
 80033fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80033fc:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <HAL_UART_MspInit+0x19c>)
 80033fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003400:	2201      	movs	r2, #1
 8003402:	4013      	ands	r3, r2
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003408:	214c      	movs	r1, #76	@ 0x4c
 800340a:	187b      	adds	r3, r7, r1
 800340c:	220c      	movs	r2, #12
 800340e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	187b      	adds	r3, r7, r1
 8003412:	2202      	movs	r2, #2
 8003414:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	187b      	adds	r3, r7, r1
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	187b      	adds	r3, r7, r1
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003422:	187b      	adds	r3, r7, r1
 8003424:	2201      	movs	r2, #1
 8003426:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	187a      	adds	r2, r7, r1
 800342a:	23a0      	movs	r3, #160	@ 0xa0
 800342c:	05db      	lsls	r3, r3, #23
 800342e:	0011      	movs	r1, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f7fd fc0f 	bl	8000c54 <HAL_GPIO_Init>
}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b019      	add	sp, #100	@ 0x64
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	40013800 	.word	0x40013800
 8003444:	40021000 	.word	0x40021000
 8003448:	50000800 	.word	0x50000800
 800344c:	20000158 	.word	0x20000158
 8003450:	40020008 	.word	0x40020008
 8003454:	40004400 	.word	0x40004400

08003458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003458:	480d      	ldr	r0, [pc, #52]	@ (8003490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800345a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800345c:	f7ff fe82 	bl	8003164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003460:	480c      	ldr	r0, [pc, #48]	@ (8003494 <LoopForever+0x6>)
  ldr r1, =_edata
 8003462:	490d      	ldr	r1, [pc, #52]	@ (8003498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003464:	4a0d      	ldr	r2, [pc, #52]	@ (800349c <LoopForever+0xe>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003468:	e002      	b.n	8003470 <LoopCopyDataInit>

0800346a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800346a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800346c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346e:	3304      	adds	r3, #4

08003470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003474:	d3f9      	bcc.n	800346a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003476:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003478:	4c0a      	ldr	r4, [pc, #40]	@ (80034a4 <LoopForever+0x16>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800347c:	e001      	b.n	8003482 <LoopFillZerobss>

0800347e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003480:	3204      	adds	r2, #4

08003482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003484:	d3fb      	bcc.n	800347e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003486:	f000 f869 	bl	800355c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800348a:	f7ff fdab 	bl	8002fe4 <main>

0800348e <LoopForever>:

LoopForever:
  b LoopForever
 800348e:	e7fe      	b.n	800348e <LoopForever>
  ldr   r0, =_estack
 8003490:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003498:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800349c:	080036a8 	.word	0x080036a8
  ldr r2, =_sbss
 80034a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80034a4:	200001b4 	.word	0x200001b4

080034a8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034a8:	e7fe      	b.n	80034a8 <ADC1_COMP_IRQHandler>

080034aa <__itoa>:
 80034aa:	1e93      	subs	r3, r2, #2
 80034ac:	b510      	push	{r4, lr}
 80034ae:	000c      	movs	r4, r1
 80034b0:	2b22      	cmp	r3, #34	@ 0x22
 80034b2:	d904      	bls.n	80034be <__itoa+0x14>
 80034b4:	2300      	movs	r3, #0
 80034b6:	001c      	movs	r4, r3
 80034b8:	700b      	strb	r3, [r1, #0]
 80034ba:	0020      	movs	r0, r4
 80034bc:	bd10      	pop	{r4, pc}
 80034be:	2a0a      	cmp	r2, #10
 80034c0:	d109      	bne.n	80034d6 <__itoa+0x2c>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	da07      	bge.n	80034d6 <__itoa+0x2c>
 80034c6:	232d      	movs	r3, #45	@ 0x2d
 80034c8:	700b      	strb	r3, [r1, #0]
 80034ca:	2101      	movs	r1, #1
 80034cc:	4240      	negs	r0, r0
 80034ce:	1861      	adds	r1, r4, r1
 80034d0:	f000 f808 	bl	80034e4 <__utoa>
 80034d4:	e7f1      	b.n	80034ba <__itoa+0x10>
 80034d6:	2100      	movs	r1, #0
 80034d8:	e7f9      	b.n	80034ce <__itoa+0x24>

080034da <itoa>:
 80034da:	b510      	push	{r4, lr}
 80034dc:	f7ff ffe5 	bl	80034aa <__itoa>
 80034e0:	bd10      	pop	{r4, pc}
	...

080034e4 <__utoa>:
 80034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e6:	000c      	movs	r4, r1
 80034e8:	0016      	movs	r6, r2
 80034ea:	b08d      	sub	sp, #52	@ 0x34
 80034ec:	2225      	movs	r2, #37	@ 0x25
 80034ee:	0007      	movs	r7, r0
 80034f0:	4915      	ldr	r1, [pc, #84]	@ (8003548 <__utoa+0x64>)
 80034f2:	a802      	add	r0, sp, #8
 80034f4:	f000 f856 	bl	80035a4 <memcpy>
 80034f8:	1e62      	subs	r2, r4, #1
 80034fa:	1eb3      	subs	r3, r6, #2
 80034fc:	2500      	movs	r5, #0
 80034fe:	9201      	str	r2, [sp, #4]
 8003500:	2b22      	cmp	r3, #34	@ 0x22
 8003502:	d904      	bls.n	800350e <__utoa+0x2a>
 8003504:	7025      	strb	r5, [r4, #0]
 8003506:	002c      	movs	r4, r5
 8003508:	0020      	movs	r0, r4
 800350a:	b00d      	add	sp, #52	@ 0x34
 800350c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350e:	0038      	movs	r0, r7
 8003510:	0031      	movs	r1, r6
 8003512:	f7fc fe85 	bl	8000220 <__aeabi_uidivmod>
 8003516:	000b      	movs	r3, r1
 8003518:	aa02      	add	r2, sp, #8
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	9a01      	ldr	r2, [sp, #4]
 800351e:	0029      	movs	r1, r5
 8003520:	3501      	adds	r5, #1
 8003522:	5553      	strb	r3, [r2, r5]
 8003524:	003b      	movs	r3, r7
 8003526:	0007      	movs	r7, r0
 8003528:	429e      	cmp	r6, r3
 800352a:	d9f0      	bls.n	800350e <__utoa+0x2a>
 800352c:	2300      	movs	r3, #0
 800352e:	0022      	movs	r2, r4
 8003530:	5563      	strb	r3, [r4, r5]
 8003532:	000b      	movs	r3, r1
 8003534:	1ac8      	subs	r0, r1, r3
 8003536:	4283      	cmp	r3, r0
 8003538:	dde6      	ble.n	8003508 <__utoa+0x24>
 800353a:	7810      	ldrb	r0, [r2, #0]
 800353c:	5ce5      	ldrb	r5, [r4, r3]
 800353e:	7015      	strb	r5, [r2, #0]
 8003540:	54e0      	strb	r0, [r4, r3]
 8003542:	3201      	adds	r2, #1
 8003544:	3b01      	subs	r3, #1
 8003546:	e7f5      	b.n	8003534 <__utoa+0x50>
 8003548:	08003670 	.word	0x08003670

0800354c <memset>:
 800354c:	0003      	movs	r3, r0
 800354e:	1882      	adds	r2, r0, r2
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	7019      	strb	r1, [r3, #0]
 8003558:	3301      	adds	r3, #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <__libc_init_array>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	2600      	movs	r6, #0
 8003560:	4c0c      	ldr	r4, [pc, #48]	@ (8003594 <__libc_init_array+0x38>)
 8003562:	4d0d      	ldr	r5, [pc, #52]	@ (8003598 <__libc_init_array+0x3c>)
 8003564:	1b64      	subs	r4, r4, r5
 8003566:	10a4      	asrs	r4, r4, #2
 8003568:	42a6      	cmp	r6, r4
 800356a:	d109      	bne.n	8003580 <__libc_init_array+0x24>
 800356c:	2600      	movs	r6, #0
 800356e:	f000 f823 	bl	80035b8 <_init>
 8003572:	4c0a      	ldr	r4, [pc, #40]	@ (800359c <__libc_init_array+0x40>)
 8003574:	4d0a      	ldr	r5, [pc, #40]	@ (80035a0 <__libc_init_array+0x44>)
 8003576:	1b64      	subs	r4, r4, r5
 8003578:	10a4      	asrs	r4, r4, #2
 800357a:	42a6      	cmp	r6, r4
 800357c:	d105      	bne.n	800358a <__libc_init_array+0x2e>
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	00b3      	lsls	r3, r6, #2
 8003582:	58eb      	ldr	r3, [r5, r3]
 8003584:	4798      	blx	r3
 8003586:	3601      	adds	r6, #1
 8003588:	e7ee      	b.n	8003568 <__libc_init_array+0xc>
 800358a:	00b3      	lsls	r3, r6, #2
 800358c:	58eb      	ldr	r3, [r5, r3]
 800358e:	4798      	blx	r3
 8003590:	3601      	adds	r6, #1
 8003592:	e7f2      	b.n	800357a <__libc_init_array+0x1e>
 8003594:	080036a0 	.word	0x080036a0
 8003598:	080036a0 	.word	0x080036a0
 800359c:	080036a4 	.word	0x080036a4
 80035a0:	080036a0 	.word	0x080036a0

080035a4 <memcpy>:
 80035a4:	2300      	movs	r3, #0
 80035a6:	b510      	push	{r4, lr}
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d100      	bne.n	80035ae <memcpy+0xa>
 80035ac:	bd10      	pop	{r4, pc}
 80035ae:	5ccc      	ldrb	r4, [r1, r3]
 80035b0:	54c4      	strb	r4, [r0, r3]
 80035b2:	3301      	adds	r3, #1
 80035b4:	e7f8      	b.n	80035a8 <memcpy+0x4>
	...

080035b8 <_init>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr

080035c4 <_fini>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr
