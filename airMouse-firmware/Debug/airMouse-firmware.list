
airMouse-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009230  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080092f0  080092f0  0000a2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009460  08009460  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009460  08009460  0000a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009468  08009468  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009468  08009468  0000a468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800946c  0800946c  0000a46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009470  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000078  080094e8  0000b078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080094e8  0000b3dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137c1  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a9  00000000  00000000  0001e861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00021a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be6  00000000  00000000  00022990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b590  00000000  00000000  00023576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a64  00000000  00000000  0003eb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5a80  00000000  00000000  0005456a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9fea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea0  00000000  00000000  000fa030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000fded0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080092d4 	.word	0x080092d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	080092d4 	.word	0x080092d4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0010      	movs	r0, r2
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	0019      	movs	r1, r3
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f001 f855 	bl	80014c0 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 ff95 	bl	8001350 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 f847 	bl	80014c0 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f83d 	bl	80014c0 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffbf 	bl	80013d8 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffb5 	bl	80013d8 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_uldivmod>:
 800047c:	2b00      	cmp	r3, #0
 800047e:	d111      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000480:	2a00      	cmp	r2, #0
 8000482:	d10f      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000484:	2900      	cmp	r1, #0
 8000486:	d100      	bne.n	800048a <__aeabi_uldivmod+0xe>
 8000488:	2800      	cmp	r0, #0
 800048a:	d002      	beq.n	8000492 <__aeabi_uldivmod+0x16>
 800048c:	2100      	movs	r1, #0
 800048e:	43c9      	mvns	r1, r1
 8000490:	0008      	movs	r0, r1
 8000492:	b407      	push	{r0, r1, r2}
 8000494:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <__aeabi_uldivmod+0x24>)
 8000496:	a102      	add	r1, pc, #8	@ (adr r1, 80004a0 <__aeabi_uldivmod+0x24>)
 8000498:	1840      	adds	r0, r0, r1
 800049a:	9002      	str	r0, [sp, #8]
 800049c:	bd03      	pop	{r0, r1, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	ffffff5d 	.word	0xffffff5d
 80004a4:	b403      	push	{r0, r1}
 80004a6:	4668      	mov	r0, sp
 80004a8:	b501      	push	{r0, lr}
 80004aa:	9802      	ldr	r0, [sp, #8]
 80004ac:	f000 f806 	bl	80004bc <__udivmoddi4>
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	469e      	mov	lr, r3
 80004b4:	b002      	add	sp, #8
 80004b6:	bc0c      	pop	{r2, r3}
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__udivmoddi4>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	4657      	mov	r7, sl
 80004c0:	464e      	mov	r6, r9
 80004c2:	4645      	mov	r5, r8
 80004c4:	46de      	mov	lr, fp
 80004c6:	b5e0      	push	{r5, r6, r7, lr}
 80004c8:	0004      	movs	r4, r0
 80004ca:	000d      	movs	r5, r1
 80004cc:	4692      	mov	sl, r2
 80004ce:	4699      	mov	r9, r3
 80004d0:	b083      	sub	sp, #12
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d830      	bhi.n	8000538 <__udivmoddi4+0x7c>
 80004d6:	d02d      	beq.n	8000534 <__udivmoddi4+0x78>
 80004d8:	4649      	mov	r1, r9
 80004da:	4650      	mov	r0, sl
 80004dc:	f001 ff70 	bl	80023c0 <__clzdi2>
 80004e0:	0029      	movs	r1, r5
 80004e2:	0006      	movs	r6, r0
 80004e4:	0020      	movs	r0, r4
 80004e6:	f001 ff6b 	bl	80023c0 <__clzdi2>
 80004ea:	1a33      	subs	r3, r6, r0
 80004ec:	4698      	mov	r8, r3
 80004ee:	3b20      	subs	r3, #32
 80004f0:	d434      	bmi.n	800055c <__udivmoddi4+0xa0>
 80004f2:	469b      	mov	fp, r3
 80004f4:	4653      	mov	r3, sl
 80004f6:	465a      	mov	r2, fp
 80004f8:	4093      	lsls	r3, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	001f      	movs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d83b      	bhi.n	8000580 <__udivmoddi4+0xc4>
 8000508:	42af      	cmp	r7, r5
 800050a:	d100      	bne.n	800050e <__udivmoddi4+0x52>
 800050c:	e079      	b.n	8000602 <__udivmoddi4+0x146>
 800050e:	465b      	mov	r3, fp
 8000510:	1ba4      	subs	r4, r4, r6
 8000512:	41bd      	sbcs	r5, r7
 8000514:	2b00      	cmp	r3, #0
 8000516:	da00      	bge.n	800051a <__udivmoddi4+0x5e>
 8000518:	e076      	b.n	8000608 <__udivmoddi4+0x14c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	465a      	mov	r2, fp
 8000526:	4093      	lsls	r3, r2
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	4642      	mov	r2, r8
 800052e:	4093      	lsls	r3, r2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	e029      	b.n	8000588 <__udivmoddi4+0xcc>
 8000534:	4282      	cmp	r2, r0
 8000536:	d9cf      	bls.n	80004d8 <__udivmoddi4+0x1c>
 8000538:	2200      	movs	r2, #0
 800053a:	2300      	movs	r3, #0
 800053c:	9200      	str	r2, [sp, #0]
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <__udivmoddi4+0x8e>
 8000546:	601c      	str	r4, [r3, #0]
 8000548:	605d      	str	r5, [r3, #4]
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	b003      	add	sp, #12
 8000550:	bcf0      	pop	{r4, r5, r6, r7}
 8000552:	46bb      	mov	fp, r7
 8000554:	46b2      	mov	sl, r6
 8000556:	46a9      	mov	r9, r5
 8000558:	46a0      	mov	r8, r4
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055c:	4642      	mov	r2, r8
 800055e:	469b      	mov	fp, r3
 8000560:	2320      	movs	r3, #32
 8000562:	1a9b      	subs	r3, r3, r2
 8000564:	4652      	mov	r2, sl
 8000566:	40da      	lsrs	r2, r3
 8000568:	4641      	mov	r1, r8
 800056a:	0013      	movs	r3, r2
 800056c:	464a      	mov	r2, r9
 800056e:	408a      	lsls	r2, r1
 8000570:	0017      	movs	r7, r2
 8000572:	4642      	mov	r2, r8
 8000574:	431f      	orrs	r7, r3
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	001e      	movs	r6, r3
 800057c:	42af      	cmp	r7, r5
 800057e:	d9c3      	bls.n	8000508 <__udivmoddi4+0x4c>
 8000580:	2200      	movs	r2, #0
 8000582:	2300      	movs	r3, #0
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	4643      	mov	r3, r8
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0d8      	beq.n	8000540 <__udivmoddi4+0x84>
 800058e:	07fb      	lsls	r3, r7, #31
 8000590:	0872      	lsrs	r2, r6, #1
 8000592:	431a      	orrs	r2, r3
 8000594:	4646      	mov	r6, r8
 8000596:	087b      	lsrs	r3, r7, #1
 8000598:	e00e      	b.n	80005b8 <__udivmoddi4+0xfc>
 800059a:	42ab      	cmp	r3, r5
 800059c:	d101      	bne.n	80005a2 <__udivmoddi4+0xe6>
 800059e:	42a2      	cmp	r2, r4
 80005a0:	d80c      	bhi.n	80005bc <__udivmoddi4+0x100>
 80005a2:	1aa4      	subs	r4, r4, r2
 80005a4:	419d      	sbcs	r5, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2100      	movs	r1, #0
 80005ae:	3e01      	subs	r6, #1
 80005b0:	1824      	adds	r4, r4, r0
 80005b2:	414d      	adcs	r5, r1
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d006      	beq.n	80005c6 <__udivmoddi4+0x10a>
 80005b8:	42ab      	cmp	r3, r5
 80005ba:	d9ee      	bls.n	800059a <__udivmoddi4+0xde>
 80005bc:	3e01      	subs	r6, #1
 80005be:	1924      	adds	r4, r4, r4
 80005c0:	416d      	adcs	r5, r5
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d1f8      	bne.n	80005b8 <__udivmoddi4+0xfc>
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	465b      	mov	r3, fp
 80005cc:	1900      	adds	r0, r0, r4
 80005ce:	4169      	adcs	r1, r5
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db24      	blt.n	800061e <__udivmoddi4+0x162>
 80005d4:	002b      	movs	r3, r5
 80005d6:	465a      	mov	r2, fp
 80005d8:	4644      	mov	r4, r8
 80005da:	40d3      	lsrs	r3, r2
 80005dc:	002a      	movs	r2, r5
 80005de:	40e2      	lsrs	r2, r4
 80005e0:	001c      	movs	r4, r3
 80005e2:	465b      	mov	r3, fp
 80005e4:	0015      	movs	r5, r2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db2a      	blt.n	8000640 <__udivmoddi4+0x184>
 80005ea:	0026      	movs	r6, r4
 80005ec:	409e      	lsls	r6, r3
 80005ee:	0033      	movs	r3, r6
 80005f0:	0026      	movs	r6, r4
 80005f2:	4647      	mov	r7, r8
 80005f4:	40be      	lsls	r6, r7
 80005f6:	0032      	movs	r2, r6
 80005f8:	1a80      	subs	r0, r0, r2
 80005fa:	4199      	sbcs	r1, r3
 80005fc:	9000      	str	r0, [sp, #0]
 80005fe:	9101      	str	r1, [sp, #4]
 8000600:	e79e      	b.n	8000540 <__udivmoddi4+0x84>
 8000602:	42a3      	cmp	r3, r4
 8000604:	d8bc      	bhi.n	8000580 <__udivmoddi4+0xc4>
 8000606:	e782      	b.n	800050e <__udivmoddi4+0x52>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	2100      	movs	r1, #0
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	2200      	movs	r2, #0
 8000612:	9100      	str	r1, [sp, #0]
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	2201      	movs	r2, #1
 8000618:	40da      	lsrs	r2, r3
 800061a:	9201      	str	r2, [sp, #4]
 800061c:	e785      	b.n	800052a <__udivmoddi4+0x6e>
 800061e:	4642      	mov	r2, r8
 8000620:	2320      	movs	r3, #32
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	002a      	movs	r2, r5
 8000626:	4646      	mov	r6, r8
 8000628:	409a      	lsls	r2, r3
 800062a:	0023      	movs	r3, r4
 800062c:	40f3      	lsrs	r3, r6
 800062e:	4644      	mov	r4, r8
 8000630:	4313      	orrs	r3, r2
 8000632:	002a      	movs	r2, r5
 8000634:	40e2      	lsrs	r2, r4
 8000636:	001c      	movs	r4, r3
 8000638:	465b      	mov	r3, fp
 800063a:	0015      	movs	r5, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	dad4      	bge.n	80005ea <__udivmoddi4+0x12e>
 8000640:	4642      	mov	r2, r8
 8000642:	002f      	movs	r7, r5
 8000644:	2320      	movs	r3, #32
 8000646:	0026      	movs	r6, r4
 8000648:	4097      	lsls	r7, r2
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	40de      	lsrs	r6, r3
 800064e:	003b      	movs	r3, r7
 8000650:	4333      	orrs	r3, r6
 8000652:	e7cd      	b.n	80005f0 <__udivmoddi4+0x134>

08000654 <__aeabi_dadd>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	4657      	mov	r7, sl
 8000658:	464e      	mov	r6, r9
 800065a:	4645      	mov	r5, r8
 800065c:	46de      	mov	lr, fp
 800065e:	b5e0      	push	{r5, r6, r7, lr}
 8000660:	b083      	sub	sp, #12
 8000662:	9000      	str	r0, [sp, #0]
 8000664:	9101      	str	r1, [sp, #4]
 8000666:	030c      	lsls	r4, r1, #12
 8000668:	004f      	lsls	r7, r1, #1
 800066a:	0fce      	lsrs	r6, r1, #31
 800066c:	0a61      	lsrs	r1, r4, #9
 800066e:	9c00      	ldr	r4, [sp, #0]
 8000670:	031d      	lsls	r5, r3, #12
 8000672:	0f64      	lsrs	r4, r4, #29
 8000674:	430c      	orrs	r4, r1
 8000676:	9900      	ldr	r1, [sp, #0]
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	00c8      	lsls	r0, r1, #3
 800067e:	0059      	lsls	r1, r3, #1
 8000680:	0d4b      	lsrs	r3, r1, #21
 8000682:	4699      	mov	r9, r3
 8000684:	9a00      	ldr	r2, [sp, #0]
 8000686:	9b01      	ldr	r3, [sp, #4]
 8000688:	0a6d      	lsrs	r5, r5, #9
 800068a:	0fd9      	lsrs	r1, r3, #31
 800068c:	0f53      	lsrs	r3, r2, #29
 800068e:	432b      	orrs	r3, r5
 8000690:	469a      	mov	sl, r3
 8000692:	9b00      	ldr	r3, [sp, #0]
 8000694:	0d7f      	lsrs	r7, r7, #21
 8000696:	00da      	lsls	r2, r3, #3
 8000698:	4694      	mov	ip, r2
 800069a:	464a      	mov	r2, r9
 800069c:	46b0      	mov	r8, r6
 800069e:	1aba      	subs	r2, r7, r2
 80006a0:	428e      	cmp	r6, r1
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x52>
 80006a4:	e0b0      	b.n	8000808 <__aeabi_dadd+0x1b4>
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	dc00      	bgt.n	80006ac <__aeabi_dadd+0x58>
 80006aa:	e078      	b.n	800079e <__aeabi_dadd+0x14a>
 80006ac:	4649      	mov	r1, r9
 80006ae:	2900      	cmp	r1, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x60>
 80006b2:	e0e9      	b.n	8000888 <__aeabi_dadd+0x234>
 80006b4:	49c9      	ldr	r1, [pc, #804]	@ (80009dc <__aeabi_dadd+0x388>)
 80006b6:	428f      	cmp	r7, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x68>
 80006ba:	e195      	b.n	80009e8 <__aeabi_dadd+0x394>
 80006bc:	2501      	movs	r5, #1
 80006be:	2a38      	cmp	r2, #56	@ 0x38
 80006c0:	dc16      	bgt.n	80006f0 <__aeabi_dadd+0x9c>
 80006c2:	2180      	movs	r1, #128	@ 0x80
 80006c4:	4653      	mov	r3, sl
 80006c6:	0409      	lsls	r1, r1, #16
 80006c8:	430b      	orrs	r3, r1
 80006ca:	469a      	mov	sl, r3
 80006cc:	2a1f      	cmp	r2, #31
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_dadd+0x7e>
 80006d0:	e1e7      	b.n	8000aa2 <__aeabi_dadd+0x44e>
 80006d2:	2120      	movs	r1, #32
 80006d4:	4655      	mov	r5, sl
 80006d6:	1a8b      	subs	r3, r1, r2
 80006d8:	4661      	mov	r1, ip
 80006da:	409d      	lsls	r5, r3
 80006dc:	40d1      	lsrs	r1, r2
 80006de:	430d      	orrs	r5, r1
 80006e0:	4661      	mov	r1, ip
 80006e2:	4099      	lsls	r1, r3
 80006e4:	1e4b      	subs	r3, r1, #1
 80006e6:	4199      	sbcs	r1, r3
 80006e8:	4653      	mov	r3, sl
 80006ea:	40d3      	lsrs	r3, r2
 80006ec:	430d      	orrs	r5, r1
 80006ee:	1ae4      	subs	r4, r4, r3
 80006f0:	1b45      	subs	r5, r0, r5
 80006f2:	42a8      	cmp	r0, r5
 80006f4:	4180      	sbcs	r0, r0
 80006f6:	4240      	negs	r0, r0
 80006f8:	1a24      	subs	r4, r4, r0
 80006fa:	0223      	lsls	r3, r4, #8
 80006fc:	d400      	bmi.n	8000700 <__aeabi_dadd+0xac>
 80006fe:	e10f      	b.n	8000920 <__aeabi_dadd+0x2cc>
 8000700:	0264      	lsls	r4, r4, #9
 8000702:	0a64      	lsrs	r4, r4, #9
 8000704:	2c00      	cmp	r4, #0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0xb6>
 8000708:	e139      	b.n	800097e <__aeabi_dadd+0x32a>
 800070a:	0020      	movs	r0, r4
 800070c:	f001 fe3a 	bl	8002384 <__clzsi2>
 8000710:	0003      	movs	r3, r0
 8000712:	3b08      	subs	r3, #8
 8000714:	2120      	movs	r1, #32
 8000716:	0028      	movs	r0, r5
 8000718:	1aca      	subs	r2, r1, r3
 800071a:	40d0      	lsrs	r0, r2
 800071c:	409c      	lsls	r4, r3
 800071e:	0002      	movs	r2, r0
 8000720:	409d      	lsls	r5, r3
 8000722:	4322      	orrs	r2, r4
 8000724:	429f      	cmp	r7, r3
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0xd6>
 8000728:	e173      	b.n	8000a12 <__aeabi_dadd+0x3be>
 800072a:	1bd8      	subs	r0, r3, r7
 800072c:	3001      	adds	r0, #1
 800072e:	1a09      	subs	r1, r1, r0
 8000730:	002c      	movs	r4, r5
 8000732:	408d      	lsls	r5, r1
 8000734:	40c4      	lsrs	r4, r0
 8000736:	1e6b      	subs	r3, r5, #1
 8000738:	419d      	sbcs	r5, r3
 800073a:	0013      	movs	r3, r2
 800073c:	40c2      	lsrs	r2, r0
 800073e:	408b      	lsls	r3, r1
 8000740:	4325      	orrs	r5, r4
 8000742:	2700      	movs	r7, #0
 8000744:	0014      	movs	r4, r2
 8000746:	431d      	orrs	r5, r3
 8000748:	076b      	lsls	r3, r5, #29
 800074a:	d009      	beq.n	8000760 <__aeabi_dadd+0x10c>
 800074c:	230f      	movs	r3, #15
 800074e:	402b      	ands	r3, r5
 8000750:	2b04      	cmp	r3, #4
 8000752:	d005      	beq.n	8000760 <__aeabi_dadd+0x10c>
 8000754:	1d2b      	adds	r3, r5, #4
 8000756:	42ab      	cmp	r3, r5
 8000758:	41ad      	sbcs	r5, r5
 800075a:	426d      	negs	r5, r5
 800075c:	1964      	adds	r4, r4, r5
 800075e:	001d      	movs	r5, r3
 8000760:	0223      	lsls	r3, r4, #8
 8000762:	d400      	bmi.n	8000766 <__aeabi_dadd+0x112>
 8000764:	e12d      	b.n	80009c2 <__aeabi_dadd+0x36e>
 8000766:	4a9d      	ldr	r2, [pc, #628]	@ (80009dc <__aeabi_dadd+0x388>)
 8000768:	3701      	adds	r7, #1
 800076a:	4297      	cmp	r7, r2
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0x11c>
 800076e:	e0d3      	b.n	8000918 <__aeabi_dadd+0x2c4>
 8000770:	4646      	mov	r6, r8
 8000772:	499b      	ldr	r1, [pc, #620]	@ (80009e0 <__aeabi_dadd+0x38c>)
 8000774:	08ed      	lsrs	r5, r5, #3
 8000776:	4021      	ands	r1, r4
 8000778:	074a      	lsls	r2, r1, #29
 800077a:	432a      	orrs	r2, r5
 800077c:	057c      	lsls	r4, r7, #21
 800077e:	024d      	lsls	r5, r1, #9
 8000780:	0b2d      	lsrs	r5, r5, #12
 8000782:	0d64      	lsrs	r4, r4, #21
 8000784:	0524      	lsls	r4, r4, #20
 8000786:	432c      	orrs	r4, r5
 8000788:	07f6      	lsls	r6, r6, #31
 800078a:	4334      	orrs	r4, r6
 800078c:	0010      	movs	r0, r2
 800078e:	0021      	movs	r1, r4
 8000790:	b003      	add	sp, #12
 8000792:	bcf0      	pop	{r4, r5, r6, r7}
 8000794:	46bb      	mov	fp, r7
 8000796:	46b2      	mov	sl, r6
 8000798:	46a9      	mov	r9, r5
 800079a:	46a0      	mov	r8, r4
 800079c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079e:	2a00      	cmp	r2, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x150>
 80007a2:	e084      	b.n	80008ae <__aeabi_dadd+0x25a>
 80007a4:	464a      	mov	r2, r9
 80007a6:	1bd2      	subs	r2, r2, r7
 80007a8:	2f00      	cmp	r7, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_dadd+0x15a>
 80007ac:	e16d      	b.n	8000a8a <__aeabi_dadd+0x436>
 80007ae:	0025      	movs	r5, r4
 80007b0:	4305      	orrs	r5, r0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x162>
 80007b4:	e127      	b.n	8000a06 <__aeabi_dadd+0x3b2>
 80007b6:	1e56      	subs	r6, r2, #1
 80007b8:	2a01      	cmp	r2, #1
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x16a>
 80007bc:	e23b      	b.n	8000c36 <__aeabi_dadd+0x5e2>
 80007be:	4d87      	ldr	r5, [pc, #540]	@ (80009dc <__aeabi_dadd+0x388>)
 80007c0:	42aa      	cmp	r2, r5
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x172>
 80007c4:	e26a      	b.n	8000c9c <__aeabi_dadd+0x648>
 80007c6:	2501      	movs	r5, #1
 80007c8:	2e38      	cmp	r6, #56	@ 0x38
 80007ca:	dc12      	bgt.n	80007f2 <__aeabi_dadd+0x19e>
 80007cc:	0032      	movs	r2, r6
 80007ce:	2a1f      	cmp	r2, #31
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_dadd+0x180>
 80007d2:	e1f8      	b.n	8000bc6 <__aeabi_dadd+0x572>
 80007d4:	2620      	movs	r6, #32
 80007d6:	0025      	movs	r5, r4
 80007d8:	1ab6      	subs	r6, r6, r2
 80007da:	0007      	movs	r7, r0
 80007dc:	4653      	mov	r3, sl
 80007de:	40b0      	lsls	r0, r6
 80007e0:	40d4      	lsrs	r4, r2
 80007e2:	40b5      	lsls	r5, r6
 80007e4:	40d7      	lsrs	r7, r2
 80007e6:	1e46      	subs	r6, r0, #1
 80007e8:	41b0      	sbcs	r0, r6
 80007ea:	1b1b      	subs	r3, r3, r4
 80007ec:	469a      	mov	sl, r3
 80007ee:	433d      	orrs	r5, r7
 80007f0:	4305      	orrs	r5, r0
 80007f2:	4662      	mov	r2, ip
 80007f4:	1b55      	subs	r5, r2, r5
 80007f6:	45ac      	cmp	ip, r5
 80007f8:	4192      	sbcs	r2, r2
 80007fa:	4653      	mov	r3, sl
 80007fc:	4252      	negs	r2, r2
 80007fe:	000e      	movs	r6, r1
 8000800:	464f      	mov	r7, r9
 8000802:	4688      	mov	r8, r1
 8000804:	1a9c      	subs	r4, r3, r2
 8000806:	e778      	b.n	80006fa <__aeabi_dadd+0xa6>
 8000808:	2a00      	cmp	r2, #0
 800080a:	dc00      	bgt.n	800080e <__aeabi_dadd+0x1ba>
 800080c:	e08e      	b.n	800092c <__aeabi_dadd+0x2d8>
 800080e:	4649      	mov	r1, r9
 8000810:	2900      	cmp	r1, #0
 8000812:	d175      	bne.n	8000900 <__aeabi_dadd+0x2ac>
 8000814:	4661      	mov	r1, ip
 8000816:	4653      	mov	r3, sl
 8000818:	4319      	orrs	r1, r3
 800081a:	d100      	bne.n	800081e <__aeabi_dadd+0x1ca>
 800081c:	e0f6      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 800081e:	1e51      	subs	r1, r2, #1
 8000820:	2a01      	cmp	r2, #1
 8000822:	d100      	bne.n	8000826 <__aeabi_dadd+0x1d2>
 8000824:	e191      	b.n	8000b4a <__aeabi_dadd+0x4f6>
 8000826:	4d6d      	ldr	r5, [pc, #436]	@ (80009dc <__aeabi_dadd+0x388>)
 8000828:	42aa      	cmp	r2, r5
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x1da>
 800082c:	e0dc      	b.n	80009e8 <__aeabi_dadd+0x394>
 800082e:	2501      	movs	r5, #1
 8000830:	2938      	cmp	r1, #56	@ 0x38
 8000832:	dc14      	bgt.n	800085e <__aeabi_dadd+0x20a>
 8000834:	000a      	movs	r2, r1
 8000836:	2a1f      	cmp	r2, #31
 8000838:	dd00      	ble.n	800083c <__aeabi_dadd+0x1e8>
 800083a:	e1a2      	b.n	8000b82 <__aeabi_dadd+0x52e>
 800083c:	2120      	movs	r1, #32
 800083e:	4653      	mov	r3, sl
 8000840:	1a89      	subs	r1, r1, r2
 8000842:	408b      	lsls	r3, r1
 8000844:	001d      	movs	r5, r3
 8000846:	4663      	mov	r3, ip
 8000848:	40d3      	lsrs	r3, r2
 800084a:	431d      	orrs	r5, r3
 800084c:	4663      	mov	r3, ip
 800084e:	408b      	lsls	r3, r1
 8000850:	0019      	movs	r1, r3
 8000852:	1e4b      	subs	r3, r1, #1
 8000854:	4199      	sbcs	r1, r3
 8000856:	4653      	mov	r3, sl
 8000858:	40d3      	lsrs	r3, r2
 800085a:	430d      	orrs	r5, r1
 800085c:	18e4      	adds	r4, r4, r3
 800085e:	182d      	adds	r5, r5, r0
 8000860:	4285      	cmp	r5, r0
 8000862:	4180      	sbcs	r0, r0
 8000864:	4240      	negs	r0, r0
 8000866:	1824      	adds	r4, r4, r0
 8000868:	0223      	lsls	r3, r4, #8
 800086a:	d559      	bpl.n	8000920 <__aeabi_dadd+0x2cc>
 800086c:	4b5b      	ldr	r3, [pc, #364]	@ (80009dc <__aeabi_dadd+0x388>)
 800086e:	3701      	adds	r7, #1
 8000870:	429f      	cmp	r7, r3
 8000872:	d051      	beq.n	8000918 <__aeabi_dadd+0x2c4>
 8000874:	2101      	movs	r1, #1
 8000876:	4b5a      	ldr	r3, [pc, #360]	@ (80009e0 <__aeabi_dadd+0x38c>)
 8000878:	086a      	lsrs	r2, r5, #1
 800087a:	401c      	ands	r4, r3
 800087c:	4029      	ands	r1, r5
 800087e:	430a      	orrs	r2, r1
 8000880:	07e5      	lsls	r5, r4, #31
 8000882:	4315      	orrs	r5, r2
 8000884:	0864      	lsrs	r4, r4, #1
 8000886:	e75f      	b.n	8000748 <__aeabi_dadd+0xf4>
 8000888:	4661      	mov	r1, ip
 800088a:	4653      	mov	r3, sl
 800088c:	4319      	orrs	r1, r3
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x23e>
 8000890:	e0bc      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 8000892:	1e51      	subs	r1, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x246>
 8000898:	e164      	b.n	8000b64 <__aeabi_dadd+0x510>
 800089a:	4d50      	ldr	r5, [pc, #320]	@ (80009dc <__aeabi_dadd+0x388>)
 800089c:	42aa      	cmp	r2, r5
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x24e>
 80008a0:	e16a      	b.n	8000b78 <__aeabi_dadd+0x524>
 80008a2:	2501      	movs	r5, #1
 80008a4:	2938      	cmp	r1, #56	@ 0x38
 80008a6:	dd00      	ble.n	80008aa <__aeabi_dadd+0x256>
 80008a8:	e722      	b.n	80006f0 <__aeabi_dadd+0x9c>
 80008aa:	000a      	movs	r2, r1
 80008ac:	e70e      	b.n	80006cc <__aeabi_dadd+0x78>
 80008ae:	4a4d      	ldr	r2, [pc, #308]	@ (80009e4 <__aeabi_dadd+0x390>)
 80008b0:	1c7d      	adds	r5, r7, #1
 80008b2:	4215      	tst	r5, r2
 80008b4:	d000      	beq.n	80008b8 <__aeabi_dadd+0x264>
 80008b6:	e0d0      	b.n	8000a5a <__aeabi_dadd+0x406>
 80008b8:	0025      	movs	r5, r4
 80008ba:	4662      	mov	r2, ip
 80008bc:	4653      	mov	r3, sl
 80008be:	4305      	orrs	r5, r0
 80008c0:	431a      	orrs	r2, r3
 80008c2:	2f00      	cmp	r7, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dadd+0x274>
 80008c6:	e137      	b.n	8000b38 <__aeabi_dadd+0x4e4>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x27a>
 80008cc:	e1a8      	b.n	8000c20 <__aeabi_dadd+0x5cc>
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d100      	bne.n	80008d4 <__aeabi_dadd+0x280>
 80008d2:	e16a      	b.n	8000baa <__aeabi_dadd+0x556>
 80008d4:	4663      	mov	r3, ip
 80008d6:	1ac5      	subs	r5, r0, r3
 80008d8:	4653      	mov	r3, sl
 80008da:	1ae2      	subs	r2, r4, r3
 80008dc:	42a8      	cmp	r0, r5
 80008de:	419b      	sbcs	r3, r3
 80008e0:	425b      	negs	r3, r3
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	021a      	lsls	r2, r3, #8
 80008e6:	d400      	bmi.n	80008ea <__aeabi_dadd+0x296>
 80008e8:	e203      	b.n	8000cf2 <__aeabi_dadd+0x69e>
 80008ea:	4663      	mov	r3, ip
 80008ec:	1a1d      	subs	r5, r3, r0
 80008ee:	45ac      	cmp	ip, r5
 80008f0:	4192      	sbcs	r2, r2
 80008f2:	4653      	mov	r3, sl
 80008f4:	4252      	negs	r2, r2
 80008f6:	1b1c      	subs	r4, r3, r4
 80008f8:	000e      	movs	r6, r1
 80008fa:	4688      	mov	r8, r1
 80008fc:	1aa4      	subs	r4, r4, r2
 80008fe:	e723      	b.n	8000748 <__aeabi_dadd+0xf4>
 8000900:	4936      	ldr	r1, [pc, #216]	@ (80009dc <__aeabi_dadd+0x388>)
 8000902:	428f      	cmp	r7, r1
 8000904:	d070      	beq.n	80009e8 <__aeabi_dadd+0x394>
 8000906:	2501      	movs	r5, #1
 8000908:	2a38      	cmp	r2, #56	@ 0x38
 800090a:	dca8      	bgt.n	800085e <__aeabi_dadd+0x20a>
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	4653      	mov	r3, sl
 8000910:	0409      	lsls	r1, r1, #16
 8000912:	430b      	orrs	r3, r1
 8000914:	469a      	mov	sl, r3
 8000916:	e78e      	b.n	8000836 <__aeabi_dadd+0x1e2>
 8000918:	003c      	movs	r4, r7
 800091a:	2500      	movs	r5, #0
 800091c:	2200      	movs	r2, #0
 800091e:	e731      	b.n	8000784 <__aeabi_dadd+0x130>
 8000920:	2307      	movs	r3, #7
 8000922:	402b      	ands	r3, r5
 8000924:	2b00      	cmp	r3, #0
 8000926:	d000      	beq.n	800092a <__aeabi_dadd+0x2d6>
 8000928:	e710      	b.n	800074c <__aeabi_dadd+0xf8>
 800092a:	e093      	b.n	8000a54 <__aeabi_dadd+0x400>
 800092c:	2a00      	cmp	r2, #0
 800092e:	d074      	beq.n	8000a1a <__aeabi_dadd+0x3c6>
 8000930:	464a      	mov	r2, r9
 8000932:	1bd2      	subs	r2, r2, r7
 8000934:	2f00      	cmp	r7, #0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x2e6>
 8000938:	e0c7      	b.n	8000aca <__aeabi_dadd+0x476>
 800093a:	4928      	ldr	r1, [pc, #160]	@ (80009dc <__aeabi_dadd+0x388>)
 800093c:	4589      	cmp	r9, r1
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x2ee>
 8000940:	e185      	b.n	8000c4e <__aeabi_dadd+0x5fa>
 8000942:	2501      	movs	r5, #1
 8000944:	2a38      	cmp	r2, #56	@ 0x38
 8000946:	dc12      	bgt.n	800096e <__aeabi_dadd+0x31a>
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	0409      	lsls	r1, r1, #16
 800094c:	430c      	orrs	r4, r1
 800094e:	2a1f      	cmp	r2, #31
 8000950:	dd00      	ble.n	8000954 <__aeabi_dadd+0x300>
 8000952:	e1ab      	b.n	8000cac <__aeabi_dadd+0x658>
 8000954:	2120      	movs	r1, #32
 8000956:	0025      	movs	r5, r4
 8000958:	1a89      	subs	r1, r1, r2
 800095a:	0007      	movs	r7, r0
 800095c:	4088      	lsls	r0, r1
 800095e:	408d      	lsls	r5, r1
 8000960:	40d7      	lsrs	r7, r2
 8000962:	1e41      	subs	r1, r0, #1
 8000964:	4188      	sbcs	r0, r1
 8000966:	40d4      	lsrs	r4, r2
 8000968:	433d      	orrs	r5, r7
 800096a:	4305      	orrs	r5, r0
 800096c:	44a2      	add	sl, r4
 800096e:	4465      	add	r5, ip
 8000970:	4565      	cmp	r5, ip
 8000972:	4192      	sbcs	r2, r2
 8000974:	4252      	negs	r2, r2
 8000976:	4452      	add	r2, sl
 8000978:	0014      	movs	r4, r2
 800097a:	464f      	mov	r7, r9
 800097c:	e774      	b.n	8000868 <__aeabi_dadd+0x214>
 800097e:	0028      	movs	r0, r5
 8000980:	f001 fd00 	bl	8002384 <__clzsi2>
 8000984:	0003      	movs	r3, r0
 8000986:	3318      	adds	r3, #24
 8000988:	2b1f      	cmp	r3, #31
 800098a:	dc00      	bgt.n	800098e <__aeabi_dadd+0x33a>
 800098c:	e6c2      	b.n	8000714 <__aeabi_dadd+0xc0>
 800098e:	002a      	movs	r2, r5
 8000990:	3808      	subs	r0, #8
 8000992:	4082      	lsls	r2, r0
 8000994:	429f      	cmp	r7, r3
 8000996:	dd00      	ble.n	800099a <__aeabi_dadd+0x346>
 8000998:	e0a9      	b.n	8000aee <__aeabi_dadd+0x49a>
 800099a:	1bdb      	subs	r3, r3, r7
 800099c:	1c58      	adds	r0, r3, #1
 800099e:	281f      	cmp	r0, #31
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x350>
 80009a2:	e1ac      	b.n	8000cfe <__aeabi_dadd+0x6aa>
 80009a4:	0015      	movs	r5, r2
 80009a6:	3b1f      	subs	r3, #31
 80009a8:	40dd      	lsrs	r5, r3
 80009aa:	2820      	cmp	r0, #32
 80009ac:	d005      	beq.n	80009ba <__aeabi_dadd+0x366>
 80009ae:	2340      	movs	r3, #64	@ 0x40
 80009b0:	1a1b      	subs	r3, r3, r0
 80009b2:	409a      	lsls	r2, r3
 80009b4:	1e53      	subs	r3, r2, #1
 80009b6:	419a      	sbcs	r2, r3
 80009b8:	4315      	orrs	r5, r2
 80009ba:	2307      	movs	r3, #7
 80009bc:	2700      	movs	r7, #0
 80009be:	402b      	ands	r3, r5
 80009c0:	e7b0      	b.n	8000924 <__aeabi_dadd+0x2d0>
 80009c2:	08ed      	lsrs	r5, r5, #3
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <__aeabi_dadd+0x388>)
 80009c6:	0762      	lsls	r2, r4, #29
 80009c8:	432a      	orrs	r2, r5
 80009ca:	08e4      	lsrs	r4, r4, #3
 80009cc:	429f      	cmp	r7, r3
 80009ce:	d00f      	beq.n	80009f0 <__aeabi_dadd+0x39c>
 80009d0:	0324      	lsls	r4, r4, #12
 80009d2:	0b25      	lsrs	r5, r4, #12
 80009d4:	057c      	lsls	r4, r7, #21
 80009d6:	0d64      	lsrs	r4, r4, #21
 80009d8:	e6d4      	b.n	8000784 <__aeabi_dadd+0x130>
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	000007ff 	.word	0x000007ff
 80009e0:	ff7fffff 	.word	0xff7fffff
 80009e4:	000007fe 	.word	0x000007fe
 80009e8:	08c0      	lsrs	r0, r0, #3
 80009ea:	0762      	lsls	r2, r4, #29
 80009ec:	4302      	orrs	r2, r0
 80009ee:	08e4      	lsrs	r4, r4, #3
 80009f0:	0013      	movs	r3, r2
 80009f2:	4323      	orrs	r3, r4
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x3a4>
 80009f6:	e186      	b.n	8000d06 <__aeabi_dadd+0x6b2>
 80009f8:	2580      	movs	r5, #128	@ 0x80
 80009fa:	032d      	lsls	r5, r5, #12
 80009fc:	4325      	orrs	r5, r4
 80009fe:	032d      	lsls	r5, r5, #12
 8000a00:	4cc3      	ldr	r4, [pc, #780]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000a02:	0b2d      	lsrs	r5, r5, #12
 8000a04:	e6be      	b.n	8000784 <__aeabi_dadd+0x130>
 8000a06:	4660      	mov	r0, ip
 8000a08:	4654      	mov	r4, sl
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	0017      	movs	r7, r2
 8000a0e:	08c5      	lsrs	r5, r0, #3
 8000a10:	e7d8      	b.n	80009c4 <__aeabi_dadd+0x370>
 8000a12:	4cc0      	ldr	r4, [pc, #768]	@ (8000d14 <__aeabi_dadd+0x6c0>)
 8000a14:	1aff      	subs	r7, r7, r3
 8000a16:	4014      	ands	r4, r2
 8000a18:	e696      	b.n	8000748 <__aeabi_dadd+0xf4>
 8000a1a:	4abf      	ldr	r2, [pc, #764]	@ (8000d18 <__aeabi_dadd+0x6c4>)
 8000a1c:	1c79      	adds	r1, r7, #1
 8000a1e:	4211      	tst	r1, r2
 8000a20:	d16b      	bne.n	8000afa <__aeabi_dadd+0x4a6>
 8000a22:	0022      	movs	r2, r4
 8000a24:	4302      	orrs	r2, r0
 8000a26:	2f00      	cmp	r7, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x3d8>
 8000a2a:	e0db      	b.n	8000be4 <__aeabi_dadd+0x590>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x3de>
 8000a30:	e12d      	b.n	8000c8e <__aeabi_dadd+0x63a>
 8000a32:	4662      	mov	r2, ip
 8000a34:	4653      	mov	r3, sl
 8000a36:	431a      	orrs	r2, r3
 8000a38:	d100      	bne.n	8000a3c <__aeabi_dadd+0x3e8>
 8000a3a:	e0b6      	b.n	8000baa <__aeabi_dadd+0x556>
 8000a3c:	4663      	mov	r3, ip
 8000a3e:	18c5      	adds	r5, r0, r3
 8000a40:	4285      	cmp	r5, r0
 8000a42:	4180      	sbcs	r0, r0
 8000a44:	4454      	add	r4, sl
 8000a46:	4240      	negs	r0, r0
 8000a48:	1824      	adds	r4, r4, r0
 8000a4a:	0223      	lsls	r3, r4, #8
 8000a4c:	d502      	bpl.n	8000a54 <__aeabi_dadd+0x400>
 8000a4e:	000f      	movs	r7, r1
 8000a50:	4bb0      	ldr	r3, [pc, #704]	@ (8000d14 <__aeabi_dadd+0x6c0>)
 8000a52:	401c      	ands	r4, r3
 8000a54:	003a      	movs	r2, r7
 8000a56:	0028      	movs	r0, r5
 8000a58:	e7d8      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 8000a5a:	4662      	mov	r2, ip
 8000a5c:	1a85      	subs	r5, r0, r2
 8000a5e:	42a8      	cmp	r0, r5
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	4653      	mov	r3, sl
 8000a64:	4252      	negs	r2, r2
 8000a66:	4691      	mov	r9, r2
 8000a68:	1ae3      	subs	r3, r4, r3
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	0013      	movs	r3, r2
 8000a72:	4691      	mov	r9, r2
 8000a74:	021a      	lsls	r2, r3, #8
 8000a76:	d454      	bmi.n	8000b22 <__aeabi_dadd+0x4ce>
 8000a78:	464a      	mov	r2, r9
 8000a7a:	464c      	mov	r4, r9
 8000a7c:	432a      	orrs	r2, r5
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dadd+0x42e>
 8000a80:	e640      	b.n	8000704 <__aeabi_dadd+0xb0>
 8000a82:	2600      	movs	r6, #0
 8000a84:	2400      	movs	r4, #0
 8000a86:	2500      	movs	r5, #0
 8000a88:	e67c      	b.n	8000784 <__aeabi_dadd+0x130>
 8000a8a:	4da1      	ldr	r5, [pc, #644]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000a8c:	45a9      	cmp	r9, r5
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x43e>
 8000a90:	e090      	b.n	8000bb4 <__aeabi_dadd+0x560>
 8000a92:	2501      	movs	r5, #1
 8000a94:	2a38      	cmp	r2, #56	@ 0x38
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dadd+0x446>
 8000a98:	e6ab      	b.n	80007f2 <__aeabi_dadd+0x19e>
 8000a9a:	2580      	movs	r5, #128	@ 0x80
 8000a9c:	042d      	lsls	r5, r5, #16
 8000a9e:	432c      	orrs	r4, r5
 8000aa0:	e695      	b.n	80007ce <__aeabi_dadd+0x17a>
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	4655      	mov	r5, sl
 8000aa6:	3920      	subs	r1, #32
 8000aa8:	40cd      	lsrs	r5, r1
 8000aaa:	46a9      	mov	r9, r5
 8000aac:	2a20      	cmp	r2, #32
 8000aae:	d006      	beq.n	8000abe <__aeabi_dadd+0x46a>
 8000ab0:	2140      	movs	r1, #64	@ 0x40
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	431a      	orrs	r2, r3
 8000abc:	4694      	mov	ip, r2
 8000abe:	4665      	mov	r5, ip
 8000ac0:	1e6b      	subs	r3, r5, #1
 8000ac2:	419d      	sbcs	r5, r3
 8000ac4:	464b      	mov	r3, r9
 8000ac6:	431d      	orrs	r5, r3
 8000ac8:	e612      	b.n	80006f0 <__aeabi_dadd+0x9c>
 8000aca:	0021      	movs	r1, r4
 8000acc:	4301      	orrs	r1, r0
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x47e>
 8000ad0:	e0c4      	b.n	8000c5c <__aeabi_dadd+0x608>
 8000ad2:	1e51      	subs	r1, r2, #1
 8000ad4:	2a01      	cmp	r2, #1
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dadd+0x486>
 8000ad8:	e0fb      	b.n	8000cd2 <__aeabi_dadd+0x67e>
 8000ada:	4d8d      	ldr	r5, [pc, #564]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000adc:	42aa      	cmp	r2, r5
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x48e>
 8000ae0:	e0b5      	b.n	8000c4e <__aeabi_dadd+0x5fa>
 8000ae2:	2501      	movs	r5, #1
 8000ae4:	2938      	cmp	r1, #56	@ 0x38
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dadd+0x496>
 8000ae8:	e741      	b.n	800096e <__aeabi_dadd+0x31a>
 8000aea:	000a      	movs	r2, r1
 8000aec:	e72f      	b.n	800094e <__aeabi_dadd+0x2fa>
 8000aee:	4c89      	ldr	r4, [pc, #548]	@ (8000d14 <__aeabi_dadd+0x6c0>)
 8000af0:	1aff      	subs	r7, r7, r3
 8000af2:	4014      	ands	r4, r2
 8000af4:	0762      	lsls	r2, r4, #29
 8000af6:	08e4      	lsrs	r4, r4, #3
 8000af8:	e76a      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000afa:	4a85      	ldr	r2, [pc, #532]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000afc:	4291      	cmp	r1, r2
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dadd+0x4ae>
 8000b00:	e0e3      	b.n	8000cca <__aeabi_dadd+0x676>
 8000b02:	4663      	mov	r3, ip
 8000b04:	18c2      	adds	r2, r0, r3
 8000b06:	4282      	cmp	r2, r0
 8000b08:	4180      	sbcs	r0, r0
 8000b0a:	0023      	movs	r3, r4
 8000b0c:	4240      	negs	r0, r0
 8000b0e:	4453      	add	r3, sl
 8000b10:	181b      	adds	r3, r3, r0
 8000b12:	07dd      	lsls	r5, r3, #31
 8000b14:	085c      	lsrs	r4, r3, #1
 8000b16:	2307      	movs	r3, #7
 8000b18:	0852      	lsrs	r2, r2, #1
 8000b1a:	4315      	orrs	r5, r2
 8000b1c:	000f      	movs	r7, r1
 8000b1e:	402b      	ands	r3, r5
 8000b20:	e700      	b.n	8000924 <__aeabi_dadd+0x2d0>
 8000b22:	4663      	mov	r3, ip
 8000b24:	1a1d      	subs	r5, r3, r0
 8000b26:	45ac      	cmp	ip, r5
 8000b28:	4192      	sbcs	r2, r2
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	1b1c      	subs	r4, r3, r4
 8000b30:	000e      	movs	r6, r1
 8000b32:	4688      	mov	r8, r1
 8000b34:	1aa4      	subs	r4, r4, r2
 8000b36:	e5e5      	b.n	8000704 <__aeabi_dadd+0xb0>
 8000b38:	2d00      	cmp	r5, #0
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_dadd+0x4ea>
 8000b3c:	e091      	b.n	8000c62 <__aeabi_dadd+0x60e>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d138      	bne.n	8000bb4 <__aeabi_dadd+0x560>
 8000b42:	2480      	movs	r4, #128	@ 0x80
 8000b44:	2600      	movs	r6, #0
 8000b46:	0324      	lsls	r4, r4, #12
 8000b48:	e756      	b.n	80009f8 <__aeabi_dadd+0x3a4>
 8000b4a:	4663      	mov	r3, ip
 8000b4c:	18c5      	adds	r5, r0, r3
 8000b4e:	4285      	cmp	r5, r0
 8000b50:	4180      	sbcs	r0, r0
 8000b52:	4454      	add	r4, sl
 8000b54:	4240      	negs	r0, r0
 8000b56:	1824      	adds	r4, r4, r0
 8000b58:	2701      	movs	r7, #1
 8000b5a:	0223      	lsls	r3, r4, #8
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_dadd+0x50c>
 8000b5e:	e6df      	b.n	8000920 <__aeabi_dadd+0x2cc>
 8000b60:	2702      	movs	r7, #2
 8000b62:	e687      	b.n	8000874 <__aeabi_dadd+0x220>
 8000b64:	4663      	mov	r3, ip
 8000b66:	1ac5      	subs	r5, r0, r3
 8000b68:	42a8      	cmp	r0, r5
 8000b6a:	4180      	sbcs	r0, r0
 8000b6c:	4653      	mov	r3, sl
 8000b6e:	4240      	negs	r0, r0
 8000b70:	1ae4      	subs	r4, r4, r3
 8000b72:	2701      	movs	r7, #1
 8000b74:	1a24      	subs	r4, r4, r0
 8000b76:	e5c0      	b.n	80006fa <__aeabi_dadd+0xa6>
 8000b78:	0762      	lsls	r2, r4, #29
 8000b7a:	08c0      	lsrs	r0, r0, #3
 8000b7c:	4302      	orrs	r2, r0
 8000b7e:	08e4      	lsrs	r4, r4, #3
 8000b80:	e736      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000b82:	0011      	movs	r1, r2
 8000b84:	4653      	mov	r3, sl
 8000b86:	3920      	subs	r1, #32
 8000b88:	40cb      	lsrs	r3, r1
 8000b8a:	4699      	mov	r9, r3
 8000b8c:	2a20      	cmp	r2, #32
 8000b8e:	d006      	beq.n	8000b9e <__aeabi_dadd+0x54a>
 8000b90:	2140      	movs	r1, #64	@ 0x40
 8000b92:	4653      	mov	r3, sl
 8000b94:	1a8a      	subs	r2, r1, r2
 8000b96:	4093      	lsls	r3, r2
 8000b98:	4662      	mov	r2, ip
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	4694      	mov	ip, r2
 8000b9e:	4665      	mov	r5, ip
 8000ba0:	1e6b      	subs	r3, r5, #1
 8000ba2:	419d      	sbcs	r5, r3
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	431d      	orrs	r5, r3
 8000ba8:	e659      	b.n	800085e <__aeabi_dadd+0x20a>
 8000baa:	0762      	lsls	r2, r4, #29
 8000bac:	08c0      	lsrs	r0, r0, #3
 8000bae:	4302      	orrs	r2, r0
 8000bb0:	08e4      	lsrs	r4, r4, #3
 8000bb2:	e70d      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000bb4:	4653      	mov	r3, sl
 8000bb6:	075a      	lsls	r2, r3, #29
 8000bb8:	4663      	mov	r3, ip
 8000bba:	08d8      	lsrs	r0, r3, #3
 8000bbc:	4653      	mov	r3, sl
 8000bbe:	000e      	movs	r6, r1
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	08dc      	lsrs	r4, r3, #3
 8000bc4:	e714      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000bc6:	0015      	movs	r5, r2
 8000bc8:	0026      	movs	r6, r4
 8000bca:	3d20      	subs	r5, #32
 8000bcc:	40ee      	lsrs	r6, r5
 8000bce:	2a20      	cmp	r2, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x586>
 8000bd2:	2540      	movs	r5, #64	@ 0x40
 8000bd4:	1aaa      	subs	r2, r5, r2
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	4320      	orrs	r0, r4
 8000bda:	1e42      	subs	r2, r0, #1
 8000bdc:	4190      	sbcs	r0, r2
 8000bde:	0005      	movs	r5, r0
 8000be0:	4335      	orrs	r5, r6
 8000be2:	e606      	b.n	80007f2 <__aeabi_dadd+0x19e>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d07c      	beq.n	8000ce2 <__aeabi_dadd+0x68e>
 8000be8:	4662      	mov	r2, ip
 8000bea:	4653      	mov	r3, sl
 8000bec:	08c0      	lsrs	r0, r0, #3
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x5a0>
 8000bf2:	e6fa      	b.n	80009ea <__aeabi_dadd+0x396>
 8000bf4:	0762      	lsls	r2, r4, #29
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	08e4      	lsrs	r4, r4, #3
 8000bfc:	0312      	lsls	r2, r2, #12
 8000bfe:	4214      	tst	r4, r2
 8000c00:	d008      	beq.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c02:	08d9      	lsrs	r1, r3, #3
 8000c04:	4211      	tst	r1, r2
 8000c06:	d105      	bne.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	08d8      	lsrs	r0, r3, #3
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	000c      	movs	r4, r1
 8000c10:	075b      	lsls	r3, r3, #29
 8000c12:	4318      	orrs	r0, r3
 8000c14:	0f42      	lsrs	r2, r0, #29
 8000c16:	00c0      	lsls	r0, r0, #3
 8000c18:	08c0      	lsrs	r0, r0, #3
 8000c1a:	0752      	lsls	r2, r2, #29
 8000c1c:	4302      	orrs	r2, r0
 8000c1e:	e6e7      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x5d2>
 8000c24:	e72d      	b.n	8000a82 <__aeabi_dadd+0x42e>
 8000c26:	4663      	mov	r3, ip
 8000c28:	08d8      	lsrs	r0, r3, #3
 8000c2a:	4653      	mov	r3, sl
 8000c2c:	075a      	lsls	r2, r3, #29
 8000c2e:	000e      	movs	r6, r1
 8000c30:	4302      	orrs	r2, r0
 8000c32:	08dc      	lsrs	r4, r3, #3
 8000c34:	e6cc      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000c36:	4663      	mov	r3, ip
 8000c38:	1a1d      	subs	r5, r3, r0
 8000c3a:	45ac      	cmp	ip, r5
 8000c3c:	4192      	sbcs	r2, r2
 8000c3e:	4653      	mov	r3, sl
 8000c40:	4252      	negs	r2, r2
 8000c42:	1b1c      	subs	r4, r3, r4
 8000c44:	000e      	movs	r6, r1
 8000c46:	4688      	mov	r8, r1
 8000c48:	1aa4      	subs	r4, r4, r2
 8000c4a:	3701      	adds	r7, #1
 8000c4c:	e555      	b.n	80006fa <__aeabi_dadd+0xa6>
 8000c4e:	4663      	mov	r3, ip
 8000c50:	08d9      	lsrs	r1, r3, #3
 8000c52:	4653      	mov	r3, sl
 8000c54:	075a      	lsls	r2, r3, #29
 8000c56:	430a      	orrs	r2, r1
 8000c58:	08dc      	lsrs	r4, r3, #3
 8000c5a:	e6c9      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000c5c:	4660      	mov	r0, ip
 8000c5e:	4654      	mov	r4, sl
 8000c60:	e6d4      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 8000c62:	08c0      	lsrs	r0, r0, #3
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x616>
 8000c68:	e6bf      	b.n	80009ea <__aeabi_dadd+0x396>
 8000c6a:	0762      	lsls	r2, r4, #29
 8000c6c:	4310      	orrs	r0, r2
 8000c6e:	2280      	movs	r2, #128	@ 0x80
 8000c70:	08e4      	lsrs	r4, r4, #3
 8000c72:	0312      	lsls	r2, r2, #12
 8000c74:	4214      	tst	r4, r2
 8000c76:	d0cd      	beq.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c78:	08dd      	lsrs	r5, r3, #3
 8000c7a:	4215      	tst	r5, r2
 8000c7c:	d1ca      	bne.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c7e:	4663      	mov	r3, ip
 8000c80:	08d8      	lsrs	r0, r3, #3
 8000c82:	4653      	mov	r3, sl
 8000c84:	075b      	lsls	r3, r3, #29
 8000c86:	000e      	movs	r6, r1
 8000c88:	002c      	movs	r4, r5
 8000c8a:	4318      	orrs	r0, r3
 8000c8c:	e7c2      	b.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c8e:	4663      	mov	r3, ip
 8000c90:	08d9      	lsrs	r1, r3, #3
 8000c92:	4653      	mov	r3, sl
 8000c94:	075a      	lsls	r2, r3, #29
 8000c96:	430a      	orrs	r2, r1
 8000c98:	08dc      	lsrs	r4, r3, #3
 8000c9a:	e699      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	08d8      	lsrs	r0, r3, #3
 8000ca0:	4653      	mov	r3, sl
 8000ca2:	075a      	lsls	r2, r3, #29
 8000ca4:	000e      	movs	r6, r1
 8000ca6:	4302      	orrs	r2, r0
 8000ca8:	08dc      	lsrs	r4, r3, #3
 8000caa:	e6a1      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000cac:	0011      	movs	r1, r2
 8000cae:	0027      	movs	r7, r4
 8000cb0:	3920      	subs	r1, #32
 8000cb2:	40cf      	lsrs	r7, r1
 8000cb4:	2a20      	cmp	r2, #32
 8000cb6:	d003      	beq.n	8000cc0 <__aeabi_dadd+0x66c>
 8000cb8:	2140      	movs	r1, #64	@ 0x40
 8000cba:	1a8a      	subs	r2, r1, r2
 8000cbc:	4094      	lsls	r4, r2
 8000cbe:	4320      	orrs	r0, r4
 8000cc0:	1e42      	subs	r2, r0, #1
 8000cc2:	4190      	sbcs	r0, r2
 8000cc4:	0005      	movs	r5, r0
 8000cc6:	433d      	orrs	r5, r7
 8000cc8:	e651      	b.n	800096e <__aeabi_dadd+0x31a>
 8000cca:	000c      	movs	r4, r1
 8000ccc:	2500      	movs	r5, #0
 8000cce:	2200      	movs	r2, #0
 8000cd0:	e558      	b.n	8000784 <__aeabi_dadd+0x130>
 8000cd2:	4460      	add	r0, ip
 8000cd4:	4560      	cmp	r0, ip
 8000cd6:	4192      	sbcs	r2, r2
 8000cd8:	4454      	add	r4, sl
 8000cda:	4252      	negs	r2, r2
 8000cdc:	0005      	movs	r5, r0
 8000cde:	18a4      	adds	r4, r4, r2
 8000ce0:	e73a      	b.n	8000b58 <__aeabi_dadd+0x504>
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	075a      	lsls	r2, r3, #29
 8000ce6:	4663      	mov	r3, ip
 8000ce8:	08d9      	lsrs	r1, r3, #3
 8000cea:	4653      	mov	r3, sl
 8000cec:	430a      	orrs	r2, r1
 8000cee:	08dc      	lsrs	r4, r3, #3
 8000cf0:	e67e      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	432a      	orrs	r2, r5
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_dadd+0x6a8>
 8000cfa:	e6ab      	b.n	8000a54 <__aeabi_dadd+0x400>
 8000cfc:	e6c1      	b.n	8000a82 <__aeabi_dadd+0x42e>
 8000cfe:	2120      	movs	r1, #32
 8000d00:	2500      	movs	r5, #0
 8000d02:	1a09      	subs	r1, r1, r0
 8000d04:	e519      	b.n	800073a <__aeabi_dadd+0xe6>
 8000d06:	2200      	movs	r2, #0
 8000d08:	2500      	movs	r5, #0
 8000d0a:	4c01      	ldr	r4, [pc, #4]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000d0c:	e53a      	b.n	8000784 <__aeabi_dadd+0x130>
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	000007ff 	.word	0x000007ff
 8000d14:	ff7fffff 	.word	0xff7fffff
 8000d18:	000007fe 	.word	0x000007fe

08000d1c <__aeabi_ddiv>:
 8000d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1e:	46de      	mov	lr, fp
 8000d20:	4645      	mov	r5, r8
 8000d22:	4657      	mov	r7, sl
 8000d24:	464e      	mov	r6, r9
 8000d26:	b5e0      	push	{r5, r6, r7, lr}
 8000d28:	b087      	sub	sp, #28
 8000d2a:	9200      	str	r2, [sp, #0]
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	030b      	lsls	r3, r1, #12
 8000d30:	0b1b      	lsrs	r3, r3, #12
 8000d32:	469b      	mov	fp, r3
 8000d34:	0fca      	lsrs	r2, r1, #31
 8000d36:	004b      	lsls	r3, r1, #1
 8000d38:	0004      	movs	r4, r0
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	0d5b      	lsrs	r3, r3, #21
 8000d3e:	9202      	str	r2, [sp, #8]
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0x28>
 8000d42:	e16a      	b.n	800101a <__aeabi_ddiv+0x2fe>
 8000d44:	4ad4      	ldr	r2, [pc, #848]	@ (8001098 <__aeabi_ddiv+0x37c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d100      	bne.n	8000d4c <__aeabi_ddiv+0x30>
 8000d4a:	e18c      	b.n	8001066 <__aeabi_ddiv+0x34a>
 8000d4c:	4659      	mov	r1, fp
 8000d4e:	0f42      	lsrs	r2, r0, #29
 8000d50:	00c9      	lsls	r1, r1, #3
 8000d52:	430a      	orrs	r2, r1
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	0409      	lsls	r1, r1, #16
 8000d58:	4311      	orrs	r1, r2
 8000d5a:	00c2      	lsls	r2, r0, #3
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	4acf      	ldr	r2, [pc, #828]	@ (800109c <__aeabi_ddiv+0x380>)
 8000d60:	4689      	mov	r9, r1
 8000d62:	4692      	mov	sl, r2
 8000d64:	449a      	add	sl, r3
 8000d66:	2300      	movs	r3, #0
 8000d68:	2400      	movs	r4, #0
 8000d6a:	9303      	str	r3, [sp, #12]
 8000d6c:	9e00      	ldr	r6, [sp, #0]
 8000d6e:	9f01      	ldr	r7, [sp, #4]
 8000d70:	033b      	lsls	r3, r7, #12
 8000d72:	0b1b      	lsrs	r3, r3, #12
 8000d74:	469b      	mov	fp, r3
 8000d76:	007b      	lsls	r3, r7, #1
 8000d78:	0030      	movs	r0, r6
 8000d7a:	0d5b      	lsrs	r3, r3, #21
 8000d7c:	0ffd      	lsrs	r5, r7, #31
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_ddiv+0x68>
 8000d82:	e128      	b.n	8000fd6 <__aeabi_ddiv+0x2ba>
 8000d84:	4ac4      	ldr	r2, [pc, #784]	@ (8001098 <__aeabi_ddiv+0x37c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x70>
 8000d8a:	e177      	b.n	800107c <__aeabi_ddiv+0x360>
 8000d8c:	4659      	mov	r1, fp
 8000d8e:	0f72      	lsrs	r2, r6, #29
 8000d90:	00c9      	lsls	r1, r1, #3
 8000d92:	430a      	orrs	r2, r1
 8000d94:	2180      	movs	r1, #128	@ 0x80
 8000d96:	0409      	lsls	r1, r1, #16
 8000d98:	4311      	orrs	r1, r2
 8000d9a:	468b      	mov	fp, r1
 8000d9c:	49bf      	ldr	r1, [pc, #764]	@ (800109c <__aeabi_ddiv+0x380>)
 8000d9e:	00f2      	lsls	r2, r6, #3
 8000da0:	468c      	mov	ip, r1
 8000da2:	4651      	mov	r1, sl
 8000da4:	4463      	add	r3, ip
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	469a      	mov	sl, r3
 8000daa:	2300      	movs	r3, #0
 8000dac:	9e02      	ldr	r6, [sp, #8]
 8000dae:	406e      	eors	r6, r5
 8000db0:	2c0f      	cmp	r4, #15
 8000db2:	d827      	bhi.n	8000e04 <__aeabi_ddiv+0xe8>
 8000db4:	49ba      	ldr	r1, [pc, #744]	@ (80010a0 <__aeabi_ddiv+0x384>)
 8000db6:	00a4      	lsls	r4, r4, #2
 8000db8:	5909      	ldr	r1, [r1, r4]
 8000dba:	468f      	mov	pc, r1
 8000dbc:	46cb      	mov	fp, r9
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	9e02      	ldr	r6, [sp, #8]
 8000dc2:	9b03      	ldr	r3, [sp, #12]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d016      	beq.n	8000df6 <__aeabi_ddiv+0xda>
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d100      	bne.n	8000dce <__aeabi_ddiv+0xb2>
 8000dcc:	e2a6      	b.n	800131c <__aeabi_ddiv+0x600>
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_ddiv+0xb8>
 8000dd2:	e0df      	b.n	8000f94 <__aeabi_ddiv+0x278>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2400      	movs	r4, #0
 8000dda:	4690      	mov	r8, r2
 8000ddc:	051b      	lsls	r3, r3, #20
 8000dde:	4323      	orrs	r3, r4
 8000de0:	07f6      	lsls	r6, r6, #31
 8000de2:	4333      	orrs	r3, r6
 8000de4:	4640      	mov	r0, r8
 8000de6:	0019      	movs	r1, r3
 8000de8:	b007      	add	sp, #28
 8000dea:	bcf0      	pop	{r4, r5, r6, r7}
 8000dec:	46bb      	mov	fp, r7
 8000dee:	46b2      	mov	sl, r6
 8000df0:	46a9      	mov	r9, r5
 8000df2:	46a0      	mov	r8, r4
 8000df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df6:	2200      	movs	r2, #0
 8000df8:	2400      	movs	r4, #0
 8000dfa:	4690      	mov	r8, r2
 8000dfc:	4ba6      	ldr	r3, [pc, #664]	@ (8001098 <__aeabi_ddiv+0x37c>)
 8000dfe:	e7ed      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 8000e00:	002e      	movs	r6, r5
 8000e02:	e7df      	b.n	8000dc4 <__aeabi_ddiv+0xa8>
 8000e04:	45cb      	cmp	fp, r9
 8000e06:	d200      	bcs.n	8000e0a <__aeabi_ddiv+0xee>
 8000e08:	e1d4      	b.n	80011b4 <__aeabi_ddiv+0x498>
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_ddiv+0xf2>
 8000e0c:	e1cf      	b.n	80011ae <__aeabi_ddiv+0x492>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	425b      	negs	r3, r3
 8000e12:	469c      	mov	ip, r3
 8000e14:	4644      	mov	r4, r8
 8000e16:	4648      	mov	r0, r9
 8000e18:	2700      	movs	r7, #0
 8000e1a:	44e2      	add	sl, ip
 8000e1c:	465b      	mov	r3, fp
 8000e1e:	0e15      	lsrs	r5, r2, #24
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	431d      	orrs	r5, r3
 8000e24:	0c19      	lsrs	r1, r3, #16
 8000e26:	042b      	lsls	r3, r5, #16
 8000e28:	0212      	lsls	r2, r2, #8
 8000e2a:	9500      	str	r5, [sp, #0]
 8000e2c:	0c1d      	lsrs	r5, r3, #16
 8000e2e:	4691      	mov	r9, r2
 8000e30:	9102      	str	r1, [sp, #8]
 8000e32:	9503      	str	r5, [sp, #12]
 8000e34:	f7ff f9f4 	bl	8000220 <__aeabi_uidivmod>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	436a      	muls	r2, r5
 8000e3c:	040b      	lsls	r3, r1, #16
 8000e3e:	0c21      	lsrs	r1, r4, #16
 8000e40:	4680      	mov	r8, r0
 8000e42:	4319      	orrs	r1, r3
 8000e44:	428a      	cmp	r2, r1
 8000e46:	d909      	bls.n	8000e5c <__aeabi_ddiv+0x140>
 8000e48:	9d00      	ldr	r5, [sp, #0]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	46ac      	mov	ip, r5
 8000e4e:	425b      	negs	r3, r3
 8000e50:	4461      	add	r1, ip
 8000e52:	469c      	mov	ip, r3
 8000e54:	44e0      	add	r8, ip
 8000e56:	428d      	cmp	r5, r1
 8000e58:	d800      	bhi.n	8000e5c <__aeabi_ddiv+0x140>
 8000e5a:	e1fb      	b.n	8001254 <__aeabi_ddiv+0x538>
 8000e5c:	1a88      	subs	r0, r1, r2
 8000e5e:	9902      	ldr	r1, [sp, #8]
 8000e60:	f7ff f9de 	bl	8000220 <__aeabi_uidivmod>
 8000e64:	9a03      	ldr	r2, [sp, #12]
 8000e66:	0424      	lsls	r4, r4, #16
 8000e68:	4342      	muls	r2, r0
 8000e6a:	0409      	lsls	r1, r1, #16
 8000e6c:	0c24      	lsrs	r4, r4, #16
 8000e6e:	0003      	movs	r3, r0
 8000e70:	430c      	orrs	r4, r1
 8000e72:	42a2      	cmp	r2, r4
 8000e74:	d906      	bls.n	8000e84 <__aeabi_ddiv+0x168>
 8000e76:	9900      	ldr	r1, [sp, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	468c      	mov	ip, r1
 8000e7c:	4464      	add	r4, ip
 8000e7e:	42a1      	cmp	r1, r4
 8000e80:	d800      	bhi.n	8000e84 <__aeabi_ddiv+0x168>
 8000e82:	e1e1      	b.n	8001248 <__aeabi_ddiv+0x52c>
 8000e84:	1aa0      	subs	r0, r4, r2
 8000e86:	4642      	mov	r2, r8
 8000e88:	0412      	lsls	r2, r2, #16
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	4693      	mov	fp, r2
 8000e8e:	464b      	mov	r3, r9
 8000e90:	4659      	mov	r1, fp
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	001d      	movs	r5, r3
 8000e96:	9304      	str	r3, [sp, #16]
 8000e98:	040b      	lsls	r3, r1, #16
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	0409      	lsls	r1, r1, #16
 8000e9e:	0c09      	lsrs	r1, r1, #16
 8000ea0:	000c      	movs	r4, r1
 8000ea2:	0c1b      	lsrs	r3, r3, #16
 8000ea4:	435c      	muls	r4, r3
 8000ea6:	0c12      	lsrs	r2, r2, #16
 8000ea8:	436b      	muls	r3, r5
 8000eaa:	4688      	mov	r8, r1
 8000eac:	4351      	muls	r1, r2
 8000eae:	436a      	muls	r2, r5
 8000eb0:	0c25      	lsrs	r5, r4, #16
 8000eb2:	46ac      	mov	ip, r5
 8000eb4:	185b      	adds	r3, r3, r1
 8000eb6:	4463      	add	r3, ip
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	d903      	bls.n	8000ec4 <__aeabi_ddiv+0x1a8>
 8000ebc:	2180      	movs	r1, #128	@ 0x80
 8000ebe:	0249      	lsls	r1, r1, #9
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	4462      	add	r2, ip
 8000ec4:	0c19      	lsrs	r1, r3, #16
 8000ec6:	0424      	lsls	r4, r4, #16
 8000ec8:	041b      	lsls	r3, r3, #16
 8000eca:	0c24      	lsrs	r4, r4, #16
 8000ecc:	188a      	adds	r2, r1, r2
 8000ece:	191c      	adds	r4, r3, r4
 8000ed0:	4290      	cmp	r0, r2
 8000ed2:	d302      	bcc.n	8000eda <__aeabi_ddiv+0x1be>
 8000ed4:	d116      	bne.n	8000f04 <__aeabi_ddiv+0x1e8>
 8000ed6:	42a7      	cmp	r7, r4
 8000ed8:	d214      	bcs.n	8000f04 <__aeabi_ddiv+0x1e8>
 8000eda:	465b      	mov	r3, fp
 8000edc:	9d00      	ldr	r5, [sp, #0]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	444f      	add	r7, r9
 8000ee2:	9305      	str	r3, [sp, #20]
 8000ee4:	454f      	cmp	r7, r9
 8000ee6:	419b      	sbcs	r3, r3
 8000ee8:	46ac      	mov	ip, r5
 8000eea:	425b      	negs	r3, r3
 8000eec:	4463      	add	r3, ip
 8000eee:	18c0      	adds	r0, r0, r3
 8000ef0:	4285      	cmp	r5, r0
 8000ef2:	d300      	bcc.n	8000ef6 <__aeabi_ddiv+0x1da>
 8000ef4:	e1a1      	b.n	800123a <__aeabi_ddiv+0x51e>
 8000ef6:	4282      	cmp	r2, r0
 8000ef8:	d900      	bls.n	8000efc <__aeabi_ddiv+0x1e0>
 8000efa:	e1f6      	b.n	80012ea <__aeabi_ddiv+0x5ce>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1e4>
 8000efe:	e1f1      	b.n	80012e4 <__aeabi_ddiv+0x5c8>
 8000f00:	9b05      	ldr	r3, [sp, #20]
 8000f02:	469b      	mov	fp, r3
 8000f04:	1b3c      	subs	r4, r7, r4
 8000f06:	42a7      	cmp	r7, r4
 8000f08:	41bf      	sbcs	r7, r7
 8000f0a:	9d00      	ldr	r5, [sp, #0]
 8000f0c:	1a80      	subs	r0, r0, r2
 8000f0e:	427f      	negs	r7, r7
 8000f10:	1bc0      	subs	r0, r0, r7
 8000f12:	4285      	cmp	r5, r0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_ddiv+0x1fc>
 8000f16:	e1d0      	b.n	80012ba <__aeabi_ddiv+0x59e>
 8000f18:	9902      	ldr	r1, [sp, #8]
 8000f1a:	f7ff f981 	bl	8000220 <__aeabi_uidivmod>
 8000f1e:	9a03      	ldr	r2, [sp, #12]
 8000f20:	040b      	lsls	r3, r1, #16
 8000f22:	4342      	muls	r2, r0
 8000f24:	0c21      	lsrs	r1, r4, #16
 8000f26:	0007      	movs	r7, r0
 8000f28:	4319      	orrs	r1, r3
 8000f2a:	428a      	cmp	r2, r1
 8000f2c:	d900      	bls.n	8000f30 <__aeabi_ddiv+0x214>
 8000f2e:	e178      	b.n	8001222 <__aeabi_ddiv+0x506>
 8000f30:	1a88      	subs	r0, r1, r2
 8000f32:	9902      	ldr	r1, [sp, #8]
 8000f34:	f7ff f974 	bl	8000220 <__aeabi_uidivmod>
 8000f38:	9a03      	ldr	r2, [sp, #12]
 8000f3a:	0424      	lsls	r4, r4, #16
 8000f3c:	4342      	muls	r2, r0
 8000f3e:	0409      	lsls	r1, r1, #16
 8000f40:	0c24      	lsrs	r4, r4, #16
 8000f42:	0003      	movs	r3, r0
 8000f44:	430c      	orrs	r4, r1
 8000f46:	42a2      	cmp	r2, r4
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x230>
 8000f4a:	e15d      	b.n	8001208 <__aeabi_ddiv+0x4ec>
 8000f4c:	4641      	mov	r1, r8
 8000f4e:	1aa4      	subs	r4, r4, r2
 8000f50:	043a      	lsls	r2, r7, #16
 8000f52:	431a      	orrs	r2, r3
 8000f54:	9d04      	ldr	r5, [sp, #16]
 8000f56:	0413      	lsls	r3, r2, #16
 8000f58:	0c1b      	lsrs	r3, r3, #16
 8000f5a:	4359      	muls	r1, r3
 8000f5c:	4647      	mov	r7, r8
 8000f5e:	436b      	muls	r3, r5
 8000f60:	469c      	mov	ip, r3
 8000f62:	0c10      	lsrs	r0, r2, #16
 8000f64:	4347      	muls	r7, r0
 8000f66:	0c0b      	lsrs	r3, r1, #16
 8000f68:	44bc      	add	ip, r7
 8000f6a:	4463      	add	r3, ip
 8000f6c:	4368      	muls	r0, r5
 8000f6e:	429f      	cmp	r7, r3
 8000f70:	d903      	bls.n	8000f7a <__aeabi_ddiv+0x25e>
 8000f72:	2580      	movs	r5, #128	@ 0x80
 8000f74:	026d      	lsls	r5, r5, #9
 8000f76:	46ac      	mov	ip, r5
 8000f78:	4460      	add	r0, ip
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	0409      	lsls	r1, r1, #16
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	0c09      	lsrs	r1, r1, #16
 8000f82:	183f      	adds	r7, r7, r0
 8000f84:	185b      	adds	r3, r3, r1
 8000f86:	42bc      	cmp	r4, r7
 8000f88:	d200      	bcs.n	8000f8c <__aeabi_ddiv+0x270>
 8000f8a:	e102      	b.n	8001192 <__aeabi_ddiv+0x476>
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_ddiv+0x274>
 8000f8e:	e0fd      	b.n	800118c <__aeabi_ddiv+0x470>
 8000f90:	2301      	movs	r3, #1
 8000f92:	431a      	orrs	r2, r3
 8000f94:	4b43      	ldr	r3, [pc, #268]	@ (80010a4 <__aeabi_ddiv+0x388>)
 8000f96:	4453      	add	r3, sl
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_ddiv+0x282>
 8000f9c:	e0ae      	b.n	80010fc <__aeabi_ddiv+0x3e0>
 8000f9e:	0751      	lsls	r1, r2, #29
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_ddiv+0x288>
 8000fa2:	e198      	b.n	80012d6 <__aeabi_ddiv+0x5ba>
 8000fa4:	4659      	mov	r1, fp
 8000fa6:	01c9      	lsls	r1, r1, #7
 8000fa8:	d506      	bpl.n	8000fb8 <__aeabi_ddiv+0x29c>
 8000faa:	4659      	mov	r1, fp
 8000fac:	4b3e      	ldr	r3, [pc, #248]	@ (80010a8 <__aeabi_ddiv+0x38c>)
 8000fae:	4019      	ands	r1, r3
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	468b      	mov	fp, r1
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4453      	add	r3, sl
 8000fb8:	493c      	ldr	r1, [pc, #240]	@ (80010ac <__aeabi_ddiv+0x390>)
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	dd00      	ble.n	8000fc0 <__aeabi_ddiv+0x2a4>
 8000fbe:	e71a      	b.n	8000df6 <__aeabi_ddiv+0xda>
 8000fc0:	4659      	mov	r1, fp
 8000fc2:	08d2      	lsrs	r2, r2, #3
 8000fc4:	0749      	lsls	r1, r1, #29
 8000fc6:	4311      	orrs	r1, r2
 8000fc8:	465a      	mov	r2, fp
 8000fca:	055b      	lsls	r3, r3, #21
 8000fcc:	0254      	lsls	r4, r2, #9
 8000fce:	4688      	mov	r8, r1
 8000fd0:	0b24      	lsrs	r4, r4, #12
 8000fd2:	0d5b      	lsrs	r3, r3, #21
 8000fd4:	e702      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 8000fd6:	465a      	mov	r2, fp
 8000fd8:	9b00      	ldr	r3, [sp, #0]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x2c4>
 8000fde:	e07e      	b.n	80010de <__aeabi_ddiv+0x3c2>
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0x2cc>
 8000fe6:	e100      	b.n	80011ea <__aeabi_ddiv+0x4ce>
 8000fe8:	4658      	mov	r0, fp
 8000fea:	f001 f9cb 	bl	8002384 <__clzsi2>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	3a0b      	subs	r2, #11
 8000ff4:	271d      	movs	r7, #29
 8000ff6:	9e00      	ldr	r6, [sp, #0]
 8000ff8:	1aba      	subs	r2, r7, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	4658      	mov	r0, fp
 8000ffe:	40d6      	lsrs	r6, r2
 8001000:	3908      	subs	r1, #8
 8001002:	4088      	lsls	r0, r1
 8001004:	0032      	movs	r2, r6
 8001006:	4302      	orrs	r2, r0
 8001008:	4693      	mov	fp, r2
 800100a:	9a00      	ldr	r2, [sp, #0]
 800100c:	408a      	lsls	r2, r1
 800100e:	4928      	ldr	r1, [pc, #160]	@ (80010b0 <__aeabi_ddiv+0x394>)
 8001010:	4453      	add	r3, sl
 8001012:	468a      	mov	sl, r1
 8001014:	449a      	add	sl, r3
 8001016:	2300      	movs	r3, #0
 8001018:	e6c8      	b.n	8000dac <__aeabi_ddiv+0x90>
 800101a:	465b      	mov	r3, fp
 800101c:	4303      	orrs	r3, r0
 800101e:	4699      	mov	r9, r3
 8001020:	d056      	beq.n	80010d0 <__aeabi_ddiv+0x3b4>
 8001022:	465b      	mov	r3, fp
 8001024:	2b00      	cmp	r3, #0
 8001026:	d100      	bne.n	800102a <__aeabi_ddiv+0x30e>
 8001028:	e0cd      	b.n	80011c6 <__aeabi_ddiv+0x4aa>
 800102a:	4658      	mov	r0, fp
 800102c:	f001 f9aa 	bl	8002384 <__clzsi2>
 8001030:	230b      	movs	r3, #11
 8001032:	425b      	negs	r3, r3
 8001034:	469c      	mov	ip, r3
 8001036:	0002      	movs	r2, r0
 8001038:	4484      	add	ip, r0
 800103a:	4666      	mov	r6, ip
 800103c:	231d      	movs	r3, #29
 800103e:	1b9b      	subs	r3, r3, r6
 8001040:	0026      	movs	r6, r4
 8001042:	0011      	movs	r1, r2
 8001044:	4658      	mov	r0, fp
 8001046:	40de      	lsrs	r6, r3
 8001048:	3908      	subs	r1, #8
 800104a:	4088      	lsls	r0, r1
 800104c:	0033      	movs	r3, r6
 800104e:	4303      	orrs	r3, r0
 8001050:	4699      	mov	r9, r3
 8001052:	0023      	movs	r3, r4
 8001054:	408b      	lsls	r3, r1
 8001056:	4698      	mov	r8, r3
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <__aeabi_ddiv+0x398>)
 800105a:	2400      	movs	r4, #0
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	469a      	mov	sl, r3
 8001060:	2300      	movs	r3, #0
 8001062:	9303      	str	r3, [sp, #12]
 8001064:	e682      	b.n	8000d6c <__aeabi_ddiv+0x50>
 8001066:	465a      	mov	r2, fp
 8001068:	4302      	orrs	r2, r0
 800106a:	4691      	mov	r9, r2
 800106c:	d12a      	bne.n	80010c4 <__aeabi_ddiv+0x3a8>
 800106e:	2200      	movs	r2, #0
 8001070:	469a      	mov	sl, r3
 8001072:	2302      	movs	r3, #2
 8001074:	4690      	mov	r8, r2
 8001076:	2408      	movs	r4, #8
 8001078:	9303      	str	r3, [sp, #12]
 800107a:	e677      	b.n	8000d6c <__aeabi_ddiv+0x50>
 800107c:	465a      	mov	r2, fp
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	431a      	orrs	r2, r3
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <__aeabi_ddiv+0x39c>)
 8001084:	469c      	mov	ip, r3
 8001086:	44e2      	add	sl, ip
 8001088:	2a00      	cmp	r2, #0
 800108a:	d117      	bne.n	80010bc <__aeabi_ddiv+0x3a0>
 800108c:	2302      	movs	r3, #2
 800108e:	431c      	orrs	r4, r3
 8001090:	2300      	movs	r3, #0
 8001092:	469b      	mov	fp, r3
 8001094:	3302      	adds	r3, #2
 8001096:	e689      	b.n	8000dac <__aeabi_ddiv+0x90>
 8001098:	000007ff 	.word	0x000007ff
 800109c:	fffffc01 	.word	0xfffffc01
 80010a0:	08009340 	.word	0x08009340
 80010a4:	000003ff 	.word	0x000003ff
 80010a8:	feffffff 	.word	0xfeffffff
 80010ac:	000007fe 	.word	0x000007fe
 80010b0:	000003f3 	.word	0x000003f3
 80010b4:	fffffc0d 	.word	0xfffffc0d
 80010b8:	fffff801 	.word	0xfffff801
 80010bc:	2303      	movs	r3, #3
 80010be:	0032      	movs	r2, r6
 80010c0:	431c      	orrs	r4, r3
 80010c2:	e673      	b.n	8000dac <__aeabi_ddiv+0x90>
 80010c4:	469a      	mov	sl, r3
 80010c6:	2303      	movs	r3, #3
 80010c8:	46d9      	mov	r9, fp
 80010ca:	240c      	movs	r4, #12
 80010cc:	9303      	str	r3, [sp, #12]
 80010ce:	e64d      	b.n	8000d6c <__aeabi_ddiv+0x50>
 80010d0:	2300      	movs	r3, #0
 80010d2:	4698      	mov	r8, r3
 80010d4:	469a      	mov	sl, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	2404      	movs	r4, #4
 80010da:	9303      	str	r3, [sp, #12]
 80010dc:	e646      	b.n	8000d6c <__aeabi_ddiv+0x50>
 80010de:	2301      	movs	r3, #1
 80010e0:	431c      	orrs	r4, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	469b      	mov	fp, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	e660      	b.n	8000dac <__aeabi_ddiv+0x90>
 80010ea:	2300      	movs	r3, #0
 80010ec:	2480      	movs	r4, #128	@ 0x80
 80010ee:	4698      	mov	r8, r3
 80010f0:	2600      	movs	r6, #0
 80010f2:	4b92      	ldr	r3, [pc, #584]	@ (800133c <__aeabi_ddiv+0x620>)
 80010f4:	0324      	lsls	r4, r4, #12
 80010f6:	e671      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 80010f8:	2201      	movs	r2, #1
 80010fa:	4252      	negs	r2, r2
 80010fc:	2101      	movs	r1, #1
 80010fe:	1ac9      	subs	r1, r1, r3
 8001100:	2938      	cmp	r1, #56	@ 0x38
 8001102:	dd00      	ble.n	8001106 <__aeabi_ddiv+0x3ea>
 8001104:	e666      	b.n	8000dd4 <__aeabi_ddiv+0xb8>
 8001106:	291f      	cmp	r1, #31
 8001108:	dc00      	bgt.n	800110c <__aeabi_ddiv+0x3f0>
 800110a:	e0ab      	b.n	8001264 <__aeabi_ddiv+0x548>
 800110c:	201f      	movs	r0, #31
 800110e:	4240      	negs	r0, r0
 8001110:	1ac3      	subs	r3, r0, r3
 8001112:	4658      	mov	r0, fp
 8001114:	40d8      	lsrs	r0, r3
 8001116:	0003      	movs	r3, r0
 8001118:	2920      	cmp	r1, #32
 800111a:	d004      	beq.n	8001126 <__aeabi_ddiv+0x40a>
 800111c:	4658      	mov	r0, fp
 800111e:	4988      	ldr	r1, [pc, #544]	@ (8001340 <__aeabi_ddiv+0x624>)
 8001120:	4451      	add	r1, sl
 8001122:	4088      	lsls	r0, r1
 8001124:	4302      	orrs	r2, r0
 8001126:	1e51      	subs	r1, r2, #1
 8001128:	418a      	sbcs	r2, r1
 800112a:	431a      	orrs	r2, r3
 800112c:	2307      	movs	r3, #7
 800112e:	0019      	movs	r1, r3
 8001130:	2400      	movs	r4, #0
 8001132:	4011      	ands	r1, r2
 8001134:	4213      	tst	r3, r2
 8001136:	d00c      	beq.n	8001152 <__aeabi_ddiv+0x436>
 8001138:	230f      	movs	r3, #15
 800113a:	4013      	ands	r3, r2
 800113c:	2b04      	cmp	r3, #4
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x426>
 8001140:	e0f9      	b.n	8001336 <__aeabi_ddiv+0x61a>
 8001142:	1d11      	adds	r1, r2, #4
 8001144:	4291      	cmp	r1, r2
 8001146:	419b      	sbcs	r3, r3
 8001148:	000a      	movs	r2, r1
 800114a:	425b      	negs	r3, r3
 800114c:	0759      	lsls	r1, r3, #29
 800114e:	025b      	lsls	r3, r3, #9
 8001150:	0b1c      	lsrs	r4, r3, #12
 8001152:	08d2      	lsrs	r2, r2, #3
 8001154:	430a      	orrs	r2, r1
 8001156:	4690      	mov	r8, r2
 8001158:	2300      	movs	r3, #0
 800115a:	e63f      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800115c:	2480      	movs	r4, #128	@ 0x80
 800115e:	464b      	mov	r3, r9
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	4223      	tst	r3, r4
 8001164:	d009      	beq.n	800117a <__aeabi_ddiv+0x45e>
 8001166:	465b      	mov	r3, fp
 8001168:	4223      	tst	r3, r4
 800116a:	d106      	bne.n	800117a <__aeabi_ddiv+0x45e>
 800116c:	431c      	orrs	r4, r3
 800116e:	0324      	lsls	r4, r4, #12
 8001170:	002e      	movs	r6, r5
 8001172:	4690      	mov	r8, r2
 8001174:	4b71      	ldr	r3, [pc, #452]	@ (800133c <__aeabi_ddiv+0x620>)
 8001176:	0b24      	lsrs	r4, r4, #12
 8001178:	e630      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800117a:	2480      	movs	r4, #128	@ 0x80
 800117c:	464b      	mov	r3, r9
 800117e:	0324      	lsls	r4, r4, #12
 8001180:	431c      	orrs	r4, r3
 8001182:	0324      	lsls	r4, r4, #12
 8001184:	9e02      	ldr	r6, [sp, #8]
 8001186:	4b6d      	ldr	r3, [pc, #436]	@ (800133c <__aeabi_ddiv+0x620>)
 8001188:	0b24      	lsrs	r4, r4, #12
 800118a:	e627      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_ddiv+0x476>
 8001190:	e700      	b.n	8000f94 <__aeabi_ddiv+0x278>
 8001192:	9800      	ldr	r0, [sp, #0]
 8001194:	1e51      	subs	r1, r2, #1
 8001196:	4684      	mov	ip, r0
 8001198:	4464      	add	r4, ip
 800119a:	4284      	cmp	r4, r0
 800119c:	d200      	bcs.n	80011a0 <__aeabi_ddiv+0x484>
 800119e:	e084      	b.n	80012aa <__aeabi_ddiv+0x58e>
 80011a0:	42bc      	cmp	r4, r7
 80011a2:	d200      	bcs.n	80011a6 <__aeabi_ddiv+0x48a>
 80011a4:	e0ae      	b.n	8001304 <__aeabi_ddiv+0x5e8>
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x48e>
 80011a8:	e0c1      	b.n	800132e <__aeabi_ddiv+0x612>
 80011aa:	000a      	movs	r2, r1
 80011ac:	e6f0      	b.n	8000f90 <__aeabi_ddiv+0x274>
 80011ae:	4542      	cmp	r2, r8
 80011b0:	d900      	bls.n	80011b4 <__aeabi_ddiv+0x498>
 80011b2:	e62c      	b.n	8000e0e <__aeabi_ddiv+0xf2>
 80011b4:	464b      	mov	r3, r9
 80011b6:	07dc      	lsls	r4, r3, #31
 80011b8:	0858      	lsrs	r0, r3, #1
 80011ba:	4643      	mov	r3, r8
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	431c      	orrs	r4, r3
 80011c0:	4643      	mov	r3, r8
 80011c2:	07df      	lsls	r7, r3, #31
 80011c4:	e62a      	b.n	8000e1c <__aeabi_ddiv+0x100>
 80011c6:	f001 f8dd 	bl	8002384 <__clzsi2>
 80011ca:	2315      	movs	r3, #21
 80011cc:	469c      	mov	ip, r3
 80011ce:	4484      	add	ip, r0
 80011d0:	0002      	movs	r2, r0
 80011d2:	4663      	mov	r3, ip
 80011d4:	3220      	adds	r2, #32
 80011d6:	2b1c      	cmp	r3, #28
 80011d8:	dc00      	bgt.n	80011dc <__aeabi_ddiv+0x4c0>
 80011da:	e72e      	b.n	800103a <__aeabi_ddiv+0x31e>
 80011dc:	0023      	movs	r3, r4
 80011de:	3808      	subs	r0, #8
 80011e0:	4083      	lsls	r3, r0
 80011e2:	4699      	mov	r9, r3
 80011e4:	2300      	movs	r3, #0
 80011e6:	4698      	mov	r8, r3
 80011e8:	e736      	b.n	8001058 <__aeabi_ddiv+0x33c>
 80011ea:	f001 f8cb 	bl	8002384 <__clzsi2>
 80011ee:	0002      	movs	r2, r0
 80011f0:	0003      	movs	r3, r0
 80011f2:	3215      	adds	r2, #21
 80011f4:	3320      	adds	r3, #32
 80011f6:	2a1c      	cmp	r2, #28
 80011f8:	dc00      	bgt.n	80011fc <__aeabi_ddiv+0x4e0>
 80011fa:	e6fb      	b.n	8000ff4 <__aeabi_ddiv+0x2d8>
 80011fc:	9900      	ldr	r1, [sp, #0]
 80011fe:	3808      	subs	r0, #8
 8001200:	4081      	lsls	r1, r0
 8001202:	2200      	movs	r2, #0
 8001204:	468b      	mov	fp, r1
 8001206:	e702      	b.n	800100e <__aeabi_ddiv+0x2f2>
 8001208:	9900      	ldr	r1, [sp, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	468c      	mov	ip, r1
 800120e:	4464      	add	r4, ip
 8001210:	42a1      	cmp	r1, r4
 8001212:	d900      	bls.n	8001216 <__aeabi_ddiv+0x4fa>
 8001214:	e69a      	b.n	8000f4c <__aeabi_ddiv+0x230>
 8001216:	42a2      	cmp	r2, r4
 8001218:	d800      	bhi.n	800121c <__aeabi_ddiv+0x500>
 800121a:	e697      	b.n	8000f4c <__aeabi_ddiv+0x230>
 800121c:	1e83      	subs	r3, r0, #2
 800121e:	4464      	add	r4, ip
 8001220:	e694      	b.n	8000f4c <__aeabi_ddiv+0x230>
 8001222:	46ac      	mov	ip, r5
 8001224:	4461      	add	r1, ip
 8001226:	3f01      	subs	r7, #1
 8001228:	428d      	cmp	r5, r1
 800122a:	d900      	bls.n	800122e <__aeabi_ddiv+0x512>
 800122c:	e680      	b.n	8000f30 <__aeabi_ddiv+0x214>
 800122e:	428a      	cmp	r2, r1
 8001230:	d800      	bhi.n	8001234 <__aeabi_ddiv+0x518>
 8001232:	e67d      	b.n	8000f30 <__aeabi_ddiv+0x214>
 8001234:	1e87      	subs	r7, r0, #2
 8001236:	4461      	add	r1, ip
 8001238:	e67a      	b.n	8000f30 <__aeabi_ddiv+0x214>
 800123a:	4285      	cmp	r5, r0
 800123c:	d000      	beq.n	8001240 <__aeabi_ddiv+0x524>
 800123e:	e65f      	b.n	8000f00 <__aeabi_ddiv+0x1e4>
 8001240:	45b9      	cmp	r9, r7
 8001242:	d900      	bls.n	8001246 <__aeabi_ddiv+0x52a>
 8001244:	e65c      	b.n	8000f00 <__aeabi_ddiv+0x1e4>
 8001246:	e656      	b.n	8000ef6 <__aeabi_ddiv+0x1da>
 8001248:	42a2      	cmp	r2, r4
 800124a:	d800      	bhi.n	800124e <__aeabi_ddiv+0x532>
 800124c:	e61a      	b.n	8000e84 <__aeabi_ddiv+0x168>
 800124e:	1e83      	subs	r3, r0, #2
 8001250:	4464      	add	r4, ip
 8001252:	e617      	b.n	8000e84 <__aeabi_ddiv+0x168>
 8001254:	428a      	cmp	r2, r1
 8001256:	d800      	bhi.n	800125a <__aeabi_ddiv+0x53e>
 8001258:	e600      	b.n	8000e5c <__aeabi_ddiv+0x140>
 800125a:	46ac      	mov	ip, r5
 800125c:	1e83      	subs	r3, r0, #2
 800125e:	4698      	mov	r8, r3
 8001260:	4461      	add	r1, ip
 8001262:	e5fb      	b.n	8000e5c <__aeabi_ddiv+0x140>
 8001264:	4837      	ldr	r0, [pc, #220]	@ (8001344 <__aeabi_ddiv+0x628>)
 8001266:	0014      	movs	r4, r2
 8001268:	4450      	add	r0, sl
 800126a:	4082      	lsls	r2, r0
 800126c:	465b      	mov	r3, fp
 800126e:	0017      	movs	r7, r2
 8001270:	4083      	lsls	r3, r0
 8001272:	40cc      	lsrs	r4, r1
 8001274:	1e7a      	subs	r2, r7, #1
 8001276:	4197      	sbcs	r7, r2
 8001278:	4323      	orrs	r3, r4
 800127a:	433b      	orrs	r3, r7
 800127c:	001a      	movs	r2, r3
 800127e:	465b      	mov	r3, fp
 8001280:	40cb      	lsrs	r3, r1
 8001282:	0751      	lsls	r1, r2, #29
 8001284:	d009      	beq.n	800129a <__aeabi_ddiv+0x57e>
 8001286:	210f      	movs	r1, #15
 8001288:	4011      	ands	r1, r2
 800128a:	2904      	cmp	r1, #4
 800128c:	d005      	beq.n	800129a <__aeabi_ddiv+0x57e>
 800128e:	1d11      	adds	r1, r2, #4
 8001290:	4291      	cmp	r1, r2
 8001292:	4192      	sbcs	r2, r2
 8001294:	4252      	negs	r2, r2
 8001296:	189b      	adds	r3, r3, r2
 8001298:	000a      	movs	r2, r1
 800129a:	0219      	lsls	r1, r3, #8
 800129c:	d400      	bmi.n	80012a0 <__aeabi_ddiv+0x584>
 800129e:	e755      	b.n	800114c <__aeabi_ddiv+0x430>
 80012a0:	2200      	movs	r2, #0
 80012a2:	2301      	movs	r3, #1
 80012a4:	2400      	movs	r4, #0
 80012a6:	4690      	mov	r8, r2
 80012a8:	e598      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 80012aa:	000a      	movs	r2, r1
 80012ac:	42bc      	cmp	r4, r7
 80012ae:	d000      	beq.n	80012b2 <__aeabi_ddiv+0x596>
 80012b0:	e66e      	b.n	8000f90 <__aeabi_ddiv+0x274>
 80012b2:	454b      	cmp	r3, r9
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x59c>
 80012b6:	e66b      	b.n	8000f90 <__aeabi_ddiv+0x274>
 80012b8:	e66c      	b.n	8000f94 <__aeabi_ddiv+0x278>
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <__aeabi_ddiv+0x62c>)
 80012bc:	4a23      	ldr	r2, [pc, #140]	@ (800134c <__aeabi_ddiv+0x630>)
 80012be:	4453      	add	r3, sl
 80012c0:	4592      	cmp	sl, r2
 80012c2:	da00      	bge.n	80012c6 <__aeabi_ddiv+0x5aa>
 80012c4:	e718      	b.n	80010f8 <__aeabi_ddiv+0x3dc>
 80012c6:	2101      	movs	r1, #1
 80012c8:	4249      	negs	r1, r1
 80012ca:	1d0a      	adds	r2, r1, #4
 80012cc:	428a      	cmp	r2, r1
 80012ce:	4189      	sbcs	r1, r1
 80012d0:	4249      	negs	r1, r1
 80012d2:	448b      	add	fp, r1
 80012d4:	e666      	b.n	8000fa4 <__aeabi_ddiv+0x288>
 80012d6:	210f      	movs	r1, #15
 80012d8:	4011      	ands	r1, r2
 80012da:	2904      	cmp	r1, #4
 80012dc:	d100      	bne.n	80012e0 <__aeabi_ddiv+0x5c4>
 80012de:	e661      	b.n	8000fa4 <__aeabi_ddiv+0x288>
 80012e0:	0011      	movs	r1, r2
 80012e2:	e7f2      	b.n	80012ca <__aeabi_ddiv+0x5ae>
 80012e4:	42bc      	cmp	r4, r7
 80012e6:	d800      	bhi.n	80012ea <__aeabi_ddiv+0x5ce>
 80012e8:	e60a      	b.n	8000f00 <__aeabi_ddiv+0x1e4>
 80012ea:	2302      	movs	r3, #2
 80012ec:	425b      	negs	r3, r3
 80012ee:	469c      	mov	ip, r3
 80012f0:	9900      	ldr	r1, [sp, #0]
 80012f2:	444f      	add	r7, r9
 80012f4:	454f      	cmp	r7, r9
 80012f6:	419b      	sbcs	r3, r3
 80012f8:	44e3      	add	fp, ip
 80012fa:	468c      	mov	ip, r1
 80012fc:	425b      	negs	r3, r3
 80012fe:	4463      	add	r3, ip
 8001300:	18c0      	adds	r0, r0, r3
 8001302:	e5ff      	b.n	8000f04 <__aeabi_ddiv+0x1e8>
 8001304:	4649      	mov	r1, r9
 8001306:	9d00      	ldr	r5, [sp, #0]
 8001308:	0048      	lsls	r0, r1, #1
 800130a:	4548      	cmp	r0, r9
 800130c:	4189      	sbcs	r1, r1
 800130e:	46ac      	mov	ip, r5
 8001310:	4249      	negs	r1, r1
 8001312:	4461      	add	r1, ip
 8001314:	4681      	mov	r9, r0
 8001316:	3a02      	subs	r2, #2
 8001318:	1864      	adds	r4, r4, r1
 800131a:	e7c7      	b.n	80012ac <__aeabi_ddiv+0x590>
 800131c:	2480      	movs	r4, #128	@ 0x80
 800131e:	465b      	mov	r3, fp
 8001320:	0324      	lsls	r4, r4, #12
 8001322:	431c      	orrs	r4, r3
 8001324:	0324      	lsls	r4, r4, #12
 8001326:	4690      	mov	r8, r2
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__aeabi_ddiv+0x620>)
 800132a:	0b24      	lsrs	r4, r4, #12
 800132c:	e556      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800132e:	4599      	cmp	r9, r3
 8001330:	d3e8      	bcc.n	8001304 <__aeabi_ddiv+0x5e8>
 8001332:	000a      	movs	r2, r1
 8001334:	e7bd      	b.n	80012b2 <__aeabi_ddiv+0x596>
 8001336:	2300      	movs	r3, #0
 8001338:	e708      	b.n	800114c <__aeabi_ddiv+0x430>
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	000007ff 	.word	0x000007ff
 8001340:	0000043e 	.word	0x0000043e
 8001344:	0000041e 	.word	0x0000041e
 8001348:	000003ff 	.word	0x000003ff
 800134c:	fffffc02 	.word	0xfffffc02

08001350 <__eqdf2>:
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001352:	4657      	mov	r7, sl
 8001354:	46de      	mov	lr, fp
 8001356:	464e      	mov	r6, r9
 8001358:	4645      	mov	r5, r8
 800135a:	b5e0      	push	{r5, r6, r7, lr}
 800135c:	000d      	movs	r5, r1
 800135e:	0004      	movs	r4, r0
 8001360:	0fe8      	lsrs	r0, r5, #31
 8001362:	4683      	mov	fp, r0
 8001364:	0309      	lsls	r1, r1, #12
 8001366:	0fd8      	lsrs	r0, r3, #31
 8001368:	0b09      	lsrs	r1, r1, #12
 800136a:	4682      	mov	sl, r0
 800136c:	4819      	ldr	r0, [pc, #100]	@ (80013d4 <__eqdf2+0x84>)
 800136e:	468c      	mov	ip, r1
 8001370:	031f      	lsls	r7, r3, #12
 8001372:	0069      	lsls	r1, r5, #1
 8001374:	005e      	lsls	r6, r3, #1
 8001376:	0d49      	lsrs	r1, r1, #21
 8001378:	0b3f      	lsrs	r7, r7, #12
 800137a:	0d76      	lsrs	r6, r6, #21
 800137c:	4281      	cmp	r1, r0
 800137e:	d018      	beq.n	80013b2 <__eqdf2+0x62>
 8001380:	4286      	cmp	r6, r0
 8001382:	d00f      	beq.n	80013a4 <__eqdf2+0x54>
 8001384:	2001      	movs	r0, #1
 8001386:	42b1      	cmp	r1, r6
 8001388:	d10d      	bne.n	80013a6 <__eqdf2+0x56>
 800138a:	45bc      	cmp	ip, r7
 800138c:	d10b      	bne.n	80013a6 <__eqdf2+0x56>
 800138e:	4294      	cmp	r4, r2
 8001390:	d109      	bne.n	80013a6 <__eqdf2+0x56>
 8001392:	45d3      	cmp	fp, sl
 8001394:	d01c      	beq.n	80013d0 <__eqdf2+0x80>
 8001396:	2900      	cmp	r1, #0
 8001398:	d105      	bne.n	80013a6 <__eqdf2+0x56>
 800139a:	4660      	mov	r0, ip
 800139c:	4320      	orrs	r0, r4
 800139e:	1e43      	subs	r3, r0, #1
 80013a0:	4198      	sbcs	r0, r3
 80013a2:	e000      	b.n	80013a6 <__eqdf2+0x56>
 80013a4:	2001      	movs	r0, #1
 80013a6:	bcf0      	pop	{r4, r5, r6, r7}
 80013a8:	46bb      	mov	fp, r7
 80013aa:	46b2      	mov	sl, r6
 80013ac:	46a9      	mov	r9, r5
 80013ae:	46a0      	mov	r8, r4
 80013b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b2:	2001      	movs	r0, #1
 80013b4:	428e      	cmp	r6, r1
 80013b6:	d1f6      	bne.n	80013a6 <__eqdf2+0x56>
 80013b8:	4661      	mov	r1, ip
 80013ba:	4339      	orrs	r1, r7
 80013bc:	000f      	movs	r7, r1
 80013be:	4317      	orrs	r7, r2
 80013c0:	4327      	orrs	r7, r4
 80013c2:	d1f0      	bne.n	80013a6 <__eqdf2+0x56>
 80013c4:	465b      	mov	r3, fp
 80013c6:	4652      	mov	r2, sl
 80013c8:	1a98      	subs	r0, r3, r2
 80013ca:	1e43      	subs	r3, r0, #1
 80013cc:	4198      	sbcs	r0, r3
 80013ce:	e7ea      	b.n	80013a6 <__eqdf2+0x56>
 80013d0:	2000      	movs	r0, #0
 80013d2:	e7e8      	b.n	80013a6 <__eqdf2+0x56>
 80013d4:	000007ff 	.word	0x000007ff

080013d8 <__gedf2>:
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	4657      	mov	r7, sl
 80013dc:	464e      	mov	r6, r9
 80013de:	4645      	mov	r5, r8
 80013e0:	46de      	mov	lr, fp
 80013e2:	b5e0      	push	{r5, r6, r7, lr}
 80013e4:	000d      	movs	r5, r1
 80013e6:	030f      	lsls	r7, r1, #12
 80013e8:	0b39      	lsrs	r1, r7, #12
 80013ea:	b083      	sub	sp, #12
 80013ec:	0004      	movs	r4, r0
 80013ee:	4680      	mov	r8, r0
 80013f0:	9101      	str	r1, [sp, #4]
 80013f2:	0058      	lsls	r0, r3, #1
 80013f4:	0fe9      	lsrs	r1, r5, #31
 80013f6:	4f31      	ldr	r7, [pc, #196]	@ (80014bc <__gedf2+0xe4>)
 80013f8:	0d40      	lsrs	r0, r0, #21
 80013fa:	468c      	mov	ip, r1
 80013fc:	006e      	lsls	r6, r5, #1
 80013fe:	0319      	lsls	r1, r3, #12
 8001400:	4682      	mov	sl, r0
 8001402:	4691      	mov	r9, r2
 8001404:	0d76      	lsrs	r6, r6, #21
 8001406:	0b09      	lsrs	r1, r1, #12
 8001408:	0fd8      	lsrs	r0, r3, #31
 800140a:	42be      	cmp	r6, r7
 800140c:	d01f      	beq.n	800144e <__gedf2+0x76>
 800140e:	45ba      	cmp	sl, r7
 8001410:	d00f      	beq.n	8001432 <__gedf2+0x5a>
 8001412:	2e00      	cmp	r6, #0
 8001414:	d12f      	bne.n	8001476 <__gedf2+0x9e>
 8001416:	4655      	mov	r5, sl
 8001418:	9e01      	ldr	r6, [sp, #4]
 800141a:	4334      	orrs	r4, r6
 800141c:	2d00      	cmp	r5, #0
 800141e:	d127      	bne.n	8001470 <__gedf2+0x98>
 8001420:	430a      	orrs	r2, r1
 8001422:	d03a      	beq.n	800149a <__gedf2+0xc2>
 8001424:	2c00      	cmp	r4, #0
 8001426:	d145      	bne.n	80014b4 <__gedf2+0xdc>
 8001428:	2800      	cmp	r0, #0
 800142a:	d11a      	bne.n	8001462 <__gedf2+0x8a>
 800142c:	2001      	movs	r0, #1
 800142e:	4240      	negs	r0, r0
 8001430:	e017      	b.n	8001462 <__gedf2+0x8a>
 8001432:	4311      	orrs	r1, r2
 8001434:	d13b      	bne.n	80014ae <__gedf2+0xd6>
 8001436:	2e00      	cmp	r6, #0
 8001438:	d102      	bne.n	8001440 <__gedf2+0x68>
 800143a:	9f01      	ldr	r7, [sp, #4]
 800143c:	4327      	orrs	r7, r4
 800143e:	d0f3      	beq.n	8001428 <__gedf2+0x50>
 8001440:	4584      	cmp	ip, r0
 8001442:	d109      	bne.n	8001458 <__gedf2+0x80>
 8001444:	4663      	mov	r3, ip
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <__gedf2+0x54>
 800144a:	4660      	mov	r0, ip
 800144c:	e009      	b.n	8001462 <__gedf2+0x8a>
 800144e:	9f01      	ldr	r7, [sp, #4]
 8001450:	4327      	orrs	r7, r4
 8001452:	d12c      	bne.n	80014ae <__gedf2+0xd6>
 8001454:	45b2      	cmp	sl, r6
 8001456:	d024      	beq.n	80014a2 <__gedf2+0xca>
 8001458:	4663      	mov	r3, ip
 800145a:	2002      	movs	r0, #2
 800145c:	3b01      	subs	r3, #1
 800145e:	4018      	ands	r0, r3
 8001460:	3801      	subs	r0, #1
 8001462:	b003      	add	sp, #12
 8001464:	bcf0      	pop	{r4, r5, r6, r7}
 8001466:	46bb      	mov	fp, r7
 8001468:	46b2      	mov	sl, r6
 800146a:	46a9      	mov	r9, r5
 800146c:	46a0      	mov	r8, r4
 800146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001470:	2c00      	cmp	r4, #0
 8001472:	d0d9      	beq.n	8001428 <__gedf2+0x50>
 8001474:	e7e4      	b.n	8001440 <__gedf2+0x68>
 8001476:	4654      	mov	r4, sl
 8001478:	2c00      	cmp	r4, #0
 800147a:	d0ed      	beq.n	8001458 <__gedf2+0x80>
 800147c:	4584      	cmp	ip, r0
 800147e:	d1eb      	bne.n	8001458 <__gedf2+0x80>
 8001480:	4556      	cmp	r6, sl
 8001482:	dce9      	bgt.n	8001458 <__gedf2+0x80>
 8001484:	dbde      	blt.n	8001444 <__gedf2+0x6c>
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	428b      	cmp	r3, r1
 800148a:	d8e5      	bhi.n	8001458 <__gedf2+0x80>
 800148c:	d1da      	bne.n	8001444 <__gedf2+0x6c>
 800148e:	45c8      	cmp	r8, r9
 8001490:	d8e2      	bhi.n	8001458 <__gedf2+0x80>
 8001492:	2000      	movs	r0, #0
 8001494:	45c8      	cmp	r8, r9
 8001496:	d2e4      	bcs.n	8001462 <__gedf2+0x8a>
 8001498:	e7d4      	b.n	8001444 <__gedf2+0x6c>
 800149a:	2000      	movs	r0, #0
 800149c:	2c00      	cmp	r4, #0
 800149e:	d0e0      	beq.n	8001462 <__gedf2+0x8a>
 80014a0:	e7da      	b.n	8001458 <__gedf2+0x80>
 80014a2:	4311      	orrs	r1, r2
 80014a4:	d103      	bne.n	80014ae <__gedf2+0xd6>
 80014a6:	4584      	cmp	ip, r0
 80014a8:	d1d6      	bne.n	8001458 <__gedf2+0x80>
 80014aa:	2000      	movs	r0, #0
 80014ac:	e7d9      	b.n	8001462 <__gedf2+0x8a>
 80014ae:	2002      	movs	r0, #2
 80014b0:	4240      	negs	r0, r0
 80014b2:	e7d6      	b.n	8001462 <__gedf2+0x8a>
 80014b4:	4584      	cmp	ip, r0
 80014b6:	d0e6      	beq.n	8001486 <__gedf2+0xae>
 80014b8:	e7ce      	b.n	8001458 <__gedf2+0x80>
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	000007ff 	.word	0x000007ff

080014c0 <__ledf2>:
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	4657      	mov	r7, sl
 80014c4:	464e      	mov	r6, r9
 80014c6:	4645      	mov	r5, r8
 80014c8:	46de      	mov	lr, fp
 80014ca:	b5e0      	push	{r5, r6, r7, lr}
 80014cc:	000d      	movs	r5, r1
 80014ce:	030f      	lsls	r7, r1, #12
 80014d0:	0004      	movs	r4, r0
 80014d2:	4680      	mov	r8, r0
 80014d4:	0fe8      	lsrs	r0, r5, #31
 80014d6:	0b39      	lsrs	r1, r7, #12
 80014d8:	4684      	mov	ip, r0
 80014da:	b083      	sub	sp, #12
 80014dc:	0058      	lsls	r0, r3, #1
 80014de:	4f30      	ldr	r7, [pc, #192]	@ (80015a0 <__ledf2+0xe0>)
 80014e0:	0d40      	lsrs	r0, r0, #21
 80014e2:	9101      	str	r1, [sp, #4]
 80014e4:	031e      	lsls	r6, r3, #12
 80014e6:	0069      	lsls	r1, r5, #1
 80014e8:	4682      	mov	sl, r0
 80014ea:	4691      	mov	r9, r2
 80014ec:	0d49      	lsrs	r1, r1, #21
 80014ee:	0b36      	lsrs	r6, r6, #12
 80014f0:	0fd8      	lsrs	r0, r3, #31
 80014f2:	42b9      	cmp	r1, r7
 80014f4:	d020      	beq.n	8001538 <__ledf2+0x78>
 80014f6:	45ba      	cmp	sl, r7
 80014f8:	d00f      	beq.n	800151a <__ledf2+0x5a>
 80014fa:	2900      	cmp	r1, #0
 80014fc:	d12b      	bne.n	8001556 <__ledf2+0x96>
 80014fe:	9901      	ldr	r1, [sp, #4]
 8001500:	430c      	orrs	r4, r1
 8001502:	4651      	mov	r1, sl
 8001504:	2900      	cmp	r1, #0
 8001506:	d137      	bne.n	8001578 <__ledf2+0xb8>
 8001508:	4332      	orrs	r2, r6
 800150a:	d038      	beq.n	800157e <__ledf2+0xbe>
 800150c:	2c00      	cmp	r4, #0
 800150e:	d144      	bne.n	800159a <__ledf2+0xda>
 8001510:	2800      	cmp	r0, #0
 8001512:	d119      	bne.n	8001548 <__ledf2+0x88>
 8001514:	2001      	movs	r0, #1
 8001516:	4240      	negs	r0, r0
 8001518:	e016      	b.n	8001548 <__ledf2+0x88>
 800151a:	4316      	orrs	r6, r2
 800151c:	d113      	bne.n	8001546 <__ledf2+0x86>
 800151e:	2900      	cmp	r1, #0
 8001520:	d102      	bne.n	8001528 <__ledf2+0x68>
 8001522:	9f01      	ldr	r7, [sp, #4]
 8001524:	4327      	orrs	r7, r4
 8001526:	d0f3      	beq.n	8001510 <__ledf2+0x50>
 8001528:	4584      	cmp	ip, r0
 800152a:	d020      	beq.n	800156e <__ledf2+0xae>
 800152c:	4663      	mov	r3, ip
 800152e:	2002      	movs	r0, #2
 8001530:	3b01      	subs	r3, #1
 8001532:	4018      	ands	r0, r3
 8001534:	3801      	subs	r0, #1
 8001536:	e007      	b.n	8001548 <__ledf2+0x88>
 8001538:	9f01      	ldr	r7, [sp, #4]
 800153a:	4327      	orrs	r7, r4
 800153c:	d103      	bne.n	8001546 <__ledf2+0x86>
 800153e:	458a      	cmp	sl, r1
 8001540:	d1f4      	bne.n	800152c <__ledf2+0x6c>
 8001542:	4316      	orrs	r6, r2
 8001544:	d01f      	beq.n	8001586 <__ledf2+0xc6>
 8001546:	2002      	movs	r0, #2
 8001548:	b003      	add	sp, #12
 800154a:	bcf0      	pop	{r4, r5, r6, r7}
 800154c:	46bb      	mov	fp, r7
 800154e:	46b2      	mov	sl, r6
 8001550:	46a9      	mov	r9, r5
 8001552:	46a0      	mov	r8, r4
 8001554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001556:	4654      	mov	r4, sl
 8001558:	2c00      	cmp	r4, #0
 800155a:	d0e7      	beq.n	800152c <__ledf2+0x6c>
 800155c:	4584      	cmp	ip, r0
 800155e:	d1e5      	bne.n	800152c <__ledf2+0x6c>
 8001560:	4551      	cmp	r1, sl
 8001562:	dce3      	bgt.n	800152c <__ledf2+0x6c>
 8001564:	db03      	blt.n	800156e <__ledf2+0xae>
 8001566:	9b01      	ldr	r3, [sp, #4]
 8001568:	42b3      	cmp	r3, r6
 800156a:	d8df      	bhi.n	800152c <__ledf2+0x6c>
 800156c:	d00f      	beq.n	800158e <__ledf2+0xce>
 800156e:	4663      	mov	r3, ip
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0cf      	beq.n	8001514 <__ledf2+0x54>
 8001574:	4660      	mov	r0, ip
 8001576:	e7e7      	b.n	8001548 <__ledf2+0x88>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d0c9      	beq.n	8001510 <__ledf2+0x50>
 800157c:	e7d4      	b.n	8001528 <__ledf2+0x68>
 800157e:	2000      	movs	r0, #0
 8001580:	2c00      	cmp	r4, #0
 8001582:	d0e1      	beq.n	8001548 <__ledf2+0x88>
 8001584:	e7d2      	b.n	800152c <__ledf2+0x6c>
 8001586:	4584      	cmp	ip, r0
 8001588:	d1d0      	bne.n	800152c <__ledf2+0x6c>
 800158a:	2000      	movs	r0, #0
 800158c:	e7dc      	b.n	8001548 <__ledf2+0x88>
 800158e:	45c8      	cmp	r8, r9
 8001590:	d8cc      	bhi.n	800152c <__ledf2+0x6c>
 8001592:	2000      	movs	r0, #0
 8001594:	45c8      	cmp	r8, r9
 8001596:	d2d7      	bcs.n	8001548 <__ledf2+0x88>
 8001598:	e7e9      	b.n	800156e <__ledf2+0xae>
 800159a:	4584      	cmp	ip, r0
 800159c:	d0e3      	beq.n	8001566 <__ledf2+0xa6>
 800159e:	e7c5      	b.n	800152c <__ledf2+0x6c>
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__aeabi_dmul>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4657      	mov	r7, sl
 80015a8:	46de      	mov	lr, fp
 80015aa:	464e      	mov	r6, r9
 80015ac:	4645      	mov	r5, r8
 80015ae:	b5e0      	push	{r5, r6, r7, lr}
 80015b0:	001f      	movs	r7, r3
 80015b2:	030b      	lsls	r3, r1, #12
 80015b4:	0b1b      	lsrs	r3, r3, #12
 80015b6:	0016      	movs	r6, r2
 80015b8:	469a      	mov	sl, r3
 80015ba:	0fca      	lsrs	r2, r1, #31
 80015bc:	004b      	lsls	r3, r1, #1
 80015be:	0004      	movs	r4, r0
 80015c0:	4693      	mov	fp, r2
 80015c2:	b087      	sub	sp, #28
 80015c4:	0d5b      	lsrs	r3, r3, #21
 80015c6:	d100      	bne.n	80015ca <__aeabi_dmul+0x26>
 80015c8:	e0d5      	b.n	8001776 <__aeabi_dmul+0x1d2>
 80015ca:	4abb      	ldr	r2, [pc, #748]	@ (80018b8 <__aeabi_dmul+0x314>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2e>
 80015d0:	e0f8      	b.n	80017c4 <__aeabi_dmul+0x220>
 80015d2:	4651      	mov	r1, sl
 80015d4:	0f42      	lsrs	r2, r0, #29
 80015d6:	00c9      	lsls	r1, r1, #3
 80015d8:	430a      	orrs	r2, r1
 80015da:	2180      	movs	r1, #128	@ 0x80
 80015dc:	0409      	lsls	r1, r1, #16
 80015de:	4311      	orrs	r1, r2
 80015e0:	00c2      	lsls	r2, r0, #3
 80015e2:	4691      	mov	r9, r2
 80015e4:	4ab5      	ldr	r2, [pc, #724]	@ (80018bc <__aeabi_dmul+0x318>)
 80015e6:	468a      	mov	sl, r1
 80015e8:	189d      	adds	r5, r3, r2
 80015ea:	2300      	movs	r3, #0
 80015ec:	4698      	mov	r8, r3
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	033c      	lsls	r4, r7, #12
 80015f2:	007b      	lsls	r3, r7, #1
 80015f4:	0ffa      	lsrs	r2, r7, #31
 80015f6:	0030      	movs	r0, r6
 80015f8:	0b24      	lsrs	r4, r4, #12
 80015fa:	0d5b      	lsrs	r3, r3, #21
 80015fc:	9200      	str	r2, [sp, #0]
 80015fe:	d100      	bne.n	8001602 <__aeabi_dmul+0x5e>
 8001600:	e096      	b.n	8001730 <__aeabi_dmul+0x18c>
 8001602:	4aad      	ldr	r2, [pc, #692]	@ (80018b8 <__aeabi_dmul+0x314>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d031      	beq.n	800166c <__aeabi_dmul+0xc8>
 8001608:	0f72      	lsrs	r2, r6, #29
 800160a:	00e4      	lsls	r4, r4, #3
 800160c:	4322      	orrs	r2, r4
 800160e:	2480      	movs	r4, #128	@ 0x80
 8001610:	0424      	lsls	r4, r4, #16
 8001612:	4314      	orrs	r4, r2
 8001614:	4aa9      	ldr	r2, [pc, #676]	@ (80018bc <__aeabi_dmul+0x318>)
 8001616:	00f0      	lsls	r0, r6, #3
 8001618:	4694      	mov	ip, r2
 800161a:	4463      	add	r3, ip
 800161c:	195b      	adds	r3, r3, r5
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	9201      	str	r2, [sp, #4]
 8001622:	4642      	mov	r2, r8
 8001624:	2600      	movs	r6, #0
 8001626:	2a0a      	cmp	r2, #10
 8001628:	dc42      	bgt.n	80016b0 <__aeabi_dmul+0x10c>
 800162a:	465a      	mov	r2, fp
 800162c:	9900      	ldr	r1, [sp, #0]
 800162e:	404a      	eors	r2, r1
 8001630:	4693      	mov	fp, r2
 8001632:	4642      	mov	r2, r8
 8001634:	2a02      	cmp	r2, #2
 8001636:	dc32      	bgt.n	800169e <__aeabi_dmul+0xfa>
 8001638:	3a01      	subs	r2, #1
 800163a:	2a01      	cmp	r2, #1
 800163c:	d900      	bls.n	8001640 <__aeabi_dmul+0x9c>
 800163e:	e149      	b.n	80018d4 <__aeabi_dmul+0x330>
 8001640:	2e02      	cmp	r6, #2
 8001642:	d100      	bne.n	8001646 <__aeabi_dmul+0xa2>
 8001644:	e0ca      	b.n	80017dc <__aeabi_dmul+0x238>
 8001646:	2e01      	cmp	r6, #1
 8001648:	d13d      	bne.n	80016c6 <__aeabi_dmul+0x122>
 800164a:	2300      	movs	r3, #0
 800164c:	2400      	movs	r4, #0
 800164e:	2200      	movs	r2, #0
 8001650:	0010      	movs	r0, r2
 8001652:	465a      	mov	r2, fp
 8001654:	051b      	lsls	r3, r3, #20
 8001656:	4323      	orrs	r3, r4
 8001658:	07d2      	lsls	r2, r2, #31
 800165a:	4313      	orrs	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	b007      	add	sp, #28
 8001660:	bcf0      	pop	{r4, r5, r6, r7}
 8001662:	46bb      	mov	fp, r7
 8001664:	46b2      	mov	sl, r6
 8001666:	46a9      	mov	r9, r5
 8001668:	46a0      	mov	r8, r4
 800166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166c:	4b92      	ldr	r3, [pc, #584]	@ (80018b8 <__aeabi_dmul+0x314>)
 800166e:	4326      	orrs	r6, r4
 8001670:	18eb      	adds	r3, r5, r3
 8001672:	2e00      	cmp	r6, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_dmul+0xd4>
 8001676:	e0bb      	b.n	80017f0 <__aeabi_dmul+0x24c>
 8001678:	2203      	movs	r2, #3
 800167a:	4641      	mov	r1, r8
 800167c:	4311      	orrs	r1, r2
 800167e:	465a      	mov	r2, fp
 8001680:	4688      	mov	r8, r1
 8001682:	9900      	ldr	r1, [sp, #0]
 8001684:	404a      	eors	r2, r1
 8001686:	2180      	movs	r1, #128	@ 0x80
 8001688:	0109      	lsls	r1, r1, #4
 800168a:	468c      	mov	ip, r1
 800168c:	0029      	movs	r1, r5
 800168e:	4461      	add	r1, ip
 8001690:	9101      	str	r1, [sp, #4]
 8001692:	4641      	mov	r1, r8
 8001694:	290a      	cmp	r1, #10
 8001696:	dd00      	ble.n	800169a <__aeabi_dmul+0xf6>
 8001698:	e233      	b.n	8001b02 <__aeabi_dmul+0x55e>
 800169a:	4693      	mov	fp, r2
 800169c:	2603      	movs	r6, #3
 800169e:	4642      	mov	r2, r8
 80016a0:	2701      	movs	r7, #1
 80016a2:	4097      	lsls	r7, r2
 80016a4:	21a6      	movs	r1, #166	@ 0xa6
 80016a6:	003a      	movs	r2, r7
 80016a8:	00c9      	lsls	r1, r1, #3
 80016aa:	400a      	ands	r2, r1
 80016ac:	420f      	tst	r7, r1
 80016ae:	d031      	beq.n	8001714 <__aeabi_dmul+0x170>
 80016b0:	9e02      	ldr	r6, [sp, #8]
 80016b2:	2e02      	cmp	r6, #2
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x114>
 80016b6:	e235      	b.n	8001b24 <__aeabi_dmul+0x580>
 80016b8:	2e03      	cmp	r6, #3
 80016ba:	d100      	bne.n	80016be <__aeabi_dmul+0x11a>
 80016bc:	e1d2      	b.n	8001a64 <__aeabi_dmul+0x4c0>
 80016be:	4654      	mov	r4, sl
 80016c0:	4648      	mov	r0, r9
 80016c2:	2e01      	cmp	r6, #1
 80016c4:	d0c1      	beq.n	800164a <__aeabi_dmul+0xa6>
 80016c6:	9a01      	ldr	r2, [sp, #4]
 80016c8:	4b7d      	ldr	r3, [pc, #500]	@ (80018c0 <__aeabi_dmul+0x31c>)
 80016ca:	4694      	mov	ip, r2
 80016cc:	4463      	add	r3, ip
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	dc00      	bgt.n	80016d4 <__aeabi_dmul+0x130>
 80016d2:	e0c0      	b.n	8001856 <__aeabi_dmul+0x2b2>
 80016d4:	0742      	lsls	r2, r0, #29
 80016d6:	d009      	beq.n	80016ec <__aeabi_dmul+0x148>
 80016d8:	220f      	movs	r2, #15
 80016da:	4002      	ands	r2, r0
 80016dc:	2a04      	cmp	r2, #4
 80016de:	d005      	beq.n	80016ec <__aeabi_dmul+0x148>
 80016e0:	1d02      	adds	r2, r0, #4
 80016e2:	4282      	cmp	r2, r0
 80016e4:	4180      	sbcs	r0, r0
 80016e6:	4240      	negs	r0, r0
 80016e8:	1824      	adds	r4, r4, r0
 80016ea:	0010      	movs	r0, r2
 80016ec:	01e2      	lsls	r2, r4, #7
 80016ee:	d506      	bpl.n	80016fe <__aeabi_dmul+0x15a>
 80016f0:	4b74      	ldr	r3, [pc, #464]	@ (80018c4 <__aeabi_dmul+0x320>)
 80016f2:	9a01      	ldr	r2, [sp, #4]
 80016f4:	401c      	ands	r4, r3
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	4694      	mov	ip, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4463      	add	r3, ip
 80016fe:	4a72      	ldr	r2, [pc, #456]	@ (80018c8 <__aeabi_dmul+0x324>)
 8001700:	4293      	cmp	r3, r2
 8001702:	dc6b      	bgt.n	80017dc <__aeabi_dmul+0x238>
 8001704:	0762      	lsls	r2, r4, #29
 8001706:	08c0      	lsrs	r0, r0, #3
 8001708:	0264      	lsls	r4, r4, #9
 800170a:	055b      	lsls	r3, r3, #21
 800170c:	4302      	orrs	r2, r0
 800170e:	0b24      	lsrs	r4, r4, #12
 8001710:	0d5b      	lsrs	r3, r3, #21
 8001712:	e79d      	b.n	8001650 <__aeabi_dmul+0xac>
 8001714:	2190      	movs	r1, #144	@ 0x90
 8001716:	0089      	lsls	r1, r1, #2
 8001718:	420f      	tst	r7, r1
 800171a:	d163      	bne.n	80017e4 <__aeabi_dmul+0x240>
 800171c:	2288      	movs	r2, #136	@ 0x88
 800171e:	423a      	tst	r2, r7
 8001720:	d100      	bne.n	8001724 <__aeabi_dmul+0x180>
 8001722:	e0d7      	b.n	80018d4 <__aeabi_dmul+0x330>
 8001724:	9b00      	ldr	r3, [sp, #0]
 8001726:	46a2      	mov	sl, r4
 8001728:	469b      	mov	fp, r3
 800172a:	4681      	mov	r9, r0
 800172c:	9602      	str	r6, [sp, #8]
 800172e:	e7bf      	b.n	80016b0 <__aeabi_dmul+0x10c>
 8001730:	0023      	movs	r3, r4
 8001732:	4333      	orrs	r3, r6
 8001734:	d100      	bne.n	8001738 <__aeabi_dmul+0x194>
 8001736:	e07f      	b.n	8001838 <__aeabi_dmul+0x294>
 8001738:	2c00      	cmp	r4, #0
 800173a:	d100      	bne.n	800173e <__aeabi_dmul+0x19a>
 800173c:	e1ad      	b.n	8001a9a <__aeabi_dmul+0x4f6>
 800173e:	0020      	movs	r0, r4
 8001740:	f000 fe20 	bl	8002384 <__clzsi2>
 8001744:	0002      	movs	r2, r0
 8001746:	0003      	movs	r3, r0
 8001748:	3a0b      	subs	r2, #11
 800174a:	201d      	movs	r0, #29
 800174c:	0019      	movs	r1, r3
 800174e:	1a82      	subs	r2, r0, r2
 8001750:	0030      	movs	r0, r6
 8001752:	3908      	subs	r1, #8
 8001754:	40d0      	lsrs	r0, r2
 8001756:	408c      	lsls	r4, r1
 8001758:	4304      	orrs	r4, r0
 800175a:	0030      	movs	r0, r6
 800175c:	4088      	lsls	r0, r1
 800175e:	4a5b      	ldr	r2, [pc, #364]	@ (80018cc <__aeabi_dmul+0x328>)
 8001760:	1aeb      	subs	r3, r5, r3
 8001762:	4694      	mov	ip, r2
 8001764:	4463      	add	r3, ip
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	4642      	mov	r2, r8
 800176c:	2600      	movs	r6, #0
 800176e:	2a0a      	cmp	r2, #10
 8001770:	dc00      	bgt.n	8001774 <__aeabi_dmul+0x1d0>
 8001772:	e75a      	b.n	800162a <__aeabi_dmul+0x86>
 8001774:	e79c      	b.n	80016b0 <__aeabi_dmul+0x10c>
 8001776:	4653      	mov	r3, sl
 8001778:	4303      	orrs	r3, r0
 800177a:	4699      	mov	r9, r3
 800177c:	d054      	beq.n	8001828 <__aeabi_dmul+0x284>
 800177e:	4653      	mov	r3, sl
 8001780:	2b00      	cmp	r3, #0
 8001782:	d100      	bne.n	8001786 <__aeabi_dmul+0x1e2>
 8001784:	e177      	b.n	8001a76 <__aeabi_dmul+0x4d2>
 8001786:	4650      	mov	r0, sl
 8001788:	f000 fdfc 	bl	8002384 <__clzsi2>
 800178c:	230b      	movs	r3, #11
 800178e:	425b      	negs	r3, r3
 8001790:	469c      	mov	ip, r3
 8001792:	0002      	movs	r2, r0
 8001794:	4484      	add	ip, r0
 8001796:	0011      	movs	r1, r2
 8001798:	4650      	mov	r0, sl
 800179a:	3908      	subs	r1, #8
 800179c:	4088      	lsls	r0, r1
 800179e:	231d      	movs	r3, #29
 80017a0:	4680      	mov	r8, r0
 80017a2:	4660      	mov	r0, ip
 80017a4:	1a1b      	subs	r3, r3, r0
 80017a6:	0020      	movs	r0, r4
 80017a8:	40d8      	lsrs	r0, r3
 80017aa:	0003      	movs	r3, r0
 80017ac:	4640      	mov	r0, r8
 80017ae:	4303      	orrs	r3, r0
 80017b0:	469a      	mov	sl, r3
 80017b2:	0023      	movs	r3, r4
 80017b4:	408b      	lsls	r3, r1
 80017b6:	4699      	mov	r9, r3
 80017b8:	2300      	movs	r3, #0
 80017ba:	4d44      	ldr	r5, [pc, #272]	@ (80018cc <__aeabi_dmul+0x328>)
 80017bc:	4698      	mov	r8, r3
 80017be:	1aad      	subs	r5, r5, r2
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	e715      	b.n	80015f0 <__aeabi_dmul+0x4c>
 80017c4:	4652      	mov	r2, sl
 80017c6:	4302      	orrs	r2, r0
 80017c8:	4691      	mov	r9, r2
 80017ca:	d126      	bne.n	800181a <__aeabi_dmul+0x276>
 80017cc:	2200      	movs	r2, #0
 80017ce:	001d      	movs	r5, r3
 80017d0:	2302      	movs	r3, #2
 80017d2:	4692      	mov	sl, r2
 80017d4:	3208      	adds	r2, #8
 80017d6:	4690      	mov	r8, r2
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	e709      	b.n	80015f0 <__aeabi_dmul+0x4c>
 80017dc:	2400      	movs	r4, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <__aeabi_dmul+0x314>)
 80017e2:	e735      	b.n	8001650 <__aeabi_dmul+0xac>
 80017e4:	2300      	movs	r3, #0
 80017e6:	2480      	movs	r4, #128	@ 0x80
 80017e8:	469b      	mov	fp, r3
 80017ea:	0324      	lsls	r4, r4, #12
 80017ec:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <__aeabi_dmul+0x314>)
 80017ee:	e72f      	b.n	8001650 <__aeabi_dmul+0xac>
 80017f0:	2202      	movs	r2, #2
 80017f2:	4641      	mov	r1, r8
 80017f4:	4311      	orrs	r1, r2
 80017f6:	2280      	movs	r2, #128	@ 0x80
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	4694      	mov	ip, r2
 80017fc:	002a      	movs	r2, r5
 80017fe:	4462      	add	r2, ip
 8001800:	4688      	mov	r8, r1
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	290a      	cmp	r1, #10
 8001806:	dd00      	ble.n	800180a <__aeabi_dmul+0x266>
 8001808:	e752      	b.n	80016b0 <__aeabi_dmul+0x10c>
 800180a:	465a      	mov	r2, fp
 800180c:	2000      	movs	r0, #0
 800180e:	9900      	ldr	r1, [sp, #0]
 8001810:	0004      	movs	r4, r0
 8001812:	404a      	eors	r2, r1
 8001814:	4693      	mov	fp, r2
 8001816:	2602      	movs	r6, #2
 8001818:	e70b      	b.n	8001632 <__aeabi_dmul+0x8e>
 800181a:	220c      	movs	r2, #12
 800181c:	001d      	movs	r5, r3
 800181e:	2303      	movs	r3, #3
 8001820:	4681      	mov	r9, r0
 8001822:	4690      	mov	r8, r2
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	e6e3      	b.n	80015f0 <__aeabi_dmul+0x4c>
 8001828:	2300      	movs	r3, #0
 800182a:	469a      	mov	sl, r3
 800182c:	3304      	adds	r3, #4
 800182e:	4698      	mov	r8, r3
 8001830:	3b03      	subs	r3, #3
 8001832:	2500      	movs	r5, #0
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	e6db      	b.n	80015f0 <__aeabi_dmul+0x4c>
 8001838:	4642      	mov	r2, r8
 800183a:	3301      	adds	r3, #1
 800183c:	431a      	orrs	r2, r3
 800183e:	002b      	movs	r3, r5
 8001840:	4690      	mov	r8, r2
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	9201      	str	r2, [sp, #4]
 8001846:	4642      	mov	r2, r8
 8001848:	2400      	movs	r4, #0
 800184a:	2000      	movs	r0, #0
 800184c:	2601      	movs	r6, #1
 800184e:	2a0a      	cmp	r2, #10
 8001850:	dc00      	bgt.n	8001854 <__aeabi_dmul+0x2b0>
 8001852:	e6ea      	b.n	800162a <__aeabi_dmul+0x86>
 8001854:	e72c      	b.n	80016b0 <__aeabi_dmul+0x10c>
 8001856:	2201      	movs	r2, #1
 8001858:	1ad2      	subs	r2, r2, r3
 800185a:	2a38      	cmp	r2, #56	@ 0x38
 800185c:	dd00      	ble.n	8001860 <__aeabi_dmul+0x2bc>
 800185e:	e6f4      	b.n	800164a <__aeabi_dmul+0xa6>
 8001860:	2a1f      	cmp	r2, #31
 8001862:	dc00      	bgt.n	8001866 <__aeabi_dmul+0x2c2>
 8001864:	e12a      	b.n	8001abc <__aeabi_dmul+0x518>
 8001866:	211f      	movs	r1, #31
 8001868:	4249      	negs	r1, r1
 800186a:	1acb      	subs	r3, r1, r3
 800186c:	0021      	movs	r1, r4
 800186e:	40d9      	lsrs	r1, r3
 8001870:	000b      	movs	r3, r1
 8001872:	2a20      	cmp	r2, #32
 8001874:	d005      	beq.n	8001882 <__aeabi_dmul+0x2de>
 8001876:	4a16      	ldr	r2, [pc, #88]	@ (80018d0 <__aeabi_dmul+0x32c>)
 8001878:	9d01      	ldr	r5, [sp, #4]
 800187a:	4694      	mov	ip, r2
 800187c:	4465      	add	r5, ip
 800187e:	40ac      	lsls	r4, r5
 8001880:	4320      	orrs	r0, r4
 8001882:	1e42      	subs	r2, r0, #1
 8001884:	4190      	sbcs	r0, r2
 8001886:	4318      	orrs	r0, r3
 8001888:	2307      	movs	r3, #7
 800188a:	0019      	movs	r1, r3
 800188c:	2400      	movs	r4, #0
 800188e:	4001      	ands	r1, r0
 8001890:	4203      	tst	r3, r0
 8001892:	d00c      	beq.n	80018ae <__aeabi_dmul+0x30a>
 8001894:	230f      	movs	r3, #15
 8001896:	4003      	ands	r3, r0
 8001898:	2b04      	cmp	r3, #4
 800189a:	d100      	bne.n	800189e <__aeabi_dmul+0x2fa>
 800189c:	e140      	b.n	8001b20 <__aeabi_dmul+0x57c>
 800189e:	1d03      	adds	r3, r0, #4
 80018a0:	4283      	cmp	r3, r0
 80018a2:	41a4      	sbcs	r4, r4
 80018a4:	0018      	movs	r0, r3
 80018a6:	4264      	negs	r4, r4
 80018a8:	0761      	lsls	r1, r4, #29
 80018aa:	0264      	lsls	r4, r4, #9
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	08c2      	lsrs	r2, r0, #3
 80018b0:	2300      	movs	r3, #0
 80018b2:	430a      	orrs	r2, r1
 80018b4:	e6cc      	b.n	8001650 <__aeabi_dmul+0xac>
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	000007ff 	.word	0x000007ff
 80018bc:	fffffc01 	.word	0xfffffc01
 80018c0:	000003ff 	.word	0x000003ff
 80018c4:	feffffff 	.word	0xfeffffff
 80018c8:	000007fe 	.word	0x000007fe
 80018cc:	fffffc0d 	.word	0xfffffc0d
 80018d0:	0000043e 	.word	0x0000043e
 80018d4:	4649      	mov	r1, r9
 80018d6:	464a      	mov	r2, r9
 80018d8:	0409      	lsls	r1, r1, #16
 80018da:	0c09      	lsrs	r1, r1, #16
 80018dc:	000d      	movs	r5, r1
 80018de:	0c16      	lsrs	r6, r2, #16
 80018e0:	0c02      	lsrs	r2, r0, #16
 80018e2:	0400      	lsls	r0, r0, #16
 80018e4:	0c00      	lsrs	r0, r0, #16
 80018e6:	4345      	muls	r5, r0
 80018e8:	46ac      	mov	ip, r5
 80018ea:	0005      	movs	r5, r0
 80018ec:	4375      	muls	r5, r6
 80018ee:	46a8      	mov	r8, r5
 80018f0:	0015      	movs	r5, r2
 80018f2:	000f      	movs	r7, r1
 80018f4:	4375      	muls	r5, r6
 80018f6:	9200      	str	r2, [sp, #0]
 80018f8:	9502      	str	r5, [sp, #8]
 80018fa:	002a      	movs	r2, r5
 80018fc:	9d00      	ldr	r5, [sp, #0]
 80018fe:	436f      	muls	r7, r5
 8001900:	4665      	mov	r5, ip
 8001902:	0c2d      	lsrs	r5, r5, #16
 8001904:	46a9      	mov	r9, r5
 8001906:	4447      	add	r7, r8
 8001908:	444f      	add	r7, r9
 800190a:	45b8      	cmp	r8, r7
 800190c:	d905      	bls.n	800191a <__aeabi_dmul+0x376>
 800190e:	0015      	movs	r5, r2
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	0252      	lsls	r2, r2, #9
 8001914:	4690      	mov	r8, r2
 8001916:	4445      	add	r5, r8
 8001918:	9502      	str	r5, [sp, #8]
 800191a:	0c3d      	lsrs	r5, r7, #16
 800191c:	9503      	str	r5, [sp, #12]
 800191e:	4665      	mov	r5, ip
 8001920:	042d      	lsls	r5, r5, #16
 8001922:	043f      	lsls	r7, r7, #16
 8001924:	0c2d      	lsrs	r5, r5, #16
 8001926:	46ac      	mov	ip, r5
 8001928:	003d      	movs	r5, r7
 800192a:	4465      	add	r5, ip
 800192c:	9504      	str	r5, [sp, #16]
 800192e:	0c25      	lsrs	r5, r4, #16
 8001930:	0424      	lsls	r4, r4, #16
 8001932:	0c24      	lsrs	r4, r4, #16
 8001934:	46ac      	mov	ip, r5
 8001936:	0025      	movs	r5, r4
 8001938:	4375      	muls	r5, r6
 800193a:	46a8      	mov	r8, r5
 800193c:	4665      	mov	r5, ip
 800193e:	000f      	movs	r7, r1
 8001940:	4369      	muls	r1, r5
 8001942:	4441      	add	r1, r8
 8001944:	4689      	mov	r9, r1
 8001946:	4367      	muls	r7, r4
 8001948:	0c39      	lsrs	r1, r7, #16
 800194a:	4449      	add	r1, r9
 800194c:	436e      	muls	r6, r5
 800194e:	4588      	cmp	r8, r1
 8001950:	d903      	bls.n	800195a <__aeabi_dmul+0x3b6>
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	0252      	lsls	r2, r2, #9
 8001956:	4690      	mov	r8, r2
 8001958:	4446      	add	r6, r8
 800195a:	0c0d      	lsrs	r5, r1, #16
 800195c:	46a8      	mov	r8, r5
 800195e:	0035      	movs	r5, r6
 8001960:	4445      	add	r5, r8
 8001962:	9505      	str	r5, [sp, #20]
 8001964:	9d03      	ldr	r5, [sp, #12]
 8001966:	043f      	lsls	r7, r7, #16
 8001968:	46a8      	mov	r8, r5
 800196a:	0c3f      	lsrs	r7, r7, #16
 800196c:	0409      	lsls	r1, r1, #16
 800196e:	19c9      	adds	r1, r1, r7
 8001970:	4488      	add	r8, r1
 8001972:	4645      	mov	r5, r8
 8001974:	9503      	str	r5, [sp, #12]
 8001976:	4655      	mov	r5, sl
 8001978:	042e      	lsls	r6, r5, #16
 800197a:	0c36      	lsrs	r6, r6, #16
 800197c:	0c2f      	lsrs	r7, r5, #16
 800197e:	0035      	movs	r5, r6
 8001980:	4345      	muls	r5, r0
 8001982:	4378      	muls	r0, r7
 8001984:	4681      	mov	r9, r0
 8001986:	0038      	movs	r0, r7
 8001988:	46a8      	mov	r8, r5
 800198a:	0c2d      	lsrs	r5, r5, #16
 800198c:	46aa      	mov	sl, r5
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	4350      	muls	r0, r2
 8001992:	4372      	muls	r2, r6
 8001994:	444a      	add	r2, r9
 8001996:	4452      	add	r2, sl
 8001998:	4591      	cmp	r9, r2
 800199a:	d903      	bls.n	80019a4 <__aeabi_dmul+0x400>
 800199c:	2580      	movs	r5, #128	@ 0x80
 800199e:	026d      	lsls	r5, r5, #9
 80019a0:	46a9      	mov	r9, r5
 80019a2:	4448      	add	r0, r9
 80019a4:	0c15      	lsrs	r5, r2, #16
 80019a6:	46a9      	mov	r9, r5
 80019a8:	4645      	mov	r5, r8
 80019aa:	042d      	lsls	r5, r5, #16
 80019ac:	0c2d      	lsrs	r5, r5, #16
 80019ae:	46a8      	mov	r8, r5
 80019b0:	4665      	mov	r5, ip
 80019b2:	437d      	muls	r5, r7
 80019b4:	0412      	lsls	r2, r2, #16
 80019b6:	4448      	add	r0, r9
 80019b8:	4490      	add	r8, r2
 80019ba:	46a9      	mov	r9, r5
 80019bc:	0032      	movs	r2, r6
 80019be:	4665      	mov	r5, ip
 80019c0:	4362      	muls	r2, r4
 80019c2:	436e      	muls	r6, r5
 80019c4:	437c      	muls	r4, r7
 80019c6:	0c17      	lsrs	r7, r2, #16
 80019c8:	1936      	adds	r6, r6, r4
 80019ca:	19bf      	adds	r7, r7, r6
 80019cc:	42bc      	cmp	r4, r7
 80019ce:	d903      	bls.n	80019d8 <__aeabi_dmul+0x434>
 80019d0:	2480      	movs	r4, #128	@ 0x80
 80019d2:	0264      	lsls	r4, r4, #9
 80019d4:	46a4      	mov	ip, r4
 80019d6:	44e1      	add	r9, ip
 80019d8:	9c02      	ldr	r4, [sp, #8]
 80019da:	9e03      	ldr	r6, [sp, #12]
 80019dc:	46a4      	mov	ip, r4
 80019de:	9d05      	ldr	r5, [sp, #20]
 80019e0:	4466      	add	r6, ip
 80019e2:	428e      	cmp	r6, r1
 80019e4:	4189      	sbcs	r1, r1
 80019e6:	46ac      	mov	ip, r5
 80019e8:	0412      	lsls	r2, r2, #16
 80019ea:	043c      	lsls	r4, r7, #16
 80019ec:	0c12      	lsrs	r2, r2, #16
 80019ee:	18a2      	adds	r2, r4, r2
 80019f0:	4462      	add	r2, ip
 80019f2:	4249      	negs	r1, r1
 80019f4:	1854      	adds	r4, r2, r1
 80019f6:	4446      	add	r6, r8
 80019f8:	46a4      	mov	ip, r4
 80019fa:	4546      	cmp	r6, r8
 80019fc:	41a4      	sbcs	r4, r4
 80019fe:	4682      	mov	sl, r0
 8001a00:	4264      	negs	r4, r4
 8001a02:	46a0      	mov	r8, r4
 8001a04:	42aa      	cmp	r2, r5
 8001a06:	4192      	sbcs	r2, r2
 8001a08:	458c      	cmp	ip, r1
 8001a0a:	4189      	sbcs	r1, r1
 8001a0c:	44e2      	add	sl, ip
 8001a0e:	44d0      	add	r8, sl
 8001a10:	4249      	negs	r1, r1
 8001a12:	4252      	negs	r2, r2
 8001a14:	430a      	orrs	r2, r1
 8001a16:	45a0      	cmp	r8, r4
 8001a18:	41a4      	sbcs	r4, r4
 8001a1a:	4582      	cmp	sl, r0
 8001a1c:	4189      	sbcs	r1, r1
 8001a1e:	4264      	negs	r4, r4
 8001a20:	4249      	negs	r1, r1
 8001a22:	430c      	orrs	r4, r1
 8001a24:	4641      	mov	r1, r8
 8001a26:	0c3f      	lsrs	r7, r7, #16
 8001a28:	19d2      	adds	r2, r2, r7
 8001a2a:	1912      	adds	r2, r2, r4
 8001a2c:	0dcc      	lsrs	r4, r1, #23
 8001a2e:	9904      	ldr	r1, [sp, #16]
 8001a30:	0270      	lsls	r0, r6, #9
 8001a32:	4308      	orrs	r0, r1
 8001a34:	1e41      	subs	r1, r0, #1
 8001a36:	4188      	sbcs	r0, r1
 8001a38:	4641      	mov	r1, r8
 8001a3a:	444a      	add	r2, r9
 8001a3c:	0df6      	lsrs	r6, r6, #23
 8001a3e:	0252      	lsls	r2, r2, #9
 8001a40:	4330      	orrs	r0, r6
 8001a42:	0249      	lsls	r1, r1, #9
 8001a44:	4314      	orrs	r4, r2
 8001a46:	4308      	orrs	r0, r1
 8001a48:	01d2      	lsls	r2, r2, #7
 8001a4a:	d535      	bpl.n	8001ab8 <__aeabi_dmul+0x514>
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	0843      	lsrs	r3, r0, #1
 8001a50:	4002      	ands	r2, r0
 8001a52:	4313      	orrs	r3, r2
 8001a54:	07e0      	lsls	r0, r4, #31
 8001a56:	4318      	orrs	r0, r3
 8001a58:	0864      	lsrs	r4, r4, #1
 8001a5a:	e634      	b.n	80016c6 <__aeabi_dmul+0x122>
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	46a2      	mov	sl, r4
 8001a60:	469b      	mov	fp, r3
 8001a62:	4681      	mov	r9, r0
 8001a64:	2480      	movs	r4, #128	@ 0x80
 8001a66:	4653      	mov	r3, sl
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	0324      	lsls	r4, r4, #12
 8001a6e:	464a      	mov	r2, r9
 8001a70:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <__aeabi_dmul+0x588>)
 8001a72:	0b24      	lsrs	r4, r4, #12
 8001a74:	e5ec      	b.n	8001650 <__aeabi_dmul+0xac>
 8001a76:	f000 fc85 	bl	8002384 <__clzsi2>
 8001a7a:	2315      	movs	r3, #21
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	4484      	add	ip, r0
 8001a80:	0002      	movs	r2, r0
 8001a82:	4663      	mov	r3, ip
 8001a84:	3220      	adds	r2, #32
 8001a86:	2b1c      	cmp	r3, #28
 8001a88:	dc00      	bgt.n	8001a8c <__aeabi_dmul+0x4e8>
 8001a8a:	e684      	b.n	8001796 <__aeabi_dmul+0x1f2>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4699      	mov	r9, r3
 8001a90:	0023      	movs	r3, r4
 8001a92:	3808      	subs	r0, #8
 8001a94:	4083      	lsls	r3, r0
 8001a96:	469a      	mov	sl, r3
 8001a98:	e68e      	b.n	80017b8 <__aeabi_dmul+0x214>
 8001a9a:	f000 fc73 	bl	8002384 <__clzsi2>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	3215      	adds	r2, #21
 8001aa4:	3320      	adds	r3, #32
 8001aa6:	2a1c      	cmp	r2, #28
 8001aa8:	dc00      	bgt.n	8001aac <__aeabi_dmul+0x508>
 8001aaa:	e64e      	b.n	800174a <__aeabi_dmul+0x1a6>
 8001aac:	0002      	movs	r2, r0
 8001aae:	0034      	movs	r4, r6
 8001ab0:	3a08      	subs	r2, #8
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	4094      	lsls	r4, r2
 8001ab6:	e652      	b.n	800175e <__aeabi_dmul+0x1ba>
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	e604      	b.n	80016c6 <__aeabi_dmul+0x122>
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <__aeabi_dmul+0x58c>)
 8001abe:	0021      	movs	r1, r4
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	9d01      	ldr	r5, [sp, #4]
 8001ac6:	40d3      	lsrs	r3, r2
 8001ac8:	4465      	add	r5, ip
 8001aca:	40a9      	lsls	r1, r5
 8001acc:	4319      	orrs	r1, r3
 8001ace:	0003      	movs	r3, r0
 8001ad0:	40ab      	lsls	r3, r5
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	4183      	sbcs	r3, r0
 8001ad6:	4319      	orrs	r1, r3
 8001ad8:	0008      	movs	r0, r1
 8001ada:	40d4      	lsrs	r4, r2
 8001adc:	074b      	lsls	r3, r1, #29
 8001ade:	d009      	beq.n	8001af4 <__aeabi_dmul+0x550>
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d005      	beq.n	8001af4 <__aeabi_dmul+0x550>
 8001ae8:	1d0b      	adds	r3, r1, #4
 8001aea:	428b      	cmp	r3, r1
 8001aec:	4180      	sbcs	r0, r0
 8001aee:	4240      	negs	r0, r0
 8001af0:	1824      	adds	r4, r4, r0
 8001af2:	0018      	movs	r0, r3
 8001af4:	0223      	lsls	r3, r4, #8
 8001af6:	d400      	bmi.n	8001afa <__aeabi_dmul+0x556>
 8001af8:	e6d6      	b.n	80018a8 <__aeabi_dmul+0x304>
 8001afa:	2301      	movs	r3, #1
 8001afc:	2400      	movs	r4, #0
 8001afe:	2200      	movs	r2, #0
 8001b00:	e5a6      	b.n	8001650 <__aeabi_dmul+0xac>
 8001b02:	290f      	cmp	r1, #15
 8001b04:	d1aa      	bne.n	8001a5c <__aeabi_dmul+0x4b8>
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	4652      	mov	r2, sl
 8001b0a:	031b      	lsls	r3, r3, #12
 8001b0c:	421a      	tst	r2, r3
 8001b0e:	d0a9      	beq.n	8001a64 <__aeabi_dmul+0x4c0>
 8001b10:	421c      	tst	r4, r3
 8001b12:	d1a7      	bne.n	8001a64 <__aeabi_dmul+0x4c0>
 8001b14:	431c      	orrs	r4, r3
 8001b16:	9b00      	ldr	r3, [sp, #0]
 8001b18:	0002      	movs	r2, r0
 8001b1a:	469b      	mov	fp, r3
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <__aeabi_dmul+0x588>)
 8001b1e:	e597      	b.n	8001650 <__aeabi_dmul+0xac>
 8001b20:	2400      	movs	r4, #0
 8001b22:	e6c1      	b.n	80018a8 <__aeabi_dmul+0x304>
 8001b24:	2400      	movs	r4, #0
 8001b26:	4b01      	ldr	r3, [pc, #4]	@ (8001b2c <__aeabi_dmul+0x588>)
 8001b28:	0022      	movs	r2, r4
 8001b2a:	e591      	b.n	8001650 <__aeabi_dmul+0xac>
 8001b2c:	000007ff 	.word	0x000007ff
 8001b30:	0000041e 	.word	0x0000041e

08001b34 <__aeabi_dsub>:
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	464e      	mov	r6, r9
 8001b38:	4645      	mov	r5, r8
 8001b3a:	46de      	mov	lr, fp
 8001b3c:	4657      	mov	r7, sl
 8001b3e:	b5e0      	push	{r5, r6, r7, lr}
 8001b40:	b085      	sub	sp, #20
 8001b42:	9000      	str	r0, [sp, #0]
 8001b44:	9101      	str	r1, [sp, #4]
 8001b46:	030c      	lsls	r4, r1, #12
 8001b48:	004f      	lsls	r7, r1, #1
 8001b4a:	0fce      	lsrs	r6, r1, #31
 8001b4c:	0a61      	lsrs	r1, r4, #9
 8001b4e:	9c00      	ldr	r4, [sp, #0]
 8001b50:	46b0      	mov	r8, r6
 8001b52:	0f64      	lsrs	r4, r4, #29
 8001b54:	430c      	orrs	r4, r1
 8001b56:	9900      	ldr	r1, [sp, #0]
 8001b58:	0d7f      	lsrs	r7, r7, #21
 8001b5a:	00c8      	lsls	r0, r1, #3
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	001a      	movs	r2, r3
 8001b60:	031b      	lsls	r3, r3, #12
 8001b62:	469c      	mov	ip, r3
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	9201      	str	r2, [sp, #4]
 8001b68:	0051      	lsls	r1, r2, #1
 8001b6a:	0d4b      	lsrs	r3, r1, #21
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	9b01      	ldr	r3, [sp, #4]
 8001b70:	9d00      	ldr	r5, [sp, #0]
 8001b72:	0fd9      	lsrs	r1, r3, #31
 8001b74:	4663      	mov	r3, ip
 8001b76:	0f6a      	lsrs	r2, r5, #29
 8001b78:	0a5b      	lsrs	r3, r3, #9
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	00ea      	lsls	r2, r5, #3
 8001b7e:	4694      	mov	ip, r2
 8001b80:	4693      	mov	fp, r2
 8001b82:	4ac1      	ldr	r2, [pc, #772]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001b84:	9003      	str	r0, [sp, #12]
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	4591      	cmp	r9, r2
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_dsub+0x5a>
 8001b8c:	e0cd      	b.n	8001d2a <__aeabi_dsub+0x1f6>
 8001b8e:	2501      	movs	r5, #1
 8001b90:	4069      	eors	r1, r5
 8001b92:	464d      	mov	r5, r9
 8001b94:	1b7d      	subs	r5, r7, r5
 8001b96:	46aa      	mov	sl, r5
 8001b98:	428e      	cmp	r6, r1
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_dsub+0x6a>
 8001b9c:	e080      	b.n	8001ca0 <__aeabi_dsub+0x16c>
 8001b9e:	2d00      	cmp	r5, #0
 8001ba0:	dc00      	bgt.n	8001ba4 <__aeabi_dsub+0x70>
 8001ba2:	e335      	b.n	8002210 <__aeabi_dsub+0x6dc>
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	2900      	cmp	r1, #0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x78>
 8001baa:	e0df      	b.n	8001d6c <__aeabi_dsub+0x238>
 8001bac:	4297      	cmp	r7, r2
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x7e>
 8001bb0:	e194      	b.n	8001edc <__aeabi_dsub+0x3a8>
 8001bb2:	4652      	mov	r2, sl
 8001bb4:	2501      	movs	r5, #1
 8001bb6:	2a38      	cmp	r2, #56	@ 0x38
 8001bb8:	dc19      	bgt.n	8001bee <__aeabi_dsub+0xba>
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	9b02      	ldr	r3, [sp, #8]
 8001bbe:	0412      	lsls	r2, r2, #16
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	2a1f      	cmp	r2, #31
 8001bc8:	dd00      	ble.n	8001bcc <__aeabi_dsub+0x98>
 8001bca:	e1e3      	b.n	8001f94 <__aeabi_dsub+0x460>
 8001bcc:	4653      	mov	r3, sl
 8001bce:	2220      	movs	r2, #32
 8001bd0:	4661      	mov	r1, ip
 8001bd2:	9d02      	ldr	r5, [sp, #8]
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	4095      	lsls	r5, r2
 8001bd8:	40d9      	lsrs	r1, r3
 8001bda:	430d      	orrs	r5, r1
 8001bdc:	4661      	mov	r1, ip
 8001bde:	4091      	lsls	r1, r2
 8001be0:	000a      	movs	r2, r1
 8001be2:	1e51      	subs	r1, r2, #1
 8001be4:	418a      	sbcs	r2, r1
 8001be6:	4315      	orrs	r5, r2
 8001be8:	9a02      	ldr	r2, [sp, #8]
 8001bea:	40da      	lsrs	r2, r3
 8001bec:	1aa4      	subs	r4, r4, r2
 8001bee:	1b45      	subs	r5, r0, r5
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	4180      	sbcs	r0, r0
 8001bf4:	4240      	negs	r0, r0
 8001bf6:	1a24      	subs	r4, r4, r0
 8001bf8:	0223      	lsls	r3, r4, #8
 8001bfa:	d400      	bmi.n	8001bfe <__aeabi_dsub+0xca>
 8001bfc:	e13d      	b.n	8001e7a <__aeabi_dsub+0x346>
 8001bfe:	0264      	lsls	r4, r4, #9
 8001c00:	0a64      	lsrs	r4, r4, #9
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0xd4>
 8001c06:	e147      	b.n	8001e98 <__aeabi_dsub+0x364>
 8001c08:	0020      	movs	r0, r4
 8001c0a:	f000 fbbb 	bl	8002384 <__clzsi2>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	3b08      	subs	r3, #8
 8001c12:	2120      	movs	r1, #32
 8001c14:	0028      	movs	r0, r5
 8001c16:	1aca      	subs	r2, r1, r3
 8001c18:	40d0      	lsrs	r0, r2
 8001c1a:	409c      	lsls	r4, r3
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	409d      	lsls	r5, r3
 8001c20:	4322      	orrs	r2, r4
 8001c22:	429f      	cmp	r7, r3
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_dsub+0xf4>
 8001c26:	e177      	b.n	8001f18 <__aeabi_dsub+0x3e4>
 8001c28:	1bd8      	subs	r0, r3, r7
 8001c2a:	3001      	adds	r0, #1
 8001c2c:	1a09      	subs	r1, r1, r0
 8001c2e:	002c      	movs	r4, r5
 8001c30:	408d      	lsls	r5, r1
 8001c32:	40c4      	lsrs	r4, r0
 8001c34:	1e6b      	subs	r3, r5, #1
 8001c36:	419d      	sbcs	r5, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	40c2      	lsrs	r2, r0
 8001c3c:	408b      	lsls	r3, r1
 8001c3e:	4325      	orrs	r5, r4
 8001c40:	2700      	movs	r7, #0
 8001c42:	0014      	movs	r4, r2
 8001c44:	431d      	orrs	r5, r3
 8001c46:	076b      	lsls	r3, r5, #29
 8001c48:	d009      	beq.n	8001c5e <__aeabi_dsub+0x12a>
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	402b      	ands	r3, r5
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d005      	beq.n	8001c5e <__aeabi_dsub+0x12a>
 8001c52:	1d2b      	adds	r3, r5, #4
 8001c54:	42ab      	cmp	r3, r5
 8001c56:	41ad      	sbcs	r5, r5
 8001c58:	426d      	negs	r5, r5
 8001c5a:	1964      	adds	r4, r4, r5
 8001c5c:	001d      	movs	r5, r3
 8001c5e:	0223      	lsls	r3, r4, #8
 8001c60:	d400      	bmi.n	8001c64 <__aeabi_dsub+0x130>
 8001c62:	e140      	b.n	8001ee6 <__aeabi_dsub+0x3b2>
 8001c64:	4a88      	ldr	r2, [pc, #544]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001c66:	3701      	adds	r7, #1
 8001c68:	4297      	cmp	r7, r2
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dsub+0x13a>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x33e>
 8001c6e:	2601      	movs	r6, #1
 8001c70:	4643      	mov	r3, r8
 8001c72:	4986      	ldr	r1, [pc, #536]	@ (8001e8c <__aeabi_dsub+0x358>)
 8001c74:	08ed      	lsrs	r5, r5, #3
 8001c76:	4021      	ands	r1, r4
 8001c78:	074a      	lsls	r2, r1, #29
 8001c7a:	432a      	orrs	r2, r5
 8001c7c:	057c      	lsls	r4, r7, #21
 8001c7e:	024d      	lsls	r5, r1, #9
 8001c80:	0b2d      	lsrs	r5, r5, #12
 8001c82:	0d64      	lsrs	r4, r4, #21
 8001c84:	401e      	ands	r6, r3
 8001c86:	0524      	lsls	r4, r4, #20
 8001c88:	432c      	orrs	r4, r5
 8001c8a:	07f6      	lsls	r6, r6, #31
 8001c8c:	4334      	orrs	r4, r6
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0021      	movs	r1, r4
 8001c92:	b005      	add	sp, #20
 8001c94:	bcf0      	pop	{r4, r5, r6, r7}
 8001c96:	46bb      	mov	fp, r7
 8001c98:	46b2      	mov	sl, r6
 8001c9a:	46a9      	mov	r9, r5
 8001c9c:	46a0      	mov	r8, r4
 8001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca0:	2d00      	cmp	r5, #0
 8001ca2:	dc00      	bgt.n	8001ca6 <__aeabi_dsub+0x172>
 8001ca4:	e2d0      	b.n	8002248 <__aeabi_dsub+0x714>
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	2900      	cmp	r1, #0
 8001caa:	d000      	beq.n	8001cae <__aeabi_dsub+0x17a>
 8001cac:	e0d4      	b.n	8001e58 <__aeabi_dsub+0x324>
 8001cae:	4661      	mov	r1, ip
 8001cb0:	9b02      	ldr	r3, [sp, #8]
 8001cb2:	4319      	orrs	r1, r3
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x184>
 8001cb6:	e12b      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8001cb8:	1e69      	subs	r1, r5, #1
 8001cba:	2d01      	cmp	r5, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x18c>
 8001cbe:	e1d9      	b.n	8002074 <__aeabi_dsub+0x540>
 8001cc0:	4295      	cmp	r5, r2
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x192>
 8001cc4:	e10a      	b.n	8001edc <__aeabi_dsub+0x3a8>
 8001cc6:	2501      	movs	r5, #1
 8001cc8:	2938      	cmp	r1, #56	@ 0x38
 8001cca:	dc17      	bgt.n	8001cfc <__aeabi_dsub+0x1c8>
 8001ccc:	468a      	mov	sl, r1
 8001cce:	4653      	mov	r3, sl
 8001cd0:	2b1f      	cmp	r3, #31
 8001cd2:	dd00      	ble.n	8001cd6 <__aeabi_dsub+0x1a2>
 8001cd4:	e1e7      	b.n	80020a6 <__aeabi_dsub+0x572>
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	1ad2      	subs	r2, r2, r3
 8001cda:	9b02      	ldr	r3, [sp, #8]
 8001cdc:	4661      	mov	r1, ip
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	001d      	movs	r5, r3
 8001ce2:	4653      	mov	r3, sl
 8001ce4:	40d9      	lsrs	r1, r3
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	4093      	lsls	r3, r2
 8001cea:	001a      	movs	r2, r3
 8001cec:	430d      	orrs	r5, r1
 8001cee:	1e51      	subs	r1, r2, #1
 8001cf0:	418a      	sbcs	r2, r1
 8001cf2:	4653      	mov	r3, sl
 8001cf4:	4315      	orrs	r5, r2
 8001cf6:	9a02      	ldr	r2, [sp, #8]
 8001cf8:	40da      	lsrs	r2, r3
 8001cfa:	18a4      	adds	r4, r4, r2
 8001cfc:	182d      	adds	r5, r5, r0
 8001cfe:	4285      	cmp	r5, r0
 8001d00:	4180      	sbcs	r0, r0
 8001d02:	4240      	negs	r0, r0
 8001d04:	1824      	adds	r4, r4, r0
 8001d06:	0223      	lsls	r3, r4, #8
 8001d08:	d400      	bmi.n	8001d0c <__aeabi_dsub+0x1d8>
 8001d0a:	e0b6      	b.n	8001e7a <__aeabi_dsub+0x346>
 8001d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001d0e:	3701      	adds	r7, #1
 8001d10:	429f      	cmp	r7, r3
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x1e2>
 8001d14:	e0ad      	b.n	8001e72 <__aeabi_dsub+0x33e>
 8001d16:	2101      	movs	r1, #1
 8001d18:	4b5c      	ldr	r3, [pc, #368]	@ (8001e8c <__aeabi_dsub+0x358>)
 8001d1a:	086a      	lsrs	r2, r5, #1
 8001d1c:	401c      	ands	r4, r3
 8001d1e:	4029      	ands	r1, r5
 8001d20:	430a      	orrs	r2, r1
 8001d22:	07e5      	lsls	r5, r4, #31
 8001d24:	4315      	orrs	r5, r2
 8001d26:	0864      	lsrs	r4, r4, #1
 8001d28:	e78d      	b.n	8001c46 <__aeabi_dsub+0x112>
 8001d2a:	4a59      	ldr	r2, [pc, #356]	@ (8001e90 <__aeabi_dsub+0x35c>)
 8001d2c:	9b02      	ldr	r3, [sp, #8]
 8001d2e:	4692      	mov	sl, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	44ba      	add	sl, r7
 8001d34:	431a      	orrs	r2, r3
 8001d36:	d02c      	beq.n	8001d92 <__aeabi_dsub+0x25e>
 8001d38:	428e      	cmp	r6, r1
 8001d3a:	d02e      	beq.n	8001d9a <__aeabi_dsub+0x266>
 8001d3c:	4652      	mov	r2, sl
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	d060      	beq.n	8001e04 <__aeabi_dsub+0x2d0>
 8001d42:	2f00      	cmp	r7, #0
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x214>
 8001d46:	e0db      	b.n	8001f00 <__aeabi_dsub+0x3cc>
 8001d48:	4663      	mov	r3, ip
 8001d4a:	000e      	movs	r6, r1
 8001d4c:	9c02      	ldr	r4, [sp, #8]
 8001d4e:	08d8      	lsrs	r0, r3, #3
 8001d50:	0762      	lsls	r2, r4, #29
 8001d52:	4302      	orrs	r2, r0
 8001d54:	08e4      	lsrs	r4, r4, #3
 8001d56:	0013      	movs	r3, r2
 8001d58:	4323      	orrs	r3, r4
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x22a>
 8001d5c:	e254      	b.n	8002208 <__aeabi_dsub+0x6d4>
 8001d5e:	2580      	movs	r5, #128	@ 0x80
 8001d60:	032d      	lsls	r5, r5, #12
 8001d62:	4325      	orrs	r5, r4
 8001d64:	032d      	lsls	r5, r5, #12
 8001d66:	4c48      	ldr	r4, [pc, #288]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001d68:	0b2d      	lsrs	r5, r5, #12
 8001d6a:	e78c      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001d6c:	4661      	mov	r1, ip
 8001d6e:	9b02      	ldr	r3, [sp, #8]
 8001d70:	4319      	orrs	r1, r3
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x242>
 8001d74:	e0cc      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8001d76:	0029      	movs	r1, r5
 8001d78:	3901      	subs	r1, #1
 8001d7a:	2d01      	cmp	r5, #1
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x24c>
 8001d7e:	e188      	b.n	8002092 <__aeabi_dsub+0x55e>
 8001d80:	4295      	cmp	r5, r2
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x252>
 8001d84:	e0aa      	b.n	8001edc <__aeabi_dsub+0x3a8>
 8001d86:	2501      	movs	r5, #1
 8001d88:	2938      	cmp	r1, #56	@ 0x38
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dsub+0x25a>
 8001d8c:	e72f      	b.n	8001bee <__aeabi_dsub+0xba>
 8001d8e:	468a      	mov	sl, r1
 8001d90:	e718      	b.n	8001bc4 <__aeabi_dsub+0x90>
 8001d92:	2201      	movs	r2, #1
 8001d94:	4051      	eors	r1, r2
 8001d96:	428e      	cmp	r6, r1
 8001d98:	d1d0      	bne.n	8001d3c <__aeabi_dsub+0x208>
 8001d9a:	4653      	mov	r3, sl
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x26e>
 8001da0:	e0be      	b.n	8001f20 <__aeabi_dsub+0x3ec>
 8001da2:	2f00      	cmp	r7, #0
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x274>
 8001da6:	e138      	b.n	800201a <__aeabi_dsub+0x4e6>
 8001da8:	46ca      	mov	sl, r9
 8001daa:	0022      	movs	r2, r4
 8001dac:	4302      	orrs	r2, r0
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x27e>
 8001db0:	e1e2      	b.n	8002178 <__aeabi_dsub+0x644>
 8001db2:	4653      	mov	r3, sl
 8001db4:	1e59      	subs	r1, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x288>
 8001dba:	e20d      	b.n	80021d8 <__aeabi_dsub+0x6a4>
 8001dbc:	4a32      	ldr	r2, [pc, #200]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001dbe:	4592      	cmp	sl, r2
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x290>
 8001dc2:	e1d2      	b.n	800216a <__aeabi_dsub+0x636>
 8001dc4:	2701      	movs	r7, #1
 8001dc6:	2938      	cmp	r1, #56	@ 0x38
 8001dc8:	dc13      	bgt.n	8001df2 <__aeabi_dsub+0x2be>
 8001dca:	291f      	cmp	r1, #31
 8001dcc:	dd00      	ble.n	8001dd0 <__aeabi_dsub+0x29c>
 8001dce:	e1ee      	b.n	80021ae <__aeabi_dsub+0x67a>
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	9b02      	ldr	r3, [sp, #8]
 8001dd4:	1a52      	subs	r2, r2, r1
 8001dd6:	0025      	movs	r5, r4
 8001dd8:	0007      	movs	r7, r0
 8001dda:	469a      	mov	sl, r3
 8001ddc:	40cc      	lsrs	r4, r1
 8001dde:	4090      	lsls	r0, r2
 8001de0:	4095      	lsls	r5, r2
 8001de2:	40cf      	lsrs	r7, r1
 8001de4:	44a2      	add	sl, r4
 8001de6:	1e42      	subs	r2, r0, #1
 8001de8:	4190      	sbcs	r0, r2
 8001dea:	4653      	mov	r3, sl
 8001dec:	432f      	orrs	r7, r5
 8001dee:	4307      	orrs	r7, r0
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	003d      	movs	r5, r7
 8001df4:	4465      	add	r5, ip
 8001df6:	4565      	cmp	r5, ip
 8001df8:	4192      	sbcs	r2, r2
 8001dfa:	9b02      	ldr	r3, [sp, #8]
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	464f      	mov	r7, r9
 8001e00:	18d4      	adds	r4, r2, r3
 8001e02:	e780      	b.n	8001d06 <__aeabi_dsub+0x1d2>
 8001e04:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <__aeabi_dsub+0x360>)
 8001e06:	1c7d      	adds	r5, r7, #1
 8001e08:	4215      	tst	r5, r2
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_dsub+0x2da>
 8001e0c:	e0aa      	b.n	8001f64 <__aeabi_dsub+0x430>
 8001e0e:	4662      	mov	r2, ip
 8001e10:	0025      	movs	r5, r4
 8001e12:	9b02      	ldr	r3, [sp, #8]
 8001e14:	4305      	orrs	r5, r0
 8001e16:	431a      	orrs	r2, r3
 8001e18:	2f00      	cmp	r7, #0
 8001e1a:	d000      	beq.n	8001e1e <__aeabi_dsub+0x2ea>
 8001e1c:	e0f5      	b.n	800200a <__aeabi_dsub+0x4d6>
 8001e1e:	2d00      	cmp	r5, #0
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x2f0>
 8001e22:	e16b      	b.n	80020fc <__aeabi_dsub+0x5c8>
 8001e24:	2a00      	cmp	r2, #0
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x2f6>
 8001e28:	e152      	b.n	80020d0 <__aeabi_dsub+0x59c>
 8001e2a:	4663      	mov	r3, ip
 8001e2c:	1ac5      	subs	r5, r0, r3
 8001e2e:	9b02      	ldr	r3, [sp, #8]
 8001e30:	1ae2      	subs	r2, r4, r3
 8001e32:	42a8      	cmp	r0, r5
 8001e34:	419b      	sbcs	r3, r3
 8001e36:	425b      	negs	r3, r3
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	021a      	lsls	r2, r3, #8
 8001e3c:	d400      	bmi.n	8001e40 <__aeabi_dsub+0x30c>
 8001e3e:	e1d5      	b.n	80021ec <__aeabi_dsub+0x6b8>
 8001e40:	4663      	mov	r3, ip
 8001e42:	1a1d      	subs	r5, r3, r0
 8001e44:	45ac      	cmp	ip, r5
 8001e46:	4192      	sbcs	r2, r2
 8001e48:	2601      	movs	r6, #1
 8001e4a:	9b02      	ldr	r3, [sp, #8]
 8001e4c:	4252      	negs	r2, r2
 8001e4e:	1b1c      	subs	r4, r3, r4
 8001e50:	4688      	mov	r8, r1
 8001e52:	1aa4      	subs	r4, r4, r2
 8001e54:	400e      	ands	r6, r1
 8001e56:	e6f6      	b.n	8001c46 <__aeabi_dsub+0x112>
 8001e58:	4297      	cmp	r7, r2
 8001e5a:	d03f      	beq.n	8001edc <__aeabi_dsub+0x3a8>
 8001e5c:	4652      	mov	r2, sl
 8001e5e:	2501      	movs	r5, #1
 8001e60:	2a38      	cmp	r2, #56	@ 0x38
 8001e62:	dd00      	ble.n	8001e66 <__aeabi_dsub+0x332>
 8001e64:	e74a      	b.n	8001cfc <__aeabi_dsub+0x1c8>
 8001e66:	2280      	movs	r2, #128	@ 0x80
 8001e68:	9b02      	ldr	r3, [sp, #8]
 8001e6a:	0412      	lsls	r2, r2, #16
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	e72d      	b.n	8001cce <__aeabi_dsub+0x19a>
 8001e72:	003c      	movs	r4, r7
 8001e74:	2500      	movs	r5, #0
 8001e76:	2200      	movs	r2, #0
 8001e78:	e705      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	402b      	ands	r3, r5
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dsub+0x350>
 8001e82:	e6e2      	b.n	8001c4a <__aeabi_dsub+0x116>
 8001e84:	e06b      	b.n	8001f5e <__aeabi_dsub+0x42a>
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	000007ff 	.word	0x000007ff
 8001e8c:	ff7fffff 	.word	0xff7fffff
 8001e90:	fffff801 	.word	0xfffff801
 8001e94:	000007fe 	.word	0x000007fe
 8001e98:	0028      	movs	r0, r5
 8001e9a:	f000 fa73 	bl	8002384 <__clzsi2>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	3318      	adds	r3, #24
 8001ea2:	2b1f      	cmp	r3, #31
 8001ea4:	dc00      	bgt.n	8001ea8 <__aeabi_dsub+0x374>
 8001ea6:	e6b4      	b.n	8001c12 <__aeabi_dsub+0xde>
 8001ea8:	002a      	movs	r2, r5
 8001eaa:	3808      	subs	r0, #8
 8001eac:	4082      	lsls	r2, r0
 8001eae:	429f      	cmp	r7, r3
 8001eb0:	dd00      	ble.n	8001eb4 <__aeabi_dsub+0x380>
 8001eb2:	e0b9      	b.n	8002028 <__aeabi_dsub+0x4f4>
 8001eb4:	1bdb      	subs	r3, r3, r7
 8001eb6:	1c58      	adds	r0, r3, #1
 8001eb8:	281f      	cmp	r0, #31
 8001eba:	dc00      	bgt.n	8001ebe <__aeabi_dsub+0x38a>
 8001ebc:	e1a0      	b.n	8002200 <__aeabi_dsub+0x6cc>
 8001ebe:	0015      	movs	r5, r2
 8001ec0:	3b1f      	subs	r3, #31
 8001ec2:	40dd      	lsrs	r5, r3
 8001ec4:	2820      	cmp	r0, #32
 8001ec6:	d005      	beq.n	8001ed4 <__aeabi_dsub+0x3a0>
 8001ec8:	2340      	movs	r3, #64	@ 0x40
 8001eca:	1a1b      	subs	r3, r3, r0
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	1e53      	subs	r3, r2, #1
 8001ed0:	419a      	sbcs	r2, r3
 8001ed2:	4315      	orrs	r5, r2
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	2700      	movs	r7, #0
 8001ed8:	402b      	ands	r3, r5
 8001eda:	e7d0      	b.n	8001e7e <__aeabi_dsub+0x34a>
 8001edc:	08c0      	lsrs	r0, r0, #3
 8001ede:	0762      	lsls	r2, r4, #29
 8001ee0:	4302      	orrs	r2, r0
 8001ee2:	08e4      	lsrs	r4, r4, #3
 8001ee4:	e737      	b.n	8001d56 <__aeabi_dsub+0x222>
 8001ee6:	08ea      	lsrs	r2, r5, #3
 8001ee8:	0763      	lsls	r3, r4, #29
 8001eea:	431a      	orrs	r2, r3
 8001eec:	4bd3      	ldr	r3, [pc, #844]	@ (800223c <__aeabi_dsub+0x708>)
 8001eee:	08e4      	lsrs	r4, r4, #3
 8001ef0:	429f      	cmp	r7, r3
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x3c2>
 8001ef4:	e72f      	b.n	8001d56 <__aeabi_dsub+0x222>
 8001ef6:	0324      	lsls	r4, r4, #12
 8001ef8:	0b25      	lsrs	r5, r4, #12
 8001efa:	057c      	lsls	r4, r7, #21
 8001efc:	0d64      	lsrs	r4, r4, #21
 8001efe:	e6c2      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001f00:	46ca      	mov	sl, r9
 8001f02:	0022      	movs	r2, r4
 8001f04:	4302      	orrs	r2, r0
 8001f06:	d158      	bne.n	8001fba <__aeabi_dsub+0x486>
 8001f08:	4663      	mov	r3, ip
 8001f0a:	000e      	movs	r6, r1
 8001f0c:	9c02      	ldr	r4, [sp, #8]
 8001f0e:	9303      	str	r3, [sp, #12]
 8001f10:	9b03      	ldr	r3, [sp, #12]
 8001f12:	4657      	mov	r7, sl
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	e7e7      	b.n	8001ee8 <__aeabi_dsub+0x3b4>
 8001f18:	4cc9      	ldr	r4, [pc, #804]	@ (8002240 <__aeabi_dsub+0x70c>)
 8001f1a:	1aff      	subs	r7, r7, r3
 8001f1c:	4014      	ands	r4, r2
 8001f1e:	e692      	b.n	8001c46 <__aeabi_dsub+0x112>
 8001f20:	4dc8      	ldr	r5, [pc, #800]	@ (8002244 <__aeabi_dsub+0x710>)
 8001f22:	1c7a      	adds	r2, r7, #1
 8001f24:	422a      	tst	r2, r5
 8001f26:	d000      	beq.n	8001f2a <__aeabi_dsub+0x3f6>
 8001f28:	e084      	b.n	8002034 <__aeabi_dsub+0x500>
 8001f2a:	0022      	movs	r2, r4
 8001f2c:	4302      	orrs	r2, r0
 8001f2e:	2f00      	cmp	r7, #0
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x400>
 8001f32:	e0ef      	b.n	8002114 <__aeabi_dsub+0x5e0>
 8001f34:	2a00      	cmp	r2, #0
 8001f36:	d100      	bne.n	8001f3a <__aeabi_dsub+0x406>
 8001f38:	e0e5      	b.n	8002106 <__aeabi_dsub+0x5d2>
 8001f3a:	4662      	mov	r2, ip
 8001f3c:	9902      	ldr	r1, [sp, #8]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x410>
 8001f42:	e0c5      	b.n	80020d0 <__aeabi_dsub+0x59c>
 8001f44:	4663      	mov	r3, ip
 8001f46:	18c5      	adds	r5, r0, r3
 8001f48:	468c      	mov	ip, r1
 8001f4a:	4285      	cmp	r5, r0
 8001f4c:	4180      	sbcs	r0, r0
 8001f4e:	4464      	add	r4, ip
 8001f50:	4240      	negs	r0, r0
 8001f52:	1824      	adds	r4, r4, r0
 8001f54:	0223      	lsls	r3, r4, #8
 8001f56:	d502      	bpl.n	8001f5e <__aeabi_dsub+0x42a>
 8001f58:	4bb9      	ldr	r3, [pc, #740]	@ (8002240 <__aeabi_dsub+0x70c>)
 8001f5a:	3701      	adds	r7, #1
 8001f5c:	401c      	ands	r4, r3
 8001f5e:	46ba      	mov	sl, r7
 8001f60:	9503      	str	r5, [sp, #12]
 8001f62:	e7d5      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8001f64:	4662      	mov	r2, ip
 8001f66:	1a85      	subs	r5, r0, r2
 8001f68:	42a8      	cmp	r0, r5
 8001f6a:	4192      	sbcs	r2, r2
 8001f6c:	4252      	negs	r2, r2
 8001f6e:	4691      	mov	r9, r2
 8001f70:	9b02      	ldr	r3, [sp, #8]
 8001f72:	1ae3      	subs	r3, r4, r3
 8001f74:	001a      	movs	r2, r3
 8001f76:	464b      	mov	r3, r9
 8001f78:	1ad2      	subs	r2, r2, r3
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	4691      	mov	r9, r2
 8001f7e:	021a      	lsls	r2, r3, #8
 8001f80:	d46c      	bmi.n	800205c <__aeabi_dsub+0x528>
 8001f82:	464a      	mov	r2, r9
 8001f84:	464c      	mov	r4, r9
 8001f86:	432a      	orrs	r2, r5
 8001f88:	d000      	beq.n	8001f8c <__aeabi_dsub+0x458>
 8001f8a:	e63a      	b.n	8001c02 <__aeabi_dsub+0xce>
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	2400      	movs	r4, #0
 8001f90:	2500      	movs	r5, #0
 8001f92:	e678      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001f94:	9902      	ldr	r1, [sp, #8]
 8001f96:	4653      	mov	r3, sl
 8001f98:	000d      	movs	r5, r1
 8001f9a:	3a20      	subs	r2, #32
 8001f9c:	40d5      	lsrs	r5, r2
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d006      	beq.n	8001fb0 <__aeabi_dsub+0x47c>
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	1ad2      	subs	r2, r2, r3
 8001fa6:	000b      	movs	r3, r1
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	4662      	mov	r2, ip
 8001fac:	431a      	orrs	r2, r3
 8001fae:	4693      	mov	fp, r2
 8001fb0:	465b      	mov	r3, fp
 8001fb2:	1e5a      	subs	r2, r3, #1
 8001fb4:	4193      	sbcs	r3, r2
 8001fb6:	431d      	orrs	r5, r3
 8001fb8:	e619      	b.n	8001bee <__aeabi_dsub+0xba>
 8001fba:	4653      	mov	r3, sl
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x490>
 8001fc2:	e0c6      	b.n	8002152 <__aeabi_dsub+0x61e>
 8001fc4:	4e9d      	ldr	r6, [pc, #628]	@ (800223c <__aeabi_dsub+0x708>)
 8001fc6:	45b2      	cmp	sl, r6
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x498>
 8001fca:	e6bd      	b.n	8001d48 <__aeabi_dsub+0x214>
 8001fcc:	4688      	mov	r8, r1
 8001fce:	000e      	movs	r6, r1
 8001fd0:	2501      	movs	r5, #1
 8001fd2:	2a38      	cmp	r2, #56	@ 0x38
 8001fd4:	dc10      	bgt.n	8001ff8 <__aeabi_dsub+0x4c4>
 8001fd6:	2a1f      	cmp	r2, #31
 8001fd8:	dc7f      	bgt.n	80020da <__aeabi_dsub+0x5a6>
 8001fda:	2120      	movs	r1, #32
 8001fdc:	0025      	movs	r5, r4
 8001fde:	1a89      	subs	r1, r1, r2
 8001fe0:	0007      	movs	r7, r0
 8001fe2:	4088      	lsls	r0, r1
 8001fe4:	408d      	lsls	r5, r1
 8001fe6:	40d7      	lsrs	r7, r2
 8001fe8:	40d4      	lsrs	r4, r2
 8001fea:	1e41      	subs	r1, r0, #1
 8001fec:	4188      	sbcs	r0, r1
 8001fee:	9b02      	ldr	r3, [sp, #8]
 8001ff0:	433d      	orrs	r5, r7
 8001ff2:	1b1b      	subs	r3, r3, r4
 8001ff4:	4305      	orrs	r5, r0
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	4662      	mov	r2, ip
 8001ffa:	1b55      	subs	r5, r2, r5
 8001ffc:	45ac      	cmp	ip, r5
 8001ffe:	4192      	sbcs	r2, r2
 8002000:	9b02      	ldr	r3, [sp, #8]
 8002002:	4252      	negs	r2, r2
 8002004:	464f      	mov	r7, r9
 8002006:	1a9c      	subs	r4, r3, r2
 8002008:	e5f6      	b.n	8001bf8 <__aeabi_dsub+0xc4>
 800200a:	2d00      	cmp	r5, #0
 800200c:	d000      	beq.n	8002010 <__aeabi_dsub+0x4dc>
 800200e:	e0b7      	b.n	8002180 <__aeabi_dsub+0x64c>
 8002010:	2a00      	cmp	r2, #0
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x4e2>
 8002014:	e0f0      	b.n	80021f8 <__aeabi_dsub+0x6c4>
 8002016:	2601      	movs	r6, #1
 8002018:	400e      	ands	r6, r1
 800201a:	4663      	mov	r3, ip
 800201c:	9802      	ldr	r0, [sp, #8]
 800201e:	08d9      	lsrs	r1, r3, #3
 8002020:	0742      	lsls	r2, r0, #29
 8002022:	430a      	orrs	r2, r1
 8002024:	08c4      	lsrs	r4, r0, #3
 8002026:	e696      	b.n	8001d56 <__aeabi_dsub+0x222>
 8002028:	4c85      	ldr	r4, [pc, #532]	@ (8002240 <__aeabi_dsub+0x70c>)
 800202a:	1aff      	subs	r7, r7, r3
 800202c:	4014      	ands	r4, r2
 800202e:	0762      	lsls	r2, r4, #29
 8002030:	08e4      	lsrs	r4, r4, #3
 8002032:	e760      	b.n	8001ef6 <__aeabi_dsub+0x3c2>
 8002034:	4981      	ldr	r1, [pc, #516]	@ (800223c <__aeabi_dsub+0x708>)
 8002036:	428a      	cmp	r2, r1
 8002038:	d100      	bne.n	800203c <__aeabi_dsub+0x508>
 800203a:	e0c9      	b.n	80021d0 <__aeabi_dsub+0x69c>
 800203c:	4663      	mov	r3, ip
 800203e:	18c1      	adds	r1, r0, r3
 8002040:	4281      	cmp	r1, r0
 8002042:	4180      	sbcs	r0, r0
 8002044:	9b02      	ldr	r3, [sp, #8]
 8002046:	4240      	negs	r0, r0
 8002048:	18e3      	adds	r3, r4, r3
 800204a:	181b      	adds	r3, r3, r0
 800204c:	07dd      	lsls	r5, r3, #31
 800204e:	085c      	lsrs	r4, r3, #1
 8002050:	2307      	movs	r3, #7
 8002052:	0849      	lsrs	r1, r1, #1
 8002054:	430d      	orrs	r5, r1
 8002056:	0017      	movs	r7, r2
 8002058:	402b      	ands	r3, r5
 800205a:	e710      	b.n	8001e7e <__aeabi_dsub+0x34a>
 800205c:	4663      	mov	r3, ip
 800205e:	1a1d      	subs	r5, r3, r0
 8002060:	45ac      	cmp	ip, r5
 8002062:	4192      	sbcs	r2, r2
 8002064:	2601      	movs	r6, #1
 8002066:	9b02      	ldr	r3, [sp, #8]
 8002068:	4252      	negs	r2, r2
 800206a:	1b1c      	subs	r4, r3, r4
 800206c:	4688      	mov	r8, r1
 800206e:	1aa4      	subs	r4, r4, r2
 8002070:	400e      	ands	r6, r1
 8002072:	e5c6      	b.n	8001c02 <__aeabi_dsub+0xce>
 8002074:	4663      	mov	r3, ip
 8002076:	18c5      	adds	r5, r0, r3
 8002078:	9b02      	ldr	r3, [sp, #8]
 800207a:	4285      	cmp	r5, r0
 800207c:	4180      	sbcs	r0, r0
 800207e:	469c      	mov	ip, r3
 8002080:	4240      	negs	r0, r0
 8002082:	4464      	add	r4, ip
 8002084:	1824      	adds	r4, r4, r0
 8002086:	2701      	movs	r7, #1
 8002088:	0223      	lsls	r3, r4, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x55a>
 800208c:	e6f5      	b.n	8001e7a <__aeabi_dsub+0x346>
 800208e:	2702      	movs	r7, #2
 8002090:	e641      	b.n	8001d16 <__aeabi_dsub+0x1e2>
 8002092:	4663      	mov	r3, ip
 8002094:	1ac5      	subs	r5, r0, r3
 8002096:	42a8      	cmp	r0, r5
 8002098:	4180      	sbcs	r0, r0
 800209a:	9b02      	ldr	r3, [sp, #8]
 800209c:	4240      	negs	r0, r0
 800209e:	1ae4      	subs	r4, r4, r3
 80020a0:	2701      	movs	r7, #1
 80020a2:	1a24      	subs	r4, r4, r0
 80020a4:	e5a8      	b.n	8001bf8 <__aeabi_dsub+0xc4>
 80020a6:	9d02      	ldr	r5, [sp, #8]
 80020a8:	4652      	mov	r2, sl
 80020aa:	002b      	movs	r3, r5
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d3      	lsrs	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	4653      	mov	r3, sl
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d006      	beq.n	80020c6 <__aeabi_dsub+0x592>
 80020b8:	2240      	movs	r2, #64	@ 0x40
 80020ba:	1ad2      	subs	r2, r2, r3
 80020bc:	002b      	movs	r3, r5
 80020be:	4093      	lsls	r3, r2
 80020c0:	4662      	mov	r2, ip
 80020c2:	431a      	orrs	r2, r3
 80020c4:	4693      	mov	fp, r2
 80020c6:	465d      	mov	r5, fp
 80020c8:	1e6b      	subs	r3, r5, #1
 80020ca:	419d      	sbcs	r5, r3
 80020cc:	430d      	orrs	r5, r1
 80020ce:	e615      	b.n	8001cfc <__aeabi_dsub+0x1c8>
 80020d0:	0762      	lsls	r2, r4, #29
 80020d2:	08c0      	lsrs	r0, r0, #3
 80020d4:	4302      	orrs	r2, r0
 80020d6:	08e4      	lsrs	r4, r4, #3
 80020d8:	e70d      	b.n	8001ef6 <__aeabi_dsub+0x3c2>
 80020da:	0011      	movs	r1, r2
 80020dc:	0027      	movs	r7, r4
 80020de:	3920      	subs	r1, #32
 80020e0:	40cf      	lsrs	r7, r1
 80020e2:	2a20      	cmp	r2, #32
 80020e4:	d005      	beq.n	80020f2 <__aeabi_dsub+0x5be>
 80020e6:	2140      	movs	r1, #64	@ 0x40
 80020e8:	1a8a      	subs	r2, r1, r2
 80020ea:	4094      	lsls	r4, r2
 80020ec:	0025      	movs	r5, r4
 80020ee:	4305      	orrs	r5, r0
 80020f0:	9503      	str	r5, [sp, #12]
 80020f2:	9d03      	ldr	r5, [sp, #12]
 80020f4:	1e6a      	subs	r2, r5, #1
 80020f6:	4195      	sbcs	r5, r2
 80020f8:	433d      	orrs	r5, r7
 80020fa:	e77d      	b.n	8001ff8 <__aeabi_dsub+0x4c4>
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x5ce>
 8002100:	e744      	b.n	8001f8c <__aeabi_dsub+0x458>
 8002102:	2601      	movs	r6, #1
 8002104:	400e      	ands	r6, r1
 8002106:	4663      	mov	r3, ip
 8002108:	08d9      	lsrs	r1, r3, #3
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	075a      	lsls	r2, r3, #29
 800210e:	430a      	orrs	r2, r1
 8002110:	08dc      	lsrs	r4, r3, #3
 8002112:	e6f0      	b.n	8001ef6 <__aeabi_dsub+0x3c2>
 8002114:	2a00      	cmp	r2, #0
 8002116:	d028      	beq.n	800216a <__aeabi_dsub+0x636>
 8002118:	4662      	mov	r2, ip
 800211a:	9f02      	ldr	r7, [sp, #8]
 800211c:	08c0      	lsrs	r0, r0, #3
 800211e:	433a      	orrs	r2, r7
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x5f0>
 8002122:	e6dc      	b.n	8001ede <__aeabi_dsub+0x3aa>
 8002124:	0762      	lsls	r2, r4, #29
 8002126:	4310      	orrs	r0, r2
 8002128:	2280      	movs	r2, #128	@ 0x80
 800212a:	08e4      	lsrs	r4, r4, #3
 800212c:	0312      	lsls	r2, r2, #12
 800212e:	4214      	tst	r4, r2
 8002130:	d009      	beq.n	8002146 <__aeabi_dsub+0x612>
 8002132:	08fd      	lsrs	r5, r7, #3
 8002134:	4215      	tst	r5, r2
 8002136:	d106      	bne.n	8002146 <__aeabi_dsub+0x612>
 8002138:	4663      	mov	r3, ip
 800213a:	2601      	movs	r6, #1
 800213c:	002c      	movs	r4, r5
 800213e:	08d8      	lsrs	r0, r3, #3
 8002140:	077b      	lsls	r3, r7, #29
 8002142:	4318      	orrs	r0, r3
 8002144:	400e      	ands	r6, r1
 8002146:	0f42      	lsrs	r2, r0, #29
 8002148:	00c0      	lsls	r0, r0, #3
 800214a:	08c0      	lsrs	r0, r0, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4302      	orrs	r2, r0
 8002150:	e601      	b.n	8001d56 <__aeabi_dsub+0x222>
 8002152:	4663      	mov	r3, ip
 8002154:	1a1d      	subs	r5, r3, r0
 8002156:	45ac      	cmp	ip, r5
 8002158:	4192      	sbcs	r2, r2
 800215a:	9b02      	ldr	r3, [sp, #8]
 800215c:	4252      	negs	r2, r2
 800215e:	1b1c      	subs	r4, r3, r4
 8002160:	000e      	movs	r6, r1
 8002162:	4688      	mov	r8, r1
 8002164:	2701      	movs	r7, #1
 8002166:	1aa4      	subs	r4, r4, r2
 8002168:	e546      	b.n	8001bf8 <__aeabi_dsub+0xc4>
 800216a:	4663      	mov	r3, ip
 800216c:	08d9      	lsrs	r1, r3, #3
 800216e:	9b02      	ldr	r3, [sp, #8]
 8002170:	075a      	lsls	r2, r3, #29
 8002172:	430a      	orrs	r2, r1
 8002174:	08dc      	lsrs	r4, r3, #3
 8002176:	e5ee      	b.n	8001d56 <__aeabi_dsub+0x222>
 8002178:	4663      	mov	r3, ip
 800217a:	9c02      	ldr	r4, [sp, #8]
 800217c:	9303      	str	r3, [sp, #12]
 800217e:	e6c7      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8002180:	08c0      	lsrs	r0, r0, #3
 8002182:	2a00      	cmp	r2, #0
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x654>
 8002186:	e6aa      	b.n	8001ede <__aeabi_dsub+0x3aa>
 8002188:	0762      	lsls	r2, r4, #29
 800218a:	4310      	orrs	r0, r2
 800218c:	2280      	movs	r2, #128	@ 0x80
 800218e:	08e4      	lsrs	r4, r4, #3
 8002190:	0312      	lsls	r2, r2, #12
 8002192:	4214      	tst	r4, r2
 8002194:	d0d7      	beq.n	8002146 <__aeabi_dsub+0x612>
 8002196:	9f02      	ldr	r7, [sp, #8]
 8002198:	08fd      	lsrs	r5, r7, #3
 800219a:	4215      	tst	r5, r2
 800219c:	d1d3      	bne.n	8002146 <__aeabi_dsub+0x612>
 800219e:	4663      	mov	r3, ip
 80021a0:	2601      	movs	r6, #1
 80021a2:	08d8      	lsrs	r0, r3, #3
 80021a4:	077b      	lsls	r3, r7, #29
 80021a6:	002c      	movs	r4, r5
 80021a8:	4318      	orrs	r0, r3
 80021aa:	400e      	ands	r6, r1
 80021ac:	e7cb      	b.n	8002146 <__aeabi_dsub+0x612>
 80021ae:	000a      	movs	r2, r1
 80021b0:	0027      	movs	r7, r4
 80021b2:	3a20      	subs	r2, #32
 80021b4:	40d7      	lsrs	r7, r2
 80021b6:	2920      	cmp	r1, #32
 80021b8:	d005      	beq.n	80021c6 <__aeabi_dsub+0x692>
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	1a52      	subs	r2, r2, r1
 80021be:	4094      	lsls	r4, r2
 80021c0:	0025      	movs	r5, r4
 80021c2:	4305      	orrs	r5, r0
 80021c4:	9503      	str	r5, [sp, #12]
 80021c6:	9d03      	ldr	r5, [sp, #12]
 80021c8:	1e6a      	subs	r2, r5, #1
 80021ca:	4195      	sbcs	r5, r2
 80021cc:	432f      	orrs	r7, r5
 80021ce:	e610      	b.n	8001df2 <__aeabi_dsub+0x2be>
 80021d0:	0014      	movs	r4, r2
 80021d2:	2500      	movs	r5, #0
 80021d4:	2200      	movs	r2, #0
 80021d6:	e556      	b.n	8001c86 <__aeabi_dsub+0x152>
 80021d8:	9b02      	ldr	r3, [sp, #8]
 80021da:	4460      	add	r0, ip
 80021dc:	4699      	mov	r9, r3
 80021de:	4560      	cmp	r0, ip
 80021e0:	4192      	sbcs	r2, r2
 80021e2:	444c      	add	r4, r9
 80021e4:	4252      	negs	r2, r2
 80021e6:	0005      	movs	r5, r0
 80021e8:	18a4      	adds	r4, r4, r2
 80021ea:	e74c      	b.n	8002086 <__aeabi_dsub+0x552>
 80021ec:	001a      	movs	r2, r3
 80021ee:	001c      	movs	r4, r3
 80021f0:	432a      	orrs	r2, r5
 80021f2:	d000      	beq.n	80021f6 <__aeabi_dsub+0x6c2>
 80021f4:	e6b3      	b.n	8001f5e <__aeabi_dsub+0x42a>
 80021f6:	e6c9      	b.n	8001f8c <__aeabi_dsub+0x458>
 80021f8:	2480      	movs	r4, #128	@ 0x80
 80021fa:	2600      	movs	r6, #0
 80021fc:	0324      	lsls	r4, r4, #12
 80021fe:	e5ae      	b.n	8001d5e <__aeabi_dsub+0x22a>
 8002200:	2120      	movs	r1, #32
 8002202:	2500      	movs	r5, #0
 8002204:	1a09      	subs	r1, r1, r0
 8002206:	e517      	b.n	8001c38 <__aeabi_dsub+0x104>
 8002208:	2200      	movs	r2, #0
 800220a:	2500      	movs	r5, #0
 800220c:	4c0b      	ldr	r4, [pc, #44]	@ (800223c <__aeabi_dsub+0x708>)
 800220e:	e53a      	b.n	8001c86 <__aeabi_dsub+0x152>
 8002210:	2d00      	cmp	r5, #0
 8002212:	d100      	bne.n	8002216 <__aeabi_dsub+0x6e2>
 8002214:	e5f6      	b.n	8001e04 <__aeabi_dsub+0x2d0>
 8002216:	464b      	mov	r3, r9
 8002218:	1bda      	subs	r2, r3, r7
 800221a:	4692      	mov	sl, r2
 800221c:	2f00      	cmp	r7, #0
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x6ee>
 8002220:	e66f      	b.n	8001f02 <__aeabi_dsub+0x3ce>
 8002222:	2a38      	cmp	r2, #56	@ 0x38
 8002224:	dc05      	bgt.n	8002232 <__aeabi_dsub+0x6fe>
 8002226:	2680      	movs	r6, #128	@ 0x80
 8002228:	0436      	lsls	r6, r6, #16
 800222a:	4334      	orrs	r4, r6
 800222c:	4688      	mov	r8, r1
 800222e:	000e      	movs	r6, r1
 8002230:	e6d1      	b.n	8001fd6 <__aeabi_dsub+0x4a2>
 8002232:	4688      	mov	r8, r1
 8002234:	000e      	movs	r6, r1
 8002236:	2501      	movs	r5, #1
 8002238:	e6de      	b.n	8001ff8 <__aeabi_dsub+0x4c4>
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	000007ff 	.word	0x000007ff
 8002240:	ff7fffff 	.word	0xff7fffff
 8002244:	000007fe 	.word	0x000007fe
 8002248:	2d00      	cmp	r5, #0
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x71a>
 800224c:	e668      	b.n	8001f20 <__aeabi_dsub+0x3ec>
 800224e:	464b      	mov	r3, r9
 8002250:	1bd9      	subs	r1, r3, r7
 8002252:	2f00      	cmp	r7, #0
 8002254:	d101      	bne.n	800225a <__aeabi_dsub+0x726>
 8002256:	468a      	mov	sl, r1
 8002258:	e5a7      	b.n	8001daa <__aeabi_dsub+0x276>
 800225a:	2701      	movs	r7, #1
 800225c:	2938      	cmp	r1, #56	@ 0x38
 800225e:	dd00      	ble.n	8002262 <__aeabi_dsub+0x72e>
 8002260:	e5c7      	b.n	8001df2 <__aeabi_dsub+0x2be>
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	0412      	lsls	r2, r2, #16
 8002266:	4314      	orrs	r4, r2
 8002268:	e5af      	b.n	8001dca <__aeabi_dsub+0x296>
 800226a:	46c0      	nop			@ (mov r8, r8)

0800226c <__aeabi_dcmpun>:
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	46c6      	mov	lr, r8
 8002270:	031e      	lsls	r6, r3, #12
 8002272:	0b36      	lsrs	r6, r6, #12
 8002274:	46b0      	mov	r8, r6
 8002276:	4e0d      	ldr	r6, [pc, #52]	@ (80022ac <__aeabi_dcmpun+0x40>)
 8002278:	030c      	lsls	r4, r1, #12
 800227a:	004d      	lsls	r5, r1, #1
 800227c:	005f      	lsls	r7, r3, #1
 800227e:	b500      	push	{lr}
 8002280:	0b24      	lsrs	r4, r4, #12
 8002282:	0d6d      	lsrs	r5, r5, #21
 8002284:	0d7f      	lsrs	r7, r7, #21
 8002286:	42b5      	cmp	r5, r6
 8002288:	d00b      	beq.n	80022a2 <__aeabi_dcmpun+0x36>
 800228a:	4908      	ldr	r1, [pc, #32]	@ (80022ac <__aeabi_dcmpun+0x40>)
 800228c:	2000      	movs	r0, #0
 800228e:	428f      	cmp	r7, r1
 8002290:	d104      	bne.n	800229c <__aeabi_dcmpun+0x30>
 8002292:	4646      	mov	r6, r8
 8002294:	4316      	orrs	r6, r2
 8002296:	0030      	movs	r0, r6
 8002298:	1e43      	subs	r3, r0, #1
 800229a:	4198      	sbcs	r0, r3
 800229c:	bc80      	pop	{r7}
 800229e:	46b8      	mov	r8, r7
 80022a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a2:	4304      	orrs	r4, r0
 80022a4:	2001      	movs	r0, #1
 80022a6:	2c00      	cmp	r4, #0
 80022a8:	d1f8      	bne.n	800229c <__aeabi_dcmpun+0x30>
 80022aa:	e7ee      	b.n	800228a <__aeabi_dcmpun+0x1e>
 80022ac:	000007ff 	.word	0x000007ff

080022b0 <__aeabi_d2iz>:
 80022b0:	000b      	movs	r3, r1
 80022b2:	0002      	movs	r2, r0
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	4d16      	ldr	r5, [pc, #88]	@ (8002310 <__aeabi_d2iz+0x60>)
 80022b8:	030c      	lsls	r4, r1, #12
 80022ba:	b082      	sub	sp, #8
 80022bc:	0049      	lsls	r1, r1, #1
 80022be:	2000      	movs	r0, #0
 80022c0:	9200      	str	r2, [sp, #0]
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	0b24      	lsrs	r4, r4, #12
 80022c6:	0d49      	lsrs	r1, r1, #21
 80022c8:	0fde      	lsrs	r6, r3, #31
 80022ca:	42a9      	cmp	r1, r5
 80022cc:	dd04      	ble.n	80022d8 <__aeabi_d2iz+0x28>
 80022ce:	4811      	ldr	r0, [pc, #68]	@ (8002314 <__aeabi_d2iz+0x64>)
 80022d0:	4281      	cmp	r1, r0
 80022d2:	dd03      	ble.n	80022dc <__aeabi_d2iz+0x2c>
 80022d4:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <__aeabi_d2iz+0x68>)
 80022d6:	18f0      	adds	r0, r6, r3
 80022d8:	b002      	add	sp, #8
 80022da:	bd70      	pop	{r4, r5, r6, pc}
 80022dc:	2080      	movs	r0, #128	@ 0x80
 80022de:	0340      	lsls	r0, r0, #13
 80022e0:	4320      	orrs	r0, r4
 80022e2:	4c0e      	ldr	r4, [pc, #56]	@ (800231c <__aeabi_d2iz+0x6c>)
 80022e4:	1a64      	subs	r4, r4, r1
 80022e6:	2c1f      	cmp	r4, #31
 80022e8:	dd08      	ble.n	80022fc <__aeabi_d2iz+0x4c>
 80022ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <__aeabi_d2iz+0x70>)
 80022ec:	1a5b      	subs	r3, r3, r1
 80022ee:	40d8      	lsrs	r0, r3
 80022f0:	0003      	movs	r3, r0
 80022f2:	4258      	negs	r0, r3
 80022f4:	2e00      	cmp	r6, #0
 80022f6:	d1ef      	bne.n	80022d8 <__aeabi_d2iz+0x28>
 80022f8:	0018      	movs	r0, r3
 80022fa:	e7ed      	b.n	80022d8 <__aeabi_d2iz+0x28>
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <__aeabi_d2iz+0x74>)
 80022fe:	9a00      	ldr	r2, [sp, #0]
 8002300:	469c      	mov	ip, r3
 8002302:	0003      	movs	r3, r0
 8002304:	4461      	add	r1, ip
 8002306:	408b      	lsls	r3, r1
 8002308:	40e2      	lsrs	r2, r4
 800230a:	4313      	orrs	r3, r2
 800230c:	e7f1      	b.n	80022f2 <__aeabi_d2iz+0x42>
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	000003fe 	.word	0x000003fe
 8002314:	0000041d 	.word	0x0000041d
 8002318:	7fffffff 	.word	0x7fffffff
 800231c:	00000433 	.word	0x00000433
 8002320:	00000413 	.word	0x00000413
 8002324:	fffffbed 	.word	0xfffffbed

08002328 <__aeabi_i2d>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	2800      	cmp	r0, #0
 800232c:	d016      	beq.n	800235c <__aeabi_i2d+0x34>
 800232e:	17c3      	asrs	r3, r0, #31
 8002330:	18c5      	adds	r5, r0, r3
 8002332:	405d      	eors	r5, r3
 8002334:	0fc4      	lsrs	r4, r0, #31
 8002336:	0028      	movs	r0, r5
 8002338:	f000 f824 	bl	8002384 <__clzsi2>
 800233c:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <__aeabi_i2d+0x58>)
 800233e:	1a1b      	subs	r3, r3, r0
 8002340:	055b      	lsls	r3, r3, #21
 8002342:	0d5b      	lsrs	r3, r3, #21
 8002344:	280a      	cmp	r0, #10
 8002346:	dc14      	bgt.n	8002372 <__aeabi_i2d+0x4a>
 8002348:	0002      	movs	r2, r0
 800234a:	002e      	movs	r6, r5
 800234c:	3215      	adds	r2, #21
 800234e:	4096      	lsls	r6, r2
 8002350:	220b      	movs	r2, #11
 8002352:	1a12      	subs	r2, r2, r0
 8002354:	40d5      	lsrs	r5, r2
 8002356:	032d      	lsls	r5, r5, #12
 8002358:	0b2d      	lsrs	r5, r5, #12
 800235a:	e003      	b.n	8002364 <__aeabi_i2d+0x3c>
 800235c:	2400      	movs	r4, #0
 800235e:	2300      	movs	r3, #0
 8002360:	2500      	movs	r5, #0
 8002362:	2600      	movs	r6, #0
 8002364:	051b      	lsls	r3, r3, #20
 8002366:	432b      	orrs	r3, r5
 8002368:	07e4      	lsls	r4, r4, #31
 800236a:	4323      	orrs	r3, r4
 800236c:	0030      	movs	r0, r6
 800236e:	0019      	movs	r1, r3
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	380b      	subs	r0, #11
 8002374:	4085      	lsls	r5, r0
 8002376:	032d      	lsls	r5, r5, #12
 8002378:	2600      	movs	r6, #0
 800237a:	0b2d      	lsrs	r5, r5, #12
 800237c:	e7f2      	b.n	8002364 <__aeabi_i2d+0x3c>
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	0000041e 	.word	0x0000041e

08002384 <__clzsi2>:
 8002384:	211c      	movs	r1, #28
 8002386:	2301      	movs	r3, #1
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	4298      	cmp	r0, r3
 800238c:	d301      	bcc.n	8002392 <__clzsi2+0xe>
 800238e:	0c00      	lsrs	r0, r0, #16
 8002390:	3910      	subs	r1, #16
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	4298      	cmp	r0, r3
 8002396:	d301      	bcc.n	800239c <__clzsi2+0x18>
 8002398:	0a00      	lsrs	r0, r0, #8
 800239a:	3908      	subs	r1, #8
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	4298      	cmp	r0, r3
 80023a0:	d301      	bcc.n	80023a6 <__clzsi2+0x22>
 80023a2:	0900      	lsrs	r0, r0, #4
 80023a4:	3904      	subs	r1, #4
 80023a6:	a202      	add	r2, pc, #8	@ (adr r2, 80023b0 <__clzsi2+0x2c>)
 80023a8:	5c10      	ldrb	r0, [r2, r0]
 80023aa:	1840      	adds	r0, r0, r1
 80023ac:	4770      	bx	lr
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	02020304 	.word	0x02020304
 80023b4:	01010101 	.word	0x01010101
	...

080023c0 <__clzdi2>:
 80023c0:	b510      	push	{r4, lr}
 80023c2:	2900      	cmp	r1, #0
 80023c4:	d103      	bne.n	80023ce <__clzdi2+0xe>
 80023c6:	f7ff ffdd 	bl	8002384 <__clzsi2>
 80023ca:	3020      	adds	r0, #32
 80023cc:	e002      	b.n	80023d4 <__clzdi2+0x14>
 80023ce:	0008      	movs	r0, r1
 80023d0:	f7ff ffd8 	bl	8002384 <__clzsi2>
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	46c0      	nop			@ (mov r8, r8)

080023d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_Init+0x3c>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_Init+0x3c>)
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	0049      	lsls	r1, r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023f2:	2003      	movs	r0, #3
 80023f4:	f000 f810 	bl	8002418 <HAL_InitTick>
 80023f8:	1e03      	subs	r3, r0, #0
 80023fa:	d003      	beq.n	8002404 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e001      	b.n	8002408 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002404:	f004 fbe6 	bl	8006bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40022000 	.word	0x40022000

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002420:	230f      	movs	r3, #15
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002428:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <HAL_InitTick+0x88>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02b      	beq.n	8002488 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002430:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <HAL_InitTick+0x8c>)
 8002432:	681c      	ldr	r4, [r3, #0]
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_InitTick+0x88>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	0019      	movs	r1, r3
 800243a:	23fa      	movs	r3, #250	@ 0xfa
 800243c:	0098      	lsls	r0, r3, #2
 800243e:	f7fd fe69 	bl	8000114 <__udivsi3>
 8002442:	0003      	movs	r3, r0
 8002444:	0019      	movs	r1, r3
 8002446:	0020      	movs	r0, r4
 8002448:	f7fd fe64 	bl	8000114 <__udivsi3>
 800244c:	0003      	movs	r3, r0
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fdbb 	bl	8002fca <HAL_SYSTICK_Config>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d112      	bne.n	800247e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d80a      	bhi.n	8002474 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	2301      	movs	r3, #1
 8002462:	425b      	negs	r3, r3
 8002464:	2200      	movs	r2, #0
 8002466:	0018      	movs	r0, r3
 8002468:	f000 fd8a 	bl	8002f80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_InitTick+0x90>)
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e00d      	b.n	8002490 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002474:	230f      	movs	r3, #15
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e008      	b.n	8002490 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800247e:	230f      	movs	r3, #15
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e003      	b.n	8002490 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002488:	230f      	movs	r3, #15
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002490:	230f      	movs	r3, #15
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b005      	add	sp, #20
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000014 	.word	0x20000014
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_IncTick+0x1c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	001a      	movs	r2, r3
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_IncTick+0x20>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	18d2      	adds	r2, r2, r3
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_IncTick+0x20>)
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	20000004 	.word	0x20000004
 80024cc:	20000094 	.word	0x20000094

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b02      	ldr	r3, [pc, #8]	@ (80024e0 <HAL_GetTick+0x10>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	20000094 	.word	0x20000094

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3301      	adds	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_Delay+0x44>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	001a      	movs	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	189b      	adds	r3, r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	f7ff ffe0 	bl	80024d0 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d8f7      	bhi.n	800250c <HAL_Delay+0x28>
  {
  }
}
 800251c:	46c0      	nop			@ (mov r8, r8)
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	20000004 	.word	0x20000004

0800252c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a05      	ldr	r2, [pc, #20]	@ (8002550 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800253c:	401a      	ands	r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b002      	add	sp, #8
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	fe3fffff 	.word	0xfe3fffff

08002554 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	23e0      	movs	r3, #224	@ 0xe0
 8002562:	045b      	lsls	r3, r3, #17
 8002564:	4013      	ands	r3, r2
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}

0800256e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	2104      	movs	r1, #4
 8002582:	400a      	ands	r2, r1
 8002584:	2107      	movs	r1, #7
 8002586:	4091      	lsls	r1, r2
 8002588:	000a      	movs	r2, r1
 800258a:	43d2      	mvns	r2, r2
 800258c:	401a      	ands	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2104      	movs	r1, #4
 8002592:	400b      	ands	r3, r1
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4099      	lsls	r1, r3
 8002598:	000b      	movs	r3, r1
 800259a:	431a      	orrs	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b004      	add	sp, #16
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	2104      	movs	r1, #4
 80025ba:	400a      	ands	r2, r1
 80025bc:	2107      	movs	r1, #7
 80025be:	4091      	lsls	r1, r2
 80025c0:	000a      	movs	r2, r1
 80025c2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2104      	movs	r1, #4
 80025c8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80025ca:	40da      	lsrs	r2, r3
 80025cc:	0013      	movs	r3, r2
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b002      	add	sp, #8
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	211f      	movs	r1, #31
 80025ea:	400a      	ands	r2, r1
 80025ec:	210f      	movs	r1, #15
 80025ee:	4091      	lsls	r1, r2
 80025f0:	000a      	movs	r2, r1
 80025f2:	43d2      	mvns	r2, r2
 80025f4:	401a      	ands	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	210f      	movs	r1, #15
 80025fc:	4019      	ands	r1, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	201f      	movs	r0, #31
 8002602:	4003      	ands	r3, r0
 8002604:	4099      	lsls	r1, r3
 8002606:	000b      	movs	r3, r1
 8002608:	431a      	orrs	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}

08002616 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	035b      	lsls	r3, r3, #13
 8002628:	0b5b      	lsrs	r3, r3, #13
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	0352      	lsls	r2, r2, #13
 800264a:	0b52      	lsrs	r2, r2, #13
 800264c:	43d2      	mvns	r2, r2
 800264e:	401a      	ands	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	0212      	lsls	r2, r2, #8
 8002670:	43d2      	mvns	r2, r2
 8002672:	401a      	ands	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	400b      	ands	r3, r1
 800267c:	4904      	ldr	r1, [pc, #16]	@ (8002690 <LL_ADC_SetChannelSamplingTime+0x34>)
 800267e:	400b      	ands	r3, r1
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	07ffff00 	.word	0x07ffff00

08002694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a05      	ldr	r2, [pc, #20]	@ (80026b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	2280      	movs	r2, #128	@ 0x80
 80026a6:	0552      	lsls	r2, r2, #21
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b002      	add	sp, #8
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	6fffffe8 	.word	0x6fffffe8

080026bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	055b      	lsls	r3, r3, #21
 80026cc:	401a      	ands	r2, r3
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	055b      	lsls	r3, r3, #21
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d101      	bne.n	80026da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2201      	movs	r2, #1
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <LL_ADC_IsEnabled+0x18>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <LL_ADC_IsEnabled+0x1a>
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}

08002706 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2204      	movs	r2, #4
 8002714:	4013      	ands	r3, r2
 8002716:	2b04      	cmp	r3, #4
 8002718:	d101      	bne.n	800271e <LL_ADC_REG_IsConversionOngoing+0x18>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800271e:	2300      	movs	r3, #0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	231f      	movs	r3, #31
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e17f      	b.n	8002a4e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0018      	movs	r0, r3
 800275a:	f003 fce1 	bl	8006120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2254      	movs	r2, #84	@ 0x54
 8002768:	2100      	movs	r1, #0
 800276a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff ffa3 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d115      	bne.n	80027a6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff ff88 	bl	8002694 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002784:	4bb4      	ldr	r3, [pc, #720]	@ (8002a58 <HAL_ADC_Init+0x330>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	49b4      	ldr	r1, [pc, #720]	@ (8002a5c <HAL_ADC_Init+0x334>)
 800278a:	0018      	movs	r0, r3
 800278c:	f7fd fcc2 	bl	8000114 <__udivsi3>
 8002790:	0003      	movs	r3, r0
 8002792:	3301      	adds	r3, #1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002798:	e002      	b.n	80027a0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3b01      	subs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f9      	bne.n	800279a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7ff ff86 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d10f      	bne.n	80027d4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	2210      	movs	r2, #16
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	2201      	movs	r2, #1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027cc:	231f      	movs	r3, #31
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0018      	movs	r0, r3
 80027da:	f7ff ff94 	bl	8002706 <LL_ADC_REG_IsConversionOngoing>
 80027de:	0003      	movs	r3, r0
 80027e0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	2210      	movs	r2, #16
 80027e8:	4013      	ands	r3, r2
 80027ea:	d000      	beq.n	80027ee <HAL_ADC_Init+0xc6>
 80027ec:	e122      	b.n	8002a34 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d000      	beq.n	80027f6 <HAL_ADC_Init+0xce>
 80027f4:	e11e      	b.n	8002a34 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	4a99      	ldr	r2, [pc, #612]	@ (8002a60 <HAL_ADC_Init+0x338>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	2202      	movs	r2, #2
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0018      	movs	r0, r3
 800280c:	f7ff ff6a 	bl	80026e4 <LL_ADC_IsEnabled>
 8002810:	1e03      	subs	r3, r0, #0
 8002812:	d000      	beq.n	8002816 <HAL_ADC_Init+0xee>
 8002814:	e0ad      	b.n	8002972 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7e1b      	ldrb	r3, [r3, #24]
 800281e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002820:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7e5b      	ldrb	r3, [r3, #25]
 8002826:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002828:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7e9b      	ldrb	r3, [r3, #26]
 800282e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002830:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_ADC_Init+0x118>
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	015b      	lsls	r3, r3, #5
 800283e:	e000      	b.n	8002842 <HAL_ADC_Init+0x11a>
 8002840:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002842:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002848:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	da04      	bge.n	800285c <HAL_ADC_Init+0x134>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	e001      	b.n	8002860 <HAL_ADC_Init+0x138>
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002860:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	212c      	movs	r1, #44	@ 0x2c
 8002866:	5c5b      	ldrb	r3, [r3, r1]
 8002868:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800286a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	5c9b      	ldrb	r3, [r3, r2]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d115      	bne.n	80028a8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7e9b      	ldrb	r3, [r3, #26]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2280      	movs	r2, #128	@ 0x80
 8002888:	0252      	lsls	r2, r2, #9
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	e00b      	b.n	80028a8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	2220      	movs	r2, #32
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a0:	2201      	movs	r2, #1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028b4:	23e0      	movs	r3, #224	@ 0xe0
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028be:	4313      	orrs	r3, r2
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a65      	ldr	r2, [pc, #404]	@ (8002a64 <HAL_ADC_Init+0x33c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0f9b      	lsrs	r3, r3, #30
 80028e2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028e8:	4313      	orrs	r3, r2
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	223c      	movs	r2, #60	@ 0x3c
 80028f4:	5c9b      	ldrb	r3, [r3, r2]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d111      	bne.n	800291e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0f9b      	lsrs	r3, r3, #30
 8002900:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002906:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800290c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002912:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	2201      	movs	r2, #1
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	4a50      	ldr	r2, [pc, #320]	@ (8002a68 <HAL_ADC_Init+0x340>)
 8002926:	4013      	ands	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	430a      	orrs	r2, r1
 8002932:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	23c0      	movs	r3, #192	@ 0xc0
 800293a:	061b      	lsls	r3, r3, #24
 800293c:	429a      	cmp	r2, r3
 800293e:	d018      	beq.n	8002972 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	05db      	lsls	r3, r3, #23
 8002948:	429a      	cmp	r2, r3
 800294a:	d012      	beq.n	8002972 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	061b      	lsls	r3, r3, #24
 8002954:	429a      	cmp	r2, r3
 8002956:	d00c      	beq.n	8002972 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002958:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <HAL_ADC_Init+0x344>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a44      	ldr	r2, [pc, #272]	@ (8002a70 <HAL_ADC_Init+0x348>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	23f0      	movs	r3, #240	@ 0xf0
 8002968:	039b      	lsls	r3, r3, #14
 800296a:	401a      	ands	r2, r3
 800296c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <HAL_ADC_Init+0x344>)
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297a:	001a      	movs	r2, r3
 800297c:	2100      	movs	r1, #0
 800297e:	f7ff fdf6 	bl	800256e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	493a      	ldr	r1, [pc, #232]	@ (8002a74 <HAL_ADC_Init+0x34c>)
 800298c:	001a      	movs	r2, r3
 800298e:	f7ff fdee 	bl	800256e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2110      	movs	r1, #16
 80029a6:	4249      	negs	r1, r1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80029ac:	e018      	b.n	80029e0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	039b      	lsls	r3, r3, #14
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d112      	bne.n	80029e0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	221c      	movs	r2, #28
 80029ca:	4013      	ands	r3, r2
 80029cc:	2210      	movs	r2, #16
 80029ce:	4252      	negs	r2, r2
 80029d0:	409a      	lsls	r2, r3
 80029d2:	0011      	movs	r1, r2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2100      	movs	r1, #0
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff fdde 	bl	80025a8 <LL_ADC_GetSamplingTimeCommonChannels>
 80029ec:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10b      	bne.n	8002a0e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	2203      	movs	r2, #3
 8002a02:	4393      	bics	r3, r2
 8002a04:	2201      	movs	r2, #1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a0c:	e01c      	b.n	8002a48 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a12:	2212      	movs	r2, #18
 8002a14:	4393      	bics	r3, r2
 8002a16:	2210      	movs	r2, #16
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	2201      	movs	r2, #1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002a2a:	231f      	movs	r3, #31
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a32:	e009      	b.n	8002a48 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	2210      	movs	r2, #16
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a40:	231f      	movs	r3, #31
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002a48:	231f      	movs	r3, #31
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
}
 8002a4e:	0018      	movs	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b008      	add	sp, #32
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	20000014 	.word	0x20000014
 8002a5c:	00030d40 	.word	0x00030d40
 8002a60:	fffffefd 	.word	0xfffffefd
 8002a64:	ffde0201 	.word	0xffde0201
 8002a68:	1ffffc02 	.word	0x1ffffc02
 8002a6c:	40012708 	.word	0x40012708
 8002a70:	ffc3ffff 	.word	0xffc3ffff
 8002a74:	07ffff04 	.word	0x07ffff04

08002a78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a82:	2317      	movs	r3, #23
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2254      	movs	r2, #84	@ 0x54
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x24>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e1c0      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x3a6>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2254      	movs	r2, #84	@ 0x54
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff fe2c 	bl	8002706 <LL_ADC_REG_IsConversionOngoing>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d000      	beq.n	8002ab4 <HAL_ADC_ConfigChannel+0x3c>
 8002ab2:	e1a3      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d100      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x46>
 8002abc:	e143      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ace:	4ac1      	ldr	r2, [pc, #772]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x35c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0019      	movs	r1, r3
 8002ade:	0010      	movs	r0, r2
 8002ae0:	f7ff fd99 	bl	8002616 <LL_ADC_REG_SetSequencerChAdd>
 8002ae4:	e0c9      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	211f      	movs	r1, #31
 8002af0:	400b      	ands	r3, r1
 8002af2:	210f      	movs	r1, #15
 8002af4:	4099      	lsls	r1, r3
 8002af6:	000b      	movs	r3, r1
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	035b      	lsls	r3, r3, #13
 8002b04:	0b5b      	lsrs	r3, r3, #13
 8002b06:	d105      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x9c>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	221f      	movs	r2, #31
 8002b10:	4013      	ands	r3, r2
 8002b12:	e098      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d000      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0xa8>
 8002b1e:	e091      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x1cc>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d000      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0xb4>
 8002b2a:	e089      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x1c8>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2204      	movs	r2, #4
 8002b32:	4013      	ands	r3, r2
 8002b34:	d000      	beq.n	8002b38 <HAL_ADC_ConfigChannel+0xc0>
 8002b36:	e081      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x1c4>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d000      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0xcc>
 8002b42:	e079      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x1c0>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d000      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0xd8>
 8002b4e:	e071      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x1bc>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2220      	movs	r2, #32
 8002b56:	4013      	ands	r3, r2
 8002b58:	d000      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0xe4>
 8002b5a:	e069      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x1b8>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2240      	movs	r2, #64	@ 0x40
 8002b62:	4013      	ands	r3, r2
 8002b64:	d000      	beq.n	8002b68 <HAL_ADC_ConfigChannel+0xf0>
 8002b66:	e061      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x1b4>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d000      	beq.n	8002b74 <HAL_ADC_ConfigChannel+0xfc>
 8002b72:	e059      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x1b0>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d151      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1ac>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d149      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x1a8>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4013      	ands	r3, r2
 8002b96:	d141      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1a4>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d139      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1a0>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	015b      	lsls	r3, r3, #5
 8002bac:	4013      	ands	r3, r2
 8002bae:	d131      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x19c>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	019b      	lsls	r3, r3, #6
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d129      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x198>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d121      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x194>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d119      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x190>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	@ 0x80
 8002bda:	025b      	lsls	r3, r3, #9
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d111      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x18c>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	029b      	lsls	r3, r3, #10
 8002be8:	4013      	ands	r3, r2
 8002bea:	d109      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x188>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	02db      	lsls	r3, r3, #11
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d001      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x184>
 8002bf8:	2312      	movs	r3, #18
 8002bfa:	e024      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e022      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c00:	2311      	movs	r3, #17
 8002c02:	e020      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c04:	2310      	movs	r3, #16
 8002c06:	e01e      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c08:	230f      	movs	r3, #15
 8002c0a:	e01c      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c0c:	230e      	movs	r3, #14
 8002c0e:	e01a      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c10:	230d      	movs	r3, #13
 8002c12:	e018      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c14:	230c      	movs	r3, #12
 8002c16:	e016      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c18:	230b      	movs	r3, #11
 8002c1a:	e014      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	e012      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c20:	2309      	movs	r3, #9
 8002c22:	e010      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c24:	2308      	movs	r3, #8
 8002c26:	e00e      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c28:	2307      	movs	r3, #7
 8002c2a:	e00c      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	e00a      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c30:	2305      	movs	r3, #5
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e006      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e004      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e002      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c44:	2300      	movs	r3, #0
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6852      	ldr	r2, [r2, #4]
 8002c4a:	201f      	movs	r0, #31
 8002c4c:	4002      	ands	r2, r0
 8002c4e:	4093      	lsls	r3, r2
 8002c50:	000a      	movs	r2, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d808      	bhi.n	8002c7a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	001a      	movs	r2, r3
 8002c76:	f7ff fcae 	bl	80025d6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	001a      	movs	r2, r3
 8002c88:	f7ff fce8 	bl	800265c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	db00      	blt.n	8002c96 <HAL_ADC_ConfigChannel+0x21e>
 8002c94:	e0bc      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c96:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff fc5b 	bl	8002554 <LL_ADC_GetCommonPathInternalCh>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8002ddc <HAL_ADC_ConfigChannel+0x364>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d122      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	2380      	movs	r3, #128	@ 0x80
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cb4:	d11d      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2280      	movs	r2, #128	@ 0x80
 8002cba:	0412      	lsls	r2, r2, #16
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	4a46      	ldr	r2, [pc, #280]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	0010      	movs	r0, r2
 8002cc4:	f7ff fc32 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc8:	4b45      	ldr	r3, [pc, #276]	@ (8002de0 <HAL_ADC_ConfigChannel+0x368>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4945      	ldr	r1, [pc, #276]	@ (8002de4 <HAL_ADC_ConfigChannel+0x36c>)
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7fd fa20 	bl	8000114 <__udivsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	0013      	movs	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	189b      	adds	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ce2:	e002      	b.n	8002cea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f9      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cf0:	e08e      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8002de8 <HAL_ADC_ConfigChannel+0x370>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10e      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	2380      	movs	r3, #128	@ 0x80
 8002d00:	045b      	lsls	r3, r3, #17
 8002d02:	4013      	ands	r3, r2
 8002d04:	d109      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2280      	movs	r2, #128	@ 0x80
 8002d0a:	0452      	lsls	r2, r2, #17
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	4a32      	ldr	r2, [pc, #200]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002d10:	0019      	movs	r1, r3
 8002d12:	0010      	movs	r0, r2
 8002d14:	f7ff fc0a 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002d18:	e07a      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a33      	ldr	r2, [pc, #204]	@ (8002dec <HAL_ADC_ConfigChannel+0x374>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d000      	beq.n	8002d26 <HAL_ADC_ConfigChannel+0x2ae>
 8002d24:	e074      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	2380      	movs	r3, #128	@ 0x80
 8002d2a:	03db      	lsls	r3, r3, #15
 8002d2c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d2e:	d000      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x2ba>
 8002d30:	e06e      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2280      	movs	r2, #128	@ 0x80
 8002d36:	03d2      	lsls	r2, r2, #15
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	4a27      	ldr	r2, [pc, #156]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	0010      	movs	r0, r2
 8002d40:	f7ff fbf4 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002d44:	e064      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	2380      	movs	r3, #128	@ 0x80
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d56:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x35c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d107      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0019      	movs	r1, r3
 8002d66:	0010      	movs	r0, r2
 8002d68:	f7ff fc66 	bl	8002638 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da4d      	bge.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d74:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff fbec 	bl	8002554 <LL_ADC_GetCommonPathInternalCh>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <HAL_ADC_ConfigChannel+0x364>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d108      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <HAL_ADC_ConfigChannel+0x378>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002d92:	0019      	movs	r1, r3
 8002d94:	0010      	movs	r0, r2
 8002d96:	f7ff fbc9 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002d9a:	e039      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <HAL_ADC_ConfigChannel+0x370>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d108      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4a12      	ldr	r2, [pc, #72]	@ (8002df4 <HAL_ADC_ConfigChannel+0x37c>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002dae:	0019      	movs	r1, r3
 8002db0:	0010      	movs	r0, r2
 8002db2:	f7ff fbbb 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002db6:	e02b      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002dec <HAL_ADC_ConfigChannel+0x374>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d126      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <HAL_ADC_ConfigChannel+0x380>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	4a03      	ldr	r2, [pc, #12]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f7ff fbad 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002dd2:	e01d      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
 8002dd4:	80000004 	.word	0x80000004
 8002dd8:	40012708 	.word	0x40012708
 8002ddc:	b0001000 	.word	0xb0001000
 8002de0:	20000014 	.word	0x20000014
 8002de4:	00030d40 	.word	0x00030d40
 8002de8:	b8004000 	.word	0xb8004000
 8002dec:	b4002000 	.word	0xb4002000
 8002df0:	ff7fffff 	.word	0xff7fffff
 8002df4:	feffffff 	.word	0xfeffffff
 8002df8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	2220      	movs	r2, #32
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e08:	2317      	movs	r3, #23
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2254      	movs	r2, #84	@ 0x54
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002e18:	2317      	movs	r3, #23
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	781b      	ldrb	r3, [r3, #0]
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b006      	add	sp, #24
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			@ (mov r8, r8)

08002e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	0002      	movs	r2, r0
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	1dfb      	adds	r3, r7, #7
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e3a:	d809      	bhi.n	8002e50 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3c:	1dfb      	adds	r3, r7, #7
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	001a      	movs	r2, r3
 8002e42:	231f      	movs	r3, #31
 8002e44:	401a      	ands	r2, r3
 8002e46:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <__NVIC_EnableIRQ+0x30>)
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4091      	lsls	r1, r2
 8002e4c:	000a      	movs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	0002      	movs	r2, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	1dfb      	adds	r3, r7, #7
 8002e68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e6a:	1dfb      	adds	r3, r7, #7
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e70:	d828      	bhi.n	8002ec4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e72:	4a2f      	ldr	r2, [pc, #188]	@ (8002f30 <__NVIC_SetPriority+0xd4>)
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	33c0      	adds	r3, #192	@ 0xc0
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	589b      	ldr	r3, [r3, r2]
 8002e82:	1dfa      	adds	r2, r7, #7
 8002e84:	7812      	ldrb	r2, [r2, #0]
 8002e86:	0011      	movs	r1, r2
 8002e88:	2203      	movs	r2, #3
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	00d2      	lsls	r2, r2, #3
 8002e8e:	21ff      	movs	r1, #255	@ 0xff
 8002e90:	4091      	lsls	r1, r2
 8002e92:	000a      	movs	r2, r1
 8002e94:	43d2      	mvns	r2, r2
 8002e96:	401a      	ands	r2, r3
 8002e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	22ff      	movs	r2, #255	@ 0xff
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	1dfb      	adds	r3, r7, #7
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	4003      	ands	r3, r0
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb0:	481f      	ldr	r0, [pc, #124]	@ (8002f30 <__NVIC_SetPriority+0xd4>)
 8002eb2:	1dfb      	adds	r3, r7, #7
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	33c0      	adds	r3, #192	@ 0xc0
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ec2:	e031      	b.n	8002f28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f34 <__NVIC_SetPriority+0xd8>)
 8002ec6:	1dfb      	adds	r3, r7, #7
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	0019      	movs	r1, r3
 8002ecc:	230f      	movs	r3, #15
 8002ece:	400b      	ands	r3, r1
 8002ed0:	3b08      	subs	r3, #8
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3306      	adds	r3, #6
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	18d3      	adds	r3, r2, r3
 8002eda:	3304      	adds	r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	1dfa      	adds	r2, r7, #7
 8002ee0:	7812      	ldrb	r2, [r2, #0]
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	00d2      	lsls	r2, r2, #3
 8002eea:	21ff      	movs	r1, #255	@ 0xff
 8002eec:	4091      	lsls	r1, r2
 8002eee:	000a      	movs	r2, r1
 8002ef0:	43d2      	mvns	r2, r2
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	22ff      	movs	r2, #255	@ 0xff
 8002efc:	401a      	ands	r2, r3
 8002efe:	1dfb      	adds	r3, r7, #7
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	0018      	movs	r0, r3
 8002f04:	2303      	movs	r3, #3
 8002f06:	4003      	ands	r3, r0
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f0c:	4809      	ldr	r0, [pc, #36]	@ (8002f34 <__NVIC_SetPriority+0xd8>)
 8002f0e:	1dfb      	adds	r3, r7, #7
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	001c      	movs	r4, r3
 8002f14:	230f      	movs	r3, #15
 8002f16:	4023      	ands	r3, r4
 8002f18:	3b08      	subs	r3, #8
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	3306      	adds	r3, #6
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	18c3      	adds	r3, r0, r3
 8002f24:	3304      	adds	r3, #4
 8002f26:	601a      	str	r2, [r3, #0]
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b003      	add	sp, #12
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	e000e100 	.word	0xe000e100
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	1e5a      	subs	r2, r3, #1
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	045b      	lsls	r3, r3, #17
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d301      	bcc.n	8002f50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e010      	b.n	8002f72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f50:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <SysTick_Config+0x44>)
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	3a01      	subs	r2, #1
 8002f56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f58:	2301      	movs	r3, #1
 8002f5a:	425b      	negs	r3, r3
 8002f5c:	2103      	movs	r1, #3
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff ff7c 	bl	8002e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <SysTick_Config+0x44>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6a:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <SysTick_Config+0x44>)
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b002      	add	sp, #8
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	e000e010 	.word	0xe000e010

08002f80 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	210f      	movs	r1, #15
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	1c02      	adds	r2, r0, #0
 8002f90:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	187b      	adds	r3, r7, r1
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff ff5d 	bl	8002e5c <__NVIC_SetPriority>
}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b004      	add	sp, #16
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b25b      	sxtb	r3, r3
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff ff33 	bl	8002e28 <__NVIC_EnableIRQ>
}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff ffaf 	bl	8002f38 <SysTick_Config>
 8002fda:	0003      	movs	r3, r0
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff2:	e147      	b.n	8003284 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4091      	lsls	r1, r2
 8002ffe:	000a      	movs	r2, r1
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d100      	bne.n	800300c <HAL_GPIO_Init+0x28>
 800300a:	e138      	b.n	800327e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2203      	movs	r2, #3
 8003012:	4013      	ands	r3, r2
 8003014:	2b01      	cmp	r3, #1
 8003016:	d005      	beq.n	8003024 <HAL_GPIO_Init+0x40>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2203      	movs	r2, #3
 800301e:	4013      	ands	r3, r2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d130      	bne.n	8003086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	409a      	lsls	r2, r3
 8003032:	0013      	movs	r3, r2
 8003034:	43da      	mvns	r2, r3
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	409a      	lsls	r2, r3
 8003046:	0013      	movs	r3, r2
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800305a:	2201      	movs	r2, #1
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
 8003060:	0013      	movs	r3, r2
 8003062:	43da      	mvns	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	2201      	movs	r2, #1
 8003072:	401a      	ands	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	4013      	ands	r3, r2
 800308e:	2b03      	cmp	r3, #3
 8003090:	d017      	beq.n	80030c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2203      	movs	r2, #3
 800309e:	409a      	lsls	r2, r3
 80030a0:	0013      	movs	r3, r2
 80030a2:	43da      	mvns	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	409a      	lsls	r2, r3
 80030b4:	0013      	movs	r3, r2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2203      	movs	r2, #3
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d123      	bne.n	8003116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	08da      	lsrs	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3208      	adds	r2, #8
 80030d6:	0092      	lsls	r2, r2, #2
 80030d8:	58d3      	ldr	r3, [r2, r3]
 80030da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2207      	movs	r2, #7
 80030e0:	4013      	ands	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	43da      	mvns	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2107      	movs	r1, #7
 80030fa:	400b      	ands	r3, r1
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	6939      	ldr	r1, [r7, #16]
 8003114:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	409a      	lsls	r2, r3
 8003124:	0013      	movs	r3, r2
 8003126:	43da      	mvns	r2, r3
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2203      	movs	r2, #3
 8003134:	401a      	ands	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	409a      	lsls	r2, r3
 800313c:	0013      	movs	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	23c0      	movs	r3, #192	@ 0xc0
 8003150:	029b      	lsls	r3, r3, #10
 8003152:	4013      	ands	r3, r2
 8003154:	d100      	bne.n	8003158 <HAL_GPIO_Init+0x174>
 8003156:	e092      	b.n	800327e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003158:	4a50      	ldr	r2, [pc, #320]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3318      	adds	r3, #24
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	589b      	ldr	r3, [r3, r2]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2203      	movs	r2, #3
 800316a:	4013      	ands	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	220f      	movs	r2, #15
 8003170:	409a      	lsls	r2, r3
 8003172:	0013      	movs	r3, r2
 8003174:	43da      	mvns	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	23a0      	movs	r3, #160	@ 0xa0
 8003180:	05db      	lsls	r3, r3, #23
 8003182:	429a      	cmp	r2, r3
 8003184:	d013      	beq.n	80031ae <HAL_GPIO_Init+0x1ca>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a45      	ldr	r2, [pc, #276]	@ (80032a0 <HAL_GPIO_Init+0x2bc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00d      	beq.n	80031aa <HAL_GPIO_Init+0x1c6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a44      	ldr	r2, [pc, #272]	@ (80032a4 <HAL_GPIO_Init+0x2c0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <HAL_GPIO_Init+0x1c2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a43      	ldr	r2, [pc, #268]	@ (80032a8 <HAL_GPIO_Init+0x2c4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_GPIO_Init+0x1be>
 800319e:	2303      	movs	r3, #3
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x1cc>
 80031a2:	2305      	movs	r3, #5
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x1cc>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x1cc>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x1cc>
 80031ae:	2300      	movs	r3, #0
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	2103      	movs	r1, #3
 80031b4:	400a      	ands	r2, r1
 80031b6:	00d2      	lsls	r2, r2, #3
 80031b8:	4093      	lsls	r3, r2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80031c0:	4936      	ldr	r1, [pc, #216]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3318      	adds	r3, #24
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ce:	4b33      	ldr	r3, [pc, #204]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	2380      	movs	r3, #128	@ 0x80
 80031e4:	035b      	lsls	r3, r3, #13
 80031e6:	4013      	ands	r3, r2
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031f2:	4b2a      	ldr	r3, [pc, #168]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80031f8:	4b28      	ldr	r3, [pc, #160]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	43da      	mvns	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	039b      	lsls	r3, r3, #14
 8003210:	4013      	ands	r3, r2
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800321c:	4b1f      	ldr	r3, [pc, #124]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003222:	4a1e      	ldr	r2, [pc, #120]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 8003224:	2384      	movs	r3, #132	@ 0x84
 8003226:	58d3      	ldr	r3, [r2, r3]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43da      	mvns	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	2380      	movs	r3, #128	@ 0x80
 800323a:	029b      	lsls	r3, r3, #10
 800323c:	4013      	ands	r3, r2
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003248:	4914      	ldr	r1, [pc, #80]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 800324a:	2284      	movs	r2, #132	@ 0x84
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003250:	4a12      	ldr	r2, [pc, #72]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	58d3      	ldr	r3, [r2, r3]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43da      	mvns	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	025b      	lsls	r3, r3, #9
 800326a:	4013      	ands	r3, r2
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003276:	4909      	ldr	r1, [pc, #36]	@ (800329c <HAL_GPIO_Init+0x2b8>)
 8003278:	2280      	movs	r2, #128	@ 0x80
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	3301      	adds	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	40da      	lsrs	r2, r3
 800328c:	1e13      	subs	r3, r2, #0
 800328e:	d000      	beq.n	8003292 <HAL_GPIO_Init+0x2ae>
 8003290:	e6b0      	b.n	8002ff4 <HAL_GPIO_Init+0x10>
  }
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46c0      	nop			@ (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b006      	add	sp, #24
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021800 	.word	0x40021800
 80032a0:	50000400 	.word	0x50000400
 80032a4:	50000800 	.word	0x50000800
 80032a8:	50000c00 	.word	0x50000c00

080032ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80032ba:	e0b4      	b.n	8003426 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80032bc:	2201      	movs	r2, #1
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	409a      	lsls	r2, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d100      	bne.n	80032d0 <HAL_GPIO_DeInit+0x24>
 80032ce:	e0a7      	b.n	8003420 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80032d0:	4a5a      	ldr	r2, [pc, #360]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3318      	adds	r3, #24
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	589b      	ldr	r3, [r3, r2]
 80032dc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2203      	movs	r2, #3
 80032e2:	4013      	ands	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	220f      	movs	r2, #15
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	23a0      	movs	r3, #160	@ 0xa0
 80032f4:	05db      	lsls	r3, r3, #23
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d013      	beq.n	8003322 <HAL_GPIO_DeInit+0x76>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a50      	ldr	r2, [pc, #320]	@ (8003440 <HAL_GPIO_DeInit+0x194>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00d      	beq.n	800331e <HAL_GPIO_DeInit+0x72>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4f      	ldr	r2, [pc, #316]	@ (8003444 <HAL_GPIO_DeInit+0x198>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <HAL_GPIO_DeInit+0x6e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4e      	ldr	r2, [pc, #312]	@ (8003448 <HAL_GPIO_DeInit+0x19c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_GPIO_DeInit+0x6a>
 8003312:	2303      	movs	r3, #3
 8003314:	e006      	b.n	8003324 <HAL_GPIO_DeInit+0x78>
 8003316:	2305      	movs	r3, #5
 8003318:	e004      	b.n	8003324 <HAL_GPIO_DeInit+0x78>
 800331a:	2302      	movs	r3, #2
 800331c:	e002      	b.n	8003324 <HAL_GPIO_DeInit+0x78>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_GPIO_DeInit+0x78>
 8003322:	2300      	movs	r3, #0
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	2103      	movs	r1, #3
 8003328:	400a      	ands	r2, r1
 800332a:	00d2      	lsls	r2, r2, #3
 800332c:	4093      	lsls	r3, r2
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d136      	bne.n	80033a2 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003334:	4a41      	ldr	r2, [pc, #260]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	58d3      	ldr	r3, [r2, r3]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	43d2      	mvns	r2, r2
 800333e:	493f      	ldr	r1, [pc, #252]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 8003340:	4013      	ands	r3, r2
 8003342:	2280      	movs	r2, #128	@ 0x80
 8003344:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003346:	4a3d      	ldr	r2, [pc, #244]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 8003348:	2384      	movs	r3, #132	@ 0x84
 800334a:	58d3      	ldr	r3, [r2, r3]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	43d2      	mvns	r2, r2
 8003350:	493a      	ldr	r1, [pc, #232]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 8003352:	4013      	ands	r3, r2
 8003354:	2284      	movs	r2, #132	@ 0x84
 8003356:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003358:	4b38      	ldr	r3, [pc, #224]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	43d9      	mvns	r1, r3
 8003360:	4b36      	ldr	r3, [pc, #216]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 8003362:	400a      	ands	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003366:	4b35      	ldr	r3, [pc, #212]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43d9      	mvns	r1, r3
 800336e:	4b33      	ldr	r3, [pc, #204]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2203      	movs	r2, #3
 8003378:	4013      	ands	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	220f      	movs	r2, #15
 800337e:	409a      	lsls	r2, r3
 8003380:	0013      	movs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003384:	4a2d      	ldr	r2, [pc, #180]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3318      	adds	r3, #24
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	589a      	ldr	r2, [r3, r2]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43d9      	mvns	r1, r3
 8003394:	4829      	ldr	r0, [pc, #164]	@ (800343c <HAL_GPIO_DeInit+0x190>)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	400a      	ands	r2, r1
 800339c:	3318      	adds	r3, #24
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2103      	movs	r1, #3
 80033ac:	4099      	lsls	r1, r3
 80033ae:	000b      	movs	r3, r1
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	08da      	lsrs	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3208      	adds	r2, #8
 80033be:	0092      	lsls	r2, r2, #2
 80033c0:	58d3      	ldr	r3, [r2, r3]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	2107      	movs	r1, #7
 80033c6:	400a      	ands	r2, r1
 80033c8:	0092      	lsls	r2, r2, #2
 80033ca:	210f      	movs	r1, #15
 80033cc:	4091      	lsls	r1, r2
 80033ce:	000a      	movs	r2, r1
 80033d0:	43d1      	mvns	r1, r2
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	08d2      	lsrs	r2, r2, #3
 80033d6:	4019      	ands	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	0052      	lsls	r2, r2, #1
 80033e8:	2103      	movs	r1, #3
 80033ea:	4091      	lsls	r1, r2
 80033ec:	000a      	movs	r2, r1
 80033ee:	43d2      	mvns	r2, r2
 80033f0:	401a      	ands	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2101      	movs	r1, #1
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4091      	lsls	r1, r2
 8003400:	000a      	movs	r2, r1
 8003402:	43d2      	mvns	r2, r2
 8003404:	401a      	ands	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	0052      	lsls	r2, r2, #1
 8003412:	2103      	movs	r1, #3
 8003414:	4091      	lsls	r1, r2
 8003416:	000a      	movs	r2, r1
 8003418:	43d2      	mvns	r2, r2
 800341a:	401a      	ands	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3301      	adds	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	40da      	lsrs	r2, r3
 800342c:	1e13      	subs	r3, r2, #0
 800342e:	d000      	beq.n	8003432 <HAL_GPIO_DeInit+0x186>
 8003430:	e744      	b.n	80032bc <HAL_GPIO_DeInit+0x10>
  }
}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b006      	add	sp, #24
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021800 	.word	0x40021800
 8003440:	50000400 	.word	0x50000400
 8003444:	50000800 	.word	0x50000800
 8003448:	50000c00 	.word	0x50000c00

0800344c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	000a      	movs	r2, r1
 8003456:	1cbb      	adds	r3, r7, #2
 8003458:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	1cba      	adds	r2, r7, #2
 8003460:	8812      	ldrh	r2, [r2, #0]
 8003462:	4013      	ands	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003466:	230f      	movs	r3, #15
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e003      	b.n	8003478 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003470:	230f      	movs	r3, #15
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003478:	230f      	movs	r3, #15
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	781b      	ldrb	r3, [r3, #0]
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	0008      	movs	r0, r1
 8003490:	0011      	movs	r1, r2
 8003492:	1cbb      	adds	r3, r7, #2
 8003494:	1c02      	adds	r2, r0, #0
 8003496:	801a      	strh	r2, [r3, #0]
 8003498:	1c7b      	adds	r3, r7, #1
 800349a:	1c0a      	adds	r2, r1, #0
 800349c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800349e:	1c7b      	adds	r3, r7, #1
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034a6:	1cbb      	adds	r3, r7, #2
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034ae:	e003      	b.n	80034b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034b0:	1cbb      	adds	r3, r7, #2
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	0002      	movs	r2, r0
 80034c8:	1dbb      	adds	r3, r7, #6
 80034ca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80034cc:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	1dba      	adds	r2, r7, #6
 80034d2:	8812      	ldrh	r2, [r2, #0]
 80034d4:	4013      	ands	r3, r2
 80034d6:	d008      	beq.n	80034ea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80034d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80034da:	1dba      	adds	r2, r7, #6
 80034dc:	8812      	ldrh	r2, [r2, #0]
 80034de:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80034e0:	1dbb      	adds	r3, r7, #6
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f003 f959 	bl	800679c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80034ea:	4b09      	ldr	r3, [pc, #36]	@ (8003510 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	1dba      	adds	r2, r7, #6
 80034f0:	8812      	ldrh	r2, [r2, #0]
 80034f2:	4013      	ands	r3, r2
 80034f4:	d008      	beq.n	8003508 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80034f8:	1dba      	adds	r2, r7, #6
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80034fe:	1dbb      	adds	r3, r7, #6
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	0018      	movs	r0, r3
 8003504:	f000 f806 	bl	8003514 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021800 	.word	0x40021800

08003514 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	0002      	movs	r2, r0
 800351c:	1dbb      	adds	r3, r7, #6
 800351e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e08f      	b.n	800365a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2241      	movs	r2, #65	@ 0x41
 800353e:	5c9b      	ldrb	r3, [r3, r2]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d107      	bne.n	8003556 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2240      	movs	r2, #64	@ 0x40
 800354a:	2100      	movs	r1, #0
 800354c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0018      	movs	r0, r3
 8003552:	f003 fa65 	bl	8006a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2241      	movs	r2, #65	@ 0x41
 800355a:	2124      	movs	r1, #36	@ 0x24
 800355c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	438a      	bics	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	493b      	ldr	r1, [pc, #236]	@ (8003664 <HAL_I2C_Init+0x13c>)
 8003578:	400a      	ands	r2, r1
 800357a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4938      	ldr	r1, [pc, #224]	@ (8003668 <HAL_I2C_Init+0x140>)
 8003588:	400a      	ands	r2, r1
 800358a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d108      	bne.n	80035a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2180      	movs	r1, #128	@ 0x80
 800359e:	0209      	lsls	r1, r1, #8
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	e007      	b.n	80035b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2184      	movs	r1, #132	@ 0x84
 80035b0:	0209      	lsls	r1, r1, #8
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d109      	bne.n	80035d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2180      	movs	r1, #128	@ 0x80
 80035ca:	0109      	lsls	r1, r1, #4
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	e007      	b.n	80035e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4923      	ldr	r1, [pc, #140]	@ (800366c <HAL_I2C_Init+0x144>)
 80035de:	400a      	ands	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4920      	ldr	r1, [pc, #128]	@ (8003670 <HAL_I2C_Init+0x148>)
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	491a      	ldr	r1, [pc, #104]	@ (8003668 <HAL_I2C_Init+0x140>)
 80035fe:	400a      	ands	r2, r1
 8003600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	431a      	orrs	r2, r3
 800360c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2241      	movs	r2, #65	@ 0x41
 8003646:	2120      	movs	r1, #32
 8003648:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2242      	movs	r2, #66	@ 0x42
 8003654:	2100      	movs	r1, #0
 8003656:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b002      	add	sp, #8
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	f0ffffff 	.word	0xf0ffffff
 8003668:	ffff7fff 	.word	0xffff7fff
 800366c:	fffff7ff 	.word	0xfffff7ff
 8003670:	02008000 	.word	0x02008000

08003674 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b089      	sub	sp, #36	@ 0x24
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	000c      	movs	r4, r1
 800367e:	0010      	movs	r0, r2
 8003680:	0019      	movs	r1, r3
 8003682:	230a      	movs	r3, #10
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	1c22      	adds	r2, r4, #0
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	2308      	movs	r3, #8
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	1c02      	adds	r2, r0, #0
 8003690:	801a      	strh	r2, [r3, #0]
 8003692:	1dbb      	adds	r3, r7, #6
 8003694:	1c0a      	adds	r2, r1, #0
 8003696:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2241      	movs	r2, #65	@ 0x41
 800369c:	5c9b      	ldrb	r3, [r3, r2]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d000      	beq.n	80036a6 <HAL_I2C_Mem_Write+0x32>
 80036a4:	e10c      	b.n	80038c0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_I2C_Mem_Write+0x42>
 80036ac:	232c      	movs	r3, #44	@ 0x2c
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2280      	movs	r2, #128	@ 0x80
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0ff      	b.n	80038c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2240      	movs	r2, #64	@ 0x40
 80036c6:	5c9b      	ldrb	r3, [r3, r2]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_I2C_Mem_Write+0x5c>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0f8      	b.n	80038c2 <HAL_I2C_Mem_Write+0x24e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2240      	movs	r2, #64	@ 0x40
 80036d4:	2101      	movs	r1, #1
 80036d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036d8:	f7fe fefa 	bl	80024d0 <HAL_GetTick>
 80036dc:	0003      	movs	r3, r0
 80036de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	0219      	lsls	r1, r3, #8
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2319      	movs	r3, #25
 80036ec:	2201      	movs	r2, #1
 80036ee:	f000 fb0b 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0e3      	b.n	80038c2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2241      	movs	r2, #65	@ 0x41
 80036fe:	2121      	movs	r1, #33	@ 0x21
 8003700:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2242      	movs	r2, #66	@ 0x42
 8003706:	2140      	movs	r1, #64	@ 0x40
 8003708:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	222c      	movs	r2, #44	@ 0x2c
 800371a:	18ba      	adds	r2, r7, r2
 800371c:	8812      	ldrh	r2, [r2, #0]
 800371e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003726:	1dbb      	adds	r3, r7, #6
 8003728:	881c      	ldrh	r4, [r3, #0]
 800372a:	2308      	movs	r3, #8
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	881a      	ldrh	r2, [r3, #0]
 8003730:	230a      	movs	r3, #10
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	8819      	ldrh	r1, [r3, #0]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	0023      	movs	r3, r4
 8003742:	f000 f9f9 	bl	8003b38 <I2C_RequestMemoryWrite>
 8003746:	1e03      	subs	r3, r0, #0
 8003748:	d005      	beq.n	8003756 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2240      	movs	r2, #64	@ 0x40
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0b5      	b.n	80038c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	2bff      	cmp	r3, #255	@ 0xff
 800375e:	d911      	bls.n	8003784 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	22ff      	movs	r2, #255	@ 0xff
 8003764:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376a:	b2da      	uxtb	r2, r3
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	045c      	lsls	r4, r3, #17
 8003770:	230a      	movs	r3, #10
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	8819      	ldrh	r1, [r3, #0]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	2300      	movs	r3, #0
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	0023      	movs	r3, r4
 800377e:	f000 fc9d 	bl	80040bc <I2C_TransferConfig>
 8003782:	e012      	b.n	80037aa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003792:	b2da      	uxtb	r2, r3
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	049c      	lsls	r4, r3, #18
 8003798:	230a      	movs	r3, #10
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	8819      	ldrh	r1, [r3, #0]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	2300      	movs	r3, #0
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	0023      	movs	r3, r4
 80037a6:	f000 fc89 	bl	80040bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 fb01 	bl	8003db8 <I2C_WaitOnTXISFlagUntilTimeout>
 80037b6:	1e03      	subs	r3, r0, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e081      	b.n	80038c2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03a      	beq.n	800386e <HAL_I2C_Mem_Write+0x1fa>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d136      	bne.n	800386e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	0013      	movs	r3, r2
 800380a:	2200      	movs	r2, #0
 800380c:	2180      	movs	r1, #128	@ 0x80
 800380e:	f000 fa7b 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e053      	b.n	80038c2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	2bff      	cmp	r3, #255	@ 0xff
 8003822:	d911      	bls.n	8003848 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	22ff      	movs	r2, #255	@ 0xff
 8003828:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	b2da      	uxtb	r2, r3
 8003830:	2380      	movs	r3, #128	@ 0x80
 8003832:	045c      	lsls	r4, r3, #17
 8003834:	230a      	movs	r3, #10
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	8819      	ldrh	r1, [r3, #0]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	2300      	movs	r3, #0
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	0023      	movs	r3, r4
 8003842:	f000 fc3b 	bl	80040bc <I2C_TransferConfig>
 8003846:	e012      	b.n	800386e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003856:	b2da      	uxtb	r2, r3
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	049c      	lsls	r4, r3, #18
 800385c:	230a      	movs	r3, #10
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	8819      	ldrh	r1, [r3, #0]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	0023      	movs	r3, r4
 800386a:	f000 fc27 	bl	80040bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d198      	bne.n	80037aa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	0018      	movs	r0, r3
 8003880:	f000 fae0 	bl	8003e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e01a      	b.n	80038c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2220      	movs	r2, #32
 8003892:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	490b      	ldr	r1, [pc, #44]	@ (80038cc <HAL_I2C_Mem_Write+0x258>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2241      	movs	r2, #65	@ 0x41
 80038a8:	2120      	movs	r1, #32
 80038aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2242      	movs	r2, #66	@ 0x42
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2240      	movs	r2, #64	@ 0x40
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b007      	add	sp, #28
 80038c8:	bd90      	pop	{r4, r7, pc}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	fe00e800 	.word	0xfe00e800

080038d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b089      	sub	sp, #36	@ 0x24
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	000c      	movs	r4, r1
 80038da:	0010      	movs	r0, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	230a      	movs	r3, #10
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	1c22      	adds	r2, r4, #0
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	2308      	movs	r3, #8
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	1c02      	adds	r2, r0, #0
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	1dbb      	adds	r3, r7, #6
 80038f0:	1c0a      	adds	r2, r1, #0
 80038f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2241      	movs	r2, #65	@ 0x41
 80038f8:	5c9b      	ldrb	r3, [r3, r2]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d000      	beq.n	8003902 <HAL_I2C_Mem_Read+0x32>
 8003900:	e110      	b.n	8003b24 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d004      	beq.n	8003912 <HAL_I2C_Mem_Read+0x42>
 8003908:	232c      	movs	r3, #44	@ 0x2c
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d105      	bne.n	800391e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2280      	movs	r2, #128	@ 0x80
 8003916:	0092      	lsls	r2, r2, #2
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e103      	b.n	8003b26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2240      	movs	r2, #64	@ 0x40
 8003922:	5c9b      	ldrb	r3, [r3, r2]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_I2C_Mem_Read+0x5c>
 8003928:	2302      	movs	r3, #2
 800392a:	e0fc      	b.n	8003b26 <HAL_I2C_Mem_Read+0x256>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2240      	movs	r2, #64	@ 0x40
 8003930:	2101      	movs	r1, #1
 8003932:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003934:	f7fe fdcc 	bl	80024d0 <HAL_GetTick>
 8003938:	0003      	movs	r3, r0
 800393a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	0219      	lsls	r1, r3, #8
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2319      	movs	r3, #25
 8003948:	2201      	movs	r2, #1
 800394a:	f000 f9dd 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 800394e:	1e03      	subs	r3, r0, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0e7      	b.n	8003b26 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2241      	movs	r2, #65	@ 0x41
 800395a:	2122      	movs	r1, #34	@ 0x22
 800395c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2242      	movs	r2, #66	@ 0x42
 8003962:	2140      	movs	r1, #64	@ 0x40
 8003964:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	222c      	movs	r2, #44	@ 0x2c
 8003976:	18ba      	adds	r2, r7, r2
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003982:	1dbb      	adds	r3, r7, #6
 8003984:	881c      	ldrh	r4, [r3, #0]
 8003986:	2308      	movs	r3, #8
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	230a      	movs	r3, #10
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	8819      	ldrh	r1, [r3, #0]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	0023      	movs	r3, r4
 800399e:	f000 f92f 	bl	8003c00 <I2C_RequestMemoryRead>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2240      	movs	r2, #64	@ 0x40
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0b9      	b.n	8003b26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2bff      	cmp	r3, #255	@ 0xff
 80039ba:	d911      	bls.n	80039e0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	22ff      	movs	r2, #255	@ 0xff
 80039c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	045c      	lsls	r4, r3, #17
 80039cc:	230a      	movs	r3, #10
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	8819      	ldrh	r1, [r3, #0]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	4b56      	ldr	r3, [pc, #344]	@ (8003b30 <HAL_I2C_Mem_Read+0x260>)
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	0023      	movs	r3, r4
 80039da:	f000 fb6f 	bl	80040bc <I2C_TransferConfig>
 80039de:	e012      	b.n	8003a06 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	049c      	lsls	r4, r3, #18
 80039f4:	230a      	movs	r3, #10
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	8819      	ldrh	r1, [r3, #0]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003b30 <HAL_I2C_Mem_Read+0x260>)
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	0023      	movs	r3, r4
 8003a02:	f000 fb5b 	bl	80040bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	0013      	movs	r3, r2
 8003a10:	2200      	movs	r2, #0
 8003a12:	2104      	movs	r1, #4
 8003a14:	f000 f978 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	1e03      	subs	r3, r0, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e082      	b.n	8003b26 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d03a      	beq.n	8003ad2 <HAL_I2C_Mem_Read+0x202>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d136      	bne.n	8003ad2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2180      	movs	r1, #128	@ 0x80
 8003a72:	f000 f949 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e053      	b.n	8003b26 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2bff      	cmp	r3, #255	@ 0xff
 8003a86:	d911      	bls.n	8003aac <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	22ff      	movs	r2, #255	@ 0xff
 8003a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	045c      	lsls	r4, r3, #17
 8003a98:	230a      	movs	r3, #10
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	8819      	ldrh	r1, [r3, #0]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	0023      	movs	r3, r4
 8003aa6:	f000 fb09 	bl	80040bc <I2C_TransferConfig>
 8003aaa:	e012      	b.n	8003ad2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	049c      	lsls	r4, r3, #18
 8003ac0:	230a      	movs	r3, #10
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	8819      	ldrh	r1, [r3, #0]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	0023      	movs	r3, r4
 8003ace:	f000 faf5 	bl	80040bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d194      	bne.n	8003a06 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 f9ae 	bl	8003e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e01a      	b.n	8003b26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2220      	movs	r2, #32
 8003af6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	490c      	ldr	r1, [pc, #48]	@ (8003b34 <HAL_I2C_Mem_Read+0x264>)
 8003b04:	400a      	ands	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2241      	movs	r2, #65	@ 0x41
 8003b0c:	2120      	movs	r1, #32
 8003b0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2242      	movs	r2, #66	@ 0x42
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2240      	movs	r2, #64	@ 0x40
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	0018      	movs	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b007      	add	sp, #28
 8003b2c:	bd90      	pop	{r4, r7, pc}
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	80002400 	.word	0x80002400
 8003b34:	fe00e800 	.word	0xfe00e800

08003b38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	000c      	movs	r4, r1
 8003b42:	0010      	movs	r0, r2
 8003b44:	0019      	movs	r1, r3
 8003b46:	250a      	movs	r5, #10
 8003b48:	197b      	adds	r3, r7, r5
 8003b4a:	1c22      	adds	r2, r4, #0
 8003b4c:	801a      	strh	r2, [r3, #0]
 8003b4e:	2308      	movs	r3, #8
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	1c02      	adds	r2, r0, #0
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	1c0a      	adds	r2, r1, #0
 8003b5a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b5c:	1dbb      	adds	r3, r7, #6
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	045c      	lsls	r4, r3, #17
 8003b66:	197b      	adds	r3, r7, r5
 8003b68:	8819      	ldrh	r1, [r3, #0]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	4b23      	ldr	r3, [pc, #140]	@ (8003bfc <I2C_RequestMemoryWrite+0xc4>)
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	0023      	movs	r3, r4
 8003b72:	f000 faa3 	bl	80040bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b78:	6a39      	ldr	r1, [r7, #32]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f000 f91b 	bl	8003db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b82:	1e03      	subs	r3, r0, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e033      	b.n	8003bf2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b8a:	1dbb      	adds	r3, r7, #6
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b92:	2308      	movs	r3, #8
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ba0:	e019      	b.n	8003bd6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb6:	6a39      	ldr	r1, [r7, #32]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f000 f8fc 	bl	8003db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc0:	1e03      	subs	r3, r0, #0
 8003bc2:	d001      	beq.n	8003bc8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e014      	b.n	8003bf2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bc8:	2308      	movs	r3, #8
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	0013      	movs	r3, r2
 8003be0:	2200      	movs	r2, #0
 8003be2:	2180      	movs	r1, #128	@ 0x80
 8003be4:	f000 f890 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d001      	beq.n	8003bf0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b004      	add	sp, #16
 8003bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	80002000 	.word	0x80002000

08003c00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c00:	b5b0      	push	{r4, r5, r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	000c      	movs	r4, r1
 8003c0a:	0010      	movs	r0, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	250a      	movs	r5, #10
 8003c10:	197b      	adds	r3, r7, r5
 8003c12:	1c22      	adds	r2, r4, #0
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	2308      	movs	r3, #8
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	1c02      	adds	r2, r0, #0
 8003c1c:	801a      	strh	r2, [r3, #0]
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	1c0a      	adds	r2, r1, #0
 8003c22:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	197b      	adds	r3, r7, r5
 8003c2c:	8819      	ldrh	r1, [r3, #0]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	4b23      	ldr	r3, [pc, #140]	@ (8003cc0 <I2C_RequestMemoryRead+0xc0>)
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	f000 fa41 	bl	80040bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3c:	6a39      	ldr	r1, [r7, #32]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 f8b9 	bl	8003db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c46:	1e03      	subs	r3, r0, #0
 8003c48:	d001      	beq.n	8003c4e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e033      	b.n	8003cb6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c4e:	1dbb      	adds	r3, r7, #6
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d107      	bne.n	8003c66 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c56:	2308      	movs	r3, #8
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c64:	e019      	b.n	8003c9a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c66:	2308      	movs	r3, #8
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7a:	6a39      	ldr	r1, [r7, #32]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 f89a 	bl	8003db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c84:	1e03      	subs	r3, r0, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e014      	b.n	8003cb6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9a:	6a3a      	ldr	r2, [r7, #32]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	0013      	movs	r3, r2
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2140      	movs	r1, #64	@ 0x40
 8003ca8:	f000 f82e 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003cac:	1e03      	subs	r3, r0, #0
 8003cae:	d001      	beq.n	8003cb4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b004      	add	sp, #16
 8003cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	80002000 	.word	0x80002000

08003cc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d103      	bne.n	8003ce2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d007      	beq.n	8003d00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	619a      	str	r2, [r3, #24]
  }
}
 8003d00:	46c0      	nop			@ (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	1dfb      	adds	r3, r7, #7
 8003d16:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d18:	e03a      	b.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f000 f8d3 	bl	8003ecc <I2C_IsErrorOccurred>
 8003d26:	1e03      	subs	r3, r0, #0
 8003d28:	d001      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e040      	b.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	3301      	adds	r3, #1
 8003d32:	d02d      	beq.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d34:	f7fe fbcc 	bl	80024d0 <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d122      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	425a      	negs	r2, r3
 8003d5a:	4153      	adcs	r3, r2
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	001a      	movs	r2, r3
 8003d60:	1dfb      	adds	r3, r7, #7
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d113      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2241      	movs	r2, #65	@ 0x41
 8003d78:	2120      	movs	r1, #32
 8003d7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2242      	movs	r2, #66	@ 0x42
 8003d80:	2100      	movs	r1, #0
 8003d82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2240      	movs	r2, #64	@ 0x40
 8003d88:	2100      	movs	r1, #0
 8003d8a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e00f      	b.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	425a      	negs	r2, r3
 8003da0:	4153      	adcs	r3, r2
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	001a      	movs	r2, r3
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d0b5      	beq.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b004      	add	sp, #16
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc4:	e032      	b.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 f87d 	bl	8003ecc <I2C_IsErrorOccurred>
 8003dd2:	1e03      	subs	r3, r0, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e030      	b.n	8003e3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	d025      	beq.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de0:	f7fe fb76 	bl	80024d0 <HAL_GetTick>
 8003de4:	0002      	movs	r2, r0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11a      	bne.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d013      	beq.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e08:	2220      	movs	r2, #32
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2241      	movs	r2, #65	@ 0x41
 8003e14:	2120      	movs	r1, #32
 8003e16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2242      	movs	r2, #66	@ 0x42
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2240      	movs	r2, #64	@ 0x40
 8003e24:	2100      	movs	r1, #0
 8003e26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2202      	movs	r2, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d1c5      	bne.n	8003dc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b004      	add	sp, #16
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e50:	e02f      	b.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f000 f837 	bl	8003ecc <I2C_IsErrorOccurred>
 8003e5e:	1e03      	subs	r3, r0, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e02d      	b.n	8003ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e66:	f7fe fb33 	bl	80024d0 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11a      	bne.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2220      	movs	r2, #32
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d013      	beq.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	2220      	movs	r2, #32
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2241      	movs	r2, #65	@ 0x41
 8003e9a:	2120      	movs	r1, #32
 8003e9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2242      	movs	r2, #66	@ 0x42
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2240      	movs	r2, #64	@ 0x40
 8003eaa:	2100      	movs	r1, #0
 8003eac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e007      	b.n	8003ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d1c8      	bne.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b004      	add	sp, #16
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	@ 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2327      	movs	r3, #39	@ 0x27
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d100      	bne.n	8003efa <I2C_IsErrorOccurred+0x2e>
 8003ef8:	e079      	b.n	8003fee <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2210      	movs	r2, #16
 8003f00:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f02:	e057      	b.n	8003fb4 <I2C_IsErrorOccurred+0xe8>
 8003f04:	2227      	movs	r2, #39	@ 0x27
 8003f06:	18bb      	adds	r3, r7, r2
 8003f08:	18ba      	adds	r2, r7, r2
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	3301      	adds	r3, #1
 8003f12:	d04f      	beq.n	8003fb4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f14:	f7fe fadc 	bl	80024d0 <HAL_GetTick>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d302      	bcc.n	8003f2a <I2C_IsErrorOccurred+0x5e>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d144      	bne.n	8003fb4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	01db      	lsls	r3, r3, #7
 8003f34:	4013      	ands	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f38:	2013      	movs	r0, #19
 8003f3a:	183b      	adds	r3, r7, r0
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	2142      	movs	r1, #66	@ 0x42
 8003f40:	5c52      	ldrb	r2, [r2, r1]
 8003f42:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	2380      	movs	r3, #128	@ 0x80
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	401a      	ands	r2, r3
 8003f50:	2380      	movs	r3, #128	@ 0x80
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d126      	bne.n	8003fa6 <I2C_IsErrorOccurred+0xda>
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	2380      	movs	r3, #128	@ 0x80
 8003f5c:	01db      	lsls	r3, r3, #7
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d021      	beq.n	8003fa6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003f62:	183b      	adds	r3, r7, r0
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d01d      	beq.n	8003fa6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2180      	movs	r1, #128	@ 0x80
 8003f76:	01c9      	lsls	r1, r1, #7
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f7c:	f7fe faa8 	bl	80024d0 <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f84:	e00f      	b.n	8003fa6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f86:	f7fe faa3 	bl	80024d0 <HAL_GetTick>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b19      	cmp	r3, #25
 8003f92:	d908      	bls.n	8003fa6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	2220      	movs	r2, #32
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f9c:	2327      	movs	r3, #39	@ 0x27
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]

              break;
 8003fa4:	e006      	b.n	8003fb4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2220      	movs	r2, #32
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d1e8      	bne.n	8003f86 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d004      	beq.n	8003fcc <I2C_IsErrorOccurred+0x100>
 8003fc2:	2327      	movs	r3, #39	@ 0x27
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d09b      	beq.n	8003f04 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fcc:	2327      	movs	r3, #39	@ 0x27
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fe6:	2327      	movs	r3, #39	@ 0x27
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	2201      	movs	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d00c      	beq.n	800401a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	2201      	movs	r2, #1
 8004004:	4313      	orrs	r3, r2
 8004006:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2280      	movs	r2, #128	@ 0x80
 800400e:	0052      	lsls	r2, r2, #1
 8004010:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004012:	2327      	movs	r3, #39	@ 0x27
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4013      	ands	r3, r2
 8004022:	d00c      	beq.n	800403e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	2208      	movs	r2, #8
 8004028:	4313      	orrs	r3, r2
 800402a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2280      	movs	r2, #128	@ 0x80
 8004032:	00d2      	lsls	r2, r2, #3
 8004034:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004036:	2327      	movs	r3, #39	@ 0x27
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	2380      	movs	r3, #128	@ 0x80
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4013      	ands	r3, r2
 8004046:	d00c      	beq.n	8004062 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	2202      	movs	r2, #2
 800404c:	4313      	orrs	r3, r2
 800404e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2280      	movs	r2, #128	@ 0x80
 8004056:	0092      	lsls	r2, r2, #2
 8004058:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800405a:	2327      	movs	r3, #39	@ 0x27
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004062:	2327      	movs	r3, #39	@ 0x27
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01d      	beq.n	80040a8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	0018      	movs	r0, r3
 8004070:	f7ff fe28 	bl	8003cc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	490e      	ldr	r1, [pc, #56]	@ (80040b8 <I2C_IsErrorOccurred+0x1ec>)
 8004080:	400a      	ands	r2, r1
 8004082:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	431a      	orrs	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2241      	movs	r2, #65	@ 0x41
 8004094:	2120      	movs	r1, #32
 8004096:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2242      	movs	r2, #66	@ 0x42
 800409c:	2100      	movs	r1, #0
 800409e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2240      	movs	r2, #64	@ 0x40
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80040a8:	2327      	movs	r3, #39	@ 0x27
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b00a      	add	sp, #40	@ 0x28
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	fe00e800 	.word	0xfe00e800

080040bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	0008      	movs	r0, r1
 80040c6:	0011      	movs	r1, r2
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	240a      	movs	r4, #10
 80040cc:	193b      	adds	r3, r7, r4
 80040ce:	1c02      	adds	r2, r0, #0
 80040d0:	801a      	strh	r2, [r3, #0]
 80040d2:	2009      	movs	r0, #9
 80040d4:	183b      	adds	r3, r7, r0
 80040d6:	1c0a      	adds	r2, r1, #0
 80040d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040da:	193b      	adds	r3, r7, r4
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	059b      	lsls	r3, r3, #22
 80040e0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040e2:	183b      	adds	r3, r7, r0
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	0419      	lsls	r1, r3, #16
 80040e8:	23ff      	movs	r3, #255	@ 0xff
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f6:	4313      	orrs	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004106:	0d51      	lsrs	r1, r2, #21
 8004108:	2280      	movs	r2, #128	@ 0x80
 800410a:	00d2      	lsls	r2, r2, #3
 800410c:	400a      	ands	r2, r1
 800410e:	4907      	ldr	r1, [pc, #28]	@ (800412c <I2C_TransferConfig+0x70>)
 8004110:	430a      	orrs	r2, r1
 8004112:	43d2      	mvns	r2, r2
 8004114:	401a      	ands	r2, r3
 8004116:	0011      	movs	r1, r2
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	46bd      	mov	sp, r7
 8004126:	b007      	add	sp, #28
 8004128:	bd90      	pop	{r4, r7, pc}
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	03ff63ff 	.word	0x03ff63ff

08004130 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2241      	movs	r2, #65	@ 0x41
 800413e:	5c9b      	ldrb	r3, [r3, r2]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	d138      	bne.n	80041b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2240      	movs	r2, #64	@ 0x40
 800414a:	5c9b      	ldrb	r3, [r3, r2]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004150:	2302      	movs	r3, #2
 8004152:	e032      	b.n	80041ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2240      	movs	r2, #64	@ 0x40
 8004158:	2101      	movs	r1, #1
 800415a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2241      	movs	r2, #65	@ 0x41
 8004160:	2124      	movs	r1, #36	@ 0x24
 8004162:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2101      	movs	r1, #1
 8004170:	438a      	bics	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4911      	ldr	r1, [pc, #68]	@ (80041c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004180:	400a      	ands	r2, r1
 8004182:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6819      	ldr	r1, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2101      	movs	r1, #1
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2241      	movs	r2, #65	@ 0x41
 80041a8:	2120      	movs	r1, #32
 80041aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2240      	movs	r2, #64	@ 0x40
 80041b0:	2100      	movs	r1, #0
 80041b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b002      	add	sp, #8
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	ffffefff 	.word	0xffffefff

080041c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2241      	movs	r2, #65	@ 0x41
 80041d6:	5c9b      	ldrb	r3, [r3, r2]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d139      	bne.n	8004252 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2240      	movs	r2, #64	@ 0x40
 80041e2:	5c9b      	ldrb	r3, [r3, r2]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e033      	b.n	8004254 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2240      	movs	r2, #64	@ 0x40
 80041f0:	2101      	movs	r1, #1
 80041f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2241      	movs	r2, #65	@ 0x41
 80041f8:	2124      	movs	r1, #36	@ 0x24
 80041fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2101      	movs	r1, #1
 8004208:	438a      	bics	r2, r1
 800420a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a11      	ldr	r2, [pc, #68]	@ (800425c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004218:	4013      	ands	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2101      	movs	r1, #1
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2241      	movs	r2, #65	@ 0x41
 8004242:	2120      	movs	r1, #32
 8004244:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2240      	movs	r2, #64	@ 0x40
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	e000      	b.n	8004254 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004252:	2302      	movs	r3, #2
  }
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b004      	add	sp, #16
 800425a:	bd80      	pop	{r7, pc}
 800425c:	fffff0ff 	.word	0xfffff0ff

08004260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004268:	4b19      	ldr	r3, [pc, #100]	@ (80042d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a19      	ldr	r2, [pc, #100]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800426e:	4013      	ands	r3, r2
 8004270:	0019      	movs	r1, r3
 8004272:	4b17      	ldr	r3, [pc, #92]	@ (80042d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	430a      	orrs	r2, r1
 8004278:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d11f      	bne.n	80042c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004284:	4b14      	ldr	r3, [pc, #80]	@ (80042d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	0013      	movs	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	189b      	adds	r3, r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4912      	ldr	r1, [pc, #72]	@ (80042dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004292:	0018      	movs	r0, r3
 8004294:	f7fb ff3e 	bl	8000114 <__udivsi3>
 8004298:	0003      	movs	r3, r0
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800429e:	e008      	b.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e001      	b.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e009      	b.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042b2:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	2380      	movs	r3, #128	@ 0x80
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	401a      	ands	r2, r3
 80042bc:	2380      	movs	r3, #128	@ 0x80
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d0ed      	beq.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	40007000 	.word	0x40007000
 80042d4:	fffff9ff 	.word	0xfffff9ff
 80042d8:	20000014 	.word	0x20000014
 80042dc:	000f4240 	.word	0x000f4240

080042e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80042e4:	4b03      	ldr	r3, [pc, #12]	@ (80042f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	23e0      	movs	r3, #224	@ 0xe0
 80042ea:	01db      	lsls	r3, r3, #7
 80042ec:	4013      	ands	r3, r2
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000

080042f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e2fe      	b.n	8004908 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2201      	movs	r2, #1
 8004310:	4013      	ands	r3, r2
 8004312:	d100      	bne.n	8004316 <HAL_RCC_OscConfig+0x1e>
 8004314:	e07c      	b.n	8004410 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004316:	4bc3      	ldr	r3, [pc, #780]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2238      	movs	r2, #56	@ 0x38
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004320:	4bc0      	ldr	r3, [pc, #768]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2203      	movs	r2, #3
 8004326:	4013      	ands	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b10      	cmp	r3, #16
 800432e:	d102      	bne.n	8004336 <HAL_RCC_OscConfig+0x3e>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d002      	beq.n	800433c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d10b      	bne.n	8004354 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	4bb9      	ldr	r3, [pc, #740]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	029b      	lsls	r3, r3, #10
 8004344:	4013      	ands	r3, r2
 8004346:	d062      	beq.n	800440e <HAL_RCC_OscConfig+0x116>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d15e      	bne.n	800440e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e2d9      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	2380      	movs	r3, #128	@ 0x80
 800435a:	025b      	lsls	r3, r3, #9
 800435c:	429a      	cmp	r2, r3
 800435e:	d107      	bne.n	8004370 <HAL_RCC_OscConfig+0x78>
 8004360:	4bb0      	ldr	r3, [pc, #704]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4baf      	ldr	r3, [pc, #700]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004366:	2180      	movs	r1, #128	@ 0x80
 8004368:	0249      	lsls	r1, r1, #9
 800436a:	430a      	orrs	r2, r1
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e020      	b.n	80043b2 <HAL_RCC_OscConfig+0xba>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	23a0      	movs	r3, #160	@ 0xa0
 8004376:	02db      	lsls	r3, r3, #11
 8004378:	429a      	cmp	r2, r3
 800437a:	d10e      	bne.n	800439a <HAL_RCC_OscConfig+0xa2>
 800437c:	4ba9      	ldr	r3, [pc, #676]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4ba8      	ldr	r3, [pc, #672]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004382:	2180      	movs	r1, #128	@ 0x80
 8004384:	02c9      	lsls	r1, r1, #11
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	4ba6      	ldr	r3, [pc, #664]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4ba5      	ldr	r3, [pc, #660]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004390:	2180      	movs	r1, #128	@ 0x80
 8004392:	0249      	lsls	r1, r1, #9
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e00b      	b.n	80043b2 <HAL_RCC_OscConfig+0xba>
 800439a:	4ba2      	ldr	r3, [pc, #648]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4ba1      	ldr	r3, [pc, #644]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80043a0:	49a1      	ldr	r1, [pc, #644]	@ (8004628 <HAL_RCC_OscConfig+0x330>)
 80043a2:	400a      	ands	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	4b9f      	ldr	r3, [pc, #636]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b9e      	ldr	r3, [pc, #632]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80043ac:	499f      	ldr	r1, [pc, #636]	@ (800462c <HAL_RCC_OscConfig+0x334>)
 80043ae:	400a      	ands	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d014      	beq.n	80043e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fe f889 	bl	80024d0 <HAL_GetTick>
 80043be:	0003      	movs	r3, r0
 80043c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c4:	f7fe f884 	bl	80024d0 <HAL_GetTick>
 80043c8:	0002      	movs	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	@ 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e298      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d6:	4b93      	ldr	r3, [pc, #588]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	029b      	lsls	r3, r3, #10
 80043de:	4013      	ands	r3, r2
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0xcc>
 80043e2:	e015      	b.n	8004410 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fe f874 	bl	80024d0 <HAL_GetTick>
 80043e8:	0003      	movs	r3, r0
 80043ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ee:	f7fe f86f 	bl	80024d0 <HAL_GetTick>
 80043f2:	0002      	movs	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b64      	cmp	r3, #100	@ 0x64
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e283      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004400:	4b88      	ldr	r3, [pc, #544]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	029b      	lsls	r3, r3, #10
 8004408:	4013      	ands	r3, r2
 800440a:	d1f0      	bne.n	80043ee <HAL_RCC_OscConfig+0xf6>
 800440c:	e000      	b.n	8004410 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2202      	movs	r2, #2
 8004416:	4013      	ands	r3, r2
 8004418:	d100      	bne.n	800441c <HAL_RCC_OscConfig+0x124>
 800441a:	e099      	b.n	8004550 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800441c:	4b81      	ldr	r3, [pc, #516]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2238      	movs	r2, #56	@ 0x38
 8004422:	4013      	ands	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004426:	4b7f      	ldr	r3, [pc, #508]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2203      	movs	r2, #3
 800442c:	4013      	ands	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b10      	cmp	r3, #16
 8004434:	d102      	bne.n	800443c <HAL_RCC_OscConfig+0x144>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d002      	beq.n	8004442 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d135      	bne.n	80044ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004442:	4b78      	ldr	r3, [pc, #480]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	2380      	movs	r3, #128	@ 0x80
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4013      	ands	r3, r2
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x162>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e256      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445a:	4b72      	ldr	r3, [pc, #456]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	4a74      	ldr	r2, [pc, #464]	@ (8004630 <HAL_RCC_OscConfig+0x338>)
 8004460:	4013      	ands	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	021a      	lsls	r2, r3, #8
 800446a:	4b6e      	ldr	r3, [pc, #440]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d112      	bne.n	800449c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004476:	4b6b      	ldr	r3, [pc, #428]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6e      	ldr	r2, [pc, #440]	@ (8004634 <HAL_RCC_OscConfig+0x33c>)
 800447c:	4013      	ands	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	4b67      	ldr	r3, [pc, #412]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004486:	430a      	orrs	r2, r1
 8004488:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800448a:	4b66      	ldr	r3, [pc, #408]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	0adb      	lsrs	r3, r3, #11
 8004490:	2207      	movs	r2, #7
 8004492:	4013      	ands	r3, r2
 8004494:	4a68      	ldr	r2, [pc, #416]	@ (8004638 <HAL_RCC_OscConfig+0x340>)
 8004496:	40da      	lsrs	r2, r3
 8004498:	4b68      	ldr	r3, [pc, #416]	@ (800463c <HAL_RCC_OscConfig+0x344>)
 800449a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800449c:	4b68      	ldr	r3, [pc, #416]	@ (8004640 <HAL_RCC_OscConfig+0x348>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7fd ffb9 	bl	8002418 <HAL_InitTick>
 80044a6:	1e03      	subs	r3, r0, #0
 80044a8:	d051      	beq.n	800454e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e22c      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d030      	beq.n	8004518 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80044b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004634 <HAL_RCC_OscConfig+0x33c>)
 80044bc:	4013      	ands	r3, r2
 80044be:	0019      	movs	r1, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	4b57      	ldr	r3, [pc, #348]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80044ca:	4b56      	ldr	r3, [pc, #344]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4b55      	ldr	r3, [pc, #340]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80044d0:	2180      	movs	r1, #128	@ 0x80
 80044d2:	0049      	lsls	r1, r1, #1
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd fffa 	bl	80024d0 <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
 80044de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e2:	f7fd fff5 	bl	80024d0 <HAL_GetTick>
 80044e6:	0002      	movs	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e209      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	2380      	movs	r3, #128	@ 0x80
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4013      	ands	r3, r2
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b48      	ldr	r3, [pc, #288]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4a4a      	ldr	r2, [pc, #296]	@ (8004630 <HAL_RCC_OscConfig+0x338>)
 8004506:	4013      	ands	r3, r2
 8004508:	0019      	movs	r1, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	021a      	lsls	r2, r3, #8
 8004510:	4b44      	ldr	r3, [pc, #272]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	e01b      	b.n	8004550 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004518:	4b42      	ldr	r3, [pc, #264]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b41      	ldr	r3, [pc, #260]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800451e:	4949      	ldr	r1, [pc, #292]	@ (8004644 <HAL_RCC_OscConfig+0x34c>)
 8004520:	400a      	ands	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd ffd4 	bl	80024d0 <HAL_GetTick>
 8004528:	0003      	movs	r3, r0
 800452a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452e:	f7fd ffcf 	bl	80024d0 <HAL_GetTick>
 8004532:	0002      	movs	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e1e3      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004540:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	2380      	movs	r3, #128	@ 0x80
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4013      	ands	r3, r2
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x236>
 800454c:	e000      	b.n	8004550 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800454e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2208      	movs	r2, #8
 8004556:	4013      	ands	r3, r2
 8004558:	d047      	beq.n	80045ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800455a:	4b32      	ldr	r3, [pc, #200]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2238      	movs	r2, #56	@ 0x38
 8004560:	4013      	ands	r3, r2
 8004562:	2b18      	cmp	r3, #24
 8004564:	d10a      	bne.n	800457c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004566:	4b2f      	ldr	r3, [pc, #188]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456a:	2202      	movs	r2, #2
 800456c:	4013      	ands	r3, r2
 800456e:	d03c      	beq.n	80045ea <HAL_RCC_OscConfig+0x2f2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d138      	bne.n	80045ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e1c5      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d019      	beq.n	80045b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004584:	4b27      	ldr	r3, [pc, #156]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004586:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004588:	4b26      	ldr	r3, [pc, #152]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800458a:	2101      	movs	r1, #1
 800458c:	430a      	orrs	r2, r1
 800458e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fd ff9e 	bl	80024d0 <HAL_GetTick>
 8004594:	0003      	movs	r3, r0
 8004596:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459a:	f7fd ff99 	bl	80024d0 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e1ad      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80045ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b0:	2202      	movs	r2, #2
 80045b2:	4013      	ands	r3, r2
 80045b4:	d0f1      	beq.n	800459a <HAL_RCC_OscConfig+0x2a2>
 80045b6:	e018      	b.n	80045ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80045b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80045ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045bc:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80045be:	2101      	movs	r1, #1
 80045c0:	438a      	bics	r2, r1
 80045c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd ff84 	bl	80024d0 <HAL_GetTick>
 80045c8:	0003      	movs	r3, r0
 80045ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ce:	f7fd ff7f 	bl	80024d0 <HAL_GetTick>
 80045d2:	0002      	movs	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e193      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045e0:	4b10      	ldr	r3, [pc, #64]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 80045e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e4:	2202      	movs	r2, #2
 80045e6:	4013      	ands	r3, r2
 80045e8:	d1f1      	bne.n	80045ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2204      	movs	r2, #4
 80045f0:	4013      	ands	r3, r2
 80045f2:	d100      	bne.n	80045f6 <HAL_RCC_OscConfig+0x2fe>
 80045f4:	e0c6      	b.n	8004784 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	231f      	movs	r3, #31
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80045fe:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2238      	movs	r2, #56	@ 0x38
 8004604:	4013      	ands	r3, r2
 8004606:	2b20      	cmp	r3, #32
 8004608:	d11e      	bne.n	8004648 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800460a:	4b06      	ldr	r3, [pc, #24]	@ (8004624 <HAL_RCC_OscConfig+0x32c>)
 800460c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460e:	2202      	movs	r2, #2
 8004610:	4013      	ands	r3, r2
 8004612:	d100      	bne.n	8004616 <HAL_RCC_OscConfig+0x31e>
 8004614:	e0b6      	b.n	8004784 <HAL_RCC_OscConfig+0x48c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d000      	beq.n	8004620 <HAL_RCC_OscConfig+0x328>
 800461e:	e0b1      	b.n	8004784 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e171      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
 8004624:	40021000 	.word	0x40021000
 8004628:	fffeffff 	.word	0xfffeffff
 800462c:	fffbffff 	.word	0xfffbffff
 8004630:	ffff80ff 	.word	0xffff80ff
 8004634:	ffffc7ff 	.word	0xffffc7ff
 8004638:	00f42400 	.word	0x00f42400
 800463c:	20000014 	.word	0x20000014
 8004640:	20000000 	.word	0x20000000
 8004644:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004648:	4bb1      	ldr	r3, [pc, #708]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800464a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800464c:	2380      	movs	r3, #128	@ 0x80
 800464e:	055b      	lsls	r3, r3, #21
 8004650:	4013      	ands	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x360>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x362>
 8004658:	2300      	movs	r3, #0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d011      	beq.n	8004682 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	4bac      	ldr	r3, [pc, #688]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004660:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004662:	4bab      	ldr	r3, [pc, #684]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004664:	2180      	movs	r1, #128	@ 0x80
 8004666:	0549      	lsls	r1, r1, #21
 8004668:	430a      	orrs	r2, r1
 800466a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800466c:	4ba8      	ldr	r3, [pc, #672]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800466e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004670:	2380      	movs	r3, #128	@ 0x80
 8004672:	055b      	lsls	r3, r3, #21
 8004674:	4013      	ands	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800467a:	231f      	movs	r3, #31
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004682:	4ba4      	ldr	r3, [pc, #656]	@ (8004914 <HAL_RCC_OscConfig+0x61c>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	2380      	movs	r3, #128	@ 0x80
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4013      	ands	r3, r2
 800468c:	d11a      	bne.n	80046c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800468e:	4ba1      	ldr	r3, [pc, #644]	@ (8004914 <HAL_RCC_OscConfig+0x61c>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4ba0      	ldr	r3, [pc, #640]	@ (8004914 <HAL_RCC_OscConfig+0x61c>)
 8004694:	2180      	movs	r1, #128	@ 0x80
 8004696:	0049      	lsls	r1, r1, #1
 8004698:	430a      	orrs	r2, r1
 800469a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800469c:	f7fd ff18 	bl	80024d0 <HAL_GetTick>
 80046a0:	0003      	movs	r3, r0
 80046a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a6:	f7fd ff13 	bl	80024d0 <HAL_GetTick>
 80046aa:	0002      	movs	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e127      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b8:	4b96      	ldr	r3, [pc, #600]	@ (8004914 <HAL_RCC_OscConfig+0x61c>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	2380      	movs	r3, #128	@ 0x80
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4013      	ands	r3, r2
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <HAL_RCC_OscConfig+0x3e2>
 80046cc:	4b90      	ldr	r3, [pc, #576]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80046ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80046d2:	2101      	movs	r1, #1
 80046d4:	430a      	orrs	r2, r1
 80046d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046d8:	e01c      	b.n	8004714 <HAL_RCC_OscConfig+0x41c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b05      	cmp	r3, #5
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0x404>
 80046e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80046e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046e6:	4b8a      	ldr	r3, [pc, #552]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80046e8:	2104      	movs	r1, #4
 80046ea:	430a      	orrs	r2, r1
 80046ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046ee:	4b88      	ldr	r3, [pc, #544]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80046f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046f2:	4b87      	ldr	r3, [pc, #540]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80046f4:	2101      	movs	r1, #1
 80046f6:	430a      	orrs	r2, r1
 80046f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0x41c>
 80046fc:	4b84      	ldr	r3, [pc, #528]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80046fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004700:	4b83      	ldr	r3, [pc, #524]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004702:	2101      	movs	r1, #1
 8004704:	438a      	bics	r2, r1
 8004706:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004708:	4b81      	ldr	r3, [pc, #516]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800470a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800470c:	4b80      	ldr	r3, [pc, #512]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800470e:	2104      	movs	r1, #4
 8004710:	438a      	bics	r2, r1
 8004712:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d014      	beq.n	8004746 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fd fed8 	bl	80024d0 <HAL_GetTick>
 8004720:	0003      	movs	r3, r0
 8004722:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004724:	e009      	b.n	800473a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fd fed3 	bl	80024d0 <HAL_GetTick>
 800472a:	0002      	movs	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	4a79      	ldr	r2, [pc, #484]	@ (8004918 <HAL_RCC_OscConfig+0x620>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0e6      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800473a:	4b75      	ldr	r3, [pc, #468]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800473c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473e:	2202      	movs	r2, #2
 8004740:	4013      	ands	r3, r2
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x42e>
 8004744:	e013      	b.n	800476e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd fec3 	bl	80024d0 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800474e:	e009      	b.n	8004764 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fd febe 	bl	80024d0 <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	4a6f      	ldr	r2, [pc, #444]	@ (8004918 <HAL_RCC_OscConfig+0x620>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0d1      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004764:	4b6a      	ldr	r3, [pc, #424]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004768:	2202      	movs	r2, #2
 800476a:	4013      	ands	r3, r2
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800476e:	231f      	movs	r3, #31
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d105      	bne.n	8004784 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004778:	4b65      	ldr	r3, [pc, #404]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800477a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800477c:	4b64      	ldr	r3, [pc, #400]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800477e:	4967      	ldr	r1, [pc, #412]	@ (800491c <HAL_RCC_OscConfig+0x624>)
 8004780:	400a      	ands	r2, r1
 8004782:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d100      	bne.n	800478e <HAL_RCC_OscConfig+0x496>
 800478c:	e0bb      	b.n	8004906 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800478e:	4b60      	ldr	r3, [pc, #384]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2238      	movs	r2, #56	@ 0x38
 8004794:	4013      	ands	r3, r2
 8004796:	2b10      	cmp	r3, #16
 8004798:	d100      	bne.n	800479c <HAL_RCC_OscConfig+0x4a4>
 800479a:	e07b      	b.n	8004894 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d156      	bne.n	8004852 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4b59      	ldr	r3, [pc, #356]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80047aa:	495d      	ldr	r1, [pc, #372]	@ (8004920 <HAL_RCC_OscConfig+0x628>)
 80047ac:	400a      	ands	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fd fe8e 	bl	80024d0 <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fd fe89 	bl	80024d0 <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e09d      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047cc:	4b50      	ldr	r3, [pc, #320]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	2380      	movs	r3, #128	@ 0x80
 80047d2:	049b      	lsls	r3, r3, #18
 80047d4:	4013      	ands	r3, r2
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a51      	ldr	r2, [pc, #324]	@ (8004924 <HAL_RCC_OscConfig+0x62c>)
 80047de:	4013      	ands	r3, r2
 80047e0:	0019      	movs	r1, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004804:	431a      	orrs	r2, r3
 8004806:	4b42      	ldr	r3, [pc, #264]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004808:	430a      	orrs	r2, r1
 800480a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800480c:	4b40      	ldr	r3, [pc, #256]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b3f      	ldr	r3, [pc, #252]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004812:	2180      	movs	r1, #128	@ 0x80
 8004814:	0449      	lsls	r1, r1, #17
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800481a:	4b3d      	ldr	r3, [pc, #244]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	4b3c      	ldr	r3, [pc, #240]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004820:	2180      	movs	r1, #128	@ 0x80
 8004822:	0549      	lsls	r1, r1, #21
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd fe52 	bl	80024d0 <HAL_GetTick>
 800482c:	0003      	movs	r3, r0
 800482e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004832:	f7fd fe4d 	bl	80024d0 <HAL_GetTick>
 8004836:	0002      	movs	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e061      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004844:	4b32      	ldr	r3, [pc, #200]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	2380      	movs	r3, #128	@ 0x80
 800484a:	049b      	lsls	r3, r3, #18
 800484c:	4013      	ands	r3, r2
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x53a>
 8004850:	e059      	b.n	8004906 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004852:	4b2f      	ldr	r3, [pc, #188]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b2e      	ldr	r3, [pc, #184]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004858:	4931      	ldr	r1, [pc, #196]	@ (8004920 <HAL_RCC_OscConfig+0x628>)
 800485a:	400a      	ands	r2, r1
 800485c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd fe37 	bl	80024d0 <HAL_GetTick>
 8004862:	0003      	movs	r3, r0
 8004864:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004868:	f7fd fe32 	bl	80024d0 <HAL_GetTick>
 800486c:	0002      	movs	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e046      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487a:	4b25      	ldr	r3, [pc, #148]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2380      	movs	r3, #128	@ 0x80
 8004880:	049b      	lsls	r3, r3, #18
 8004882:	4013      	ands	r3, r2
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004886:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	4b21      	ldr	r3, [pc, #132]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 800488c:	4926      	ldr	r1, [pc, #152]	@ (8004928 <HAL_RCC_OscConfig+0x630>)
 800488e:	400a      	ands	r2, r1
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	e038      	b.n	8004906 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e033      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80048a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <HAL_RCC_OscConfig+0x618>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2203      	movs	r2, #3
 80048aa:	401a      	ands	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d126      	bne.n	8004902 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2270      	movs	r2, #112	@ 0x70
 80048b8:	401a      	ands	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d11f      	bne.n	8004902 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	23fe      	movs	r3, #254	@ 0xfe
 80048c6:	01db      	lsls	r3, r3, #7
 80048c8:	401a      	ands	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d116      	bne.n	8004902 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	23f8      	movs	r3, #248	@ 0xf8
 80048d8:	039b      	lsls	r3, r3, #14
 80048da:	401a      	ands	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d10e      	bne.n	8004902 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	23e0      	movs	r3, #224	@ 0xe0
 80048e8:	051b      	lsls	r3, r3, #20
 80048ea:	401a      	ands	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	0f5b      	lsrs	r3, r3, #29
 80048f8:	075a      	lsls	r2, r3, #29
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b008      	add	sp, #32
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	40007000 	.word	0x40007000
 8004918:	00001388 	.word	0x00001388
 800491c:	efffffff 	.word	0xefffffff
 8004920:	feffffff 	.word	0xfeffffff
 8004924:	11c1808c 	.word	0x11c1808c
 8004928:	eefefffc 	.word	0xeefefffc

0800492c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0e9      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004940:	4b76      	ldr	r3, [pc, #472]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2207      	movs	r2, #7
 8004946:	4013      	ands	r3, r2
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d91e      	bls.n	800498c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b73      	ldr	r3, [pc, #460]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2207      	movs	r2, #7
 8004954:	4393      	bics	r3, r2
 8004956:	0019      	movs	r1, r3
 8004958:	4b70      	ldr	r3, [pc, #448]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004960:	f7fd fdb6 	bl	80024d0 <HAL_GetTick>
 8004964:	0003      	movs	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004968:	e009      	b.n	800497e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496a:	f7fd fdb1 	bl	80024d0 <HAL_GetTick>
 800496e:	0002      	movs	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	4a6a      	ldr	r2, [pc, #424]	@ (8004b20 <HAL_RCC_ClockConfig+0x1f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e0ca      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800497e:	4b67      	ldr	r3, [pc, #412]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2207      	movs	r2, #7
 8004984:	4013      	ands	r3, r2
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d1ee      	bne.n	800496a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2202      	movs	r2, #2
 8004992:	4013      	ands	r3, r2
 8004994:	d015      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2204      	movs	r2, #4
 800499c:	4013      	ands	r3, r2
 800499e:	d006      	beq.n	80049ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80049a0:	4b60      	ldr	r3, [pc, #384]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	4b5f      	ldr	r3, [pc, #380]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 80049a6:	21e0      	movs	r1, #224	@ 0xe0
 80049a8:	01c9      	lsls	r1, r1, #7
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	4a5d      	ldr	r2, [pc, #372]	@ (8004b28 <HAL_RCC_ClockConfig+0x1fc>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	0019      	movs	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	4b59      	ldr	r3, [pc, #356]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2201      	movs	r2, #1
 80049c8:	4013      	ands	r3, r2
 80049ca:	d057      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d107      	bne.n	80049e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049d4:	4b53      	ldr	r3, [pc, #332]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2380      	movs	r3, #128	@ 0x80
 80049da:	029b      	lsls	r3, r3, #10
 80049dc:	4013      	ands	r3, r2
 80049de:	d12b      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e097      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	049b      	lsls	r3, r3, #18
 80049f4:	4013      	ands	r3, r2
 80049f6:	d11f      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e08b      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a04:	4b47      	ldr	r3, [pc, #284]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d113      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e07f      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d106      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a1c:	4b41      	ldr	r3, [pc, #260]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a20:	2202      	movs	r2, #2
 8004a22:	4013      	ands	r3, r2
 8004a24:	d108      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e074      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4013      	ands	r3, r2
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e06d      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a38:	4b3a      	ldr	r3, [pc, #232]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	4393      	bics	r3, r2
 8004a40:	0019      	movs	r1, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	4b37      	ldr	r3, [pc, #220]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4c:	f7fd fd40 	bl	80024d0 <HAL_GetTick>
 8004a50:	0003      	movs	r3, r0
 8004a52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a54:	e009      	b.n	8004a6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a56:	f7fd fd3b 	bl	80024d0 <HAL_GetTick>
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	4a2f      	ldr	r2, [pc, #188]	@ (8004b20 <HAL_RCC_ClockConfig+0x1f4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e054      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2238      	movs	r2, #56	@ 0x38
 8004a70:	401a      	ands	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1ec      	bne.n	8004a56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b27      	ldr	r3, [pc, #156]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2207      	movs	r2, #7
 8004a82:	4013      	ands	r3, r2
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d21e      	bcs.n	8004ac8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2207      	movs	r2, #7
 8004a90:	4393      	bics	r3, r2
 8004a92:	0019      	movs	r1, r3
 8004a94:	4b21      	ldr	r3, [pc, #132]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a9c:	f7fd fd18 	bl	80024d0 <HAL_GetTick>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004aa4:	e009      	b.n	8004aba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa6:	f7fd fd13 	bl	80024d0 <HAL_GetTick>
 8004aaa:	0002      	movs	r2, r0
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b20 <HAL_RCC_ClockConfig+0x1f4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e02c      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004aba:	4b18      	ldr	r3, [pc, #96]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2207      	movs	r2, #7
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d1ee      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2204      	movs	r2, #4
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad2:	4b14      	ldr	r3, [pc, #80]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <HAL_RCC_ClockConfig+0x200>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004ae6:	f000 f829 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004aea:	0001      	movs	r1, r0
 8004aec:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	220f      	movs	r2, #15
 8004af4:	401a      	ands	r2, r3
 8004af6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b30 <HAL_RCC_ClockConfig+0x204>)
 8004af8:	0092      	lsls	r2, r2, #2
 8004afa:	58d3      	ldr	r3, [r2, r3]
 8004afc:	221f      	movs	r2, #31
 8004afe:	4013      	ands	r3, r2
 8004b00:	000a      	movs	r2, r1
 8004b02:	40da      	lsrs	r2, r3
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <HAL_RCC_ClockConfig+0x208>)
 8004b06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCC_ClockConfig+0x20c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7fd fc83 	bl	8002418 <HAL_InitTick>
 8004b12:	0003      	movs	r3, r0
}
 8004b14:	0018      	movs	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b004      	add	sp, #16
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40022000 	.word	0x40022000
 8004b20:	00001388 	.word	0x00001388
 8004b24:	40021000 	.word	0x40021000
 8004b28:	fffff0ff 	.word	0xfffff0ff
 8004b2c:	ffff8fff 	.word	0xffff8fff
 8004b30:	080093a8 	.word	0x080093a8
 8004b34:	20000014 	.word	0x20000014
 8004b38:	20000000 	.word	0x20000000

08004b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b42:	4b3c      	ldr	r3, [pc, #240]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2238      	movs	r2, #56	@ 0x38
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d10f      	bne.n	8004b6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b4c:	4b39      	ldr	r3, [pc, #228]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	0adb      	lsrs	r3, r3, #11
 8004b52:	2207      	movs	r2, #7
 8004b54:	4013      	ands	r3, r2
 8004b56:	2201      	movs	r2, #1
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	0013      	movs	r3, r2
 8004b5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b5e:	6839      	ldr	r1, [r7, #0]
 8004b60:	4835      	ldr	r0, [pc, #212]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b62:	f7fb fad7 	bl	8000114 <__udivsi3>
 8004b66:	0003      	movs	r3, r0
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	e05d      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b6c:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2238      	movs	r2, #56	@ 0x38
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d102      	bne.n	8004b7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b78:	4b30      	ldr	r3, [pc, #192]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	e054      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2238      	movs	r2, #56	@ 0x38
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d138      	bne.n	8004bfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2203      	movs	r2, #3
 8004b90:	4013      	ands	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b94:	4b27      	ldr	r3, [pc, #156]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	2207      	movs	r2, #7
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d10d      	bne.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	4824      	ldr	r0, [pc, #144]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8004bac:	f7fb fab2 	bl	8000114 <__udivsi3>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	227f      	movs	r2, #127	@ 0x7f
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	434b      	muls	r3, r1
 8004bc0:	617b      	str	r3, [r7, #20]
        break;
 8004bc2:	e00d      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	481c      	ldr	r0, [pc, #112]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004bc8:	f7fb faa4 	bl	8000114 <__udivsi3>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	0019      	movs	r1, r3
 8004bd0:	4b18      	ldr	r3, [pc, #96]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	0a1b      	lsrs	r3, r3, #8
 8004bd6:	227f      	movs	r2, #127	@ 0x7f
 8004bd8:	4013      	ands	r3, r2
 8004bda:	434b      	muls	r3, r1
 8004bdc:	617b      	str	r3, [r7, #20]
        break;
 8004bde:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004be0:	4b14      	ldr	r3, [pc, #80]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	0f5b      	lsrs	r3, r3, #29
 8004be6:	2207      	movs	r2, #7
 8004be8:	4013      	ands	r3, r2
 8004bea:	3301      	adds	r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	6978      	ldr	r0, [r7, #20]
 8004bf2:	f7fb fa8f 	bl	8000114 <__udivsi3>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	e015      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2238      	movs	r2, #56	@ 0x38
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d103      	bne.n	8004c10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e00b      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c10:	4b08      	ldr	r3, [pc, #32]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2238      	movs	r2, #56	@ 0x38
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b18      	cmp	r3, #24
 8004c1a:	d103      	bne.n	8004c24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c1c:	23fa      	movs	r3, #250	@ 0xfa
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	e001      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c28:	693b      	ldr	r3, [r7, #16]
}
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b006      	add	sp, #24
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			@ (mov r8, r8)
 8004c34:	40021000 	.word	0x40021000
 8004c38:	00f42400 	.word	0x00f42400
 8004c3c:	007a1200 	.word	0x007a1200

08004c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c44:	4b02      	ldr	r3, [pc, #8]	@ (8004c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c46:	681b      	ldr	r3, [r3, #0]
}
 8004c48:	0018      	movs	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	20000014 	.word	0x20000014

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c54:	b5b0      	push	{r4, r5, r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c58:	f7ff fff2 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c5c:	0004      	movs	r4, r0
 8004c5e:	f7ff fb3f 	bl	80042e0 <LL_RCC_GetAPB1Prescaler>
 8004c62:	0003      	movs	r3, r0
 8004c64:	0b1a      	lsrs	r2, r3, #12
 8004c66:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c68:	0092      	lsls	r2, r2, #2
 8004c6a:	58d3      	ldr	r3, [r2, r3]
 8004c6c:	221f      	movs	r2, #31
 8004c6e:	4013      	ands	r3, r2
 8004c70:	40dc      	lsrs	r4, r3
 8004c72:	0023      	movs	r3, r4
}
 8004c74:	0018      	movs	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bdb0      	pop	{r4, r5, r7, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	080093e8 	.word	0x080093e8

08004c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c88:	2313      	movs	r3, #19
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c90:	2312      	movs	r3, #18
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	029b      	lsls	r3, r3, #10
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004ca4:	e0a3      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca6:	2011      	movs	r0, #17
 8004ca8:	183b      	adds	r3, r7, r0
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cae:	4bc3      	ldr	r3, [pc, #780]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cb2:	2380      	movs	r3, #128	@ 0x80
 8004cb4:	055b      	lsls	r3, r3, #21
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d110      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	4bc0      	ldr	r3, [pc, #768]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cbe:	4bbf      	ldr	r3, [pc, #764]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cc0:	2180      	movs	r1, #128	@ 0x80
 8004cc2:	0549      	lsls	r1, r1, #21
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004cc8:	4bbc      	ldr	r3, [pc, #752]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ccc:	2380      	movs	r3, #128	@ 0x80
 8004cce:	055b      	lsls	r3, r3, #21
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	183b      	adds	r3, r7, r0
 8004cd8:	2201      	movs	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cdc:	4bb8      	ldr	r3, [pc, #736]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	4bb7      	ldr	r3, [pc, #732]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ce2:	2180      	movs	r1, #128	@ 0x80
 8004ce4:	0049      	lsls	r1, r1, #1
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cea:	f7fd fbf1 	bl	80024d0 <HAL_GetTick>
 8004cee:	0003      	movs	r3, r0
 8004cf0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf4:	f7fd fbec 	bl	80024d0 <HAL_GetTick>
 8004cf8:	0002      	movs	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d904      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004d02:	2313      	movs	r3, #19
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	2203      	movs	r2, #3
 8004d08:	701a      	strb	r2, [r3, #0]
        break;
 8004d0a:	e005      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d0c:	4bac      	ldr	r3, [pc, #688]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	2380      	movs	r3, #128	@ 0x80
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	4013      	ands	r3, r2
 8004d16:	d0ed      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004d18:	2313      	movs	r3, #19
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d154      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d22:	4ba6      	ldr	r3, [pc, #664]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d26:	23c0      	movs	r3, #192	@ 0xc0
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d014      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d3e:	4b9f      	ldr	r3, [pc, #636]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d42:	4aa0      	ldr	r2, [pc, #640]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d48:	4b9c      	ldr	r3, [pc, #624]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d4c:	4b9b      	ldr	r3, [pc, #620]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	0249      	lsls	r1, r1, #9
 8004d52:	430a      	orrs	r2, r1
 8004d54:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d56:	4b99      	ldr	r3, [pc, #612]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d5a:	4b98      	ldr	r3, [pc, #608]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d5c:	499a      	ldr	r1, [pc, #616]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d5e:	400a      	ands	r2, r1
 8004d60:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d62:	4b96      	ldr	r3, [pc, #600]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d016      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fd fbae 	bl	80024d0 <HAL_GetTick>
 8004d74:	0003      	movs	r3, r0
 8004d76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d78:	e00c      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd fba9 	bl	80024d0 <HAL_GetTick>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	4a91      	ldr	r2, [pc, #580]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d904      	bls.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004d8a:	2313      	movs	r3, #19
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2203      	movs	r2, #3
 8004d90:	701a      	strb	r2, [r3, #0]
            break;
 8004d92:	e004      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d94:	4b89      	ldr	r3, [pc, #548]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d98:	2202      	movs	r2, #2
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d0ed      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004d9e:	2313      	movs	r3, #19
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da8:	4b84      	ldr	r3, [pc, #528]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	4a85      	ldr	r2, [pc, #532]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	0019      	movs	r1, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004db6:	4b81      	ldr	r3, [pc, #516]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004db8:	430a      	orrs	r2, r1
 8004dba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dbc:	e00c      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dbe:	2312      	movs	r3, #18
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	2213      	movs	r2, #19
 8004dc4:	18ba      	adds	r2, r7, r2
 8004dc6:	7812      	ldrb	r2, [r2, #0]
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	e005      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	2312      	movs	r3, #18
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	2213      	movs	r2, #19
 8004dd2:	18ba      	adds	r2, r7, r2
 8004dd4:	7812      	ldrb	r2, [r2, #0]
 8004dd6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd8:	2311      	movs	r3, #17
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d105      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de2:	4b76      	ldr	r3, [pc, #472]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004de4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004de6:	4b75      	ldr	r3, [pc, #468]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004de8:	4979      	ldr	r1, [pc, #484]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004dea:	400a      	ands	r2, r1
 8004dec:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2201      	movs	r2, #1
 8004df4:	4013      	ands	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004df8:	4b70      	ldr	r3, [pc, #448]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	4393      	bics	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4b6d      	ldr	r3, [pc, #436]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2202      	movs	r2, #2
 8004e12:	4013      	ands	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e16:	4b69      	ldr	r3, [pc, #420]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1a:	220c      	movs	r2, #12
 8004e1c:	4393      	bics	r3, r2
 8004e1e:	0019      	movs	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	4b65      	ldr	r3, [pc, #404]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e26:	430a      	orrs	r2, r1
 8004e28:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2210      	movs	r2, #16
 8004e30:	4013      	ands	r3, r2
 8004e32:	d009      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e34:	4b61      	ldr	r3, [pc, #388]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e38:	4a66      	ldr	r2, [pc, #408]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	4b5e      	ldr	r3, [pc, #376]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e44:	430a      	orrs	r2, r1
 8004e46:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e54:	4b59      	ldr	r3, [pc, #356]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e58:	4a5f      	ldr	r2, [pc, #380]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	4b56      	ldr	r3, [pc, #344]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e64:	430a      	orrs	r2, r1
 8004e66:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	@ 0x80
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4013      	ands	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e74:	4b51      	ldr	r3, [pc, #324]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e78:	4a58      	ldr	r2, [pc, #352]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69da      	ldr	r2, [r3, #28]
 8004e82:	4b4e      	ldr	r3, [pc, #312]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e84:	430a      	orrs	r2, r1
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e92:	4b4a      	ldr	r3, [pc, #296]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e96:	4a52      	ldr	r2, [pc, #328]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	0019      	movs	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	4b46      	ldr	r3, [pc, #280]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	2380      	movs	r3, #128	@ 0x80
 8004eac:	01db      	lsls	r3, r3, #7
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d015      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eb2:	4b42      	ldr	r3, [pc, #264]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	0899      	lsrs	r1, r3, #2
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1a      	ldr	r2, [r3, #32]
 8004ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1a      	ldr	r2, [r3, #32]
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	05db      	lsls	r3, r3, #23
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d106      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	4b39      	ldr	r3, [pc, #228]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ed6:	2180      	movs	r1, #128	@ 0x80
 8004ed8:	0249      	lsls	r1, r1, #9
 8004eda:	430a      	orrs	r2, r1
 8004edc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	2380      	movs	r3, #128	@ 0x80
 8004ee4:	031b      	lsls	r3, r3, #12
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d009      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004eea:	4b34      	ldr	r3, [pc, #208]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eee:	2240      	movs	r2, #64	@ 0x40
 8004ef0:	4393      	bics	r3, r2
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ef8:	4b30      	ldr	r3, [pc, #192]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004efa:	430a      	orrs	r2, r1
 8004efc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	2380      	movs	r3, #128	@ 0x80
 8004f04:	039b      	lsls	r3, r3, #14
 8004f06:	4013      	ands	r3, r2
 8004f08:	d016      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0e:	4a35      	ldr	r2, [pc, #212]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	0019      	movs	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f18:	4b28      	ldr	r3, [pc, #160]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f22:	2380      	movs	r3, #128	@ 0x80
 8004f24:	03db      	lsls	r3, r3, #15
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d106      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f2a:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	4b23      	ldr	r3, [pc, #140]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f30:	2180      	movs	r1, #128	@ 0x80
 8004f32:	0449      	lsls	r1, r1, #17
 8004f34:	430a      	orrs	r2, r1
 8004f36:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	03db      	lsls	r3, r3, #15
 8004f40:	4013      	ands	r3, r2
 8004f42:	d016      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f44:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f48:	4a27      	ldr	r2, [pc, #156]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f52:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f5c:	2380      	movs	r3, #128	@ 0x80
 8004f5e:	045b      	lsls	r3, r3, #17
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d106      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f64:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	4b14      	ldr	r3, [pc, #80]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f6a:	2180      	movs	r1, #128	@ 0x80
 8004f6c:	0449      	lsls	r1, r1, #17
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d016      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f82:	4a1a      	ldr	r2, [pc, #104]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	0019      	movs	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	2380      	movs	r3, #128	@ 0x80
 8004f98:	01db      	lsls	r3, r3, #7
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d106      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f9e:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fa4:	2180      	movs	r1, #128	@ 0x80
 8004fa6:	0249      	lsls	r1, r1, #9
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004fac:	2312      	movs	r3, #18
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	781b      	ldrb	r3, [r3, #0]
}
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b006      	add	sp, #24
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40007000 	.word	0x40007000
 8004fc4:	fffffcff 	.word	0xfffffcff
 8004fc8:	fffeffff 	.word	0xfffeffff
 8004fcc:	00001388 	.word	0x00001388
 8004fd0:	efffffff 	.word	0xefffffff
 8004fd4:	fffff3ff 	.word	0xfffff3ff
 8004fd8:	fff3ffff 	.word	0xfff3ffff
 8004fdc:	ffcfffff 	.word	0xffcfffff
 8004fe0:	ffffcfff 	.word	0xffffcfff
 8004fe4:	ffbfffff 	.word	0xffbfffff
 8004fe8:	feffffff 	.word	0xfeffffff
 8004fec:	ffff3fff 	.word	0xffff3fff

08004ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e046      	b.n	8005090 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2288      	movs	r2, #136	@ 0x88
 8005006:	589b      	ldr	r3, [r3, r2]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d107      	bne.n	800501c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2284      	movs	r2, #132	@ 0x84
 8005010:	2100      	movs	r1, #0
 8005012:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	0018      	movs	r0, r3
 8005018:	f001 feae 	bl	8006d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2288      	movs	r2, #136	@ 0x88
 8005020:	2124      	movs	r1, #36	@ 0x24
 8005022:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2101      	movs	r1, #1
 8005030:	438a      	bics	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	0018      	movs	r0, r3
 8005040:	f000 fcb4 	bl	80059ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 f9f2 	bl	8005430 <UART_SetConfig>
 800504c:	0003      	movs	r3, r0
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e01c      	b.n	8005090 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	490d      	ldr	r1, [pc, #52]	@ (8005098 <HAL_UART_Init+0xa8>)
 8005062:	400a      	ands	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	212a      	movs	r1, #42	@ 0x2a
 8005072:	438a      	bics	r2, r1
 8005074:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 fd43 	bl	8005b14 <UART_CheckIdleState>
 800508e:	0003      	movs	r3, r0
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}
 8005098:	ffffb7ff 	.word	0xffffb7ff

0800509c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e032      	b.n	8005114 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2288      	movs	r2, #136	@ 0x88
 80050b2:	2124      	movs	r1, #36	@ 0x24
 80050b4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2101      	movs	r1, #1
 80050c2:	438a      	bics	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	0018      	movs	r0, r3
 80050e2:	f001 feab 	bl	8006e3c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2290      	movs	r2, #144	@ 0x90
 80050ea:	2100      	movs	r1, #0
 80050ec:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2288      	movs	r2, #136	@ 0x88
 80050f2:	2100      	movs	r1, #0
 80050f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	228c      	movs	r2, #140	@ 0x8c
 80050fa:	2100      	movs	r1, #0
 80050fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2284      	movs	r2, #132	@ 0x84
 800510e:	2100      	movs	r1, #0
 8005110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	@ 0x28
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	1dbb      	adds	r3, r7, #6
 800512a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2288      	movs	r2, #136	@ 0x88
 8005130:	589b      	ldr	r3, [r3, r2]
 8005132:	2b20      	cmp	r3, #32
 8005134:	d000      	beq.n	8005138 <HAL_UART_Transmit+0x1c>
 8005136:	e090      	b.n	800525a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_UART_Transmit+0x2a>
 800513e:	1dbb      	adds	r3, r7, #6
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e088      	b.n	800525c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	2380      	movs	r3, #128	@ 0x80
 8005150:	015b      	lsls	r3, r3, #5
 8005152:	429a      	cmp	r2, r3
 8005154:	d109      	bne.n	800516a <HAL_UART_Transmit+0x4e>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2201      	movs	r2, #1
 8005162:	4013      	ands	r3, r2
 8005164:	d001      	beq.n	800516a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e078      	b.n	800525c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2290      	movs	r2, #144	@ 0x90
 800516e:	2100      	movs	r1, #0
 8005170:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2288      	movs	r2, #136	@ 0x88
 8005176:	2121      	movs	r1, #33	@ 0x21
 8005178:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517a:	f7fd f9a9 	bl	80024d0 <HAL_GetTick>
 800517e:	0003      	movs	r3, r0
 8005180:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1dba      	adds	r2, r7, #6
 8005186:	2154      	movs	r1, #84	@ 0x54
 8005188:	8812      	ldrh	r2, [r2, #0]
 800518a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1dba      	adds	r2, r7, #6
 8005190:	2156      	movs	r1, #86	@ 0x56
 8005192:	8812      	ldrh	r2, [r2, #0]
 8005194:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	015b      	lsls	r3, r3, #5
 800519e:	429a      	cmp	r2, r3
 80051a0:	d108      	bne.n	80051b4 <HAL_UART_Transmit+0x98>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	e003      	b.n	80051bc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051bc:	e030      	b.n	8005220 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	0013      	movs	r3, r2
 80051c8:	2200      	movs	r2, #0
 80051ca:	2180      	movs	r1, #128	@ 0x80
 80051cc:	f000 fd4c 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 80051d0:	1e03      	subs	r3, r0, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2288      	movs	r2, #136	@ 0x88
 80051d8:	2120      	movs	r1, #32
 80051da:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e03d      	b.n	800525c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	001a      	movs	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	05d2      	lsls	r2, r2, #23
 80051f2:	0dd2      	lsrs	r2, r2, #23
 80051f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	3302      	adds	r3, #2
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	e007      	b.n	800520e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	781a      	ldrb	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	3301      	adds	r3, #1
 800520c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2256      	movs	r2, #86	@ 0x56
 8005212:	5a9b      	ldrh	r3, [r3, r2]
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b299      	uxth	r1, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2256      	movs	r2, #86	@ 0x56
 800521e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2256      	movs	r2, #86	@ 0x56
 8005224:	5a9b      	ldrh	r3, [r3, r2]
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1c8      	bne.n	80051be <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	0013      	movs	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	2140      	movs	r1, #64	@ 0x40
 800523a:	f000 fd15 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 800523e:	1e03      	subs	r3, r0, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2288      	movs	r2, #136	@ 0x88
 8005246:	2120      	movs	r1, #32
 8005248:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e006      	b.n	800525c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2288      	movs	r2, #136	@ 0x88
 8005252:	2120      	movs	r1, #32
 8005254:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	e000      	b.n	800525c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800525a:	2302      	movs	r3, #2
  }
}
 800525c:	0018      	movs	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	b008      	add	sp, #32
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	@ 0x28
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	1dbb      	adds	r3, r7, #6
 8005272:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	228c      	movs	r2, #140	@ 0x8c
 8005278:	589b      	ldr	r3, [r3, r2]
 800527a:	2b20      	cmp	r3, #32
 800527c:	d000      	beq.n	8005280 <HAL_UART_Receive+0x1c>
 800527e:	e0d0      	b.n	8005422 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_UART_Receive+0x2a>
 8005286:	1dbb      	adds	r3, r7, #6
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e0c8      	b.n	8005424 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	2380      	movs	r3, #128	@ 0x80
 8005298:	015b      	lsls	r3, r3, #5
 800529a:	429a      	cmp	r2, r3
 800529c:	d109      	bne.n	80052b2 <HAL_UART_Receive+0x4e>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d105      	bne.n	80052b2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2201      	movs	r2, #1
 80052aa:	4013      	ands	r3, r2
 80052ac:	d001      	beq.n	80052b2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0b8      	b.n	8005424 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2290      	movs	r2, #144	@ 0x90
 80052b6:	2100      	movs	r1, #0
 80052b8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	228c      	movs	r2, #140	@ 0x8c
 80052be:	2122      	movs	r1, #34	@ 0x22
 80052c0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052c8:	f7fd f902 	bl	80024d0 <HAL_GetTick>
 80052cc:	0003      	movs	r3, r0
 80052ce:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1dba      	adds	r2, r7, #6
 80052d4:	215c      	movs	r1, #92	@ 0x5c
 80052d6:	8812      	ldrh	r2, [r2, #0]
 80052d8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1dba      	adds	r2, r7, #6
 80052de:	215e      	movs	r1, #94	@ 0x5e
 80052e0:	8812      	ldrh	r2, [r2, #0]
 80052e2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	2380      	movs	r3, #128	@ 0x80
 80052ea:	015b      	lsls	r3, r3, #5
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d10d      	bne.n	800530c <HAL_UART_Receive+0xa8>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <HAL_UART_Receive+0x9e>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2260      	movs	r2, #96	@ 0x60
 80052fc:	494b      	ldr	r1, [pc, #300]	@ (800542c <HAL_UART_Receive+0x1c8>)
 80052fe:	5299      	strh	r1, [r3, r2]
 8005300:	e02e      	b.n	8005360 <HAL_UART_Receive+0xfc>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2260      	movs	r2, #96	@ 0x60
 8005306:	21ff      	movs	r1, #255	@ 0xff
 8005308:	5299      	strh	r1, [r3, r2]
 800530a:	e029      	b.n	8005360 <HAL_UART_Receive+0xfc>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <HAL_UART_Receive+0xcc>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <HAL_UART_Receive+0xc2>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2260      	movs	r2, #96	@ 0x60
 8005320:	21ff      	movs	r1, #255	@ 0xff
 8005322:	5299      	strh	r1, [r3, r2]
 8005324:	e01c      	b.n	8005360 <HAL_UART_Receive+0xfc>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2260      	movs	r2, #96	@ 0x60
 800532a:	217f      	movs	r1, #127	@ 0x7f
 800532c:	5299      	strh	r1, [r3, r2]
 800532e:	e017      	b.n	8005360 <HAL_UART_Receive+0xfc>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	2380      	movs	r3, #128	@ 0x80
 8005336:	055b      	lsls	r3, r3, #21
 8005338:	429a      	cmp	r2, r3
 800533a:	d10d      	bne.n	8005358 <HAL_UART_Receive+0xf4>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <HAL_UART_Receive+0xea>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2260      	movs	r2, #96	@ 0x60
 8005348:	217f      	movs	r1, #127	@ 0x7f
 800534a:	5299      	strh	r1, [r3, r2]
 800534c:	e008      	b.n	8005360 <HAL_UART_Receive+0xfc>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2260      	movs	r2, #96	@ 0x60
 8005352:	213f      	movs	r1, #63	@ 0x3f
 8005354:	5299      	strh	r1, [r3, r2]
 8005356:	e003      	b.n	8005360 <HAL_UART_Receive+0xfc>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2260      	movs	r2, #96	@ 0x60
 800535c:	2100      	movs	r1, #0
 800535e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005360:	2312      	movs	r3, #18
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	2160      	movs	r1, #96	@ 0x60
 8005368:	5a52      	ldrh	r2, [r2, r1]
 800536a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	2380      	movs	r3, #128	@ 0x80
 8005372:	015b      	lsls	r3, r3, #5
 8005374:	429a      	cmp	r2, r3
 8005376:	d108      	bne.n	800538a <HAL_UART_Receive+0x126>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e003      	b.n	8005392 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005392:	e03a      	b.n	800540a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	0013      	movs	r3, r2
 800539e:	2200      	movs	r2, #0
 80053a0:	2120      	movs	r1, #32
 80053a2:	f000 fc61 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 80053a6:	1e03      	subs	r3, r0, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	228c      	movs	r2, #140	@ 0x8c
 80053ae:	2120      	movs	r1, #32
 80053b0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e036      	b.n	8005424 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10e      	bne.n	80053da <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2212      	movs	r2, #18
 80053c6:	18ba      	adds	r2, r7, r2
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	4013      	ands	r3, r2
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	3302      	adds	r3, #2
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e00e      	b.n	80053f8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2212      	movs	r2, #18
 80053e4:	18ba      	adds	r2, r7, r2
 80053e6:	8812      	ldrh	r2, [r2, #0]
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	4013      	ands	r3, r2
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	225e      	movs	r2, #94	@ 0x5e
 80053fc:	5a9b      	ldrh	r3, [r3, r2]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b299      	uxth	r1, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	225e      	movs	r2, #94	@ 0x5e
 8005408:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	225e      	movs	r2, #94	@ 0x5e
 800540e:	5a9b      	ldrh	r3, [r3, r2]
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1be      	bne.n	8005394 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	228c      	movs	r2, #140	@ 0x8c
 800541a:	2120      	movs	r1, #32
 800541c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	0018      	movs	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	b008      	add	sp, #32
 800542a:	bd80      	pop	{r7, pc}
 800542c:	000001ff 	.word	0x000001ff

08005430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005430:	b5b0      	push	{r4, r5, r7, lr}
 8005432:	b090      	sub	sp, #64	@ 0x40
 8005434:	af00      	add	r7, sp, #0
 8005436:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005438:	231a      	movs	r3, #26
 800543a:	2220      	movs	r2, #32
 800543c:	189b      	adds	r3, r3, r2
 800543e:	19db      	adds	r3, r3, r7
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	431a      	orrs	r2, r3
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	431a      	orrs	r2, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	4313      	orrs	r3, r2
 800545a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4aaf      	ldr	r2, [pc, #700]	@ (8005720 <UART_SetConfig+0x2f0>)
 8005464:	4013      	ands	r3, r2
 8005466:	0019      	movs	r1, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546e:	430b      	orrs	r3, r1
 8005470:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4aaa      	ldr	r2, [pc, #680]	@ (8005724 <UART_SetConfig+0x2f4>)
 800547a:	4013      	ands	r3, r2
 800547c:	0018      	movs	r0, r3
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	68d9      	ldr	r1, [r3, #12]
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	0003      	movs	r3, r0
 8005488:	430b      	orrs	r3, r1
 800548a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4aa4      	ldr	r2, [pc, #656]	@ (8005728 <UART_SetConfig+0x2f8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800549c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054a2:	4313      	orrs	r3, r2
 80054a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4a9f      	ldr	r2, [pc, #636]	@ (800572c <UART_SetConfig+0x2fc>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	220f      	movs	r2, #15
 80054c4:	4393      	bics	r3, r2
 80054c6:	0018      	movs	r0, r3
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	0003      	movs	r3, r0
 80054d2:	430b      	orrs	r3, r1
 80054d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a95      	ldr	r2, [pc, #596]	@ (8005730 <UART_SetConfig+0x300>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d131      	bne.n	8005544 <UART_SetConfig+0x114>
 80054e0:	4b94      	ldr	r3, [pc, #592]	@ (8005734 <UART_SetConfig+0x304>)
 80054e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e4:	2203      	movs	r2, #3
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d01d      	beq.n	8005528 <UART_SetConfig+0xf8>
 80054ec:	d823      	bhi.n	8005536 <UART_SetConfig+0x106>
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d00c      	beq.n	800550c <UART_SetConfig+0xdc>
 80054f2:	d820      	bhi.n	8005536 <UART_SetConfig+0x106>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <UART_SetConfig+0xce>
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d00e      	beq.n	800551a <UART_SetConfig+0xea>
 80054fc:	e01b      	b.n	8005536 <UART_SetConfig+0x106>
 80054fe:	231b      	movs	r3, #27
 8005500:	2220      	movs	r2, #32
 8005502:	189b      	adds	r3, r3, r2
 8005504:	19db      	adds	r3, r3, r7
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e0b4      	b.n	8005676 <UART_SetConfig+0x246>
 800550c:	231b      	movs	r3, #27
 800550e:	2220      	movs	r2, #32
 8005510:	189b      	adds	r3, r3, r2
 8005512:	19db      	adds	r3, r3, r7
 8005514:	2202      	movs	r2, #2
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	e0ad      	b.n	8005676 <UART_SetConfig+0x246>
 800551a:	231b      	movs	r3, #27
 800551c:	2220      	movs	r2, #32
 800551e:	189b      	adds	r3, r3, r2
 8005520:	19db      	adds	r3, r3, r7
 8005522:	2204      	movs	r2, #4
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	e0a6      	b.n	8005676 <UART_SetConfig+0x246>
 8005528:	231b      	movs	r3, #27
 800552a:	2220      	movs	r2, #32
 800552c:	189b      	adds	r3, r3, r2
 800552e:	19db      	adds	r3, r3, r7
 8005530:	2208      	movs	r2, #8
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	e09f      	b.n	8005676 <UART_SetConfig+0x246>
 8005536:	231b      	movs	r3, #27
 8005538:	2220      	movs	r2, #32
 800553a:	189b      	adds	r3, r3, r2
 800553c:	19db      	adds	r3, r3, r7
 800553e:	2210      	movs	r2, #16
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e098      	b.n	8005676 <UART_SetConfig+0x246>
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a7b      	ldr	r2, [pc, #492]	@ (8005738 <UART_SetConfig+0x308>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d131      	bne.n	80055b2 <UART_SetConfig+0x182>
 800554e:	4b79      	ldr	r3, [pc, #484]	@ (8005734 <UART_SetConfig+0x304>)
 8005550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005552:	220c      	movs	r2, #12
 8005554:	4013      	ands	r3, r2
 8005556:	2b0c      	cmp	r3, #12
 8005558:	d01d      	beq.n	8005596 <UART_SetConfig+0x166>
 800555a:	d823      	bhi.n	80055a4 <UART_SetConfig+0x174>
 800555c:	2b08      	cmp	r3, #8
 800555e:	d00c      	beq.n	800557a <UART_SetConfig+0x14a>
 8005560:	d820      	bhi.n	80055a4 <UART_SetConfig+0x174>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <UART_SetConfig+0x13c>
 8005566:	2b04      	cmp	r3, #4
 8005568:	d00e      	beq.n	8005588 <UART_SetConfig+0x158>
 800556a:	e01b      	b.n	80055a4 <UART_SetConfig+0x174>
 800556c:	231b      	movs	r3, #27
 800556e:	2220      	movs	r2, #32
 8005570:	189b      	adds	r3, r3, r2
 8005572:	19db      	adds	r3, r3, r7
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	e07d      	b.n	8005676 <UART_SetConfig+0x246>
 800557a:	231b      	movs	r3, #27
 800557c:	2220      	movs	r2, #32
 800557e:	189b      	adds	r3, r3, r2
 8005580:	19db      	adds	r3, r3, r7
 8005582:	2202      	movs	r2, #2
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	e076      	b.n	8005676 <UART_SetConfig+0x246>
 8005588:	231b      	movs	r3, #27
 800558a:	2220      	movs	r2, #32
 800558c:	189b      	adds	r3, r3, r2
 800558e:	19db      	adds	r3, r3, r7
 8005590:	2204      	movs	r2, #4
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	e06f      	b.n	8005676 <UART_SetConfig+0x246>
 8005596:	231b      	movs	r3, #27
 8005598:	2220      	movs	r2, #32
 800559a:	189b      	adds	r3, r3, r2
 800559c:	19db      	adds	r3, r3, r7
 800559e:	2208      	movs	r2, #8
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	e068      	b.n	8005676 <UART_SetConfig+0x246>
 80055a4:	231b      	movs	r3, #27
 80055a6:	2220      	movs	r2, #32
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	19db      	adds	r3, r3, r7
 80055ac:	2210      	movs	r2, #16
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e061      	b.n	8005676 <UART_SetConfig+0x246>
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a61      	ldr	r2, [pc, #388]	@ (800573c <UART_SetConfig+0x30c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d106      	bne.n	80055ca <UART_SetConfig+0x19a>
 80055bc:	231b      	movs	r3, #27
 80055be:	2220      	movs	r2, #32
 80055c0:	189b      	adds	r3, r3, r2
 80055c2:	19db      	adds	r3, r3, r7
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e055      	b.n	8005676 <UART_SetConfig+0x246>
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005740 <UART_SetConfig+0x310>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d106      	bne.n	80055e2 <UART_SetConfig+0x1b2>
 80055d4:	231b      	movs	r3, #27
 80055d6:	2220      	movs	r2, #32
 80055d8:	189b      	adds	r3, r3, r2
 80055da:	19db      	adds	r3, r3, r7
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e049      	b.n	8005676 <UART_SetConfig+0x246>
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a50      	ldr	r2, [pc, #320]	@ (8005728 <UART_SetConfig+0x2f8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d13e      	bne.n	800566a <UART_SetConfig+0x23a>
 80055ec:	4b51      	ldr	r3, [pc, #324]	@ (8005734 <UART_SetConfig+0x304>)
 80055ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055f0:	23c0      	movs	r3, #192	@ 0xc0
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	4013      	ands	r3, r2
 80055f6:	22c0      	movs	r2, #192	@ 0xc0
 80055f8:	0112      	lsls	r2, r2, #4
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d027      	beq.n	800564e <UART_SetConfig+0x21e>
 80055fe:	22c0      	movs	r2, #192	@ 0xc0
 8005600:	0112      	lsls	r2, r2, #4
 8005602:	4293      	cmp	r3, r2
 8005604:	d82a      	bhi.n	800565c <UART_SetConfig+0x22c>
 8005606:	2280      	movs	r2, #128	@ 0x80
 8005608:	0112      	lsls	r2, r2, #4
 800560a:	4293      	cmp	r3, r2
 800560c:	d011      	beq.n	8005632 <UART_SetConfig+0x202>
 800560e:	2280      	movs	r2, #128	@ 0x80
 8005610:	0112      	lsls	r2, r2, #4
 8005612:	4293      	cmp	r3, r2
 8005614:	d822      	bhi.n	800565c <UART_SetConfig+0x22c>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <UART_SetConfig+0x1f4>
 800561a:	2280      	movs	r2, #128	@ 0x80
 800561c:	00d2      	lsls	r2, r2, #3
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <UART_SetConfig+0x210>
 8005622:	e01b      	b.n	800565c <UART_SetConfig+0x22c>
 8005624:	231b      	movs	r3, #27
 8005626:	2220      	movs	r2, #32
 8005628:	189b      	adds	r3, r3, r2
 800562a:	19db      	adds	r3, r3, r7
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	e021      	b.n	8005676 <UART_SetConfig+0x246>
 8005632:	231b      	movs	r3, #27
 8005634:	2220      	movs	r2, #32
 8005636:	189b      	adds	r3, r3, r2
 8005638:	19db      	adds	r3, r3, r7
 800563a:	2202      	movs	r2, #2
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e01a      	b.n	8005676 <UART_SetConfig+0x246>
 8005640:	231b      	movs	r3, #27
 8005642:	2220      	movs	r2, #32
 8005644:	189b      	adds	r3, r3, r2
 8005646:	19db      	adds	r3, r3, r7
 8005648:	2204      	movs	r2, #4
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e013      	b.n	8005676 <UART_SetConfig+0x246>
 800564e:	231b      	movs	r3, #27
 8005650:	2220      	movs	r2, #32
 8005652:	189b      	adds	r3, r3, r2
 8005654:	19db      	adds	r3, r3, r7
 8005656:	2208      	movs	r2, #8
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e00c      	b.n	8005676 <UART_SetConfig+0x246>
 800565c:	231b      	movs	r3, #27
 800565e:	2220      	movs	r2, #32
 8005660:	189b      	adds	r3, r3, r2
 8005662:	19db      	adds	r3, r3, r7
 8005664:	2210      	movs	r2, #16
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	e005      	b.n	8005676 <UART_SetConfig+0x246>
 800566a:	231b      	movs	r3, #27
 800566c:	2220      	movs	r2, #32
 800566e:	189b      	adds	r3, r3, r2
 8005670:	19db      	adds	r3, r3, r7
 8005672:	2210      	movs	r2, #16
 8005674:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2b      	ldr	r2, [pc, #172]	@ (8005728 <UART_SetConfig+0x2f8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d000      	beq.n	8005682 <UART_SetConfig+0x252>
 8005680:	e0a9      	b.n	80057d6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005682:	231b      	movs	r3, #27
 8005684:	2220      	movs	r2, #32
 8005686:	189b      	adds	r3, r3, r2
 8005688:	19db      	adds	r3, r3, r7
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b08      	cmp	r3, #8
 800568e:	d015      	beq.n	80056bc <UART_SetConfig+0x28c>
 8005690:	dc18      	bgt.n	80056c4 <UART_SetConfig+0x294>
 8005692:	2b04      	cmp	r3, #4
 8005694:	d00d      	beq.n	80056b2 <UART_SetConfig+0x282>
 8005696:	dc15      	bgt.n	80056c4 <UART_SetConfig+0x294>
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <UART_SetConfig+0x272>
 800569c:	2b02      	cmp	r3, #2
 800569e:	d005      	beq.n	80056ac <UART_SetConfig+0x27c>
 80056a0:	e010      	b.n	80056c4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a2:	f7ff fad7 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 80056a6:	0003      	movs	r3, r0
 80056a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056aa:	e014      	b.n	80056d6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056ac:	4b25      	ldr	r3, [pc, #148]	@ (8005744 <UART_SetConfig+0x314>)
 80056ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056b0:	e011      	b.n	80056d6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b2:	f7ff fa43 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 80056b6:	0003      	movs	r3, r0
 80056b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056ba:	e00c      	b.n	80056d6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056bc:	2380      	movs	r3, #128	@ 0x80
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056c2:	e008      	b.n	80056d6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80056c8:	231a      	movs	r3, #26
 80056ca:	2220      	movs	r2, #32
 80056cc:	189b      	adds	r3, r3, r2
 80056ce:	19db      	adds	r3, r3, r7
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
        break;
 80056d4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d100      	bne.n	80056de <UART_SetConfig+0x2ae>
 80056dc:	e14b      	b.n	8005976 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e2:	4b19      	ldr	r3, [pc, #100]	@ (8005748 <UART_SetConfig+0x318>)
 80056e4:	0052      	lsls	r2, r2, #1
 80056e6:	5ad3      	ldrh	r3, [r2, r3]
 80056e8:	0019      	movs	r1, r3
 80056ea:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80056ec:	f7fa fd12 	bl	8000114 <__udivsi3>
 80056f0:	0003      	movs	r3, r0
 80056f2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	0013      	movs	r3, r2
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	189b      	adds	r3, r3, r2
 80056fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005700:	429a      	cmp	r2, r3
 8005702:	d305      	bcc.n	8005710 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800570a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800570c:	429a      	cmp	r2, r3
 800570e:	d91d      	bls.n	800574c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005710:	231a      	movs	r3, #26
 8005712:	2220      	movs	r2, #32
 8005714:	189b      	adds	r3, r3, r2
 8005716:	19db      	adds	r3, r3, r7
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e12b      	b.n	8005976 <UART_SetConfig+0x546>
 800571e:	46c0      	nop			@ (mov r8, r8)
 8005720:	cfff69f3 	.word	0xcfff69f3
 8005724:	ffffcfff 	.word	0xffffcfff
 8005728:	40008000 	.word	0x40008000
 800572c:	11fff4ff 	.word	0x11fff4ff
 8005730:	40013800 	.word	0x40013800
 8005734:	40021000 	.word	0x40021000
 8005738:	40004400 	.word	0x40004400
 800573c:	40004800 	.word	0x40004800
 8005740:	40004c00 	.word	0x40004c00
 8005744:	00f42400 	.word	0x00f42400
 8005748:	08009380 	.word	0x08009380
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800574c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005758:	4b92      	ldr	r3, [pc, #584]	@ (80059a4 <UART_SetConfig+0x574>)
 800575a:	0052      	lsls	r2, r2, #1
 800575c:	5ad3      	ldrh	r3, [r2, r3]
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	69b8      	ldr	r0, [r7, #24]
 800576a:	69f9      	ldr	r1, [r7, #28]
 800576c:	f7fa fe86 	bl	800047c <__aeabi_uldivmod>
 8005770:	0002      	movs	r2, r0
 8005772:	000b      	movs	r3, r1
 8005774:	0e11      	lsrs	r1, r2, #24
 8005776:	021d      	lsls	r5, r3, #8
 8005778:	430d      	orrs	r5, r1
 800577a:	0214      	lsls	r4, r2, #8
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68b8      	ldr	r0, [r7, #8]
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	1900      	adds	r0, r0, r4
 800578e:	4169      	adcs	r1, r5
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	2300      	movs	r3, #0
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f7fa fe6d 	bl	800047c <__aeabi_uldivmod>
 80057a2:	0002      	movs	r2, r0
 80057a4:	000b      	movs	r3, r1
 80057a6:	0013      	movs	r3, r2
 80057a8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ac:	23c0      	movs	r3, #192	@ 0xc0
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d309      	bcc.n	80057c8 <UART_SetConfig+0x398>
 80057b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b6:	2380      	movs	r3, #128	@ 0x80
 80057b8:	035b      	lsls	r3, r3, #13
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d204      	bcs.n	80057c8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	e0d6      	b.n	8005976 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80057c8:	231a      	movs	r3, #26
 80057ca:	2220      	movs	r2, #32
 80057cc:	189b      	adds	r3, r3, r2
 80057ce:	19db      	adds	r3, r3, r7
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	e0cf      	b.n	8005976 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	69da      	ldr	r2, [r3, #28]
 80057da:	2380      	movs	r3, #128	@ 0x80
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	429a      	cmp	r2, r3
 80057e0:	d000      	beq.n	80057e4 <UART_SetConfig+0x3b4>
 80057e2:	e070      	b.n	80058c6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80057e4:	231b      	movs	r3, #27
 80057e6:	2220      	movs	r2, #32
 80057e8:	189b      	adds	r3, r3, r2
 80057ea:	19db      	adds	r3, r3, r7
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d015      	beq.n	800581e <UART_SetConfig+0x3ee>
 80057f2:	dc18      	bgt.n	8005826 <UART_SetConfig+0x3f6>
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d00d      	beq.n	8005814 <UART_SetConfig+0x3e4>
 80057f8:	dc15      	bgt.n	8005826 <UART_SetConfig+0x3f6>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <UART_SetConfig+0x3d4>
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d005      	beq.n	800580e <UART_SetConfig+0x3de>
 8005802:	e010      	b.n	8005826 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005804:	f7ff fa26 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005808:	0003      	movs	r3, r0
 800580a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800580c:	e014      	b.n	8005838 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800580e:	4b66      	ldr	r3, [pc, #408]	@ (80059a8 <UART_SetConfig+0x578>)
 8005810:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005812:	e011      	b.n	8005838 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005814:	f7ff f992 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8005818:	0003      	movs	r3, r0
 800581a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800581c:	e00c      	b.n	8005838 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581e:	2380      	movs	r3, #128	@ 0x80
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005824:	e008      	b.n	8005838 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800582a:	231a      	movs	r3, #26
 800582c:	2220      	movs	r2, #32
 800582e:	189b      	adds	r3, r3, r2
 8005830:	19db      	adds	r3, r3, r7
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
        break;
 8005836:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583a:	2b00      	cmp	r3, #0
 800583c:	d100      	bne.n	8005840 <UART_SetConfig+0x410>
 800583e:	e09a      	b.n	8005976 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005844:	4b57      	ldr	r3, [pc, #348]	@ (80059a4 <UART_SetConfig+0x574>)
 8005846:	0052      	lsls	r2, r2, #1
 8005848:	5ad3      	ldrh	r3, [r2, r3]
 800584a:	0019      	movs	r1, r3
 800584c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800584e:	f7fa fc61 	bl	8000114 <__udivsi3>
 8005852:	0003      	movs	r3, r0
 8005854:	005a      	lsls	r2, r3, #1
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	18d2      	adds	r2, r2, r3
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	0019      	movs	r1, r3
 8005864:	0010      	movs	r0, r2
 8005866:	f7fa fc55 	bl	8000114 <__udivsi3>
 800586a:	0003      	movs	r3, r0
 800586c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	2b0f      	cmp	r3, #15
 8005872:	d921      	bls.n	80058b8 <UART_SetConfig+0x488>
 8005874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005876:	2380      	movs	r3, #128	@ 0x80
 8005878:	025b      	lsls	r3, r3, #9
 800587a:	429a      	cmp	r2, r3
 800587c:	d21c      	bcs.n	80058b8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	b29a      	uxth	r2, r3
 8005882:	200e      	movs	r0, #14
 8005884:	2420      	movs	r4, #32
 8005886:	1903      	adds	r3, r0, r4
 8005888:	19db      	adds	r3, r3, r7
 800588a:	210f      	movs	r1, #15
 800588c:	438a      	bics	r2, r1
 800588e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	b29b      	uxth	r3, r3
 8005896:	2207      	movs	r2, #7
 8005898:	4013      	ands	r3, r2
 800589a:	b299      	uxth	r1, r3
 800589c:	1903      	adds	r3, r0, r4
 800589e:	19db      	adds	r3, r3, r7
 80058a0:	1902      	adds	r2, r0, r4
 80058a2:	19d2      	adds	r2, r2, r7
 80058a4:	8812      	ldrh	r2, [r2, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	1902      	adds	r2, r0, r4
 80058b0:	19d2      	adds	r2, r2, r7
 80058b2:	8812      	ldrh	r2, [r2, #0]
 80058b4:	60da      	str	r2, [r3, #12]
 80058b6:	e05e      	b.n	8005976 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80058b8:	231a      	movs	r3, #26
 80058ba:	2220      	movs	r2, #32
 80058bc:	189b      	adds	r3, r3, r2
 80058be:	19db      	adds	r3, r3, r7
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	e057      	b.n	8005976 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058c6:	231b      	movs	r3, #27
 80058c8:	2220      	movs	r2, #32
 80058ca:	189b      	adds	r3, r3, r2
 80058cc:	19db      	adds	r3, r3, r7
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d015      	beq.n	8005900 <UART_SetConfig+0x4d0>
 80058d4:	dc18      	bgt.n	8005908 <UART_SetConfig+0x4d8>
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d00d      	beq.n	80058f6 <UART_SetConfig+0x4c6>
 80058da:	dc15      	bgt.n	8005908 <UART_SetConfig+0x4d8>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <UART_SetConfig+0x4b6>
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d005      	beq.n	80058f0 <UART_SetConfig+0x4c0>
 80058e4:	e010      	b.n	8005908 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e6:	f7ff f9b5 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 80058ea:	0003      	movs	r3, r0
 80058ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058ee:	e014      	b.n	800591a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b2d      	ldr	r3, [pc, #180]	@ (80059a8 <UART_SetConfig+0x578>)
 80058f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058f4:	e011      	b.n	800591a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f6:	f7ff f921 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 80058fa:	0003      	movs	r3, r0
 80058fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058fe:	e00c      	b.n	800591a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005900:	2380      	movs	r3, #128	@ 0x80
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005906:	e008      	b.n	800591a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800590c:	231a      	movs	r3, #26
 800590e:	2220      	movs	r2, #32
 8005910:	189b      	adds	r3, r3, r2
 8005912:	19db      	adds	r3, r3, r7
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
        break;
 8005918:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800591a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591c:	2b00      	cmp	r3, #0
 800591e:	d02a      	beq.n	8005976 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005924:	4b1f      	ldr	r3, [pc, #124]	@ (80059a4 <UART_SetConfig+0x574>)
 8005926:	0052      	lsls	r2, r2, #1
 8005928:	5ad3      	ldrh	r3, [r2, r3]
 800592a:	0019      	movs	r1, r3
 800592c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800592e:	f7fa fbf1 	bl	8000114 <__udivsi3>
 8005932:	0003      	movs	r3, r0
 8005934:	001a      	movs	r2, r3
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	18d2      	adds	r2, r2, r3
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	0019      	movs	r1, r3
 8005944:	0010      	movs	r0, r2
 8005946:	f7fa fbe5 	bl	8000114 <__udivsi3>
 800594a:	0003      	movs	r3, r0
 800594c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	2b0f      	cmp	r3, #15
 8005952:	d90a      	bls.n	800596a <UART_SetConfig+0x53a>
 8005954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005956:	2380      	movs	r3, #128	@ 0x80
 8005958:	025b      	lsls	r3, r3, #9
 800595a:	429a      	cmp	r2, r3
 800595c:	d205      	bcs.n	800596a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	b29a      	uxth	r2, r3
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	e005      	b.n	8005976 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800596a:	231a      	movs	r3, #26
 800596c:	2220      	movs	r2, #32
 800596e:	189b      	adds	r3, r3, r2
 8005970:	19db      	adds	r3, r3, r7
 8005972:	2201      	movs	r2, #1
 8005974:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	226a      	movs	r2, #106	@ 0x6a
 800597a:	2101      	movs	r1, #1
 800597c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	2268      	movs	r2, #104	@ 0x68
 8005982:	2101      	movs	r1, #1
 8005984:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	2200      	movs	r2, #0
 800598a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	2200      	movs	r2, #0
 8005990:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005992:	231a      	movs	r3, #26
 8005994:	2220      	movs	r2, #32
 8005996:	189b      	adds	r3, r3, r2
 8005998:	19db      	adds	r3, r3, r7
 800599a:	781b      	ldrb	r3, [r3, #0]
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	b010      	add	sp, #64	@ 0x40
 80059a2:	bdb0      	pop	{r4, r5, r7, pc}
 80059a4:	08009380 	.word	0x08009380
 80059a8:	00f42400 	.word	0x00f42400

080059ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	2208      	movs	r2, #8
 80059ba:	4013      	ands	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4a4a      	ldr	r2, [pc, #296]	@ (8005af0 <UART_AdvFeatureConfig+0x144>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	0019      	movs	r1, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	2201      	movs	r2, #1
 80059dc:	4013      	ands	r3, r2
 80059de:	d00b      	beq.n	80059f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	4a43      	ldr	r2, [pc, #268]	@ (8005af4 <UART_AdvFeatureConfig+0x148>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	0019      	movs	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	2202      	movs	r2, #2
 80059fe:	4013      	ands	r3, r2
 8005a00:	d00b      	beq.n	8005a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4a3b      	ldr	r2, [pc, #236]	@ (8005af8 <UART_AdvFeatureConfig+0x14c>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1e:	2204      	movs	r2, #4
 8005a20:	4013      	ands	r3, r2
 8005a22:	d00b      	beq.n	8005a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4a34      	ldr	r2, [pc, #208]	@ (8005afc <UART_AdvFeatureConfig+0x150>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	0019      	movs	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a40:	2210      	movs	r2, #16
 8005a42:	4013      	ands	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b00 <UART_AdvFeatureConfig+0x154>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	0019      	movs	r1, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	2220      	movs	r2, #32
 8005a64:	4013      	ands	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	4a25      	ldr	r2, [pc, #148]	@ (8005b04 <UART_AdvFeatureConfig+0x158>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	0019      	movs	r1, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	2240      	movs	r2, #64	@ 0x40
 8005a86:	4013      	ands	r3, r2
 8005a88:	d01d      	beq.n	8005ac6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4a1d      	ldr	r2, [pc, #116]	@ (8005b08 <UART_AdvFeatureConfig+0x15c>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	0019      	movs	r1, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aa6:	2380      	movs	r3, #128	@ 0x80
 8005aa8:	035b      	lsls	r3, r3, #13
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d10b      	bne.n	8005ac6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4a15      	ldr	r2, [pc, #84]	@ (8005b0c <UART_AdvFeatureConfig+0x160>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	0019      	movs	r1, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aca:	2280      	movs	r2, #128	@ 0x80
 8005acc:	4013      	ands	r3, r2
 8005ace:	d00b      	beq.n	8005ae8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8005b10 <UART_AdvFeatureConfig+0x164>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	0019      	movs	r1, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	605a      	str	r2, [r3, #4]
  }
}
 8005ae8:	46c0      	nop			@ (mov r8, r8)
 8005aea:	46bd      	mov	sp, r7
 8005aec:	b002      	add	sp, #8
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	ffff7fff 	.word	0xffff7fff
 8005af4:	fffdffff 	.word	0xfffdffff
 8005af8:	fffeffff 	.word	0xfffeffff
 8005afc:	fffbffff 	.word	0xfffbffff
 8005b00:	ffffefff 	.word	0xffffefff
 8005b04:	ffffdfff 	.word	0xffffdfff
 8005b08:	ffefffff 	.word	0xffefffff
 8005b0c:	ff9fffff 	.word	0xff9fffff
 8005b10:	fff7ffff 	.word	0xfff7ffff

08005b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b092      	sub	sp, #72	@ 0x48
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2290      	movs	r2, #144	@ 0x90
 8005b20:	2100      	movs	r1, #0
 8005b22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b24:	f7fc fcd4 	bl	80024d0 <HAL_GetTick>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2208      	movs	r2, #8
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d12d      	bne.n	8005b96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3c:	2280      	movs	r2, #128	@ 0x80
 8005b3e:	0391      	lsls	r1, r2, #14
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4a47      	ldr	r2, [pc, #284]	@ (8005c60 <UART_CheckIdleState+0x14c>)
 8005b44:	9200      	str	r2, [sp, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f000 f88e 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005b4c:	1e03      	subs	r3, r0, #0
 8005b4e:	d022      	beq.n	8005b96 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b50:	f3ef 8310 	mrs	r3, PRIMASK
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	f383 8810 	msr	PRIMASK, r3
}
 8005b64:	46c0      	nop			@ (mov r8, r8)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2180      	movs	r1, #128	@ 0x80
 8005b72:	438a      	bics	r2, r1
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7c:	f383 8810 	msr	PRIMASK, r3
}
 8005b80:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2288      	movs	r2, #136	@ 0x88
 8005b86:	2120      	movs	r1, #32
 8005b88:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2284      	movs	r2, #132	@ 0x84
 8005b8e:	2100      	movs	r1, #0
 8005b90:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e060      	b.n	8005c58 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d146      	bne.n	8005c32 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba6:	2280      	movs	r2, #128	@ 0x80
 8005ba8:	03d1      	lsls	r1, r2, #15
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <UART_CheckIdleState+0x14c>)
 8005bae:	9200      	str	r2, [sp, #0]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f000 f859 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005bb6:	1e03      	subs	r3, r0, #0
 8005bb8:	d03b      	beq.n	8005c32 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bba:	f3ef 8310 	mrs	r3, PRIMASK
 8005bbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f383 8810 	msr	PRIMASK, r3
}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4922      	ldr	r1, [pc, #136]	@ (8005c64 <UART_CheckIdleState+0x150>)
 8005bdc:	400a      	ands	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f383 8810 	msr	PRIMASK, r3
}
 8005bea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bec:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bf2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	f383 8810 	msr	PRIMASK, r3
}
 8005c00:	46c0      	nop			@ (mov r8, r8)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	438a      	bics	r2, r1
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f383 8810 	msr	PRIMASK, r3
}
 8005c1c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	228c      	movs	r2, #140	@ 0x8c
 8005c22:	2120      	movs	r1, #32
 8005c24:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2284      	movs	r2, #132	@ 0x84
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e012      	b.n	8005c58 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2288      	movs	r2, #136	@ 0x88
 8005c36:	2120      	movs	r1, #32
 8005c38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	228c      	movs	r2, #140	@ 0x8c
 8005c3e:	2120      	movs	r1, #32
 8005c40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2284      	movs	r2, #132	@ 0x84
 8005c52:	2100      	movs	r1, #0
 8005c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b010      	add	sp, #64	@ 0x40
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	01ffffff 	.word	0x01ffffff
 8005c64:	fffffedf 	.word	0xfffffedf

08005c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	1dfb      	adds	r3, r7, #7
 8005c76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c78:	e051      	b.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	d04e      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c80:	f7fc fc26 	bl	80024d0 <HAL_GetTick>
 8005c84:	0002      	movs	r2, r0
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e051      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d03b      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b80      	cmp	r3, #128	@ 0x80
 8005caa:	d038      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b40      	cmp	r3, #64	@ 0x40
 8005cb0:	d035      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	2208      	movs	r2, #8
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d111      	bne.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f000 f83c 	bl	8005d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2290      	movs	r2, #144	@ 0x90
 8005cd4:	2108      	movs	r1, #8
 8005cd6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2284      	movs	r2, #132	@ 0x84
 8005cdc:	2100      	movs	r1, #0
 8005cde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e02c      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	2380      	movs	r3, #128	@ 0x80
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	401a      	ands	r2, r3
 8005cf0:	2380      	movs	r3, #128	@ 0x80
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d112      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2280      	movs	r2, #128	@ 0x80
 8005cfe:	0112      	lsls	r2, r2, #4
 8005d00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	0018      	movs	r0, r3
 8005d06:	f000 f81f 	bl	8005d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2290      	movs	r2, #144	@ 0x90
 8005d0e:	2120      	movs	r1, #32
 8005d10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2284      	movs	r2, #132	@ 0x84
 8005d16:	2100      	movs	r1, #0
 8005d18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e00f      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	425a      	negs	r2, r3
 8005d2e:	4153      	adcs	r3, r2
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	001a      	movs	r2, r3
 8005d34:	1dfb      	adds	r3, r7, #7
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d09e      	beq.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	0018      	movs	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b004      	add	sp, #16
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08e      	sub	sp, #56	@ 0x38
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d50:	f3ef 8310 	mrs	r3, PRIMASK
 8005d54:	617b      	str	r3, [r7, #20]
  return(result);
 8005d56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f383 8810 	msr	PRIMASK, r3
}
 8005d64:	46c0      	nop			@ (mov r8, r8)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4926      	ldr	r1, [pc, #152]	@ (8005e0c <UART_EndRxTransfer+0xc4>)
 8005d72:	400a      	ands	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f383 8810 	msr	PRIMASK, r3
}
 8005d80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d82:	f3ef 8310 	mrs	r3, PRIMASK
 8005d86:	623b      	str	r3, [r7, #32]
  return(result);
 8005d88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	f383 8810 	msr	PRIMASK, r3
}
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	491b      	ldr	r1, [pc, #108]	@ (8005e10 <UART_EndRxTransfer+0xc8>)
 8005da4:	400a      	ands	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dae:	f383 8810 	msr	PRIMASK, r3
}
 8005db2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d118      	bne.n	8005dee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f383 8810 	msr	PRIMASK, r3
}
 8005dd0:	46c0      	nop			@ (mov r8, r8)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2110      	movs	r1, #16
 8005dde:	438a      	bics	r2, r1
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f383 8810 	msr	PRIMASK, r3
}
 8005dec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	228c      	movs	r2, #140	@ 0x8c
 8005df2:	2120      	movs	r1, #32
 8005df4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b00e      	add	sp, #56	@ 0x38
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	46c0      	nop			@ (mov r8, r8)
 8005e0c:	fffffedf 	.word	0xfffffedf
 8005e10:	effffffe 	.word	0xeffffffe

08005e14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2284      	movs	r2, #132	@ 0x84
 8005e20:	5c9b      	ldrb	r3, [r3, r2]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_UARTEx_DisableFifoMode+0x16>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e027      	b.n	8005e7a <HAL_UARTEx_DisableFifoMode+0x66>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2284      	movs	r2, #132	@ 0x84
 8005e2e:	2101      	movs	r1, #1
 8005e30:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2288      	movs	r2, #136	@ 0x88
 8005e36:	2124      	movs	r1, #36	@ 0x24
 8005e38:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	438a      	bics	r2, r1
 8005e50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a0b      	ldr	r2, [pc, #44]	@ (8005e84 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2288      	movs	r2, #136	@ 0x88
 8005e6c:	2120      	movs	r1, #32
 8005e6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2284      	movs	r2, #132	@ 0x84
 8005e74:	2100      	movs	r1, #0
 8005e76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	b004      	add	sp, #16
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	46c0      	nop			@ (mov r8, r8)
 8005e84:	dfffffff 	.word	0xdfffffff

08005e88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2284      	movs	r2, #132	@ 0x84
 8005e96:	5c9b      	ldrb	r3, [r3, r2]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e02e      	b.n	8005efe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2284      	movs	r2, #132	@ 0x84
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2288      	movs	r2, #136	@ 0x88
 8005eac:	2124      	movs	r1, #36	@ 0x24
 8005eae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	438a      	bics	r2, r1
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	08d9      	lsrs	r1, r3, #3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f000 f854 	bl	8005f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2288      	movs	r2, #136	@ 0x88
 8005ef0:	2120      	movs	r1, #32
 8005ef2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2284      	movs	r2, #132	@ 0x84
 8005ef8:	2100      	movs	r1, #0
 8005efa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	0018      	movs	r0, r3
 8005f00:	46bd      	mov	sp, r7
 8005f02:	b004      	add	sp, #16
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2284      	movs	r2, #132	@ 0x84
 8005f16:	5c9b      	ldrb	r3, [r3, r2]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e02f      	b.n	8005f80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2284      	movs	r2, #132	@ 0x84
 8005f24:	2101      	movs	r1, #1
 8005f26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2288      	movs	r2, #136	@ 0x88
 8005f2c:	2124      	movs	r1, #36	@ 0x24
 8005f2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2101      	movs	r1, #1
 8005f44:	438a      	bics	r2, r1
 8005f46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005f88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	0019      	movs	r1, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f000 f813 	bl	8005f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2288      	movs	r2, #136	@ 0x88
 8005f72:	2120      	movs	r1, #32
 8005f74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2284      	movs	r2, #132	@ 0x84
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b004      	add	sp, #16
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	f1ffffff 	.word	0xf1ffffff

08005f8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d108      	bne.n	8005fae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	226a      	movs	r2, #106	@ 0x6a
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2268      	movs	r2, #104	@ 0x68
 8005fa8:	2101      	movs	r1, #1
 8005faa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fac:	e043      	b.n	8006036 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fae:	260f      	movs	r6, #15
 8005fb0:	19bb      	adds	r3, r7, r6
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fb6:	200e      	movs	r0, #14
 8005fb8:	183b      	adds	r3, r7, r0
 8005fba:	2208      	movs	r2, #8
 8005fbc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	0e5b      	lsrs	r3, r3, #25
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	240d      	movs	r4, #13
 8005fca:	193b      	adds	r3, r7, r4
 8005fcc:	2107      	movs	r1, #7
 8005fce:	400a      	ands	r2, r1
 8005fd0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	0f5b      	lsrs	r3, r3, #29
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	250c      	movs	r5, #12
 8005fde:	197b      	adds	r3, r7, r5
 8005fe0:	2107      	movs	r1, #7
 8005fe2:	400a      	ands	r2, r1
 8005fe4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe6:	183b      	adds	r3, r7, r0
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	197a      	adds	r2, r7, r5
 8005fec:	7812      	ldrb	r2, [r2, #0]
 8005fee:	4914      	ldr	r1, [pc, #80]	@ (8006040 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ff0:	5c8a      	ldrb	r2, [r1, r2]
 8005ff2:	435a      	muls	r2, r3
 8005ff4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ff6:	197b      	adds	r3, r7, r5
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	4a12      	ldr	r2, [pc, #72]	@ (8006044 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ffc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ffe:	0019      	movs	r1, r3
 8006000:	f7fa f912 	bl	8000228 <__divsi3>
 8006004:	0003      	movs	r3, r0
 8006006:	b299      	uxth	r1, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	226a      	movs	r2, #106	@ 0x6a
 800600c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800600e:	19bb      	adds	r3, r7, r6
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	193a      	adds	r2, r7, r4
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	490a      	ldr	r1, [pc, #40]	@ (8006040 <UARTEx_SetNbDataToProcess+0xb4>)
 8006018:	5c8a      	ldrb	r2, [r1, r2]
 800601a:	435a      	muls	r2, r3
 800601c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800601e:	193b      	adds	r3, r7, r4
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	4a08      	ldr	r2, [pc, #32]	@ (8006044 <UARTEx_SetNbDataToProcess+0xb8>)
 8006024:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006026:	0019      	movs	r1, r3
 8006028:	f7fa f8fe 	bl	8000228 <__divsi3>
 800602c:	0003      	movs	r3, r0
 800602e:	b299      	uxth	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2268      	movs	r2, #104	@ 0x68
 8006034:	5299      	strh	r1, [r3, r2]
}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	46bd      	mov	sp, r7
 800603a:	b005      	add	sp, #20
 800603c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800603e:	46c0      	nop			@ (mov r8, r8)
 8006040:	08009398 	.word	0x08009398
 8006044:	080093a0 	.word	0x080093a0

08006048 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800604e:	1d3b      	adds	r3, r7, #4
 8006050:	0018      	movs	r0, r3
 8006052:	230c      	movs	r3, #12
 8006054:	001a      	movs	r2, r3
 8006056:	2100      	movs	r1, #0
 8006058:	f002 f97a 	bl	8008350 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800605c:	4b2d      	ldr	r3, [pc, #180]	@ (8006114 <MX_ADC1_Init+0xcc>)
 800605e:	4a2e      	ldr	r2, [pc, #184]	@ (8006118 <MX_ADC1_Init+0xd0>)
 8006060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006062:	4b2c      	ldr	r3, [pc, #176]	@ (8006114 <MX_ADC1_Init+0xcc>)
 8006064:	2280      	movs	r2, #128	@ 0x80
 8006066:	05d2      	lsls	r2, r2, #23
 8006068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800606a:	4b2a      	ldr	r3, [pc, #168]	@ (8006114 <MX_ADC1_Init+0xcc>)
 800606c:	2200      	movs	r2, #0
 800606e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006070:	4b28      	ldr	r3, [pc, #160]	@ (8006114 <MX_ADC1_Init+0xcc>)
 8006072:	2200      	movs	r2, #0
 8006074:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006076:	4b27      	ldr	r3, [pc, #156]	@ (8006114 <MX_ADC1_Init+0xcc>)
 8006078:	2200      	movs	r2, #0
 800607a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800607c:	4b25      	ldr	r3, [pc, #148]	@ (8006114 <MX_ADC1_Init+0xcc>)
 800607e:	2204      	movs	r2, #4
 8006080:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006082:	4b24      	ldr	r3, [pc, #144]	@ (8006114 <MX_ADC1_Init+0xcc>)
 8006084:	2200      	movs	r2, #0
 8006086:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8006088:	4b22      	ldr	r3, [pc, #136]	@ (8006114 <MX_ADC1_Init+0xcc>)
 800608a:	2200      	movs	r2, #0
 800608c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800608e:	4b21      	ldr	r3, [pc, #132]	@ (8006114 <MX_ADC1_Init+0xcc>)
 8006090:	2200      	movs	r2, #0
 8006092:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8006094:	4b1f      	ldr	r3, [pc, #124]	@ (8006114 <MX_ADC1_Init+0xcc>)
 8006096:	2201      	movs	r2, #1
 8006098:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800609a:	4b1e      	ldr	r3, [pc, #120]	@ (8006114 <MX_ADC1_Init+0xcc>)
 800609c:	2220      	movs	r2, #32
 800609e:	2100      	movs	r1, #0
 80060a0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80060a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80060a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80060ae:	4b19      	ldr	r3, [pc, #100]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060b0:	222c      	movs	r2, #44	@ 0x2c
 80060b2:	2100      	movs	r1, #0
 80060b4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80060b6:	4b17      	ldr	r3, [pc, #92]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80060bc:	4b15      	ldr	r3, [pc, #84]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060be:	2200      	movs	r2, #0
 80060c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80060c2:	4b14      	ldr	r3, [pc, #80]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80060c8:	4b12      	ldr	r3, [pc, #72]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060ca:	223c      	movs	r2, #60	@ 0x3c
 80060cc:	2100      	movs	r1, #0
 80060ce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80060d0:	4b10      	ldr	r3, [pc, #64]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80060d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060d8:	0018      	movs	r0, r3
 80060da:	f7fc fb25 	bl	8002728 <HAL_ADC_Init>
 80060de:	1e03      	subs	r3, r0, #0
 80060e0:	d001      	beq.n	80060e6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80060e2:	f000 fd70 	bl	8006bc6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80060e6:	1d3b      	adds	r3, r7, #4
 80060e8:	4a0c      	ldr	r2, [pc, #48]	@ (800611c <MX_ADC1_Init+0xd4>)
 80060ea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80060ec:	1d3b      	adds	r3, r7, #4
 80060ee:	2200      	movs	r2, #0
 80060f0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80060f2:	1d3b      	adds	r3, r7, #4
 80060f4:	2200      	movs	r2, #0
 80060f6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80060f8:	1d3a      	adds	r2, r7, #4
 80060fa:	4b06      	ldr	r3, [pc, #24]	@ (8006114 <MX_ADC1_Init+0xcc>)
 80060fc:	0011      	movs	r1, r2
 80060fe:	0018      	movs	r0, r3
 8006100:	f7fc fcba 	bl	8002a78 <HAL_ADC_ConfigChannel>
 8006104:	1e03      	subs	r3, r0, #0
 8006106:	d001      	beq.n	800610c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8006108:	f000 fd5d 	bl	8006bc6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800610c:	46c0      	nop			@ (mov r8, r8)
 800610e:	46bd      	mov	sp, r7
 8006110:	b004      	add	sp, #16
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20000098 	.word	0x20000098
 8006118:	40012400 	.word	0x40012400
 800611c:	20000100 	.word	0x20000100

08006120 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b08b      	sub	sp, #44	@ 0x2c
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006128:	2414      	movs	r4, #20
 800612a:	193b      	adds	r3, r7, r4
 800612c:	0018      	movs	r0, r3
 800612e:	2314      	movs	r3, #20
 8006130:	001a      	movs	r2, r3
 8006132:	2100      	movs	r1, #0
 8006134:	f002 f90c 	bl	8008350 <memset>
  if(adcHandle->Instance==ADC1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a17      	ldr	r2, [pc, #92]	@ (800619c <HAL_ADC_MspInit+0x7c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d128      	bne.n	8006194 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006142:	4b17      	ldr	r3, [pc, #92]	@ (80061a0 <HAL_ADC_MspInit+0x80>)
 8006144:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006146:	4b16      	ldr	r3, [pc, #88]	@ (80061a0 <HAL_ADC_MspInit+0x80>)
 8006148:	2180      	movs	r1, #128	@ 0x80
 800614a:	0349      	lsls	r1, r1, #13
 800614c:	430a      	orrs	r2, r1
 800614e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006150:	4b13      	ldr	r3, [pc, #76]	@ (80061a0 <HAL_ADC_MspInit+0x80>)
 8006152:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006154:	2380      	movs	r3, #128	@ 0x80
 8006156:	035b      	lsls	r3, r3, #13
 8006158:	4013      	ands	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800615e:	4b10      	ldr	r3, [pc, #64]	@ (80061a0 <HAL_ADC_MspInit+0x80>)
 8006160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006162:	4b0f      	ldr	r3, [pc, #60]	@ (80061a0 <HAL_ADC_MspInit+0x80>)
 8006164:	2102      	movs	r1, #2
 8006166:	430a      	orrs	r2, r1
 8006168:	635a      	str	r2, [r3, #52]	@ 0x34
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <HAL_ADC_MspInit+0x80>)
 800616c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616e:	2202      	movs	r2, #2
 8006170:	4013      	ands	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BAT__Pin;
 8006176:	193b      	adds	r3, r7, r4
 8006178:	2201      	movs	r2, #1
 800617a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800617c:	193b      	adds	r3, r7, r4
 800617e:	2203      	movs	r2, #3
 8006180:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006182:	193b      	adds	r3, r7, r4
 8006184:	2200      	movs	r2, #0
 8006186:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT__GPIO_Port, &GPIO_InitStruct);
 8006188:	193b      	adds	r3, r7, r4
 800618a:	4a06      	ldr	r2, [pc, #24]	@ (80061a4 <HAL_ADC_MspInit+0x84>)
 800618c:	0019      	movs	r1, r3
 800618e:	0010      	movs	r0, r2
 8006190:	f7fc ff28 	bl	8002fe4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006194:	46c0      	nop			@ (mov r8, r8)
 8006196:	46bd      	mov	sp, r7
 8006198:	b00b      	add	sp, #44	@ 0x2c
 800619a:	bd90      	pop	{r4, r7, pc}
 800619c:	40012400 	.word	0x40012400
 80061a0:	40021000 	.word	0x40021000
 80061a4:	50000400 	.word	0x50000400

080061a8 <airMouseSetup>:
int32_t maxVal = 100;

volatile uint32_t ledCounter = 0;
volatile uint32_t onCounter = 0;

void airMouseSetup(void) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b092      	sub	sp, #72	@ 0x48
 80061ac:	af12      	add	r7, sp, #72	@ 0x48

	//_________________________________________KEYS_________________________________________

	//init mouse buttons
	kbd_init(&mouseButtons, 10, 1, 10, KBD_RESET);
 80061ae:	48a5      	ldr	r0, [pc, #660]	@ (8006444 <airMouseSetup+0x29c>)
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	230a      	movs	r3, #10
 80061b6:	2201      	movs	r2, #1
 80061b8:	210a      	movs	r1, #10
 80061ba:	f001 fbcb 	bl	8007954 <kbd_init>
	kbd_set_columns(&mouseButtons,
 80061be:	4aa2      	ldr	r2, [pc, #648]	@ (8006448 <airMouseSetup+0x2a0>)
 80061c0:	49a1      	ldr	r1, [pc, #644]	@ (8006448 <airMouseSetup+0x2a0>)
 80061c2:	48a0      	ldr	r0, [pc, #640]	@ (8006444 <airMouseSetup+0x29c>)
 80061c4:	2380      	movs	r3, #128	@ 0x80
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80061ca:	4b9f      	ldr	r3, [pc, #636]	@ (8006448 <airMouseSetup+0x2a0>)
 80061cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061ce:	2380      	movs	r3, #128	@ 0x80
 80061d0:	015b      	lsls	r3, r3, #5
 80061d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80061d4:	4b9c      	ldr	r3, [pc, #624]	@ (8006448 <airMouseSetup+0x2a0>)
 80061d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80061d8:	2380      	movs	r3, #128	@ 0x80
 80061da:	019b      	lsls	r3, r3, #6
 80061dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80061de:	4b9a      	ldr	r3, [pc, #616]	@ (8006448 <airMouseSetup+0x2a0>)
 80061e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061e2:	2380      	movs	r3, #128	@ 0x80
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061e8:	4b97      	ldr	r3, [pc, #604]	@ (8006448 <airMouseSetup+0x2a0>)
 80061ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ec:	2380      	movs	r3, #128	@ 0x80
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	9308      	str	r3, [sp, #32]
 80061f2:	4b95      	ldr	r3, [pc, #596]	@ (8006448 <airMouseSetup+0x2a0>)
 80061f4:	9307      	str	r3, [sp, #28]
 80061f6:	2380      	movs	r3, #128	@ 0x80
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	9306      	str	r3, [sp, #24]
 80061fc:	4b92      	ldr	r3, [pc, #584]	@ (8006448 <airMouseSetup+0x2a0>)
 80061fe:	9305      	str	r3, [sp, #20]
 8006200:	2380      	movs	r3, #128	@ 0x80
 8006202:	01db      	lsls	r3, r3, #7
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	4b90      	ldr	r3, [pc, #576]	@ (8006448 <airMouseSetup+0x2a0>)
 8006208:	9303      	str	r3, [sp, #12]
 800620a:	2380      	movs	r3, #128	@ 0x80
 800620c:	9302      	str	r3, [sp, #8]
 800620e:	4b8e      	ldr	r3, [pc, #568]	@ (8006448 <airMouseSetup+0x2a0>)
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	2380      	movs	r3, #128	@ 0x80
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	0013      	movs	r3, r2
 800621a:	2240      	movs	r2, #64	@ 0x40
 800621c:	f001 fc2e 	bl	8007a7c <kbd_set_columns>
	MUS_DPI_GPIO_Port, MUS_DPI_Pin,
	MUS_HOME_GPIO_Port, MUS_HOME_Pin,
	MUS_PRC_GPIO_Port, MUS_PRC_Pin);

	//init qwerty
	kbd_init(&qwerty, 10, 5, 10, KBD_RESET);
 8006220:	488a      	ldr	r0, [pc, #552]	@ (800644c <airMouseSetup+0x2a4>)
 8006222:	2300      	movs	r3, #0
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	230a      	movs	r3, #10
 8006228:	2205      	movs	r2, #5
 800622a:	210a      	movs	r1, #10
 800622c:	f001 fb92 	bl	8007954 <kbd_init>
	kbd_set_columns(&qwerty,
 8006230:	4a87      	ldr	r2, [pc, #540]	@ (8006450 <airMouseSetup+0x2a8>)
 8006232:	4987      	ldr	r1, [pc, #540]	@ (8006450 <airMouseSetup+0x2a8>)
 8006234:	4885      	ldr	r0, [pc, #532]	@ (800644c <airMouseSetup+0x2a4>)
 8006236:	2380      	movs	r3, #128	@ 0x80
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	9310      	str	r3, [sp, #64]	@ 0x40
 800623c:	4b84      	ldr	r3, [pc, #528]	@ (8006450 <airMouseSetup+0x2a8>)
 800623e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006240:	2380      	movs	r3, #128	@ 0x80
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	930e      	str	r3, [sp, #56]	@ 0x38
 8006246:	4b82      	ldr	r3, [pc, #520]	@ (8006450 <airMouseSetup+0x2a8>)
 8006248:	930d      	str	r3, [sp, #52]	@ 0x34
 800624a:	2380      	movs	r3, #128	@ 0x80
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006250:	4b7f      	ldr	r3, [pc, #508]	@ (8006450 <airMouseSetup+0x2a8>)
 8006252:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006254:	2380      	movs	r3, #128	@ 0x80
 8006256:	930a      	str	r3, [sp, #40]	@ 0x28
 8006258:	4b7d      	ldr	r3, [pc, #500]	@ (8006450 <airMouseSetup+0x2a8>)
 800625a:	9309      	str	r3, [sp, #36]	@ 0x24
 800625c:	2340      	movs	r3, #64	@ 0x40
 800625e:	9308      	str	r3, [sp, #32]
 8006260:	4b7b      	ldr	r3, [pc, #492]	@ (8006450 <airMouseSetup+0x2a8>)
 8006262:	9307      	str	r3, [sp, #28]
 8006264:	2320      	movs	r3, #32
 8006266:	9306      	str	r3, [sp, #24]
 8006268:	4b79      	ldr	r3, [pc, #484]	@ (8006450 <airMouseSetup+0x2a8>)
 800626a:	9305      	str	r3, [sp, #20]
 800626c:	2310      	movs	r3, #16
 800626e:	9304      	str	r3, [sp, #16]
 8006270:	4b77      	ldr	r3, [pc, #476]	@ (8006450 <airMouseSetup+0x2a8>)
 8006272:	9303      	str	r3, [sp, #12]
 8006274:	2308      	movs	r3, #8
 8006276:	9302      	str	r3, [sp, #8]
 8006278:	4b75      	ldr	r3, [pc, #468]	@ (8006450 <airMouseSetup+0x2a8>)
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	2304      	movs	r3, #4
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	0013      	movs	r3, r2
 8006282:	2202      	movs	r2, #2
 8006284:	f001 fbfa 	bl	8007a7c <kbd_set_columns>
	KBD_COL6_GPIO_Port, KBD_COL6_Pin,
	KBD_COL7_GPIO_Port, KBD_COL7_Pin,
	KBD_COL8_GPIO_Port, KBD_COL8_Pin,
	KBD_COL9_GPIO_Port, KBD_COL9_Pin,
	KBD_COL10_GPIO_Port, KBD_COL10_Pin);
	kbd_set_rows(&qwerty,
 8006288:	4a72      	ldr	r2, [pc, #456]	@ (8006454 <airMouseSetup+0x2ac>)
 800628a:	4972      	ldr	r1, [pc, #456]	@ (8006454 <airMouseSetup+0x2ac>)
 800628c:	486f      	ldr	r0, [pc, #444]	@ (800644c <airMouseSetup+0x2a4>)
 800628e:	2320      	movs	r3, #32
 8006290:	9306      	str	r3, [sp, #24]
 8006292:	4b70      	ldr	r3, [pc, #448]	@ (8006454 <airMouseSetup+0x2ac>)
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	2310      	movs	r3, #16
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	4b6e      	ldr	r3, [pc, #440]	@ (8006454 <airMouseSetup+0x2ac>)
 800629c:	9303      	str	r3, [sp, #12]
 800629e:	2308      	movs	r3, #8
 80062a0:	9302      	str	r3, [sp, #8]
 80062a2:	4b6c      	ldr	r3, [pc, #432]	@ (8006454 <airMouseSetup+0x2ac>)
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	2304      	movs	r3, #4
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	0013      	movs	r3, r2
 80062ac:	2202      	movs	r2, #2
 80062ae:	f001 fc19 	bl	8007ae4 <kbd_set_rows>



	//_________________________________________RADIO_________________________________________

	espStat = espAt_init(&bleRadio, &huart1, 50, 1500);
 80062b2:	4b69      	ldr	r3, [pc, #420]	@ (8006458 <airMouseSetup+0x2b0>)
 80062b4:	4969      	ldr	r1, [pc, #420]	@ (800645c <airMouseSetup+0x2b4>)
 80062b6:	486a      	ldr	r0, [pc, #424]	@ (8006460 <airMouseSetup+0x2b8>)
 80062b8:	2232      	movs	r2, #50	@ 0x32
 80062ba:	f000 fe7a 	bl	8006fb2 <espAt_init>
 80062be:	0003      	movs	r3, r0
 80062c0:	001a      	movs	r2, r3
 80062c2:	4b68      	ldr	r3, [pc, #416]	@ (8006464 <airMouseSetup+0x2bc>)
 80062c4:	701a      	strb	r2, [r3, #0]
	espStat = espAt_defineEn(&bleRadio, ESP_EN_GPIO_Port, ESP_EN_Pin);
 80062c6:	2380      	movs	r3, #128	@ 0x80
 80062c8:	021a      	lsls	r2, r3, #8
 80062ca:	4961      	ldr	r1, [pc, #388]	@ (8006450 <airMouseSetup+0x2a8>)
 80062cc:	4b64      	ldr	r3, [pc, #400]	@ (8006460 <airMouseSetup+0x2b8>)
 80062ce:	0018      	movs	r0, r3
 80062d0:	f001 fa86 	bl	80077e0 <espAt_defineEn>
 80062d4:	0003      	movs	r3, r0
 80062d6:	001a      	movs	r2, r3
 80062d8:	4b62      	ldr	r3, [pc, #392]	@ (8006464 <airMouseSetup+0x2bc>)
 80062da:	701a      	strb	r2, [r3, #0]
	espStat = espAt_defineBoot(&bleRadio, ESP_BOOT_GPIO_Port, ESP_BOOT_Pin);
 80062dc:	2380      	movs	r3, #128	@ 0x80
 80062de:	01da      	lsls	r2, r3, #7
 80062e0:	495b      	ldr	r1, [pc, #364]	@ (8006450 <airMouseSetup+0x2a8>)
 80062e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006460 <airMouseSetup+0x2b8>)
 80062e4:	0018      	movs	r0, r3
 80062e6:	f001 faab 	bl	8007840 <espAt_defineBoot>
 80062ea:	0003      	movs	r3, r0
 80062ec:	001a      	movs	r2, r3
 80062ee:	4b5d      	ldr	r3, [pc, #372]	@ (8006464 <airMouseSetup+0x2bc>)
 80062f0:	701a      	strb	r2, [r3, #0]
	//turn on
	espStat = espAt_pwrOn(&bleRadio);
 80062f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006460 <airMouseSetup+0x2b8>)
 80062f4:	0018      	movs	r0, r3
 80062f6:	f001 fa8e 	bl	8007816 <espAt_pwrOn>
 80062fa:	0003      	movs	r3, r0
 80062fc:	001a      	movs	r2, r3
 80062fe:	4b59      	ldr	r3, [pc, #356]	@ (8006464 <airMouseSetup+0x2bc>)
 8006300:	701a      	strb	r2, [r3, #0]

	//enter download mode or reset ESP
	if (HAL_GPIO_ReadPin(MUS_BCK_GPIO_Port, MUS_BCK_Pin) == GPIO_PIN_RESET)
 8006302:	2380      	movs	r3, #128	@ 0x80
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	4a50      	ldr	r2, [pc, #320]	@ (8006448 <airMouseSetup+0x2a0>)
 8006308:	0019      	movs	r1, r3
 800630a:	0010      	movs	r0, r2
 800630c:	f7fd f89e 	bl	800344c <HAL_GPIO_ReadPin>
 8006310:	1e03      	subs	r3, r0, #0
 8006312:	d107      	bne.n	8006324 <airMouseSetup+0x17c>
		espStat = espAt_enterDownload(&bleRadio);
 8006314:	4b52      	ldr	r3, [pc, #328]	@ (8006460 <airMouseSetup+0x2b8>)
 8006316:	0018      	movs	r0, r3
 8006318:	f001 faad 	bl	8007876 <espAt_enterDownload>
 800631c:	0003      	movs	r3, r0
 800631e:	001a      	movs	r2, r3
 8006320:	4b50      	ldr	r3, [pc, #320]	@ (8006464 <airMouseSetup+0x2bc>)
 8006322:	701a      	strb	r2, [r3, #0]



	espStat = espAt_sendCommand(&bleRadio, G_RST);
 8006324:	4a50      	ldr	r2, [pc, #320]	@ (8006468 <airMouseSetup+0x2c0>)
 8006326:	4b4e      	ldr	r3, [pc, #312]	@ (8006460 <airMouseSetup+0x2b8>)
 8006328:	0011      	movs	r1, r2
 800632a:	0018      	movs	r0, r3
 800632c:	f000 fe5c 	bl	8006fe8 <espAt_sendCommand>
 8006330:	0003      	movs	r3, r0
 8006332:	001a      	movs	r2, r3
 8006334:	4b4b      	ldr	r3, [pc, #300]	@ (8006464 <airMouseSetup+0x2bc>)
 8006336:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1300);
 8006338:	4b4c      	ldr	r3, [pc, #304]	@ (800646c <airMouseSetup+0x2c4>)
 800633a:	0018      	movs	r0, r3
 800633c:	f7fc f8d2 	bl	80024e4 <HAL_Delay>

	espStat = espAt_sendString(&bleRadio, S_BHN, "bartsHID4");
 8006340:	4a4b      	ldr	r2, [pc, #300]	@ (8006470 <airMouseSetup+0x2c8>)
 8006342:	494c      	ldr	r1, [pc, #304]	@ (8006474 <airMouseSetup+0x2cc>)
 8006344:	4b46      	ldr	r3, [pc, #280]	@ (8006460 <airMouseSetup+0x2b8>)
 8006346:	0018      	movs	r0, r3
 8006348:	f001 f8d4 	bl	80074f4 <espAt_sendString>
 800634c:	0003      	movs	r3, r0
 800634e:	001a      	movs	r2, r3
 8006350:	4b44      	ldr	r3, [pc, #272]	@ (8006464 <airMouseSetup+0x2bc>)
 8006352:	701a      	strb	r2, [r3, #0]
	espStat = espAt_receive(&bleRadio, rxBuffer, sizeof(rxBuffer));
 8006354:	4948      	ldr	r1, [pc, #288]	@ (8006478 <airMouseSetup+0x2d0>)
 8006356:	4b42      	ldr	r3, [pc, #264]	@ (8006460 <airMouseSetup+0x2b8>)
 8006358:	2219      	movs	r2, #25
 800635a:	0018      	movs	r0, r3
 800635c:	f001 fa26 	bl	80077ac <espAt_receive>
 8006360:	0003      	movs	r3, r0
 8006362:	001a      	movs	r2, r3
 8006364:	4b3f      	ldr	r3, [pc, #252]	@ (8006464 <airMouseSetup+0x2bc>)
 8006366:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8006368:	20c8      	movs	r0, #200	@ 0xc8
 800636a:	f7fc f8bb 	bl	80024e4 <HAL_Delay>

	espStat = espAt_sendParams(&bleRadio, P_BHI, 1, 1);
 800636e:	4943      	ldr	r1, [pc, #268]	@ (800647c <airMouseSetup+0x2d4>)
 8006370:	483b      	ldr	r0, [pc, #236]	@ (8006460 <airMouseSetup+0x2b8>)
 8006372:	2301      	movs	r3, #1
 8006374:	2201      	movs	r2, #1
 8006376:	f000 fee5 	bl	8007144 <espAt_sendParams>
 800637a:	0003      	movs	r3, r0
 800637c:	001a      	movs	r2, r3
 800637e:	4b39      	ldr	r3, [pc, #228]	@ (8006464 <airMouseSetup+0x2bc>)
 8006380:	701a      	strb	r2, [r3, #0]
	espStat = espAt_receive(&bleRadio, rxBuffer, sizeof(rxBuffer));
 8006382:	493d      	ldr	r1, [pc, #244]	@ (8006478 <airMouseSetup+0x2d0>)
 8006384:	4b36      	ldr	r3, [pc, #216]	@ (8006460 <airMouseSetup+0x2b8>)
 8006386:	2219      	movs	r2, #25
 8006388:	0018      	movs	r0, r3
 800638a:	f001 fa0f 	bl	80077ac <espAt_receive>
 800638e:	0003      	movs	r3, r0
 8006390:	001a      	movs	r2, r3
 8006392:	4b34      	ldr	r3, [pc, #208]	@ (8006464 <airMouseSetup+0x2bc>)
 8006394:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8006396:	20c8      	movs	r0, #200	@ 0xc8
 8006398:	f7fc f8a4 	bl	80024e4 <HAL_Delay>

	//change baudrate
	espAt_sendParams(&bleRadio, P_UC, 5, 3000000, 8, 1, 0, 0);
 800639c:	4a38      	ldr	r2, [pc, #224]	@ (8006480 <airMouseSetup+0x2d8>)
 800639e:	4939      	ldr	r1, [pc, #228]	@ (8006484 <airMouseSetup+0x2dc>)
 80063a0:	482f      	ldr	r0, [pc, #188]	@ (8006460 <airMouseSetup+0x2b8>)
 80063a2:	2300      	movs	r3, #0
 80063a4:	9303      	str	r3, [sp, #12]
 80063a6:	2300      	movs	r3, #0
 80063a8:	9302      	str	r3, [sp, #8]
 80063aa:	2301      	movs	r3, #1
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	2308      	movs	r3, #8
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	0013      	movs	r3, r2
 80063b4:	2205      	movs	r2, #5
 80063b6:	f000 fec5 	bl	8007144 <espAt_sendParams>
	HAL_Delay(200);
 80063ba:	20c8      	movs	r0, #200	@ 0xc8
 80063bc:	f7fc f892 	bl	80024e4 <HAL_Delay>
	HAL_UART_ChangeSpeed(&huart1, 3000000);
 80063c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006480 <airMouseSetup+0x2d8>)
 80063c2:	4b26      	ldr	r3, [pc, #152]	@ (800645c <airMouseSetup+0x2b4>)
 80063c4:	0011      	movs	r1, r2
 80063c6:	0018      	movs	r0, r3
 80063c8:	f000 fd58 	bl	8006e7c <HAL_UART_ChangeSpeed>


	//_________________________________________IMU SENSOR_________________________________________

	sensorStat = lsm6ds_init(&mems, LSM6DS_ADDR_SA0_L, &hi2c1,
 80063cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006488 <airMouseSetup+0x2e0>)
 80063ce:	482f      	ldr	r0, [pc, #188]	@ (800648c <airMouseSetup+0x2e4>)
 80063d0:	2364      	movs	r3, #100	@ 0x64
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2364      	movs	r3, #100	@ 0x64
 80063d6:	21d4      	movs	r1, #212	@ 0xd4
 80063d8:	f001 fd2b 	bl	8007e32 <lsm6ds_init>
 80063dc:	0003      	movs	r3, r0
 80063de:	001a      	movs	r2, r3
 80063e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006490 <airMouseSetup+0x2e8>)
 80063e2:	701a      	strb	r2, [r3, #0]
			100, 100);
	sensorStat = lsm6ds_reset(&mems);
 80063e4:	4b29      	ldr	r3, [pc, #164]	@ (800648c <airMouseSetup+0x2e4>)
 80063e6:	0018      	movs	r0, r3
 80063e8:	f001 fe2a 	bl	8008040 <lsm6ds_reset>
 80063ec:	0003      	movs	r3, r0
 80063ee:	001a      	movs	r2, r3
 80063f0:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <airMouseSetup+0x2e8>)
 80063f2:	701a      	strb	r2, [r3, #0]

	//	sensorStat = lsm6ds_setXLOutputDataRate(&mems, LSM6DS_ODR_XL_12_5_HZ);
	//	sensorStat = lsm6ds_setXLFullScale(&mems, LSM6DS_FS_XL_16G);

	sensorStat = lsm6ds_setGRLowPass(&mems, LSM6DS_FTYPE_VHIGH);
 80063f4:	4b25      	ldr	r3, [pc, #148]	@ (800648c <airMouseSetup+0x2e4>)
 80063f6:	2103      	movs	r1, #3
 80063f8:	0018      	movs	r0, r3
 80063fa:	f001 fd99 	bl	8007f30 <lsm6ds_setGRLowPass>
 80063fe:	0003      	movs	r3, r0
 8006400:	001a      	movs	r2, r3
 8006402:	4b23      	ldr	r3, [pc, #140]	@ (8006490 <airMouseSetup+0x2e8>)
 8006404:	701a      	strb	r2, [r3, #0]
	sensorStat = lsm6ds_setGROutputDataRate(&mems, LSM6DS_ODR_G_208_HZ);
 8006406:	4b21      	ldr	r3, [pc, #132]	@ (800648c <airMouseSetup+0x2e4>)
 8006408:	2150      	movs	r1, #80	@ 0x50
 800640a:	0018      	movs	r0, r3
 800640c:	f001 fd7c 	bl	8007f08 <lsm6ds_setGROutputDataRate>
 8006410:	0003      	movs	r3, r0
 8006412:	001a      	movs	r2, r3
 8006414:	4b1e      	ldr	r3, [pc, #120]	@ (8006490 <airMouseSetup+0x2e8>)
 8006416:	701a      	strb	r2, [r3, #0]
	sensorStat = lsm6ds_setGRFullScale(&mems, LSM6DS_FS_G_2000DPS);
 8006418:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <airMouseSetup+0x2e4>)
 800641a:	210c      	movs	r1, #12
 800641c:	0018      	movs	r0, r3
 800641e:	f001 fdb4 	bl	8007f8a <lsm6ds_setGRFullScale>
 8006422:	0003      	movs	r3, r0
 8006424:	001a      	movs	r2, r3
 8006426:	4b1a      	ldr	r3, [pc, #104]	@ (8006490 <airMouseSetup+0x2e8>)
 8006428:	701a      	strb	r2, [r3, #0]
	sensorStat = lsm6ds_setInt1Drdy(&mems, LSM6DS_INT1_DRDY_G);
 800642a:	4b18      	ldr	r3, [pc, #96]	@ (800648c <airMouseSetup+0x2e4>)
 800642c:	2102      	movs	r1, #2
 800642e:	0018      	movs	r0, r3
 8006430:	f001 fd56 	bl	8007ee0 <lsm6ds_setInt1Drdy>
 8006434:	0003      	movs	r3, r0
 8006436:	001a      	movs	r2, r3
 8006438:	4b15      	ldr	r3, [pc, #84]	@ (8006490 <airMouseSetup+0x2e8>)
 800643a:	701a      	strb	r2, [r3, #0]

}
 800643c:	46c0      	nop			@ (mov r8, r8)
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	20000154 	.word	0x20000154
 8006448:	50000800 	.word	0x50000800
 800644c:	20000134 	.word	0x20000134
 8006450:	50000400 	.word	0x50000400
 8006454:	50000c00 	.word	0x50000c00
 8006458:	000005dc 	.word	0x000005dc
 800645c:	20000200 	.word	0x20000200
 8006460:	200000fc 	.word	0x200000fc
 8006464:	20000174 	.word	0x20000174
 8006468:	080092f0 	.word	0x080092f0
 800646c:	00000514 	.word	0x00000514
 8006470:	080092f4 	.word	0x080092f4
 8006474:	08009300 	.word	0x08009300
 8006478:	20000178 	.word	0x20000178
 800647c:	0800930c 	.word	0x0800930c
 8006480:	002dc6c0 	.word	0x002dc6c0
 8006484:	08009318 	.word	0x08009318
 8006488:	200001a8 	.word	0x200001a8
 800648c:	20000118 	.word	0x20000118
 8006490:	20000175 	.word	0x20000175

08006494 <airMouseProcess>:
void airMouseProcess(void) {
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af04      	add	r7, sp, #16
	if (flagDrdyG) {
 800649a:	4b93      	ldr	r3, [pc, #588]	@ (80066e8 <airMouseProcess+0x254>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d100      	bne.n	80064a6 <airMouseProcess+0x12>
 80064a4:	e11c      	b.n	80066e0 <airMouseProcess+0x24c>
		flagDrdyG = 0;
 80064a6:	4b90      	ldr	r3, [pc, #576]	@ (80066e8 <airMouseProcess+0x254>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]

		sensorStat = lsm6ds_updateGR(&mems);
 80064ac:	4b8f      	ldr	r3, [pc, #572]	@ (80066ec <airMouseProcess+0x258>)
 80064ae:	0018      	movs	r0, r3
 80064b0:	f001 fdd5 	bl	800805e <lsm6ds_updateGR>
 80064b4:	0003      	movs	r3, r0
 80064b6:	001a      	movs	r2, r3
 80064b8:	4b8d      	ldr	r3, [pc, #564]	@ (80066f0 <airMouseProcess+0x25c>)
 80064ba:	701a      	strb	r2, [r3, #0]

		//sensitivity
		amx = ((int32_t) mems.outGR.x * sensitivity) / 10000;
 80064bc:	4b8b      	ldr	r3, [pc, #556]	@ (80066ec <airMouseProcess+0x258>)
 80064be:	2214      	movs	r2, #20
 80064c0:	5e9b      	ldrsh	r3, [r3, r2]
 80064c2:	001a      	movs	r2, r3
 80064c4:	4b8b      	ldr	r3, [pc, #556]	@ (80066f4 <airMouseProcess+0x260>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4353      	muls	r3, r2
 80064ca:	498b      	ldr	r1, [pc, #556]	@ (80066f8 <airMouseProcess+0x264>)
 80064cc:	0018      	movs	r0, r3
 80064ce:	f7f9 feab 	bl	8000228 <__divsi3>
 80064d2:	0003      	movs	r3, r0
 80064d4:	001a      	movs	r2, r3
 80064d6:	4b89      	ldr	r3, [pc, #548]	@ (80066fc <airMouseProcess+0x268>)
 80064d8:	601a      	str	r2, [r3, #0]
		amz = ((int32_t) mems.outGR.z * sensitivity) / 10000;
 80064da:	4b84      	ldr	r3, [pc, #528]	@ (80066ec <airMouseProcess+0x258>)
 80064dc:	2218      	movs	r2, #24
 80064de:	5e9b      	ldrsh	r3, [r3, r2]
 80064e0:	001a      	movs	r2, r3
 80064e2:	4b84      	ldr	r3, [pc, #528]	@ (80066f4 <airMouseProcess+0x260>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4353      	muls	r3, r2
 80064e8:	4983      	ldr	r1, [pc, #524]	@ (80066f8 <airMouseProcess+0x264>)
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7f9 fe9c 	bl	8000228 <__divsi3>
 80064f0:	0003      	movs	r3, r0
 80064f2:	001a      	movs	r2, r3
 80064f4:	4b82      	ldr	r3, [pc, #520]	@ (8006700 <airMouseProcess+0x26c>)
 80064f6:	601a      	str	r2, [r3, #0]

		//acceleration

		uint8_t isNegative;

		if (amx < 0)
 80064f8:	4b80      	ldr	r3, [pc, #512]	@ (80066fc <airMouseProcess+0x268>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	da03      	bge.n	8006508 <airMouseProcess+0x74>
			isNegative = 1;
 8006500:	1dfb      	adds	r3, r7, #7
 8006502:	2201      	movs	r2, #1
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	e002      	b.n	800650e <airMouseProcess+0x7a>
		else
			isNegative = 0;
 8006508:	1dfb      	adds	r3, r7, #7
 800650a:	2200      	movs	r2, #0
 800650c:	701a      	strb	r2, [r3, #0]

		amx = pow((double) abs(amx), ((double) acceleration) / 100);
 800650e:	4b7b      	ldr	r3, [pc, #492]	@ (80066fc <airMouseProcess+0x268>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	17da      	asrs	r2, r3, #31
 8006514:	189b      	adds	r3, r3, r2
 8006516:	4053      	eors	r3, r2
 8006518:	0018      	movs	r0, r3
 800651a:	f7fb ff05 	bl	8002328 <__aeabi_i2d>
 800651e:	0004      	movs	r4, r0
 8006520:	000d      	movs	r5, r1
 8006522:	4b78      	ldr	r3, [pc, #480]	@ (8006704 <airMouseProcess+0x270>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	0018      	movs	r0, r3
 8006528:	f7fb fefe 	bl	8002328 <__aeabi_i2d>
 800652c:	2200      	movs	r2, #0
 800652e:	4b76      	ldr	r3, [pc, #472]	@ (8006708 <airMouseProcess+0x274>)
 8006530:	f7fa fbf4 	bl	8000d1c <__aeabi_ddiv>
 8006534:	0002      	movs	r2, r0
 8006536:	000b      	movs	r3, r1
 8006538:	0020      	movs	r0, r4
 800653a:	0029      	movs	r1, r5
 800653c:	f001 ffa2 	bl	8008484 <pow>
 8006540:	0002      	movs	r2, r0
 8006542:	000b      	movs	r3, r1
 8006544:	0010      	movs	r0, r2
 8006546:	0019      	movs	r1, r3
 8006548:	f7fb feb2 	bl	80022b0 <__aeabi_d2iz>
 800654c:	0002      	movs	r2, r0
 800654e:	4b6b      	ldr	r3, [pc, #428]	@ (80066fc <airMouseProcess+0x268>)
 8006550:	601a      	str	r2, [r3, #0]
		if (isNegative)
 8006552:	1dfb      	adds	r3, r7, #7
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <airMouseProcess+0xd0>
			amx = -amx;
 800655a:	4b68      	ldr	r3, [pc, #416]	@ (80066fc <airMouseProcess+0x268>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	425a      	negs	r2, r3
 8006560:	4b66      	ldr	r3, [pc, #408]	@ (80066fc <airMouseProcess+0x268>)
 8006562:	601a      	str	r2, [r3, #0]

		if (amz < 0)
 8006564:	4b66      	ldr	r3, [pc, #408]	@ (8006700 <airMouseProcess+0x26c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	da03      	bge.n	8006574 <airMouseProcess+0xe0>
			isNegative = 1;
 800656c:	1dfb      	adds	r3, r7, #7
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e002      	b.n	800657a <airMouseProcess+0xe6>
		else
			isNegative = 0;
 8006574:	1dfb      	adds	r3, r7, #7
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
		amz = pow((double) abs(amz), ((double) acceleration) / 100);
 800657a:	4b61      	ldr	r3, [pc, #388]	@ (8006700 <airMouseProcess+0x26c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	17da      	asrs	r2, r3, #31
 8006580:	189b      	adds	r3, r3, r2
 8006582:	4053      	eors	r3, r2
 8006584:	0018      	movs	r0, r3
 8006586:	f7fb fecf 	bl	8002328 <__aeabi_i2d>
 800658a:	0004      	movs	r4, r0
 800658c:	000d      	movs	r5, r1
 800658e:	4b5d      	ldr	r3, [pc, #372]	@ (8006704 <airMouseProcess+0x270>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	0018      	movs	r0, r3
 8006594:	f7fb fec8 	bl	8002328 <__aeabi_i2d>
 8006598:	2200      	movs	r2, #0
 800659a:	4b5b      	ldr	r3, [pc, #364]	@ (8006708 <airMouseProcess+0x274>)
 800659c:	f7fa fbbe 	bl	8000d1c <__aeabi_ddiv>
 80065a0:	0002      	movs	r2, r0
 80065a2:	000b      	movs	r3, r1
 80065a4:	0020      	movs	r0, r4
 80065a6:	0029      	movs	r1, r5
 80065a8:	f001 ff6c 	bl	8008484 <pow>
 80065ac:	0002      	movs	r2, r0
 80065ae:	000b      	movs	r3, r1
 80065b0:	0010      	movs	r0, r2
 80065b2:	0019      	movs	r1, r3
 80065b4:	f7fb fe7c 	bl	80022b0 <__aeabi_d2iz>
 80065b8:	0002      	movs	r2, r0
 80065ba:	4b51      	ldr	r3, [pc, #324]	@ (8006700 <airMouseProcess+0x26c>)
 80065bc:	601a      	str	r2, [r3, #0]
		if (isNegative)
 80065be:	1dfb      	adds	r3, r7, #7
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <airMouseProcess+0x13c>
			amz = -amz;
 80065c6:	4b4e      	ldr	r3, [pc, #312]	@ (8006700 <airMouseProcess+0x26c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	425a      	negs	r2, r3
 80065cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006700 <airMouseProcess+0x26c>)
 80065ce:	601a      	str	r2, [r3, #0]

		//to high value secure
		if (amx > maxVal)
 80065d0:	4b4a      	ldr	r3, [pc, #296]	@ (80066fc <airMouseProcess+0x268>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	4b4d      	ldr	r3, [pc, #308]	@ (800670c <airMouseProcess+0x278>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	dd03      	ble.n	80065e4 <airMouseProcess+0x150>
			amx = maxVal;
 80065dc:	4b4b      	ldr	r3, [pc, #300]	@ (800670c <airMouseProcess+0x278>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4b46      	ldr	r3, [pc, #280]	@ (80066fc <airMouseProcess+0x268>)
 80065e2:	601a      	str	r2, [r3, #0]
		if (amx < -maxVal)
 80065e4:	4b49      	ldr	r3, [pc, #292]	@ (800670c <airMouseProcess+0x278>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	425a      	negs	r2, r3
 80065ea:	4b44      	ldr	r3, [pc, #272]	@ (80066fc <airMouseProcess+0x268>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	dd04      	ble.n	80065fc <airMouseProcess+0x168>
			amx = -maxVal;
 80065f2:	4b46      	ldr	r3, [pc, #280]	@ (800670c <airMouseProcess+0x278>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	425a      	negs	r2, r3
 80065f8:	4b40      	ldr	r3, [pc, #256]	@ (80066fc <airMouseProcess+0x268>)
 80065fa:	601a      	str	r2, [r3, #0]

		if (amz > maxVal)
 80065fc:	4b40      	ldr	r3, [pc, #256]	@ (8006700 <airMouseProcess+0x26c>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	4b42      	ldr	r3, [pc, #264]	@ (800670c <airMouseProcess+0x278>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	dd03      	ble.n	8006610 <airMouseProcess+0x17c>
			amz = maxVal;
 8006608:	4b40      	ldr	r3, [pc, #256]	@ (800670c <airMouseProcess+0x278>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	4b3c      	ldr	r3, [pc, #240]	@ (8006700 <airMouseProcess+0x26c>)
 800660e:	601a      	str	r2, [r3, #0]
		if (amz < -maxVal)
 8006610:	4b3e      	ldr	r3, [pc, #248]	@ (800670c <airMouseProcess+0x278>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	425a      	negs	r2, r3
 8006616:	4b3a      	ldr	r3, [pc, #232]	@ (8006700 <airMouseProcess+0x26c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	dd04      	ble.n	8006628 <airMouseProcess+0x194>
			amz = -maxVal;
 800661e:	4b3b      	ldr	r3, [pc, #236]	@ (800670c <airMouseProcess+0x278>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	425a      	negs	r2, r3
 8006624:	4b36      	ldr	r3, [pc, #216]	@ (8006700 <airMouseProcess+0x26c>)
 8006626:	601a      	str	r2, [r3, #0]

		//revert sign
		//			amz *= -1;
		amx *= -1;
 8006628:	4b34      	ldr	r3, [pc, #208]	@ (80066fc <airMouseProcess+0x268>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	425a      	negs	r2, r3
 800662e:	4b33      	ldr	r3, [pc, #204]	@ (80066fc <airMouseProcess+0x268>)
 8006630:	601a      	str	r2, [r3, #0]

		mouseButtonState = 0;
 8006632:	4b37      	ldr	r3, [pc, #220]	@ (8006710 <airMouseProcess+0x27c>)
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
		mouseButtonState = !HAL_GPIO_ReadPin(MUS_LB_GPIO_Port, MUS_LB_Pin) << 0
 8006638:	4b36      	ldr	r3, [pc, #216]	@ (8006714 <airMouseProcess+0x280>)
 800663a:	2140      	movs	r1, #64	@ 0x40
 800663c:	0018      	movs	r0, r3
 800663e:	f7fc ff05 	bl	800344c <HAL_GPIO_ReadPin>
 8006642:	0003      	movs	r3, r0
 8006644:	425a      	negs	r2, r3
 8006646:	4153      	adcs	r3, r2
 8006648:	b2db      	uxtb	r3, r3
 800664a:	b25c      	sxtb	r4, r3
				| !HAL_GPIO_ReadPin(MUS_RB_GPIO_Port, MUS_RB_Pin) << 1
 800664c:	2380      	movs	r3, #128	@ 0x80
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	4a30      	ldr	r2, [pc, #192]	@ (8006714 <airMouseProcess+0x280>)
 8006652:	0019      	movs	r1, r3
 8006654:	0010      	movs	r0, r2
 8006656:	f7fc fef9 	bl	800344c <HAL_GPIO_ReadPin>
 800665a:	1e03      	subs	r3, r0, #0
 800665c:	d101      	bne.n	8006662 <airMouseProcess+0x1ce>
 800665e:	2302      	movs	r3, #2
 8006660:	e000      	b.n	8006664 <airMouseProcess+0x1d0>
 8006662:	2300      	movs	r3, #0
 8006664:	4323      	orrs	r3, r4
 8006666:	b25c      	sxtb	r4, r3
				| !HAL_GPIO_ReadPin(MUS_MB_GPIO_Port, MUS_MB_Pin) << 2
 8006668:	4b2a      	ldr	r3, [pc, #168]	@ (8006714 <airMouseProcess+0x280>)
 800666a:	2180      	movs	r1, #128	@ 0x80
 800666c:	0018      	movs	r0, r3
 800666e:	f7fc feed 	bl	800344c <HAL_GPIO_ReadPin>
 8006672:	1e03      	subs	r3, r0, #0
 8006674:	d101      	bne.n	800667a <airMouseProcess+0x1e6>
 8006676:	2304      	movs	r3, #4
 8006678:	e000      	b.n	800667c <airMouseProcess+0x1e8>
 800667a:	2300      	movs	r3, #0
 800667c:	4323      	orrs	r3, r4
 800667e:	b25c      	sxtb	r4, r3
				| !HAL_GPIO_ReadPin(MUS_FWD_GPIO_Port, MUS_FWD_Pin) << 3
 8006680:	2380      	movs	r3, #128	@ 0x80
 8006682:	01db      	lsls	r3, r3, #7
 8006684:	4a23      	ldr	r2, [pc, #140]	@ (8006714 <airMouseProcess+0x280>)
 8006686:	0019      	movs	r1, r3
 8006688:	0010      	movs	r0, r2
 800668a:	f7fc fedf 	bl	800344c <HAL_GPIO_ReadPin>
 800668e:	1e03      	subs	r3, r0, #0
 8006690:	d101      	bne.n	8006696 <airMouseProcess+0x202>
 8006692:	2308      	movs	r3, #8
 8006694:	e000      	b.n	8006698 <airMouseProcess+0x204>
 8006696:	2300      	movs	r3, #0
 8006698:	4323      	orrs	r3, r4
 800669a:	b25c      	sxtb	r4, r3
				| !HAL_GPIO_ReadPin(MUS_BCK_GPIO_Port, MUS_BCK_Pin) << 4;
 800669c:	2380      	movs	r3, #128	@ 0x80
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006714 <airMouseProcess+0x280>)
 80066a2:	0019      	movs	r1, r3
 80066a4:	0010      	movs	r0, r2
 80066a6:	f7fc fed1 	bl	800344c <HAL_GPIO_ReadPin>
 80066aa:	1e03      	subs	r3, r0, #0
 80066ac:	d101      	bne.n	80066b2 <airMouseProcess+0x21e>
 80066ae:	2310      	movs	r3, #16
 80066b0:	e000      	b.n	80066b4 <airMouseProcess+0x220>
 80066b2:	2300      	movs	r3, #0
 80066b4:	4323      	orrs	r3, r4
 80066b6:	b25b      	sxtb	r3, r3
 80066b8:	b2da      	uxtb	r2, r3
		mouseButtonState = !HAL_GPIO_ReadPin(MUS_LB_GPIO_Port, MUS_LB_Pin) << 0
 80066ba:	4b15      	ldr	r3, [pc, #84]	@ (8006710 <airMouseProcess+0x27c>)
 80066bc:	701a      	strb	r2, [r3, #0]

		espAt_sendParams(&bleRadio, P_BHM, 4, mouseButtonState, amx, amz, 0);
 80066be:	4b14      	ldr	r3, [pc, #80]	@ (8006710 <airMouseProcess+0x27c>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	001d      	movs	r5, r3
 80066c4:	4b0d      	ldr	r3, [pc, #52]	@ (80066fc <airMouseProcess+0x268>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <airMouseProcess+0x26c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4912      	ldr	r1, [pc, #72]	@ (8006718 <airMouseProcess+0x284>)
 80066ce:	4813      	ldr	r0, [pc, #76]	@ (800671c <airMouseProcess+0x288>)
 80066d0:	2400      	movs	r4, #0
 80066d2:	9402      	str	r4, [sp, #8]
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	9200      	str	r2, [sp, #0]
 80066d8:	002b      	movs	r3, r5
 80066da:	2204      	movs	r2, #4
 80066dc:	f000 fd32 	bl	8007144 <espAt_sendParams>

	}

}
 80066e0:	46c0      	nop			@ (mov r8, r8)
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b002      	add	sp, #8
 80066e6:	bdb0      	pop	{r4, r5, r7, pc}
 80066e8:	2000019c 	.word	0x2000019c
 80066ec:	20000118 	.word	0x20000118
 80066f0:	20000175 	.word	0x20000175
 80066f4:	20000008 	.word	0x20000008
 80066f8:	00002710 	.word	0x00002710
 80066fc:	20000194 	.word	0x20000194
 8006700:	20000198 	.word	0x20000198
 8006704:	2000000c 	.word	0x2000000c
 8006708:	40590000 	.word	0x40590000
 800670c:	20000010 	.word	0x20000010
 8006710:	2000019d 	.word	0x2000019d
 8006714:	50000800 	.word	0x50000800
 8006718:	08009324 	.word	0x08009324
 800671c:	200000fc 	.word	0x200000fc

08006720 <airMouseTick>:

void airMouseTick(void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
	ledCounter++;
 8006724:	4b19      	ldr	r3, [pc, #100]	@ (800678c <airMouseTick+0x6c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	4b18      	ldr	r3, [pc, #96]	@ (800678c <airMouseTick+0x6c>)
 800672c:	601a      	str	r2, [r3, #0]
	onCounter++;
 800672e:	4b18      	ldr	r3, [pc, #96]	@ (8006790 <airMouseTick+0x70>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	4b16      	ldr	r3, [pc, #88]	@ (8006790 <airMouseTick+0x70>)
 8006736:	601a      	str	r2, [r3, #0]
	if (ledCounter % 2000 == 0) {
 8006738:	4b14      	ldr	r3, [pc, #80]	@ (800678c <airMouseTick+0x6c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	22fa      	movs	r2, #250	@ 0xfa
 800673e:	00d1      	lsls	r1, r2, #3
 8006740:	0018      	movs	r0, r3
 8006742:	f7f9 fd6d 	bl	8000220 <__aeabi_uidivmod>
 8006746:	1e0b      	subs	r3, r1, #0
 8006748:	d109      	bne.n	800675e <airMouseTick+0x3e>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 800674a:	23a0      	movs	r3, #160	@ 0xa0
 800674c:	05db      	lsls	r3, r3, #23
 800674e:	2201      	movs	r2, #1
 8006750:	2102      	movs	r1, #2
 8006752:	0018      	movs	r0, r3
 8006754:	f7fc fe97 	bl	8003486 <HAL_GPIO_WritePin>
		onCounter = 0;
 8006758:	4b0d      	ldr	r3, [pc, #52]	@ (8006790 <airMouseTick+0x70>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
	}

	if (onCounter > 5)
 800675e:	4b0c      	ldr	r3, [pc, #48]	@ (8006790 <airMouseTick+0x70>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b05      	cmp	r3, #5
 8006764:	d906      	bls.n	8006774 <airMouseTick+0x54>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 8006766:	23a0      	movs	r3, #160	@ 0xa0
 8006768:	05db      	lsls	r3, r3, #23
 800676a:	2200      	movs	r2, #0
 800676c:	2102      	movs	r1, #2
 800676e:	0018      	movs	r0, r3
 8006770:	f7fc fe89 	bl	8003486 <HAL_GPIO_WritePin>

	kbd_scanning(&qwerty);
 8006774:	4b07      	ldr	r3, [pc, #28]	@ (8006794 <airMouseTick+0x74>)
 8006776:	0018      	movs	r0, r3
 8006778:	f001 f9ee 	bl	8007b58 <kbd_scanning>
	kbd_scanning(&mouseButtons);
 800677c:	4b06      	ldr	r3, [pc, #24]	@ (8006798 <airMouseTick+0x78>)
 800677e:	0018      	movs	r0, r3
 8006780:	f001 f9ea 	bl	8007b58 <kbd_scanning>
}
 8006784:	46c0      	nop			@ (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			@ (mov r8, r8)
 800678c:	200001a0 	.word	0x200001a0
 8006790:	200001a4 	.word	0x200001a4
 8006794:	20000134 	.word	0x20000134
 8006798:	20000154 	.word	0x20000154

0800679c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	0002      	movs	r2, r0
 80067a4:	1dbb      	adds	r3, r7, #6
 80067a6:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GYRO_INT_Pin) {
 80067a8:	1dbb      	adds	r3, r7, #6
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d102      	bne.n	80067b6 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		flagDrdyG = 1;
 80067b0:	4b03      	ldr	r3, [pc, #12]	@ (80067c0 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	701a      	strb	r2, [r3, #0]
	}
}
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b002      	add	sp, #8
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	46c0      	nop			@ (mov r8, r8)
 80067c0:	2000019c 	.word	0x2000019c

080067c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80067c4:	b590      	push	{r4, r7, lr}
 80067c6:	b08b      	sub	sp, #44	@ 0x2c
 80067c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ca:	2414      	movs	r4, #20
 80067cc:	193b      	adds	r3, r7, r4
 80067ce:	0018      	movs	r0, r3
 80067d0:	2314      	movs	r3, #20
 80067d2:	001a      	movs	r2, r3
 80067d4:	2100      	movs	r1, #0
 80067d6:	f001 fdbb 	bl	8008350 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80067da:	4b6b      	ldr	r3, [pc, #428]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 80067dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067de:	4b6a      	ldr	r3, [pc, #424]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 80067e0:	2104      	movs	r1, #4
 80067e2:	430a      	orrs	r2, r1
 80067e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80067e6:	4b68      	ldr	r3, [pc, #416]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 80067e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ea:	2204      	movs	r2, #4
 80067ec:	4013      	ands	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067f2:	4b65      	ldr	r3, [pc, #404]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 80067f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067f6:	4b64      	ldr	r3, [pc, #400]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 80067f8:	2101      	movs	r1, #1
 80067fa:	430a      	orrs	r2, r1
 80067fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80067fe:	4b62      	ldr	r3, [pc, #392]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 8006800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006802:	2201      	movs	r2, #1
 8006804:	4013      	ands	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800680a:	4b5f      	ldr	r3, [pc, #380]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 800680c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800680e:	4b5e      	ldr	r3, [pc, #376]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 8006810:	2102      	movs	r1, #2
 8006812:	430a      	orrs	r2, r1
 8006814:	635a      	str	r2, [r3, #52]	@ 0x34
 8006816:	4b5c      	ldr	r3, [pc, #368]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 8006818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800681a:	2202      	movs	r2, #2
 800681c:	4013      	ands	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]
 8006820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006822:	4b59      	ldr	r3, [pc, #356]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 8006824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006826:	4b58      	ldr	r3, [pc, #352]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 8006828:	2108      	movs	r1, #8
 800682a:	430a      	orrs	r2, r1
 800682c:	635a      	str	r2, [r3, #52]	@ 0x34
 800682e:	4b56      	ldr	r3, [pc, #344]	@ (8006988 <MX_GPIO_Init+0x1c4>)
 8006830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006832:	2208      	movs	r2, #8
 8006834:	4013      	ands	r3, r2
 8006836:	607b      	str	r3, [r7, #4]
 8006838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800683a:	23a0      	movs	r3, #160	@ 0xa0
 800683c:	05db      	lsls	r3, r3, #23
 800683e:	2200      	movs	r2, #0
 8006840:	2132      	movs	r1, #50	@ 0x32
 8006842:	0018      	movs	r0, r3
 8006844:	f7fc fe1f 	bl	8003486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_BOOT_GPIO_Port, ESP_BOOT_Pin, GPIO_PIN_SET);
 8006848:	2380      	movs	r3, #128	@ 0x80
 800684a:	01db      	lsls	r3, r3, #7
 800684c:	484f      	ldr	r0, [pc, #316]	@ (800698c <MX_GPIO_Init+0x1c8>)
 800684e:	2201      	movs	r2, #1
 8006850:	0019      	movs	r1, r3
 8006852:	f7fc fe18 	bl	8003486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 8006856:	2380      	movs	r3, #128	@ 0x80
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	484c      	ldr	r0, [pc, #304]	@ (800698c <MX_GPIO_Init+0x1c8>)
 800685c:	2200      	movs	r2, #0
 800685e:	0019      	movs	r1, r3
 8006860:	f7fc fe11 	bl	8003486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KBD_ROW1_Pin|KBD_ROW2_Pin|KBD_ROW3_Pin|KBD_ROW4_Pin
 8006864:	4b4a      	ldr	r3, [pc, #296]	@ (8006990 <MX_GPIO_Init+0x1cc>)
 8006866:	2200      	movs	r2, #0
 8006868:	213e      	movs	r1, #62	@ 0x3e
 800686a:	0018      	movs	r0, r3
 800686c:	f7fc fe0b 	bl	8003486 <HAL_GPIO_WritePin>
                          |KBD_ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MUS_PRC_Pin MUS_HOME_Pin MUS_DPI_Pin MUS_FWD_Pin
                           MUS_BCK_Pin MUS_LB_Pin MUS_MB_Pin MUS_RB_Pin
                           MUS_UP_Pin MUS_DN_Pin */
  GPIO_InitStruct.Pin = MUS_PRC_Pin|MUS_HOME_Pin|MUS_DPI_Pin|MUS_FWD_Pin
 8006870:	193b      	adds	r3, r7, r4
 8006872:	4a48      	ldr	r2, [pc, #288]	@ (8006994 <MX_GPIO_Init+0x1d0>)
 8006874:	601a      	str	r2, [r3, #0]
                          |MUS_BCK_Pin|MUS_LB_Pin|MUS_MB_Pin|MUS_RB_Pin
                          |MUS_UP_Pin|MUS_DN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006876:	193b      	adds	r3, r7, r4
 8006878:	2200      	movs	r2, #0
 800687a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800687c:	193b      	adds	r3, r7, r4
 800687e:	2201      	movs	r2, #1
 8006880:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006882:	193b      	adds	r3, r7, r4
 8006884:	4a44      	ldr	r2, [pc, #272]	@ (8006998 <MX_GPIO_Init+0x1d4>)
 8006886:	0019      	movs	r1, r3
 8006888:	0010      	movs	r0, r2
 800688a:	f7fc fbab 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 800688e:	193b      	adds	r3, r7, r4
 8006890:	2201      	movs	r2, #1
 8006892:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006894:	193b      	adds	r3, r7, r4
 8006896:	2288      	movs	r2, #136	@ 0x88
 8006898:	0352      	lsls	r2, r2, #13
 800689a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800689c:	193b      	adds	r3, r7, r4
 800689e:	2202      	movs	r2, #2
 80068a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 80068a2:	193a      	adds	r2, r7, r4
 80068a4:	23a0      	movs	r3, #160	@ 0xa0
 80068a6:	05db      	lsls	r3, r3, #23
 80068a8:	0011      	movs	r1, r2
 80068aa:	0018      	movs	r0, r3
 80068ac:	f7fc fb9a 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin|LED_GREEN_Pin;
 80068b0:	193b      	adds	r3, r7, r4
 80068b2:	2232      	movs	r2, #50	@ 0x32
 80068b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068b6:	193b      	adds	r3, r7, r4
 80068b8:	2201      	movs	r2, #1
 80068ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068bc:	193b      	adds	r3, r7, r4
 80068be:	2200      	movs	r2, #0
 80068c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068c2:	193b      	adds	r3, r7, r4
 80068c4:	2200      	movs	r2, #0
 80068c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c8:	193a      	adds	r2, r7, r4
 80068ca:	23a0      	movs	r3, #160	@ 0xa0
 80068cc:	05db      	lsls	r3, r3, #23
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7fc fb87 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_COL1_Pin KBD_COL2_Pin KBD_COL10_Pin KBD_COL3_Pin
                           KBD_COL4_Pin KBD_COL5_Pin KBD_COL6_Pin KBD_COL7_Pin
                           KBD_COL8_Pin KBD_COL9_Pin */
  GPIO_InitStruct.Pin = KBD_COL1_Pin|KBD_COL2_Pin|KBD_COL10_Pin|KBD_COL3_Pin
 80068d6:	193b      	adds	r3, r7, r4
 80068d8:	4a30      	ldr	r2, [pc, #192]	@ (800699c <MX_GPIO_Init+0x1d8>)
 80068da:	601a      	str	r2, [r3, #0]
                          |KBD_COL4_Pin|KBD_COL5_Pin|KBD_COL6_Pin|KBD_COL7_Pin
                          |KBD_COL8_Pin|KBD_COL9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068dc:	193b      	adds	r3, r7, r4
 80068de:	2200      	movs	r2, #0
 80068e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e2:	193b      	adds	r3, r7, r4
 80068e4:	2200      	movs	r2, #0
 80068e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068e8:	193b      	adds	r3, r7, r4
 80068ea:	4a28      	ldr	r2, [pc, #160]	@ (800698c <MX_GPIO_Init+0x1c8>)
 80068ec:	0019      	movs	r1, r3
 80068ee:	0010      	movs	r0, r2
 80068f0:	f7fc fb78 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BOOT_Pin */
  GPIO_InitStruct.Pin = ESP_BOOT_Pin;
 80068f4:	0021      	movs	r1, r4
 80068f6:	187b      	adds	r3, r7, r1
 80068f8:	2280      	movs	r2, #128	@ 0x80
 80068fa:	01d2      	lsls	r2, r2, #7
 80068fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80068fe:	000c      	movs	r4, r1
 8006900:	193b      	adds	r3, r7, r4
 8006902:	2211      	movs	r2, #17
 8006904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006906:	193b      	adds	r3, r7, r4
 8006908:	2200      	movs	r2, #0
 800690a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800690c:	193b      	adds	r3, r7, r4
 800690e:	2200      	movs	r2, #0
 8006910:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ESP_BOOT_GPIO_Port, &GPIO_InitStruct);
 8006912:	193b      	adds	r3, r7, r4
 8006914:	4a1d      	ldr	r2, [pc, #116]	@ (800698c <MX_GPIO_Init+0x1c8>)
 8006916:	0019      	movs	r1, r3
 8006918:	0010      	movs	r0, r2
 800691a:	f7fc fb63 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_EN_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 800691e:	0021      	movs	r1, r4
 8006920:	187b      	adds	r3, r7, r1
 8006922:	2280      	movs	r2, #128	@ 0x80
 8006924:	0212      	lsls	r2, r2, #8
 8006926:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006928:	000c      	movs	r4, r1
 800692a:	193b      	adds	r3, r7, r4
 800692c:	2201      	movs	r2, #1
 800692e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006930:	193b      	adds	r3, r7, r4
 8006932:	2201      	movs	r2, #1
 8006934:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006936:	193b      	adds	r3, r7, r4
 8006938:	2200      	movs	r2, #0
 800693a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 800693c:	193b      	adds	r3, r7, r4
 800693e:	4a13      	ldr	r2, [pc, #76]	@ (800698c <MX_GPIO_Init+0x1c8>)
 8006940:	0019      	movs	r1, r3
 8006942:	0010      	movs	r0, r2
 8006944:	f7fc fb4e 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_ROW1_Pin KBD_ROW2_Pin KBD_ROW3_Pin KBD_ROW4_Pin
                           KBD_ROW5_Pin */
  GPIO_InitStruct.Pin = KBD_ROW1_Pin|KBD_ROW2_Pin|KBD_ROW3_Pin|KBD_ROW4_Pin
 8006948:	0021      	movs	r1, r4
 800694a:	187b      	adds	r3, r7, r1
 800694c:	223e      	movs	r2, #62	@ 0x3e
 800694e:	601a      	str	r2, [r3, #0]
                          |KBD_ROW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006950:	187b      	adds	r3, r7, r1
 8006952:	2201      	movs	r2, #1
 8006954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006956:	187b      	adds	r3, r7, r1
 8006958:	2200      	movs	r2, #0
 800695a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800695c:	187b      	adds	r3, r7, r1
 800695e:	2200      	movs	r2, #0
 8006960:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006962:	187b      	adds	r3, r7, r1
 8006964:	4a0a      	ldr	r2, [pc, #40]	@ (8006990 <MX_GPIO_Init+0x1cc>)
 8006966:	0019      	movs	r1, r3
 8006968:	0010      	movs	r0, r2
 800696a:	f7fc fb3b 	bl	8002fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800696e:	2200      	movs	r2, #0
 8006970:	2100      	movs	r1, #0
 8006972:	2005      	movs	r0, #5
 8006974:	f7fc fb04 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8006978:	2005      	movs	r0, #5
 800697a:	f7fc fb16 	bl	8002faa <HAL_NVIC_EnableIRQ>

}
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	46bd      	mov	sp, r7
 8006982:	b00b      	add	sp, #44	@ 0x2c
 8006984:	bd90      	pop	{r4, r7, pc}
 8006986:	46c0      	nop			@ (mov r8, r8)
 8006988:	40021000 	.word	0x40021000
 800698c:	50000400 	.word	0x50000400
 8006990:	50000c00 	.word	0x50000c00
 8006994:	0000ffc0 	.word	0x0000ffc0
 8006998:	50000800 	.word	0x50000800
 800699c:	000007fe 	.word	0x000007fe

080069a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80069a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006a18 <MX_I2C1_Init+0x78>)
 80069a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 80069aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069ac:	4a1b      	ldr	r2, [pc, #108]	@ (8006a1c <MX_I2C1_Init+0x7c>)
 80069ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80069b0:	4b18      	ldr	r3, [pc, #96]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80069b6:	4b17      	ldr	r3, [pc, #92]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80069bc:	4b15      	ldr	r3, [pc, #84]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069be:	2200      	movs	r2, #0
 80069c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80069c2:	4b14      	ldr	r3, [pc, #80]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80069c8:	4b12      	ldr	r3, [pc, #72]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80069ce:	4b11      	ldr	r3, [pc, #68]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80069d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80069da:	4b0e      	ldr	r3, [pc, #56]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069dc:	0018      	movs	r0, r3
 80069de:	f7fc fda3 	bl	8003528 <HAL_I2C_Init>
 80069e2:	1e03      	subs	r3, r0, #0
 80069e4:	d001      	beq.n	80069ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80069e6:	f000 f8ee 	bl	8006bc6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80069ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069ec:	2100      	movs	r1, #0
 80069ee:	0018      	movs	r0, r3
 80069f0:	f7fd fb9e 	bl	8004130 <HAL_I2CEx_ConfigAnalogFilter>
 80069f4:	1e03      	subs	r3, r0, #0
 80069f6:	d001      	beq.n	80069fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80069f8:	f000 f8e5 	bl	8006bc6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80069fc:	4b05      	ldr	r3, [pc, #20]	@ (8006a14 <MX_I2C1_Init+0x74>)
 80069fe:	2100      	movs	r1, #0
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7fd fbe1 	bl	80041c8 <HAL_I2CEx_ConfigDigitalFilter>
 8006a06:	1e03      	subs	r3, r0, #0
 8006a08:	d001      	beq.n	8006a0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006a0a:	f000 f8dc 	bl	8006bc6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006a0e:	46c0      	nop			@ (mov r8, r8)
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	200001a8 	.word	0x200001a8
 8006a18:	40005400 	.word	0x40005400
 8006a1c:	00c12166 	.word	0x00c12166

08006a20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b097      	sub	sp, #92	@ 0x5c
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a28:	2344      	movs	r3, #68	@ 0x44
 8006a2a:	18fb      	adds	r3, r7, r3
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	2314      	movs	r3, #20
 8006a30:	001a      	movs	r2, r3
 8006a32:	2100      	movs	r1, #0
 8006a34:	f001 fc8c 	bl	8008350 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006a38:	2410      	movs	r4, #16
 8006a3a:	193b      	adds	r3, r7, r4
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	2334      	movs	r3, #52	@ 0x34
 8006a40:	001a      	movs	r2, r3
 8006a42:	2100      	movs	r1, #0
 8006a44:	f001 fc84 	bl	8008350 <memset>
  if(i2cHandle->Instance==I2C1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a23      	ldr	r2, [pc, #140]	@ (8006adc <HAL_I2C_MspInit+0xbc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d13f      	bne.n	8006ad2 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006a52:	193b      	adds	r3, r7, r4
 8006a54:	2220      	movs	r2, #32
 8006a56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006a58:	193b      	adds	r3, r7, r4
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a5e:	193b      	adds	r3, r7, r4
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7fe f90d 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 8006a66:	1e03      	subs	r3, r0, #0
 8006a68:	d001      	beq.n	8006a6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006a6a:	f000 f8ac 	bl	8006bc6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae0 <HAL_I2C_MspInit+0xc0>)
 8006a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae0 <HAL_I2C_MspInit+0xc0>)
 8006a74:	2101      	movs	r1, #1
 8006a76:	430a      	orrs	r2, r1
 8006a78:	635a      	str	r2, [r3, #52]	@ 0x34
 8006a7a:	4b19      	ldr	r3, [pc, #100]	@ (8006ae0 <HAL_I2C_MspInit+0xc0>)
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4013      	ands	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006a86:	2144      	movs	r1, #68	@ 0x44
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	22c0      	movs	r2, #192	@ 0xc0
 8006a8c:	00d2      	lsls	r2, r2, #3
 8006a8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a90:	187b      	adds	r3, r7, r1
 8006a92:	2212      	movs	r2, #18
 8006a94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a96:	187b      	adds	r3, r7, r1
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a9c:	187b      	adds	r3, r7, r1
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	2206      	movs	r2, #6
 8006aa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa8:	187a      	adds	r2, r7, r1
 8006aaa:	23a0      	movs	r3, #160	@ 0xa0
 8006aac:	05db      	lsls	r3, r3, #23
 8006aae:	0011      	movs	r1, r2
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f7fc fa97 	bl	8002fe4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <HAL_I2C_MspInit+0xc0>)
 8006ab8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aba:	4b09      	ldr	r3, [pc, #36]	@ (8006ae0 <HAL_I2C_MspInit+0xc0>)
 8006abc:	2180      	movs	r1, #128	@ 0x80
 8006abe:	0389      	lsls	r1, r1, #14
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ac4:	4b06      	ldr	r3, [pc, #24]	@ (8006ae0 <HAL_I2C_MspInit+0xc0>)
 8006ac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ac8:	2380      	movs	r3, #128	@ 0x80
 8006aca:	039b      	lsls	r3, r3, #14
 8006acc:	4013      	ands	r3, r2
 8006ace:	60bb      	str	r3, [r7, #8]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006ad2:	46c0      	nop			@ (mov r8, r8)
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b017      	add	sp, #92	@ 0x5c
 8006ad8:	bd90      	pop	{r4, r7, pc}
 8006ada:	46c0      	nop			@ (mov r8, r8)
 8006adc:	40005400 	.word	0x40005400
 8006ae0:	40021000 	.word	0x40021000

08006ae4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006ae8:	f7fb fc76 	bl	80023d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006aec:	f000 f80d 	bl	8006b0a <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006af0:	f7ff fe68 	bl	80067c4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8006af4:	f000 f8f2 	bl	8006cdc <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8006af8:	f7ff ff52 	bl	80069a0 <MX_I2C1_Init>
	MX_ADC1_Init();
 8006afc:	f7ff faa4 	bl	8006048 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	airMouseSetup();
 8006b00:	f7ff fb52 	bl	80061a8 <airMouseSetup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		airMouseProcess();
 8006b04:	f7ff fcc6 	bl	8006494 <airMouseProcess>
 8006b08:	e7fc      	b.n	8006b04 <main+0x20>

08006b0a <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8006b0a:	b590      	push	{r4, r7, lr}
 8006b0c:	b093      	sub	sp, #76	@ 0x4c
 8006b0e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006b10:	2410      	movs	r4, #16
 8006b12:	193b      	adds	r3, r7, r4
 8006b14:	0018      	movs	r0, r3
 8006b16:	2338      	movs	r3, #56	@ 0x38
 8006b18:	001a      	movs	r2, r3
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	f001 fc18 	bl	8008350 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006b20:	003b      	movs	r3, r7
 8006b22:	0018      	movs	r0, r3
 8006b24:	2310      	movs	r3, #16
 8006b26:	001a      	movs	r2, r3
 8006b28:	2100      	movs	r1, #0
 8006b2a:	f001 fc11 	bl	8008350 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b2e:	2380      	movs	r3, #128	@ 0x80
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	0018      	movs	r0, r3
 8006b34:	f7fd fb94 	bl	8004260 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006b38:	193b      	adds	r3, r7, r4
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006b3e:	193b      	adds	r3, r7, r4
 8006b40:	2280      	movs	r2, #128	@ 0x80
 8006b42:	0052      	lsls	r2, r2, #1
 8006b44:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006b46:	0021      	movs	r1, r4
 8006b48:	187b      	adds	r3, r7, r1
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006b4e:	187b      	adds	r3, r7, r1
 8006b50:	2240      	movs	r2, #64	@ 0x40
 8006b52:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b54:	187b      	adds	r3, r7, r1
 8006b56:	2202      	movs	r2, #2
 8006b58:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006b5a:	187b      	adds	r3, r7, r1
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006b60:	187b      	adds	r3, r7, r1
 8006b62:	2200      	movs	r2, #0
 8006b64:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8006b66:	187b      	adds	r3, r7, r1
 8006b68:	2208      	movs	r2, #8
 8006b6a:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b6c:	187b      	adds	r3, r7, r1
 8006b6e:	2280      	movs	r2, #128	@ 0x80
 8006b70:	0292      	lsls	r2, r2, #10
 8006b72:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006b74:	187b      	adds	r3, r7, r1
 8006b76:	2280      	movs	r2, #128	@ 0x80
 8006b78:	0492      	lsls	r2, r2, #18
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006b7c:	187b      	adds	r3, r7, r1
 8006b7e:	2280      	movs	r2, #128	@ 0x80
 8006b80:	0592      	lsls	r2, r2, #22
 8006b82:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006b84:	187b      	adds	r3, r7, r1
 8006b86:	0018      	movs	r0, r3
 8006b88:	f7fd fbb6 	bl	80042f8 <HAL_RCC_OscConfig>
 8006b8c:	1e03      	subs	r3, r0, #0
 8006b8e:	d001      	beq.n	8006b94 <SystemClock_Config+0x8a>
		Error_Handler();
 8006b90:	f000 f819 	bl	8006bc6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006b94:	003b      	movs	r3, r7
 8006b96:	2207      	movs	r2, #7
 8006b98:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b9a:	003b      	movs	r3, r7
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ba0:	003b      	movs	r3, r7
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006ba6:	003b      	movs	r3, r7
 8006ba8:	2200      	movs	r2, #0
 8006baa:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006bac:	003b      	movs	r3, r7
 8006bae:	2102      	movs	r1, #2
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f7fd febb 	bl	800492c <HAL_RCC_ClockConfig>
 8006bb6:	1e03      	subs	r3, r0, #0
 8006bb8:	d001      	beq.n	8006bbe <SystemClock_Config+0xb4>
		Error_Handler();
 8006bba:	f000 f804 	bl	8006bc6 <Error_Handler>
	}
}
 8006bbe:	46c0      	nop			@ (mov r8, r8)
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b013      	add	sp, #76	@ 0x4c
 8006bc4:	bd90      	pop	{r4, r7, pc}

08006bc6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006bca:	b672      	cpsid	i
}
 8006bcc:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006bce:	46c0      	nop			@ (mov r8, r8)
 8006bd0:	e7fd      	b.n	8006bce <Error_Handler+0x8>
	...

08006bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bda:	4b0f      	ldr	r3, [pc, #60]	@ (8006c18 <HAL_MspInit+0x44>)
 8006bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bde:	4b0e      	ldr	r3, [pc, #56]	@ (8006c18 <HAL_MspInit+0x44>)
 8006be0:	2101      	movs	r1, #1
 8006be2:	430a      	orrs	r2, r1
 8006be4:	641a      	str	r2, [r3, #64]	@ 0x40
 8006be6:	4b0c      	ldr	r3, [pc, #48]	@ (8006c18 <HAL_MspInit+0x44>)
 8006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bea:	2201      	movs	r2, #1
 8006bec:	4013      	ands	r3, r2
 8006bee:	607b      	str	r3, [r7, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bf2:	4b09      	ldr	r3, [pc, #36]	@ (8006c18 <HAL_MspInit+0x44>)
 8006bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bf6:	4b08      	ldr	r3, [pc, #32]	@ (8006c18 <HAL_MspInit+0x44>)
 8006bf8:	2180      	movs	r1, #128	@ 0x80
 8006bfa:	0549      	lsls	r1, r1, #21
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006c00:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <HAL_MspInit+0x44>)
 8006c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c04:	2380      	movs	r3, #128	@ 0x80
 8006c06:	055b      	lsls	r3, r3, #21
 8006c08:	4013      	ands	r3, r2
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c0e:	46c0      	nop			@ (mov r8, r8)
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b002      	add	sp, #8
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			@ (mov r8, r8)
 8006c18:	40021000 	.word	0x40021000

08006c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006c20:	46c0      	nop			@ (mov r8, r8)
 8006c22:	e7fd      	b.n	8006c20 <NMI_Handler+0x4>

08006c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c28:	46c0      	nop			@ (mov r8, r8)
 8006c2a:	e7fd      	b.n	8006c28 <HardFault_Handler+0x4>

08006c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006c30:	46c0      	nop			@ (mov r8, r8)
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c44:	f7fb fc32 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  airMouseTick();
 8006c48:	f7ff fd6a 	bl	8006720 <airMouseTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8006c4c:	46c0      	nop			@ (mov r8, r8)
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8006c56:	2001      	movs	r0, #1
 8006c58:	f7fc fc32 	bl	80034c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8006c5c:	46c0      	nop			@ (mov r8, r8)
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c6c:	4a14      	ldr	r2, [pc, #80]	@ (8006cc0 <_sbrk+0x5c>)
 8006c6e:	4b15      	ldr	r3, [pc, #84]	@ (8006cc4 <_sbrk+0x60>)
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c78:	4b13      	ldr	r3, [pc, #76]	@ (8006cc8 <_sbrk+0x64>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c80:	4b11      	ldr	r3, [pc, #68]	@ (8006cc8 <_sbrk+0x64>)
 8006c82:	4a12      	ldr	r2, [pc, #72]	@ (8006ccc <_sbrk+0x68>)
 8006c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c86:	4b10      	ldr	r3, [pc, #64]	@ (8006cc8 <_sbrk+0x64>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	18d3      	adds	r3, r2, r3
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d207      	bcs.n	8006ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c94:	f001 fb76 	bl	8008384 <__errno>
 8006c98:	0003      	movs	r3, r0
 8006c9a:	220c      	movs	r2, #12
 8006c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	425b      	negs	r3, r3
 8006ca2:	e009      	b.n	8006cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ca4:	4b08      	ldr	r3, [pc, #32]	@ (8006cc8 <_sbrk+0x64>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006caa:	4b07      	ldr	r3, [pc, #28]	@ (8006cc8 <_sbrk+0x64>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	18d2      	adds	r2, r2, r3
 8006cb2:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <_sbrk+0x64>)
 8006cb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
}
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b006      	add	sp, #24
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20009000 	.word	0x20009000
 8006cc4:	00000400 	.word	0x00000400
 8006cc8:	200001fc 	.word	0x200001fc
 8006ccc:	200003e0 	.word	0x200003e0

08006cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006cd4:	46c0      	nop			@ (mov r8, r8)
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ce0:	4b23      	ldr	r3, [pc, #140]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006ce2:	4a24      	ldr	r2, [pc, #144]	@ (8006d74 <MX_USART1_UART_Init+0x98>)
 8006ce4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006ce6:	4b22      	ldr	r3, [pc, #136]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006ce8:	22e1      	movs	r2, #225	@ 0xe1
 8006cea:	0252      	lsls	r2, r2, #9
 8006cec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006cee:	4b20      	ldr	r3, [pc, #128]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006d00:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d02:	220c      	movs	r2, #12
 8006d04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d06:	4b1a      	ldr	r3, [pc, #104]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d0c:	4b18      	ldr	r3, [pc, #96]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006d12:	4b17      	ldr	r3, [pc, #92]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006d18:	4b15      	ldr	r3, [pc, #84]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d1e:	4b14      	ldr	r3, [pc, #80]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006d24:	4b12      	ldr	r3, [pc, #72]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7fe f962 	bl	8004ff0 <HAL_UART_Init>
 8006d2c:	1e03      	subs	r3, r0, #0
 8006d2e:	d001      	beq.n	8006d34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006d30:	f7ff ff49 	bl	8006bc6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d34:	4b0e      	ldr	r3, [pc, #56]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d36:	2100      	movs	r1, #0
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f7ff f8a5 	bl	8005e88 <HAL_UARTEx_SetTxFifoThreshold>
 8006d3e:	1e03      	subs	r3, r0, #0
 8006d40:	d001      	beq.n	8006d46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006d42:	f7ff ff40 	bl	8006bc6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d46:	4b0a      	ldr	r3, [pc, #40]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d48:	2100      	movs	r1, #0
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f7ff f8dc 	bl	8005f08 <HAL_UARTEx_SetRxFifoThreshold>
 8006d50:	1e03      	subs	r3, r0, #0
 8006d52:	d001      	beq.n	8006d58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006d54:	f7ff ff37 	bl	8006bc6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006d58:	4b05      	ldr	r3, [pc, #20]	@ (8006d70 <MX_USART1_UART_Init+0x94>)
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	f7ff f85a 	bl	8005e14 <HAL_UARTEx_DisableFifoMode>
 8006d60:	1e03      	subs	r3, r0, #0
 8006d62:	d001      	beq.n	8006d68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006d64:	f7ff ff2f 	bl	8006bc6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006d68:	46c0      	nop			@ (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	20000200 	.word	0x20000200
 8006d74:	40013800 	.word	0x40013800

08006d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b097      	sub	sp, #92	@ 0x5c
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d80:	2344      	movs	r3, #68	@ 0x44
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	0018      	movs	r0, r3
 8006d86:	2314      	movs	r3, #20
 8006d88:	001a      	movs	r2, r3
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	f001 fae0 	bl	8008350 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d90:	2410      	movs	r4, #16
 8006d92:	193b      	adds	r3, r7, r4
 8006d94:	0018      	movs	r0, r3
 8006d96:	2334      	movs	r3, #52	@ 0x34
 8006d98:	001a      	movs	r2, r3
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	f001 fad8 	bl	8008350 <memset>
  if(uartHandle->Instance==USART1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a22      	ldr	r2, [pc, #136]	@ (8006e30 <HAL_UART_MspInit+0xb8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d13d      	bne.n	8006e26 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006daa:	193b      	adds	r3, r7, r4
 8006dac:	2201      	movs	r2, #1
 8006dae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8006db0:	193b      	adds	r3, r7, r4
 8006db2:	2200      	movs	r2, #0
 8006db4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006db6:	193b      	adds	r3, r7, r4
 8006db8:	0018      	movs	r0, r3
 8006dba:	f7fd ff61 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 8006dbe:	1e03      	subs	r3, r0, #0
 8006dc0:	d001      	beq.n	8006dc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006dc2:	f7ff ff00 	bl	8006bc6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e34 <HAL_UART_MspInit+0xbc>)
 8006dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dca:	4b1a      	ldr	r3, [pc, #104]	@ (8006e34 <HAL_UART_MspInit+0xbc>)
 8006dcc:	2180      	movs	r1, #128	@ 0x80
 8006dce:	01c9      	lsls	r1, r1, #7
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8006dd4:	4b17      	ldr	r3, [pc, #92]	@ (8006e34 <HAL_UART_MspInit+0xbc>)
 8006dd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dd8:	2380      	movs	r3, #128	@ 0x80
 8006dda:	01db      	lsls	r3, r3, #7
 8006ddc:	4013      	ands	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006de2:	4b14      	ldr	r3, [pc, #80]	@ (8006e34 <HAL_UART_MspInit+0xbc>)
 8006de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006de6:	4b13      	ldr	r3, [pc, #76]	@ (8006e34 <HAL_UART_MspInit+0xbc>)
 8006de8:	2104      	movs	r1, #4
 8006dea:	430a      	orrs	r2, r1
 8006dec:	635a      	str	r2, [r3, #52]	@ 0x34
 8006dee:	4b11      	ldr	r3, [pc, #68]	@ (8006e34 <HAL_UART_MspInit+0xbc>)
 8006df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df2:	2204      	movs	r2, #4
 8006df4:	4013      	ands	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]
 8006df8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8006dfa:	2144      	movs	r1, #68	@ 0x44
 8006dfc:	187b      	adds	r3, r7, r1
 8006dfe:	2230      	movs	r2, #48	@ 0x30
 8006e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e02:	187b      	adds	r3, r7, r1
 8006e04:	2202      	movs	r2, #2
 8006e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e08:	187b      	adds	r3, r7, r1
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e0e:	187b      	adds	r3, r7, r1
 8006e10:	2200      	movs	r2, #0
 8006e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006e14:	187b      	adds	r3, r7, r1
 8006e16:	2201      	movs	r2, #1
 8006e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e1a:	187b      	adds	r3, r7, r1
 8006e1c:	4a06      	ldr	r2, [pc, #24]	@ (8006e38 <HAL_UART_MspInit+0xc0>)
 8006e1e:	0019      	movs	r1, r3
 8006e20:	0010      	movs	r0, r2
 8006e22:	f7fc f8df 	bl	8002fe4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b017      	add	sp, #92	@ 0x5c
 8006e2c:	bd90      	pop	{r4, r7, pc}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	40013800 	.word	0x40013800
 8006e34:	40021000 	.word	0x40021000
 8006e38:	50000800 	.word	0x50000800

08006e3c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a08      	ldr	r2, [pc, #32]	@ (8006e6c <HAL_UART_MspDeInit+0x30>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d10a      	bne.n	8006e64 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006e4e:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <HAL_UART_MspDeInit+0x34>)
 8006e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e52:	4b07      	ldr	r3, [pc, #28]	@ (8006e70 <HAL_UART_MspDeInit+0x34>)
 8006e54:	4907      	ldr	r1, [pc, #28]	@ (8006e74 <HAL_UART_MspDeInit+0x38>)
 8006e56:	400a      	ands	r2, r1
 8006e58:	641a      	str	r2, [r3, #64]	@ 0x40

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, ESP_TX_Pin|ESP_RX_Pin);
 8006e5a:	4b07      	ldr	r3, [pc, #28]	@ (8006e78 <HAL_UART_MspDeInit+0x3c>)
 8006e5c:	2130      	movs	r1, #48	@ 0x30
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f7fc fa24 	bl	80032ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006e64:	46c0      	nop			@ (mov r8, r8)
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b002      	add	sp, #8
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40013800 	.word	0x40013800
 8006e70:	40021000 	.word	0x40021000
 8006e74:	ffffbfff 	.word	0xffffbfff
 8006e78:	50000800 	.word	0x50000800

08006e7c <HAL_UART_ChangeSpeed>:

/* USER CODE BEGIN 1 */

void HAL_UART_ChangeSpeed(UART_HandleTypeDef *huart, uint32_t baudrate){
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]

	HAL_UART_DeInit(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7fe f907 	bl	800509c <HAL_UART_DeInit>

	huart->Init.BaudRate = baudrate;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]

	if(HAL_UART_Init(huart)!=HAL_OK)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	0018      	movs	r0, r3
 8006e98:	f7fe f8aa 	bl	8004ff0 <HAL_UART_Init>
 8006e9c:	1e03      	subs	r3, r0, #0
 8006e9e:	d001      	beq.n	8006ea4 <HAL_UART_ChangeSpeed+0x28>
		Error_Handler();
 8006ea0:	f7ff fe91 	bl	8006bc6 <Error_Handler>

}
 8006ea4:	46c0      	nop			@ (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <uartSend>:
//---------------------------IMPLICIT FUNCTIONS---------------------------
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
espat_state_t uartSend(espat_uartInstance_t *uart, char *data, uint32_t size) {
 8006eac:	b5b0      	push	{r4, r5, r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef state = HAL_OK;
 8006eb8:	2117      	movs	r1, #23
 8006eba:	187b      	adds	r3, r7, r1
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]

	state = HAL_UART_Transmit(uart->uart, (uint8_t*) data, size,
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	000d      	movs	r5, r1
 8006ece:	187c      	adds	r4, r7, r1
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	f7fe f923 	bl	800511c <HAL_UART_Transmit>
 8006ed6:	0003      	movs	r3, r0
 8006ed8:	7023      	strb	r3, [r4, #0]
			uart->sendTimeout);

	if (state == HAL_OK)
 8006eda:	197b      	adds	r3, r7, r5
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <uartSend+0x3a>
		return ESPAT_STATE_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e00e      	b.n	8006f04 <uartSend+0x58>
	else if (state == HAL_TIMEOUT)
 8006ee6:	2317      	movs	r3, #23
 8006ee8:	18fb      	adds	r3, r7, r3
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d101      	bne.n	8006ef4 <uartSend+0x48>
		return ESPAT_STATE_TIMEOUT;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e007      	b.n	8006f04 <uartSend+0x58>
	else if (state == HAL_BUSY)
 8006ef4:	2317      	movs	r3, #23
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d101      	bne.n	8006f02 <uartSend+0x56>
		return ESPAT_STATE_BUSY;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e000      	b.n	8006f04 <uartSend+0x58>
	else
		return ESPAT_STATE_ERR;
 8006f02:	2301      	movs	r3, #1
}
 8006f04:	0018      	movs	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	b006      	add	sp, #24
 8006f0a:	bdb0      	pop	{r4, r5, r7, pc}

08006f0c <uartReceive>:

//port
espat_state_t uartReceive(espat_uartInstance_t *uart, char *data, uint32_t size) {
 8006f0c:	b5b0      	push	{r4, r5, r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef state;

	state = HAL_UART_Receive(uart->uart, (uint8_t*) data, size,
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	2517      	movs	r5, #23
 8006f26:	197c      	adds	r4, r7, r5
 8006f28:	68b9      	ldr	r1, [r7, #8]
 8006f2a:	f7fe f99b 	bl	8005264 <HAL_UART_Receive>
 8006f2e:	0003      	movs	r3, r0
 8006f30:	7023      	strb	r3, [r4, #0]
			uart->receiveTimeout);

	if (state == HAL_OK)
 8006f32:	197b      	adds	r3, r7, r5
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <uartReceive+0x32>
		return ESPAT_STATE_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e007      	b.n	8006f4e <uartReceive+0x42>
	else if (state == HAL_TIMEOUT)
 8006f3e:	2317      	movs	r3, #23
 8006f40:	18fb      	adds	r3, r7, r3
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d101      	bne.n	8006f4c <uartReceive+0x40>
		return ESPAT_STATE_TIMEOUT;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e000      	b.n	8006f4e <uartReceive+0x42>
	else
		return ESPAT_STATE_ERR;
 8006f4c:	2301      	movs	r3, #1
}
 8006f4e:	0018      	movs	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b006      	add	sp, #24
 8006f54:	bdb0      	pop	{r4, r5, r7, pc}

08006f56 <espAt_writePin>:
		return ESPAT_RESET;
	else
		return ESPAT_SET;
}
//port
void espAt_writePin(espat_pin_t *pin, espat_pinState_t state) {
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	000a      	movs	r2, r1
 8006f60:	1cfb      	adds	r3, r7, #3
 8006f62:	701a      	strb	r2, [r3, #0]
	if (state == ESPAT_RESET)
 8006f64:	1cfb      	adds	r3, r7, #3
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <espAt_writePin+0x2a>
		HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2200      	movs	r2, #0
 8006f78:	0019      	movs	r1, r3
 8006f7a:	f7fc fa84 	bl	8003486 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
}
 8006f7e:	e008      	b.n	8006f92 <espAt_writePin+0x3c>
		HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	0019      	movs	r1, r3
 8006f8e:	f7fc fa7a 	bl	8003486 <HAL_GPIO_WritePin>
}
 8006f92:	46c0      	nop			@ (mov r8, r8)
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b002      	add	sp, #8
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <espAt_delay>:
#endif

//port
void espAt_delay(uint32_t delay) {
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f7fb fa9d 	bl	80024e4 <HAL_Delay>
}
 8006faa:	46c0      	nop			@ (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b002      	add	sp, #8
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <espAt_init>:
 * @param: timout for receive
 *
 * @retval: always ESPATHID_OK
 */
espat_state_t espAt_init(espat_radio_t *radio, UART_HandleTypeDef *uart,
		uint32_t txTimeout, uint32_t rxTimeout) { //port
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
 8006fbe:	603b      	str	r3, [r7, #0]

	radio->espUart.uart = uart;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	601a      	str	r2, [r3, #0]
	radio->espUart.sendTimeout = txTimeout;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	605a      	str	r2, [r3, #4]
	radio->espUart.receiveTimeout = rxTimeout;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	609a      	str	r2, [r3, #8]

#if (EN_SUPPORT == 1)
	radio->pinEn.port = NULL;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	615a      	str	r2, [r3, #20]
#endif

#if (BOOT_SUPPORT == 1)
	radio->pinBoot.port = NULL;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	60da      	str	r2, [r3, #12]
#endif

	return ESPAT_STATE_OK;
 8006fde:	2300      	movs	r3, #0

}
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b004      	add	sp, #16
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <espAt_sendCommand>:
 *
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendCommand(espat_radio_t *radio, char *command) {
 8006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fea:	46c6      	mov	lr, r8
 8006fec:	b500      	push	{lr}
 8006fee:	b08c      	sub	sp, #48	@ 0x30
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	61f8      	str	r0, [r7, #28]
 8006ff4:	61b9      	str	r1, [r7, #24]
 8006ff6:	466b      	mov	r3, sp
 8006ff8:	4698      	mov	r8, r3
	//check if command and string are valid
	if (command == NULL)
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <espAt_sendCommand+0x1c>
		return ESPAT_STATE_ERR;
 8007000:	2301      	movs	r3, #1
 8007002:	e093      	b.n	800712c <espAt_sendCommand+0x144>

	uint16_t prefixLength = strlen(AT_PREFIX);
 8007004:	2316      	movs	r3, #22
 8007006:	2618      	movs	r6, #24
 8007008:	199b      	adds	r3, r3, r6
 800700a:	19db      	adds	r3, r3, r7
 800700c:	2203      	movs	r2, #3
 800700e:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	0018      	movs	r0, r3
 8007014:	f7f9 f876 	bl	8000104 <strlen>
 8007018:	0002      	movs	r2, r0
 800701a:	2114      	movs	r1, #20
 800701c:	0030      	movs	r0, r6
 800701e:	180b      	adds	r3, r1, r0
 8007020:	19db      	adds	r3, r3, r7
 8007022:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8007024:	2212      	movs	r2, #18
 8007026:	0016      	movs	r6, r2
 8007028:	1813      	adds	r3, r2, r0
 800702a:	19db      	adds	r3, r3, r7
 800702c:	2202      	movs	r2, #2
 800702e:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + endingLength;
 8007030:	2316      	movs	r3, #22
 8007032:	181b      	adds	r3, r3, r0
 8007034:	19da      	adds	r2, r3, r7
 8007036:	1809      	adds	r1, r1, r0
 8007038:	19cb      	adds	r3, r1, r7
 800703a:	8812      	ldrh	r2, [r2, #0]
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	18d3      	adds	r3, r2, r3
 8007040:	b299      	uxth	r1, r3
 8007042:	2010      	movs	r0, #16
 8007044:	2318      	movs	r3, #24
 8007046:	18c2      	adds	r2, r0, r3
 8007048:	19d3      	adds	r3, r2, r7
 800704a:	0032      	movs	r2, r6
 800704c:	2618      	movs	r6, #24
 800704e:	1992      	adds	r2, r2, r6
 8007050:	19d2      	adds	r2, r2, r7
 8007052:	8812      	ldrh	r2, [r2, #0]
 8007054:	188a      	adds	r2, r1, r2
 8007056:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 8007058:	1983      	adds	r3, r0, r6
 800705a:	19db      	adds	r3, r3, r7
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	001a      	movs	r2, r3
 8007060:	3a01      	subs	r2, #1
 8007062:	627a      	str	r2, [r7, #36]	@ 0x24
 8007064:	60bb      	str	r3, [r7, #8]
 8007066:	2200      	movs	r2, #0
 8007068:	60fa      	str	r2, [r7, #12]
 800706a:	68b8      	ldr	r0, [r7, #8]
 800706c:	68f9      	ldr	r1, [r7, #12]
 800706e:	0006      	movs	r6, r0
 8007070:	0f72      	lsrs	r2, r6, #29
 8007072:	000e      	movs	r6, r1
 8007074:	00f6      	lsls	r6, r6, #3
 8007076:	617e      	str	r6, [r7, #20]
 8007078:	697e      	ldr	r6, [r7, #20]
 800707a:	4316      	orrs	r6, r2
 800707c:	617e      	str	r6, [r7, #20]
 800707e:	0006      	movs	r6, r0
 8007080:	00f6      	lsls	r6, r6, #3
 8007082:	613e      	str	r6, [r7, #16]
 8007084:	603b      	str	r3, [r7, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	607a      	str	r2, [r7, #4]
 800708a:	6838      	ldr	r0, [r7, #0]
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	0006      	movs	r6, r0
 8007090:	0f72      	lsrs	r2, r6, #29
 8007092:	000e      	movs	r6, r1
 8007094:	00f5      	lsls	r5, r6, #3
 8007096:	4315      	orrs	r5, r2
 8007098:	0006      	movs	r6, r0
 800709a:	00f4      	lsls	r4, r6, #3
 800709c:	3307      	adds	r3, #7
 800709e:	08db      	lsrs	r3, r3, #3
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	466e      	mov	r6, sp
 80070a4:	1af6      	subs	r6, r6, r3
 80070a6:	46b5      	mov	sp, r6
 80070a8:	466b      	mov	r3, sp
 80070aa:	3300      	adds	r3, #0
 80070ac:	623b      	str	r3, [r7, #32]
	memset(buffer, ' ', bufferSize);
 80070ae:	2010      	movs	r0, #16
 80070b0:	0006      	movs	r6, r0
 80070b2:	2518      	movs	r5, #24
 80070b4:	1943      	adds	r3, r0, r5
 80070b6:	19db      	adds	r3, r3, r7
 80070b8:	881a      	ldrh	r2, [r3, #0]
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	2120      	movs	r1, #32
 80070be:	0018      	movs	r0, r3
 80070c0:	f001 f946 	bl	8008350 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 80070c4:	6a38      	ldr	r0, [r7, #32]
 80070c6:	2416      	movs	r4, #22
 80070c8:	1963      	adds	r3, r4, r5
 80070ca:	19db      	adds	r3, r3, r7
 80070cc:	881a      	ldrh	r2, [r3, #0]
 80070ce:	4b1b      	ldr	r3, [pc, #108]	@ (800713c <espAt_sendCommand+0x154>)
 80070d0:	0019      	movs	r1, r3
 80070d2:	f001 f983 	bl	80083dc <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 80070d6:	0029      	movs	r1, r5
 80070d8:	1863      	adds	r3, r4, r1
 80070da:	19db      	adds	r3, r3, r7
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	18d0      	adds	r0, r2, r3
 80070e2:	2514      	movs	r5, #20
 80070e4:	186b      	adds	r3, r5, r1
 80070e6:	19db      	adds	r3, r3, r7
 80070e8:	881a      	ldrh	r2, [r3, #0]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	0019      	movs	r1, r3
 80070ee:	f001 f975 	bl	80083dc <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ENDING, endingLength);
 80070f2:	2118      	movs	r1, #24
 80070f4:	1863      	adds	r3, r4, r1
 80070f6:	19db      	adds	r3, r3, r7
 80070f8:	881a      	ldrh	r2, [r3, #0]
 80070fa:	000c      	movs	r4, r1
 80070fc:	192b      	adds	r3, r5, r4
 80070fe:	19db      	adds	r3, r3, r7
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	18d3      	adds	r3, r2, r3
 8007104:	6a3a      	ldr	r2, [r7, #32]
 8007106:	18d0      	adds	r0, r2, r3
 8007108:	2212      	movs	r2, #18
 800710a:	1913      	adds	r3, r2, r4
 800710c:	19db      	adds	r3, r3, r7
 800710e:	881a      	ldrh	r2, [r3, #0]
 8007110:	4b0b      	ldr	r3, [pc, #44]	@ (8007140 <espAt_sendCommand+0x158>)
 8007112:	0019      	movs	r1, r3
 8007114:	f001 f962 	bl	80083dc <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 8007118:	69f8      	ldr	r0, [r7, #28]
 800711a:	0033      	movs	r3, r6
 800711c:	191b      	adds	r3, r3, r4
 800711e:	19db      	adds	r3, r3, r7
 8007120:	881a      	ldrh	r2, [r3, #0]
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	0019      	movs	r1, r3
 8007126:	f7ff fec1 	bl	8006eac <uartSend>
 800712a:	0003      	movs	r3, r0
 800712c:	46c5      	mov	sp, r8
}
 800712e:	0018      	movs	r0, r3
 8007130:	46bd      	mov	sp, r7
 8007132:	b00c      	add	sp, #48	@ 0x30
 8007134:	bc80      	pop	{r7}
 8007136:	46b8      	mov	r8, r7
 8007138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800713a:	46c0      	nop			@ (mov r8, r8)
 800713c:	08009330 	.word	0x08009330
 8007140:	08009334 	.word	0x08009334

08007144 <espAt_sendParams>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendParams(espat_radio_t *radio, char *command,
		uint16_t paramCount, ...) {
 8007144:	b40c      	push	{r2, r3}
 8007146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007148:	46c6      	mov	lr, r8
 800714a:	b500      	push	{lr}
 800714c:	b0a2      	sub	sp, #136	@ 0x88
 800714e:	af00      	add	r7, sp, #0
 8007150:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8007152:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007154:	466b      	mov	r3, sp
 8007156:	4698      	mov	r8, r3

	//check if command are valid
	if (command == NULL)
 8007158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <espAt_sendParams+0x1e>
		return ESPAT_STATE_ERR;
 800715e:	2301      	movs	r3, #1
 8007160:	e1b7      	b.n	80074d2 <espAt_sendParams+0x38e>

	va_list ap;
	va_start(ap, paramCount);
 8007162:	236c      	movs	r3, #108	@ 0x6c
 8007164:	2238      	movs	r2, #56	@ 0x38
 8007166:	189b      	adds	r3, r3, r2
 8007168:	19db      	adds	r3, r3, r7
 800716a:	663b      	str	r3, [r7, #96]	@ 0x60

	//make parameters array
	int32_t parameters[paramCount];
 800716c:	2368      	movs	r3, #104	@ 0x68
 800716e:	189b      	adds	r3, r3, r2
 8007170:	19db      	adds	r3, r3, r7
 8007172:	881a      	ldrh	r2, [r3, #0]
 8007174:	0013      	movs	r3, r2
 8007176:	3b01      	subs	r3, #1
 8007178:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800717a:	61ba      	str	r2, [r7, #24]
 800717c:	2300      	movs	r3, #0
 800717e:	61fb      	str	r3, [r7, #28]
 8007180:	69b8      	ldr	r0, [r7, #24]
 8007182:	69f9      	ldr	r1, [r7, #28]
 8007184:	0003      	movs	r3, r0
 8007186:	0edb      	lsrs	r3, r3, #27
 8007188:	000e      	movs	r6, r1
 800718a:	0175      	lsls	r5, r6, #5
 800718c:	431d      	orrs	r5, r3
 800718e:	0003      	movs	r3, r0
 8007190:	015c      	lsls	r4, r3, #5
 8007192:	613a      	str	r2, [r7, #16]
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	6938      	ldr	r0, [r7, #16]
 800719a:	6979      	ldr	r1, [r7, #20]
 800719c:	0003      	movs	r3, r0
 800719e:	0edb      	lsrs	r3, r3, #27
 80071a0:	000c      	movs	r4, r1
 80071a2:	0164      	lsls	r4, r4, #5
 80071a4:	637c      	str	r4, [r7, #52]	@ 0x34
 80071a6:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80071a8:	431c      	orrs	r4, r3
 80071aa:	637c      	str	r4, [r7, #52]	@ 0x34
 80071ac:	0003      	movs	r3, r0
 80071ae:	015b      	lsls	r3, r3, #5
 80071b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80071b2:	0013      	movs	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	3307      	adds	r3, #7
 80071b8:	08db      	lsrs	r3, r3, #3
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	466a      	mov	r2, sp
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	469d      	mov	sp, r3
 80071c2:	466b      	mov	r3, sp
 80071c4:	3303      	adds	r3, #3
 80071c6:	089b      	lsrs	r3, r3, #2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	67bb      	str	r3, [r7, #120]	@ 0x78

	//fill parameters array
	for (uint16_t i = 0; i < paramCount; i++) {
 80071cc:	234e      	movs	r3, #78	@ 0x4e
 80071ce:	2238      	movs	r2, #56	@ 0x38
 80071d0:	189b      	adds	r3, r3, r2
 80071d2:	19db      	adds	r3, r3, r7
 80071d4:	2200      	movs	r2, #0
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	e012      	b.n	8007200 <espAt_sendParams+0xbc>
		parameters[i] = va_arg(ap, int32_t);
 80071da:	204e      	movs	r0, #78	@ 0x4e
 80071dc:	2438      	movs	r4, #56	@ 0x38
 80071de:	1903      	adds	r3, r0, r4
 80071e0:	19db      	adds	r3, r3, r7
 80071e2:	881a      	ldrh	r2, [r3, #0]
 80071e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071e6:	1d19      	adds	r1, r3, #4
 80071e8:	6639      	str	r1, [r7, #96]	@ 0x60
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ee:	0092      	lsls	r2, r2, #2
 80071f0:	50d1      	str	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 80071f2:	1903      	adds	r3, r0, r4
 80071f4:	19db      	adds	r3, r3, r7
 80071f6:	881a      	ldrh	r2, [r3, #0]
 80071f8:	1903      	adds	r3, r0, r4
 80071fa:	19db      	adds	r3, r3, r7
 80071fc:	3201      	adds	r2, #1
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	234e      	movs	r3, #78	@ 0x4e
 8007202:	2138      	movs	r1, #56	@ 0x38
 8007204:	185b      	adds	r3, r3, r1
 8007206:	19da      	adds	r2, r3, r7
 8007208:	2368      	movs	r3, #104	@ 0x68
 800720a:	185b      	adds	r3, r3, r1
 800720c:	19db      	adds	r3, r3, r7
 800720e:	8812      	ldrh	r2, [r2, #0]
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d3e1      	bcc.n	80071da <espAt_sendParams+0x96>
	}

	//make arguments list string
	uint16_t characterCounter = 0;
 8007216:	234c      	movs	r3, #76	@ 0x4c
 8007218:	185b      	adds	r3, r3, r1
 800721a:	19db      	adds	r3, r3, r7
 800721c:	2200      	movs	r2, #0
 800721e:	801a      	strh	r2, [r3, #0]
	char argumentsBuffer[AT_BUFFER_SIZE];
	memset(argumentsBuffer, '\0', AT_BUFFER_SIZE);
 8007220:	2308      	movs	r3, #8
 8007222:	000c      	movs	r4, r1
 8007224:	185b      	adds	r3, r3, r1
 8007226:	19db      	adds	r3, r3, r7
 8007228:	221e      	movs	r2, #30
 800722a:	2100      	movs	r1, #0
 800722c:	0018      	movs	r0, r3
 800722e:	f001 f88f 	bl	8008350 <memset>

	for (uint16_t i = 0; i < paramCount; i++) {
 8007232:	234a      	movs	r3, #74	@ 0x4a
 8007234:	191b      	adds	r3, r3, r4
 8007236:	19db      	adds	r3, r3, r7
 8007238:	2200      	movs	r2, #0
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	e048      	b.n	80072d0 <espAt_sendParams+0x18c>
		itoa(parameters[i], &argumentsBuffer[characterCounter], 10);
 800723e:	234a      	movs	r3, #74	@ 0x4a
 8007240:	001e      	movs	r6, r3
 8007242:	2138      	movs	r1, #56	@ 0x38
 8007244:	185b      	adds	r3, r3, r1
 8007246:	19db      	adds	r3, r3, r7
 8007248:	881a      	ldrh	r2, [r3, #0]
 800724a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800724c:	0092      	lsls	r2, r2, #2
 800724e:	58d0      	ldr	r0, [r2, r3]
 8007250:	244c      	movs	r4, #76	@ 0x4c
 8007252:	1863      	adds	r3, r4, r1
 8007254:	19db      	adds	r3, r3, r7
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	2508      	movs	r5, #8
 800725a:	186a      	adds	r2, r5, r1
 800725c:	19d2      	adds	r2, r2, r7
 800725e:	18d3      	adds	r3, r2, r3
 8007260:	220a      	movs	r2, #10
 8007262:	0019      	movs	r1, r3
 8007264:	f000 ff75 	bl	8008152 <itoa>
		characterCounter += strlen(&argumentsBuffer[characterCounter]) + 1;
 8007268:	2038      	movs	r0, #56	@ 0x38
 800726a:	1823      	adds	r3, r4, r0
 800726c:	19db      	adds	r3, r3, r7
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	182a      	adds	r2, r5, r0
 8007272:	19d2      	adds	r2, r2, r7
 8007274:	18d3      	adds	r3, r2, r3
 8007276:	0018      	movs	r0, r3
 8007278:	f7f8 ff44 	bl	8000104 <strlen>
 800727c:	0003      	movs	r3, r0
 800727e:	b29a      	uxth	r2, r3
 8007280:	0021      	movs	r1, r4
 8007282:	2038      	movs	r0, #56	@ 0x38
 8007284:	180b      	adds	r3, r1, r0
 8007286:	19db      	adds	r3, r3, r7
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	18d3      	adds	r3, r2, r3
 800728c:	b29a      	uxth	r2, r3
 800728e:	180b      	adds	r3, r1, r0
 8007290:	19db      	adds	r3, r3, r7
 8007292:	3201      	adds	r2, #1
 8007294:	801a      	strh	r2, [r3, #0]
		if (i < paramCount - 1)
 8007296:	0033      	movs	r3, r6
 8007298:	181b      	adds	r3, r3, r0
 800729a:	19db      	adds	r3, r3, r7
 800729c:	881a      	ldrh	r2, [r3, #0]
 800729e:	2368      	movs	r3, #104	@ 0x68
 80072a0:	181b      	adds	r3, r3, r0
 80072a2:	19db      	adds	r3, r3, r7
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	429a      	cmp	r2, r3
 80072aa:	da08      	bge.n	80072be <espAt_sendParams+0x17a>
			argumentsBuffer[characterCounter - 1] = ','; //add comma only if NOT last parameter
 80072ac:	0002      	movs	r2, r0
 80072ae:	188b      	adds	r3, r1, r2
 80072b0:	19db      	adds	r3, r3, r7
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	18aa      	adds	r2, r5, r2
 80072b8:	19d2      	adds	r2, r2, r7
 80072ba:	212c      	movs	r1, #44	@ 0x2c
 80072bc:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 80072be:	214a      	movs	r1, #74	@ 0x4a
 80072c0:	2038      	movs	r0, #56	@ 0x38
 80072c2:	180b      	adds	r3, r1, r0
 80072c4:	19db      	adds	r3, r3, r7
 80072c6:	881a      	ldrh	r2, [r3, #0]
 80072c8:	180b      	adds	r3, r1, r0
 80072ca:	19db      	adds	r3, r3, r7
 80072cc:	3201      	adds	r2, #1
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	234a      	movs	r3, #74	@ 0x4a
 80072d2:	2638      	movs	r6, #56	@ 0x38
 80072d4:	199b      	adds	r3, r3, r6
 80072d6:	19da      	adds	r2, r3, r7
 80072d8:	2368      	movs	r3, #104	@ 0x68
 80072da:	199b      	adds	r3, r3, r6
 80072dc:	19db      	adds	r3, r3, r7
 80072de:	8812      	ldrh	r2, [r2, #0]
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d3ab      	bcc.n	800723e <espAt_sendParams+0xfa>
	}

	va_end(ap);

	//count buffer length
	uint16_t prefixLength = strlen(AT_PREFIX);
 80072e6:	243e      	movs	r4, #62	@ 0x3e
 80072e8:	19a3      	adds	r3, r4, r6
 80072ea:	19db      	adds	r3, r3, r7
 80072ec:	2203      	movs	r2, #3
 80072ee:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 80072f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f2:	0018      	movs	r0, r3
 80072f4:	f7f8 ff06 	bl	8000104 <strlen>
 80072f8:	0002      	movs	r2, r0
 80072fa:	253c      	movs	r5, #60	@ 0x3c
 80072fc:	19ab      	adds	r3, r5, r6
 80072fe:	19db      	adds	r3, r3, r7
 8007300:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 8007302:	213a      	movs	r1, #58	@ 0x3a
 8007304:	198b      	adds	r3, r1, r6
 8007306:	19db      	adds	r3, r3, r7
 8007308:	2201      	movs	r2, #1
 800730a:	801a      	strh	r2, [r3, #0]
	uint16_t parametersLength = --characterCounter;
 800730c:	224c      	movs	r2, #76	@ 0x4c
 800730e:	0030      	movs	r0, r6
 8007310:	1993      	adds	r3, r2, r6
 8007312:	19db      	adds	r3, r3, r7
 8007314:	0016      	movs	r6, r2
 8007316:	1812      	adds	r2, r2, r0
 8007318:	19d2      	adds	r2, r2, r7
 800731a:	8812      	ldrh	r2, [r2, #0]
 800731c:	3a01      	subs	r2, #1
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	2038      	movs	r0, #56	@ 0x38
 8007322:	2338      	movs	r3, #56	@ 0x38
 8007324:	18c2      	adds	r2, r0, r3
 8007326:	19d3      	adds	r3, r2, r7
 8007328:	0032      	movs	r2, r6
 800732a:	2638      	movs	r6, #56	@ 0x38
 800732c:	1992      	adds	r2, r2, r6
 800732e:	19d2      	adds	r2, r2, r7
 8007330:	8812      	ldrh	r2, [r2, #0]
 8007332:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8007334:	2336      	movs	r3, #54	@ 0x36
 8007336:	001e      	movs	r6, r3
 8007338:	2238      	movs	r2, #56	@ 0x38
 800733a:	189a      	adds	r2, r3, r2
 800733c:	19d3      	adds	r3, r2, r7
 800733e:	2202      	movs	r2, #2
 8007340:	801a      	strh	r2, [r3, #0]

	//create master buffer and clear it
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8007342:	2338      	movs	r3, #56	@ 0x38
 8007344:	18e2      	adds	r2, r4, r3
 8007346:	19d2      	adds	r2, r2, r7
 8007348:	18eb      	adds	r3, r5, r3
 800734a:	19db      	adds	r3, r3, r7
 800734c:	8812      	ldrh	r2, [r2, #0]
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	18d3      	adds	r3, r2, r3
 8007352:	b29a      	uxth	r2, r3
 8007354:	2338      	movs	r3, #56	@ 0x38
 8007356:	18c9      	adds	r1, r1, r3
 8007358:	19cb      	adds	r3, r1, r7
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	18d3      	adds	r3, r2, r3
 800735e:	b29a      	uxth	r2, r3
			+ parametersLength + endingLength;
 8007360:	2338      	movs	r3, #56	@ 0x38
 8007362:	18c1      	adds	r1, r0, r3
 8007364:	19cb      	adds	r3, r1, r7
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	18d3      	adds	r3, r2, r3
 800736a:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 800736c:	2234      	movs	r2, #52	@ 0x34
 800736e:	0010      	movs	r0, r2
 8007370:	2338      	movs	r3, #56	@ 0x38
 8007372:	18d2      	adds	r2, r2, r3
 8007374:	19d3      	adds	r3, r2, r7
 8007376:	0032      	movs	r2, r6
 8007378:	2638      	movs	r6, #56	@ 0x38
 800737a:	1992      	adds	r2, r2, r6
 800737c:	19d2      	adds	r2, r2, r7
 800737e:	8812      	ldrh	r2, [r2, #0]
 8007380:	188a      	adds	r2, r1, r2
 8007382:	801a      	strh	r2, [r3, #0]
	char buffer[bufferSize];
 8007384:	0002      	movs	r2, r0
 8007386:	1993      	adds	r3, r2, r6
 8007388:	19db      	adds	r3, r3, r7
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	001a      	movs	r2, r3
 800738e:	3a01      	subs	r2, #1
 8007390:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007392:	60bb      	str	r3, [r7, #8]
 8007394:	2200      	movs	r2, #0
 8007396:	60fa      	str	r2, [r7, #12]
 8007398:	68b8      	ldr	r0, [r7, #8]
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	0006      	movs	r6, r0
 800739e:	0f72      	lsrs	r2, r6, #29
 80073a0:	000e      	movs	r6, r1
 80073a2:	00f6      	lsls	r6, r6, #3
 80073a4:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80073a6:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 80073a8:	4316      	orrs	r6, r2
 80073aa:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80073ac:	0006      	movs	r6, r0
 80073ae:	00f6      	lsls	r6, r6, #3
 80073b0:	62be      	str	r6, [r7, #40]	@ 0x28
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	2200      	movs	r2, #0
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	6838      	ldr	r0, [r7, #0]
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	0006      	movs	r6, r0
 80073be:	0f72      	lsrs	r2, r6, #29
 80073c0:	000e      	movs	r6, r1
 80073c2:	00f6      	lsls	r6, r6, #3
 80073c4:	627e      	str	r6, [r7, #36]	@ 0x24
 80073c6:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 80073c8:	4316      	orrs	r6, r2
 80073ca:	627e      	str	r6, [r7, #36]	@ 0x24
 80073cc:	0006      	movs	r6, r0
 80073ce:	00f6      	lsls	r6, r6, #3
 80073d0:	623e      	str	r6, [r7, #32]
 80073d2:	3307      	adds	r3, #7
 80073d4:	08db      	lsrs	r3, r3, #3
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	466e      	mov	r6, sp
 80073da:	1af6      	subs	r6, r6, r3
 80073dc:	46b5      	mov	sp, r6
 80073de:	466b      	mov	r3, sp
 80073e0:	3300      	adds	r3, #0
 80073e2:	667b      	str	r3, [r7, #100]	@ 0x64
	memset(buffer, ' ', bufferSize);
 80073e4:	2234      	movs	r2, #52	@ 0x34
 80073e6:	2638      	movs	r6, #56	@ 0x38
 80073e8:	1993      	adds	r3, r2, r6
 80073ea:	19db      	adds	r3, r3, r7
 80073ec:	881a      	ldrh	r2, [r3, #0]
 80073ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073f0:	2120      	movs	r1, #32
 80073f2:	0018      	movs	r0, r3
 80073f4:	f000 ffac 	bl	8008350 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 80073f8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80073fa:	19a3      	adds	r3, r4, r6
 80073fc:	19db      	adds	r3, r3, r7
 80073fe:	881a      	ldrh	r2, [r3, #0]
 8007400:	4b39      	ldr	r3, [pc, #228]	@ (80074e8 <espAt_sendParams+0x3a4>)
 8007402:	0019      	movs	r1, r3
 8007404:	f000 ffea 	bl	80083dc <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8007408:	0031      	movs	r1, r6
 800740a:	19a3      	adds	r3, r4, r6
 800740c:	19db      	adds	r3, r3, r7
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007412:	18d0      	adds	r0, r2, r3
 8007414:	000e      	movs	r6, r1
 8007416:	186b      	adds	r3, r5, r1
 8007418:	19db      	adds	r3, r3, r7
 800741a:	881a      	ldrh	r2, [r3, #0]
 800741c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741e:	0019      	movs	r1, r3
 8007420:	f000 ffdc 	bl	80083dc <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8007424:	0031      	movs	r1, r6
 8007426:	1863      	adds	r3, r4, r1
 8007428:	19db      	adds	r3, r3, r7
 800742a:	881a      	ldrh	r2, [r3, #0]
 800742c:	1868      	adds	r0, r5, r1
 800742e:	19c3      	adds	r3, r0, r7
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	18d3      	adds	r3, r2, r3
 8007434:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007436:	18d0      	adds	r0, r2, r3
 8007438:	213a      	movs	r1, #58	@ 0x3a
 800743a:	000e      	movs	r6, r1
 800743c:	2338      	movs	r3, #56	@ 0x38
 800743e:	18ca      	adds	r2, r1, r3
 8007440:	19d3      	adds	r3, r2, r7
 8007442:	881a      	ldrh	r2, [r3, #0]
 8007444:	4b29      	ldr	r3, [pc, #164]	@ (80074ec <espAt_sendParams+0x3a8>)
 8007446:	0019      	movs	r1, r3
 8007448:	f000 ffc8 	bl	80083dc <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 800744c:	2038      	movs	r0, #56	@ 0x38
 800744e:	1823      	adds	r3, r4, r0
 8007450:	19db      	adds	r3, r3, r7
 8007452:	881a      	ldrh	r2, [r3, #0]
 8007454:	182b      	adds	r3, r5, r0
 8007456:	19db      	adds	r3, r3, r7
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	18d2      	adds	r2, r2, r3
 800745c:	0031      	movs	r1, r6
 800745e:	0006      	movs	r6, r0
 8007460:	180b      	adds	r3, r1, r0
 8007462:	19db      	adds	r3, r3, r7
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	18d3      	adds	r3, r2, r3
 8007468:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800746a:	18d0      	adds	r0, r2, r3
 800746c:	2338      	movs	r3, #56	@ 0x38
 800746e:	0031      	movs	r1, r6
 8007470:	185b      	adds	r3, r3, r1
 8007472:	19db      	adds	r3, r3, r7
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	2608      	movs	r6, #8
 8007478:	1873      	adds	r3, r6, r1
 800747a:	19db      	adds	r3, r3, r7
 800747c:	0019      	movs	r1, r3
 800747e:	f000 ffad 	bl	80083dc <memcpy>
			argumentsBuffer, parametersLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8007482:	2038      	movs	r0, #56	@ 0x38
 8007484:	1823      	adds	r3, r4, r0
 8007486:	19db      	adds	r3, r3, r7
 8007488:	881a      	ldrh	r2, [r3, #0]
 800748a:	182b      	adds	r3, r5, r0
 800748c:	19db      	adds	r3, r3, r7
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	18d2      	adds	r2, r2, r3
 8007492:	213a      	movs	r1, #58	@ 0x3a
 8007494:	180b      	adds	r3, r1, r0
 8007496:	19db      	adds	r3, r3, r7
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	18d2      	adds	r2, r2, r3
					+ parametersLength], AT_ENDING, endingLength);
 800749c:	2338      	movs	r3, #56	@ 0x38
 800749e:	0001      	movs	r1, r0
 80074a0:	185b      	adds	r3, r3, r1
 80074a2:	19db      	adds	r3, r3, r7
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 80074a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074aa:	18d0      	adds	r0, r2, r3
	memcpy(
 80074ac:	2336      	movs	r3, #54	@ 0x36
 80074ae:	000c      	movs	r4, r1
 80074b0:	185b      	adds	r3, r3, r1
 80074b2:	19db      	adds	r3, r3, r7
 80074b4:	881a      	ldrh	r2, [r3, #0]
 80074b6:	4b0e      	ldr	r3, [pc, #56]	@ (80074f0 <espAt_sendParams+0x3ac>)
 80074b8:	0019      	movs	r1, r3
 80074ba:	f000 ff8f 	bl	80083dc <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 80074be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80074c0:	2234      	movs	r2, #52	@ 0x34
 80074c2:	1913      	adds	r3, r2, r4
 80074c4:	19db      	adds	r3, r3, r7
 80074c6:	881a      	ldrh	r2, [r3, #0]
 80074c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ca:	0019      	movs	r1, r3
 80074cc:	f7ff fcee 	bl	8006eac <uartSend>
 80074d0:	0003      	movs	r3, r0
 80074d2:	46c5      	mov	sp, r8

}
 80074d4:	0018      	movs	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b022      	add	sp, #136	@ 0x88
 80074da:	bc80      	pop	{r7}
 80074dc:	46b8      	mov	r8, r7
 80074de:	bcf0      	pop	{r4, r5, r6, r7}
 80074e0:	bc08      	pop	{r3}
 80074e2:	b002      	add	sp, #8
 80074e4:	4718      	bx	r3
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	08009330 	.word	0x08009330
 80074ec:	08009338 	.word	0x08009338
 80074f0:	08009334 	.word	0x08009334

080074f4 <espAt_sendString>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendString(espat_radio_t *radio, char *command,
		char *string) {
 80074f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f6:	46c6      	mov	lr, r8
 80074f8:	b500      	push	{lr}
 80074fa:	b090      	sub	sp, #64	@ 0x40
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8007500:	6239      	str	r1, [r7, #32]
 8007502:	61fa      	str	r2, [r7, #28]
 8007504:	466b      	mov	r3, sp
 8007506:	4698      	mov	r8, r3

	//check if command and string are valid
	if (command == NULL || string == NULL)
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <espAt_sendString+0x20>
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <espAt_sendString+0x24>
		return ESPAT_STATE_ERR;
 8007514:	2301      	movs	r3, #1
 8007516:	e139      	b.n	800778c <espAt_sendString+0x298>

	uint16_t prefixLength = strlen(AT_PREFIX);
 8007518:	2326      	movs	r3, #38	@ 0x26
 800751a:	2618      	movs	r6, #24
 800751c:	199b      	adds	r3, r3, r6
 800751e:	19db      	adds	r3, r3, r7
 8007520:	2203      	movs	r2, #3
 8007522:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	0018      	movs	r0, r3
 8007528:	f7f8 fdec 	bl	8000104 <strlen>
 800752c:	0002      	movs	r2, r0
 800752e:	2124      	movs	r1, #36	@ 0x24
 8007530:	198b      	adds	r3, r1, r6
 8007532:	19db      	adds	r3, r3, r7
 8007534:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 8007536:	2222      	movs	r2, #34	@ 0x22
 8007538:	1993      	adds	r3, r2, r6
 800753a:	19db      	adds	r3, r3, r7
 800753c:	2201      	movs	r2, #1
 800753e:	801a      	strh	r2, [r3, #0]
	uint16_t quoteLength = strlen(AT_STRING_QUOTE_MARK);
 8007540:	2220      	movs	r2, #32
 8007542:	1993      	adds	r3, r2, r6
 8007544:	19db      	adds	r3, r3, r7
 8007546:	2201      	movs	r2, #1
 8007548:	801a      	strh	r2, [r3, #0]
	uint16_t stringLength = strlen(string);
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	0018      	movs	r0, r3
 800754e:	f7f8 fdd9 	bl	8000104 <strlen>
 8007552:	0002      	movs	r2, r0
 8007554:	231e      	movs	r3, #30
 8007556:	0031      	movs	r1, r6
 8007558:	185b      	adds	r3, r3, r1
 800755a:	19db      	adds	r3, r3, r7
 800755c:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 800755e:	221c      	movs	r2, #28
 8007560:	0016      	movs	r6, r2
 8007562:	1853      	adds	r3, r2, r1
 8007564:	19db      	adds	r3, r3, r7
 8007566:	2202      	movs	r2, #2
 8007568:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 800756a:	2326      	movs	r3, #38	@ 0x26
 800756c:	0008      	movs	r0, r1
 800756e:	185b      	adds	r3, r3, r1
 8007570:	19da      	adds	r2, r3, r7
 8007572:	2124      	movs	r1, #36	@ 0x24
 8007574:	180b      	adds	r3, r1, r0
 8007576:	19db      	adds	r3, r3, r7
 8007578:	8812      	ldrh	r2, [r2, #0]
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	18d3      	adds	r3, r2, r3
 800757e:	b29a      	uxth	r2, r3
 8007580:	2022      	movs	r0, #34	@ 0x22
 8007582:	2118      	movs	r1, #24
 8007584:	1843      	adds	r3, r0, r1
 8007586:	19db      	adds	r3, r3, r7
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	18d3      	adds	r3, r2, r3
 800758c:	b29a      	uxth	r2, r3
			+ (quoteLength * 2) + stringLength + endingLength;
 800758e:	2020      	movs	r0, #32
 8007590:	1840      	adds	r0, r0, r1
 8007592:	19c3      	adds	r3, r0, r7
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	18db      	adds	r3, r3, r3
 8007598:	b29b      	uxth	r3, r3
 800759a:	18d3      	adds	r3, r2, r3
 800759c:	b29a      	uxth	r2, r3
 800759e:	211e      	movs	r1, #30
 80075a0:	2318      	movs	r3, #24
 80075a2:	18c9      	adds	r1, r1, r3
 80075a4:	19cb      	adds	r3, r1, r7
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	18d3      	adds	r3, r2, r3
 80075aa:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 80075ac:	201a      	movs	r0, #26
 80075ae:	2318      	movs	r3, #24
 80075b0:	18c2      	adds	r2, r0, r3
 80075b2:	19d3      	adds	r3, r2, r7
 80075b4:	0032      	movs	r2, r6
 80075b6:	2618      	movs	r6, #24
 80075b8:	1992      	adds	r2, r2, r6
 80075ba:	19d2      	adds	r2, r2, r7
 80075bc:	8812      	ldrh	r2, [r2, #0]
 80075be:	188a      	adds	r2, r1, r2
 80075c0:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 80075c2:	1983      	adds	r3, r0, r6
 80075c4:	19db      	adds	r3, r3, r7
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	001a      	movs	r2, r3
 80075ca:	3a01      	subs	r2, #1
 80075cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075ce:	60bb      	str	r3, [r7, #8]
 80075d0:	2200      	movs	r2, #0
 80075d2:	60fa      	str	r2, [r7, #12]
 80075d4:	68b8      	ldr	r0, [r7, #8]
 80075d6:	68f9      	ldr	r1, [r7, #12]
 80075d8:	0006      	movs	r6, r0
 80075da:	0f72      	lsrs	r2, r6, #29
 80075dc:	000e      	movs	r6, r1
 80075de:	00f6      	lsls	r6, r6, #3
 80075e0:	617e      	str	r6, [r7, #20]
 80075e2:	697e      	ldr	r6, [r7, #20]
 80075e4:	4316      	orrs	r6, r2
 80075e6:	617e      	str	r6, [r7, #20]
 80075e8:	0006      	movs	r6, r0
 80075ea:	00f6      	lsls	r6, r6, #3
 80075ec:	613e      	str	r6, [r7, #16]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	2200      	movs	r2, #0
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	6838      	ldr	r0, [r7, #0]
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	0006      	movs	r6, r0
 80075fa:	0f72      	lsrs	r2, r6, #29
 80075fc:	000e      	movs	r6, r1
 80075fe:	00f5      	lsls	r5, r6, #3
 8007600:	4315      	orrs	r5, r2
 8007602:	0006      	movs	r6, r0
 8007604:	00f4      	lsls	r4, r6, #3
 8007606:	3307      	adds	r3, #7
 8007608:	08db      	lsrs	r3, r3, #3
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	466e      	mov	r6, sp
 800760e:	1af6      	subs	r6, r6, r3
 8007610:	46b5      	mov	sp, r6
 8007612:	466b      	mov	r3, sp
 8007614:	3300      	adds	r3, #0
 8007616:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(buffer, ' ', bufferSize);
 8007618:	221a      	movs	r2, #26
 800761a:	2618      	movs	r6, #24
 800761c:	1993      	adds	r3, r2, r6
 800761e:	19db      	adds	r3, r3, r7
 8007620:	881a      	ldrh	r2, [r3, #0]
 8007622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007624:	2120      	movs	r1, #32
 8007626:	0018      	movs	r0, r3
 8007628:	f000 fe92 	bl	8008350 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 800762c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800762e:	2426      	movs	r4, #38	@ 0x26
 8007630:	19a3      	adds	r3, r4, r6
 8007632:	19db      	adds	r3, r3, r7
 8007634:	881a      	ldrh	r2, [r3, #0]
 8007636:	4b59      	ldr	r3, [pc, #356]	@ (800779c <espAt_sendString+0x2a8>)
 8007638:	0019      	movs	r1, r3
 800763a:	f000 fecf 	bl	80083dc <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 800763e:	19a3      	adds	r3, r4, r6
 8007640:	19db      	adds	r3, r3, r7
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007646:	18d0      	adds	r0, r2, r3
 8007648:	2524      	movs	r5, #36	@ 0x24
 800764a:	19ab      	adds	r3, r5, r6
 800764c:	19db      	adds	r3, r3, r7
 800764e:	881a      	ldrh	r2, [r3, #0]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	0019      	movs	r1, r3
 8007654:	f000 fec2 	bl	80083dc <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8007658:	0031      	movs	r1, r6
 800765a:	1863      	adds	r3, r4, r1
 800765c:	19db      	adds	r3, r3, r7
 800765e:	881a      	ldrh	r2, [r3, #0]
 8007660:	186b      	adds	r3, r5, r1
 8007662:	19db      	adds	r3, r3, r7
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	18d3      	adds	r3, r2, r3
 8007668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800766a:	18d0      	adds	r0, r2, r3
 800766c:	2222      	movs	r2, #34	@ 0x22
 800766e:	0016      	movs	r6, r2
 8007670:	1853      	adds	r3, r2, r1
 8007672:	19db      	adds	r3, r3, r7
 8007674:	881a      	ldrh	r2, [r3, #0]
 8007676:	4b4a      	ldr	r3, [pc, #296]	@ (80077a0 <espAt_sendString+0x2ac>)
 8007678:	0019      	movs	r1, r3
 800767a:	f000 feaf 	bl	80083dc <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 800767e:	2118      	movs	r1, #24
 8007680:	1863      	adds	r3, r4, r1
 8007682:	19db      	adds	r3, r3, r7
 8007684:	881a      	ldrh	r2, [r3, #0]
 8007686:	186b      	adds	r3, r5, r1
 8007688:	19db      	adds	r3, r3, r7
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	18d2      	adds	r2, r2, r3
 800768e:	0030      	movs	r0, r6
 8007690:	1843      	adds	r3, r0, r1
 8007692:	19db      	adds	r3, r3, r7
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	18d3      	adds	r3, r2, r3
 8007698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800769a:	18d0      	adds	r0, r2, r3
 800769c:	2320      	movs	r3, #32
 800769e:	001e      	movs	r6, r3
 80076a0:	185b      	adds	r3, r3, r1
 80076a2:	19db      	adds	r3, r3, r7
 80076a4:	881a      	ldrh	r2, [r3, #0]
 80076a6:	4b3f      	ldr	r3, [pc, #252]	@ (80077a4 <espAt_sendString+0x2b0>)
 80076a8:	0019      	movs	r1, r3
 80076aa:	f000 fe97 	bl	80083dc <memcpy>
	AT_STRING_QUOTE_MARK, quoteLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 80076ae:	2118      	movs	r1, #24
 80076b0:	1863      	adds	r3, r4, r1
 80076b2:	19db      	adds	r3, r3, r7
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	186b      	adds	r3, r5, r1
 80076b8:	19db      	adds	r3, r3, r7
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	18d2      	adds	r2, r2, r3
 80076be:	2022      	movs	r0, #34	@ 0x22
 80076c0:	1843      	adds	r3, r0, r1
 80076c2:	19db      	adds	r3, r3, r7
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	18d2      	adds	r2, r2, r3
					+ quoteLength], string, stringLength);
 80076c8:	0033      	movs	r3, r6
 80076ca:	1858      	adds	r0, r3, r1
 80076cc:	19c3      	adds	r3, r0, r7
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 80076d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076d4:	18d0      	adds	r0, r2, r3
	memcpy(
 80076d6:	211e      	movs	r1, #30
 80076d8:	000e      	movs	r6, r1
 80076da:	2318      	movs	r3, #24
 80076dc:	18ca      	adds	r2, r1, r3
 80076de:	19d3      	adds	r3, r2, r7
 80076e0:	881a      	ldrh	r2, [r3, #0]
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	0019      	movs	r1, r3
 80076e6:	f000 fe79 	bl	80083dc <memcpy>
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 80076ea:	2118      	movs	r1, #24
 80076ec:	1863      	adds	r3, r4, r1
 80076ee:	19db      	adds	r3, r3, r7
 80076f0:	881a      	ldrh	r2, [r3, #0]
 80076f2:	186b      	adds	r3, r5, r1
 80076f4:	19db      	adds	r3, r3, r7
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	18d2      	adds	r2, r2, r3
 80076fa:	2022      	movs	r0, #34	@ 0x22
 80076fc:	1843      	adds	r3, r0, r1
 80076fe:	19db      	adds	r3, r3, r7
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	18d2      	adds	r2, r2, r3
					+ quoteLength + stringLength], AT_STRING_QUOTE_MARK,
 8007704:	2320      	movs	r3, #32
 8007706:	0008      	movs	r0, r1
 8007708:	185b      	adds	r3, r3, r1
 800770a:	19db      	adds	r3, r3, r7
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	18d2      	adds	r2, r2, r3
 8007710:	0031      	movs	r1, r6
 8007712:	180e      	adds	r6, r1, r0
 8007714:	19f3      	adds	r3, r6, r7
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 800771a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800771c:	18d0      	adds	r0, r2, r3
	memcpy(
 800771e:	000e      	movs	r6, r1
 8007720:	2318      	movs	r3, #24
 8007722:	18ca      	adds	r2, r1, r3
 8007724:	19d3      	adds	r3, r2, r7
 8007726:	881a      	ldrh	r2, [r3, #0]
 8007728:	4b1e      	ldr	r3, [pc, #120]	@ (80077a4 <espAt_sendString+0x2b0>)
 800772a:	0019      	movs	r1, r3
 800772c:	f000 fe56 	bl	80083dc <memcpy>
			stringLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8007730:	2118      	movs	r1, #24
 8007732:	1863      	adds	r3, r4, r1
 8007734:	19db      	adds	r3, r3, r7
 8007736:	881a      	ldrh	r2, [r3, #0]
 8007738:	186b      	adds	r3, r5, r1
 800773a:	19db      	adds	r3, r3, r7
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	18d2      	adds	r2, r2, r3
 8007740:	2022      	movs	r0, #34	@ 0x22
 8007742:	1843      	adds	r3, r0, r1
 8007744:	19db      	adds	r3, r3, r7
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	18d2      	adds	r2, r2, r3
					+ (quoteLength * 2) + stringLength], AT_ENDING,
 800774a:	2320      	movs	r3, #32
 800774c:	0008      	movs	r0, r1
 800774e:	185b      	adds	r3, r3, r1
 8007750:	19db      	adds	r3, r3, r7
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	18d2      	adds	r2, r2, r3
 8007758:	0031      	movs	r1, r6
 800775a:	0004      	movs	r4, r0
 800775c:	180b      	adds	r3, r1, r0
 800775e:	19db      	adds	r3, r3, r7
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8007764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007766:	18d0      	adds	r0, r2, r3
	memcpy(
 8007768:	231c      	movs	r3, #28
 800776a:	191b      	adds	r3, r3, r4
 800776c:	19db      	adds	r3, r3, r7
 800776e:	881a      	ldrh	r2, [r3, #0]
 8007770:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <espAt_sendString+0x2b4>)
 8007772:	0019      	movs	r1, r3
 8007774:	f000 fe32 	bl	80083dc <memcpy>
			endingLength);

	return uartSend(&radio->espUart, buffer, bufferSize);
 8007778:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800777a:	221a      	movs	r2, #26
 800777c:	1913      	adds	r3, r2, r4
 800777e:	19db      	adds	r3, r3, r7
 8007780:	881a      	ldrh	r2, [r3, #0]
 8007782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007784:	0019      	movs	r1, r3
 8007786:	f7ff fb91 	bl	8006eac <uartSend>
 800778a:	0003      	movs	r3, r0
 800778c:	46c5      	mov	sp, r8

}
 800778e:	0018      	movs	r0, r3
 8007790:	46bd      	mov	sp, r7
 8007792:	b010      	add	sp, #64	@ 0x40
 8007794:	bc80      	pop	{r7}
 8007796:	46b8      	mov	r8, r7
 8007798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800779a:	46c0      	nop			@ (mov r8, r8)
 800779c:	08009330 	.word	0x08009330
 80077a0:	08009338 	.word	0x08009338
 80077a4:	0800933c 	.word	0x0800933c
 80077a8:	08009334 	.word	0x08009334

080077ac <espAt_receive>:
 * @param: pointer to save response
 * @param: size to receive
 *
 * @retval: state
 */
espat_state_t espAt_receive(espat_radio_t *radio, char *response, uint16_t size) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	1dbb      	adds	r3, r7, #6
 80077b8:	801a      	strh	r2, [r3, #0]

	memset(response, ' ', size);
 80077ba:	1dbb      	adds	r3, r7, #6
 80077bc:	881a      	ldrh	r2, [r3, #0]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2120      	movs	r1, #32
 80077c2:	0018      	movs	r0, r3
 80077c4:	f000 fdc4 	bl	8008350 <memset>
	return uartReceive(&radio->espUart, response, size);
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	1dbb      	adds	r3, r7, #6
 80077cc:	881a      	ldrh	r2, [r3, #0]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	0019      	movs	r1, r3
 80077d2:	f7ff fb9b 	bl	8006f0c <uartReceive>
 80077d6:	0003      	movs	r3, r0

}
 80077d8:	0018      	movs	r0, r3
 80077da:	46bd      	mov	sp, r7
 80077dc:	b004      	add	sp, #16
 80077de:	bd80      	pop	{r7, pc}

080077e0 <espAt_defineEn>:

#if (EN_SUPPORT == 1)
espat_state_t espAt_defineEn(espat_radio_t *radio, ...) {
 80077e0:	b40f      	push	{r0, r1, r2, r3}
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0

	va_list ap;
	va_start(ap, radio);
 80077e8:	2314      	movs	r3, #20
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	607b      	str	r3, [r7, #4]

	radio->pinEn.port = va_arg(ap, espat_port_t*);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	1d1a      	adds	r2, r3, #4
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	615a      	str	r2, [r3, #20]
	radio->pinEn.pin = va_arg(ap, uint32_t);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	619a      	str	r2, [r3, #24]

	va_end(ap);

	return ESPAT_STATE_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	0018      	movs	r0, r3
 800780a:	46bd      	mov	sp, r7
 800780c:	b002      	add	sp, #8
 800780e:	bc80      	pop	{r7}
 8007810:	bc08      	pop	{r3}
 8007812:	b004      	add	sp, #16
 8007814:	4718      	bx	r3

08007816 <espAt_pwrOn>:

espat_state_t espAt_pwrOn(espat_radio_t *radio) {
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
	if (radio->pinEn.port != NULL) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <espAt_pwrOn+0x20>
		espAt_writePin(&radio->pinEn, ESPAT_SET);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3314      	adds	r3, #20
 800782a:	2101      	movs	r1, #1
 800782c:	0018      	movs	r0, r3
 800782e:	f7ff fb92 	bl	8006f56 <espAt_writePin>
		return ESPAT_STATE_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	e000      	b.n	8007838 <espAt_pwrOn+0x22>
	} else
		return ESPAT_STATE_PIN_NOT_DEFINED;
 8007836:	2304      	movs	r3, #4
}
 8007838:	0018      	movs	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	b002      	add	sp, #8
 800783e:	bd80      	pop	{r7, pc}

08007840 <espAt_defineBoot>:


#endif

#if (BOOT_SUPPORT == 1)
espat_state_t espAt_defineBoot(espat_radio_t *radio, ...) {
 8007840:	b40f      	push	{r0, r1, r2, r3}
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0

	va_list ap;
	va_start(ap, radio);
 8007848:	2314      	movs	r3, #20
 800784a:	18fb      	adds	r3, r7, r3
 800784c:	607b      	str	r3, [r7, #4]

	radio->pinBoot.port = va_arg(ap, espat_port_t*);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	1d1a      	adds	r2, r3, #4
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	60da      	str	r2, [r3, #12]
	radio->pinBoot.pin = va_arg(ap, uint32_t);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	1d1a      	adds	r2, r3, #4
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	611a      	str	r2, [r3, #16]

	va_end(ap);

	return ESPAT_STATE_OK;
 8007866:	2300      	movs	r3, #0

}
 8007868:	0018      	movs	r0, r3
 800786a:	46bd      	mov	sp, r7
 800786c:	b002      	add	sp, #8
 800786e:	bc80      	pop	{r7}
 8007870:	bc08      	pop	{r3}
 8007872:	b004      	add	sp, #16
 8007874:	4718      	bx	r3

08007876 <espAt_enterDownload>:
#endif

#if (BOOT_SUPPORT == 1) && (EN_SUPPORT == 1)
espat_state_t espAt_enterDownload(espat_radio_t *radio) {
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]

	if (radio->pinBoot.port != NULL && radio->pinEn.port != NULL) {
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d029      	beq.n	80078da <espAt_enterDownload+0x64>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d025      	beq.n	80078da <espAt_enterDownload+0x64>
		espAt_writePin(&radio->pinEn, ESPAT_RESET);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3314      	adds	r3, #20
 8007892:	2100      	movs	r1, #0
 8007894:	0018      	movs	r0, r3
 8007896:	f7ff fb5e 	bl	8006f56 <espAt_writePin>
		espAt_delay(100);
 800789a:	2064      	movs	r0, #100	@ 0x64
 800789c:	f7ff fb7d 	bl	8006f9a <espAt_delay>
		espAt_writePin(&radio->pinBoot, ESPAT_RESET);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	330c      	adds	r3, #12
 80078a4:	2100      	movs	r1, #0
 80078a6:	0018      	movs	r0, r3
 80078a8:	f7ff fb55 	bl	8006f56 <espAt_writePin>
		espAt_delay(100);
 80078ac:	2064      	movs	r0, #100	@ 0x64
 80078ae:	f7ff fb74 	bl	8006f9a <espAt_delay>
		espAt_writePin(&radio->pinEn, ESPAT_SET);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3314      	adds	r3, #20
 80078b6:	2101      	movs	r1, #1
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7ff fb4c 	bl	8006f56 <espAt_writePin>
		espAt_delay(100);
 80078be:	2064      	movs	r0, #100	@ 0x64
 80078c0:	f7ff fb6b 	bl	8006f9a <espAt_delay>
		espAt_writePin(&radio->pinBoot, ESPAT_SET);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	330c      	adds	r3, #12
 80078c8:	2101      	movs	r1, #1
 80078ca:	0018      	movs	r0, r3
 80078cc:	f7ff fb43 	bl	8006f56 <espAt_writePin>
		espAt_delay(100);
 80078d0:	2064      	movs	r0, #100	@ 0x64
 80078d2:	f7ff fb62 	bl	8006f9a <espAt_delay>
		return ESPAT_STATE_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e000      	b.n	80078dc <espAt_enterDownload+0x66>
	} else
		return ESPAT_STATE_PIN_NOT_DEFINED;
 80078da:	2304      	movs	r3, #4

}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b002      	add	sp, #8
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <kbd_readPin>:
 *      Author: bartosz
 */

#include "keyboard.h"

kbd_pinState_t kbd_readPin(kbd_pin_t *pin) {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(pin->port, pin->pin) == GPIO_PIN_RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	0019      	movs	r1, r3
 80078f8:	0010      	movs	r0, r2
 80078fa:	f7fb fda7 	bl	800344c <HAL_GPIO_ReadPin>
 80078fe:	1e03      	subs	r3, r0, #0
 8007900:	d101      	bne.n	8007906 <kbd_readPin+0x22>
		return KBD_RESET;
 8007902:	2300      	movs	r3, #0
 8007904:	e000      	b.n	8007908 <kbd_readPin+0x24>
	else
		return KBD_SET;
 8007906:	2301      	movs	r3, #1
}
 8007908:	0018      	movs	r0, r3
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}

08007910 <kbd_writePin>:

void kbd_writePin(kbd_pin_t *pin, kbd_pinState_t state) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	000a      	movs	r2, r1
 800791a:	1cfb      	adds	r3, r7, #3
 800791c:	701a      	strb	r2, [r3, #0]
	if (state == KBD_RESET)
 800791e:	1cfb      	adds	r3, r7, #3
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d109      	bne.n	800793a <kbd_writePin+0x2a>
		HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	b29b      	uxth	r3, r3
 8007930:	2200      	movs	r2, #0
 8007932:	0019      	movs	r1, r3
 8007934:	f7fb fda7 	bl	8003486 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
}
 8007938:	e008      	b.n	800794c <kbd_writePin+0x3c>
		HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	b29b      	uxth	r3, r3
 8007944:	2201      	movs	r2, #1
 8007946:	0019      	movs	r1, r3
 8007948:	f7fb fd9d 	bl	8003486 <HAL_GPIO_WritePin>
}
 800794c:	46c0      	nop			@ (mov r8, r8)
 800794e:	46bd      	mov	sp, r7
 8007950:	b002      	add	sp, #8
 8007952:	bd80      	pop	{r7, pc}

08007954 <kbd_init>:
 * @param: KBD_SET/RESET
 *
 * @retval: status
 */
kbd_state_t kbd_init(kbd_keyboard_t *keyboard, uint8_t columns, uint8_t rows,
		uint32_t prescaler, kbd_state_t pressedState) {
 8007954:	b590      	push	{r4, r7, lr}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	0008      	movs	r0, r1
 800795e:	0011      	movs	r1, r2
 8007960:	607b      	str	r3, [r7, #4]
 8007962:	240b      	movs	r4, #11
 8007964:	193b      	adds	r3, r7, r4
 8007966:	1c02      	adds	r2, r0, #0
 8007968:	701a      	strb	r2, [r3, #0]
 800796a:	200a      	movs	r0, #10
 800796c:	183b      	adds	r3, r7, r0
 800796e:	1c0a      	adds	r2, r1, #0
 8007970:	701a      	strb	r2, [r3, #0]

	if(rows < 1 || columns < 1)
 8007972:	183b      	adds	r3, r7, r0
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <kbd_init+0x2e>
 800797a:	193b      	adds	r3, r7, r4
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <kbd_init+0x32>
		return KBD_ROWS_OR_COLUMNS_NUMBER_CANT_BE_0;
 8007982:	2305      	movs	r3, #5
 8007984:	e076      	b.n	8007a74 <kbd_init+0x120>

	if (columns > 32)
 8007986:	230b      	movs	r3, #11
 8007988:	18fb      	adds	r3, r7, r3
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b20      	cmp	r3, #32
 800798e:	d901      	bls.n	8007994 <kbd_init+0x40>
		return KBD_TOO_MUCH_COLUMNS;
 8007990:	2303      	movs	r3, #3
 8007992:	e06f      	b.n	8007a74 <kbd_init+0x120>

	keyboard->numberOfColumns = columns;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	220b      	movs	r2, #11
 8007998:	18ba      	adds	r2, r7, r2
 800799a:	7812      	ldrb	r2, [r2, #0]
 800799c:	721a      	strb	r2, [r3, #8]
	keyboard->numberOfRows = rows;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	220a      	movs	r2, #10
 80079a2:	18ba      	adds	r2, r7, r2
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	725a      	strb	r2, [r3, #9]
	keyboard->numberOfKeys = keyboard->numberOfColumns * keyboard->numberOfRows;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	7a1b      	ldrb	r3, [r3, #8]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	7a52      	ldrb	r2, [r2, #9]
 80079b0:	4353      	muls	r3, r2
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	729a      	strb	r2, [r3, #10]
	keyboard->prescaler = prescaler;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]
	keyboard->pressedState = pressedState;
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	2320      	movs	r3, #32
 80079c2:	2108      	movs	r1, #8
 80079c4:	185b      	adds	r3, r3, r1
 80079c6:	19db      	adds	r3, r3, r7
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	7513      	strb	r3, [r2, #20]

	uint32_t pinStructSize = sizeof(kbd_pin_t);
 80079cc:	2308      	movs	r3, #8
 80079ce:	617b      	str	r3, [r7, #20]

	keyboard->columns = malloc(keyboard->numberOfColumns * pinStructSize);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	7a1b      	ldrb	r3, [r3, #8]
 80079d4:	001a      	movs	r2, r3
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	4353      	muls	r3, r2
 80079da:	0018      	movs	r0, r3
 80079dc:	f000 fbbe 	bl	800815c <malloc>
 80079e0:	0003      	movs	r3, r0
 80079e2:	001a      	movs	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	601a      	str	r2, [r3, #0]
	if (keyboard->columns == NULL)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <kbd_init+0xa0>
		return KBD_NOT_ENOUGH_MEMORY;
 80079f0:	2302      	movs	r3, #2
 80079f2:	e03f      	b.n	8007a74 <kbd_init+0x120>

	keyboard->rows = malloc(keyboard->numberOfRows * pinStructSize);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	7a5b      	ldrb	r3, [r3, #9]
 80079f8:	001a      	movs	r2, r3
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	4353      	muls	r3, r2
 80079fe:	0018      	movs	r0, r3
 8007a00:	f000 fbac 	bl	800815c <malloc>
 8007a04:	0003      	movs	r3, r0
 8007a06:	001a      	movs	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	605a      	str	r2, [r3, #4]
	if (keyboard->rows == NULL) {
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <kbd_init+0xce>
		free(keyboard->columns);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f000 fba9 	bl	8008170 <free>
		return KBD_NOT_ENOUGH_MEMORY;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e028      	b.n	8007a74 <kbd_init+0x120>
	}

	keyboard->stateMatrix = malloc(rows * sizeof(uint32_t));
 8007a22:	230a      	movs	r3, #10
 8007a24:	18fb      	adds	r3, r7, r3
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f000 fb96 	bl	800815c <malloc>
 8007a30:	0003      	movs	r3, r0
 8007a32:	001a      	movs	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	619a      	str	r2, [r3, #24]
	if (keyboard->stateMatrix == NULL) {
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10b      	bne.n	8007a58 <kbd_init+0x104>
		free(keyboard->columns);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	0018      	movs	r0, r3
 8007a46:	f000 fb93 	bl	8008170 <free>
		free(keyboard->rows);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f000 fb8e 	bl	8008170 <free>
		return KBD_NOT_ENOUGH_MEMORY;
 8007a54:	2302      	movs	r3, #2
 8007a56:	e00d      	b.n	8007a74 <kbd_init+0x120>
	}

	memset(keyboard->stateMatrix, 0, rows * sizeof(uint32_t));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6998      	ldr	r0, [r3, #24]
 8007a5c:	230a      	movs	r3, #10
 8007a5e:	18fb      	adds	r3, r7, r3
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	001a      	movs	r2, r3
 8007a66:	2100      	movs	r1, #0
 8007a68:	f000 fc72 	bl	8008350 <memset>

	keyboard->actualScannedRow = 0;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	72da      	strb	r2, [r3, #11]
	return KBD_OK;
 8007a72:	2300      	movs	r3, #0

}
 8007a74:	0018      	movs	r0, r3
 8007a76:	46bd      	mov	sp, r7
 8007a78:	b007      	add	sp, #28
 8007a7a:	bd90      	pop	{r4, r7, pc}

08007a7c <kbd_set_columns>:
 * @param: keybaord
 * @params: portStruct*, pinMask, portStruct*, pinMask...
 *
 * @retval: status
 */
kbd_state_t kbd_set_columns(kbd_keyboard_t *keyboard, ...) {
 8007a7c:	b40f      	push	{r0, r1, r2, r3}
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0

	va_list ap;
	va_start(ap, keyboard);
 8007a84:	2314      	movs	r3, #20
 8007a86:	18fb      	adds	r3, r7, r3
 8007a88:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 0; i < keyboard->numberOfColumns; i++) {
 8007a8a:	1dfb      	adds	r3, r7, #7
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e01a      	b.n	8007ac8 <kbd_set_columns+0x4c>
		keyboard->columns[i].port = va_arg(ap, kbd_port_t*);
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	1dfb      	adds	r3, r7, #7
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	18d2      	adds	r2, r2, r3
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	1d19      	adds	r1, r3, #4
 8007aa2:	6039      	str	r1, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6013      	str	r3, [r2, #0]
		keyboard->columns[i].pin = va_arg(ap, uint32_t);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	1dfb      	adds	r3, r7, #7
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	18d2      	adds	r2, r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	1d19      	adds	r1, r3, #4
 8007ab8:	6039      	str	r1, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6053      	str	r3, [r2, #4]
	for (uint8_t i = 0; i < keyboard->numberOfColumns; i++) {
 8007abe:	1dfb      	adds	r3, r7, #7
 8007ac0:	781a      	ldrb	r2, [r3, #0]
 8007ac2:	1dfb      	adds	r3, r7, #7
 8007ac4:	3201      	adds	r2, #1
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	7a1b      	ldrb	r3, [r3, #8]
 8007acc:	1dfa      	adds	r2, r7, #7
 8007ace:	7812      	ldrb	r2, [r2, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d3de      	bcc.n	8007a92 <kbd_set_columns+0x16>
	}

	va_end(ap);

	return KBD_OK;
 8007ad4:	2300      	movs	r3, #0

}
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	b002      	add	sp, #8
 8007adc:	bc80      	pop	{r7}
 8007ade:	bc08      	pop	{r3}
 8007ae0:	b004      	add	sp, #16
 8007ae2:	4718      	bx	r3

08007ae4 <kbd_set_rows>:
 * @param: keybaord
 * @params: portStruct*, pinMask, portStruct*, pinMask...
 *
 * @retval: status
 */
kbd_state_t kbd_set_rows(kbd_keyboard_t *keyboard, ...) {
 8007ae4:	b40f      	push	{r0, r1, r2, r3}
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0

	if(keyboard->numberOfRows <= 1)
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	7a5b      	ldrb	r3, [r3, #9]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d801      	bhi.n	8007af8 <kbd_set_rows+0x14>
		return KBD_NOT_IN_SCANNING_MODE;
 8007af4:	2304      	movs	r3, #4
 8007af6:	e028      	b.n	8007b4a <kbd_set_rows+0x66>

	va_list ap;
	va_start(ap, keyboard);
 8007af8:	2314      	movs	r3, #20
 8007afa:	18fb      	adds	r3, r7, r3
 8007afc:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 0; i < keyboard->numberOfRows; i++) {
 8007afe:	1dfb      	adds	r3, r7, #7
 8007b00:	2200      	movs	r2, #0
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e01a      	b.n	8007b3c <kbd_set_rows+0x58>
		keyboard->rows[i].port = va_arg(ap, kbd_port_t*);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	1dfb      	adds	r3, r7, #7
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	18d2      	adds	r2, r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	1d19      	adds	r1, r3, #4
 8007b16:	6039      	str	r1, [r7, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6013      	str	r3, [r2, #0]
		keyboard->rows[i].pin = va_arg(ap, uint32_t);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	1dfb      	adds	r3, r7, #7
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	18d2      	adds	r2, r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	1d19      	adds	r1, r3, #4
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6053      	str	r3, [r2, #4]
	for (uint8_t i = 0; i < keyboard->numberOfRows; i++) {
 8007b32:	1dfb      	adds	r3, r7, #7
 8007b34:	781a      	ldrb	r2, [r3, #0]
 8007b36:	1dfb      	adds	r3, r7, #7
 8007b38:	3201      	adds	r2, #1
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	7a5b      	ldrb	r3, [r3, #9]
 8007b40:	1dfa      	adds	r2, r7, #7
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d3de      	bcc.n	8007b06 <kbd_set_rows+0x22>
	}

	va_end(ap);

	return KBD_OK;
 8007b48:	2300      	movs	r3, #0

}
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	b002      	add	sp, #8
 8007b50:	bc80      	pop	{r7}
 8007b52:	bc08      	pop	{r3}
 8007b54:	b004      	add	sp, #16
 8007b56:	4718      	bx	r3

08007b58 <kbd_scanning>:
 * @param: keybaord
 *
 * @retval: none
 */

void kbd_scanning(kbd_keyboard_t *keyboard) {
 8007b58:	b590      	push	{r4, r7, lr}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	keyboard->masterTimer++;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	611a      	str	r2, [r3, #16]

	//run with prescaler
	if (keyboard->masterTimer % keyboard->prescaler == 0) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	691a      	ldr	r2, [r3, #16]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	0019      	movs	r1, r3
 8007b74:	0010      	movs	r0, r2
 8007b76:	f7f8 fb53 	bl	8000220 <__aeabi_uidivmod>
 8007b7a:	1e0b      	subs	r3, r1, #0
 8007b7c:	d000      	beq.n	8007b80 <kbd_scanning+0x28>
 8007b7e:	e083      	b.n	8007c88 <kbd_scanning+0x130>

		//save previous row to matrix
		//read current row
		for (uint8_t i = 0; i < keyboard->numberOfColumns; i++) {
 8007b80:	230f      	movs	r3, #15
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	e03e      	b.n	8007c08 <kbd_scanning+0xb0>
			if (kbd_readPin(&keyboard->columns[i]) == KBD_SCAN_ROW_STATE)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	240f      	movs	r4, #15
 8007b90:	193b      	adds	r3, r7, r4
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	18d3      	adds	r3, r2, r3
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f7ff fea3 	bl	80078e4 <kbd_readPin>
 8007b9e:	1e03      	subs	r3, r0, #0
 8007ba0:	d115      	bne.n	8007bce <kbd_scanning+0x76>
				keyboard->stateMatrix[keyboard->actualScannedRow] |= 1 << i;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7adb      	ldrb	r3, [r3, #11]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	18d3      	adds	r3, r2, r3
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	193b      	adds	r3, r7, r4
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	4099      	lsls	r1, r3
 8007bb8:	000b      	movs	r3, r1
 8007bba:	0018      	movs	r0, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6999      	ldr	r1, [r3, #24]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7adb      	ldrb	r3, [r3, #11]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	18cb      	adds	r3, r1, r3
 8007bc8:	4302      	orrs	r2, r0
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	e016      	b.n	8007bfc <kbd_scanning+0xa4>
			else
				keyboard->stateMatrix[keyboard->actualScannedRow] &= ~(1 << i);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7adb      	ldrb	r3, [r3, #11]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	18d3      	adds	r3, r2, r3
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	230f      	movs	r3, #15
 8007bde:	18fb      	adds	r3, r7, r3
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2101      	movs	r1, #1
 8007be4:	4099      	lsls	r1, r3
 8007be6:	000b      	movs	r3, r1
 8007be8:	43db      	mvns	r3, r3
 8007bea:	0018      	movs	r0, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6999      	ldr	r1, [r3, #24]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7adb      	ldrb	r3, [r3, #11]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	18cb      	adds	r3, r1, r3
 8007bf8:	4002      	ands	r2, r0
 8007bfa:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < keyboard->numberOfColumns; i++) {
 8007bfc:	210f      	movs	r1, #15
 8007bfe:	187b      	adds	r3, r7, r1
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	187b      	adds	r3, r7, r1
 8007c04:	3201      	adds	r2, #1
 8007c06:	701a      	strb	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	7a1b      	ldrb	r3, [r3, #8]
 8007c0c:	220f      	movs	r2, #15
 8007c0e:	18ba      	adds	r2, r7, r2
 8007c10:	7812      	ldrb	r2, [r2, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d3b9      	bcc.n	8007b8a <kbd_scanning+0x32>
		}

		//switch row only if there's more than one(Scanning mode)
		if (keyboard->numberOfRows > 1) {
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	7a5b      	ldrb	r3, [r3, #9]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d934      	bls.n	8007c88 <kbd_scanning+0x130>
			//switch to next row
			keyboard->actualScannedRow++;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7adb      	ldrb	r3, [r3, #11]
 8007c22:	3301      	adds	r3, #1
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	72da      	strb	r2, [r3, #11]
			if (keyboard->actualScannedRow > keyboard->numberOfRows - 1)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	7a5a      	ldrb	r2, [r3, #9]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7adb      	ldrb	r3, [r3, #11]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d802      	bhi.n	8007c3c <kbd_scanning+0xe4>
				keyboard->actualScannedRow = 0;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	72da      	strb	r2, [r3, #11]

			//reset all rows
			for (uint8_t i = 0; i < keyboard->numberOfRows; i++)
 8007c3c:	230e      	movs	r3, #14
 8007c3e:	18fb      	adds	r3, r7, r3
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	e00f      	b.n	8007c66 <kbd_scanning+0x10e>
				kbd_writePin(&keyboard->rows[i], !KBD_SCAN_ROW_STATE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	240e      	movs	r4, #14
 8007c4c:	193b      	adds	r3, r7, r4
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	18d3      	adds	r3, r2, r3
 8007c54:	2101      	movs	r1, #1
 8007c56:	0018      	movs	r0, r3
 8007c58:	f7ff fe5a 	bl	8007910 <kbd_writePin>
			for (uint8_t i = 0; i < keyboard->numberOfRows; i++)
 8007c5c:	193b      	adds	r3, r7, r4
 8007c5e:	781a      	ldrb	r2, [r3, #0]
 8007c60:	193b      	adds	r3, r7, r4
 8007c62:	3201      	adds	r2, #1
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	7a5b      	ldrb	r3, [r3, #9]
 8007c6a:	220e      	movs	r2, #14
 8007c6c:	18ba      	adds	r2, r7, r2
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d3e8      	bcc.n	8007c46 <kbd_scanning+0xee>

			//set next
			kbd_writePin(&keyboard->rows[keyboard->actualScannedRow],
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7adb      	ldrb	r3, [r3, #11]
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	18d3      	adds	r3, r2, r3
 8007c80:	2100      	movs	r1, #0
 8007c82:	0018      	movs	r0, r3
 8007c84:	f7ff fe44 	bl	8007910 <kbd_writePin>
			KBD_SCAN_ROW_STATE);
		}

	}

}
 8007c88:	46c0      	nop			@ (mov r8, r8)
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b005      	add	sp, #20
 8007c8e:	bd90      	pop	{r4, r7, pc}

08007c90 <i2cSend>:
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
lsm6ds_state_t i2cSend(lsm6ds_serialInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 8007c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c92:	b08b      	sub	sp, #44	@ 0x2c
 8007c94:	af04      	add	r7, sp, #16
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	0008      	movs	r0, r1
 8007c9a:	0011      	movs	r1, r2
 8007c9c:	607b      	str	r3, [r7, #4]
 8007c9e:	260a      	movs	r6, #10
 8007ca0:	19bb      	adds	r3, r7, r6
 8007ca2:	1c02      	adds	r2, r0, #0
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	2508      	movs	r5, #8
 8007ca8:	197b      	adds	r3, r7, r5
 8007caa:	1c0a      	adds	r2, r1, #0
 8007cac:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Write(i2c->i2c, devAddr, memAddr,
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2117      	movs	r1, #23
 8007cbc:	187c      	adds	r4, r7, r1
 8007cbe:	1979      	adds	r1, r7, r5
 8007cc0:	880d      	ldrh	r5, [r1, #0]
 8007cc2:	19b9      	adds	r1, r7, r6
 8007cc4:	8809      	ldrh	r1, [r1, #0]
 8007cc6:	9302      	str	r3, [sp, #8]
 8007cc8:	9201      	str	r2, [sp, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	2301      	movs	r3, #1
 8007cd0:	002a      	movs	r2, r5
 8007cd2:	f7fb fccf 	bl	8003674 <HAL_I2C_Mem_Write>
 8007cd6:	0003      	movs	r3, r0
 8007cd8:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->sendTimeout);

	if (state == HAL_OK)
 8007cda:	2117      	movs	r1, #23
 8007cdc:	187b      	adds	r3, r7, r1
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <i2cSend+0x58>
		return LSM6DS_STATE_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e007      	b.n	8007cf8 <i2cSend+0x68>
	else if (state == HAL_TIMEOUT)
 8007ce8:	2317      	movs	r3, #23
 8007cea:	18fb      	adds	r3, r7, r3
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d101      	bne.n	8007cf6 <i2cSend+0x66>
		return LSM6DS_STATE_TIMEOUT;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e000      	b.n	8007cf8 <i2cSend+0x68>
	else
		return LSM6DS_STATE_ERR;
 8007cf6:	2301      	movs	r3, #1
}
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	b007      	add	sp, #28
 8007cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d00 <i2cReceive>:

//port
lsm6ds_state_t i2cReceive(lsm6ds_serialInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 8007d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d02:	b08b      	sub	sp, #44	@ 0x2c
 8007d04:	af04      	add	r7, sp, #16
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	0008      	movs	r0, r1
 8007d0a:	0011      	movs	r1, r2
 8007d0c:	607b      	str	r3, [r7, #4]
 8007d0e:	260a      	movs	r6, #10
 8007d10:	19bb      	adds	r3, r7, r6
 8007d12:	1c02      	adds	r2, r0, #0
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	2508      	movs	r5, #8
 8007d18:	197b      	adds	r3, r7, r5
 8007d1a:	1c0a      	adds	r2, r1, #0
 8007d1c:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Read(i2c->i2c, devAddr, memAddr,
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2117      	movs	r1, #23
 8007d2c:	187c      	adds	r4, r7, r1
 8007d2e:	1979      	adds	r1, r7, r5
 8007d30:	880d      	ldrh	r5, [r1, #0]
 8007d32:	19b9      	adds	r1, r7, r6
 8007d34:	8809      	ldrh	r1, [r1, #0]
 8007d36:	9302      	str	r3, [sp, #8]
 8007d38:	9201      	str	r2, [sp, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	2301      	movs	r3, #1
 8007d40:	002a      	movs	r2, r5
 8007d42:	f7fb fdc5 	bl	80038d0 <HAL_I2C_Mem_Read>
 8007d46:	0003      	movs	r3, r0
 8007d48:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->receiveTimeout);

	if (state == HAL_OK)
 8007d4a:	2117      	movs	r1, #23
 8007d4c:	187b      	adds	r3, r7, r1
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <i2cReceive+0x58>
		return LSM6DS_STATE_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	e007      	b.n	8007d68 <i2cReceive+0x68>
	else if (state == HAL_TIMEOUT)
 8007d58:	2317      	movs	r3, #23
 8007d5a:	18fb      	adds	r3, r7, r3
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d101      	bne.n	8007d66 <i2cReceive+0x66>
		return LSM6DS_STATE_TIMEOUT;
 8007d62:	2302      	movs	r3, #2
 8007d64:	e000      	b.n	8007d68 <i2cReceive+0x68>
	else
		return LSM6DS_STATE_ERR;
 8007d66:	2301      	movs	r3, #1
}
 8007d68:	0018      	movs	r0, r3
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b007      	add	sp, #28
 8007d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d70 <modifyReg>:
 * @param: register address
 * @param: bitmask
 * @param: value
 */
lsm6ds_state_t modifyReg(lsm6ds_sensor_t *sensor, uint16_t regAddr,
		uint8_t bitmask, uint16_t value) {
 8007d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d72:	b089      	sub	sp, #36	@ 0x24
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	000c      	movs	r4, r1
 8007d7a:	0010      	movs	r0, r2
 8007d7c:	0019      	movs	r1, r3
 8007d7e:	230a      	movs	r3, #10
 8007d80:	18fb      	adds	r3, r7, r3
 8007d82:	1c22      	adds	r2, r4, #0
 8007d84:	801a      	strh	r2, [r3, #0]
 8007d86:	2209      	movs	r2, #9
 8007d88:	18bb      	adds	r3, r7, r2
 8007d8a:	1c02      	adds	r2, r0, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	1dbb      	adds	r3, r7, #6
 8007d90:	1c0a      	adds	r2, r1, #0
 8007d92:	801a      	strh	r2, [r3, #0]

	uint8_t readedReg = 0;
 8007d94:	2516      	movs	r5, #22
 8007d96:	197b      	adds	r3, r7, r5
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8007d9c:	2617      	movs	r6, #23
 8007d9e:	19bb      	adds	r3, r7, r6
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]

	//read original register
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr,
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8999      	ldrh	r1, [r3, #12]
 8007daa:	19bc      	adds	r4, r7, r6
 8007dac:	197d      	adds	r5, r7, r5
 8007dae:	230a      	movs	r3, #10
 8007db0:	18fb      	adds	r3, r7, r3
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	2301      	movs	r3, #1
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	002b      	movs	r3, r5
 8007dba:	f7ff ffa1 	bl	8007d00 <i2cReceive>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	7023      	strb	r3, [r4, #0]
			&readedReg, 1);

	if (state != LSM6DS_STATE_OK)
 8007dc2:	19bb      	adds	r3, r7, r6
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <modifyReg+0x60>
		return state;
 8007dca:	19bb      	adds	r3, r7, r6
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	e02c      	b.n	8007e2a <modifyReg+0xba>

	//clear bits corresponding to mask
	readedReg &= ~(bitmask);
 8007dd0:	2009      	movs	r0, #9
 8007dd2:	183b      	adds	r3, r7, r0
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	b25b      	sxtb	r3, r3
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	b25b      	sxtb	r3, r3
 8007ddc:	2116      	movs	r1, #22
 8007dde:	187a      	adds	r2, r7, r1
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	b252      	sxtb	r2, r2
 8007de4:	4013      	ands	r3, r2
 8007de6:	b25b      	sxtb	r3, r3
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	701a      	strb	r2, [r3, #0]

	//modify register
	uint8_t regToWrite = readedReg | (bitmask & value);
 8007dee:	1dbb      	adds	r3, r7, #6
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	183a      	adds	r2, r7, r0
 8007df6:	7812      	ldrb	r2, [r2, #0]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	b25a      	sxtb	r2, r3
 8007dfe:	187b      	adds	r3, r7, r1
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	b25b      	sxtb	r3, r3
 8007e04:	4313      	orrs	r3, r2
 8007e06:	b25b      	sxtb	r3, r3
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	2415      	movs	r4, #21
 8007e0c:	193b      	adds	r3, r7, r4
 8007e0e:	701a      	strb	r2, [r3, #0]

	//write register
	return i2cSend(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr, &regToWrite,
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8999      	ldrh	r1, [r3, #12]
 8007e16:	193c      	adds	r4, r7, r4
 8007e18:	230a      	movs	r3, #10
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	881a      	ldrh	r2, [r3, #0]
 8007e1e:	2301      	movs	r3, #1
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	0023      	movs	r3, r4
 8007e24:	f7ff ff34 	bl	8007c90 <i2cSend>
 8007e28:	0003      	movs	r3, r0
			1);

}
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	b007      	add	sp, #28
 8007e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e32 <lsm6ds_init>:
 * @param: rxTimeout
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_init(lsm6ds_sensor_t *sensor, uint16_t devAddr,
		I2C_HandleTypeDef *i2c, uint32_t txTimeout, uint32_t rxTimeout) { //port
 8007e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e34:	b089      	sub	sp, #36	@ 0x24
 8007e36:	af02      	add	r7, sp, #8
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
 8007e3e:	200a      	movs	r0, #10
 8007e40:	183b      	adds	r3, r7, r0
 8007e42:	1c0a      	adds	r2, r1, #0
 8007e44:	801a      	strh	r2, [r3, #0]

	sensor->deviceAddr = devAddr;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	183a      	adds	r2, r7, r0
 8007e4a:	8812      	ldrh	r2, [r2, #0]
 8007e4c:	819a      	strh	r2, [r3, #12]
	sensor->lsm6dsI2c.i2c = i2c;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	601a      	str	r2, [r3, #0]
	sensor->lsm6dsI2c.receiveTimeout = rxTimeout;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e58:	609a      	str	r2, [r3, #8]
	sensor->lsm6dsI2c.sendTimeout = txTimeout;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	605a      	str	r2, [r3, #4]

	memset(&sensor->outGR, 0, sizeof(sensor->outGR));
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3314      	adds	r3, #20
 8007e64:	2206      	movs	r2, #6
 8007e66:	2100      	movs	r1, #0
 8007e68:	0018      	movs	r0, r3
 8007e6a:	f000 fa71 	bl	8008350 <memset>
	memset(&sensor->outXL, 0, sizeof(sensor->outXL));
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	330e      	adds	r3, #14
 8007e72:	2206      	movs	r2, #6
 8007e74:	2100      	movs	r1, #0
 8007e76:	0018      	movs	r0, r3
 8007e78:	f000 fa6a 	bl	8008350 <memset>
	sensor->outTemperature = 0;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	835a      	strh	r2, [r3, #26]

	//check communication
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8007e82:	2417      	movs	r4, #23
 8007e84:	193b      	adds	r3, r7, r4
 8007e86:	2201      	movs	r2, #1
 8007e88:	701a      	strb	r2, [r3, #0]
	uint8_t receivedWhoIAm = 0;
 8007e8a:	2616      	movs	r6, #22
 8007e8c:	19bb      	adds	r3, r7, r6
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr,
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8999      	ldrh	r1, [r3, #12]
 8007e98:	0025      	movs	r5, r4
 8007e9a:	193c      	adds	r4, r7, r4
 8007e9c:	19bb      	adds	r3, r7, r6
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	9200      	str	r2, [sp, #0]
 8007ea2:	220f      	movs	r2, #15
 8007ea4:	f7ff ff2c 	bl	8007d00 <i2cReceive>
 8007ea8:	0003      	movs	r3, r0
 8007eaa:	7023      	strb	r3, [r4, #0]
	LSM6DS_REG_WHO_AM_I, &receivedWhoIAm, 1);
	if (state == LSM6DS_STATE_ERR)
 8007eac:	197b      	adds	r3, r7, r5
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <lsm6ds_init+0x86>
		return LSM6DS_STATE_ERR_SERIAL;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e00f      	b.n	8007ed8 <lsm6ds_init+0xa6>
	else if (state == LSM6DS_STATE_TIMEOUT)
 8007eb8:	2217      	movs	r2, #23
 8007eba:	18bb      	adds	r3, r7, r2
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d102      	bne.n	8007ec8 <lsm6ds_init+0x96>
		return state;
 8007ec2:	18bb      	adds	r3, r7, r2
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	e007      	b.n	8007ed8 <lsm6ds_init+0xa6>
	else {
		if (receivedWhoIAm == LSM6DS_WHO_AM_I)
 8007ec8:	2316      	movs	r3, #22
 8007eca:	18fb      	adds	r3, r7, r3
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b6a      	cmp	r3, #106	@ 0x6a
 8007ed0:	d101      	bne.n	8007ed6 <lsm6ds_init+0xa4>
			return LSM6DS_STATE_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e000      	b.n	8007ed8 <lsm6ds_init+0xa6>
		else
			return LSM6DS_STATE_WRONG_WHOAMI;
 8007ed6:	2304      	movs	r3, #4
	}

}
 8007ed8:	0018      	movs	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	b007      	add	sp, #28
 8007ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ee0 <lsm6ds_setInt1Drdy>:
 * @param: sensor
 * @param: LSM6DS_INT1_DRDY_G/XL/DIS
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setInt1Drdy(lsm6ds_sensor_t *sensor, uint8_t interrupt){
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	000a      	movs	r2, r1
 8007eea:	1cfb      	adds	r3, r7, #3
 8007eec:	701a      	strb	r2, [r3, #0]

	return modifyReg(sensor, LSM6DS_REG_INT1_CTRL, LSM6DS_MASK_INT1_DRDY_G_XL, interrupt);
 8007eee:	1cfb      	adds	r3, r7, #3
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	2203      	movs	r2, #3
 8007ef8:	210d      	movs	r1, #13
 8007efa:	f7ff ff39 	bl	8007d70 <modifyReg>
 8007efe:	0003      	movs	r3, r0

}
 8007f00:	0018      	movs	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	b002      	add	sp, #8
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <lsm6ds_setGROutputDataRate>:
 * @param: sensor
 * @param: LSM6DS_ODR_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGROutputDataRate(lsm6ds_sensor_t *sensor, uint8_t odr) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	000a      	movs	r2, r1
 8007f12:	1cfb      	adds	r3, r7, #3
 8007f14:	701a      	strb	r2, [r3, #0]
	return modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_ODR_G, odr);
 8007f16:	1cfb      	adds	r3, r7, #3
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	22f0      	movs	r2, #240	@ 0xf0
 8007f20:	2111      	movs	r1, #17
 8007f22:	f7ff ff25 	bl	8007d70 <modifyReg>
 8007f26:	0003      	movs	r3, r0

}
 8007f28:	0018      	movs	r0, r3
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	b002      	add	sp, #8
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <lsm6ds_setGRLowPass>:
 * @param: sensor
 * @param: LSM6DS_FTYPE_
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGRLowPass(lsm6ds_sensor_t *sensor, uint8_t filter){
 8007f30:	b5b0      	push	{r4, r5, r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	000a      	movs	r2, r1
 8007f3a:	1cfb      	adds	r3, r7, #3
 8007f3c:	701a      	strb	r2, [r3, #0]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 8007f3e:	250f      	movs	r5, #15
 8007f40:	197b      	adds	r3, r7, r5
 8007f42:	2201      	movs	r2, #1
 8007f44:	701a      	strb	r2, [r3, #0]

	status = modifyReg(sensor, LSM6DS_REG_CTRL4_C, LSM6DS_MASK_LPF1_SEL_G, LSM6DS_LPF_SEL_G_EN);
 8007f46:	197c      	adds	r4, r7, r5
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	2113      	movs	r1, #19
 8007f50:	f7ff ff0e 	bl	8007d70 <modifyReg>
 8007f54:	0003      	movs	r3, r0
 8007f56:	7023      	strb	r3, [r4, #0]
	if(status != LSM6DS_STATE_OK)
 8007f58:	197b      	adds	r3, r7, r5
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <lsm6ds_setGRLowPass+0x36>
		return status;
 8007f60:	197b      	adds	r3, r7, r5
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	e00d      	b.n	8007f82 <lsm6ds_setGRLowPass+0x52>

	status =  modifyReg(sensor, LSM6DS_REG_CTRL6_C, LSM6DS_MASK_FTYPE, filter);
 8007f66:	1cfb      	adds	r3, r7, #3
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	250f      	movs	r5, #15
 8007f6e:	197c      	adds	r4, r7, r5
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	2203      	movs	r2, #3
 8007f74:	2115      	movs	r1, #21
 8007f76:	f7ff fefb 	bl	8007d70 <modifyReg>
 8007f7a:	0003      	movs	r3, r0
 8007f7c:	7023      	strb	r3, [r4, #0]
	return status;
 8007f7e:	197b      	adds	r3, r7, r5
 8007f80:	781b      	ldrb	r3, [r3, #0]

}
 8007f82:	0018      	movs	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	b004      	add	sp, #16
 8007f88:	bdb0      	pop	{r4, r5, r7, pc}

08007f8a <lsm6ds_setGRFullScale>:
 * @param: sensor
 * @param: LSM6DS_FS_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGRFullScale(lsm6ds_sensor_t *sensor, uint8_t fs) {
 8007f8a:	b5b0      	push	{r4, r5, r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	000a      	movs	r2, r1
 8007f94:	1cfb      	adds	r3, r7, #3
 8007f96:	701a      	strb	r2, [r3, #0]

	lsm6ds_state_t stat = LSM6DS_STATE_ERR;
 8007f98:	250f      	movs	r5, #15
 8007f9a:	197b      	adds	r3, r7, r5
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	701a      	strb	r2, [r3, #0]

	if (fs == LSM6DS_FS_G_125DPS) {
 8007fa0:	1cfb      	adds	r3, r7, #3
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d120      	bne.n	8007fea <lsm6ds_setGRFullScale+0x60>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G,
 8007fa8:	197c      	adds	r4, r7, r5
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	2300      	movs	r3, #0
 8007fae:	220c      	movs	r2, #12
 8007fb0:	2111      	movs	r1, #17
 8007fb2:	f7ff fedd 	bl	8007d70 <modifyReg>
 8007fb6:	0003      	movs	r3, r0
 8007fb8:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_245DPS);
		if (stat != LSM6DS_STATE_OK)
 8007fba:	197b      	adds	r3, r7, r5
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <lsm6ds_setGRFullScale+0x3e>
			return stat;
 8007fc2:	197b      	adds	r3, r7, r5
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	e037      	b.n	8008038 <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125,
 8007fc8:	250f      	movs	r5, #15
 8007fca:	197c      	adds	r4, r7, r5
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	2302      	movs	r3, #2
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	2111      	movs	r1, #17
 8007fd4:	f7ff fecc 	bl	8007d70 <modifyReg>
 8007fd8:	0003      	movs	r3, r0
 8007fda:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_125DPS);
		if (stat != LSM6DS_STATE_OK)
 8007fdc:	197b      	adds	r3, r7, r5
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d026      	beq.n	8008032 <lsm6ds_setGRFullScale+0xa8>
			return stat;
 8007fe4:	197b      	adds	r3, r7, r5
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	e026      	b.n	8008038 <lsm6ds_setGRFullScale+0xae>

	} else {

		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125, 0);
 8007fea:	250f      	movs	r5, #15
 8007fec:	197c      	adds	r4, r7, r5
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	2111      	movs	r1, #17
 8007ff6:	f7ff febb 	bl	8007d70 <modifyReg>
 8007ffa:	0003      	movs	r3, r0
 8007ffc:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 8007ffe:	197b      	adds	r3, r7, r5
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <lsm6ds_setGRFullScale+0x82>
			return stat;
 8008006:	197b      	adds	r3, r7, r5
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	e015      	b.n	8008038 <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G, fs);
 800800c:	1cfb      	adds	r3, r7, #3
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	b29b      	uxth	r3, r3
 8008012:	250f      	movs	r5, #15
 8008014:	197c      	adds	r4, r7, r5
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	220c      	movs	r2, #12
 800801a:	2111      	movs	r1, #17
 800801c:	f7ff fea8 	bl	8007d70 <modifyReg>
 8008020:	0003      	movs	r3, r0
 8008022:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 8008024:	197b      	adds	r3, r7, r5
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <lsm6ds_setGRFullScale+0xa8>
			return stat;
 800802c:	197b      	adds	r3, r7, r5
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	e002      	b.n	8008038 <lsm6ds_setGRFullScale+0xae>

	}

	return stat;
 8008032:	230f      	movs	r3, #15
 8008034:	18fb      	adds	r3, r7, r3
 8008036:	781b      	ldrb	r3, [r3, #0]

}
 8008038:	0018      	movs	r0, r3
 800803a:	46bd      	mov	sp, r7
 800803c:	b004      	add	sp, #16
 800803e:	bdb0      	pop	{r4, r5, r7, pc}

08008040 <lsm6ds_reset>:
 * software reset
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_reset(lsm6ds_sensor_t *sensor) {
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	return modifyReg(sensor, LSM6DS_REG_CTRL3_C, LSM6DS_MASK_SW_RESET,
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	2301      	movs	r3, #1
 800804c:	2201      	movs	r2, #1
 800804e:	2112      	movs	r1, #18
 8008050:	f7ff fe8e 	bl	8007d70 <modifyReg>
 8008054:	0003      	movs	r3, r0
	LSM6DS_SW_RESET);
}
 8008056:	0018      	movs	r0, r3
 8008058:	46bd      	mov	sp, r7
 800805a:	b002      	add	sp, #8
 800805c:	bd80      	pop	{r7, pc}

0800805e <lsm6ds_updateGR>:
 * updates gyro data in sensor struct
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_updateGR(lsm6ds_sensor_t *sensor){
 800805e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008060:	b087      	sub	sp, #28
 8008062:	af02      	add	r7, sp, #8
 8008064:	6078      	str	r0, [r7, #4]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 8008066:	250f      	movs	r5, #15
 8008068:	197b      	adds	r3, r7, r5
 800806a:	2201      	movs	r2, #1
 800806c:	701a      	strb	r2, [r3, #0]
	union{
		uint8_t raw[6];
		int16_t separated[3];
	}outputData;

	memset(&outputData, 0, sizeof(outputData));
 800806e:	2608      	movs	r6, #8
 8008070:	19bb      	adds	r3, r7, r6
 8008072:	2206      	movs	r2, #6
 8008074:	2100      	movs	r1, #0
 8008076:	0018      	movs	r0, r3
 8008078:	f000 f96a 	bl	8008350 <memset>

	status = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, LSM6DS_REG_OUTX_L_G, outputData.raw, 6);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	8999      	ldrh	r1, [r3, #12]
 8008082:	197c      	adds	r4, r7, r5
 8008084:	19bb      	adds	r3, r7, r6
 8008086:	2206      	movs	r2, #6
 8008088:	9200      	str	r2, [sp, #0]
 800808a:	2222      	movs	r2, #34	@ 0x22
 800808c:	f7ff fe38 	bl	8007d00 <i2cReceive>
 8008090:	0003      	movs	r3, r0
 8008092:	7023      	strb	r3, [r4, #0]

	if(status != LSM6DS_STATE_OK)
 8008094:	197b      	adds	r3, r7, r5
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <lsm6ds_updateGR+0x44>
		return status;
 800809c:	197b      	adds	r3, r7, r5
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	e012      	b.n	80080c8 <lsm6ds_updateGR+0x6a>

	sensor->outGR.x = outputData.separated[0];
 80080a2:	2108      	movs	r1, #8
 80080a4:	187b      	adds	r3, r7, r1
 80080a6:	2200      	movs	r2, #0
 80080a8:	5e9a      	ldrsh	r2, [r3, r2]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	829a      	strh	r2, [r3, #20]
	sensor->outGR.y = outputData.separated[1];
 80080ae:	187b      	adds	r3, r7, r1
 80080b0:	2202      	movs	r2, #2
 80080b2:	5e9a      	ldrsh	r2, [r3, r2]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	82da      	strh	r2, [r3, #22]
	sensor->outGR.z = outputData.separated[2];
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	2204      	movs	r2, #4
 80080bc:	5e9a      	ldrsh	r2, [r3, r2]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	831a      	strh	r2, [r3, #24]


	return status;
 80080c2:	230f      	movs	r3, #15
 80080c4:	18fb      	adds	r3, r7, r3
 80080c6:	781b      	ldrb	r3, [r3, #0]

}
 80080c8:	0018      	movs	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	b005      	add	sp, #20
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80080d0:	480d      	ldr	r0, [pc, #52]	@ (8008108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80080d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80080d4:	f7fe fdfc 	bl	8006cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80080d8:	480c      	ldr	r0, [pc, #48]	@ (800810c <LoopForever+0x6>)
  ldr r1, =_edata
 80080da:	490d      	ldr	r1, [pc, #52]	@ (8008110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80080dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008114 <LoopForever+0xe>)
  movs r3, #0
 80080de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80080e0:	e002      	b.n	80080e8 <LoopCopyDataInit>

080080e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80080e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80080e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80080e6:	3304      	adds	r3, #4

080080e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80080e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80080ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80080ec:	d3f9      	bcc.n	80080e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80080ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80080f0:	4c0a      	ldr	r4, [pc, #40]	@ (800811c <LoopForever+0x16>)
  movs r3, #0
 80080f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80080f4:	e001      	b.n	80080fa <LoopFillZerobss>

080080f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80080f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80080f8:	3204      	adds	r2, #4

080080fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80080fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80080fc:	d3fb      	bcc.n	80080f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80080fe:	f000 f947 	bl	8008390 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008102:	f7fe fcef 	bl	8006ae4 <main>

08008106 <LoopForever>:

LoopForever:
  b LoopForever
 8008106:	e7fe      	b.n	8008106 <LoopForever>
  ldr   r0, =_estack
 8008108:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800810c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008110:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8008114:	08009470 	.word	0x08009470
  ldr r2, =_sbss
 8008118:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800811c:	200003dc 	.word	0x200003dc

08008120 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008120:	e7fe      	b.n	8008120 <ADC1_COMP_IRQHandler>

08008122 <__itoa>:
 8008122:	1e93      	subs	r3, r2, #2
 8008124:	b510      	push	{r4, lr}
 8008126:	000c      	movs	r4, r1
 8008128:	2b22      	cmp	r3, #34	@ 0x22
 800812a:	d904      	bls.n	8008136 <__itoa+0x14>
 800812c:	2300      	movs	r3, #0
 800812e:	001c      	movs	r4, r3
 8008130:	700b      	strb	r3, [r1, #0]
 8008132:	0020      	movs	r0, r4
 8008134:	bd10      	pop	{r4, pc}
 8008136:	2a0a      	cmp	r2, #10
 8008138:	d109      	bne.n	800814e <__itoa+0x2c>
 800813a:	2800      	cmp	r0, #0
 800813c:	da07      	bge.n	800814e <__itoa+0x2c>
 800813e:	232d      	movs	r3, #45	@ 0x2d
 8008140:	700b      	strb	r3, [r1, #0]
 8008142:	2101      	movs	r1, #1
 8008144:	4240      	negs	r0, r0
 8008146:	1861      	adds	r1, r4, r1
 8008148:	f000 f8ce 	bl	80082e8 <__utoa>
 800814c:	e7f1      	b.n	8008132 <__itoa+0x10>
 800814e:	2100      	movs	r1, #0
 8008150:	e7f9      	b.n	8008146 <__itoa+0x24>

08008152 <itoa>:
 8008152:	b510      	push	{r4, lr}
 8008154:	f7ff ffe5 	bl	8008122 <__itoa>
 8008158:	bd10      	pop	{r4, pc}
	...

0800815c <malloc>:
 800815c:	b510      	push	{r4, lr}
 800815e:	4b03      	ldr	r3, [pc, #12]	@ (800816c <malloc+0x10>)
 8008160:	0001      	movs	r1, r0
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	f000 f830 	bl	80081c8 <_malloc_r>
 8008168:	bd10      	pop	{r4, pc}
 800816a:	46c0      	nop			@ (mov r8, r8)
 800816c:	20000018 	.word	0x20000018

08008170 <free>:
 8008170:	b510      	push	{r4, lr}
 8008172:	4b03      	ldr	r3, [pc, #12]	@ (8008180 <free+0x10>)
 8008174:	0001      	movs	r1, r0
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	f000 f93a 	bl	80083f0 <_free_r>
 800817c:	bd10      	pop	{r4, pc}
 800817e:	46c0      	nop			@ (mov r8, r8)
 8008180:	20000018 	.word	0x20000018

08008184 <sbrk_aligned>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4e0f      	ldr	r6, [pc, #60]	@ (80081c4 <sbrk_aligned+0x40>)
 8008188:	000d      	movs	r5, r1
 800818a:	6831      	ldr	r1, [r6, #0]
 800818c:	0004      	movs	r4, r0
 800818e:	2900      	cmp	r1, #0
 8008190:	d102      	bne.n	8008198 <sbrk_aligned+0x14>
 8008192:	f000 f8e5 	bl	8008360 <_sbrk_r>
 8008196:	6030      	str	r0, [r6, #0]
 8008198:	0029      	movs	r1, r5
 800819a:	0020      	movs	r0, r4
 800819c:	f000 f8e0 	bl	8008360 <_sbrk_r>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d103      	bne.n	80081ac <sbrk_aligned+0x28>
 80081a4:	2501      	movs	r5, #1
 80081a6:	426d      	negs	r5, r5
 80081a8:	0028      	movs	r0, r5
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	2303      	movs	r3, #3
 80081ae:	1cc5      	adds	r5, r0, #3
 80081b0:	439d      	bics	r5, r3
 80081b2:	42a8      	cmp	r0, r5
 80081b4:	d0f8      	beq.n	80081a8 <sbrk_aligned+0x24>
 80081b6:	1a29      	subs	r1, r5, r0
 80081b8:	0020      	movs	r0, r4
 80081ba:	f000 f8d1 	bl	8008360 <_sbrk_r>
 80081be:	3001      	adds	r0, #1
 80081c0:	d1f2      	bne.n	80081a8 <sbrk_aligned+0x24>
 80081c2:	e7ef      	b.n	80081a4 <sbrk_aligned+0x20>
 80081c4:	20000294 	.word	0x20000294

080081c8 <_malloc_r>:
 80081c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ca:	2203      	movs	r2, #3
 80081cc:	1ccb      	adds	r3, r1, #3
 80081ce:	4393      	bics	r3, r2
 80081d0:	3308      	adds	r3, #8
 80081d2:	0005      	movs	r5, r0
 80081d4:	001f      	movs	r7, r3
 80081d6:	2b0c      	cmp	r3, #12
 80081d8:	d234      	bcs.n	8008244 <_malloc_r+0x7c>
 80081da:	270c      	movs	r7, #12
 80081dc:	42b9      	cmp	r1, r7
 80081de:	d833      	bhi.n	8008248 <_malloc_r+0x80>
 80081e0:	0028      	movs	r0, r5
 80081e2:	f000 f871 	bl	80082c8 <__malloc_lock>
 80081e6:	4e37      	ldr	r6, [pc, #220]	@ (80082c4 <_malloc_r+0xfc>)
 80081e8:	6833      	ldr	r3, [r6, #0]
 80081ea:	001c      	movs	r4, r3
 80081ec:	2c00      	cmp	r4, #0
 80081ee:	d12f      	bne.n	8008250 <_malloc_r+0x88>
 80081f0:	0039      	movs	r1, r7
 80081f2:	0028      	movs	r0, r5
 80081f4:	f7ff ffc6 	bl	8008184 <sbrk_aligned>
 80081f8:	0004      	movs	r4, r0
 80081fa:	1c43      	adds	r3, r0, #1
 80081fc:	d15f      	bne.n	80082be <_malloc_r+0xf6>
 80081fe:	6834      	ldr	r4, [r6, #0]
 8008200:	9400      	str	r4, [sp, #0]
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d14a      	bne.n	800829e <_malloc_r+0xd6>
 8008208:	2c00      	cmp	r4, #0
 800820a:	d052      	beq.n	80082b2 <_malloc_r+0xea>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	0028      	movs	r0, r5
 8008210:	18e3      	adds	r3, r4, r3
 8008212:	9900      	ldr	r1, [sp, #0]
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	f000 f8a3 	bl	8008360 <_sbrk_r>
 800821a:	9b01      	ldr	r3, [sp, #4]
 800821c:	4283      	cmp	r3, r0
 800821e:	d148      	bne.n	80082b2 <_malloc_r+0xea>
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	0028      	movs	r0, r5
 8008224:	1aff      	subs	r7, r7, r3
 8008226:	0039      	movs	r1, r7
 8008228:	f7ff ffac 	bl	8008184 <sbrk_aligned>
 800822c:	3001      	adds	r0, #1
 800822e:	d040      	beq.n	80082b2 <_malloc_r+0xea>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	19db      	adds	r3, r3, r7
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	6833      	ldr	r3, [r6, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	2a00      	cmp	r2, #0
 800823c:	d133      	bne.n	80082a6 <_malloc_r+0xde>
 800823e:	9b00      	ldr	r3, [sp, #0]
 8008240:	6033      	str	r3, [r6, #0]
 8008242:	e019      	b.n	8008278 <_malloc_r+0xb0>
 8008244:	2b00      	cmp	r3, #0
 8008246:	dac9      	bge.n	80081dc <_malloc_r+0x14>
 8008248:	230c      	movs	r3, #12
 800824a:	602b      	str	r3, [r5, #0]
 800824c:	2000      	movs	r0, #0
 800824e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008250:	6821      	ldr	r1, [r4, #0]
 8008252:	1bc9      	subs	r1, r1, r7
 8008254:	d420      	bmi.n	8008298 <_malloc_r+0xd0>
 8008256:	290b      	cmp	r1, #11
 8008258:	d90a      	bls.n	8008270 <_malloc_r+0xa8>
 800825a:	19e2      	adds	r2, r4, r7
 800825c:	6027      	str	r7, [r4, #0]
 800825e:	42a3      	cmp	r3, r4
 8008260:	d104      	bne.n	800826c <_malloc_r+0xa4>
 8008262:	6032      	str	r2, [r6, #0]
 8008264:	6863      	ldr	r3, [r4, #4]
 8008266:	6011      	str	r1, [r2, #0]
 8008268:	6053      	str	r3, [r2, #4]
 800826a:	e005      	b.n	8008278 <_malloc_r+0xb0>
 800826c:	605a      	str	r2, [r3, #4]
 800826e:	e7f9      	b.n	8008264 <_malloc_r+0x9c>
 8008270:	6862      	ldr	r2, [r4, #4]
 8008272:	42a3      	cmp	r3, r4
 8008274:	d10e      	bne.n	8008294 <_malloc_r+0xcc>
 8008276:	6032      	str	r2, [r6, #0]
 8008278:	0028      	movs	r0, r5
 800827a:	f000 f82d 	bl	80082d8 <__malloc_unlock>
 800827e:	0020      	movs	r0, r4
 8008280:	2207      	movs	r2, #7
 8008282:	300b      	adds	r0, #11
 8008284:	1d23      	adds	r3, r4, #4
 8008286:	4390      	bics	r0, r2
 8008288:	1ac2      	subs	r2, r0, r3
 800828a:	4298      	cmp	r0, r3
 800828c:	d0df      	beq.n	800824e <_malloc_r+0x86>
 800828e:	1a1b      	subs	r3, r3, r0
 8008290:	50a3      	str	r3, [r4, r2]
 8008292:	e7dc      	b.n	800824e <_malloc_r+0x86>
 8008294:	605a      	str	r2, [r3, #4]
 8008296:	e7ef      	b.n	8008278 <_malloc_r+0xb0>
 8008298:	0023      	movs	r3, r4
 800829a:	6864      	ldr	r4, [r4, #4]
 800829c:	e7a6      	b.n	80081ec <_malloc_r+0x24>
 800829e:	9c00      	ldr	r4, [sp, #0]
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	e7ad      	b.n	8008202 <_malloc_r+0x3a>
 80082a6:	001a      	movs	r2, r3
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	d1fb      	bne.n	80082a6 <_malloc_r+0xde>
 80082ae:	2300      	movs	r3, #0
 80082b0:	e7da      	b.n	8008268 <_malloc_r+0xa0>
 80082b2:	230c      	movs	r3, #12
 80082b4:	0028      	movs	r0, r5
 80082b6:	602b      	str	r3, [r5, #0]
 80082b8:	f000 f80e 	bl	80082d8 <__malloc_unlock>
 80082bc:	e7c6      	b.n	800824c <_malloc_r+0x84>
 80082be:	6007      	str	r7, [r0, #0]
 80082c0:	e7da      	b.n	8008278 <_malloc_r+0xb0>
 80082c2:	46c0      	nop			@ (mov r8, r8)
 80082c4:	20000298 	.word	0x20000298

080082c8 <__malloc_lock>:
 80082c8:	b510      	push	{r4, lr}
 80082ca:	4802      	ldr	r0, [pc, #8]	@ (80082d4 <__malloc_lock+0xc>)
 80082cc:	f000 f884 	bl	80083d8 <__retarget_lock_acquire_recursive>
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	46c0      	nop			@ (mov r8, r8)
 80082d4:	200003d8 	.word	0x200003d8

080082d8 <__malloc_unlock>:
 80082d8:	b510      	push	{r4, lr}
 80082da:	4802      	ldr	r0, [pc, #8]	@ (80082e4 <__malloc_unlock+0xc>)
 80082dc:	f000 f87d 	bl	80083da <__retarget_lock_release_recursive>
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	46c0      	nop			@ (mov r8, r8)
 80082e4:	200003d8 	.word	0x200003d8

080082e8 <__utoa>:
 80082e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ea:	000c      	movs	r4, r1
 80082ec:	0016      	movs	r6, r2
 80082ee:	b08d      	sub	sp, #52	@ 0x34
 80082f0:	2225      	movs	r2, #37	@ 0x25
 80082f2:	0007      	movs	r7, r0
 80082f4:	4915      	ldr	r1, [pc, #84]	@ (800834c <__utoa+0x64>)
 80082f6:	a802      	add	r0, sp, #8
 80082f8:	f000 f870 	bl	80083dc <memcpy>
 80082fc:	1e62      	subs	r2, r4, #1
 80082fe:	1eb3      	subs	r3, r6, #2
 8008300:	2500      	movs	r5, #0
 8008302:	9201      	str	r2, [sp, #4]
 8008304:	2b22      	cmp	r3, #34	@ 0x22
 8008306:	d904      	bls.n	8008312 <__utoa+0x2a>
 8008308:	7025      	strb	r5, [r4, #0]
 800830a:	002c      	movs	r4, r5
 800830c:	0020      	movs	r0, r4
 800830e:	b00d      	add	sp, #52	@ 0x34
 8008310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008312:	0038      	movs	r0, r7
 8008314:	0031      	movs	r1, r6
 8008316:	f7f7 ff83 	bl	8000220 <__aeabi_uidivmod>
 800831a:	000b      	movs	r3, r1
 800831c:	aa02      	add	r2, sp, #8
 800831e:	5cd3      	ldrb	r3, [r2, r3]
 8008320:	9a01      	ldr	r2, [sp, #4]
 8008322:	0029      	movs	r1, r5
 8008324:	3501      	adds	r5, #1
 8008326:	5553      	strb	r3, [r2, r5]
 8008328:	003b      	movs	r3, r7
 800832a:	0007      	movs	r7, r0
 800832c:	429e      	cmp	r6, r3
 800832e:	d9f0      	bls.n	8008312 <__utoa+0x2a>
 8008330:	2300      	movs	r3, #0
 8008332:	0022      	movs	r2, r4
 8008334:	5563      	strb	r3, [r4, r5]
 8008336:	000b      	movs	r3, r1
 8008338:	1ac8      	subs	r0, r1, r3
 800833a:	4283      	cmp	r3, r0
 800833c:	dde6      	ble.n	800830c <__utoa+0x24>
 800833e:	7810      	ldrb	r0, [r2, #0]
 8008340:	5ce5      	ldrb	r5, [r4, r3]
 8008342:	7015      	strb	r5, [r2, #0]
 8008344:	54e0      	strb	r0, [r4, r3]
 8008346:	3201      	adds	r2, #1
 8008348:	3b01      	subs	r3, #1
 800834a:	e7f5      	b.n	8008338 <__utoa+0x50>
 800834c:	08009408 	.word	0x08009408

08008350 <memset>:
 8008350:	0003      	movs	r3, r0
 8008352:	1882      	adds	r2, r0, r2
 8008354:	4293      	cmp	r3, r2
 8008356:	d100      	bne.n	800835a <memset+0xa>
 8008358:	4770      	bx	lr
 800835a:	7019      	strb	r1, [r3, #0]
 800835c:	3301      	adds	r3, #1
 800835e:	e7f9      	b.n	8008354 <memset+0x4>

08008360 <_sbrk_r>:
 8008360:	2300      	movs	r3, #0
 8008362:	b570      	push	{r4, r5, r6, lr}
 8008364:	4d06      	ldr	r5, [pc, #24]	@ (8008380 <_sbrk_r+0x20>)
 8008366:	0004      	movs	r4, r0
 8008368:	0008      	movs	r0, r1
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	f7fe fc7a 	bl	8006c64 <_sbrk>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d103      	bne.n	800837c <_sbrk_r+0x1c>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d000      	beq.n	800837c <_sbrk_r+0x1c>
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	bd70      	pop	{r4, r5, r6, pc}
 800837e:	46c0      	nop			@ (mov r8, r8)
 8008380:	200003d4 	.word	0x200003d4

08008384 <__errno>:
 8008384:	4b01      	ldr	r3, [pc, #4]	@ (800838c <__errno+0x8>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	4770      	bx	lr
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	20000018 	.word	0x20000018

08008390 <__libc_init_array>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	2600      	movs	r6, #0
 8008394:	4c0c      	ldr	r4, [pc, #48]	@ (80083c8 <__libc_init_array+0x38>)
 8008396:	4d0d      	ldr	r5, [pc, #52]	@ (80083cc <__libc_init_array+0x3c>)
 8008398:	1b64      	subs	r4, r4, r5
 800839a:	10a4      	asrs	r4, r4, #2
 800839c:	42a6      	cmp	r6, r4
 800839e:	d109      	bne.n	80083b4 <__libc_init_array+0x24>
 80083a0:	2600      	movs	r6, #0
 80083a2:	f000 ff97 	bl	80092d4 <_init>
 80083a6:	4c0a      	ldr	r4, [pc, #40]	@ (80083d0 <__libc_init_array+0x40>)
 80083a8:	4d0a      	ldr	r5, [pc, #40]	@ (80083d4 <__libc_init_array+0x44>)
 80083aa:	1b64      	subs	r4, r4, r5
 80083ac:	10a4      	asrs	r4, r4, #2
 80083ae:	42a6      	cmp	r6, r4
 80083b0:	d105      	bne.n	80083be <__libc_init_array+0x2e>
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	00b3      	lsls	r3, r6, #2
 80083b6:	58eb      	ldr	r3, [r5, r3]
 80083b8:	4798      	blx	r3
 80083ba:	3601      	adds	r6, #1
 80083bc:	e7ee      	b.n	800839c <__libc_init_array+0xc>
 80083be:	00b3      	lsls	r3, r6, #2
 80083c0:	58eb      	ldr	r3, [r5, r3]
 80083c2:	4798      	blx	r3
 80083c4:	3601      	adds	r6, #1
 80083c6:	e7f2      	b.n	80083ae <__libc_init_array+0x1e>
 80083c8:	08009468 	.word	0x08009468
 80083cc:	08009468 	.word	0x08009468
 80083d0:	0800946c 	.word	0x0800946c
 80083d4:	08009468 	.word	0x08009468

080083d8 <__retarget_lock_acquire_recursive>:
 80083d8:	4770      	bx	lr

080083da <__retarget_lock_release_recursive>:
 80083da:	4770      	bx	lr

080083dc <memcpy>:
 80083dc:	2300      	movs	r3, #0
 80083de:	b510      	push	{r4, lr}
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d100      	bne.n	80083e6 <memcpy+0xa>
 80083e4:	bd10      	pop	{r4, pc}
 80083e6:	5ccc      	ldrb	r4, [r1, r3]
 80083e8:	54c4      	strb	r4, [r0, r3]
 80083ea:	3301      	adds	r3, #1
 80083ec:	e7f8      	b.n	80083e0 <memcpy+0x4>
	...

080083f0 <_free_r>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	0005      	movs	r5, r0
 80083f4:	1e0c      	subs	r4, r1, #0
 80083f6:	d010      	beq.n	800841a <_free_r+0x2a>
 80083f8:	3c04      	subs	r4, #4
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	da00      	bge.n	8008402 <_free_r+0x12>
 8008400:	18e4      	adds	r4, r4, r3
 8008402:	0028      	movs	r0, r5
 8008404:	f7ff ff60 	bl	80082c8 <__malloc_lock>
 8008408:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <_free_r+0x90>)
 800840a:	6813      	ldr	r3, [r2, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d105      	bne.n	800841c <_free_r+0x2c>
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	6014      	str	r4, [r2, #0]
 8008414:	0028      	movs	r0, r5
 8008416:	f7ff ff5f 	bl	80082d8 <__malloc_unlock>
 800841a:	bd70      	pop	{r4, r5, r6, pc}
 800841c:	42a3      	cmp	r3, r4
 800841e:	d908      	bls.n	8008432 <_free_r+0x42>
 8008420:	6820      	ldr	r0, [r4, #0]
 8008422:	1821      	adds	r1, r4, r0
 8008424:	428b      	cmp	r3, r1
 8008426:	d1f3      	bne.n	8008410 <_free_r+0x20>
 8008428:	6819      	ldr	r1, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	1809      	adds	r1, r1, r0
 800842e:	6021      	str	r1, [r4, #0]
 8008430:	e7ee      	b.n	8008410 <_free_r+0x20>
 8008432:	001a      	movs	r2, r3
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <_free_r+0x4e>
 800843a:	42a3      	cmp	r3, r4
 800843c:	d9f9      	bls.n	8008432 <_free_r+0x42>
 800843e:	6811      	ldr	r1, [r2, #0]
 8008440:	1850      	adds	r0, r2, r1
 8008442:	42a0      	cmp	r0, r4
 8008444:	d10b      	bne.n	800845e <_free_r+0x6e>
 8008446:	6820      	ldr	r0, [r4, #0]
 8008448:	1809      	adds	r1, r1, r0
 800844a:	1850      	adds	r0, r2, r1
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	4283      	cmp	r3, r0
 8008450:	d1e0      	bne.n	8008414 <_free_r+0x24>
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	1841      	adds	r1, r0, r1
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	6053      	str	r3, [r2, #4]
 800845c:	e7da      	b.n	8008414 <_free_r+0x24>
 800845e:	42a0      	cmp	r0, r4
 8008460:	d902      	bls.n	8008468 <_free_r+0x78>
 8008462:	230c      	movs	r3, #12
 8008464:	602b      	str	r3, [r5, #0]
 8008466:	e7d5      	b.n	8008414 <_free_r+0x24>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	1821      	adds	r1, r4, r0
 800846c:	428b      	cmp	r3, r1
 800846e:	d103      	bne.n	8008478 <_free_r+0x88>
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	1809      	adds	r1, r1, r0
 8008476:	6021      	str	r1, [r4, #0]
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	6054      	str	r4, [r2, #4]
 800847c:	e7ca      	b.n	8008414 <_free_r+0x24>
 800847e:	46c0      	nop			@ (mov r8, r8)
 8008480:	20000298 	.word	0x20000298

08008484 <pow>:
 8008484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008486:	0014      	movs	r4, r2
 8008488:	001d      	movs	r5, r3
 800848a:	9000      	str	r0, [sp, #0]
 800848c:	9101      	str	r1, [sp, #4]
 800848e:	f000 f86f 	bl	8008570 <__ieee754_pow>
 8008492:	0022      	movs	r2, r4
 8008494:	0006      	movs	r6, r0
 8008496:	000f      	movs	r7, r1
 8008498:	002b      	movs	r3, r5
 800849a:	0020      	movs	r0, r4
 800849c:	0029      	movs	r1, r5
 800849e:	f7f9 fee5 	bl	800226c <__aeabi_dcmpun>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d13f      	bne.n	8008526 <pow+0xa2>
 80084a6:	9800      	ldr	r0, [sp, #0]
 80084a8:	9901      	ldr	r1, [sp, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	2300      	movs	r3, #0
 80084ae:	f7f7 ffb7 	bl	8000420 <__aeabi_dcmpeq>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d019      	beq.n	80084ea <pow+0x66>
 80084b6:	2200      	movs	r2, #0
 80084b8:	2300      	movs	r3, #0
 80084ba:	0020      	movs	r0, r4
 80084bc:	0029      	movs	r1, r5
 80084be:	f7f7 ffaf 	bl	8000420 <__aeabi_dcmpeq>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d146      	bne.n	8008554 <pow+0xd0>
 80084c6:	0020      	movs	r0, r4
 80084c8:	0029      	movs	r1, r5
 80084ca:	f000 f849 	bl	8008560 <finite>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d029      	beq.n	8008526 <pow+0xa2>
 80084d2:	2200      	movs	r2, #0
 80084d4:	2300      	movs	r3, #0
 80084d6:	0020      	movs	r0, r4
 80084d8:	0029      	movs	r1, r5
 80084da:	f7f7 ffa7 	bl	800042c <__aeabi_dcmplt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d021      	beq.n	8008526 <pow+0xa2>
 80084e2:	f7ff ff4f 	bl	8008384 <__errno>
 80084e6:	2322      	movs	r3, #34	@ 0x22
 80084e8:	e01c      	b.n	8008524 <pow+0xa0>
 80084ea:	0030      	movs	r0, r6
 80084ec:	0039      	movs	r1, r7
 80084ee:	f000 f837 	bl	8008560 <finite>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d11b      	bne.n	800852e <pow+0xaa>
 80084f6:	9800      	ldr	r0, [sp, #0]
 80084f8:	9901      	ldr	r1, [sp, #4]
 80084fa:	f000 f831 	bl	8008560 <finite>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d015      	beq.n	800852e <pow+0xaa>
 8008502:	0020      	movs	r0, r4
 8008504:	0029      	movs	r1, r5
 8008506:	f000 f82b 	bl	8008560 <finite>
 800850a:	2800      	cmp	r0, #0
 800850c:	d00f      	beq.n	800852e <pow+0xaa>
 800850e:	0032      	movs	r2, r6
 8008510:	003b      	movs	r3, r7
 8008512:	0030      	movs	r0, r6
 8008514:	0039      	movs	r1, r7
 8008516:	f7f9 fea9 	bl	800226c <__aeabi_dcmpun>
 800851a:	2800      	cmp	r0, #0
 800851c:	d0e1      	beq.n	80084e2 <pow+0x5e>
 800851e:	f7ff ff31 	bl	8008384 <__errno>
 8008522:	2321      	movs	r3, #33	@ 0x21
 8008524:	6003      	str	r3, [r0, #0]
 8008526:	0030      	movs	r0, r6
 8008528:	0039      	movs	r1, r7
 800852a:	b003      	add	sp, #12
 800852c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800852e:	2200      	movs	r2, #0
 8008530:	2300      	movs	r3, #0
 8008532:	0030      	movs	r0, r6
 8008534:	0039      	movs	r1, r7
 8008536:	f7f7 ff73 	bl	8000420 <__aeabi_dcmpeq>
 800853a:	2800      	cmp	r0, #0
 800853c:	d0f3      	beq.n	8008526 <pow+0xa2>
 800853e:	9800      	ldr	r0, [sp, #0]
 8008540:	9901      	ldr	r1, [sp, #4]
 8008542:	f000 f80d 	bl	8008560 <finite>
 8008546:	2800      	cmp	r0, #0
 8008548:	d0ed      	beq.n	8008526 <pow+0xa2>
 800854a:	0020      	movs	r0, r4
 800854c:	0029      	movs	r1, r5
 800854e:	f000 f807 	bl	8008560 <finite>
 8008552:	e7c4      	b.n	80084de <pow+0x5a>
 8008554:	2600      	movs	r6, #0
 8008556:	4f01      	ldr	r7, [pc, #4]	@ (800855c <pow+0xd8>)
 8008558:	e7e5      	b.n	8008526 <pow+0xa2>
 800855a:	46c0      	nop			@ (mov r8, r8)
 800855c:	3ff00000 	.word	0x3ff00000

08008560 <finite>:
 8008560:	4b02      	ldr	r3, [pc, #8]	@ (800856c <finite+0xc>)
 8008562:	0048      	lsls	r0, r1, #1
 8008564:	0840      	lsrs	r0, r0, #1
 8008566:	18c0      	adds	r0, r0, r3
 8008568:	0fc0      	lsrs	r0, r0, #31
 800856a:	4770      	bx	lr
 800856c:	80100000 	.word	0x80100000

08008570 <__ieee754_pow>:
 8008570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008572:	b095      	sub	sp, #84	@ 0x54
 8008574:	9202      	str	r2, [sp, #8]
 8008576:	9303      	str	r3, [sp, #12]
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	9a03      	ldr	r2, [sp, #12]
 800857c:	9306      	str	r3, [sp, #24]
 800857e:	0052      	lsls	r2, r2, #1
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	0852      	lsrs	r2, r2, #1
 8008584:	9204      	str	r2, [sp, #16]
 8008586:	001a      	movs	r2, r3
 8008588:	000f      	movs	r7, r1
 800858a:	9904      	ldr	r1, [sp, #16]
 800858c:	0006      	movs	r6, r0
 800858e:	430a      	orrs	r2, r1
 8008590:	d119      	bne.n	80085c6 <__ieee754_pow+0x56>
 8008592:	2180      	movs	r1, #128	@ 0x80
 8008594:	0309      	lsls	r1, r1, #12
 8008596:	4079      	eors	r1, r7
 8008598:	0002      	movs	r2, r0
 800859a:	000b      	movs	r3, r1
 800859c:	1892      	adds	r2, r2, r2
 800859e:	415b      	adcs	r3, r3
 80085a0:	499b      	ldr	r1, [pc, #620]	@ (8008810 <__ieee754_pow+0x2a0>)
 80085a2:	428b      	cmp	r3, r1
 80085a4:	d806      	bhi.n	80085b4 <__ieee754_pow+0x44>
 80085a6:	d001      	beq.n	80085ac <__ieee754_pow+0x3c>
 80085a8:	f000 fcde 	bl	8008f68 <__ieee754_pow+0x9f8>
 80085ac:	2a00      	cmp	r2, #0
 80085ae:	d101      	bne.n	80085b4 <__ieee754_pow+0x44>
 80085b0:	f000 fcda 	bl	8008f68 <__ieee754_pow+0x9f8>
 80085b4:	9a02      	ldr	r2, [sp, #8]
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	0030      	movs	r0, r6
 80085ba:	0039      	movs	r1, r7
 80085bc:	f7f8 f84a 	bl	8000654 <__aeabi_dadd>
 80085c0:	9000      	str	r0, [sp, #0]
 80085c2:	9101      	str	r1, [sp, #4]
 80085c4:	e0af      	b.n	8008726 <__ieee754_pow+0x1b6>
 80085c6:	4a93      	ldr	r2, [pc, #588]	@ (8008814 <__ieee754_pow+0x2a4>)
 80085c8:	007c      	lsls	r4, r7, #1
 80085ca:	9708      	str	r7, [sp, #32]
 80085cc:	900e      	str	r0, [sp, #56]	@ 0x38
 80085ce:	0864      	lsrs	r4, r4, #1
 80085d0:	4294      	cmp	r4, r2
 80085d2:	d809      	bhi.n	80085e8 <__ieee754_pow+0x78>
 80085d4:	d101      	bne.n	80085da <__ieee754_pow+0x6a>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d1ec      	bne.n	80085b4 <__ieee754_pow+0x44>
 80085da:	9904      	ldr	r1, [sp, #16]
 80085dc:	4a8d      	ldr	r2, [pc, #564]	@ (8008814 <__ieee754_pow+0x2a4>)
 80085de:	4291      	cmp	r1, r2
 80085e0:	d802      	bhi.n	80085e8 <__ieee754_pow+0x78>
 80085e2:	d10c      	bne.n	80085fe <__ieee754_pow+0x8e>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <__ieee754_pow+0x8e>
 80085e8:	4b8b      	ldr	r3, [pc, #556]	@ (8008818 <__ieee754_pow+0x2a8>)
 80085ea:	18fb      	adds	r3, r7, r3
 80085ec:	4333      	orrs	r3, r6
 80085ee:	d1e1      	bne.n	80085b4 <__ieee754_pow+0x44>
 80085f0:	2180      	movs	r1, #128	@ 0x80
 80085f2:	9803      	ldr	r0, [sp, #12]
 80085f4:	0309      	lsls	r1, r1, #12
 80085f6:	4048      	eors	r0, r1
 80085f8:	0003      	movs	r3, r0
 80085fa:	9a02      	ldr	r2, [sp, #8]
 80085fc:	e7ce      	b.n	800859c <__ieee754_pow+0x2c>
 80085fe:	2500      	movs	r5, #0
 8008600:	9a08      	ldr	r2, [sp, #32]
 8008602:	940a      	str	r4, [sp, #40]	@ 0x28
 8008604:	42aa      	cmp	r2, r5
 8008606:	da68      	bge.n	80086da <__ieee754_pow+0x16a>
 8008608:	4a84      	ldr	r2, [pc, #528]	@ (800881c <__ieee754_pow+0x2ac>)
 800860a:	9904      	ldr	r1, [sp, #16]
 800860c:	4291      	cmp	r1, r2
 800860e:	d863      	bhi.n	80086d8 <__ieee754_pow+0x168>
 8008610:	4a83      	ldr	r2, [pc, #524]	@ (8008820 <__ieee754_pow+0x2b0>)
 8008612:	4291      	cmp	r1, r2
 8008614:	d910      	bls.n	8008638 <__ieee754_pow+0xc8>
 8008616:	150a      	asrs	r2, r1, #20
 8008618:	4982      	ldr	r1, [pc, #520]	@ (8008824 <__ieee754_pow+0x2b4>)
 800861a:	1852      	adds	r2, r2, r1
 800861c:	2a14      	cmp	r2, #20
 800861e:	dd3b      	ble.n	8008698 <__ieee754_pow+0x128>
 8008620:	2134      	movs	r1, #52	@ 0x34
 8008622:	1a89      	subs	r1, r1, r2
 8008624:	9a02      	ldr	r2, [sp, #8]
 8008626:	40ca      	lsrs	r2, r1
 8008628:	0010      	movs	r0, r2
 800862a:	4088      	lsls	r0, r1
 800862c:	4298      	cmp	r0, r3
 800862e:	d103      	bne.n	8008638 <__ieee754_pow+0xc8>
 8008630:	2101      	movs	r1, #1
 8008632:	3502      	adds	r5, #2
 8008634:	400a      	ands	r2, r1
 8008636:	1aad      	subs	r5, r5, r2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d03d      	beq.n	80086b8 <__ieee754_pow+0x148>
 800863c:	0030      	movs	r0, r6
 800863e:	0039      	movs	r1, r7
 8008640:	f000 fcc2 	bl	8008fc8 <fabs>
 8008644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008646:	9000      	str	r0, [sp, #0]
 8008648:	9101      	str	r1, [sp, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d000      	beq.n	8008650 <__ieee754_pow+0xe0>
 800864e:	e093      	b.n	8008778 <__ieee754_pow+0x208>
 8008650:	4a75      	ldr	r2, [pc, #468]	@ (8008828 <__ieee754_pow+0x2b8>)
 8008652:	00bb      	lsls	r3, r7, #2
 8008654:	089b      	lsrs	r3, r3, #2
 8008656:	4293      	cmp	r3, r2
 8008658:	d002      	beq.n	8008660 <__ieee754_pow+0xf0>
 800865a:	2c00      	cmp	r4, #0
 800865c:	d000      	beq.n	8008660 <__ieee754_pow+0xf0>
 800865e:	e08b      	b.n	8008778 <__ieee754_pow+0x208>
 8008660:	9b06      	ldr	r3, [sp, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	da07      	bge.n	8008676 <__ieee754_pow+0x106>
 8008666:	9a00      	ldr	r2, [sp, #0]
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	2000      	movs	r0, #0
 800866c:	496e      	ldr	r1, [pc, #440]	@ (8008828 <__ieee754_pow+0x2b8>)
 800866e:	f7f8 fb55 	bl	8000d1c <__aeabi_ddiv>
 8008672:	9000      	str	r0, [sp, #0]
 8008674:	9101      	str	r1, [sp, #4]
 8008676:	9b08      	ldr	r3, [sp, #32]
 8008678:	2b00      	cmp	r3, #0
 800867a:	da54      	bge.n	8008726 <__ieee754_pow+0x1b6>
 800867c:	4b66      	ldr	r3, [pc, #408]	@ (8008818 <__ieee754_pow+0x2a8>)
 800867e:	18e4      	adds	r4, r4, r3
 8008680:	432c      	orrs	r4, r5
 8008682:	d000      	beq.n	8008686 <__ieee754_pow+0x116>
 8008684:	e06d      	b.n	8008762 <__ieee754_pow+0x1f2>
 8008686:	9a00      	ldr	r2, [sp, #0]
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	0010      	movs	r0, r2
 800868c:	0019      	movs	r1, r3
 800868e:	f7f9 fa51 	bl	8001b34 <__aeabi_dsub>
 8008692:	0002      	movs	r2, r0
 8008694:	000b      	movs	r3, r1
 8008696:	e01c      	b.n	80086d2 <__ieee754_pow+0x162>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1cf      	bne.n	800863c <__ieee754_pow+0xcc>
 800869c:	3314      	adds	r3, #20
 800869e:	1a9a      	subs	r2, r3, r2
 80086a0:	9b04      	ldr	r3, [sp, #16]
 80086a2:	4113      	asrs	r3, r2
 80086a4:	0019      	movs	r1, r3
 80086a6:	4091      	lsls	r1, r2
 80086a8:	000a      	movs	r2, r1
 80086aa:	9904      	ldr	r1, [sp, #16]
 80086ac:	428a      	cmp	r2, r1
 80086ae:	d103      	bne.n	80086b8 <__ieee754_pow+0x148>
 80086b0:	2201      	movs	r2, #1
 80086b2:	2502      	movs	r5, #2
 80086b4:	4013      	ands	r3, r2
 80086b6:	1aed      	subs	r5, r5, r3
 80086b8:	4b5b      	ldr	r3, [pc, #364]	@ (8008828 <__ieee754_pow+0x2b8>)
 80086ba:	9a04      	ldr	r2, [sp, #16]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d136      	bne.n	800872e <__ieee754_pow+0x1be>
 80086c0:	9b06      	ldr	r3, [sp, #24]
 80086c2:	9600      	str	r6, [sp, #0]
 80086c4:	9701      	str	r7, [sp, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da2d      	bge.n	8008726 <__ieee754_pow+0x1b6>
 80086ca:	0032      	movs	r2, r6
 80086cc:	003b      	movs	r3, r7
 80086ce:	2000      	movs	r0, #0
 80086d0:	4955      	ldr	r1, [pc, #340]	@ (8008828 <__ieee754_pow+0x2b8>)
 80086d2:	f7f8 fb23 	bl	8000d1c <__aeabi_ddiv>
 80086d6:	e773      	b.n	80085c0 <__ieee754_pow+0x50>
 80086d8:	2502      	movs	r5, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1ae      	bne.n	800863c <__ieee754_pow+0xcc>
 80086de:	9b04      	ldr	r3, [sp, #16]
 80086e0:	4a4c      	ldr	r2, [pc, #304]	@ (8008814 <__ieee754_pow+0x2a4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d1e8      	bne.n	80086b8 <__ieee754_pow+0x148>
 80086e6:	4b4c      	ldr	r3, [pc, #304]	@ (8008818 <__ieee754_pow+0x2a8>)
 80086e8:	18e3      	adds	r3, r4, r3
 80086ea:	4333      	orrs	r3, r6
 80086ec:	d101      	bne.n	80086f2 <__ieee754_pow+0x182>
 80086ee:	f000 fc3b 	bl	8008f68 <__ieee754_pow+0x9f8>
 80086f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008820 <__ieee754_pow+0x2b0>)
 80086f4:	429c      	cmp	r4, r3
 80086f6:	d909      	bls.n	800870c <__ieee754_pow+0x19c>
 80086f8:	9b06      	ldr	r3, [sp, #24]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	da01      	bge.n	8008702 <__ieee754_pow+0x192>
 80086fe:	f000 fc37 	bl	8008f70 <__ieee754_pow+0xa00>
 8008702:	9b02      	ldr	r3, [sp, #8]
 8008704:	9c03      	ldr	r4, [sp, #12]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	9401      	str	r4, [sp, #4]
 800870a:	e00c      	b.n	8008726 <__ieee754_pow+0x1b6>
 800870c:	9b06      	ldr	r3, [sp, #24]
 800870e:	2b00      	cmp	r3, #0
 8008710:	db01      	blt.n	8008716 <__ieee754_pow+0x1a6>
 8008712:	f000 fc2d 	bl	8008f70 <__ieee754_pow+0xa00>
 8008716:	2280      	movs	r2, #128	@ 0x80
 8008718:	0612      	lsls	r2, r2, #24
 800871a:	4694      	mov	ip, r2
 800871c:	9b02      	ldr	r3, [sp, #8]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	4463      	add	r3, ip
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	9800      	ldr	r0, [sp, #0]
 8008728:	9901      	ldr	r1, [sp, #4]
 800872a:	b015      	add	sp, #84	@ 0x54
 800872c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800872e:	2380      	movs	r3, #128	@ 0x80
 8008730:	9a06      	ldr	r2, [sp, #24]
 8008732:	05db      	lsls	r3, r3, #23
 8008734:	429a      	cmp	r2, r3
 8008736:	d106      	bne.n	8008746 <__ieee754_pow+0x1d6>
 8008738:	0032      	movs	r2, r6
 800873a:	003b      	movs	r3, r7
 800873c:	0030      	movs	r0, r6
 800873e:	0039      	movs	r1, r7
 8008740:	f7f8 ff30 	bl	80015a4 <__aeabi_dmul>
 8008744:	e73c      	b.n	80085c0 <__ieee754_pow+0x50>
 8008746:	4b39      	ldr	r3, [pc, #228]	@ (800882c <__ieee754_pow+0x2bc>)
 8008748:	9a06      	ldr	r2, [sp, #24]
 800874a:	429a      	cmp	r2, r3
 800874c:	d000      	beq.n	8008750 <__ieee754_pow+0x1e0>
 800874e:	e775      	b.n	800863c <__ieee754_pow+0xcc>
 8008750:	9b08      	ldr	r3, [sp, #32]
 8008752:	2b00      	cmp	r3, #0
 8008754:	da00      	bge.n	8008758 <__ieee754_pow+0x1e8>
 8008756:	e771      	b.n	800863c <__ieee754_pow+0xcc>
 8008758:	0030      	movs	r0, r6
 800875a:	0039      	movs	r1, r7
 800875c:	f000 fcd2 	bl	8009104 <__ieee754_sqrt>
 8008760:	e72e      	b.n	80085c0 <__ieee754_pow+0x50>
 8008762:	2d01      	cmp	r5, #1
 8008764:	d1df      	bne.n	8008726 <__ieee754_pow+0x1b6>
 8008766:	9800      	ldr	r0, [sp, #0]
 8008768:	2180      	movs	r1, #128	@ 0x80
 800876a:	0002      	movs	r2, r0
 800876c:	9801      	ldr	r0, [sp, #4]
 800876e:	0609      	lsls	r1, r1, #24
 8008770:	1843      	adds	r3, r0, r1
 8008772:	9200      	str	r2, [sp, #0]
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	e7d6      	b.n	8008726 <__ieee754_pow+0x1b6>
 8008778:	0ffb      	lsrs	r3, r7, #31
 800877a:	3b01      	subs	r3, #1
 800877c:	001a      	movs	r2, r3
 800877e:	432a      	orrs	r2, r5
 8008780:	d104      	bne.n	800878c <__ieee754_pow+0x21c>
 8008782:	0032      	movs	r2, r6
 8008784:	003b      	movs	r3, r7
 8008786:	0030      	movs	r0, r6
 8008788:	0039      	movs	r1, r7
 800878a:	e780      	b.n	800868e <__ieee754_pow+0x11e>
 800878c:	3d01      	subs	r5, #1
 800878e:	2200      	movs	r2, #0
 8008790:	431d      	orrs	r5, r3
 8008792:	d015      	beq.n	80087c0 <__ieee754_pow+0x250>
 8008794:	4b24      	ldr	r3, [pc, #144]	@ (8008828 <__ieee754_pow+0x2b8>)
 8008796:	9208      	str	r2, [sp, #32]
 8008798:	9309      	str	r3, [sp, #36]	@ 0x24
 800879a:	2384      	movs	r3, #132	@ 0x84
 800879c:	9a04      	ldr	r2, [sp, #16]
 800879e:	05db      	lsls	r3, r3, #23
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d800      	bhi.n	80087a6 <__ieee754_pow+0x236>
 80087a4:	e102      	b.n	80089ac <__ieee754_pow+0x43c>
 80087a6:	4b22      	ldr	r3, [pc, #136]	@ (8008830 <__ieee754_pow+0x2c0>)
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d912      	bls.n	80087d2 <__ieee754_pow+0x262>
 80087ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008820 <__ieee754_pow+0x2b0>)
 80087ae:	429c      	cmp	r4, r3
 80087b0:	d808      	bhi.n	80087c4 <__ieee754_pow+0x254>
 80087b2:	9b06      	ldr	r3, [sp, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da08      	bge.n	80087ca <__ieee754_pow+0x25a>
 80087b8:	2000      	movs	r0, #0
 80087ba:	f000 fc9b 	bl	80090f4 <__math_oflow>
 80087be:	e6ff      	b.n	80085c0 <__ieee754_pow+0x50>
 80087c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008834 <__ieee754_pow+0x2c4>)
 80087c2:	e7e8      	b.n	8008796 <__ieee754_pow+0x226>
 80087c4:	9b06      	ldr	r3, [sp, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dcf6      	bgt.n	80087b8 <__ieee754_pow+0x248>
 80087ca:	2000      	movs	r0, #0
 80087cc:	f000 fc8b 	bl	80090e6 <__math_uflow>
 80087d0:	e6f6      	b.n	80085c0 <__ieee754_pow+0x50>
 80087d2:	4b19      	ldr	r3, [pc, #100]	@ (8008838 <__ieee754_pow+0x2c8>)
 80087d4:	429c      	cmp	r4, r3
 80087d6:	d80b      	bhi.n	80087f0 <__ieee754_pow+0x280>
 80087d8:	9808      	ldr	r0, [sp, #32]
 80087da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087dc:	2300      	movs	r3, #0
 80087de:	2200      	movs	r2, #0
 80087e0:	f7f7 fe24 	bl	800042c <__aeabi_dcmplt>
 80087e4:	1e43      	subs	r3, r0, #1
 80087e6:	4198      	sbcs	r0, r3
 80087e8:	9b06      	ldr	r3, [sp, #24]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	daee      	bge.n	80087cc <__ieee754_pow+0x25c>
 80087ee:	e7e4      	b.n	80087ba <__ieee754_pow+0x24a>
 80087f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008828 <__ieee754_pow+0x2b8>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	429c      	cmp	r4, r3
 80087f6:	d921      	bls.n	800883c <__ieee754_pow+0x2cc>
 80087f8:	9808      	ldr	r0, [sp, #32]
 80087fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087fc:	2300      	movs	r3, #0
 80087fe:	f7f7 fe15 	bl	800042c <__aeabi_dcmplt>
 8008802:	1e43      	subs	r3, r0, #1
 8008804:	4198      	sbcs	r0, r3
 8008806:	9b06      	ldr	r3, [sp, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	dcd6      	bgt.n	80087ba <__ieee754_pow+0x24a>
 800880c:	e7de      	b.n	80087cc <__ieee754_pow+0x25c>
 800880e:	46c0      	nop			@ (mov r8, r8)
 8008810:	fff00000 	.word	0xfff00000
 8008814:	7ff00000 	.word	0x7ff00000
 8008818:	c0100000 	.word	0xc0100000
 800881c:	433fffff 	.word	0x433fffff
 8008820:	3fefffff 	.word	0x3fefffff
 8008824:	fffffc01 	.word	0xfffffc01
 8008828:	3ff00000 	.word	0x3ff00000
 800882c:	3fe00000 	.word	0x3fe00000
 8008830:	43f00000 	.word	0x43f00000
 8008834:	bff00000 	.word	0xbff00000
 8008838:	3feffffe 	.word	0x3feffffe
 800883c:	9800      	ldr	r0, [sp, #0]
 800883e:	9901      	ldr	r1, [sp, #4]
 8008840:	4b4f      	ldr	r3, [pc, #316]	@ (8008980 <__ieee754_pow+0x410>)
 8008842:	f7f9 f977 	bl	8001b34 <__aeabi_dsub>
 8008846:	22c0      	movs	r2, #192	@ 0xc0
 8008848:	4b4e      	ldr	r3, [pc, #312]	@ (8008984 <__ieee754_pow+0x414>)
 800884a:	05d2      	lsls	r2, r2, #23
 800884c:	0006      	movs	r6, r0
 800884e:	000f      	movs	r7, r1
 8008850:	f7f8 fea8 	bl	80015a4 <__aeabi_dmul>
 8008854:	4a4c      	ldr	r2, [pc, #304]	@ (8008988 <__ieee754_pow+0x418>)
 8008856:	9004      	str	r0, [sp, #16]
 8008858:	9105      	str	r1, [sp, #20]
 800885a:	4b4c      	ldr	r3, [pc, #304]	@ (800898c <__ieee754_pow+0x41c>)
 800885c:	0030      	movs	r0, r6
 800885e:	0039      	movs	r1, r7
 8008860:	f7f8 fea0 	bl	80015a4 <__aeabi_dmul>
 8008864:	2200      	movs	r2, #0
 8008866:	9000      	str	r0, [sp, #0]
 8008868:	9101      	str	r1, [sp, #4]
 800886a:	4b49      	ldr	r3, [pc, #292]	@ (8008990 <__ieee754_pow+0x420>)
 800886c:	0030      	movs	r0, r6
 800886e:	0039      	movs	r1, r7
 8008870:	f7f8 fe98 	bl	80015a4 <__aeabi_dmul>
 8008874:	0002      	movs	r2, r0
 8008876:	000b      	movs	r3, r1
 8008878:	4846      	ldr	r0, [pc, #280]	@ (8008994 <__ieee754_pow+0x424>)
 800887a:	4947      	ldr	r1, [pc, #284]	@ (8008998 <__ieee754_pow+0x428>)
 800887c:	f7f9 f95a 	bl	8001b34 <__aeabi_dsub>
 8008880:	0032      	movs	r2, r6
 8008882:	003b      	movs	r3, r7
 8008884:	f7f8 fe8e 	bl	80015a4 <__aeabi_dmul>
 8008888:	0002      	movs	r2, r0
 800888a:	000b      	movs	r3, r1
 800888c:	2000      	movs	r0, #0
 800888e:	4943      	ldr	r1, [pc, #268]	@ (800899c <__ieee754_pow+0x42c>)
 8008890:	f7f9 f950 	bl	8001b34 <__aeabi_dsub>
 8008894:	0032      	movs	r2, r6
 8008896:	0004      	movs	r4, r0
 8008898:	000d      	movs	r5, r1
 800889a:	003b      	movs	r3, r7
 800889c:	0030      	movs	r0, r6
 800889e:	0039      	movs	r1, r7
 80088a0:	f7f8 fe80 	bl	80015a4 <__aeabi_dmul>
 80088a4:	0002      	movs	r2, r0
 80088a6:	000b      	movs	r3, r1
 80088a8:	0020      	movs	r0, r4
 80088aa:	0029      	movs	r1, r5
 80088ac:	f7f8 fe7a 	bl	80015a4 <__aeabi_dmul>
 80088b0:	4a3b      	ldr	r2, [pc, #236]	@ (80089a0 <__ieee754_pow+0x430>)
 80088b2:	4b34      	ldr	r3, [pc, #208]	@ (8008984 <__ieee754_pow+0x414>)
 80088b4:	f7f8 fe76 	bl	80015a4 <__aeabi_dmul>
 80088b8:	0002      	movs	r2, r0
 80088ba:	000b      	movs	r3, r1
 80088bc:	9800      	ldr	r0, [sp, #0]
 80088be:	9901      	ldr	r1, [sp, #4]
 80088c0:	f7f9 f938 	bl	8001b34 <__aeabi_dsub>
 80088c4:	0002      	movs	r2, r0
 80088c6:	000b      	movs	r3, r1
 80088c8:	0004      	movs	r4, r0
 80088ca:	000d      	movs	r5, r1
 80088cc:	9804      	ldr	r0, [sp, #16]
 80088ce:	9905      	ldr	r1, [sp, #20]
 80088d0:	f7f7 fec0 	bl	8000654 <__aeabi_dadd>
 80088d4:	9a04      	ldr	r2, [sp, #16]
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	2000      	movs	r0, #0
 80088da:	9000      	str	r0, [sp, #0]
 80088dc:	9101      	str	r1, [sp, #4]
 80088de:	f7f9 f929 	bl	8001b34 <__aeabi_dsub>
 80088e2:	0002      	movs	r2, r0
 80088e4:	000b      	movs	r3, r1
 80088e6:	0020      	movs	r0, r4
 80088e8:	0029      	movs	r1, r5
 80088ea:	f7f9 f923 	bl	8001b34 <__aeabi_dsub>
 80088ee:	9b02      	ldr	r3, [sp, #8]
 80088f0:	9c03      	ldr	r4, [sp, #12]
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	9405      	str	r4, [sp, #20]
 80088f6:	2300      	movs	r3, #0
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	9c04      	ldr	r4, [sp, #16]
 80088fc:	9d05      	ldr	r5, [sp, #20]
 80088fe:	0006      	movs	r6, r0
 8008900:	000f      	movs	r7, r1
 8008902:	9802      	ldr	r0, [sp, #8]
 8008904:	9903      	ldr	r1, [sp, #12]
 8008906:	0022      	movs	r2, r4
 8008908:	002b      	movs	r3, r5
 800890a:	f7f9 f913 	bl	8001b34 <__aeabi_dsub>
 800890e:	9a00      	ldr	r2, [sp, #0]
 8008910:	9b01      	ldr	r3, [sp, #4]
 8008912:	f7f8 fe47 	bl	80015a4 <__aeabi_dmul>
 8008916:	9a02      	ldr	r2, [sp, #8]
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	9006      	str	r0, [sp, #24]
 800891c:	9107      	str	r1, [sp, #28]
 800891e:	0030      	movs	r0, r6
 8008920:	0039      	movs	r1, r7
 8008922:	f7f8 fe3f 	bl	80015a4 <__aeabi_dmul>
 8008926:	0002      	movs	r2, r0
 8008928:	000b      	movs	r3, r1
 800892a:	9806      	ldr	r0, [sp, #24]
 800892c:	9907      	ldr	r1, [sp, #28]
 800892e:	f7f7 fe91 	bl	8000654 <__aeabi_dadd>
 8008932:	0022      	movs	r2, r4
 8008934:	002b      	movs	r3, r5
 8008936:	9002      	str	r0, [sp, #8]
 8008938:	9103      	str	r1, [sp, #12]
 800893a:	9800      	ldr	r0, [sp, #0]
 800893c:	9901      	ldr	r1, [sp, #4]
 800893e:	f7f8 fe31 	bl	80015a4 <__aeabi_dmul>
 8008942:	000b      	movs	r3, r1
 8008944:	0002      	movs	r2, r0
 8008946:	0006      	movs	r6, r0
 8008948:	000f      	movs	r7, r1
 800894a:	9802      	ldr	r0, [sp, #8]
 800894c:	9903      	ldr	r1, [sp, #12]
 800894e:	f7f7 fe81 	bl	8000654 <__aeabi_dadd>
 8008952:	9000      	str	r0, [sp, #0]
 8008954:	9101      	str	r1, [sp, #4]
 8008956:	9c01      	ldr	r4, [sp, #4]
 8008958:	4b12      	ldr	r3, [pc, #72]	@ (80089a4 <__ieee754_pow+0x434>)
 800895a:	9406      	str	r4, [sp, #24]
 800895c:	429c      	cmp	r4, r3
 800895e:	dc00      	bgt.n	8008962 <__ieee754_pow+0x3f2>
 8008960:	e222      	b.n	8008da8 <__ieee754_pow+0x838>
 8008962:	4a11      	ldr	r2, [pc, #68]	@ (80089a8 <__ieee754_pow+0x438>)
 8008964:	18a3      	adds	r3, r4, r2
 8008966:	9a00      	ldr	r2, [sp, #0]
 8008968:	4313      	orrs	r3, r2
 800896a:	d100      	bne.n	800896e <__ieee754_pow+0x3fe>
 800896c:	e1a0      	b.n	8008cb0 <__ieee754_pow+0x740>
 800896e:	9808      	ldr	r0, [sp, #32]
 8008970:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008972:	2300      	movs	r3, #0
 8008974:	2200      	movs	r2, #0
 8008976:	f7f7 fd59 	bl	800042c <__aeabi_dcmplt>
 800897a:	1e43      	subs	r3, r0, #1
 800897c:	4198      	sbcs	r0, r3
 800897e:	e71c      	b.n	80087ba <__ieee754_pow+0x24a>
 8008980:	3ff00000 	.word	0x3ff00000
 8008984:	3ff71547 	.word	0x3ff71547
 8008988:	f85ddf44 	.word	0xf85ddf44
 800898c:	3e54ae0b 	.word	0x3e54ae0b
 8008990:	3fd00000 	.word	0x3fd00000
 8008994:	55555555 	.word	0x55555555
 8008998:	3fd55555 	.word	0x3fd55555
 800899c:	3fe00000 	.word	0x3fe00000
 80089a0:	652b82fe 	.word	0x652b82fe
 80089a4:	408fffff 	.word	0x408fffff
 80089a8:	bf700000 	.word	0xbf700000
 80089ac:	4be0      	ldr	r3, [pc, #896]	@ (8008d30 <__ieee754_pow+0x7c0>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	423b      	tst	r3, r7
 80089b2:	d10b      	bne.n	80089cc <__ieee754_pow+0x45c>
 80089b4:	9800      	ldr	r0, [sp, #0]
 80089b6:	9901      	ldr	r1, [sp, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	4bde      	ldr	r3, [pc, #888]	@ (8008d34 <__ieee754_pow+0x7c4>)
 80089bc:	f7f8 fdf2 	bl	80015a4 <__aeabi_dmul>
 80089c0:	2235      	movs	r2, #53	@ 0x35
 80089c2:	9000      	str	r0, [sp, #0]
 80089c4:	9101      	str	r1, [sp, #4]
 80089c6:	9b01      	ldr	r3, [sp, #4]
 80089c8:	4252      	negs	r2, r2
 80089ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80089cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ce:	49da      	ldr	r1, [pc, #872]	@ (8008d38 <__ieee754_pow+0x7c8>)
 80089d0:	151b      	asrs	r3, r3, #20
 80089d2:	185b      	adds	r3, r3, r1
 80089d4:	189b      	adds	r3, r3, r2
 80089d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80089d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089da:	4dd8      	ldr	r5, [pc, #864]	@ (8008d3c <__ieee754_pow+0x7cc>)
 80089dc:	031b      	lsls	r3, r3, #12
 80089de:	4ad8      	ldr	r2, [pc, #864]	@ (8008d40 <__ieee754_pow+0x7d0>)
 80089e0:	0b1b      	lsrs	r3, r3, #12
 80089e2:	2600      	movs	r6, #0
 80089e4:	431d      	orrs	r5, r3
 80089e6:	4293      	cmp	r3, r2
 80089e8:	dd09      	ble.n	80089fe <__ieee754_pow+0x48e>
 80089ea:	4ad6      	ldr	r2, [pc, #856]	@ (8008d44 <__ieee754_pow+0x7d4>)
 80089ec:	3601      	adds	r6, #1
 80089ee:	4293      	cmp	r3, r2
 80089f0:	dd05      	ble.n	80089fe <__ieee754_pow+0x48e>
 80089f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089f4:	199b      	adds	r3, r3, r6
 80089f6:	2600      	movs	r6, #0
 80089f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80089fa:	4bd3      	ldr	r3, [pc, #844]	@ (8008d48 <__ieee754_pow+0x7d8>)
 80089fc:	18ed      	adds	r5, r5, r3
 80089fe:	9800      	ldr	r0, [sp, #0]
 8008a00:	9901      	ldr	r1, [sp, #4]
 8008a02:	0029      	movs	r1, r5
 8008a04:	4bd1      	ldr	r3, [pc, #836]	@ (8008d4c <__ieee754_pow+0x7dc>)
 8008a06:	00f2      	lsls	r2, r6, #3
 8008a08:	189b      	adds	r3, r3, r2
 8008a0a:	685c      	ldr	r4, [r3, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008a10:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a14:	001a      	movs	r2, r3
 8008a16:	0023      	movs	r3, r4
 8008a18:	900c      	str	r0, [sp, #48]	@ 0x30
 8008a1a:	910d      	str	r1, [sp, #52]	@ 0x34
 8008a1c:	f7f9 f88a 	bl	8001b34 <__aeabi_dsub>
 8008a20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a24:	9010      	str	r0, [sp, #64]	@ 0x40
 8008a26:	9111      	str	r1, [sp, #68]	@ 0x44
 8008a28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a2c:	f7f7 fe12 	bl	8000654 <__aeabi_dadd>
 8008a30:	0002      	movs	r2, r0
 8008a32:	000b      	movs	r3, r1
 8008a34:	2000      	movs	r0, #0
 8008a36:	49c1      	ldr	r1, [pc, #772]	@ (8008d3c <__ieee754_pow+0x7cc>)
 8008a38:	f7f8 f970 	bl	8000d1c <__aeabi_ddiv>
 8008a3c:	0002      	movs	r2, r0
 8008a3e:	000b      	movs	r3, r1
 8008a40:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a42:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008a44:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008a46:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008a48:	f7f8 fdac 	bl	80015a4 <__aeabi_dmul>
 8008a4c:	9006      	str	r0, [sp, #24]
 8008a4e:	9107      	str	r1, [sp, #28]
 8008a50:	9b06      	ldr	r3, [sp, #24]
 8008a52:	9c07      	ldr	r4, [sp, #28]
 8008a54:	2180      	movs	r1, #128	@ 0x80
 8008a56:	9304      	str	r3, [sp, #16]
 8008a58:	9405      	str	r4, [sp, #20]
 8008a5a:	2080      	movs	r0, #128	@ 0x80
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2200      	movs	r2, #0
 8008a60:	106d      	asrs	r5, r5, #1
 8008a62:	0589      	lsls	r1, r1, #22
 8008a64:	9304      	str	r3, [sp, #16]
 8008a66:	4329      	orrs	r1, r5
 8008a68:	0300      	lsls	r0, r0, #12
 8008a6a:	9b04      	ldr	r3, [sp, #16]
 8008a6c:	9c05      	ldr	r4, [sp, #20]
 8008a6e:	1809      	adds	r1, r1, r0
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	9401      	str	r4, [sp, #4]
 8008a74:	04b6      	lsls	r6, r6, #18
 8008a76:	198b      	adds	r3, r1, r6
 8008a78:	9800      	ldr	r0, [sp, #0]
 8008a7a:	9901      	ldr	r1, [sp, #4]
 8008a7c:	0014      	movs	r4, r2
 8008a7e:	001d      	movs	r5, r3
 8008a80:	f7f8 fd90 	bl	80015a4 <__aeabi_dmul>
 8008a84:	0002      	movs	r2, r0
 8008a86:	000b      	movs	r3, r1
 8008a88:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008a8a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008a8c:	f7f9 f852 	bl	8001b34 <__aeabi_dsub>
 8008a90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a94:	0006      	movs	r6, r0
 8008a96:	000f      	movs	r7, r1
 8008a98:	0020      	movs	r0, r4
 8008a9a:	0029      	movs	r1, r5
 8008a9c:	f7f9 f84a 	bl	8001b34 <__aeabi_dsub>
 8008aa0:	0002      	movs	r2, r0
 8008aa2:	000b      	movs	r3, r1
 8008aa4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008aa6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008aa8:	f7f9 f844 	bl	8001b34 <__aeabi_dsub>
 8008aac:	9a00      	ldr	r2, [sp, #0]
 8008aae:	9b01      	ldr	r3, [sp, #4]
 8008ab0:	f7f8 fd78 	bl	80015a4 <__aeabi_dmul>
 8008ab4:	0002      	movs	r2, r0
 8008ab6:	000b      	movs	r3, r1
 8008ab8:	0030      	movs	r0, r6
 8008aba:	0039      	movs	r1, r7
 8008abc:	f7f9 f83a 	bl	8001b34 <__aeabi_dsub>
 8008ac0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008ac2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ac4:	f7f8 fd6e 	bl	80015a4 <__aeabi_dmul>
 8008ac8:	9a06      	ldr	r2, [sp, #24]
 8008aca:	9b07      	ldr	r3, [sp, #28]
 8008acc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ace:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ad0:	0010      	movs	r0, r2
 8008ad2:	0019      	movs	r1, r3
 8008ad4:	f7f8 fd66 	bl	80015a4 <__aeabi_dmul>
 8008ad8:	0006      	movs	r6, r0
 8008ada:	000f      	movs	r7, r1
 8008adc:	4a9c      	ldr	r2, [pc, #624]	@ (8008d50 <__ieee754_pow+0x7e0>)
 8008ade:	4b9d      	ldr	r3, [pc, #628]	@ (8008d54 <__ieee754_pow+0x7e4>)
 8008ae0:	f7f8 fd60 	bl	80015a4 <__aeabi_dmul>
 8008ae4:	4a9c      	ldr	r2, [pc, #624]	@ (8008d58 <__ieee754_pow+0x7e8>)
 8008ae6:	4b9d      	ldr	r3, [pc, #628]	@ (8008d5c <__ieee754_pow+0x7ec>)
 8008ae8:	f7f7 fdb4 	bl	8000654 <__aeabi_dadd>
 8008aec:	0032      	movs	r2, r6
 8008aee:	003b      	movs	r3, r7
 8008af0:	f7f8 fd58 	bl	80015a4 <__aeabi_dmul>
 8008af4:	4a9a      	ldr	r2, [pc, #616]	@ (8008d60 <__ieee754_pow+0x7f0>)
 8008af6:	4b9b      	ldr	r3, [pc, #620]	@ (8008d64 <__ieee754_pow+0x7f4>)
 8008af8:	f7f7 fdac 	bl	8000654 <__aeabi_dadd>
 8008afc:	0032      	movs	r2, r6
 8008afe:	003b      	movs	r3, r7
 8008b00:	f7f8 fd50 	bl	80015a4 <__aeabi_dmul>
 8008b04:	4a98      	ldr	r2, [pc, #608]	@ (8008d68 <__ieee754_pow+0x7f8>)
 8008b06:	4b99      	ldr	r3, [pc, #612]	@ (8008d6c <__ieee754_pow+0x7fc>)
 8008b08:	f7f7 fda4 	bl	8000654 <__aeabi_dadd>
 8008b0c:	0032      	movs	r2, r6
 8008b0e:	003b      	movs	r3, r7
 8008b10:	f7f8 fd48 	bl	80015a4 <__aeabi_dmul>
 8008b14:	4a96      	ldr	r2, [pc, #600]	@ (8008d70 <__ieee754_pow+0x800>)
 8008b16:	4b97      	ldr	r3, [pc, #604]	@ (8008d74 <__ieee754_pow+0x804>)
 8008b18:	f7f7 fd9c 	bl	8000654 <__aeabi_dadd>
 8008b1c:	0032      	movs	r2, r6
 8008b1e:	003b      	movs	r3, r7
 8008b20:	f7f8 fd40 	bl	80015a4 <__aeabi_dmul>
 8008b24:	4a94      	ldr	r2, [pc, #592]	@ (8008d78 <__ieee754_pow+0x808>)
 8008b26:	4b95      	ldr	r3, [pc, #596]	@ (8008d7c <__ieee754_pow+0x80c>)
 8008b28:	f7f7 fd94 	bl	8000654 <__aeabi_dadd>
 8008b2c:	0032      	movs	r2, r6
 8008b2e:	0004      	movs	r4, r0
 8008b30:	000d      	movs	r5, r1
 8008b32:	003b      	movs	r3, r7
 8008b34:	0030      	movs	r0, r6
 8008b36:	0039      	movs	r1, r7
 8008b38:	f7f8 fd34 	bl	80015a4 <__aeabi_dmul>
 8008b3c:	0002      	movs	r2, r0
 8008b3e:	000b      	movs	r3, r1
 8008b40:	0020      	movs	r0, r4
 8008b42:	0029      	movs	r1, r5
 8008b44:	f7f8 fd2e 	bl	80015a4 <__aeabi_dmul>
 8008b48:	9a00      	ldr	r2, [sp, #0]
 8008b4a:	9b01      	ldr	r3, [sp, #4]
 8008b4c:	0004      	movs	r4, r0
 8008b4e:	000d      	movs	r5, r1
 8008b50:	9806      	ldr	r0, [sp, #24]
 8008b52:	9907      	ldr	r1, [sp, #28]
 8008b54:	f7f7 fd7e 	bl	8000654 <__aeabi_dadd>
 8008b58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b5c:	f7f8 fd22 	bl	80015a4 <__aeabi_dmul>
 8008b60:	0022      	movs	r2, r4
 8008b62:	002b      	movs	r3, r5
 8008b64:	f7f7 fd76 	bl	8000654 <__aeabi_dadd>
 8008b68:	9a00      	ldr	r2, [sp, #0]
 8008b6a:	9b01      	ldr	r3, [sp, #4]
 8008b6c:	900c      	str	r0, [sp, #48]	@ 0x30
 8008b6e:	910d      	str	r1, [sp, #52]	@ 0x34
 8008b70:	0010      	movs	r0, r2
 8008b72:	0019      	movs	r1, r3
 8008b74:	f7f8 fd16 	bl	80015a4 <__aeabi_dmul>
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4b81      	ldr	r3, [pc, #516]	@ (8008d80 <__ieee754_pow+0x810>)
 8008b7c:	0004      	movs	r4, r0
 8008b7e:	000d      	movs	r5, r1
 8008b80:	f7f7 fd68 	bl	8000654 <__aeabi_dadd>
 8008b84:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b88:	f7f7 fd64 	bl	8000654 <__aeabi_dadd>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	000f      	movs	r7, r1
 8008b90:	0006      	movs	r6, r0
 8008b92:	0002      	movs	r2, r0
 8008b94:	000b      	movs	r3, r1
 8008b96:	9800      	ldr	r0, [sp, #0]
 8008b98:	9901      	ldr	r1, [sp, #4]
 8008b9a:	f7f8 fd03 	bl	80015a4 <__aeabi_dmul>
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	9000      	str	r0, [sp, #0]
 8008ba2:	9101      	str	r1, [sp, #4]
 8008ba4:	4b76      	ldr	r3, [pc, #472]	@ (8008d80 <__ieee754_pow+0x810>)
 8008ba6:	0030      	movs	r0, r6
 8008ba8:	0039      	movs	r1, r7
 8008baa:	f7f8 ffc3 	bl	8001b34 <__aeabi_dsub>
 8008bae:	0022      	movs	r2, r4
 8008bb0:	002b      	movs	r3, r5
 8008bb2:	f7f8 ffbf 	bl	8001b34 <__aeabi_dsub>
 8008bb6:	0002      	movs	r2, r0
 8008bb8:	000b      	movs	r3, r1
 8008bba:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008bbc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008bbe:	f7f8 ffb9 	bl	8001b34 <__aeabi_dsub>
 8008bc2:	9a06      	ldr	r2, [sp, #24]
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	f7f8 fced 	bl	80015a4 <__aeabi_dmul>
 8008bca:	0032      	movs	r2, r6
 8008bcc:	0004      	movs	r4, r0
 8008bce:	000d      	movs	r5, r1
 8008bd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008bd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bd4:	003b      	movs	r3, r7
 8008bd6:	f7f8 fce5 	bl	80015a4 <__aeabi_dmul>
 8008bda:	0002      	movs	r2, r0
 8008bdc:	000b      	movs	r3, r1
 8008bde:	0020      	movs	r0, r4
 8008be0:	0029      	movs	r1, r5
 8008be2:	f7f7 fd37 	bl	8000654 <__aeabi_dadd>
 8008be6:	0004      	movs	r4, r0
 8008be8:	000d      	movs	r5, r1
 8008bea:	0002      	movs	r2, r0
 8008bec:	000b      	movs	r3, r1
 8008bee:	9800      	ldr	r0, [sp, #0]
 8008bf0:	9901      	ldr	r1, [sp, #4]
 8008bf2:	f7f7 fd2f 	bl	8000654 <__aeabi_dadd>
 8008bf6:	22e0      	movs	r2, #224	@ 0xe0
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	4b62      	ldr	r3, [pc, #392]	@ (8008d84 <__ieee754_pow+0x814>)
 8008bfc:	0612      	lsls	r2, r2, #24
 8008bfe:	0006      	movs	r6, r0
 8008c00:	000f      	movs	r7, r1
 8008c02:	f7f8 fccf 	bl	80015a4 <__aeabi_dmul>
 8008c06:	9006      	str	r0, [sp, #24]
 8008c08:	9107      	str	r1, [sp, #28]
 8008c0a:	9a00      	ldr	r2, [sp, #0]
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	0030      	movs	r0, r6
 8008c10:	0039      	movs	r1, r7
 8008c12:	f7f8 ff8f 	bl	8001b34 <__aeabi_dsub>
 8008c16:	0002      	movs	r2, r0
 8008c18:	000b      	movs	r3, r1
 8008c1a:	0020      	movs	r0, r4
 8008c1c:	0029      	movs	r1, r5
 8008c1e:	f7f8 ff89 	bl	8001b34 <__aeabi_dsub>
 8008c22:	4a59      	ldr	r2, [pc, #356]	@ (8008d88 <__ieee754_pow+0x818>)
 8008c24:	4b57      	ldr	r3, [pc, #348]	@ (8008d84 <__ieee754_pow+0x814>)
 8008c26:	f7f8 fcbd 	bl	80015a4 <__aeabi_dmul>
 8008c2a:	4a58      	ldr	r2, [pc, #352]	@ (8008d8c <__ieee754_pow+0x81c>)
 8008c2c:	0004      	movs	r4, r0
 8008c2e:	000d      	movs	r5, r1
 8008c30:	0030      	movs	r0, r6
 8008c32:	0039      	movs	r1, r7
 8008c34:	4b56      	ldr	r3, [pc, #344]	@ (8008d90 <__ieee754_pow+0x820>)
 8008c36:	f7f8 fcb5 	bl	80015a4 <__aeabi_dmul>
 8008c3a:	0002      	movs	r2, r0
 8008c3c:	000b      	movs	r3, r1
 8008c3e:	0020      	movs	r0, r4
 8008c40:	0029      	movs	r1, r5
 8008c42:	f7f7 fd07 	bl	8000654 <__aeabi_dadd>
 8008c46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c48:	4b52      	ldr	r3, [pc, #328]	@ (8008d94 <__ieee754_pow+0x824>)
 8008c4a:	189b      	adds	r3, r3, r2
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f7f7 fd00 	bl	8000654 <__aeabi_dadd>
 8008c54:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c58:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008c5a:	f7f9 fb65 	bl	8002328 <__aeabi_i2d>
 8008c5e:	0004      	movs	r4, r0
 8008c60:	000d      	movs	r5, r1
 8008c62:	9806      	ldr	r0, [sp, #24]
 8008c64:	9907      	ldr	r1, [sp, #28]
 8008c66:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c68:	4b4b      	ldr	r3, [pc, #300]	@ (8008d98 <__ieee754_pow+0x828>)
 8008c6a:	189b      	adds	r3, r3, r2
 8008c6c:	681e      	ldr	r6, [r3, #0]
 8008c6e:	685f      	ldr	r7, [r3, #4]
 8008c70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c74:	f7f7 fcee 	bl	8000654 <__aeabi_dadd>
 8008c78:	0032      	movs	r2, r6
 8008c7a:	003b      	movs	r3, r7
 8008c7c:	f7f7 fcea 	bl	8000654 <__aeabi_dadd>
 8008c80:	0022      	movs	r2, r4
 8008c82:	002b      	movs	r3, r5
 8008c84:	f7f7 fce6 	bl	8000654 <__aeabi_dadd>
 8008c88:	2000      	movs	r0, #0
 8008c8a:	0022      	movs	r2, r4
 8008c8c:	002b      	movs	r3, r5
 8008c8e:	9000      	str	r0, [sp, #0]
 8008c90:	9101      	str	r1, [sp, #4]
 8008c92:	f7f8 ff4f 	bl	8001b34 <__aeabi_dsub>
 8008c96:	0032      	movs	r2, r6
 8008c98:	003b      	movs	r3, r7
 8008c9a:	f7f8 ff4b 	bl	8001b34 <__aeabi_dsub>
 8008c9e:	9a06      	ldr	r2, [sp, #24]
 8008ca0:	9b07      	ldr	r3, [sp, #28]
 8008ca2:	f7f8 ff47 	bl	8001b34 <__aeabi_dsub>
 8008ca6:	0002      	movs	r2, r0
 8008ca8:	000b      	movs	r3, r1
 8008caa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008cac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cae:	e61c      	b.n	80088ea <__ieee754_pow+0x37a>
 8008cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8008d9c <__ieee754_pow+0x82c>)
 8008cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8008da0 <__ieee754_pow+0x830>)
 8008cb4:	9802      	ldr	r0, [sp, #8]
 8008cb6:	9903      	ldr	r1, [sp, #12]
 8008cb8:	f7f7 fccc 	bl	8000654 <__aeabi_dadd>
 8008cbc:	0032      	movs	r2, r6
 8008cbe:	003b      	movs	r3, r7
 8008cc0:	9004      	str	r0, [sp, #16]
 8008cc2:	9105      	str	r1, [sp, #20]
 8008cc4:	9800      	ldr	r0, [sp, #0]
 8008cc6:	9901      	ldr	r1, [sp, #4]
 8008cc8:	f7f8 ff34 	bl	8001b34 <__aeabi_dsub>
 8008ccc:	0002      	movs	r2, r0
 8008cce:	000b      	movs	r3, r1
 8008cd0:	9804      	ldr	r0, [sp, #16]
 8008cd2:	9905      	ldr	r1, [sp, #20]
 8008cd4:	f7f7 fbbe 	bl	8000454 <__aeabi_dcmpgt>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d000      	beq.n	8008cde <__ieee754_pow+0x76e>
 8008cdc:	e647      	b.n	800896e <__ieee754_pow+0x3fe>
 8008cde:	2580      	movs	r5, #128	@ 0x80
 8008ce0:	4b30      	ldr	r3, [pc, #192]	@ (8008da4 <__ieee754_pow+0x834>)
 8008ce2:	036d      	lsls	r5, r5, #13
 8008ce4:	1524      	asrs	r4, r4, #20
 8008ce6:	18e4      	adds	r4, r4, r3
 8008ce8:	002b      	movs	r3, r5
 8008cea:	4123      	asrs	r3, r4
 8008cec:	9a06      	ldr	r2, [sp, #24]
 8008cee:	4912      	ldr	r1, [pc, #72]	@ (8008d38 <__ieee754_pow+0x7c8>)
 8008cf0:	189b      	adds	r3, r3, r2
 8008cf2:	005a      	lsls	r2, r3, #1
 8008cf4:	4c14      	ldr	r4, [pc, #80]	@ (8008d48 <__ieee754_pow+0x7d8>)
 8008cf6:	0d52      	lsrs	r2, r2, #21
 8008cf8:	1852      	adds	r2, r2, r1
 8008cfa:	4114      	asrs	r4, r2
 8008cfc:	401c      	ands	r4, r3
 8008cfe:	0021      	movs	r1, r4
 8008d00:	2414      	movs	r4, #20
 8008d02:	031b      	lsls	r3, r3, #12
 8008d04:	0b1b      	lsrs	r3, r3, #12
 8008d06:	432b      	orrs	r3, r5
 8008d08:	1aa2      	subs	r2, r4, r2
 8008d0a:	4113      	asrs	r3, r2
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	9b06      	ldr	r3, [sp, #24]
 8008d10:	2000      	movs	r0, #0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	da02      	bge.n	8008d1c <__ieee754_pow+0x7ac>
 8008d16:	9b00      	ldr	r3, [sp, #0]
 8008d18:	425b      	negs	r3, r3
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	0002      	movs	r2, r0
 8008d1e:	000b      	movs	r3, r1
 8008d20:	0030      	movs	r0, r6
 8008d22:	0039      	movs	r1, r7
 8008d24:	f7f8 ff06 	bl	8001b34 <__aeabi_dsub>
 8008d28:	0006      	movs	r6, r0
 8008d2a:	000f      	movs	r7, r1
 8008d2c:	e065      	b.n	8008dfa <__ieee754_pow+0x88a>
 8008d2e:	46c0      	nop			@ (mov r8, r8)
 8008d30:	7ff00000 	.word	0x7ff00000
 8008d34:	43400000 	.word	0x43400000
 8008d38:	fffffc01 	.word	0xfffffc01
 8008d3c:	3ff00000 	.word	0x3ff00000
 8008d40:	0003988e 	.word	0x0003988e
 8008d44:	000bb679 	.word	0x000bb679
 8008d48:	fff00000 	.word	0xfff00000
 8008d4c:	08009450 	.word	0x08009450
 8008d50:	4a454eef 	.word	0x4a454eef
 8008d54:	3fca7e28 	.word	0x3fca7e28
 8008d58:	93c9db65 	.word	0x93c9db65
 8008d5c:	3fcd864a 	.word	0x3fcd864a
 8008d60:	a91d4101 	.word	0xa91d4101
 8008d64:	3fd17460 	.word	0x3fd17460
 8008d68:	518f264d 	.word	0x518f264d
 8008d6c:	3fd55555 	.word	0x3fd55555
 8008d70:	db6fabff 	.word	0xdb6fabff
 8008d74:	3fdb6db6 	.word	0x3fdb6db6
 8008d78:	33333303 	.word	0x33333303
 8008d7c:	3fe33333 	.word	0x3fe33333
 8008d80:	40080000 	.word	0x40080000
 8008d84:	3feec709 	.word	0x3feec709
 8008d88:	dc3a03fd 	.word	0xdc3a03fd
 8008d8c:	145b01f5 	.word	0x145b01f5
 8008d90:	be3e2fe0 	.word	0xbe3e2fe0
 8008d94:	08009430 	.word	0x08009430
 8008d98:	08009440 	.word	0x08009440
 8008d9c:	652b82fe 	.word	0x652b82fe
 8008da0:	3c971547 	.word	0x3c971547
 8008da4:	fffffc02 	.word	0xfffffc02
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	005c      	lsls	r4, r3, #1
 8008dac:	4b72      	ldr	r3, [pc, #456]	@ (8008f78 <__ieee754_pow+0xa08>)
 8008dae:	0864      	lsrs	r4, r4, #1
 8008db0:	429c      	cmp	r4, r3
 8008db2:	d91c      	bls.n	8008dee <__ieee754_pow+0x87e>
 8008db4:	4a71      	ldr	r2, [pc, #452]	@ (8008f7c <__ieee754_pow+0xa0c>)
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	9a00      	ldr	r2, [sp, #0]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	d008      	beq.n	8008dd2 <__ieee754_pow+0x862>
 8008dc0:	9808      	ldr	r0, [sp, #32]
 8008dc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f7f7 fb30 	bl	800042c <__aeabi_dcmplt>
 8008dcc:	1e43      	subs	r3, r0, #1
 8008dce:	4198      	sbcs	r0, r3
 8008dd0:	e4fc      	b.n	80087cc <__ieee754_pow+0x25c>
 8008dd2:	0032      	movs	r2, r6
 8008dd4:	9800      	ldr	r0, [sp, #0]
 8008dd6:	9901      	ldr	r1, [sp, #4]
 8008dd8:	003b      	movs	r3, r7
 8008dda:	f7f8 feab 	bl	8001b34 <__aeabi_dsub>
 8008dde:	9a02      	ldr	r2, [sp, #8]
 8008de0:	9b03      	ldr	r3, [sp, #12]
 8008de2:	f7f7 fb41 	bl	8000468 <__aeabi_dcmpge>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d1ea      	bne.n	8008dc0 <__ieee754_pow+0x850>
 8008dea:	4c65      	ldr	r4, [pc, #404]	@ (8008f80 <__ieee754_pow+0xa10>)
 8008dec:	e777      	b.n	8008cde <__ieee754_pow+0x76e>
 8008dee:	9a04      	ldr	r2, [sp, #16]
 8008df0:	4b64      	ldr	r3, [pc, #400]	@ (8008f84 <__ieee754_pow+0xa14>)
 8008df2:	9200      	str	r2, [sp, #0]
 8008df4:	429c      	cmp	r4, r3
 8008df6:	d900      	bls.n	8008dfa <__ieee754_pow+0x88a>
 8008df8:	e771      	b.n	8008cde <__ieee754_pow+0x76e>
 8008dfa:	9a02      	ldr	r2, [sp, #8]
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	0030      	movs	r0, r6
 8008e00:	0039      	movs	r1, r7
 8008e02:	f7f7 fc27 	bl	8000654 <__aeabi_dadd>
 8008e06:	2000      	movs	r0, #0
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8008f88 <__ieee754_pow+0xa18>)
 8008e0c:	9004      	str	r0, [sp, #16]
 8008e0e:	9105      	str	r1, [sp, #20]
 8008e10:	f7f8 fbc8 	bl	80015a4 <__aeabi_dmul>
 8008e14:	0032      	movs	r2, r6
 8008e16:	003b      	movs	r3, r7
 8008e18:	9006      	str	r0, [sp, #24]
 8008e1a:	9107      	str	r1, [sp, #28]
 8008e1c:	9804      	ldr	r0, [sp, #16]
 8008e1e:	9905      	ldr	r1, [sp, #20]
 8008e20:	f7f8 fe88 	bl	8001b34 <__aeabi_dsub>
 8008e24:	0002      	movs	r2, r0
 8008e26:	000b      	movs	r3, r1
 8008e28:	9802      	ldr	r0, [sp, #8]
 8008e2a:	9903      	ldr	r1, [sp, #12]
 8008e2c:	f7f8 fe82 	bl	8001b34 <__aeabi_dsub>
 8008e30:	4a56      	ldr	r2, [pc, #344]	@ (8008f8c <__ieee754_pow+0xa1c>)
 8008e32:	4b57      	ldr	r3, [pc, #348]	@ (8008f90 <__ieee754_pow+0xa20>)
 8008e34:	f7f8 fbb6 	bl	80015a4 <__aeabi_dmul>
 8008e38:	4a56      	ldr	r2, [pc, #344]	@ (8008f94 <__ieee754_pow+0xa24>)
 8008e3a:	0004      	movs	r4, r0
 8008e3c:	000d      	movs	r5, r1
 8008e3e:	9804      	ldr	r0, [sp, #16]
 8008e40:	9905      	ldr	r1, [sp, #20]
 8008e42:	4b55      	ldr	r3, [pc, #340]	@ (8008f98 <__ieee754_pow+0xa28>)
 8008e44:	f7f8 fbae 	bl	80015a4 <__aeabi_dmul>
 8008e48:	0002      	movs	r2, r0
 8008e4a:	000b      	movs	r3, r1
 8008e4c:	0020      	movs	r0, r4
 8008e4e:	0029      	movs	r1, r5
 8008e50:	f7f7 fc00 	bl	8000654 <__aeabi_dadd>
 8008e54:	0004      	movs	r4, r0
 8008e56:	000d      	movs	r5, r1
 8008e58:	0002      	movs	r2, r0
 8008e5a:	000b      	movs	r3, r1
 8008e5c:	9806      	ldr	r0, [sp, #24]
 8008e5e:	9907      	ldr	r1, [sp, #28]
 8008e60:	f7f7 fbf8 	bl	8000654 <__aeabi_dadd>
 8008e64:	9a06      	ldr	r2, [sp, #24]
 8008e66:	9b07      	ldr	r3, [sp, #28]
 8008e68:	0006      	movs	r6, r0
 8008e6a:	000f      	movs	r7, r1
 8008e6c:	f7f8 fe62 	bl	8001b34 <__aeabi_dsub>
 8008e70:	0002      	movs	r2, r0
 8008e72:	000b      	movs	r3, r1
 8008e74:	0020      	movs	r0, r4
 8008e76:	0029      	movs	r1, r5
 8008e78:	f7f8 fe5c 	bl	8001b34 <__aeabi_dsub>
 8008e7c:	0032      	movs	r2, r6
 8008e7e:	9002      	str	r0, [sp, #8]
 8008e80:	9103      	str	r1, [sp, #12]
 8008e82:	003b      	movs	r3, r7
 8008e84:	0030      	movs	r0, r6
 8008e86:	0039      	movs	r1, r7
 8008e88:	f7f8 fb8c 	bl	80015a4 <__aeabi_dmul>
 8008e8c:	0004      	movs	r4, r0
 8008e8e:	000d      	movs	r5, r1
 8008e90:	4a42      	ldr	r2, [pc, #264]	@ (8008f9c <__ieee754_pow+0xa2c>)
 8008e92:	4b43      	ldr	r3, [pc, #268]	@ (8008fa0 <__ieee754_pow+0xa30>)
 8008e94:	f7f8 fb86 	bl	80015a4 <__aeabi_dmul>
 8008e98:	4a42      	ldr	r2, [pc, #264]	@ (8008fa4 <__ieee754_pow+0xa34>)
 8008e9a:	4b43      	ldr	r3, [pc, #268]	@ (8008fa8 <__ieee754_pow+0xa38>)
 8008e9c:	f7f8 fe4a 	bl	8001b34 <__aeabi_dsub>
 8008ea0:	0022      	movs	r2, r4
 8008ea2:	002b      	movs	r3, r5
 8008ea4:	f7f8 fb7e 	bl	80015a4 <__aeabi_dmul>
 8008ea8:	4a40      	ldr	r2, [pc, #256]	@ (8008fac <__ieee754_pow+0xa3c>)
 8008eaa:	4b41      	ldr	r3, [pc, #260]	@ (8008fb0 <__ieee754_pow+0xa40>)
 8008eac:	f7f7 fbd2 	bl	8000654 <__aeabi_dadd>
 8008eb0:	0022      	movs	r2, r4
 8008eb2:	002b      	movs	r3, r5
 8008eb4:	f7f8 fb76 	bl	80015a4 <__aeabi_dmul>
 8008eb8:	4a3e      	ldr	r2, [pc, #248]	@ (8008fb4 <__ieee754_pow+0xa44>)
 8008eba:	4b3f      	ldr	r3, [pc, #252]	@ (8008fb8 <__ieee754_pow+0xa48>)
 8008ebc:	f7f8 fe3a 	bl	8001b34 <__aeabi_dsub>
 8008ec0:	0022      	movs	r2, r4
 8008ec2:	002b      	movs	r3, r5
 8008ec4:	f7f8 fb6e 	bl	80015a4 <__aeabi_dmul>
 8008ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8008fbc <__ieee754_pow+0xa4c>)
 8008eca:	4b3d      	ldr	r3, [pc, #244]	@ (8008fc0 <__ieee754_pow+0xa50>)
 8008ecc:	f7f7 fbc2 	bl	8000654 <__aeabi_dadd>
 8008ed0:	0022      	movs	r2, r4
 8008ed2:	002b      	movs	r3, r5
 8008ed4:	f7f8 fb66 	bl	80015a4 <__aeabi_dmul>
 8008ed8:	0002      	movs	r2, r0
 8008eda:	000b      	movs	r3, r1
 8008edc:	0030      	movs	r0, r6
 8008ede:	0039      	movs	r1, r7
 8008ee0:	f7f8 fe28 	bl	8001b34 <__aeabi_dsub>
 8008ee4:	0004      	movs	r4, r0
 8008ee6:	000d      	movs	r5, r1
 8008ee8:	0002      	movs	r2, r0
 8008eea:	000b      	movs	r3, r1
 8008eec:	0030      	movs	r0, r6
 8008eee:	0039      	movs	r1, r7
 8008ef0:	f7f8 fb58 	bl	80015a4 <__aeabi_dmul>
 8008ef4:	2380      	movs	r3, #128	@ 0x80
 8008ef6:	9004      	str	r0, [sp, #16]
 8008ef8:	9105      	str	r1, [sp, #20]
 8008efa:	2200      	movs	r2, #0
 8008efc:	0020      	movs	r0, r4
 8008efe:	0029      	movs	r1, r5
 8008f00:	05db      	lsls	r3, r3, #23
 8008f02:	f7f8 fe17 	bl	8001b34 <__aeabi_dsub>
 8008f06:	0002      	movs	r2, r0
 8008f08:	000b      	movs	r3, r1
 8008f0a:	9804      	ldr	r0, [sp, #16]
 8008f0c:	9905      	ldr	r1, [sp, #20]
 8008f0e:	f7f7 ff05 	bl	8000d1c <__aeabi_ddiv>
 8008f12:	9a02      	ldr	r2, [sp, #8]
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	0004      	movs	r4, r0
 8008f18:	000d      	movs	r5, r1
 8008f1a:	0030      	movs	r0, r6
 8008f1c:	0039      	movs	r1, r7
 8008f1e:	f7f8 fb41 	bl	80015a4 <__aeabi_dmul>
 8008f22:	9a02      	ldr	r2, [sp, #8]
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	f7f7 fb95 	bl	8000654 <__aeabi_dadd>
 8008f2a:	0002      	movs	r2, r0
 8008f2c:	000b      	movs	r3, r1
 8008f2e:	0020      	movs	r0, r4
 8008f30:	0029      	movs	r1, r5
 8008f32:	f7f8 fdff 	bl	8001b34 <__aeabi_dsub>
 8008f36:	0032      	movs	r2, r6
 8008f38:	003b      	movs	r3, r7
 8008f3a:	f7f8 fdfb 	bl	8001b34 <__aeabi_dsub>
 8008f3e:	0002      	movs	r2, r0
 8008f40:	000b      	movs	r3, r1
 8008f42:	2000      	movs	r0, #0
 8008f44:	491f      	ldr	r1, [pc, #124]	@ (8008fc4 <__ieee754_pow+0xa54>)
 8008f46:	f7f8 fdf5 	bl	8001b34 <__aeabi_dsub>
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	051b      	lsls	r3, r3, #20
 8008f4e:	185b      	adds	r3, r3, r1
 8008f50:	151a      	asrs	r2, r3, #20
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	dc06      	bgt.n	8008f64 <__ieee754_pow+0x9f4>
 8008f56:	9a00      	ldr	r2, [sp, #0]
 8008f58:	f000 f83a 	bl	8008fd0 <scalbn>
 8008f5c:	9a08      	ldr	r2, [sp, #32]
 8008f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f60:	f7ff fbee 	bl	8008740 <__ieee754_pow+0x1d0>
 8008f64:	0019      	movs	r1, r3
 8008f66:	e7f9      	b.n	8008f5c <__ieee754_pow+0x9ec>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4c16      	ldr	r4, [pc, #88]	@ (8008fc4 <__ieee754_pow+0xa54>)
 8008f6c:	f7ff fbcb 	bl	8008706 <__ieee754_pow+0x196>
 8008f70:	2300      	movs	r3, #0
 8008f72:	2400      	movs	r4, #0
 8008f74:	f7ff fbc7 	bl	8008706 <__ieee754_pow+0x196>
 8008f78:	4090cbff 	.word	0x4090cbff
 8008f7c:	3f6f3400 	.word	0x3f6f3400
 8008f80:	4090cc00 	.word	0x4090cc00
 8008f84:	3fe00000 	.word	0x3fe00000
 8008f88:	3fe62e43 	.word	0x3fe62e43
 8008f8c:	fefa39ef 	.word	0xfefa39ef
 8008f90:	3fe62e42 	.word	0x3fe62e42
 8008f94:	0ca86c39 	.word	0x0ca86c39
 8008f98:	be205c61 	.word	0xbe205c61
 8008f9c:	72bea4d0 	.word	0x72bea4d0
 8008fa0:	3e663769 	.word	0x3e663769
 8008fa4:	c5d26bf1 	.word	0xc5d26bf1
 8008fa8:	3ebbbd41 	.word	0x3ebbbd41
 8008fac:	af25de2c 	.word	0xaf25de2c
 8008fb0:	3f11566a 	.word	0x3f11566a
 8008fb4:	16bebd93 	.word	0x16bebd93
 8008fb8:	3f66c16c 	.word	0x3f66c16c
 8008fbc:	5555553e 	.word	0x5555553e
 8008fc0:	3fc55555 	.word	0x3fc55555
 8008fc4:	3ff00000 	.word	0x3ff00000

08008fc8 <fabs>:
 8008fc8:	0049      	lsls	r1, r1, #1
 8008fca:	084b      	lsrs	r3, r1, #1
 8008fcc:	0019      	movs	r1, r3
 8008fce:	4770      	bx	lr

08008fd0 <scalbn>:
 8008fd0:	004b      	lsls	r3, r1, #1
 8008fd2:	b570      	push	{r4, r5, r6, lr}
 8008fd4:	0d5b      	lsrs	r3, r3, #21
 8008fd6:	0014      	movs	r4, r2
 8008fd8:	000d      	movs	r5, r1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10f      	bne.n	8008ffe <scalbn+0x2e>
 8008fde:	004b      	lsls	r3, r1, #1
 8008fe0:	085b      	lsrs	r3, r3, #1
 8008fe2:	4303      	orrs	r3, r0
 8008fe4:	d012      	beq.n	800900c <scalbn+0x3c>
 8008fe6:	4b23      	ldr	r3, [pc, #140]	@ (8009074 <scalbn+0xa4>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f7f8 fadb 	bl	80015a4 <__aeabi_dmul>
 8008fee:	4b22      	ldr	r3, [pc, #136]	@ (8009078 <scalbn+0xa8>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	da0c      	bge.n	800900e <scalbn+0x3e>
 8008ff4:	4a21      	ldr	r2, [pc, #132]	@ (800907c <scalbn+0xac>)
 8008ff6:	4b22      	ldr	r3, [pc, #136]	@ (8009080 <scalbn+0xb0>)
 8008ff8:	f7f8 fad4 	bl	80015a4 <__aeabi_dmul>
 8008ffc:	e006      	b.n	800900c <scalbn+0x3c>
 8008ffe:	4a21      	ldr	r2, [pc, #132]	@ (8009084 <scalbn+0xb4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d108      	bne.n	8009016 <scalbn+0x46>
 8009004:	0002      	movs	r2, r0
 8009006:	000b      	movs	r3, r1
 8009008:	f7f7 fb24 	bl	8000654 <__aeabi_dadd>
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	000d      	movs	r5, r1
 8009010:	004b      	lsls	r3, r1, #1
 8009012:	0d5b      	lsrs	r3, r3, #21
 8009014:	3b36      	subs	r3, #54	@ 0x36
 8009016:	4a1c      	ldr	r2, [pc, #112]	@ (8009088 <scalbn+0xb8>)
 8009018:	4294      	cmp	r4, r2
 800901a:	dd0a      	ble.n	8009032 <scalbn+0x62>
 800901c:	4c1b      	ldr	r4, [pc, #108]	@ (800908c <scalbn+0xbc>)
 800901e:	4d1c      	ldr	r5, [pc, #112]	@ (8009090 <scalbn+0xc0>)
 8009020:	2900      	cmp	r1, #0
 8009022:	da01      	bge.n	8009028 <scalbn+0x58>
 8009024:	4c19      	ldr	r4, [pc, #100]	@ (800908c <scalbn+0xbc>)
 8009026:	4d1b      	ldr	r5, [pc, #108]	@ (8009094 <scalbn+0xc4>)
 8009028:	4a18      	ldr	r2, [pc, #96]	@ (800908c <scalbn+0xbc>)
 800902a:	4b19      	ldr	r3, [pc, #100]	@ (8009090 <scalbn+0xc0>)
 800902c:	0020      	movs	r0, r4
 800902e:	0029      	movs	r1, r5
 8009030:	e7e2      	b.n	8008ff8 <scalbn+0x28>
 8009032:	18e2      	adds	r2, r4, r3
 8009034:	4b18      	ldr	r3, [pc, #96]	@ (8009098 <scalbn+0xc8>)
 8009036:	429a      	cmp	r2, r3
 8009038:	dcf0      	bgt.n	800901c <scalbn+0x4c>
 800903a:	2a00      	cmp	r2, #0
 800903c:	dd05      	ble.n	800904a <scalbn+0x7a>
 800903e:	4b17      	ldr	r3, [pc, #92]	@ (800909c <scalbn+0xcc>)
 8009040:	0512      	lsls	r2, r2, #20
 8009042:	402b      	ands	r3, r5
 8009044:	431a      	orrs	r2, r3
 8009046:	0011      	movs	r1, r2
 8009048:	e7e0      	b.n	800900c <scalbn+0x3c>
 800904a:	0013      	movs	r3, r2
 800904c:	3335      	adds	r3, #53	@ 0x35
 800904e:	da08      	bge.n	8009062 <scalbn+0x92>
 8009050:	4c0a      	ldr	r4, [pc, #40]	@ (800907c <scalbn+0xac>)
 8009052:	4d0b      	ldr	r5, [pc, #44]	@ (8009080 <scalbn+0xb0>)
 8009054:	2900      	cmp	r1, #0
 8009056:	da01      	bge.n	800905c <scalbn+0x8c>
 8009058:	4c08      	ldr	r4, [pc, #32]	@ (800907c <scalbn+0xac>)
 800905a:	4d11      	ldr	r5, [pc, #68]	@ (80090a0 <scalbn+0xd0>)
 800905c:	4a07      	ldr	r2, [pc, #28]	@ (800907c <scalbn+0xac>)
 800905e:	4b08      	ldr	r3, [pc, #32]	@ (8009080 <scalbn+0xb0>)
 8009060:	e7e4      	b.n	800902c <scalbn+0x5c>
 8009062:	4b0e      	ldr	r3, [pc, #56]	@ (800909c <scalbn+0xcc>)
 8009064:	3236      	adds	r2, #54	@ 0x36
 8009066:	401d      	ands	r5, r3
 8009068:	0512      	lsls	r2, r2, #20
 800906a:	432a      	orrs	r2, r5
 800906c:	0011      	movs	r1, r2
 800906e:	4b0d      	ldr	r3, [pc, #52]	@ (80090a4 <scalbn+0xd4>)
 8009070:	2200      	movs	r2, #0
 8009072:	e7c1      	b.n	8008ff8 <scalbn+0x28>
 8009074:	43500000 	.word	0x43500000
 8009078:	ffff3cb0 	.word	0xffff3cb0
 800907c:	c2f8f359 	.word	0xc2f8f359
 8009080:	01a56e1f 	.word	0x01a56e1f
 8009084:	000007ff 	.word	0x000007ff
 8009088:	0000c350 	.word	0x0000c350
 800908c:	8800759c 	.word	0x8800759c
 8009090:	7e37e43c 	.word	0x7e37e43c
 8009094:	fe37e43c 	.word	0xfe37e43c
 8009098:	000007fe 	.word	0x000007fe
 800909c:	800fffff 	.word	0x800fffff
 80090a0:	81a56e1f 	.word	0x81a56e1f
 80090a4:	3c900000 	.word	0x3c900000

080090a8 <with_errno>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	000d      	movs	r5, r1
 80090ac:	0016      	movs	r6, r2
 80090ae:	0004      	movs	r4, r0
 80090b0:	f7ff f968 	bl	8008384 <__errno>
 80090b4:	0029      	movs	r1, r5
 80090b6:	6006      	str	r6, [r0, #0]
 80090b8:	0020      	movs	r0, r4
 80090ba:	bd70      	pop	{r4, r5, r6, pc}

080090bc <xflow>:
 80090bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090be:	0014      	movs	r4, r2
 80090c0:	001d      	movs	r5, r3
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d002      	beq.n	80090cc <xflow+0x10>
 80090c6:	2180      	movs	r1, #128	@ 0x80
 80090c8:	0609      	lsls	r1, r1, #24
 80090ca:	185b      	adds	r3, r3, r1
 80090cc:	9200      	str	r2, [sp, #0]
 80090ce:	9301      	str	r3, [sp, #4]
 80090d0:	9a00      	ldr	r2, [sp, #0]
 80090d2:	9b01      	ldr	r3, [sp, #4]
 80090d4:	0020      	movs	r0, r4
 80090d6:	0029      	movs	r1, r5
 80090d8:	f7f8 fa64 	bl	80015a4 <__aeabi_dmul>
 80090dc:	2222      	movs	r2, #34	@ 0x22
 80090de:	f7ff ffe3 	bl	80090a8 <with_errno>
 80090e2:	b003      	add	sp, #12
 80090e4:	bd30      	pop	{r4, r5, pc}

080090e6 <__math_uflow>:
 80090e6:	2380      	movs	r3, #128	@ 0x80
 80090e8:	b510      	push	{r4, lr}
 80090ea:	2200      	movs	r2, #0
 80090ec:	055b      	lsls	r3, r3, #21
 80090ee:	f7ff ffe5 	bl	80090bc <xflow>
 80090f2:	bd10      	pop	{r4, pc}

080090f4 <__math_oflow>:
 80090f4:	23e0      	movs	r3, #224	@ 0xe0
 80090f6:	b510      	push	{r4, lr}
 80090f8:	2200      	movs	r2, #0
 80090fa:	05db      	lsls	r3, r3, #23
 80090fc:	f7ff ffde 	bl	80090bc <xflow>
 8009100:	bd10      	pop	{r4, pc}
	...

08009104 <__ieee754_sqrt>:
 8009104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009106:	000a      	movs	r2, r1
 8009108:	000d      	movs	r5, r1
 800910a:	496d      	ldr	r1, [pc, #436]	@ (80092c0 <__ieee754_sqrt+0x1bc>)
 800910c:	0004      	movs	r4, r0
 800910e:	0003      	movs	r3, r0
 8009110:	0008      	movs	r0, r1
 8009112:	b087      	sub	sp, #28
 8009114:	4028      	ands	r0, r5
 8009116:	4288      	cmp	r0, r1
 8009118:	d111      	bne.n	800913e <__ieee754_sqrt+0x3a>
 800911a:	0022      	movs	r2, r4
 800911c:	002b      	movs	r3, r5
 800911e:	0020      	movs	r0, r4
 8009120:	0029      	movs	r1, r5
 8009122:	f7f8 fa3f 	bl	80015a4 <__aeabi_dmul>
 8009126:	0002      	movs	r2, r0
 8009128:	000b      	movs	r3, r1
 800912a:	0020      	movs	r0, r4
 800912c:	0029      	movs	r1, r5
 800912e:	f7f7 fa91 	bl	8000654 <__aeabi_dadd>
 8009132:	0004      	movs	r4, r0
 8009134:	000d      	movs	r5, r1
 8009136:	0020      	movs	r0, r4
 8009138:	0029      	movs	r1, r5
 800913a:	b007      	add	sp, #28
 800913c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913e:	2d00      	cmp	r5, #0
 8009140:	dc11      	bgt.n	8009166 <__ieee754_sqrt+0x62>
 8009142:	0069      	lsls	r1, r5, #1
 8009144:	0849      	lsrs	r1, r1, #1
 8009146:	4321      	orrs	r1, r4
 8009148:	d0f5      	beq.n	8009136 <__ieee754_sqrt+0x32>
 800914a:	2000      	movs	r0, #0
 800914c:	4285      	cmp	r5, r0
 800914e:	d010      	beq.n	8009172 <__ieee754_sqrt+0x6e>
 8009150:	0022      	movs	r2, r4
 8009152:	002b      	movs	r3, r5
 8009154:	0020      	movs	r0, r4
 8009156:	0029      	movs	r1, r5
 8009158:	f7f8 fcec 	bl	8001b34 <__aeabi_dsub>
 800915c:	0002      	movs	r2, r0
 800915e:	000b      	movs	r3, r1
 8009160:	f7f7 fddc 	bl	8000d1c <__aeabi_ddiv>
 8009164:	e7e5      	b.n	8009132 <__ieee754_sqrt+0x2e>
 8009166:	1528      	asrs	r0, r5, #20
 8009168:	d115      	bne.n	8009196 <__ieee754_sqrt+0x92>
 800916a:	2480      	movs	r4, #128	@ 0x80
 800916c:	2100      	movs	r1, #0
 800916e:	0364      	lsls	r4, r4, #13
 8009170:	e007      	b.n	8009182 <__ieee754_sqrt+0x7e>
 8009172:	0ada      	lsrs	r2, r3, #11
 8009174:	3815      	subs	r0, #21
 8009176:	055b      	lsls	r3, r3, #21
 8009178:	2a00      	cmp	r2, #0
 800917a:	d0fa      	beq.n	8009172 <__ieee754_sqrt+0x6e>
 800917c:	e7f5      	b.n	800916a <__ieee754_sqrt+0x66>
 800917e:	0052      	lsls	r2, r2, #1
 8009180:	3101      	adds	r1, #1
 8009182:	4222      	tst	r2, r4
 8009184:	d0fb      	beq.n	800917e <__ieee754_sqrt+0x7a>
 8009186:	1e4c      	subs	r4, r1, #1
 8009188:	1b00      	subs	r0, r0, r4
 800918a:	2420      	movs	r4, #32
 800918c:	001d      	movs	r5, r3
 800918e:	1a64      	subs	r4, r4, r1
 8009190:	40e5      	lsrs	r5, r4
 8009192:	408b      	lsls	r3, r1
 8009194:	432a      	orrs	r2, r5
 8009196:	494b      	ldr	r1, [pc, #300]	@ (80092c4 <__ieee754_sqrt+0x1c0>)
 8009198:	0312      	lsls	r2, r2, #12
 800919a:	1844      	adds	r4, r0, r1
 800919c:	2180      	movs	r1, #128	@ 0x80
 800919e:	0b12      	lsrs	r2, r2, #12
 80091a0:	0349      	lsls	r1, r1, #13
 80091a2:	4311      	orrs	r1, r2
 80091a4:	07c0      	lsls	r0, r0, #31
 80091a6:	d403      	bmi.n	80091b0 <__ieee754_sqrt+0xac>
 80091a8:	0fda      	lsrs	r2, r3, #31
 80091aa:	0049      	lsls	r1, r1, #1
 80091ac:	1851      	adds	r1, r2, r1
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	2500      	movs	r5, #0
 80091b2:	1062      	asrs	r2, r4, #1
 80091b4:	0049      	lsls	r1, r1, #1
 80091b6:	2480      	movs	r4, #128	@ 0x80
 80091b8:	9205      	str	r2, [sp, #20]
 80091ba:	0fda      	lsrs	r2, r3, #31
 80091bc:	1852      	adds	r2, r2, r1
 80091be:	2016      	movs	r0, #22
 80091c0:	0029      	movs	r1, r5
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	03a4      	lsls	r4, r4, #14
 80091c6:	190e      	adds	r6, r1, r4
 80091c8:	4296      	cmp	r6, r2
 80091ca:	dc02      	bgt.n	80091d2 <__ieee754_sqrt+0xce>
 80091cc:	1931      	adds	r1, r6, r4
 80091ce:	1b92      	subs	r2, r2, r6
 80091d0:	192d      	adds	r5, r5, r4
 80091d2:	0fde      	lsrs	r6, r3, #31
 80091d4:	0052      	lsls	r2, r2, #1
 80091d6:	3801      	subs	r0, #1
 80091d8:	1992      	adds	r2, r2, r6
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	0864      	lsrs	r4, r4, #1
 80091de:	2800      	cmp	r0, #0
 80091e0:	d1f1      	bne.n	80091c6 <__ieee754_sqrt+0xc2>
 80091e2:	2620      	movs	r6, #32
 80091e4:	2780      	movs	r7, #128	@ 0x80
 80091e6:	0004      	movs	r4, r0
 80091e8:	9604      	str	r6, [sp, #16]
 80091ea:	063f      	lsls	r7, r7, #24
 80091ec:	19c6      	adds	r6, r0, r7
 80091ee:	46b4      	mov	ip, r6
 80091f0:	4291      	cmp	r1, r2
 80091f2:	db02      	blt.n	80091fa <__ieee754_sqrt+0xf6>
 80091f4:	d114      	bne.n	8009220 <__ieee754_sqrt+0x11c>
 80091f6:	429e      	cmp	r6, r3
 80091f8:	d812      	bhi.n	8009220 <__ieee754_sqrt+0x11c>
 80091fa:	4660      	mov	r0, ip
 80091fc:	4666      	mov	r6, ip
 80091fe:	19c0      	adds	r0, r0, r7
 8009200:	9100      	str	r1, [sp, #0]
 8009202:	2e00      	cmp	r6, #0
 8009204:	da03      	bge.n	800920e <__ieee754_sqrt+0x10a>
 8009206:	43c6      	mvns	r6, r0
 8009208:	0ff6      	lsrs	r6, r6, #31
 800920a:	198e      	adds	r6, r1, r6
 800920c:	9600      	str	r6, [sp, #0]
 800920e:	1a52      	subs	r2, r2, r1
 8009210:	4563      	cmp	r3, ip
 8009212:	4189      	sbcs	r1, r1
 8009214:	4249      	negs	r1, r1
 8009216:	1a52      	subs	r2, r2, r1
 8009218:	4661      	mov	r1, ip
 800921a:	1a5b      	subs	r3, r3, r1
 800921c:	9900      	ldr	r1, [sp, #0]
 800921e:	19e4      	adds	r4, r4, r7
 8009220:	0fde      	lsrs	r6, r3, #31
 8009222:	0052      	lsls	r2, r2, #1
 8009224:	1992      	adds	r2, r2, r6
 8009226:	9e04      	ldr	r6, [sp, #16]
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	3e01      	subs	r6, #1
 800922c:	087f      	lsrs	r7, r7, #1
 800922e:	9604      	str	r6, [sp, #16]
 8009230:	2e00      	cmp	r6, #0
 8009232:	d1db      	bne.n	80091ec <__ieee754_sqrt+0xe8>
 8009234:	431a      	orrs	r2, r3
 8009236:	d01f      	beq.n	8009278 <__ieee754_sqrt+0x174>
 8009238:	4e23      	ldr	r6, [pc, #140]	@ (80092c8 <__ieee754_sqrt+0x1c4>)
 800923a:	4f24      	ldr	r7, [pc, #144]	@ (80092cc <__ieee754_sqrt+0x1c8>)
 800923c:	6830      	ldr	r0, [r6, #0]
 800923e:	6871      	ldr	r1, [r6, #4]
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	9200      	str	r2, [sp, #0]
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	6832      	ldr	r2, [r6, #0]
 800924a:	6873      	ldr	r3, [r6, #4]
 800924c:	9202      	str	r2, [sp, #8]
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	9a00      	ldr	r2, [sp, #0]
 8009252:	9b01      	ldr	r3, [sp, #4]
 8009254:	f7f8 fc6e 	bl	8001b34 <__aeabi_dsub>
 8009258:	0002      	movs	r2, r0
 800925a:	000b      	movs	r3, r1
 800925c:	9802      	ldr	r0, [sp, #8]
 800925e:	9903      	ldr	r1, [sp, #12]
 8009260:	f7f7 f8ee 	bl	8000440 <__aeabi_dcmple>
 8009264:	2800      	cmp	r0, #0
 8009266:	d007      	beq.n	8009278 <__ieee754_sqrt+0x174>
 8009268:	6830      	ldr	r0, [r6, #0]
 800926a:	6871      	ldr	r1, [r6, #4]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	1c67      	adds	r7, r4, #1
 8009272:	d10f      	bne.n	8009294 <__ieee754_sqrt+0x190>
 8009274:	9c04      	ldr	r4, [sp, #16]
 8009276:	3501      	adds	r5, #1
 8009278:	4b15      	ldr	r3, [pc, #84]	@ (80092d0 <__ieee754_sqrt+0x1cc>)
 800927a:	106a      	asrs	r2, r5, #1
 800927c:	18d2      	adds	r2, r2, r3
 800927e:	0863      	lsrs	r3, r4, #1
 8009280:	07ed      	lsls	r5, r5, #31
 8009282:	d502      	bpl.n	800928a <__ieee754_sqrt+0x186>
 8009284:	2180      	movs	r1, #128	@ 0x80
 8009286:	0609      	lsls	r1, r1, #24
 8009288:	430b      	orrs	r3, r1
 800928a:	9905      	ldr	r1, [sp, #20]
 800928c:	001c      	movs	r4, r3
 800928e:	0509      	lsls	r1, r1, #20
 8009290:	188d      	adds	r5, r1, r2
 8009292:	e750      	b.n	8009136 <__ieee754_sqrt+0x32>
 8009294:	f7f7 f9de 	bl	8000654 <__aeabi_dadd>
 8009298:	6877      	ldr	r7, [r6, #4]
 800929a:	6836      	ldr	r6, [r6, #0]
 800929c:	0002      	movs	r2, r0
 800929e:	000b      	movs	r3, r1
 80092a0:	0030      	movs	r0, r6
 80092a2:	0039      	movs	r1, r7
 80092a4:	f7f7 f8c2 	bl	800042c <__aeabi_dcmplt>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d004      	beq.n	80092b6 <__ieee754_sqrt+0x1b2>
 80092ac:	3402      	adds	r4, #2
 80092ae:	4263      	negs	r3, r4
 80092b0:	4163      	adcs	r3, r4
 80092b2:	18ed      	adds	r5, r5, r3
 80092b4:	e7e0      	b.n	8009278 <__ieee754_sqrt+0x174>
 80092b6:	2301      	movs	r3, #1
 80092b8:	3401      	adds	r4, #1
 80092ba:	439c      	bics	r4, r3
 80092bc:	e7dc      	b.n	8009278 <__ieee754_sqrt+0x174>
 80092be:	46c0      	nop			@ (mov r8, r8)
 80092c0:	7ff00000 	.word	0x7ff00000
 80092c4:	fffffc01 	.word	0xfffffc01
 80092c8:	20000070 	.word	0x20000070
 80092cc:	20000068 	.word	0x20000068
 80092d0:	3fe00000 	.word	0x3fe00000

080092d4 <_init>:
 80092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d6:	46c0      	nop			@ (mov r8, r8)
 80092d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092da:	bc08      	pop	{r3}
 80092dc:	469e      	mov	lr, r3
 80092de:	4770      	bx	lr

080092e0 <_fini>:
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	46c0      	nop			@ (mov r8, r8)
 80092e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e6:	bc08      	pop	{r3}
 80092e8:	469e      	mov	lr, r3
 80092ea:	4770      	bx	lr
