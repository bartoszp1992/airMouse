
airMouse-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005fac  08005fac  00006fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ac  080060ac  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080060ac  080060ac  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b4  080060b4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b4  080060b4  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060b8  080060b8  000070b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080060bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000000c  080060c8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080060c8  0000829c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e4a  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313d  00000000  00000000  0001be7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0001efc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdc  00000000  00000000  0001ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f29  00000000  00000000  00020aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155b7  00000000  00000000  0003aa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d356  00000000  00000000  0004ffcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed322  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003674  00000000  00000000  000ed368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f09dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f94 	.word	0x08005f94

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005f94 	.word	0x08005f94

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	@ (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	@ (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	@ (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <HAL_Init+0x3c>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_Init+0x3c>)
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	0049      	lsls	r1, r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000646:	2003      	movs	r0, #3
 8000648:	f000 f810 	bl	800066c <HAL_InitTick>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d003      	beq.n	8000658 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e001      	b.n	800065c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f005 f9b8 	bl	80059cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40022000 	.word	0x40022000

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000674:	230f      	movs	r3, #15
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <HAL_InitTick+0x88>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d02b      	beq.n	80006dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <HAL_InitTick+0x8c>)
 8000686:	681c      	ldr	r4, [r3, #0]
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <HAL_InitTick+0x88>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	0019      	movs	r1, r3
 800068e:	23fa      	movs	r3, #250	@ 0xfa
 8000690:	0098      	lsls	r0, r3, #2
 8000692:	f7ff fd3f 	bl	8000114 <__udivsi3>
 8000696:	0003      	movs	r3, r0
 8000698:	0019      	movs	r1, r3
 800069a:	0020      	movs	r0, r4
 800069c:	f7ff fd3a 	bl	8000114 <__udivsi3>
 80006a0:	0003      	movs	r3, r0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f96f 	bl	8000986 <HAL_SYSTICK_Config>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d112      	bne.n	80006d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 f92e 	bl	800091c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <HAL_InitTick+0x90>)
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e00d      	b.n	80006e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e008      	b.n	80006e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d2:	230f      	movs	r3, #15
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e003      	b.n	80006e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	781b      	ldrb	r3, [r3, #0]
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b005      	add	sp, #20
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000000 	.word	0x20000000

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <HAL_IncTick+0x1c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	001a      	movs	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_IncTick+0x20>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	18d2      	adds	r2, r2, r3
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <HAL_IncTick+0x20>)
 8000712:	601a      	str	r2, [r3, #0]
}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	20000004 	.word	0x20000004
 8000720:	20000028 	.word	0x20000028

08000724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;
 8000728:	4b02      	ldr	r3, [pc, #8]	@ (8000734 <HAL_GetTick+0x10>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	20000028 	.word	0x20000028

08000738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff fff0 	bl	8000724 <HAL_GetTick>
 8000744:	0003      	movs	r3, r0
 8000746:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	d005      	beq.n	800075e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_Delay+0x44>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	001a      	movs	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	189b      	adds	r3, r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	f7ff ffe0 	bl	8000724 <HAL_GetTick>
 8000764:	0002      	movs	r2, r0
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8f7      	bhi.n	8000760 <HAL_Delay+0x28>
  {
  }
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b004      	add	sp, #16
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000004 	.word	0x20000004

08000780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b7f      	cmp	r3, #127	@ 0x7f
 8000792:	d809      	bhi.n	80007a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	001a      	movs	r2, r3
 800079a:	231f      	movs	r3, #31
 800079c:	401a      	ands	r2, r3
 800079e:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <__NVIC_EnableIRQ+0x30>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	4091      	lsls	r1, r2
 80007a4:	000a      	movs	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	0002      	movs	r2, r0
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007c6:	d810      	bhi.n	80007ea <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	001a      	movs	r2, r3
 80007ce:	231f      	movs	r3, #31
 80007d0:	4013      	ands	r3, r2
 80007d2:	4908      	ldr	r1, [pc, #32]	@ (80007f4 <__NVIC_DisableIRQ+0x40>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	409a      	lsls	r2, r3
 80007d8:	0013      	movs	r3, r2
 80007da:	2280      	movs	r2, #128	@ 0x80
 80007dc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007de:	f3bf 8f4f 	dsb	sy
}
 80007e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80007e4:	f3bf 8f6f 	isb	sy
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	e000e100 	.word	0xe000e100

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b7f      	cmp	r3, #127	@ 0x7f
 800080c:	d828      	bhi.n	8000860 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080e:	4a2f      	ldr	r2, [pc, #188]	@ (80008cc <__NVIC_SetPriority+0xd4>)
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	33c0      	adds	r3, #192	@ 0xc0
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	589b      	ldr	r3, [r3, r2]
 800081e:	1dfa      	adds	r2, r7, #7
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	0011      	movs	r1, r2
 8000824:	2203      	movs	r2, #3
 8000826:	400a      	ands	r2, r1
 8000828:	00d2      	lsls	r2, r2, #3
 800082a:	21ff      	movs	r1, #255	@ 0xff
 800082c:	4091      	lsls	r1, r2
 800082e:	000a      	movs	r2, r1
 8000830:	43d2      	mvns	r2, r2
 8000832:	401a      	ands	r2, r3
 8000834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	019b      	lsls	r3, r3, #6
 800083a:	22ff      	movs	r2, #255	@ 0xff
 800083c:	401a      	ands	r2, r3
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0018      	movs	r0, r3
 8000844:	2303      	movs	r3, #3
 8000846:	4003      	ands	r3, r0
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084c:	481f      	ldr	r0, [pc, #124]	@ (80008cc <__NVIC_SetPriority+0xd4>)
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b25b      	sxtb	r3, r3
 8000854:	089b      	lsrs	r3, r3, #2
 8000856:	430a      	orrs	r2, r1
 8000858:	33c0      	adds	r3, #192	@ 0xc0
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800085e:	e031      	b.n	80008c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <__NVIC_SetPriority+0xd8>)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	0019      	movs	r1, r3
 8000868:	230f      	movs	r3, #15
 800086a:	400b      	ands	r3, r1
 800086c:	3b08      	subs	r3, #8
 800086e:	089b      	lsrs	r3, r3, #2
 8000870:	3306      	adds	r3, #6
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	18d3      	adds	r3, r2, r3
 8000876:	3304      	adds	r3, #4
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1dfa      	adds	r2, r7, #7
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	0011      	movs	r1, r2
 8000880:	2203      	movs	r2, #3
 8000882:	400a      	ands	r2, r1
 8000884:	00d2      	lsls	r2, r2, #3
 8000886:	21ff      	movs	r1, #255	@ 0xff
 8000888:	4091      	lsls	r1, r2
 800088a:	000a      	movs	r2, r1
 800088c:	43d2      	mvns	r2, r2
 800088e:	401a      	ands	r2, r3
 8000890:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	019b      	lsls	r3, r3, #6
 8000896:	22ff      	movs	r2, #255	@ 0xff
 8000898:	401a      	ands	r2, r3
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	0018      	movs	r0, r3
 80008a0:	2303      	movs	r3, #3
 80008a2:	4003      	ands	r3, r0
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a8:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <__NVIC_SetPriority+0xd8>)
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	001c      	movs	r4, r3
 80008b0:	230f      	movs	r3, #15
 80008b2:	4023      	ands	r3, r4
 80008b4:	3b08      	subs	r3, #8
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	430a      	orrs	r2, r1
 80008ba:	3306      	adds	r3, #6
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	18c3      	adds	r3, r0, r3
 80008c0:	3304      	adds	r3, #4
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b003      	add	sp, #12
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	045b      	lsls	r3, r3, #17
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d301      	bcc.n	80008ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e8:	2301      	movs	r3, #1
 80008ea:	e010      	b.n	800090e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <SysTick_Config+0x44>)
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	3a01      	subs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	2103      	movs	r1, #3
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff ff7c 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <SysTick_Config+0x44>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <SysTick_Config+0x44>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800090c:	2300      	movs	r3, #0
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	210f      	movs	r1, #15
 8000928:	187b      	adds	r3, r7, r1
 800092a:	1c02      	adds	r2, r0, #0
 800092c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	187b      	adds	r3, r7, r1
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b25b      	sxtb	r3, r3
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ff5d 	bl	80007f8 <__NVIC_SetPriority>
}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b004      	add	sp, #16
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	0002      	movs	r2, r0
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b25b      	sxtb	r3, r3
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ff11 	bl	8000780 <__NVIC_EnableIRQ>
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	0002      	movs	r2, r0
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b25b      	sxtb	r3, r3
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ff1b 	bl	80007b4 <__NVIC_DisableIRQ>
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ff9f 	bl	80008d4 <SysTick_Config>
 8000996:	0003      	movs	r3, r0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e077      	b.n	8000aa2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a3d      	ldr	r2, [pc, #244]	@ (8000aac <HAL_DMA_Init+0x10c>)
 80009b8:	4694      	mov	ip, r2
 80009ba:	4463      	add	r3, ip
 80009bc:	2114      	movs	r1, #20
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fba8 	bl	8000114 <__udivsi3>
 80009c4:	0003      	movs	r3, r0
 80009c6:	009a      	lsls	r2, r3, #2
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2225      	movs	r2, #37	@ 0x25
 80009d0:	2102      	movs	r1, #2
 80009d2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4934      	ldr	r1, [pc, #208]	@ (8000ab0 <HAL_DMA_Init+0x110>)
 80009e0:	400a      	ands	r2, r1
 80009e2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6819      	ldr	r1, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	431a      	orrs	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	431a      	orrs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	431a      	orrs	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a1b      	ldr	r3, [r3, #32]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	430a      	orrs	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fa3f 	bl	8000ea0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	01db      	lsls	r3, r3, #7
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d102      	bne.n	8000a34 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3c:	213f      	movs	r1, #63	@ 0x3f
 8000a3e:	400a      	ands	r2, r1
 8000a40:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000a4a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d011      	beq.n	8000a78 <HAL_DMA_Init+0xd8>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d80d      	bhi.n	8000a78 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 fa4a 	bl	8000ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	e008      	b.n	8000a8a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2225      	movs	r2, #37	@ 0x25
 8000a94:	2101      	movs	r1, #1
 8000a96:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2224      	movs	r2, #36	@ 0x24
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	bffdfff8 	.word	0xbffdfff8
 8000ab0:	ffff800f 	.word	0xffff800f

08000ab4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e066      	b.n	8000b94 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	438a      	bics	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a30      	ldr	r2, [pc, #192]	@ (8000b9c <HAL_DMA_DeInit+0xe8>)
 8000adc:	4694      	mov	ip, r2
 8000ade:	4463      	add	r3, ip
 8000ae0:	2114      	movs	r1, #20
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff fb16 	bl	8000114 <__udivsi3>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	009a      	lsls	r2, r3, #2
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000af8:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <HAL_DMA_DeInit+0xec>)
 8000afa:	6859      	ldr	r1, [r3, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	221c      	movs	r2, #28
 8000b02:	4013      	ands	r3, r2
 8000b04:	2201      	movs	r2, #1
 8000b06:	409a      	lsls	r2, r3
 8000b08:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <HAL_DMA_DeInit+0xec>)
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 f9c5 	bl	8000ea0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000b26:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d010      	beq.n	8000b52 <HAL_DMA_DeInit+0x9e>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d80c      	bhi.n	8000b52 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f9dc 	bl	8000ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000b50:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2225      	movs	r2, #37	@ 0x25
 8000b86:	2100      	movs	r1, #0
 8000b88:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2224      	movs	r2, #36	@ 0x24
 8000b8e:	2100      	movs	r1, #0
 8000b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	bffdfff8 	.word	0xbffdfff8
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e050      	b.n	8000c58 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2225      	movs	r2, #37	@ 0x25
 8000bba:	5c9b      	ldrb	r3, [r3, r2]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d008      	beq.n	8000bd4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2224      	movs	r2, #36	@ 0x24
 8000bcc:	2100      	movs	r1, #0
 8000bce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e041      	b.n	8000c58 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	210e      	movs	r1, #14
 8000be0:	438a      	bics	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	491c      	ldr	r1, [pc, #112]	@ (8000c60 <HAL_DMA_Abort+0xbc>)
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2101      	movs	r1, #1
 8000c00:	438a      	bics	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <HAL_DMA_Abort+0xc0>)
 8000c06:	6859      	ldr	r1, [r3, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0c:	221c      	movs	r2, #28
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2201      	movs	r2, #1
 8000c12:	409a      	lsls	r2, r3
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <HAL_DMA_Abort+0xc0>)
 8000c16:	430a      	orrs	r2, r1
 8000c18:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000c22:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d00c      	beq.n	8000c46 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c36:	490a      	ldr	r1, [pc, #40]	@ (8000c60 <HAL_DMA_Abort+0xbc>)
 8000c38:	400a      	ands	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000c44:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2225      	movs	r2, #37	@ 0x25
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2224      	movs	r2, #36	@ 0x24
 8000c52:	2100      	movs	r1, #0
 8000c54:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	fffffeff 	.word	0xfffffeff
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c70:	210f      	movs	r1, #15
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2225      	movs	r2, #37	@ 0x25
 8000c7c:	5c9b      	ldrb	r3, [r3, r2]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d006      	beq.n	8000c92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2204      	movs	r2, #4
 8000c88:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e049      	b.n	8000d26 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	210e      	movs	r1, #14
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	438a      	bics	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbc:	491d      	ldr	r1, [pc, #116]	@ (8000d34 <HAL_DMA_Abort_IT+0xcc>)
 8000cbe:	400a      	ands	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <HAL_DMA_Abort_IT+0xd0>)
 8000cc4:	6859      	ldr	r1, [r3, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	221c      	movs	r2, #28
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2201      	movs	r2, #1
 8000cd0:	409a      	lsls	r2, r3
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <HAL_DMA_Abort_IT+0xd0>)
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ce0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00c      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cf4:	490f      	ldr	r1, [pc, #60]	@ (8000d34 <HAL_DMA_Abort_IT+0xcc>)
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000d02:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2225      	movs	r2, #37	@ 0x25
 8000d08:	2101      	movs	r1, #1
 8000d0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2224      	movs	r2, #36	@ 0x24
 8000d10:	2100      	movs	r1, #0
 8000d12:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	0010      	movs	r0, r2
 8000d24:	4798      	blx	r3
    }
  }
  return status;
 8000d26:	230f      	movs	r3, #15
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	781b      	ldrb	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b004      	add	sp, #16
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	fffffeff 	.word	0xfffffeff
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000d44:	4b55      	ldr	r3, [pc, #340]	@ (8000e9c <HAL_DMA_IRQHandler+0x160>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	221c      	movs	r2, #28
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4013      	ands	r3, r2
 8000d64:	d027      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x7a>
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2204      	movs	r2, #4
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d023      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2220      	movs	r2, #32
 8000d76:	4013      	ands	r3, r2
 8000d78:	d107      	bne.n	8000d8a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2104      	movs	r1, #4
 8000d86:	438a      	bics	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000d8a:	4b44      	ldr	r3, [pc, #272]	@ (8000e9c <HAL_DMA_IRQHandler+0x160>)
 8000d8c:	6859      	ldr	r1, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	221c      	movs	r2, #28
 8000d94:	4013      	ands	r3, r2
 8000d96:	2204      	movs	r2, #4
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	4b40      	ldr	r3, [pc, #256]	@ (8000e9c <HAL_DMA_IRQHandler+0x160>)
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d100      	bne.n	8000daa <HAL_DMA_IRQHandler+0x6e>
 8000da8:	e073      	b.n	8000e92 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	0010      	movs	r0, r2
 8000db2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000db4:	e06d      	b.n	8000e92 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	221c      	movs	r2, #28
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d02e      	beq.n	8000e28 <HAL_DMA_IRQHandler+0xec>
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d02a      	beq.n	8000e28 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2220      	movs	r2, #32
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d10b      	bne.n	8000df6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	210a      	movs	r1, #10
 8000dea:	438a      	bics	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2225      	movs	r2, #37	@ 0x25
 8000df2:	2101      	movs	r1, #1
 8000df4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000df6:	4b29      	ldr	r3, [pc, #164]	@ (8000e9c <HAL_DMA_IRQHandler+0x160>)
 8000df8:	6859      	ldr	r1, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	221c      	movs	r2, #28
 8000e00:	4013      	ands	r3, r2
 8000e02:	2202      	movs	r2, #2
 8000e04:	409a      	lsls	r2, r3
 8000e06:	4b25      	ldr	r3, [pc, #148]	@ (8000e9c <HAL_DMA_IRQHandler+0x160>)
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2224      	movs	r2, #36	@ 0x24
 8000e10:	2100      	movs	r1, #0
 8000e12:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d03a      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	0010      	movs	r0, r2
 8000e24:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000e26:	e034      	b.n	8000e92 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	221c      	movs	r2, #28
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2208      	movs	r2, #8
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d02b      	beq.n	8000e94 <HAL_DMA_IRQHandler+0x158>
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2208      	movs	r2, #8
 8000e40:	4013      	ands	r3, r2
 8000e42:	d027      	beq.n	8000e94 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	210e      	movs	r1, #14
 8000e50:	438a      	bics	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_DMA_IRQHandler+0x160>)
 8000e56:	6859      	ldr	r1, [r3, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	221c      	movs	r2, #28
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2201      	movs	r2, #1
 8000e62:	409a      	lsls	r2, r3
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <HAL_DMA_IRQHandler+0x160>)
 8000e66:	430a      	orrs	r2, r1
 8000e68:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2225      	movs	r2, #37	@ 0x25
 8000e74:	2101      	movs	r1, #1
 8000e76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2224      	movs	r2, #36	@ 0x24
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	0010      	movs	r0, r2
 8000e90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46c0      	nop			@ (mov r8, r8)
}
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b004      	add	sp, #16
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000eb0:	4694      	mov	ip, r2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	23ff      	movs	r3, #255	@ 0xff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	3b08      	subs	r3, #8
 8000ec8:	2114      	movs	r1, #20
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff f922 	bl	8000114 <__udivsi3>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000ed8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	221f      	movs	r2, #31
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	10008200 	.word	0x10008200
 8000ef4:	40020880 	.word	0x40020880

08000ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	223f      	movs	r2, #63	@ 0x3f
 8000f06:	4013      	ands	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000f0e:	4694      	mov	ip, r2
 8000f10:	4463      	add	r3, ip
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	001a      	movs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	@ (8000f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000f1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	4013      	ands	r3, r2
 8000f28:	2201      	movs	r2, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b004      	add	sp, #16
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	1000823f 	.word	0x1000823f
 8000f3c:	40020940 	.word	0x40020940

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e147      	b.n	80011e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d100      	bne.n	8000f68 <HAL_GPIO_Init+0x28>
 8000f66:	e138      	b.n	80011da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d005      	beq.n	8000f80 <HAL_GPIO_Init+0x40>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d130      	bne.n	8000fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	43da      	mvns	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	2201      	movs	r2, #1
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d017      	beq.n	800101e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	43da      	mvns	r2, r3
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	4013      	ands	r3, r2
 8001026:	2b02      	cmp	r3, #2
 8001028:	d123      	bne.n	8001072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	58d3      	ldr	r3, [r2, r3]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2207      	movs	r2, #7
 800103c:	4013      	ands	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	43da      	mvns	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2107      	movs	r1, #7
 8001056:	400b      	ands	r3, r1
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	0092      	lsls	r2, r2, #2
 800106e:	6939      	ldr	r1, [r7, #16]
 8001070:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	401a      	ands	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	23c0      	movs	r3, #192	@ 0xc0
 80010ac:	029b      	lsls	r3, r3, #10
 80010ae:	4013      	ands	r3, r2
 80010b0:	d100      	bne.n	80010b4 <HAL_GPIO_Init+0x174>
 80010b2:	e092      	b.n	80011da <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010b4:	4a50      	ldr	r2, [pc, #320]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3318      	adds	r3, #24
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	589b      	ldr	r3, [r3, r2]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2203      	movs	r2, #3
 80010c6:	4013      	ands	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	220f      	movs	r2, #15
 80010cc:	409a      	lsls	r2, r3
 80010ce:	0013      	movs	r3, r2
 80010d0:	43da      	mvns	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	23a0      	movs	r3, #160	@ 0xa0
 80010dc:	05db      	lsls	r3, r3, #23
 80010de:	429a      	cmp	r2, r3
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x1ca>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a45      	ldr	r2, [pc, #276]	@ (80011fc <HAL_GPIO_Init+0x2bc>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x1c6>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a44      	ldr	r2, [pc, #272]	@ (8001200 <HAL_GPIO_Init+0x2c0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x1c2>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a43      	ldr	r2, [pc, #268]	@ (8001204 <HAL_GPIO_Init+0x2c4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x1be>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x1cc>
 80010fe:	2305      	movs	r3, #5
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x1cc>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x1cc>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x1cc>
 800110a:	2300      	movs	r3, #0
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	2103      	movs	r1, #3
 8001110:	400a      	ands	r2, r1
 8001112:	00d2      	lsls	r2, r2, #3
 8001114:	4093      	lsls	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800111c:	4936      	ldr	r1, [pc, #216]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3318      	adds	r3, #24
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800112a:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	035b      	lsls	r3, r3, #13
 8001142:	4013      	ands	r3, r2
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800114e:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	039b      	lsls	r3, r3, #14
 800116c:	4013      	ands	r3, r2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800117e:	4a1e      	ldr	r2, [pc, #120]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 8001180:	2384      	movs	r3, #132	@ 0x84
 8001182:	58d3      	ldr	r3, [r2, r3]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43da      	mvns	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	029b      	lsls	r3, r3, #10
 8001198:	4013      	ands	r3, r2
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a4:	4914      	ldr	r1, [pc, #80]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 80011a6:	2284      	movs	r2, #132	@ 0x84
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011ac:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	58d3      	ldr	r3, [r2, r3]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	025b      	lsls	r3, r3, #9
 80011c6:	4013      	ands	r3, r2
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011d2:	4909      	ldr	r1, [pc, #36]	@ (80011f8 <HAL_GPIO_Init+0x2b8>)
 80011d4:	2280      	movs	r2, #128	@ 0x80
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	40da      	lsrs	r2, r3
 80011e8:	1e13      	subs	r3, r2, #0
 80011ea:	d000      	beq.n	80011ee <HAL_GPIO_Init+0x2ae>
 80011ec:	e6b0      	b.n	8000f50 <HAL_GPIO_Init+0x10>
  }
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b006      	add	sp, #24
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021800 	.word	0x40021800
 80011fc:	50000400 	.word	0x50000400
 8001200:	50000800 	.word	0x50000800
 8001204:	50000c00 	.word	0x50000c00

08001208 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001216:	e0b4      	b.n	8001382 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001218:	2201      	movs	r2, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	409a      	lsls	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d100      	bne.n	800122c <HAL_GPIO_DeInit+0x24>
 800122a:	e0a7      	b.n	800137c <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 800122c:	4a5a      	ldr	r2, [pc, #360]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3318      	adds	r3, #24
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	589b      	ldr	r3, [r3, r2]
 8001238:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	220f      	movs	r2, #15
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	23a0      	movs	r3, #160	@ 0xa0
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	429a      	cmp	r2, r3
 8001254:	d013      	beq.n	800127e <HAL_GPIO_DeInit+0x76>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a50      	ldr	r2, [pc, #320]	@ (800139c <HAL_GPIO_DeInit+0x194>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_DeInit+0x72>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4f      	ldr	r2, [pc, #316]	@ (80013a0 <HAL_GPIO_DeInit+0x198>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_DeInit+0x6e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4e      	ldr	r2, [pc, #312]	@ (80013a4 <HAL_GPIO_DeInit+0x19c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_DeInit+0x6a>
 800126e:	2303      	movs	r3, #3
 8001270:	e006      	b.n	8001280 <HAL_GPIO_DeInit+0x78>
 8001272:	2305      	movs	r3, #5
 8001274:	e004      	b.n	8001280 <HAL_GPIO_DeInit+0x78>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_DeInit+0x78>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_DeInit+0x78>
 800127e:	2300      	movs	r3, #0
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	2103      	movs	r1, #3
 8001284:	400a      	ands	r2, r1
 8001286:	00d2      	lsls	r2, r2, #3
 8001288:	4093      	lsls	r3, r2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d136      	bne.n	80012fe <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001290:	4a41      	ldr	r2, [pc, #260]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 8001292:	2380      	movs	r3, #128	@ 0x80
 8001294:	58d3      	ldr	r3, [r2, r3]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	43d2      	mvns	r2, r2
 800129a:	493f      	ldr	r1, [pc, #252]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 800129c:	4013      	ands	r3, r2
 800129e:	2280      	movs	r2, #128	@ 0x80
 80012a0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80012a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 80012a4:	2384      	movs	r3, #132	@ 0x84
 80012a6:	58d3      	ldr	r3, [r2, r3]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	43d2      	mvns	r2, r2
 80012ac:	493a      	ldr	r1, [pc, #232]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	2284      	movs	r2, #132	@ 0x84
 80012b2:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80012b4:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	4b36      	ldr	r3, [pc, #216]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 80012be:	400a      	ands	r2, r1
 80012c0:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80012c2:	4b35      	ldr	r3, [pc, #212]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43d9      	mvns	r1, r3
 80012ca:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2203      	movs	r2, #3
 80012d4:	4013      	ands	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	220f      	movs	r2, #15
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80012e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3318      	adds	r3, #24
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	589a      	ldr	r2, [r3, r2]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	4829      	ldr	r0, [pc, #164]	@ (8001398 <HAL_GPIO_DeInit+0x190>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	400a      	ands	r2, r1
 80012f8:	3318      	adds	r3, #24
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2103      	movs	r1, #3
 8001308:	4099      	lsls	r1, r3
 800130a:	000b      	movs	r3, r1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	58d3      	ldr	r3, [r2, r3]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	2107      	movs	r1, #7
 8001322:	400a      	ands	r2, r1
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	210f      	movs	r1, #15
 8001328:	4091      	lsls	r1, r2
 800132a:	000a      	movs	r2, r1
 800132c:	43d1      	mvns	r1, r2
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	08d2      	lsrs	r2, r2, #3
 8001332:	4019      	ands	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	0052      	lsls	r2, r2, #1
 8001344:	2103      	movs	r1, #3
 8001346:	4091      	lsls	r1, r2
 8001348:	000a      	movs	r2, r1
 800134a:	43d2      	mvns	r2, r2
 800134c:	401a      	ands	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2101      	movs	r1, #1
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	4091      	lsls	r1, r2
 800135c:	000a      	movs	r2, r1
 800135e:	43d2      	mvns	r2, r2
 8001360:	401a      	ands	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	0052      	lsls	r2, r2, #1
 800136e:	2103      	movs	r1, #3
 8001370:	4091      	lsls	r1, r2
 8001372:	000a      	movs	r2, r1
 8001374:	43d2      	mvns	r2, r2
 8001376:	401a      	ands	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3301      	adds	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	40da      	lsrs	r2, r3
 8001388:	1e13      	subs	r3, r2, #0
 800138a:	d000      	beq.n	800138e <HAL_GPIO_DeInit+0x186>
 800138c:	e744      	b.n	8001218 <HAL_GPIO_DeInit+0x10>
  }
}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b006      	add	sp, #24
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021800 	.word	0x40021800
 800139c:	50000400 	.word	0x50000400
 80013a0:	50000800 	.word	0x50000800
 80013a4:	50000c00 	.word	0x50000c00

080013a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	000a      	movs	r2, r1
 80013b2:	1cbb      	adds	r3, r7, #2
 80013b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	1cba      	adds	r2, r7, #2
 80013bc:	8812      	ldrh	r2, [r2, #0]
 80013be:	4013      	ands	r3, r2
 80013c0:	d004      	beq.n	80013cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80013c2:	230f      	movs	r3, #15
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e003      	b.n	80013d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013cc:	230f      	movs	r3, #15
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013d4:	230f      	movs	r3, #15
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	781b      	ldrb	r3, [r3, #0]
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b004      	add	sp, #16
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	0008      	movs	r0, r1
 80013ec:	0011      	movs	r1, r2
 80013ee:	1cbb      	adds	r3, r7, #2
 80013f0:	1c02      	adds	r2, r0, #0
 80013f2:	801a      	strh	r2, [r3, #0]
 80013f4:	1c7b      	adds	r3, r7, #1
 80013f6:	1c0a      	adds	r2, r1, #0
 80013f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013fa:	1c7b      	adds	r3, r7, #1
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001402:	1cbb      	adds	r3, r7, #2
 8001404:	881a      	ldrh	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800140a:	e003      	b.n	8001414 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140c:	1cbb      	adds	r3, r7, #2
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	0002      	movs	r2, r0
 8001424:	1dbb      	adds	r3, r7, #6
 8001426:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	1dba      	adds	r2, r7, #6
 800142e:	8812      	ldrh	r2, [r2, #0]
 8001430:	4013      	ands	r3, r2
 8001432:	d008      	beq.n	8001446 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001434:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001436:	1dba      	adds	r2, r7, #6
 8001438:	8812      	ldrh	r2, [r2, #0]
 800143a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800143c:	1dbb      	adds	r3, r7, #6
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	0018      	movs	r0, r3
 8001442:	f004 fa21 	bl	8005888 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	1dba      	adds	r2, r7, #6
 800144c:	8812      	ldrh	r2, [r2, #0]
 800144e:	4013      	ands	r3, r2
 8001450:	d008      	beq.n	8001464 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001454:	1dba      	adds	r2, r7, #6
 8001456:	8812      	ldrh	r2, [r2, #0]
 8001458:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800145a:	1dbb      	adds	r3, r7, #6
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	0018      	movs	r0, r3
 8001460:	f000 f806 	bl	8001470 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021800 	.word	0x40021800

08001470 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	0002      	movs	r2, r0
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e08f      	b.n	80015b6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2241      	movs	r2, #65	@ 0x41
 800149a:	5c9b      	ldrb	r3, [r3, r2]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d107      	bne.n	80014b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2240      	movs	r2, #64	@ 0x40
 80014a6:	2100      	movs	r1, #0
 80014a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f003 fdeb 	bl	8005088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2241      	movs	r2, #65	@ 0x41
 80014b6:	2124      	movs	r1, #36	@ 0x24
 80014b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	438a      	bics	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	493b      	ldr	r1, [pc, #236]	@ (80015c0 <HAL_I2C_Init+0x13c>)
 80014d4:	400a      	ands	r2, r1
 80014d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4938      	ldr	r1, [pc, #224]	@ (80015c4 <HAL_I2C_Init+0x140>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d108      	bne.n	8001502 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2180      	movs	r1, #128	@ 0x80
 80014fa:	0209      	lsls	r1, r1, #8
 80014fc:	430a      	orrs	r2, r1
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	e007      	b.n	8001512 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2184      	movs	r1, #132	@ 0x84
 800150c:	0209      	lsls	r1, r1, #8
 800150e:	430a      	orrs	r2, r1
 8001510:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d109      	bne.n	800152e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2180      	movs	r1, #128	@ 0x80
 8001526:	0109      	lsls	r1, r1, #4
 8001528:	430a      	orrs	r2, r1
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	e007      	b.n	800153e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4923      	ldr	r1, [pc, #140]	@ (80015c8 <HAL_I2C_Init+0x144>)
 800153a:	400a      	ands	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4920      	ldr	r1, [pc, #128]	@ (80015cc <HAL_I2C_Init+0x148>)
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	491a      	ldr	r1, [pc, #104]	@ (80015c4 <HAL_I2C_Init+0x140>)
 800155a:	400a      	ands	r2, r1
 800155c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	431a      	orrs	r2, r3
 8001568:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69d9      	ldr	r1, [r3, #28]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2101      	movs	r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2241      	movs	r2, #65	@ 0x41
 80015a2:	2120      	movs	r1, #32
 80015a4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2242      	movs	r2, #66	@ 0x42
 80015b0:	2100      	movs	r1, #0
 80015b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	f0ffffff 	.word	0xf0ffffff
 80015c4:	ffff7fff 	.word	0xffff7fff
 80015c8:	fffff7ff 	.word	0xfffff7ff
 80015cc:	02008000 	.word	0x02008000

080015d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	@ 0x24
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	000c      	movs	r4, r1
 80015da:	0010      	movs	r0, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	230a      	movs	r3, #10
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	1c22      	adds	r2, r4, #0
 80015e4:	801a      	strh	r2, [r3, #0]
 80015e6:	2308      	movs	r3, #8
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	1c02      	adds	r2, r0, #0
 80015ec:	801a      	strh	r2, [r3, #0]
 80015ee:	1dbb      	adds	r3, r7, #6
 80015f0:	1c0a      	adds	r2, r1, #0
 80015f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2241      	movs	r2, #65	@ 0x41
 80015f8:	5c9b      	ldrb	r3, [r3, r2]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d000      	beq.n	8001602 <HAL_I2C_Mem_Write+0x32>
 8001600:	e10c      	b.n	800181c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <HAL_I2C_Mem_Write+0x42>
 8001608:	232c      	movs	r3, #44	@ 0x2c
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2280      	movs	r2, #128	@ 0x80
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0ff      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2240      	movs	r2, #64	@ 0x40
 8001622:	5c9b      	ldrb	r3, [r3, r2]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_I2C_Mem_Write+0x5c>
 8001628:	2302      	movs	r3, #2
 800162a:	e0f8      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2240      	movs	r2, #64	@ 0x40
 8001630:	2101      	movs	r1, #1
 8001632:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001634:	f7ff f876 	bl	8000724 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800163c:	2380      	movs	r3, #128	@ 0x80
 800163e:	0219      	lsls	r1, r3, #8
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2319      	movs	r3, #25
 8001648:	2201      	movs	r2, #1
 800164a:	f000 fb0b 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0e3      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2241      	movs	r2, #65	@ 0x41
 800165a:	2121      	movs	r1, #33	@ 0x21
 800165c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2242      	movs	r2, #66	@ 0x42
 8001662:	2140      	movs	r1, #64	@ 0x40
 8001664:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	222c      	movs	r2, #44	@ 0x2c
 8001676:	18ba      	adds	r2, r7, r2
 8001678:	8812      	ldrh	r2, [r2, #0]
 800167a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001682:	1dbb      	adds	r3, r7, #6
 8001684:	881c      	ldrh	r4, [r3, #0]
 8001686:	2308      	movs	r3, #8
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	230a      	movs	r3, #10
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	8819      	ldrh	r1, [r3, #0]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	0023      	movs	r3, r4
 800169e:	f000 f9f9 	bl	8001a94 <I2C_RequestMemoryWrite>
 80016a2:	1e03      	subs	r3, r0, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2240      	movs	r2, #64	@ 0x40
 80016aa:	2100      	movs	r1, #0
 80016ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0b5      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	2bff      	cmp	r3, #255	@ 0xff
 80016ba:	d911      	bls.n	80016e0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	22ff      	movs	r2, #255	@ 0xff
 80016c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	2380      	movs	r3, #128	@ 0x80
 80016ca:	045c      	lsls	r4, r3, #17
 80016cc:	230a      	movs	r3, #10
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	8819      	ldrh	r1, [r3, #0]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	2300      	movs	r3, #0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	0023      	movs	r3, r4
 80016da:	f000 fc9d 	bl	8002018 <I2C_TransferConfig>
 80016de:	e012      	b.n	8001706 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	049c      	lsls	r4, r3, #18
 80016f4:	230a      	movs	r3, #10
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	8819      	ldrh	r1, [r3, #0]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	2300      	movs	r3, #0
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	0023      	movs	r3, r4
 8001702:	f000 fc89 	bl	8002018 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	0018      	movs	r0, r3
 800170e:	f000 fb01 	bl	8001d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e081      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001742:	3b01      	subs	r3, #1
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174e:	b29b      	uxth	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d03a      	beq.n	80017ca <HAL_I2C_Mem_Write+0x1fa>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d136      	bne.n	80017ca <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800175c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	0013      	movs	r3, r2
 8001766:	2200      	movs	r2, #0
 8001768:	2180      	movs	r1, #128	@ 0x80
 800176a:	f000 fa7b 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e053      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	2bff      	cmp	r3, #255	@ 0xff
 800177e:	d911      	bls.n	80017a4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	22ff      	movs	r2, #255	@ 0xff
 8001784:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800178a:	b2da      	uxtb	r2, r3
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	045c      	lsls	r4, r3, #17
 8001790:	230a      	movs	r3, #10
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	8819      	ldrh	r1, [r3, #0]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	2300      	movs	r3, #0
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	0023      	movs	r3, r4
 800179e:	f000 fc3b 	bl	8002018 <I2C_TransferConfig>
 80017a2:	e012      	b.n	80017ca <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	049c      	lsls	r4, r3, #18
 80017b8:	230a      	movs	r3, #10
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	8819      	ldrh	r1, [r3, #0]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	0023      	movs	r3, r4
 80017c6:	f000 fc27 	bl	8002018 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d198      	bne.n	8001706 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 fae0 	bl	8001da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e0:	1e03      	subs	r3, r0, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e01a      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2220      	movs	r2, #32
 80017ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	490b      	ldr	r1, [pc, #44]	@ (8001828 <HAL_I2C_Mem_Write+0x258>)
 80017fc:	400a      	ands	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2241      	movs	r2, #65	@ 0x41
 8001804:	2120      	movs	r1, #32
 8001806:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2242      	movs	r2, #66	@ 0x42
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2240      	movs	r2, #64	@ 0x40
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e000      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800181c:	2302      	movs	r3, #2
  }
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b007      	add	sp, #28
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b089      	sub	sp, #36	@ 0x24
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	000c      	movs	r4, r1
 8001836:	0010      	movs	r0, r2
 8001838:	0019      	movs	r1, r3
 800183a:	230a      	movs	r3, #10
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	1c22      	adds	r2, r4, #0
 8001840:	801a      	strh	r2, [r3, #0]
 8001842:	2308      	movs	r3, #8
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	1c02      	adds	r2, r0, #0
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	1dbb      	adds	r3, r7, #6
 800184c:	1c0a      	adds	r2, r1, #0
 800184e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2241      	movs	r2, #65	@ 0x41
 8001854:	5c9b      	ldrb	r3, [r3, r2]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b20      	cmp	r3, #32
 800185a:	d000      	beq.n	800185e <HAL_I2C_Mem_Read+0x32>
 800185c:	e110      	b.n	8001a80 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800185e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_I2C_Mem_Read+0x42>
 8001864:	232c      	movs	r3, #44	@ 0x2c
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2280      	movs	r2, #128	@ 0x80
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e103      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2240      	movs	r2, #64	@ 0x40
 800187e:	5c9b      	ldrb	r3, [r3, r2]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_I2C_Mem_Read+0x5c>
 8001884:	2302      	movs	r3, #2
 8001886:	e0fc      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2240      	movs	r2, #64	@ 0x40
 800188c:	2101      	movs	r1, #1
 800188e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001890:	f7fe ff48 	bl	8000724 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	0219      	lsls	r1, r3, #8
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2319      	movs	r3, #25
 80018a4:	2201      	movs	r2, #1
 80018a6:	f000 f9dd 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0e7      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2241      	movs	r2, #65	@ 0x41
 80018b6:	2122      	movs	r1, #34	@ 0x22
 80018b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2242      	movs	r2, #66	@ 0x42
 80018be:	2140      	movs	r1, #64	@ 0x40
 80018c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	222c      	movs	r2, #44	@ 0x2c
 80018d2:	18ba      	adds	r2, r7, r2
 80018d4:	8812      	ldrh	r2, [r2, #0]
 80018d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018de:	1dbb      	adds	r3, r7, #6
 80018e0:	881c      	ldrh	r4, [r3, #0]
 80018e2:	2308      	movs	r3, #8
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	881a      	ldrh	r2, [r3, #0]
 80018e8:	230a      	movs	r3, #10
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	8819      	ldrh	r1, [r3, #0]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	0023      	movs	r3, r4
 80018fa:	f000 f92f 	bl	8001b5c <I2C_RequestMemoryRead>
 80018fe:	1e03      	subs	r3, r0, #0
 8001900:	d005      	beq.n	800190e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2240      	movs	r2, #64	@ 0x40
 8001906:	2100      	movs	r1, #0
 8001908:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0b9      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	2bff      	cmp	r3, #255	@ 0xff
 8001916:	d911      	bls.n	800193c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	22ff      	movs	r2, #255	@ 0xff
 800191c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001922:	b2da      	uxtb	r2, r3
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	045c      	lsls	r4, r3, #17
 8001928:	230a      	movs	r3, #10
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	8819      	ldrh	r1, [r3, #0]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	4b56      	ldr	r3, [pc, #344]	@ (8001a8c <HAL_I2C_Mem_Read+0x260>)
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	0023      	movs	r3, r4
 8001936:	f000 fb6f 	bl	8002018 <I2C_TransferConfig>
 800193a:	e012      	b.n	8001962 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194a:	b2da      	uxtb	r2, r3
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	049c      	lsls	r4, r3, #18
 8001950:	230a      	movs	r3, #10
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	8819      	ldrh	r1, [r3, #0]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	4b4c      	ldr	r3, [pc, #304]	@ (8001a8c <HAL_I2C_Mem_Read+0x260>)
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	0023      	movs	r3, r4
 800195e:	f000 fb5b 	bl	8002018 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	0013      	movs	r3, r2
 800196c:	2200      	movs	r2, #0
 800196e:	2104      	movs	r1, #4
 8001970:	f000 f978 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e082      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03a      	beq.n	8001a2e <HAL_I2C_Mem_Read+0x202>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d136      	bne.n	8001a2e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	0013      	movs	r3, r2
 80019ca:	2200      	movs	r2, #0
 80019cc:	2180      	movs	r1, #128	@ 0x80
 80019ce:	f000 f949 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e053      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2bff      	cmp	r3, #255	@ 0xff
 80019e2:	d911      	bls.n	8001a08 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	22ff      	movs	r2, #255	@ 0xff
 80019e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	045c      	lsls	r4, r3, #17
 80019f4:	230a      	movs	r3, #10
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	8819      	ldrh	r1, [r3, #0]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	2300      	movs	r3, #0
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	0023      	movs	r3, r4
 8001a02:	f000 fb09 	bl	8002018 <I2C_TransferConfig>
 8001a06:	e012      	b.n	8001a2e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	049c      	lsls	r4, r3, #18
 8001a1c:	230a      	movs	r3, #10
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	8819      	ldrh	r1, [r3, #0]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	0023      	movs	r3, r4
 8001a2a:	f000 faf5 	bl	8002018 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d194      	bne.n	8001962 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f9ae 	bl	8001da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e01a      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2220      	movs	r2, #32
 8001a52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	490c      	ldr	r1, [pc, #48]	@ (8001a90 <HAL_I2C_Mem_Read+0x264>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2241      	movs	r2, #65	@ 0x41
 8001a68:	2120      	movs	r1, #32
 8001a6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2242      	movs	r2, #66	@ 0x42
 8001a70:	2100      	movs	r1, #0
 8001a72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2240      	movs	r2, #64	@ 0x40
 8001a78:	2100      	movs	r1, #0
 8001a7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e000      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001a80:	2302      	movs	r3, #2
  }
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b007      	add	sp, #28
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	80002400 	.word	0x80002400
 8001a90:	fe00e800 	.word	0xfe00e800

08001a94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	000c      	movs	r4, r1
 8001a9e:	0010      	movs	r0, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	250a      	movs	r5, #10
 8001aa4:	197b      	adds	r3, r7, r5
 8001aa6:	1c22      	adds	r2, r4, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	2308      	movs	r3, #8
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	1c02      	adds	r2, r0, #0
 8001ab0:	801a      	strh	r2, [r3, #0]
 8001ab2:	1dbb      	adds	r3, r7, #6
 8001ab4:	1c0a      	adds	r2, r1, #0
 8001ab6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ab8:	1dbb      	adds	r3, r7, #6
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	2380      	movs	r3, #128	@ 0x80
 8001ac0:	045c      	lsls	r4, r3, #17
 8001ac2:	197b      	adds	r3, r7, r5
 8001ac4:	8819      	ldrh	r1, [r3, #0]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <I2C_RequestMemoryWrite+0xc4>)
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	0023      	movs	r3, r4
 8001ace:	f000 faa3 	bl	8002018 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad4:	6a39      	ldr	r1, [r7, #32]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 f91b 	bl	8001d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ade:	1e03      	subs	r3, r0, #0
 8001ae0:	d001      	beq.n	8001ae6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e033      	b.n	8001b4e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ae6:	1dbb      	adds	r3, r7, #6
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aee:	2308      	movs	r3, #8
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	629a      	str	r2, [r3, #40]	@ 0x28
 8001afc:	e019      	b.n	8001b32 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001afe:	2308      	movs	r3, #8
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b12:	6a39      	ldr	r1, [r7, #32]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 f8fc 	bl	8001d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	d001      	beq.n	8001b24 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e014      	b.n	8001b4e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b24:	2308      	movs	r3, #8
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b32:	6a3a      	ldr	r2, [r7, #32]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2180      	movs	r1, #128	@ 0x80
 8001b40:	f000 f890 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d001      	beq.n	8001b4c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bdb0      	pop	{r4, r5, r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	80002000 	.word	0x80002000

08001b5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001b5c:	b5b0      	push	{r4, r5, r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	000c      	movs	r4, r1
 8001b66:	0010      	movs	r0, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	250a      	movs	r5, #10
 8001b6c:	197b      	adds	r3, r7, r5
 8001b6e:	1c22      	adds	r2, r4, #0
 8001b70:	801a      	strh	r2, [r3, #0]
 8001b72:	2308      	movs	r3, #8
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	1c02      	adds	r2, r0, #0
 8001b78:	801a      	strh	r2, [r3, #0]
 8001b7a:	1dbb      	adds	r3, r7, #6
 8001b7c:	1c0a      	adds	r2, r1, #0
 8001b7e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b80:	1dbb      	adds	r3, r7, #6
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	197b      	adds	r3, r7, r5
 8001b88:	8819      	ldrh	r1, [r3, #0]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <I2C_RequestMemoryRead+0xc0>)
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	f000 fa41 	bl	8002018 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b98:	6a39      	ldr	r1, [r7, #32]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 f8b9 	bl	8001d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d001      	beq.n	8001baa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e033      	b.n	8001c12 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001baa:	1dbb      	adds	r3, r7, #6
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bc0:	e019      	b.n	8001bf6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd6:	6a39      	ldr	r1, [r7, #32]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 f89a 	bl	8001d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e014      	b.n	8001c12 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001be8:	2308      	movs	r3, #8
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf6:	6a3a      	ldr	r2, [r7, #32]
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	0013      	movs	r3, r2
 8001c00:	2200      	movs	r2, #0
 8001c02:	2140      	movs	r1, #64	@ 0x40
 8001c04:	f000 f82e 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001c08:	1e03      	subs	r3, r0, #0
 8001c0a:	d001      	beq.n	8001c10 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b004      	add	sp, #16
 8001c18:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	80002000 	.word	0x80002000

08001c20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d103      	bne.n	8001c3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d007      	beq.n	8001c5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2101      	movs	r1, #1
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	619a      	str	r2, [r3, #24]
  }
}
 8001c5c:	46c0      	nop			@ (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c74:	e03a      	b.n	8001cec <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	6839      	ldr	r1, [r7, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f8d3 	bl	8001e28 <I2C_IsErrorOccurred>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e040      	b.n	8001d0c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	d02d      	beq.n	8001cec <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c90:	f7fe fd48 	bl	8000724 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d302      	bcc.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d122      	bne.n	8001cec <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	425a      	negs	r2, r3
 8001cb6:	4153      	adcs	r3, r2
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	001a      	movs	r2, r3
 8001cbc:	1dfb      	adds	r3, r7, #7
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d113      	bne.n	8001cec <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc8:	2220      	movs	r2, #32
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2241      	movs	r2, #65	@ 0x41
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2242      	movs	r2, #66	@ 0x42
 8001cdc:	2100      	movs	r1, #0
 8001cde:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2240      	movs	r2, #64	@ 0x40
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e00f      	b.n	8001d0c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	425a      	negs	r2, r3
 8001cfc:	4153      	adcs	r3, r2
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	001a      	movs	r2, r3
 8001d02:	1dfb      	adds	r3, r7, #7
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d0b5      	beq.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b004      	add	sp, #16
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d20:	e032      	b.n	8001d88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f000 f87d 	bl	8001e28 <I2C_IsErrorOccurred>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e030      	b.n	8001d98 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	d025      	beq.n	8001d88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3c:	f7fe fcf2 	bl	8000724 <HAL_GetTick>
 8001d40:	0002      	movs	r2, r0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d302      	bcc.n	8001d52 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d11a      	bne.n	8001d88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d013      	beq.n	8001d88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	2220      	movs	r2, #32
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2241      	movs	r2, #65	@ 0x41
 8001d70:	2120      	movs	r1, #32
 8001d72:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2242      	movs	r2, #66	@ 0x42
 8001d78:	2100      	movs	r1, #0
 8001d7a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	2100      	movs	r1, #0
 8001d82:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e007      	b.n	8001d98 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d1c5      	bne.n	8001d22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b004      	add	sp, #16
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dac:	e02f      	b.n	8001e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f000 f837 	bl	8001e28 <I2C_IsErrorOccurred>
 8001dba:	1e03      	subs	r3, r0, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e02d      	b.n	8001e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc2:	f7fe fcaf 	bl	8000724 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d302      	bcc.n	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11a      	bne.n	8001e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2220      	movs	r2, #32
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d013      	beq.n	8001e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	2220      	movs	r2, #32
 8001dec:	431a      	orrs	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2241      	movs	r2, #65	@ 0x41
 8001df6:	2120      	movs	r1, #32
 8001df8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2242      	movs	r2, #66	@ 0x42
 8001dfe:	2100      	movs	r1, #0
 8001e00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2240      	movs	r2, #64	@ 0x40
 8001e06:	2100      	movs	r1, #0
 8001e08:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e007      	b.n	8001e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2220      	movs	r2, #32
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d1c8      	bne.n	8001dae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b004      	add	sp, #16
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	@ 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2327      	movs	r3, #39	@ 0x27
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2210      	movs	r2, #16
 8001e50:	4013      	ands	r3, r2
 8001e52:	d100      	bne.n	8001e56 <I2C_IsErrorOccurred+0x2e>
 8001e54:	e079      	b.n	8001f4a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e5e:	e057      	b.n	8001f10 <I2C_IsErrorOccurred+0xe8>
 8001e60:	2227      	movs	r2, #39	@ 0x27
 8001e62:	18bb      	adds	r3, r7, r2
 8001e64:	18ba      	adds	r2, r7, r2
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	d04f      	beq.n	8001f10 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e70:	f7fe fc58 	bl	8000724 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d302      	bcc.n	8001e86 <I2C_IsErrorOccurred+0x5e>
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d144      	bne.n	8001f10 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	01db      	lsls	r3, r3, #7
 8001e90:	4013      	ands	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e94:	2013      	movs	r0, #19
 8001e96:	183b      	adds	r3, r7, r0
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	2142      	movs	r1, #66	@ 0x42
 8001e9c:	5c52      	ldrb	r2, [r2, r1]
 8001e9e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	401a      	ands	r2, r3
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d126      	bne.n	8001f02 <I2C_IsErrorOccurred+0xda>
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	01db      	lsls	r3, r3, #7
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d021      	beq.n	8001f02 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001ebe:	183b      	adds	r3, r7, r0
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d01d      	beq.n	8001f02 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2180      	movs	r1, #128	@ 0x80
 8001ed2:	01c9      	lsls	r1, r1, #7
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ed8:	f7fe fc24 	bl	8000724 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee0:	e00f      	b.n	8001f02 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ee2:	f7fe fc1f 	bl	8000724 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b19      	cmp	r3, #25
 8001eee:	d908      	bls.n	8001f02 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ef8:	2327      	movs	r3, #39	@ 0x27
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]

              break;
 8001f00:	e006      	b.n	8001f10 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d1e8      	bne.n	8001ee2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2220      	movs	r2, #32
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d004      	beq.n	8001f28 <I2C_IsErrorOccurred+0x100>
 8001f1e:	2327      	movs	r3, #39	@ 0x27
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d09b      	beq.n	8001e60 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f28:	2327      	movs	r3, #39	@ 0x27
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2220      	movs	r2, #32
 8001f38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f42:	2327      	movs	r3, #39	@ 0x27
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d00c      	beq.n	8001f76 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4313      	orrs	r3, r2
 8001f62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2280      	movs	r2, #128	@ 0x80
 8001f6a:	0052      	lsls	r2, r2, #1
 8001f6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f6e:	2327      	movs	r3, #39	@ 0x27
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d00c      	beq.n	8001f9a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	2208      	movs	r2, #8
 8001f84:	4313      	orrs	r3, r2
 8001f86:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	00d2      	lsls	r2, r2, #3
 8001f90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f92:	2327      	movs	r3, #39	@ 0x27
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d00c      	beq.n	8001fbe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb6:	2327      	movs	r3, #39	@ 0x27
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001fbe:	2327      	movs	r3, #39	@ 0x27
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01d      	beq.n	8002004 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff fe28 	bl	8001c20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	490e      	ldr	r1, [pc, #56]	@ (8002014 <I2C_IsErrorOccurred+0x1ec>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2241      	movs	r2, #65	@ 0x41
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2242      	movs	r2, #66	@ 0x42
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2240      	movs	r2, #64	@ 0x40
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002004:	2327      	movs	r3, #39	@ 0x27
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	781b      	ldrb	r3, [r3, #0]
}
 800200a:	0018      	movs	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	b00a      	add	sp, #40	@ 0x28
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	fe00e800 	.word	0xfe00e800

08002018 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	0008      	movs	r0, r1
 8002022:	0011      	movs	r1, r2
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	240a      	movs	r4, #10
 8002028:	193b      	adds	r3, r7, r4
 800202a:	1c02      	adds	r2, r0, #0
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	2009      	movs	r0, #9
 8002030:	183b      	adds	r3, r7, r0
 8002032:	1c0a      	adds	r2, r1, #0
 8002034:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002036:	193b      	adds	r3, r7, r4
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	059b      	lsls	r3, r3, #22
 800203c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800203e:	183b      	adds	r3, r7, r0
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	0419      	lsls	r1, r3, #16
 8002044:	23ff      	movs	r3, #255	@ 0xff
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800204a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002052:	4313      	orrs	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002062:	0d51      	lsrs	r1, r2, #21
 8002064:	2280      	movs	r2, #128	@ 0x80
 8002066:	00d2      	lsls	r2, r2, #3
 8002068:	400a      	ands	r2, r1
 800206a:	4907      	ldr	r1, [pc, #28]	@ (8002088 <I2C_TransferConfig+0x70>)
 800206c:	430a      	orrs	r2, r1
 800206e:	43d2      	mvns	r2, r2
 8002070:	401a      	ands	r2, r3
 8002072:	0011      	movs	r1, r2
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b007      	add	sp, #28
 8002084:	bd90      	pop	{r4, r7, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	03ff63ff 	.word	0x03ff63ff

0800208c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2241      	movs	r2, #65	@ 0x41
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d138      	bne.n	8002114 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2240      	movs	r2, #64	@ 0x40
 80020a6:	5c9b      	ldrb	r3, [r3, r2]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e032      	b.n	8002116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2240      	movs	r2, #64	@ 0x40
 80020b4:	2101      	movs	r1, #1
 80020b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2241      	movs	r2, #65	@ 0x41
 80020bc:	2124      	movs	r1, #36	@ 0x24
 80020be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2101      	movs	r1, #1
 80020cc:	438a      	bics	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4911      	ldr	r1, [pc, #68]	@ (8002120 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020dc:	400a      	ands	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2241      	movs	r2, #65	@ 0x41
 8002104:	2120      	movs	r1, #32
 8002106:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2240      	movs	r2, #64	@ 0x40
 800210c:	2100      	movs	r1, #0
 800210e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b002      	add	sp, #8
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	ffffefff 	.word	0xffffefff

08002124 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2241      	movs	r2, #65	@ 0x41
 8002132:	5c9b      	ldrb	r3, [r3, r2]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b20      	cmp	r3, #32
 8002138:	d139      	bne.n	80021ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2240      	movs	r2, #64	@ 0x40
 800213e:	5c9b      	ldrb	r3, [r3, r2]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002144:	2302      	movs	r3, #2
 8002146:	e033      	b.n	80021b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2240      	movs	r2, #64	@ 0x40
 800214c:	2101      	movs	r1, #1
 800214e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2241      	movs	r2, #65	@ 0x41
 8002154:	2124      	movs	r1, #36	@ 0x24
 8002156:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2101      	movs	r1, #1
 8002164:	438a      	bics	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a11      	ldr	r2, [pc, #68]	@ (80021b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	430a      	orrs	r2, r1
 8002198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2241      	movs	r2, #65	@ 0x41
 800219e:	2120      	movs	r1, #32
 80021a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2240      	movs	r2, #64	@ 0x40
 80021a6:	2100      	movs	r1, #0
 80021a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
  }
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	fffff0ff 	.word	0xfffff0ff

080021bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d11f      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021e0:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	0013      	movs	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	189b      	adds	r3, r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4912      	ldr	r1, [pc, #72]	@ (8002238 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7fd ff90 	bl	8000114 <__udivsi3>
 80021f4:	0003      	movs	r3, r0
 80021f6:	3301      	adds	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021fa:	e008      	b.n	800220e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3b01      	subs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e001      	b.n	800220e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e009      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800220e:	4b07      	ldr	r3, [pc, #28]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	401a      	ands	r2, r3
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	429a      	cmp	r2, r3
 800221e:	d0ed      	beq.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	0018      	movs	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	b004      	add	sp, #16
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	40007000 	.word	0x40007000
 8002230:	fffff9ff 	.word	0xfffff9ff
 8002234:	20000008 	.word	0x20000008
 8002238:	000f4240 	.word	0x000f4240

0800223c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	23e0      	movs	r3, #224	@ 0xe0
 8002246:	01db      	lsls	r3, r3, #7
 8002248:	4013      	ands	r3, r2
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e2fe      	b.n	8002864 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d100      	bne.n	8002272 <HAL_RCC_OscConfig+0x1e>
 8002270:	e07c      	b.n	800236c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002272:	4bc3      	ldr	r3, [pc, #780]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2238      	movs	r2, #56	@ 0x38
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800227c:	4bc0      	ldr	r3, [pc, #768]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2203      	movs	r2, #3
 8002282:	4013      	ands	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b10      	cmp	r3, #16
 800228a:	d102      	bne.n	8002292 <HAL_RCC_OscConfig+0x3e>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d002      	beq.n	8002298 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4bb9      	ldr	r3, [pc, #740]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	029b      	lsls	r3, r3, #10
 80022a0:	4013      	ands	r3, r2
 80022a2:	d062      	beq.n	800236a <HAL_RCC_OscConfig+0x116>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d15e      	bne.n	800236a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e2d9      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	2380      	movs	r3, #128	@ 0x80
 80022b6:	025b      	lsls	r3, r3, #9
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x78>
 80022bc:	4bb0      	ldr	r3, [pc, #704]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4baf      	ldr	r3, [pc, #700]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	0249      	lsls	r1, r1, #9
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e020      	b.n	800230e <HAL_RCC_OscConfig+0xba>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	23a0      	movs	r3, #160	@ 0xa0
 80022d2:	02db      	lsls	r3, r3, #11
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d10e      	bne.n	80022f6 <HAL_RCC_OscConfig+0xa2>
 80022d8:	4ba9      	ldr	r3, [pc, #676]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4ba8      	ldr	r3, [pc, #672]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80022de:	2180      	movs	r1, #128	@ 0x80
 80022e0:	02c9      	lsls	r1, r1, #11
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	4ba6      	ldr	r3, [pc, #664]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4ba5      	ldr	r3, [pc, #660]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80022ec:	2180      	movs	r1, #128	@ 0x80
 80022ee:	0249      	lsls	r1, r1, #9
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e00b      	b.n	800230e <HAL_RCC_OscConfig+0xba>
 80022f6:	4ba2      	ldr	r3, [pc, #648]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4ba1      	ldr	r3, [pc, #644]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80022fc:	49a1      	ldr	r1, [pc, #644]	@ (8002584 <HAL_RCC_OscConfig+0x330>)
 80022fe:	400a      	ands	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	4b9f      	ldr	r3, [pc, #636]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b9e      	ldr	r3, [pc, #632]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002308:	499f      	ldr	r1, [pc, #636]	@ (8002588 <HAL_RCC_OscConfig+0x334>)
 800230a:	400a      	ands	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d014      	beq.n	8002340 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe fa05 	bl	8000724 <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe fa00 	bl	8000724 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	@ 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e298      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002332:	4b93      	ldr	r3, [pc, #588]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	@ 0x80
 8002338:	029b      	lsls	r3, r3, #10
 800233a:	4013      	ands	r3, r2
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0xcc>
 800233e:	e015      	b.n	800236c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe f9f0 	bl	8000724 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234a:	f7fe f9eb 	bl	8000724 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	@ 0x64
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e283      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800235c:	4b88      	ldr	r3, [pc, #544]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	@ 0x80
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	4013      	ands	r3, r2
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0xf6>
 8002368:	e000      	b.n	800236c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2202      	movs	r2, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d100      	bne.n	8002378 <HAL_RCC_OscConfig+0x124>
 8002376:	e099      	b.n	80024ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002378:	4b81      	ldr	r3, [pc, #516]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2238      	movs	r2, #56	@ 0x38
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002382:	4b7f      	ldr	r3, [pc, #508]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2203      	movs	r2, #3
 8002388:	4013      	ands	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b10      	cmp	r3, #16
 8002390:	d102      	bne.n	8002398 <HAL_RCC_OscConfig+0x144>
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d002      	beq.n	800239e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d135      	bne.n	800240a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800239e:	4b78      	ldr	r3, [pc, #480]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	@ 0x80
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4013      	ands	r3, r2
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x162>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e256      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b72      	ldr	r3, [pc, #456]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a74      	ldr	r2, [pc, #464]	@ (800258c <HAL_RCC_OscConfig+0x338>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	021a      	lsls	r2, r3, #8
 80023c6:	4b6e      	ldr	r3, [pc, #440]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d112      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002590 <HAL_RCC_OscConfig+0x33c>)
 80023d8:	4013      	ands	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	4b67      	ldr	r3, [pc, #412]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023e6:	4b66      	ldr	r3, [pc, #408]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0adb      	lsrs	r3, r3, #11
 80023ec:	2207      	movs	r2, #7
 80023ee:	4013      	ands	r3, r2
 80023f0:	4a68      	ldr	r2, [pc, #416]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80023f2:	40da      	lsrs	r2, r3
 80023f4:	4b68      	ldr	r3, [pc, #416]	@ (8002598 <HAL_RCC_OscConfig+0x344>)
 80023f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023f8:	4b68      	ldr	r3, [pc, #416]	@ (800259c <HAL_RCC_OscConfig+0x348>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7fe f935 	bl	800066c <HAL_InitTick>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d051      	beq.n	80024aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e22c      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d030      	beq.n	8002474 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002412:	4b5b      	ldr	r3, [pc, #364]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5e      	ldr	r2, [pc, #376]	@ (8002590 <HAL_RCC_OscConfig+0x33c>)
 8002418:	4013      	ands	r3, r2
 800241a:	0019      	movs	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	4b57      	ldr	r3, [pc, #348]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002426:	4b56      	ldr	r3, [pc, #344]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b55      	ldr	r3, [pc, #340]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800242c:	2180      	movs	r1, #128	@ 0x80
 800242e:	0049      	lsls	r1, r1, #1
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe f976 	bl	8000724 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe f971 	bl	8000724 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e209      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002450:	4b4b      	ldr	r3, [pc, #300]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4013      	ands	r3, r2
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b48      	ldr	r3, [pc, #288]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a4a      	ldr	r2, [pc, #296]	@ (800258c <HAL_RCC_OscConfig+0x338>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	021a      	lsls	r2, r3, #8
 800246c:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800246e:	430a      	orrs	r2, r1
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	e01b      	b.n	80024ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002474:	4b42      	ldr	r3, [pc, #264]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800247a:	4949      	ldr	r1, [pc, #292]	@ (80025a0 <HAL_RCC_OscConfig+0x34c>)
 800247c:	400a      	ands	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe f950 	bl	8000724 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248a:	f7fe f94b 	bl	8000724 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1e3      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800249c:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4013      	ands	r3, r2
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x236>
 80024a8:	e000      	b.n	80024ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2208      	movs	r2, #8
 80024b2:	4013      	ands	r3, r2
 80024b4:	d047      	beq.n	8002546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024b6:	4b32      	ldr	r3, [pc, #200]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2238      	movs	r2, #56	@ 0x38
 80024bc:	4013      	ands	r3, r2
 80024be:	2b18      	cmp	r3, #24
 80024c0:	d10a      	bne.n	80024d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c6:	2202      	movs	r2, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	d03c      	beq.n	8002546 <HAL_RCC_OscConfig+0x2f2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d138      	bne.n	8002546 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e1c5      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d019      	beq.n	8002514 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024e0:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80024e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024e4:	4b26      	ldr	r3, [pc, #152]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 80024e6:	2101      	movs	r1, #1
 80024e8:	430a      	orrs	r2, r1
 80024ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe f91a 	bl	8000724 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f6:	f7fe f915 	bl	8000724 <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1ad      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002508:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800250a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250c:	2202      	movs	r2, #2
 800250e:	4013      	ands	r3, r2
 8002510:	d0f1      	beq.n	80024f6 <HAL_RCC_OscConfig+0x2a2>
 8002512:	e018      	b.n	8002546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002514:	4b1a      	ldr	r3, [pc, #104]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002516:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002518:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800251a:	2101      	movs	r1, #1
 800251c:	438a      	bics	r2, r1
 800251e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe f900 	bl	8000724 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252a:	f7fe f8fb 	bl	8000724 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e193      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800253c:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d1f1      	bne.n	800252a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2204      	movs	r2, #4
 800254c:	4013      	ands	r3, r2
 800254e:	d100      	bne.n	8002552 <HAL_RCC_OscConfig+0x2fe>
 8002550:	e0c6      	b.n	80026e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	231f      	movs	r3, #31
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800255a:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2238      	movs	r2, #56	@ 0x38
 8002560:	4013      	ands	r3, r2
 8002562:	2b20      	cmp	r3, #32
 8002564:	d11e      	bne.n	80025a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_RCC_OscConfig+0x32c>)
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	2202      	movs	r2, #2
 800256c:	4013      	ands	r3, r2
 800256e:	d100      	bne.n	8002572 <HAL_RCC_OscConfig+0x31e>
 8002570:	e0b6      	b.n	80026e0 <HAL_RCC_OscConfig+0x48c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d000      	beq.n	800257c <HAL_RCC_OscConfig+0x328>
 800257a:	e0b1      	b.n	80026e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e171      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
 8002580:	40021000 	.word	0x40021000
 8002584:	fffeffff 	.word	0xfffeffff
 8002588:	fffbffff 	.word	0xfffbffff
 800258c:	ffff80ff 	.word	0xffff80ff
 8002590:	ffffc7ff 	.word	0xffffc7ff
 8002594:	00f42400 	.word	0x00f42400
 8002598:	20000008 	.word	0x20000008
 800259c:	20000000 	.word	0x20000000
 80025a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025a4:	4bb1      	ldr	r3, [pc, #708]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80025a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	055b      	lsls	r3, r3, #21
 80025ac:	4013      	ands	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_OscConfig+0x360>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x362>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d011      	beq.n	80025de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4bac      	ldr	r3, [pc, #688]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80025bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025be:	4bab      	ldr	r3, [pc, #684]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80025c0:	2180      	movs	r1, #128	@ 0x80
 80025c2:	0549      	lsls	r1, r1, #21
 80025c4:	430a      	orrs	r2, r1
 80025c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025c8:	4ba8      	ldr	r3, [pc, #672]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80025ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	055b      	lsls	r3, r3, #21
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025d6:	231f      	movs	r3, #31
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025de:	4ba4      	ldr	r3, [pc, #656]	@ (8002870 <HAL_RCC_OscConfig+0x61c>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	d11a      	bne.n	8002620 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ea:	4ba1      	ldr	r3, [pc, #644]	@ (8002870 <HAL_RCC_OscConfig+0x61c>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002870 <HAL_RCC_OscConfig+0x61c>)
 80025f0:	2180      	movs	r1, #128	@ 0x80
 80025f2:	0049      	lsls	r1, r1, #1
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025f8:	f7fe f894 	bl	8000724 <HAL_GetTick>
 80025fc:	0003      	movs	r3, r0
 80025fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002602:	f7fe f88f 	bl	8000724 <HAL_GetTick>
 8002606:	0002      	movs	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e127      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002614:	4b96      	ldr	r3, [pc, #600]	@ (8002870 <HAL_RCC_OscConfig+0x61c>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4013      	ands	r3, r2
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x3e2>
 8002628:	4b90      	ldr	r3, [pc, #576]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800262a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800262c:	4b8f      	ldr	r3, [pc, #572]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800262e:	2101      	movs	r1, #1
 8002630:	430a      	orrs	r2, r1
 8002632:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002634:	e01c      	b.n	8002670 <HAL_RCC_OscConfig+0x41c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b05      	cmp	r3, #5
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x404>
 800263e:	4b8b      	ldr	r3, [pc, #556]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002640:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002642:	4b8a      	ldr	r3, [pc, #552]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002644:	2104      	movs	r1, #4
 8002646:	430a      	orrs	r2, r1
 8002648:	65da      	str	r2, [r3, #92]	@ 0x5c
 800264a:	4b88      	ldr	r3, [pc, #544]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800264c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800264e:	4b87      	ldr	r3, [pc, #540]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002650:	2101      	movs	r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0x41c>
 8002658:	4b84      	ldr	r3, [pc, #528]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800265a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800265c:	4b83      	ldr	r3, [pc, #524]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800265e:	2101      	movs	r1, #1
 8002660:	438a      	bics	r2, r1
 8002662:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002664:	4b81      	ldr	r3, [pc, #516]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002666:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002668:	4b80      	ldr	r3, [pc, #512]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800266a:	2104      	movs	r1, #4
 800266c:	438a      	bics	r2, r1
 800266e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d014      	beq.n	80026a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe f854 	bl	8000724 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002680:	e009      	b.n	8002696 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe f84f 	bl	8000724 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	4a79      	ldr	r2, [pc, #484]	@ (8002874 <HAL_RCC_OscConfig+0x620>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e0e6      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002696:	4b75      	ldr	r3, [pc, #468]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x42e>
 80026a0:	e013      	b.n	80026ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe f83f 	bl	8000724 <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026aa:	e009      	b.n	80026c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe f83a 	bl	8000724 <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002874 <HAL_RCC_OscConfig+0x620>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0d1      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c0:	4b6a      	ldr	r3, [pc, #424]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026ca:	231f      	movs	r3, #31
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b65      	ldr	r3, [pc, #404]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80026d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026d8:	4b64      	ldr	r3, [pc, #400]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80026da:	4967      	ldr	r1, [pc, #412]	@ (8002878 <HAL_RCC_OscConfig+0x624>)
 80026dc:	400a      	ands	r2, r1
 80026de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d100      	bne.n	80026ea <HAL_RCC_OscConfig+0x496>
 80026e8:	e0bb      	b.n	8002862 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ea:	4b60      	ldr	r3, [pc, #384]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2238      	movs	r2, #56	@ 0x38
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d100      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4a4>
 80026f6:	e07b      	b.n	80027f0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d156      	bne.n	80027ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b5a      	ldr	r3, [pc, #360]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b59      	ldr	r3, [pc, #356]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002706:	495d      	ldr	r1, [pc, #372]	@ (800287c <HAL_RCC_OscConfig+0x628>)
 8002708:	400a      	ands	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe f80a 	bl	8000724 <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe f805 	bl	8000724 <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e09d      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002728:	4b50      	ldr	r3, [pc, #320]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	049b      	lsls	r3, r3, #18
 8002730:	4013      	ands	r3, r2
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002734:	4b4d      	ldr	r3, [pc, #308]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a51      	ldr	r2, [pc, #324]	@ (8002880 <HAL_RCC_OscConfig+0x62c>)
 800273a:	4013      	ands	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1a      	ldr	r2, [r3, #32]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002760:	431a      	orrs	r2, r3
 8002762:	4b42      	ldr	r3, [pc, #264]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002764:	430a      	orrs	r2, r1
 8002766:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002768:	4b40      	ldr	r3, [pc, #256]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b3f      	ldr	r3, [pc, #252]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800276e:	2180      	movs	r1, #128	@ 0x80
 8002770:	0449      	lsls	r1, r1, #17
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002776:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	4b3c      	ldr	r3, [pc, #240]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800277c:	2180      	movs	r1, #128	@ 0x80
 800277e:	0549      	lsls	r1, r1, #21
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fd ffce 	bl	8000724 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7fd ffc9 	bl	8000724 <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e061      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a0:	4b32      	ldr	r3, [pc, #200]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	049b      	lsls	r3, r3, #18
 80027a8:	4013      	ands	r3, r2
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x53a>
 80027ac:	e059      	b.n	8002862 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b2f      	ldr	r3, [pc, #188]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027b4:	4931      	ldr	r1, [pc, #196]	@ (800287c <HAL_RCC_OscConfig+0x628>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fd ffb3 	bl	8000724 <HAL_GetTick>
 80027be:	0003      	movs	r3, r0
 80027c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fd ffae 	bl	8000724 <HAL_GetTick>
 80027c8:	0002      	movs	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e046      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d6:	4b25      	ldr	r3, [pc, #148]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	@ 0x80
 80027dc:	049b      	lsls	r3, r3, #18
 80027de:	4013      	ands	r3, r2
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027e2:	4b22      	ldr	r3, [pc, #136]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	4b21      	ldr	r3, [pc, #132]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027e8:	4926      	ldr	r1, [pc, #152]	@ (8002884 <HAL_RCC_OscConfig+0x630>)
 80027ea:	400a      	ands	r2, r1
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	e038      	b.n	8002862 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e033      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2203      	movs	r2, #3
 8002806:	401a      	ands	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	429a      	cmp	r2, r3
 800280e:	d126      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2270      	movs	r2, #112	@ 0x70
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d11f      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	23fe      	movs	r3, #254	@ 0xfe
 8002822:	01db      	lsls	r3, r3, #7
 8002824:	401a      	ands	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d116      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	23f8      	movs	r3, #248	@ 0xf8
 8002834:	039b      	lsls	r3, r3, #14
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d10e      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	23e0      	movs	r3, #224	@ 0xe0
 8002844:	051b      	lsls	r3, r3, #20
 8002846:	401a      	ands	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	0f5b      	lsrs	r3, r3, #29
 8002854:	075a      	lsls	r2, r3, #29
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b008      	add	sp, #32
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	40007000 	.word	0x40007000
 8002874:	00001388 	.word	0x00001388
 8002878:	efffffff 	.word	0xefffffff
 800287c:	feffffff 	.word	0xfeffffff
 8002880:	11c1808c 	.word	0x11c1808c
 8002884:	eefefffc 	.word	0xeefefffc

08002888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0e9      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b76      	ldr	r3, [pc, #472]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2207      	movs	r2, #7
 80028a2:	4013      	ands	r3, r2
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d91e      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b73      	ldr	r3, [pc, #460]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2207      	movs	r2, #7
 80028b0:	4393      	bics	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	4b70      	ldr	r3, [pc, #448]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028bc:	f7fd ff32 	bl	8000724 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028c4:	e009      	b.n	80028da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c6:	f7fd ff2d 	bl	8000724 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a7c <HAL_RCC_ClockConfig+0x1f4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0ca      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028da:	4b67      	ldr	r3, [pc, #412]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2207      	movs	r2, #7
 80028e0:	4013      	ands	r3, r2
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1ee      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2202      	movs	r2, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d015      	beq.n	800291e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2204      	movs	r2, #4
 80028f8:	4013      	ands	r3, r2
 80028fa:	d006      	beq.n	800290a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028fc:	4b60      	ldr	r3, [pc, #384]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4b5f      	ldr	r3, [pc, #380]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002902:	21e0      	movs	r1, #224	@ 0xe0
 8002904:	01c9      	lsls	r1, r1, #7
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4a5d      	ldr	r2, [pc, #372]	@ (8002a84 <HAL_RCC_ClockConfig+0x1fc>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	4b59      	ldr	r3, [pc, #356]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 800291a:	430a      	orrs	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	4013      	ands	r3, r2
 8002926:	d057      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002930:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	029b      	lsls	r3, r3, #10
 8002938:	4013      	ands	r3, r2
 800293a:	d12b      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e097      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d107      	bne.n	8002958 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002948:	4b4d      	ldr	r3, [pc, #308]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	049b      	lsls	r3, r3, #18
 8002950:	4013      	ands	r3, r2
 8002952:	d11f      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e08b      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002960:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4013      	ands	r3, r2
 800296a:	d113      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e07f      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d106      	bne.n	8002986 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002978:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 800297a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297c:	2202      	movs	r2, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d108      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e074      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	4b3e      	ldr	r3, [pc, #248]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e06d      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002994:	4b3a      	ldr	r3, [pc, #232]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2207      	movs	r2, #7
 800299a:	4393      	bics	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fd febc 	bl	8000724 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b0:	e009      	b.n	80029c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b2:	f7fd feb7 	bl	8000724 <HAL_GetTick>
 80029b6:	0002      	movs	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a7c <HAL_RCC_ClockConfig+0x1f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e054      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2238      	movs	r2, #56	@ 0x38
 80029cc:	401a      	ands	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d1ec      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d8:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2207      	movs	r2, #7
 80029de:	4013      	ands	r3, r2
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d21e      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2207      	movs	r2, #7
 80029ec:	4393      	bics	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	4b21      	ldr	r3, [pc, #132]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029f8:	f7fd fe94 	bl	8000724 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a00:	e009      	b.n	8002a16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a02:	f7fd fe8f 	bl	8000724 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a7c <HAL_RCC_ClockConfig+0x1f4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e02c      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a16:	4b18      	ldr	r3, [pc, #96]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2e:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4a15      	ldr	r2, [pc, #84]	@ (8002a88 <HAL_RCC_ClockConfig+0x200>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a42:	f000 f829 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a46:	0001      	movs	r1, r0
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	220f      	movs	r2, #15
 8002a50:	401a      	ands	r2, r3
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HAL_RCC_ClockConfig+0x204>)
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	58d3      	ldr	r3, [r2, r3]
 8002a58:	221f      	movs	r2, #31
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	000a      	movs	r2, r1
 8002a5e:	40da      	lsrs	r2, r3
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_ClockConfig+0x208>)
 8002a62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_ClockConfig+0x20c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fd fdff 	bl	800066c <HAL_InitTick>
 8002a6e:	0003      	movs	r3, r0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	00001388 	.word	0x00001388
 8002a80:	40021000 	.word	0x40021000
 8002a84:	fffff0ff 	.word	0xfffff0ff
 8002a88:	ffff8fff 	.word	0xffff8fff
 8002a8c:	08006024 	.word	0x08006024
 8002a90:	20000008 	.word	0x20000008
 8002a94:	20000000 	.word	0x20000000

08002a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2238      	movs	r2, #56	@ 0x38
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002aa8:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0adb      	lsrs	r3, r3, #11
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	4835      	ldr	r0, [pc, #212]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002abe:	f7fd fb29 	bl	8000114 <__udivsi3>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	e05d      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac8:	4b31      	ldr	r3, [pc, #196]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2238      	movs	r2, #56	@ 0x38
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ad4:	4b30      	ldr	r3, [pc, #192]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	e054      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ada:	4b2d      	ldr	r3, [pc, #180]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2238      	movs	r2, #56	@ 0x38
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d138      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2203      	movs	r2, #3
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002af0:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	2207      	movs	r2, #7
 8002af8:	4013      	ands	r3, r2
 8002afa:	3301      	adds	r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	4824      	ldr	r0, [pc, #144]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b08:	f7fd fb04 	bl	8000114 <__udivsi3>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	0019      	movs	r1, r3
 8002b10:	4b1f      	ldr	r3, [pc, #124]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	227f      	movs	r2, #127	@ 0x7f
 8002b18:	4013      	ands	r3, r2
 8002b1a:	434b      	muls	r3, r1
 8002b1c:	617b      	str	r3, [r7, #20]
        break;
 8002b1e:	e00d      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	481c      	ldr	r0, [pc, #112]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b24:	f7fd faf6 	bl	8000114 <__udivsi3>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	227f      	movs	r2, #127	@ 0x7f
 8002b34:	4013      	ands	r3, r2
 8002b36:	434b      	muls	r3, r1
 8002b38:	617b      	str	r3, [r7, #20]
        break;
 8002b3a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b3c:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0f5b      	lsrs	r3, r3, #29
 8002b42:	2207      	movs	r2, #7
 8002b44:	4013      	ands	r3, r2
 8002b46:	3301      	adds	r3, #1
 8002b48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	6978      	ldr	r0, [r7, #20]
 8002b4e:	f7fd fae1 	bl	8000114 <__udivsi3>
 8002b52:	0003      	movs	r3, r0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	e015      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b58:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2238      	movs	r2, #56	@ 0x38
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d103      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b6c:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2238      	movs	r2, #56	@ 0x38
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b18      	cmp	r3, #24
 8002b76:	d103      	bne.n	8002b80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b78:	23fa      	movs	r3, #250	@ 0xfa
 8002b7a:	01db      	lsls	r3, r3, #7
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	e001      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b84:	693b      	ldr	r3, [r7, #16]
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b006      	add	sp, #24
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	40021000 	.word	0x40021000
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	007a1200 	.word	0x007a1200

08002b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b02      	ldr	r3, [pc, #8]	@ (8002bac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	20000008 	.word	0x20000008

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002bb4:	f7ff fff2 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bb8:	0004      	movs	r4, r0
 8002bba:	f7ff fb3f 	bl	800223c <LL_RCC_GetAPB1Prescaler>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	0b1a      	lsrs	r2, r3, #12
 8002bc2:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	58d3      	ldr	r3, [r2, r3]
 8002bc8:	221f      	movs	r2, #31
 8002bca:	4013      	ands	r3, r2
 8002bcc:	40dc      	lsrs	r4, r3
 8002bce:	0023      	movs	r3, r4
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	08006064 	.word	0x08006064

08002bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002be4:	2313      	movs	r3, #19
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bec:	2312      	movs	r3, #18
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	029b      	lsls	r3, r3, #10
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c00:	e0a3      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c02:	2011      	movs	r0, #17
 8002c04:	183b      	adds	r3, r7, r0
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0a:	4bc3      	ldr	r3, [pc, #780]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	055b      	lsls	r3, r3, #21
 8002c12:	4013      	ands	r3, r2
 8002c14:	d110      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4bc0      	ldr	r3, [pc, #768]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1a:	4bbf      	ldr	r3, [pc, #764]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c1c:	2180      	movs	r1, #128	@ 0x80
 8002c1e:	0549      	lsls	r1, r1, #21
 8002c20:	430a      	orrs	r2, r1
 8002c22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c24:	4bbc      	ldr	r3, [pc, #752]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	055b      	lsls	r3, r3, #21
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c32:	183b      	adds	r3, r7, r0
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c38:	4bb8      	ldr	r3, [pc, #736]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4bb7      	ldr	r3, [pc, #732]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c3e:	2180      	movs	r1, #128	@ 0x80
 8002c40:	0049      	lsls	r1, r1, #1
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c46:	f7fd fd6d 	bl	8000724 <HAL_GetTick>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7fd fd68 	bl	8000724 <HAL_GetTick>
 8002c54:	0002      	movs	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d904      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c5e:	2313      	movs	r3, #19
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2203      	movs	r2, #3
 8002c64:	701a      	strb	r2, [r3, #0]
        break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c68:	4bac      	ldr	r3, [pc, #688]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	d0ed      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c74:	2313      	movs	r3, #19
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d154      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c7e:	4ba6      	ldr	r3, [pc, #664]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c82:	23c0      	movs	r3, #192	@ 0xc0
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d019      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d014      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c9a:	4b9f      	ldr	r3, [pc, #636]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9e:	4aa0      	ldr	r2, [pc, #640]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca4:	4b9c      	ldr	r3, [pc, #624]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ca8:	4b9b      	ldr	r3, [pc, #620]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002caa:	2180      	movs	r1, #128	@ 0x80
 8002cac:	0249      	lsls	r1, r1, #9
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb2:	4b99      	ldr	r3, [pc, #612]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cb6:	4b98      	ldr	r3, [pc, #608]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cb8:	499a      	ldr	r1, [pc, #616]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cbe:	4b96      	ldr	r3, [pc, #600]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d016      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fd fd2a 	bl	8000724 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd4:	e00c      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fd fd25 	bl	8000724 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	4a91      	ldr	r2, [pc, #580]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d904      	bls.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ce6:	2313      	movs	r3, #19
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	2203      	movs	r2, #3
 8002cec:	701a      	strb	r2, [r3, #0]
            break;
 8002cee:	e004      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf0:	4b89      	ldr	r3, [pc, #548]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d0ed      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cfa:	2313      	movs	r3, #19
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d04:	4b84      	ldr	r3, [pc, #528]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d08:	4a85      	ldr	r2, [pc, #532]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d12:	4b81      	ldr	r3, [pc, #516]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d14:	430a      	orrs	r2, r1
 8002d16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d18:	e00c      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d1a:	2312      	movs	r3, #18
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2213      	movs	r2, #19
 8002d20:	18ba      	adds	r2, r7, r2
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e005      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d28:	2312      	movs	r3, #18
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	2213      	movs	r2, #19
 8002d2e:	18ba      	adds	r2, r7, r2
 8002d30:	7812      	ldrb	r2, [r2, #0]
 8002d32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d34:	2311      	movs	r3, #17
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3e:	4b76      	ldr	r3, [pc, #472]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d42:	4b75      	ldr	r3, [pc, #468]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d44:	4979      	ldr	r1, [pc, #484]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d54:	4b70      	ldr	r3, [pc, #448]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d58:	2203      	movs	r2, #3
 8002d5a:	4393      	bics	r3, r2
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4b6d      	ldr	r3, [pc, #436]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d64:	430a      	orrs	r2, r1
 8002d66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d72:	4b69      	ldr	r3, [pc, #420]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d76:	220c      	movs	r2, #12
 8002d78:	4393      	bics	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b65      	ldr	r3, [pc, #404]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d82:	430a      	orrs	r2, r1
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d90:	4b61      	ldr	r3, [pc, #388]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	4a66      	ldr	r2, [pc, #408]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	0019      	movs	r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da0:	430a      	orrs	r2, r1
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4013      	ands	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002db0:	4b59      	ldr	r3, [pc, #356]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	4a5f      	ldr	r2, [pc, #380]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	4b56      	ldr	r3, [pc, #344]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dd0:	4b51      	ldr	r3, [pc, #324]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd4:	4a58      	ldr	r2, [pc, #352]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	4b4e      	ldr	r3, [pc, #312]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de0:	430a      	orrs	r2, r1
 8002de2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2220      	movs	r2, #32
 8002dea:	4013      	ands	r3, r2
 8002dec:	d009      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dee:	4b4a      	ldr	r3, [pc, #296]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df2:	4a52      	ldr	r2, [pc, #328]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	0019      	movs	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	4b46      	ldr	r3, [pc, #280]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	01db      	lsls	r3, r3, #7
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d015      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e0e:	4b42      	ldr	r3, [pc, #264]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	0899      	lsrs	r1, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	05db      	lsls	r3, r3, #23
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	4b39      	ldr	r3, [pc, #228]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e32:	2180      	movs	r1, #128	@ 0x80
 8002e34:	0249      	lsls	r1, r1, #9
 8002e36:	430a      	orrs	r2, r1
 8002e38:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	031b      	lsls	r3, r3, #12
 8002e42:	4013      	ands	r3, r2
 8002e44:	d009      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e46:	4b34      	ldr	r3, [pc, #208]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4a:	2240      	movs	r2, #64	@ 0x40
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e54:	4b30      	ldr	r3, [pc, #192]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e56:	430a      	orrs	r2, r1
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2380      	movs	r3, #128	@ 0x80
 8002e60:	039b      	lsls	r3, r3, #14
 8002e62:	4013      	ands	r3, r2
 8002e64:	d016      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e66:	4b2c      	ldr	r3, [pc, #176]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6a:	4a35      	ldr	r2, [pc, #212]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e74:	4b28      	ldr	r3, [pc, #160]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	03db      	lsls	r3, r3, #15
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d106      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e86:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e8c:	2180      	movs	r1, #128	@ 0x80
 8002e8e:	0449      	lsls	r1, r1, #17
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2380      	movs	r3, #128	@ 0x80
 8002e9a:	03db      	lsls	r3, r3, #15
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d016      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	4a27      	ldr	r2, [pc, #156]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eae:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	045b      	lsls	r3, r3, #17
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d106      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec6:	2180      	movs	r1, #128	@ 0x80
 8002ec8:	0449      	lsls	r1, r1, #17
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002eda:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ede:	4a1a      	ldr	r2, [pc, #104]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eea:	430a      	orrs	r2, r1
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	2380      	movs	r3, #128	@ 0x80
 8002ef4:	01db      	lsls	r3, r3, #7
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f00:	2180      	movs	r1, #128	@ 0x80
 8002f02:	0249      	lsls	r1, r1, #9
 8002f04:	430a      	orrs	r2, r1
 8002f06:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f08:	2312      	movs	r3, #18
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b006      	add	sp, #24
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	fffffcff 	.word	0xfffffcff
 8002f24:	fffeffff 	.word	0xfffeffff
 8002f28:	00001388 	.word	0x00001388
 8002f2c:	efffffff 	.word	0xefffffff
 8002f30:	fffff3ff 	.word	0xfffff3ff
 8002f34:	fff3ffff 	.word	0xfff3ffff
 8002f38:	ffcfffff 	.word	0xffcfffff
 8002f3c:	ffffcfff 	.word	0xffffcfff
 8002f40:	ffbfffff 	.word	0xffbfffff
 8002f44:	feffffff 	.word	0xfeffffff
 8002f48:	ffff3fff 	.word	0xffff3fff

08002f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0a8      	b.n	80030b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	2382      	movs	r3, #130	@ 0x82
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d009      	beq.n	8002f86 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	61da      	str	r2, [r3, #28]
 8002f78:	e005      	b.n	8002f86 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	225d      	movs	r2, #93	@ 0x5d
 8002f90:	5c9b      	ldrb	r3, [r3, r2]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	225c      	movs	r2, #92	@ 0x5c
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f002 fcc8 	bl	8005938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	225d      	movs	r2, #93	@ 0x5d
 8002fac:	2102      	movs	r1, #2
 8002fae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2140      	movs	r1, #64	@ 0x40
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	23e0      	movs	r3, #224	@ 0xe0
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d902      	bls.n	8002fd2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	e002      	b.n	8002fd8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	015b      	lsls	r3, r3, #5
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	23f0      	movs	r3, #240	@ 0xf0
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d008      	beq.n	8002ff6 <HAL_SPI_Init+0xaa>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	23e0      	movs	r3, #224	@ 0xe0
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d002      	beq.n	8002ff6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	2382      	movs	r3, #130	@ 0x82
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	401a      	ands	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6899      	ldr	r1, [r3, #8]
 8003004:	2384      	movs	r3, #132	@ 0x84
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	400b      	ands	r3, r1
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2102      	movs	r1, #2
 8003012:	400b      	ands	r3, r1
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2101      	movs	r1, #1
 800301c:	400b      	ands	r3, r1
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6999      	ldr	r1, [r3, #24]
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	400b      	ands	r3, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2138      	movs	r1, #56	@ 0x38
 8003032:	400b      	ands	r3, r1
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	2180      	movs	r1, #128	@ 0x80
 800303c:	400b      	ands	r3, r1
 800303e:	431a      	orrs	r2, r3
 8003040:	0011      	movs	r1, r2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	401a      	ands	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	2204      	movs	r2, #4
 800305c:	401a      	ands	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	2110      	movs	r1, #16
 8003064:	400b      	ands	r3, r1
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306c:	2108      	movs	r1, #8
 800306e:	400b      	ands	r3, r1
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68d9      	ldr	r1, [r3, #12]
 8003076:	23f0      	movs	r3, #240	@ 0xf0
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	400b      	ands	r3, r1
 800307c:	431a      	orrs	r2, r3
 800307e:	0011      	movs	r1, r2
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	015b      	lsls	r3, r3, #5
 8003086:	401a      	ands	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4907      	ldr	r1, [pc, #28]	@ (80030b8 <HAL_SPI_Init+0x16c>)
 800309c:	400a      	ands	r2, r1
 800309e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	225d      	movs	r2, #93	@ 0x5d
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b004      	add	sp, #16
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	fffff7ff 	.word	0xfffff7ff

080030bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e046      	b.n	800315c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2288      	movs	r2, #136	@ 0x88
 80030d2:	589b      	ldr	r3, [r3, r2]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2284      	movs	r2, #132	@ 0x84
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f002 fd72 	bl	8005bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2288      	movs	r2, #136	@ 0x88
 80030ec:	2124      	movs	r1, #36	@ 0x24
 80030ee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	438a      	bics	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 ff10 	bl	8003f30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f000 fc4e 	bl	80039b4 <UART_SetConfig>
 8003118:	0003      	movs	r3, r0
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e01c      	b.n	800315c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	490d      	ldr	r1, [pc, #52]	@ (8003164 <HAL_UART_Init+0xa8>)
 800312e:	400a      	ands	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	212a      	movs	r1, #42	@ 0x2a
 800313e:	438a      	bics	r2, r1
 8003140:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	0018      	movs	r0, r3
 8003156:	f000 ff9f 	bl	8004098 <UART_CheckIdleState>
 800315a:	0003      	movs	r3, r0
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}
 8003164:	ffffb7ff 	.word	0xffffb7ff

08003168 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e032      	b.n	80031e0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2288      	movs	r2, #136	@ 0x88
 800317e:	2124      	movs	r1, #36	@ 0x24
 8003180:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	438a      	bics	r2, r1
 8003190:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f002 fdeb 	bl	8005d88 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2290      	movs	r2, #144	@ 0x90
 80031b6:	2100      	movs	r1, #0
 80031b8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2288      	movs	r2, #136	@ 0x88
 80031be:	2100      	movs	r1, #0
 80031c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	228c      	movs	r2, #140	@ 0x8c
 80031c6:	2100      	movs	r1, #0
 80031c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2284      	movs	r2, #132	@ 0x84
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	@ 0x28
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	1dbb      	adds	r3, r7, #6
 80031f6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2288      	movs	r2, #136	@ 0x88
 80031fc:	589b      	ldr	r3, [r3, r2]
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d000      	beq.n	8003204 <HAL_UART_Transmit+0x1c>
 8003202:	e090      	b.n	8003326 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_UART_Transmit+0x2a>
 800320a:	1dbb      	adds	r3, r7, #6
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e088      	b.n	8003328 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	2380      	movs	r3, #128	@ 0x80
 800321c:	015b      	lsls	r3, r3, #5
 800321e:	429a      	cmp	r2, r3
 8003220:	d109      	bne.n	8003236 <HAL_UART_Transmit+0x4e>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2201      	movs	r2, #1
 800322e:	4013      	ands	r3, r2
 8003230:	d001      	beq.n	8003236 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e078      	b.n	8003328 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2290      	movs	r2, #144	@ 0x90
 800323a:	2100      	movs	r1, #0
 800323c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2288      	movs	r2, #136	@ 0x88
 8003242:	2121      	movs	r1, #33	@ 0x21
 8003244:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003246:	f7fd fa6d 	bl	8000724 <HAL_GetTick>
 800324a:	0003      	movs	r3, r0
 800324c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1dba      	adds	r2, r7, #6
 8003252:	2154      	movs	r1, #84	@ 0x54
 8003254:	8812      	ldrh	r2, [r2, #0]
 8003256:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1dba      	adds	r2, r7, #6
 800325c:	2156      	movs	r1, #86	@ 0x56
 800325e:	8812      	ldrh	r2, [r2, #0]
 8003260:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	015b      	lsls	r3, r3, #5
 800326a:	429a      	cmp	r2, r3
 800326c:	d108      	bne.n	8003280 <HAL_UART_Transmit+0x98>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e003      	b.n	8003288 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003288:	e030      	b.n	80032ec <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	0013      	movs	r3, r2
 8003294:	2200      	movs	r2, #0
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	f000 ffa8 	bl	80041ec <UART_WaitOnFlagUntilTimeout>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d005      	beq.n	80032ac <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2288      	movs	r2, #136	@ 0x88
 80032a4:	2120      	movs	r1, #32
 80032a6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e03d      	b.n	8003328 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	001a      	movs	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	05d2      	lsls	r2, r2, #23
 80032be:	0dd2      	lsrs	r2, r2, #23
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3302      	adds	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e007      	b.n	80032da <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2256      	movs	r2, #86	@ 0x56
 80032de:	5a9b      	ldrh	r3, [r3, r2]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b299      	uxth	r1, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2256      	movs	r2, #86	@ 0x56
 80032ea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2256      	movs	r2, #86	@ 0x56
 80032f0:	5a9b      	ldrh	r3, [r3, r2]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1c8      	bne.n	800328a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	0013      	movs	r3, r2
 8003302:	2200      	movs	r2, #0
 8003304:	2140      	movs	r1, #64	@ 0x40
 8003306:	f000 ff71 	bl	80041ec <UART_WaitOnFlagUntilTimeout>
 800330a:	1e03      	subs	r3, r0, #0
 800330c:	d005      	beq.n	800331a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2288      	movs	r2, #136	@ 0x88
 8003312:	2120      	movs	r1, #32
 8003314:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e006      	b.n	8003328 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2288      	movs	r2, #136	@ 0x88
 800331e:	2120      	movs	r1, #32
 8003320:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b008      	add	sp, #32
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b0aa      	sub	sp, #168	@ 0xa8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	22a4      	movs	r2, #164	@ 0xa4
 8003340:	18b9      	adds	r1, r7, r2
 8003342:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	20a0      	movs	r0, #160	@ 0xa0
 800334c:	1839      	adds	r1, r7, r0
 800334e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	249c      	movs	r4, #156	@ 0x9c
 8003358:	1939      	adds	r1, r7, r4
 800335a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800335c:	0011      	movs	r1, r2
 800335e:	18bb      	adds	r3, r7, r2
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4aa2      	ldr	r2, [pc, #648]	@ (80035ec <HAL_UART_IRQHandler+0x2bc>)
 8003364:	4013      	ands	r3, r2
 8003366:	2298      	movs	r2, #152	@ 0x98
 8003368:	18bd      	adds	r5, r7, r2
 800336a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800336c:	18bb      	adds	r3, r7, r2
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11a      	bne.n	80033aa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003374:	187b      	adds	r3, r7, r1
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	4013      	ands	r3, r2
 800337c:	d015      	beq.n	80033aa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800337e:	183b      	adds	r3, r7, r0
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2220      	movs	r2, #32
 8003384:	4013      	ands	r3, r2
 8003386:	d105      	bne.n	8003394 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003388:	193b      	adds	r3, r7, r4
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	055b      	lsls	r3, r3, #21
 8003390:	4013      	ands	r3, r2
 8003392:	d00a      	beq.n	80033aa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003398:	2b00      	cmp	r3, #0
 800339a:	d100      	bne.n	800339e <HAL_UART_IRQHandler+0x6e>
 800339c:	e2dc      	b.n	8003958 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	0010      	movs	r0, r2
 80033a6:	4798      	blx	r3
      }
      return;
 80033a8:	e2d6      	b.n	8003958 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033aa:	2398      	movs	r3, #152	@ 0x98
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d100      	bne.n	80033b6 <HAL_UART_IRQHandler+0x86>
 80033b4:	e122      	b.n	80035fc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80033b6:	239c      	movs	r3, #156	@ 0x9c
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a8c      	ldr	r2, [pc, #560]	@ (80035f0 <HAL_UART_IRQHandler+0x2c0>)
 80033be:	4013      	ands	r3, r2
 80033c0:	d106      	bne.n	80033d0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80033c2:	23a0      	movs	r3, #160	@ 0xa0
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a8a      	ldr	r2, [pc, #552]	@ (80035f4 <HAL_UART_IRQHandler+0x2c4>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	d100      	bne.n	80033d0 <HAL_UART_IRQHandler+0xa0>
 80033ce:	e115      	b.n	80035fc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033d0:	23a4      	movs	r3, #164	@ 0xa4
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2201      	movs	r2, #1
 80033d8:	4013      	ands	r3, r2
 80033da:	d012      	beq.n	8003402 <HAL_UART_IRQHandler+0xd2>
 80033dc:	23a0      	movs	r3, #160	@ 0xa0
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4013      	ands	r3, r2
 80033e8:	d00b      	beq.n	8003402 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2290      	movs	r2, #144	@ 0x90
 80033f6:	589b      	ldr	r3, [r3, r2]
 80033f8:	2201      	movs	r2, #1
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2190      	movs	r1, #144	@ 0x90
 8003400:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003402:	23a4      	movs	r3, #164	@ 0xa4
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2202      	movs	r2, #2
 800340a:	4013      	ands	r3, r2
 800340c:	d011      	beq.n	8003432 <HAL_UART_IRQHandler+0x102>
 800340e:	239c      	movs	r3, #156	@ 0x9c
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2201      	movs	r2, #1
 8003416:	4013      	ands	r3, r2
 8003418:	d00b      	beq.n	8003432 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2202      	movs	r2, #2
 8003420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2290      	movs	r2, #144	@ 0x90
 8003426:	589b      	ldr	r3, [r3, r2]
 8003428:	2204      	movs	r2, #4
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2190      	movs	r1, #144	@ 0x90
 8003430:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003432:	23a4      	movs	r3, #164	@ 0xa4
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2204      	movs	r2, #4
 800343a:	4013      	ands	r3, r2
 800343c:	d011      	beq.n	8003462 <HAL_UART_IRQHandler+0x132>
 800343e:	239c      	movs	r3, #156	@ 0x9c
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2201      	movs	r2, #1
 8003446:	4013      	ands	r3, r2
 8003448:	d00b      	beq.n	8003462 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2204      	movs	r2, #4
 8003450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2290      	movs	r2, #144	@ 0x90
 8003456:	589b      	ldr	r3, [r3, r2]
 8003458:	2202      	movs	r2, #2
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2190      	movs	r1, #144	@ 0x90
 8003460:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003462:	23a4      	movs	r3, #164	@ 0xa4
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2208      	movs	r2, #8
 800346a:	4013      	ands	r3, r2
 800346c:	d017      	beq.n	800349e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800346e:	23a0      	movs	r3, #160	@ 0xa0
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2220      	movs	r2, #32
 8003476:	4013      	ands	r3, r2
 8003478:	d105      	bne.n	8003486 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800347a:	239c      	movs	r3, #156	@ 0x9c
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5b      	ldr	r2, [pc, #364]	@ (80035f0 <HAL_UART_IRQHandler+0x2c0>)
 8003482:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003484:	d00b      	beq.n	800349e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2208      	movs	r2, #8
 800348c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2290      	movs	r2, #144	@ 0x90
 8003492:	589b      	ldr	r3, [r3, r2]
 8003494:	2208      	movs	r2, #8
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2190      	movs	r1, #144	@ 0x90
 800349c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800349e:	23a4      	movs	r3, #164	@ 0xa4
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	4013      	ands	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_UART_IRQHandler+0x1a4>
 80034ac:	23a0      	movs	r3, #160	@ 0xa0
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	04db      	lsls	r3, r3, #19
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00c      	beq.n	80034d4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2280      	movs	r2, #128	@ 0x80
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2290      	movs	r2, #144	@ 0x90
 80034c8:	589b      	ldr	r3, [r3, r2]
 80034ca:	2220      	movs	r2, #32
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2190      	movs	r1, #144	@ 0x90
 80034d2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2290      	movs	r2, #144	@ 0x90
 80034d8:	589b      	ldr	r3, [r3, r2]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d100      	bne.n	80034e0 <HAL_UART_IRQHandler+0x1b0>
 80034de:	e23d      	b.n	800395c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80034e0:	23a4      	movs	r3, #164	@ 0xa4
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2220      	movs	r2, #32
 80034e8:	4013      	ands	r3, r2
 80034ea:	d015      	beq.n	8003518 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80034ec:	23a0      	movs	r3, #160	@ 0xa0
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2220      	movs	r2, #32
 80034f4:	4013      	ands	r3, r2
 80034f6:	d106      	bne.n	8003506 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80034f8:	239c      	movs	r3, #156	@ 0x9c
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	2380      	movs	r3, #128	@ 0x80
 8003500:	055b      	lsls	r3, r3, #21
 8003502:	4013      	ands	r3, r2
 8003504:	d008      	beq.n	8003518 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	0010      	movs	r0, r2
 8003516:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2290      	movs	r2, #144	@ 0x90
 800351c:	589b      	ldr	r3, [r3, r2]
 800351e:	2194      	movs	r1, #148	@ 0x94
 8003520:	187a      	adds	r2, r7, r1
 8003522:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2240      	movs	r2, #64	@ 0x40
 800352c:	4013      	ands	r3, r2
 800352e:	2b40      	cmp	r3, #64	@ 0x40
 8003530:	d004      	beq.n	800353c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003532:	187b      	adds	r3, r7, r1
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2228      	movs	r2, #40	@ 0x28
 8003538:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800353a:	d04c      	beq.n	80035d6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	0018      	movs	r0, r3
 8003540:	f000 fec4 	bl	80042cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2240      	movs	r2, #64	@ 0x40
 800354c:	4013      	ands	r3, r2
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d13c      	bne.n	80035cc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003552:	f3ef 8310 	mrs	r3, PRIMASK
 8003556:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800355a:	2090      	movs	r0, #144	@ 0x90
 800355c:	183a      	adds	r2, r7, r0
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	2301      	movs	r3, #1
 8003562:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003566:	f383 8810 	msr	PRIMASK, r3
}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2140      	movs	r1, #64	@ 0x40
 8003578:	438a      	bics	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	183b      	adds	r3, r7, r0
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003582:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003584:	f383 8810 	msr	PRIMASK, r3
}
 8003588:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2280      	movs	r2, #128	@ 0x80
 800358e:	589b      	ldr	r3, [r3, r2]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d016      	beq.n	80035c2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2280      	movs	r2, #128	@ 0x80
 8003598:	589b      	ldr	r3, [r3, r2]
 800359a:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <HAL_UART_IRQHandler+0x2c8>)
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2280      	movs	r2, #128	@ 0x80
 80035a2:	589b      	ldr	r3, [r3, r2]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7fd fb5f 	bl	8000c68 <HAL_DMA_Abort_IT>
 80035aa:	1e03      	subs	r3, r0, #0
 80035ac:	d01c      	beq.n	80035e8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2280      	movs	r2, #128	@ 0x80
 80035b2:	589b      	ldr	r3, [r3, r2]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	2180      	movs	r1, #128	@ 0x80
 80035ba:	5852      	ldr	r2, [r2, r1]
 80035bc:	0010      	movs	r0, r2
 80035be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	e012      	b.n	80035e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 f9e1 	bl	800398c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ca:	e00d      	b.n	80035e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 f9dc 	bl	800398c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	e008      	b.n	80035e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 f9d7 	bl	800398c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2290      	movs	r2, #144	@ 0x90
 80035e2:	2100      	movs	r1, #0
 80035e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80035e6:	e1b9      	b.n	800395c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	46c0      	nop			@ (mov r8, r8)
    return;
 80035ea:	e1b7      	b.n	800395c <HAL_UART_IRQHandler+0x62c>
 80035ec:	0000080f 	.word	0x0000080f
 80035f0:	10000001 	.word	0x10000001
 80035f4:	04000120 	.word	0x04000120
 80035f8:	08004399 	.word	0x08004399

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d000      	beq.n	8003606 <HAL_UART_IRQHandler+0x2d6>
 8003604:	e13e      	b.n	8003884 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003606:	23a4      	movs	r3, #164	@ 0xa4
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2210      	movs	r2, #16
 800360e:	4013      	ands	r3, r2
 8003610:	d100      	bne.n	8003614 <HAL_UART_IRQHandler+0x2e4>
 8003612:	e137      	b.n	8003884 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003614:	23a0      	movs	r3, #160	@ 0xa0
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2210      	movs	r2, #16
 800361c:	4013      	ands	r3, r2
 800361e:	d100      	bne.n	8003622 <HAL_UART_IRQHandler+0x2f2>
 8003620:	e130      	b.n	8003884 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2210      	movs	r2, #16
 8003628:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2240      	movs	r2, #64	@ 0x40
 8003632:	4013      	ands	r3, r2
 8003634:	2b40      	cmp	r3, #64	@ 0x40
 8003636:	d000      	beq.n	800363a <HAL_UART_IRQHandler+0x30a>
 8003638:	e0a4      	b.n	8003784 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2280      	movs	r2, #128	@ 0x80
 800363e:	589b      	ldr	r3, [r3, r2]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	217e      	movs	r1, #126	@ 0x7e
 8003646:	187b      	adds	r3, r7, r1
 8003648:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800364a:	187b      	adds	r3, r7, r1
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d100      	bne.n	8003654 <HAL_UART_IRQHandler+0x324>
 8003652:	e185      	b.n	8003960 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	225c      	movs	r2, #92	@ 0x5c
 8003658:	5a9b      	ldrh	r3, [r3, r2]
 800365a:	187a      	adds	r2, r7, r1
 800365c:	8812      	ldrh	r2, [r2, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d300      	bcc.n	8003664 <HAL_UART_IRQHandler+0x334>
 8003662:	e17d      	b.n	8003960 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	187a      	adds	r2, r7, r1
 8003668:	215e      	movs	r1, #94	@ 0x5e
 800366a:	8812      	ldrh	r2, [r2, #0]
 800366c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2280      	movs	r2, #128	@ 0x80
 8003672:	589b      	ldr	r3, [r3, r2]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2220      	movs	r2, #32
 800367a:	4013      	ands	r3, r2
 800367c:	d170      	bne.n	8003760 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367e:	f3ef 8310 	mrs	r3, PRIMASK
 8003682:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003686:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003688:	2301      	movs	r3, #1
 800368a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	f383 8810 	msr	PRIMASK, r3
}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	49b4      	ldr	r1, [pc, #720]	@ (8003970 <HAL_UART_IRQHandler+0x640>)
 80036a0:	400a      	ands	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036aa:	f383 8810 	msr	PRIMASK, r3
}
 80036ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b0:	f3ef 8310 	mrs	r3, PRIMASK
 80036b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80036b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80036ba:	2301      	movs	r3, #1
 80036bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	46c0      	nop			@ (mov r8, r8)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	438a      	bics	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
 80036d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036d8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036dc:	f383 8810 	msr	PRIMASK, r3
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e2:	f3ef 8310 	mrs	r3, PRIMASK
 80036e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80036e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80036ec:	2301      	movs	r3, #1
 80036ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036f2:	f383 8810 	msr	PRIMASK, r3
}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2140      	movs	r1, #64	@ 0x40
 8003704:	438a      	bics	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800370a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	228c      	movs	r2, #140	@ 0x8c
 8003718:	2120      	movs	r1, #32
 800371a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003722:	f3ef 8310 	mrs	r3, PRIMASK
 8003726:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800372c:	2301      	movs	r3, #1
 800372e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2110      	movs	r1, #16
 8003744:	438a      	bics	r2, r1
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800374a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800374e:	f383 8810 	msr	PRIMASK, r3
}
 8003752:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2280      	movs	r2, #128	@ 0x80
 8003758:	589b      	ldr	r3, [r3, r2]
 800375a:	0018      	movs	r0, r3
 800375c:	f7fd fa22 	bl	8000ba4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	225c      	movs	r2, #92	@ 0x5c
 800376a:	5a9a      	ldrh	r2, [r3, r2]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	215e      	movs	r1, #94	@ 0x5e
 8003770:	5a5b      	ldrh	r3, [r3, r1]
 8003772:	b29b      	uxth	r3, r3
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	0011      	movs	r1, r2
 800377c:	0018      	movs	r0, r3
 800377e:	f000 f90d 	bl	800399c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003782:	e0ed      	b.n	8003960 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	225c      	movs	r2, #92	@ 0x5c
 8003788:	5a99      	ldrh	r1, [r3, r2]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	225e      	movs	r2, #94	@ 0x5e
 800378e:	5a9b      	ldrh	r3, [r3, r2]
 8003790:	b29a      	uxth	r2, r3
 8003792:	208e      	movs	r0, #142	@ 0x8e
 8003794:	183b      	adds	r3, r7, r0
 8003796:	1a8a      	subs	r2, r1, r2
 8003798:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	225e      	movs	r2, #94	@ 0x5e
 800379e:	5a9b      	ldrh	r3, [r3, r2]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d100      	bne.n	80037a8 <HAL_UART_IRQHandler+0x478>
 80037a6:	e0dd      	b.n	8003964 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80037a8:	183b      	adds	r3, r7, r0
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d100      	bne.n	80037b2 <HAL_UART_IRQHandler+0x482>
 80037b0:	e0d8      	b.n	8003964 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b2:	f3ef 8310 	mrs	r3, PRIMASK
 80037b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80037b8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037ba:	2488      	movs	r4, #136	@ 0x88
 80037bc:	193a      	adds	r2, r7, r4
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	2301      	movs	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4967      	ldr	r1, [pc, #412]	@ (8003974 <HAL_UART_IRQHandler+0x644>)
 80037d8:	400a      	ands	r2, r1
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	193b      	adds	r3, r7, r4
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80037f0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037f2:	2484      	movs	r4, #132	@ 0x84
 80037f4:	193a      	adds	r2, r7, r4
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	2301      	movs	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f383 8810 	msr	PRIMASK, r3
}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	495a      	ldr	r1, [pc, #360]	@ (8003978 <HAL_UART_IRQHandler+0x648>)
 8003810:	400a      	ands	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	193b      	adds	r3, r7, r4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	228c      	movs	r2, #140	@ 0x8c
 8003826:	2120      	movs	r1, #32
 8003828:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003836:	f3ef 8310 	mrs	r3, PRIMASK
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383e:	2480      	movs	r4, #128	@ 0x80
 8003840:	193a      	adds	r2, r7, r4
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	2301      	movs	r3, #1
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	f383 8810 	msr	PRIMASK, r3
}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2110      	movs	r1, #16
 800385c:	438a      	bics	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	193b      	adds	r3, r7, r4
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003874:	183b      	adds	r3, r7, r0
 8003876:	881a      	ldrh	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	0011      	movs	r1, r2
 800387c:	0018      	movs	r0, r3
 800387e:	f000 f88d 	bl	800399c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003882:	e06f      	b.n	8003964 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003884:	23a4      	movs	r3, #164	@ 0xa4
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	035b      	lsls	r3, r3, #13
 800388e:	4013      	ands	r3, r2
 8003890:	d010      	beq.n	80038b4 <HAL_UART_IRQHandler+0x584>
 8003892:	239c      	movs	r3, #156	@ 0x9c
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	03db      	lsls	r3, r3, #15
 800389c:	4013      	ands	r3, r2
 800389e:	d009      	beq.n	80038b4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2280      	movs	r2, #128	@ 0x80
 80038a6:	0352      	lsls	r2, r2, #13
 80038a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 fdb6 	bl	800441e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038b2:	e05a      	b.n	800396a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80038b4:	23a4      	movs	r3, #164	@ 0xa4
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2280      	movs	r2, #128	@ 0x80
 80038bc:	4013      	ands	r3, r2
 80038be:	d016      	beq.n	80038ee <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80038c0:	23a0      	movs	r3, #160	@ 0xa0
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2280      	movs	r2, #128	@ 0x80
 80038c8:	4013      	ands	r3, r2
 80038ca:	d106      	bne.n	80038da <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80038cc:	239c      	movs	r3, #156	@ 0x9c
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	2380      	movs	r3, #128	@ 0x80
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	4013      	ands	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d042      	beq.n	8003968 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	0010      	movs	r0, r2
 80038ea:	4798      	blx	r3
    }
    return;
 80038ec:	e03c      	b.n	8003968 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038ee:	23a4      	movs	r3, #164	@ 0xa4
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2240      	movs	r2, #64	@ 0x40
 80038f6:	4013      	ands	r3, r2
 80038f8:	d00a      	beq.n	8003910 <HAL_UART_IRQHandler+0x5e0>
 80038fa:	23a0      	movs	r3, #160	@ 0xa0
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2240      	movs	r2, #64	@ 0x40
 8003902:	4013      	ands	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	0018      	movs	r0, r3
 800390a:	f000 fd5c 	bl	80043c6 <UART_EndTransmit_IT>
    return;
 800390e:	e02c      	b.n	800396a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003910:	23a4      	movs	r3, #164	@ 0xa4
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	2380      	movs	r3, #128	@ 0x80
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	4013      	ands	r3, r2
 800391c:	d00b      	beq.n	8003936 <HAL_UART_IRQHandler+0x606>
 800391e:	23a0      	movs	r3, #160	@ 0xa0
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	05db      	lsls	r3, r3, #23
 8003928:	4013      	ands	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	0018      	movs	r0, r3
 8003930:	f000 fd85 	bl	800443e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003934:	e019      	b.n	800396a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003936:	23a4      	movs	r3, #164	@ 0xa4
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	045b      	lsls	r3, r3, #17
 8003940:	4013      	ands	r3, r2
 8003942:	d012      	beq.n	800396a <HAL_UART_IRQHandler+0x63a>
 8003944:	23a0      	movs	r3, #160	@ 0xa0
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	da0d      	bge.n	800396a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 fd6c 	bl	800442e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003956:	e008      	b.n	800396a <HAL_UART_IRQHandler+0x63a>
      return;
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	e006      	b.n	800396a <HAL_UART_IRQHandler+0x63a>
    return;
 800395c:	46c0      	nop			@ (mov r8, r8)
 800395e:	e004      	b.n	800396a <HAL_UART_IRQHandler+0x63a>
      return;
 8003960:	46c0      	nop			@ (mov r8, r8)
 8003962:	e002      	b.n	800396a <HAL_UART_IRQHandler+0x63a>
      return;
 8003964:	46c0      	nop			@ (mov r8, r8)
 8003966:	e000      	b.n	800396a <HAL_UART_IRQHandler+0x63a>
    return;
 8003968:	46c0      	nop			@ (mov r8, r8)
  }
}
 800396a:	46bd      	mov	sp, r7
 800396c:	b02a      	add	sp, #168	@ 0xa8
 800396e:	bdb0      	pop	{r4, r5, r7, pc}
 8003970:	fffffeff 	.word	0xfffffeff
 8003974:	fffffedf 	.word	0xfffffedf
 8003978:	effffffe 	.word	0xeffffffe

0800397c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003984:	46c0      	nop			@ (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	000a      	movs	r2, r1
 80039a6:	1cbb      	adds	r3, r7, #2
 80039a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b4:	b5b0      	push	{r4, r5, r7, lr}
 80039b6:	b090      	sub	sp, #64	@ 0x40
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039bc:	231a      	movs	r3, #26
 80039be:	2220      	movs	r2, #32
 80039c0:	189b      	adds	r3, r3, r2
 80039c2:	19db      	adds	r3, r3, r7
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	4313      	orrs	r3, r2
 80039de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4aaf      	ldr	r2, [pc, #700]	@ (8003ca4 <UART_SetConfig+0x2f0>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f2:	430b      	orrs	r3, r1
 80039f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4aaa      	ldr	r2, [pc, #680]	@ (8003ca8 <UART_SetConfig+0x2f4>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	0018      	movs	r0, r3
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	68d9      	ldr	r1, [r3, #12]
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4aa4      	ldr	r2, [pc, #656]	@ (8003cac <UART_SetConfig+0x2f8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a26:	4313      	orrs	r3, r2
 8003a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a9f      	ldr	r2, [pc, #636]	@ (8003cb0 <UART_SetConfig+0x2fc>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	220f      	movs	r2, #15
 8003a48:	4393      	bics	r3, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	0003      	movs	r3, r0
 8003a56:	430b      	orrs	r3, r1
 8003a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a95      	ldr	r2, [pc, #596]	@ (8003cb4 <UART_SetConfig+0x300>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d131      	bne.n	8003ac8 <UART_SetConfig+0x114>
 8003a64:	4b94      	ldr	r3, [pc, #592]	@ (8003cb8 <UART_SetConfig+0x304>)
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a68:	2203      	movs	r2, #3
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d01d      	beq.n	8003aac <UART_SetConfig+0xf8>
 8003a70:	d823      	bhi.n	8003aba <UART_SetConfig+0x106>
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d00c      	beq.n	8003a90 <UART_SetConfig+0xdc>
 8003a76:	d820      	bhi.n	8003aba <UART_SetConfig+0x106>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <UART_SetConfig+0xce>
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d00e      	beq.n	8003a9e <UART_SetConfig+0xea>
 8003a80:	e01b      	b.n	8003aba <UART_SetConfig+0x106>
 8003a82:	231b      	movs	r3, #27
 8003a84:	2220      	movs	r2, #32
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	19db      	adds	r3, r3, r7
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e0b4      	b.n	8003bfa <UART_SetConfig+0x246>
 8003a90:	231b      	movs	r3, #27
 8003a92:	2220      	movs	r2, #32
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	19db      	adds	r3, r3, r7
 8003a98:	2202      	movs	r2, #2
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e0ad      	b.n	8003bfa <UART_SetConfig+0x246>
 8003a9e:	231b      	movs	r3, #27
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	19db      	adds	r3, r3, r7
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e0a6      	b.n	8003bfa <UART_SetConfig+0x246>
 8003aac:	231b      	movs	r3, #27
 8003aae:	2220      	movs	r2, #32
 8003ab0:	189b      	adds	r3, r3, r2
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e09f      	b.n	8003bfa <UART_SetConfig+0x246>
 8003aba:	231b      	movs	r3, #27
 8003abc:	2220      	movs	r2, #32
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e098      	b.n	8003bfa <UART_SetConfig+0x246>
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7b      	ldr	r2, [pc, #492]	@ (8003cbc <UART_SetConfig+0x308>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d131      	bne.n	8003b36 <UART_SetConfig+0x182>
 8003ad2:	4b79      	ldr	r3, [pc, #484]	@ (8003cb8 <UART_SetConfig+0x304>)
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad6:	220c      	movs	r2, #12
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d01d      	beq.n	8003b1a <UART_SetConfig+0x166>
 8003ade:	d823      	bhi.n	8003b28 <UART_SetConfig+0x174>
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d00c      	beq.n	8003afe <UART_SetConfig+0x14a>
 8003ae4:	d820      	bhi.n	8003b28 <UART_SetConfig+0x174>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <UART_SetConfig+0x13c>
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d00e      	beq.n	8003b0c <UART_SetConfig+0x158>
 8003aee:	e01b      	b.n	8003b28 <UART_SetConfig+0x174>
 8003af0:	231b      	movs	r3, #27
 8003af2:	2220      	movs	r2, #32
 8003af4:	189b      	adds	r3, r3, r2
 8003af6:	19db      	adds	r3, r3, r7
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e07d      	b.n	8003bfa <UART_SetConfig+0x246>
 8003afe:	231b      	movs	r3, #27
 8003b00:	2220      	movs	r2, #32
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	19db      	adds	r3, r3, r7
 8003b06:	2202      	movs	r2, #2
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e076      	b.n	8003bfa <UART_SetConfig+0x246>
 8003b0c:	231b      	movs	r3, #27
 8003b0e:	2220      	movs	r2, #32
 8003b10:	189b      	adds	r3, r3, r2
 8003b12:	19db      	adds	r3, r3, r7
 8003b14:	2204      	movs	r2, #4
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	e06f      	b.n	8003bfa <UART_SetConfig+0x246>
 8003b1a:	231b      	movs	r3, #27
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	189b      	adds	r3, r3, r2
 8003b20:	19db      	adds	r3, r3, r7
 8003b22:	2208      	movs	r2, #8
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e068      	b.n	8003bfa <UART_SetConfig+0x246>
 8003b28:	231b      	movs	r3, #27
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	189b      	adds	r3, r3, r2
 8003b2e:	19db      	adds	r3, r3, r7
 8003b30:	2210      	movs	r2, #16
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e061      	b.n	8003bfa <UART_SetConfig+0x246>
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a61      	ldr	r2, [pc, #388]	@ (8003cc0 <UART_SetConfig+0x30c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d106      	bne.n	8003b4e <UART_SetConfig+0x19a>
 8003b40:	231b      	movs	r3, #27
 8003b42:	2220      	movs	r2, #32
 8003b44:	189b      	adds	r3, r3, r2
 8003b46:	19db      	adds	r3, r3, r7
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e055      	b.n	8003bfa <UART_SetConfig+0x246>
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5c      	ldr	r2, [pc, #368]	@ (8003cc4 <UART_SetConfig+0x310>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d106      	bne.n	8003b66 <UART_SetConfig+0x1b2>
 8003b58:	231b      	movs	r3, #27
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	189b      	adds	r3, r3, r2
 8003b5e:	19db      	adds	r3, r3, r7
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e049      	b.n	8003bfa <UART_SetConfig+0x246>
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a50      	ldr	r2, [pc, #320]	@ (8003cac <UART_SetConfig+0x2f8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d13e      	bne.n	8003bee <UART_SetConfig+0x23a>
 8003b70:	4b51      	ldr	r3, [pc, #324]	@ (8003cb8 <UART_SetConfig+0x304>)
 8003b72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b74:	23c0      	movs	r3, #192	@ 0xc0
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	4013      	ands	r3, r2
 8003b7a:	22c0      	movs	r2, #192	@ 0xc0
 8003b7c:	0112      	lsls	r2, r2, #4
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <UART_SetConfig+0x21e>
 8003b82:	22c0      	movs	r2, #192	@ 0xc0
 8003b84:	0112      	lsls	r2, r2, #4
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d82a      	bhi.n	8003be0 <UART_SetConfig+0x22c>
 8003b8a:	2280      	movs	r2, #128	@ 0x80
 8003b8c:	0112      	lsls	r2, r2, #4
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d011      	beq.n	8003bb6 <UART_SetConfig+0x202>
 8003b92:	2280      	movs	r2, #128	@ 0x80
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d822      	bhi.n	8003be0 <UART_SetConfig+0x22c>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <UART_SetConfig+0x1f4>
 8003b9e:	2280      	movs	r2, #128	@ 0x80
 8003ba0:	00d2      	lsls	r2, r2, #3
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00e      	beq.n	8003bc4 <UART_SetConfig+0x210>
 8003ba6:	e01b      	b.n	8003be0 <UART_SetConfig+0x22c>
 8003ba8:	231b      	movs	r3, #27
 8003baa:	2220      	movs	r2, #32
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e021      	b.n	8003bfa <UART_SetConfig+0x246>
 8003bb6:	231b      	movs	r3, #27
 8003bb8:	2220      	movs	r2, #32
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	e01a      	b.n	8003bfa <UART_SetConfig+0x246>
 8003bc4:	231b      	movs	r3, #27
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	189b      	adds	r3, r3, r2
 8003bca:	19db      	adds	r3, r3, r7
 8003bcc:	2204      	movs	r2, #4
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	e013      	b.n	8003bfa <UART_SetConfig+0x246>
 8003bd2:	231b      	movs	r3, #27
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	2208      	movs	r2, #8
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e00c      	b.n	8003bfa <UART_SetConfig+0x246>
 8003be0:	231b      	movs	r3, #27
 8003be2:	2220      	movs	r2, #32
 8003be4:	189b      	adds	r3, r3, r2
 8003be6:	19db      	adds	r3, r3, r7
 8003be8:	2210      	movs	r2, #16
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e005      	b.n	8003bfa <UART_SetConfig+0x246>
 8003bee:	231b      	movs	r3, #27
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	19db      	adds	r3, r3, r7
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8003cac <UART_SetConfig+0x2f8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d000      	beq.n	8003c06 <UART_SetConfig+0x252>
 8003c04:	e0a9      	b.n	8003d5a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c06:	231b      	movs	r3, #27
 8003c08:	2220      	movs	r2, #32
 8003c0a:	189b      	adds	r3, r3, r2
 8003c0c:	19db      	adds	r3, r3, r7
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d015      	beq.n	8003c40 <UART_SetConfig+0x28c>
 8003c14:	dc18      	bgt.n	8003c48 <UART_SetConfig+0x294>
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d00d      	beq.n	8003c36 <UART_SetConfig+0x282>
 8003c1a:	dc15      	bgt.n	8003c48 <UART_SetConfig+0x294>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <UART_SetConfig+0x272>
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d005      	beq.n	8003c30 <UART_SetConfig+0x27c>
 8003c24:	e010      	b.n	8003c48 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c26:	f7fe ffc3 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c2e:	e014      	b.n	8003c5a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c30:	4b25      	ldr	r3, [pc, #148]	@ (8003cc8 <UART_SetConfig+0x314>)
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c34:	e011      	b.n	8003c5a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c36:	f7fe ff2f 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c3e:	e00c      	b.n	8003c5a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c46:	e008      	b.n	8003c5a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003c4c:	231a      	movs	r3, #26
 8003c4e:	2220      	movs	r2, #32
 8003c50:	189b      	adds	r3, r3, r2
 8003c52:	19db      	adds	r3, r3, r7
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
        break;
 8003c58:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d100      	bne.n	8003c62 <UART_SetConfig+0x2ae>
 8003c60:	e14b      	b.n	8003efa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c66:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <UART_SetConfig+0x318>)
 8003c68:	0052      	lsls	r2, r2, #1
 8003c6a:	5ad3      	ldrh	r3, [r2, r3]
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003c70:	f7fc fa50 	bl	8000114 <__udivsi3>
 8003c74:	0003      	movs	r3, r0
 8003c76:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	189b      	adds	r3, r3, r2
 8003c82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d305      	bcc.n	8003c94 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d91d      	bls.n	8003cd0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003c94:	231a      	movs	r3, #26
 8003c96:	2220      	movs	r2, #32
 8003c98:	189b      	adds	r3, r3, r2
 8003c9a:	19db      	adds	r3, r3, r7
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e12b      	b.n	8003efa <UART_SetConfig+0x546>
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	cfff69f3 	.word	0xcfff69f3
 8003ca8:	ffffcfff 	.word	0xffffcfff
 8003cac:	40008000 	.word	0x40008000
 8003cb0:	11fff4ff 	.word	0x11fff4ff
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40004400 	.word	0x40004400
 8003cc0:	40004800 	.word	0x40004800
 8003cc4:	40004c00 	.word	0x40004c00
 8003cc8:	00f42400 	.word	0x00f42400
 8003ccc:	08005ffc 	.word	0x08005ffc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cdc:	4b92      	ldr	r3, [pc, #584]	@ (8003f28 <UART_SetConfig+0x574>)
 8003cde:	0052      	lsls	r2, r2, #1
 8003ce0:	5ad3      	ldrh	r3, [r2, r3]
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	69b8      	ldr	r0, [r7, #24]
 8003cee:	69f9      	ldr	r1, [r7, #28]
 8003cf0:	f7fc fb86 	bl	8000400 <__aeabi_uldivmod>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	000b      	movs	r3, r1
 8003cf8:	0e11      	lsrs	r1, r2, #24
 8003cfa:	021d      	lsls	r5, r3, #8
 8003cfc:	430d      	orrs	r5, r1
 8003cfe:	0214      	lsls	r4, r2, #8
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68b8      	ldr	r0, [r7, #8]
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	1900      	adds	r0, r0, r4
 8003d12:	4169      	adcs	r1, r5
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f7fc fb6d 	bl	8000400 <__aeabi_uldivmod>
 8003d26:	0002      	movs	r2, r0
 8003d28:	000b      	movs	r3, r1
 8003d2a:	0013      	movs	r3, r2
 8003d2c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d30:	23c0      	movs	r3, #192	@ 0xc0
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d309      	bcc.n	8003d4c <UART_SetConfig+0x398>
 8003d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d3a:	2380      	movs	r3, #128	@ 0x80
 8003d3c:	035b      	lsls	r3, r3, #13
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d204      	bcs.n	8003d4c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	e0d6      	b.n	8003efa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003d4c:	231a      	movs	r3, #26
 8003d4e:	2220      	movs	r2, #32
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	19db      	adds	r3, r3, r7
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e0cf      	b.n	8003efa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	2380      	movs	r3, #128	@ 0x80
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d000      	beq.n	8003d68 <UART_SetConfig+0x3b4>
 8003d66:	e070      	b.n	8003e4a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003d68:	231b      	movs	r3, #27
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	189b      	adds	r3, r3, r2
 8003d6e:	19db      	adds	r3, r3, r7
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d015      	beq.n	8003da2 <UART_SetConfig+0x3ee>
 8003d76:	dc18      	bgt.n	8003daa <UART_SetConfig+0x3f6>
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d00d      	beq.n	8003d98 <UART_SetConfig+0x3e4>
 8003d7c:	dc15      	bgt.n	8003daa <UART_SetConfig+0x3f6>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <UART_SetConfig+0x3d4>
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d005      	beq.n	8003d92 <UART_SetConfig+0x3de>
 8003d86:	e010      	b.n	8003daa <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d88:	f7fe ff12 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d90:	e014      	b.n	8003dbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d92:	4b66      	ldr	r3, [pc, #408]	@ (8003f2c <UART_SetConfig+0x578>)
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d96:	e011      	b.n	8003dbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d98:	f7fe fe7e 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003da0:	e00c      	b.n	8003dbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da2:	2380      	movs	r3, #128	@ 0x80
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003da8:	e008      	b.n	8003dbc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003dae:	231a      	movs	r3, #26
 8003db0:	2220      	movs	r2, #32
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	19db      	adds	r3, r3, r7
 8003db6:	2201      	movs	r2, #1
 8003db8:	701a      	strb	r2, [r3, #0]
        break;
 8003dba:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d100      	bne.n	8003dc4 <UART_SetConfig+0x410>
 8003dc2:	e09a      	b.n	8003efa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dc8:	4b57      	ldr	r3, [pc, #348]	@ (8003f28 <UART_SetConfig+0x574>)
 8003dca:	0052      	lsls	r2, r2, #1
 8003dcc:	5ad3      	ldrh	r3, [r2, r3]
 8003dce:	0019      	movs	r1, r3
 8003dd0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003dd2:	f7fc f99f 	bl	8000114 <__udivsi3>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	005a      	lsls	r2, r3, #1
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	18d2      	adds	r2, r2, r3
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	0019      	movs	r1, r3
 8003de8:	0010      	movs	r0, r2
 8003dea:	f7fc f993 	bl	8000114 <__udivsi3>
 8003dee:	0003      	movs	r3, r0
 8003df0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	2b0f      	cmp	r3, #15
 8003df6:	d921      	bls.n	8003e3c <UART_SetConfig+0x488>
 8003df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dfa:	2380      	movs	r3, #128	@ 0x80
 8003dfc:	025b      	lsls	r3, r3, #9
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d21c      	bcs.n	8003e3c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	200e      	movs	r0, #14
 8003e08:	2420      	movs	r4, #32
 8003e0a:	1903      	adds	r3, r0, r4
 8003e0c:	19db      	adds	r3, r3, r7
 8003e0e:	210f      	movs	r1, #15
 8003e10:	438a      	bics	r2, r1
 8003e12:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2207      	movs	r2, #7
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	b299      	uxth	r1, r3
 8003e20:	1903      	adds	r3, r0, r4
 8003e22:	19db      	adds	r3, r3, r7
 8003e24:	1902      	adds	r2, r0, r4
 8003e26:	19d2      	adds	r2, r2, r7
 8003e28:	8812      	ldrh	r2, [r2, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	1902      	adds	r2, r0, r4
 8003e34:	19d2      	adds	r2, r2, r7
 8003e36:	8812      	ldrh	r2, [r2, #0]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	e05e      	b.n	8003efa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003e3c:	231a      	movs	r3, #26
 8003e3e:	2220      	movs	r2, #32
 8003e40:	189b      	adds	r3, r3, r2
 8003e42:	19db      	adds	r3, r3, r7
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e057      	b.n	8003efa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e4a:	231b      	movs	r3, #27
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	19db      	adds	r3, r3, r7
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d015      	beq.n	8003e84 <UART_SetConfig+0x4d0>
 8003e58:	dc18      	bgt.n	8003e8c <UART_SetConfig+0x4d8>
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d00d      	beq.n	8003e7a <UART_SetConfig+0x4c6>
 8003e5e:	dc15      	bgt.n	8003e8c <UART_SetConfig+0x4d8>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <UART_SetConfig+0x4b6>
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d005      	beq.n	8003e74 <UART_SetConfig+0x4c0>
 8003e68:	e010      	b.n	8003e8c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e6a:	f7fe fea1 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e72:	e014      	b.n	8003e9e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e74:	4b2d      	ldr	r3, [pc, #180]	@ (8003f2c <UART_SetConfig+0x578>)
 8003e76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e78:	e011      	b.n	8003e9e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7a:	f7fe fe0d 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e82:	e00c      	b.n	8003e9e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e84:	2380      	movs	r3, #128	@ 0x80
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e8a:	e008      	b.n	8003e9e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003e90:	231a      	movs	r3, #26
 8003e92:	2220      	movs	r2, #32
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	19db      	adds	r3, r3, r7
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
        break;
 8003e9c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d02a      	beq.n	8003efa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f28 <UART_SetConfig+0x574>)
 8003eaa:	0052      	lsls	r2, r2, #1
 8003eac:	5ad3      	ldrh	r3, [r2, r3]
 8003eae:	0019      	movs	r1, r3
 8003eb0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003eb2:	f7fc f92f 	bl	8000114 <__udivsi3>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	001a      	movs	r2, r3
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	18d2      	adds	r2, r2, r3
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	0010      	movs	r0, r2
 8003eca:	f7fc f923 	bl	8000114 <__udivsi3>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	2b0f      	cmp	r3, #15
 8003ed6:	d90a      	bls.n	8003eee <UART_SetConfig+0x53a>
 8003ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eda:	2380      	movs	r3, #128	@ 0x80
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d205      	bcs.n	8003eee <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60da      	str	r2, [r3, #12]
 8003eec:	e005      	b.n	8003efa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003eee:	231a      	movs	r3, #26
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	19db      	adds	r3, r3, r7
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	226a      	movs	r2, #106	@ 0x6a
 8003efe:	2101      	movs	r1, #1
 8003f00:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	2268      	movs	r2, #104	@ 0x68
 8003f06:	2101      	movs	r1, #1
 8003f08:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	2200      	movs	r2, #0
 8003f14:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f16:	231a      	movs	r3, #26
 8003f18:	2220      	movs	r2, #32
 8003f1a:	189b      	adds	r3, r3, r2
 8003f1c:	19db      	adds	r3, r3, r7
 8003f1e:	781b      	ldrb	r3, [r3, #0]
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b010      	add	sp, #64	@ 0x40
 8003f26:	bdb0      	pop	{r4, r5, r7, pc}
 8003f28:	08005ffc 	.word	0x08005ffc
 8003f2c:	00f42400 	.word	0x00f42400

08003f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d00b      	beq.n	8003f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a4a      	ldr	r2, [pc, #296]	@ (8004074 <UART_AdvFeatureConfig+0x144>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4013      	ands	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a43      	ldr	r2, [pc, #268]	@ (8004078 <UART_AdvFeatureConfig+0x148>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	2202      	movs	r2, #2
 8003f82:	4013      	ands	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4a3b      	ldr	r2, [pc, #236]	@ (800407c <UART_AdvFeatureConfig+0x14c>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4a34      	ldr	r2, [pc, #208]	@ (8004080 <UART_AdvFeatureConfig+0x150>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004084 <UART_AdvFeatureConfig+0x154>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d00b      	beq.n	8004004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4a25      	ldr	r2, [pc, #148]	@ (8004088 <UART_AdvFeatureConfig+0x158>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	2240      	movs	r2, #64	@ 0x40
 800400a:	4013      	ands	r3, r2
 800400c:	d01d      	beq.n	800404a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a1d      	ldr	r2, [pc, #116]	@ (800408c <UART_AdvFeatureConfig+0x15c>)
 8004016:	4013      	ands	r3, r2
 8004018:	0019      	movs	r1, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800402a:	2380      	movs	r3, #128	@ 0x80
 800402c:	035b      	lsls	r3, r3, #13
 800402e:	429a      	cmp	r2, r3
 8004030:	d10b      	bne.n	800404a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a15      	ldr	r2, [pc, #84]	@ (8004090 <UART_AdvFeatureConfig+0x160>)
 800403a:	4013      	ands	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	2280      	movs	r2, #128	@ 0x80
 8004050:	4013      	ands	r3, r2
 8004052:	d00b      	beq.n	800406c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4a0e      	ldr	r2, [pc, #56]	@ (8004094 <UART_AdvFeatureConfig+0x164>)
 800405c:	4013      	ands	r3, r2
 800405e:	0019      	movs	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }
}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	b002      	add	sp, #8
 8004072:	bd80      	pop	{r7, pc}
 8004074:	ffff7fff 	.word	0xffff7fff
 8004078:	fffdffff 	.word	0xfffdffff
 800407c:	fffeffff 	.word	0xfffeffff
 8004080:	fffbffff 	.word	0xfffbffff
 8004084:	ffffefff 	.word	0xffffefff
 8004088:	ffffdfff 	.word	0xffffdfff
 800408c:	ffefffff 	.word	0xffefffff
 8004090:	ff9fffff 	.word	0xff9fffff
 8004094:	fff7ffff 	.word	0xfff7ffff

08004098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b092      	sub	sp, #72	@ 0x48
 800409c:	af02      	add	r7, sp, #8
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2290      	movs	r2, #144	@ 0x90
 80040a4:	2100      	movs	r1, #0
 80040a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a8:	f7fc fb3c 	bl	8000724 <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2208      	movs	r2, #8
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d12d      	bne.n	800411a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c0:	2280      	movs	r2, #128	@ 0x80
 80040c2:	0391      	lsls	r1, r2, #14
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4a47      	ldr	r2, [pc, #284]	@ (80041e4 <UART_CheckIdleState+0x14c>)
 80040c8:	9200      	str	r2, [sp, #0]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f000 f88e 	bl	80041ec <UART_WaitOnFlagUntilTimeout>
 80040d0:	1e03      	subs	r3, r0, #0
 80040d2:	d022      	beq.n	800411a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d4:	f3ef 8310 	mrs	r3, PRIMASK
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040de:	2301      	movs	r3, #1
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	f383 8810 	msr	PRIMASK, r3
}
 80040e8:	46c0      	nop			@ (mov r8, r8)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2180      	movs	r1, #128	@ 0x80
 80040f6:	438a      	bics	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004100:	f383 8810 	msr	PRIMASK, r3
}
 8004104:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2288      	movs	r2, #136	@ 0x88
 800410a:	2120      	movs	r1, #32
 800410c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2284      	movs	r2, #132	@ 0x84
 8004112:	2100      	movs	r1, #0
 8004114:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e060      	b.n	80041dc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2204      	movs	r2, #4
 8004122:	4013      	ands	r3, r2
 8004124:	2b04      	cmp	r3, #4
 8004126:	d146      	bne.n	80041b6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412a:	2280      	movs	r2, #128	@ 0x80
 800412c:	03d1      	lsls	r1, r2, #15
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4a2c      	ldr	r2, [pc, #176]	@ (80041e4 <UART_CheckIdleState+0x14c>)
 8004132:	9200      	str	r2, [sp, #0]
 8004134:	2200      	movs	r2, #0
 8004136:	f000 f859 	bl	80041ec <UART_WaitOnFlagUntilTimeout>
 800413a:	1e03      	subs	r3, r0, #0
 800413c:	d03b      	beq.n	80041b6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413e:	f3ef 8310 	mrs	r3, PRIMASK
 8004142:	60fb      	str	r3, [r7, #12]
  return(result);
 8004144:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004146:	637b      	str	r3, [r7, #52]	@ 0x34
 8004148:	2301      	movs	r3, #1
 800414a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f383 8810 	msr	PRIMASK, r3
}
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4922      	ldr	r1, [pc, #136]	@ (80041e8 <UART_CheckIdleState+0x150>)
 8004160:	400a      	ands	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004166:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f383 8810 	msr	PRIMASK, r3
}
 800416e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004170:	f3ef 8310 	mrs	r3, PRIMASK
 8004174:	61bb      	str	r3, [r7, #24]
  return(result);
 8004176:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004178:	633b      	str	r3, [r7, #48]	@ 0x30
 800417a:	2301      	movs	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	46c0      	nop			@ (mov r8, r8)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2101      	movs	r1, #1
 8004192:	438a      	bics	r2, r1
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f383 8810 	msr	PRIMASK, r3
}
 80041a0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	228c      	movs	r2, #140	@ 0x8c
 80041a6:	2120      	movs	r1, #32
 80041a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2284      	movs	r2, #132	@ 0x84
 80041ae:	2100      	movs	r1, #0
 80041b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e012      	b.n	80041dc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2288      	movs	r2, #136	@ 0x88
 80041ba:	2120      	movs	r1, #32
 80041bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	228c      	movs	r2, #140	@ 0x8c
 80041c2:	2120      	movs	r1, #32
 80041c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2284      	movs	r2, #132	@ 0x84
 80041d6:	2100      	movs	r1, #0
 80041d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b010      	add	sp, #64	@ 0x40
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	01ffffff 	.word	0x01ffffff
 80041e8:	fffffedf 	.word	0xfffffedf

080041ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	1dfb      	adds	r3, r7, #7
 80041fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fc:	e051      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	3301      	adds	r3, #1
 8004202:	d04e      	beq.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004204:	f7fc fa8e 	bl	8000724 <HAL_GetTick>
 8004208:	0002      	movs	r2, r0
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e051      	b.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2204      	movs	r2, #4
 8004226:	4013      	ands	r3, r2
 8004228:	d03b      	beq.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b80      	cmp	r3, #128	@ 0x80
 800422e:	d038      	beq.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b40      	cmp	r3, #64	@ 0x40
 8004234:	d035      	beq.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	2208      	movs	r2, #8
 800423e:	4013      	ands	r3, r2
 8004240:	2b08      	cmp	r3, #8
 8004242:	d111      	bne.n	8004268 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2208      	movs	r2, #8
 800424a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	0018      	movs	r0, r3
 8004250:	f000 f83c 	bl	80042cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2290      	movs	r2, #144	@ 0x90
 8004258:	2108      	movs	r1, #8
 800425a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2284      	movs	r2, #132	@ 0x84
 8004260:	2100      	movs	r1, #0
 8004262:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e02c      	b.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	401a      	ands	r2, r3
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	429a      	cmp	r2, r3
 800427a:	d112      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2280      	movs	r2, #128	@ 0x80
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	0018      	movs	r0, r3
 800428a:	f000 f81f 	bl	80042cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2290      	movs	r2, #144	@ 0x90
 8004292:	2120      	movs	r1, #32
 8004294:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2284      	movs	r2, #132	@ 0x84
 800429a:	2100      	movs	r1, #0
 800429c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e00f      	b.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	4013      	ands	r3, r2
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	425a      	negs	r2, r3
 80042b2:	4153      	adcs	r3, r2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	001a      	movs	r2, r3
 80042b8:	1dfb      	adds	r3, r7, #7
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d09e      	beq.n	80041fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	0018      	movs	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b004      	add	sp, #16
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08e      	sub	sp, #56	@ 0x38
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d4:	f3ef 8310 	mrs	r3, PRIMASK
 80042d8:	617b      	str	r3, [r7, #20]
  return(result);
 80042da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80042de:	2301      	movs	r3, #1
 80042e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	46c0      	nop			@ (mov r8, r8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4926      	ldr	r1, [pc, #152]	@ (8004390 <UART_EndRxTransfer+0xc4>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004306:	f3ef 8310 	mrs	r3, PRIMASK
 800430a:	623b      	str	r3, [r7, #32]
  return(result);
 800430c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800430e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004310:	2301      	movs	r3, #1
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	f383 8810 	msr	PRIMASK, r3
}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	491b      	ldr	r1, [pc, #108]	@ (8004394 <UART_EndRxTransfer+0xc8>)
 8004328:	400a      	ands	r2, r1
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	f383 8810 	msr	PRIMASK, r3
}
 8004336:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d118      	bne.n	8004372 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004340:	f3ef 8310 	mrs	r3, PRIMASK
 8004344:	60bb      	str	r3, [r7, #8]
  return(result);
 8004346:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800434a:	2301      	movs	r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			@ (mov r8, r8)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2110      	movs	r1, #16
 8004362:	438a      	bics	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f383 8810 	msr	PRIMASK, r3
}
 8004370:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	228c      	movs	r2, #140	@ 0x8c
 8004376:	2120      	movs	r1, #32
 8004378:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b00e      	add	sp, #56	@ 0x38
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	fffffedf 	.word	0xfffffedf
 8004394:	effffffe 	.word	0xeffffffe

08004398 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	225e      	movs	r2, #94	@ 0x5e
 80043aa:	2100      	movs	r1, #0
 80043ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2256      	movs	r2, #86	@ 0x56
 80043b2:	2100      	movs	r1, #0
 80043b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f7ff fae7 	bl	800398c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b004      	add	sp, #16
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ce:	f3ef 8310 	mrs	r3, PRIMASK
 80043d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80043d4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	2301      	movs	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f383 8810 	msr	PRIMASK, r3
}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2140      	movs	r1, #64	@ 0x40
 80043f0:	438a      	bics	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f383 8810 	msr	PRIMASK, r3
}
 80043fe:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2288      	movs	r2, #136	@ 0x88
 8004404:	2120      	movs	r1, #32
 8004406:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0018      	movs	r0, r3
 8004412:	f7ff fab3 	bl	800397c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	46bd      	mov	sp, r7
 800441a:	b006      	add	sp, #24
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b002      	add	sp, #8
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004436:	46c0      	nop			@ (mov r8, r8)
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b002      	add	sp, #8
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2284      	movs	r2, #132	@ 0x84
 800445c:	5c9b      	ldrb	r3, [r3, r2]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UARTEx_DisableFifoMode+0x16>
 8004462:	2302      	movs	r3, #2
 8004464:	e027      	b.n	80044b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2284      	movs	r2, #132	@ 0x84
 800446a:	2101      	movs	r1, #1
 800446c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2288      	movs	r2, #136	@ 0x88
 8004472:	2124      	movs	r1, #36	@ 0x24
 8004474:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2101      	movs	r1, #1
 800448a:	438a      	bics	r2, r1
 800448c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a0b      	ldr	r2, [pc, #44]	@ (80044c0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004492:	4013      	ands	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2288      	movs	r2, #136	@ 0x88
 80044a8:	2120      	movs	r1, #32
 80044aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2284      	movs	r2, #132	@ 0x84
 80044b0:	2100      	movs	r1, #0
 80044b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b004      	add	sp, #16
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	dfffffff 	.word	0xdfffffff

080044c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2284      	movs	r2, #132	@ 0x84
 80044d2:	5c9b      	ldrb	r3, [r3, r2]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e02e      	b.n	800453a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2284      	movs	r2, #132	@ 0x84
 80044e0:	2101      	movs	r1, #1
 80044e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2288      	movs	r2, #136	@ 0x88
 80044e8:	2124      	movs	r1, #36	@ 0x24
 80044ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2101      	movs	r1, #1
 8004500:	438a      	bics	r2, r1
 8004502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	08d9      	lsrs	r1, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	0018      	movs	r0, r3
 800451c:	f000 f854 	bl	80045c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2288      	movs	r2, #136	@ 0x88
 800452c:	2120      	movs	r1, #32
 800452e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2284      	movs	r2, #132	@ 0x84
 8004534:	2100      	movs	r1, #0
 8004536:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b004      	add	sp, #16
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2284      	movs	r2, #132	@ 0x84
 8004552:	5c9b      	ldrb	r3, [r3, r2]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004558:	2302      	movs	r3, #2
 800455a:	e02f      	b.n	80045bc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2284      	movs	r2, #132	@ 0x84
 8004560:	2101      	movs	r1, #1
 8004562:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2288      	movs	r2, #136	@ 0x88
 8004568:	2124      	movs	r1, #36	@ 0x24
 800456a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2101      	movs	r1, #1
 8004580:	438a      	bics	r2, r1
 8004582:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	4a0e      	ldr	r2, [pc, #56]	@ (80045c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800458c:	4013      	ands	r3, r2
 800458e:	0019      	movs	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0018      	movs	r0, r3
 800459e:	f000 f813 	bl	80045c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2288      	movs	r2, #136	@ 0x88
 80045ae:	2120      	movs	r1, #32
 80045b0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2284      	movs	r2, #132	@ 0x84
 80045b6:	2100      	movs	r1, #0
 80045b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b004      	add	sp, #16
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	f1ffffff 	.word	0xf1ffffff

080045c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d108      	bne.n	80045ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	226a      	movs	r2, #106	@ 0x6a
 80045dc:	2101      	movs	r1, #1
 80045de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2268      	movs	r2, #104	@ 0x68
 80045e4:	2101      	movs	r1, #1
 80045e6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045e8:	e043      	b.n	8004672 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045ea:	260f      	movs	r6, #15
 80045ec:	19bb      	adds	r3, r7, r6
 80045ee:	2208      	movs	r2, #8
 80045f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045f2:	200e      	movs	r0, #14
 80045f4:	183b      	adds	r3, r7, r0
 80045f6:	2208      	movs	r2, #8
 80045f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	0e5b      	lsrs	r3, r3, #25
 8004602:	b2da      	uxtb	r2, r3
 8004604:	240d      	movs	r4, #13
 8004606:	193b      	adds	r3, r7, r4
 8004608:	2107      	movs	r1, #7
 800460a:	400a      	ands	r2, r1
 800460c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	0f5b      	lsrs	r3, r3, #29
 8004616:	b2da      	uxtb	r2, r3
 8004618:	250c      	movs	r5, #12
 800461a:	197b      	adds	r3, r7, r5
 800461c:	2107      	movs	r1, #7
 800461e:	400a      	ands	r2, r1
 8004620:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004622:	183b      	adds	r3, r7, r0
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	197a      	adds	r2, r7, r5
 8004628:	7812      	ldrb	r2, [r2, #0]
 800462a:	4914      	ldr	r1, [pc, #80]	@ (800467c <UARTEx_SetNbDataToProcess+0xb4>)
 800462c:	5c8a      	ldrb	r2, [r1, r2]
 800462e:	435a      	muls	r2, r3
 8004630:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004632:	197b      	adds	r3, r7, r5
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <UARTEx_SetNbDataToProcess+0xb8>)
 8004638:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800463a:	0019      	movs	r1, r3
 800463c:	f7fb fdf4 	bl	8000228 <__divsi3>
 8004640:	0003      	movs	r3, r0
 8004642:	b299      	uxth	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	226a      	movs	r2, #106	@ 0x6a
 8004648:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800464a:	19bb      	adds	r3, r7, r6
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	193a      	adds	r2, r7, r4
 8004650:	7812      	ldrb	r2, [r2, #0]
 8004652:	490a      	ldr	r1, [pc, #40]	@ (800467c <UARTEx_SetNbDataToProcess+0xb4>)
 8004654:	5c8a      	ldrb	r2, [r1, r2]
 8004656:	435a      	muls	r2, r3
 8004658:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800465a:	193b      	adds	r3, r7, r4
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	4a08      	ldr	r2, [pc, #32]	@ (8004680 <UARTEx_SetNbDataToProcess+0xb8>)
 8004660:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004662:	0019      	movs	r1, r3
 8004664:	f7fb fde0 	bl	8000228 <__divsi3>
 8004668:	0003      	movs	r3, r0
 800466a:	b299      	uxth	r1, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2268      	movs	r2, #104	@ 0x68
 8004670:	5299      	strh	r1, [r3, r2]
}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b005      	add	sp, #20
 8004678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	08006014 	.word	0x08006014
 8004680:	0800601c 	.word	0x0800601c

08004684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800468a:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <MX_DMA_Init+0x38>)
 800468c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800468e:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <MX_DMA_Init+0x38>)
 8004690:	2101      	movs	r1, #1
 8004692:	430a      	orrs	r2, r1
 8004694:	639a      	str	r2, [r3, #56]	@ 0x38
 8004696:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <MX_DMA_Init+0x38>)
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	2201      	movs	r2, #1
 800469c:	4013      	ands	r3, r2
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80046a2:	2200      	movs	r2, #0
 80046a4:	2100      	movs	r1, #0
 80046a6:	2009      	movs	r0, #9
 80046a8:	f7fc f938 	bl	800091c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80046ac:	2009      	movs	r0, #9
 80046ae:	f7fc f94a 	bl	8000946 <HAL_NVIC_EnableIRQ>

}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b002      	add	sp, #8
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	40021000 	.word	0x40021000

080046c0 <uartSend>:
//---------------------------IMPLICIT FUNCTIONS---------------------------
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
espat_state_t uartSend(espat_uartInstance_t *uart, char *data, uint32_t size) {
 80046c0:	b5b0      	push	{r4, r5, r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef state = HAL_OK;
 80046cc:	2117      	movs	r1, #23
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]

#if DMA_MODE
		state = HAL_UART_Transmit_DMA(uart->uart, (uint8_t*) data, size);
#else
	state = HAL_UART_Transmit(uart->uart, (uint8_t*) data,
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	000d      	movs	r5, r1
 80046e2:	187c      	adds	r4, r7, r1
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	f7fe fd7f 	bl	80031e8 <HAL_UART_Transmit>
 80046ea:	0003      	movs	r3, r0
 80046ec:	7023      	strb	r3, [r4, #0]
			size, uart->sendTimeout);
#endif

	if (state == HAL_OK)
 80046ee:	197b      	adds	r3, r7, r5
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <uartSend+0x3a>
		return ESPAT_STATE_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e00e      	b.n	8004718 <uartSend+0x58>
	else if (state == HAL_TIMEOUT)
 80046fa:	2317      	movs	r3, #23
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d101      	bne.n	8004708 <uartSend+0x48>
		return ESPAT_STATE_TIMEOUT;
 8004704:	2302      	movs	r3, #2
 8004706:	e007      	b.n	8004718 <uartSend+0x58>
	else if(state == HAL_BUSY)
 8004708:	2317      	movs	r3, #23
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d101      	bne.n	8004716 <uartSend+0x56>
		return ESPAT_STATE_BUSY;
 8004712:	2303      	movs	r3, #3
 8004714:	e000      	b.n	8004718 <uartSend+0x58>
	else
		return ESPAT_STATE_ERR;
 8004716:	2301      	movs	r3, #1
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b006      	add	sp, #24
 800471e:	bdb0      	pop	{r4, r5, r7, pc}

08004720 <espAt_init>:
 * @param: timout for receive
 *
 * @retval: always ESPATHID_OK
 */
espat_state_t espAt_init(espat_radio_t *radio, UART_HandleTypeDef *uart,
		uint32_t txTimeout, uint32_t rxTimeout) { //port
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]

	radio->espUart.uart = uart;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	601a      	str	r2, [r3, #0]
	radio->espUart.sendTimeout = txTimeout;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	605a      	str	r2, [r3, #4]
	radio->espUart.receiveTimeout = rxTimeout;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	609a      	str	r2, [r3, #8]
	return ESPAT_STATE_OK;
 8004740:	2300      	movs	r3, #0

}
 8004742:	0018      	movs	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	b004      	add	sp, #16
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <espAt_sendCommand>:
 *
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendCommand(espat_radio_t *radio, char *command) {
 800474c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474e:	46c6      	mov	lr, r8
 8004750:	b500      	push	{lr}
 8004752:	b08c      	sub	sp, #48	@ 0x30
 8004754:	af00      	add	r7, sp, #0
 8004756:	61f8      	str	r0, [r7, #28]
 8004758:	61b9      	str	r1, [r7, #24]
 800475a:	466b      	mov	r3, sp
 800475c:	4698      	mov	r8, r3
	//check if command and string are valid
	if (command == NULL)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <espAt_sendCommand+0x1c>
		return ESPAT_STATE_ERR;
 8004764:	2301      	movs	r3, #1
 8004766:	e093      	b.n	8004890 <espAt_sendCommand+0x144>

	uint16_t prefixLength = strlen(AT_PREFIX);
 8004768:	2316      	movs	r3, #22
 800476a:	2618      	movs	r6, #24
 800476c:	199b      	adds	r3, r3, r6
 800476e:	19db      	adds	r3, r3, r7
 8004770:	2203      	movs	r2, #3
 8004772:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	0018      	movs	r0, r3
 8004778:	f7fb fcc4 	bl	8000104 <strlen>
 800477c:	0002      	movs	r2, r0
 800477e:	2114      	movs	r1, #20
 8004780:	0030      	movs	r0, r6
 8004782:	180b      	adds	r3, r1, r0
 8004784:	19db      	adds	r3, r3, r7
 8004786:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8004788:	2212      	movs	r2, #18
 800478a:	0016      	movs	r6, r2
 800478c:	1813      	adds	r3, r2, r0
 800478e:	19db      	adds	r3, r3, r7
 8004790:	2202      	movs	r2, #2
 8004792:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + endingLength;
 8004794:	2316      	movs	r3, #22
 8004796:	181b      	adds	r3, r3, r0
 8004798:	19da      	adds	r2, r3, r7
 800479a:	1809      	adds	r1, r1, r0
 800479c:	19cb      	adds	r3, r1, r7
 800479e:	8812      	ldrh	r2, [r2, #0]
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	18d3      	adds	r3, r2, r3
 80047a4:	b299      	uxth	r1, r3
 80047a6:	2010      	movs	r0, #16
 80047a8:	2318      	movs	r3, #24
 80047aa:	18c2      	adds	r2, r0, r3
 80047ac:	19d3      	adds	r3, r2, r7
 80047ae:	0032      	movs	r2, r6
 80047b0:	2618      	movs	r6, #24
 80047b2:	1992      	adds	r2, r2, r6
 80047b4:	19d2      	adds	r2, r2, r7
 80047b6:	8812      	ldrh	r2, [r2, #0]
 80047b8:	188a      	adds	r2, r1, r2
 80047ba:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 80047bc:	1983      	adds	r3, r0, r6
 80047be:	19db      	adds	r3, r3, r7
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	001a      	movs	r2, r3
 80047c4:	3a01      	subs	r2, #1
 80047c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	2200      	movs	r2, #0
 80047cc:	60fa      	str	r2, [r7, #12]
 80047ce:	68b8      	ldr	r0, [r7, #8]
 80047d0:	68f9      	ldr	r1, [r7, #12]
 80047d2:	0006      	movs	r6, r0
 80047d4:	0f72      	lsrs	r2, r6, #29
 80047d6:	000e      	movs	r6, r1
 80047d8:	00f6      	lsls	r6, r6, #3
 80047da:	617e      	str	r6, [r7, #20]
 80047dc:	697e      	ldr	r6, [r7, #20]
 80047de:	4316      	orrs	r6, r2
 80047e0:	617e      	str	r6, [r7, #20]
 80047e2:	0006      	movs	r6, r0
 80047e4:	00f6      	lsls	r6, r6, #3
 80047e6:	613e      	str	r6, [r7, #16]
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	2200      	movs	r2, #0
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	6838      	ldr	r0, [r7, #0]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	0006      	movs	r6, r0
 80047f4:	0f72      	lsrs	r2, r6, #29
 80047f6:	000e      	movs	r6, r1
 80047f8:	00f5      	lsls	r5, r6, #3
 80047fa:	4315      	orrs	r5, r2
 80047fc:	0006      	movs	r6, r0
 80047fe:	00f4      	lsls	r4, r6, #3
 8004800:	3307      	adds	r3, #7
 8004802:	08db      	lsrs	r3, r3, #3
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	466e      	mov	r6, sp
 8004808:	1af6      	subs	r6, r6, r3
 800480a:	46b5      	mov	sp, r6
 800480c:	466b      	mov	r3, sp
 800480e:	3300      	adds	r3, #0
 8004810:	623b      	str	r3, [r7, #32]
	memset(buffer, ' ', bufferSize);
 8004812:	2010      	movs	r0, #16
 8004814:	0006      	movs	r6, r0
 8004816:	2518      	movs	r5, #24
 8004818:	1943      	adds	r3, r0, r5
 800481a:	19db      	adds	r3, r3, r7
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	2120      	movs	r1, #32
 8004822:	0018      	movs	r0, r3
 8004824:	f001 fb80 	bl	8005f28 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8004828:	6a38      	ldr	r0, [r7, #32]
 800482a:	2416      	movs	r4, #22
 800482c:	1963      	adds	r3, r4, r5
 800482e:	19db      	adds	r3, r3, r7
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	4b1b      	ldr	r3, [pc, #108]	@ (80048a0 <espAt_sendCommand+0x154>)
 8004834:	0019      	movs	r1, r3
 8004836:	f001 fba3 	bl	8005f80 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 800483a:	0029      	movs	r1, r5
 800483c:	1863      	adds	r3, r4, r1
 800483e:	19db      	adds	r3, r3, r7
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	6a3a      	ldr	r2, [r7, #32]
 8004844:	18d0      	adds	r0, r2, r3
 8004846:	2514      	movs	r5, #20
 8004848:	186b      	adds	r3, r5, r1
 800484a:	19db      	adds	r3, r3, r7
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	0019      	movs	r1, r3
 8004852:	f001 fb95 	bl	8005f80 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ENDING, endingLength);
 8004856:	2118      	movs	r1, #24
 8004858:	1863      	adds	r3, r4, r1
 800485a:	19db      	adds	r3, r3, r7
 800485c:	881a      	ldrh	r2, [r3, #0]
 800485e:	000c      	movs	r4, r1
 8004860:	192b      	adds	r3, r5, r4
 8004862:	19db      	adds	r3, r3, r7
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	18d3      	adds	r3, r2, r3
 8004868:	6a3a      	ldr	r2, [r7, #32]
 800486a:	18d0      	adds	r0, r2, r3
 800486c:	2212      	movs	r2, #18
 800486e:	1913      	adds	r3, r2, r4
 8004870:	19db      	adds	r3, r3, r7
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <espAt_sendCommand+0x158>)
 8004876:	0019      	movs	r1, r3
 8004878:	f001 fb82 	bl	8005f80 <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 800487c:	69f8      	ldr	r0, [r7, #28]
 800487e:	0033      	movs	r3, r6
 8004880:	191b      	adds	r3, r3, r4
 8004882:	19db      	adds	r3, r3, r7
 8004884:	881a      	ldrh	r2, [r3, #0]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	0019      	movs	r1, r3
 800488a:	f7ff ff19 	bl	80046c0 <uartSend>
 800488e:	0003      	movs	r3, r0
 8004890:	46c5      	mov	sp, r8
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b00c      	add	sp, #48	@ 0x30
 8004898:	bc80      	pop	{r7}
 800489a:	46b8      	mov	r8, r7
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	08005fac 	.word	0x08005fac
 80048a4:	08005fb0 	.word	0x08005fb0

080048a8 <espAt_sendParams>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendParams(espat_radio_t *radio, char *command,
		uint16_t paramCount, ...) {
 80048a8:	b40c      	push	{r2, r3}
 80048aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ac:	46c6      	mov	lr, r8
 80048ae:	b500      	push	{lr}
 80048b0:	b0a2      	sub	sp, #136	@ 0x88
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80048b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048b8:	466b      	mov	r3, sp
 80048ba:	4698      	mov	r8, r3

	//check if command are valid
	if (command == NULL)
 80048bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <espAt_sendParams+0x1e>
		return ESPAT_STATE_ERR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e1b7      	b.n	8004c36 <espAt_sendParams+0x38e>

	va_list ap;
	va_start(ap, paramCount);
 80048c6:	236c      	movs	r3, #108	@ 0x6c
 80048c8:	2238      	movs	r2, #56	@ 0x38
 80048ca:	189b      	adds	r3, r3, r2
 80048cc:	19db      	adds	r3, r3, r7
 80048ce:	663b      	str	r3, [r7, #96]	@ 0x60

	//make parameters array
	int32_t parameters[paramCount];
 80048d0:	2368      	movs	r3, #104	@ 0x68
 80048d2:	189b      	adds	r3, r3, r2
 80048d4:	19db      	adds	r3, r3, r7
 80048d6:	881a      	ldrh	r2, [r3, #0]
 80048d8:	0013      	movs	r3, r2
 80048da:	3b01      	subs	r3, #1
 80048dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048de:	61ba      	str	r2, [r7, #24]
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	69b8      	ldr	r0, [r7, #24]
 80048e6:	69f9      	ldr	r1, [r7, #28]
 80048e8:	0003      	movs	r3, r0
 80048ea:	0edb      	lsrs	r3, r3, #27
 80048ec:	000e      	movs	r6, r1
 80048ee:	0175      	lsls	r5, r6, #5
 80048f0:	431d      	orrs	r5, r3
 80048f2:	0003      	movs	r3, r0
 80048f4:	015c      	lsls	r4, r3, #5
 80048f6:	613a      	str	r2, [r7, #16]
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	6938      	ldr	r0, [r7, #16]
 80048fe:	6979      	ldr	r1, [r7, #20]
 8004900:	0003      	movs	r3, r0
 8004902:	0edb      	lsrs	r3, r3, #27
 8004904:	000c      	movs	r4, r1
 8004906:	0164      	lsls	r4, r4, #5
 8004908:	637c      	str	r4, [r7, #52]	@ 0x34
 800490a:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800490c:	431c      	orrs	r4, r3
 800490e:	637c      	str	r4, [r7, #52]	@ 0x34
 8004910:	0003      	movs	r3, r0
 8004912:	015b      	lsls	r3, r3, #5
 8004914:	633b      	str	r3, [r7, #48]	@ 0x30
 8004916:	0013      	movs	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	3307      	adds	r3, #7
 800491c:	08db      	lsrs	r3, r3, #3
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	466a      	mov	r2, sp
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	469d      	mov	sp, r3
 8004926:	466b      	mov	r3, sp
 8004928:	3303      	adds	r3, #3
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	67bb      	str	r3, [r7, #120]	@ 0x78

	//fill parameters array
	for (uint16_t i = 0; i < paramCount; i++) {
 8004930:	234e      	movs	r3, #78	@ 0x4e
 8004932:	2238      	movs	r2, #56	@ 0x38
 8004934:	189b      	adds	r3, r3, r2
 8004936:	19db      	adds	r3, r3, r7
 8004938:	2200      	movs	r2, #0
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	e012      	b.n	8004964 <espAt_sendParams+0xbc>
		parameters[i] = va_arg(ap, int32_t);
 800493e:	204e      	movs	r0, #78	@ 0x4e
 8004940:	2438      	movs	r4, #56	@ 0x38
 8004942:	1903      	adds	r3, r0, r4
 8004944:	19db      	adds	r3, r3, r7
 8004946:	881a      	ldrh	r2, [r3, #0]
 8004948:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800494a:	1d19      	adds	r1, r3, #4
 800494c:	6639      	str	r1, [r7, #96]	@ 0x60
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004952:	0092      	lsls	r2, r2, #2
 8004954:	50d1      	str	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 8004956:	1903      	adds	r3, r0, r4
 8004958:	19db      	adds	r3, r3, r7
 800495a:	881a      	ldrh	r2, [r3, #0]
 800495c:	1903      	adds	r3, r0, r4
 800495e:	19db      	adds	r3, r3, r7
 8004960:	3201      	adds	r2, #1
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	234e      	movs	r3, #78	@ 0x4e
 8004966:	2138      	movs	r1, #56	@ 0x38
 8004968:	185b      	adds	r3, r3, r1
 800496a:	19da      	adds	r2, r3, r7
 800496c:	2368      	movs	r3, #104	@ 0x68
 800496e:	185b      	adds	r3, r3, r1
 8004970:	19db      	adds	r3, r3, r7
 8004972:	8812      	ldrh	r2, [r2, #0]
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d3e1      	bcc.n	800493e <espAt_sendParams+0x96>
	}

	//make arguments list string
	uint16_t characterCounter = 0;
 800497a:	234c      	movs	r3, #76	@ 0x4c
 800497c:	185b      	adds	r3, r3, r1
 800497e:	19db      	adds	r3, r3, r7
 8004980:	2200      	movs	r2, #0
 8004982:	801a      	strh	r2, [r3, #0]
	char argumentsBuffer[AT_BUFFER_SIZE];
	memset(argumentsBuffer, '\0', AT_BUFFER_SIZE);
 8004984:	2308      	movs	r3, #8
 8004986:	000c      	movs	r4, r1
 8004988:	185b      	adds	r3, r3, r1
 800498a:	19db      	adds	r3, r3, r7
 800498c:	221e      	movs	r2, #30
 800498e:	2100      	movs	r1, #0
 8004990:	0018      	movs	r0, r3
 8004992:	f001 fac9 	bl	8005f28 <memset>

	for (uint16_t i = 0; i < paramCount; i++) {
 8004996:	234a      	movs	r3, #74	@ 0x4a
 8004998:	191b      	adds	r3, r3, r4
 800499a:	19db      	adds	r3, r3, r7
 800499c:	2200      	movs	r2, #0
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	e048      	b.n	8004a34 <espAt_sendParams+0x18c>
		itoa(parameters[i], &argumentsBuffer[characterCounter], 10);
 80049a2:	234a      	movs	r3, #74	@ 0x4a
 80049a4:	001e      	movs	r6, r3
 80049a6:	2138      	movs	r1, #56	@ 0x38
 80049a8:	185b      	adds	r3, r3, r1
 80049aa:	19db      	adds	r3, r3, r7
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049b0:	0092      	lsls	r2, r2, #2
 80049b2:	58d0      	ldr	r0, [r2, r3]
 80049b4:	244c      	movs	r4, #76	@ 0x4c
 80049b6:	1863      	adds	r3, r4, r1
 80049b8:	19db      	adds	r3, r3, r7
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	2508      	movs	r5, #8
 80049be:	186a      	adds	r2, r5, r1
 80049c0:	19d2      	adds	r2, r2, r7
 80049c2:	18d3      	adds	r3, r2, r3
 80049c4:	220a      	movs	r2, #10
 80049c6:	0019      	movs	r1, r3
 80049c8:	f001 fa75 	bl	8005eb6 <itoa>
		characterCounter += strlen(&argumentsBuffer[characterCounter]) + 1;
 80049cc:	2038      	movs	r0, #56	@ 0x38
 80049ce:	1823      	adds	r3, r4, r0
 80049d0:	19db      	adds	r3, r3, r7
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	182a      	adds	r2, r5, r0
 80049d6:	19d2      	adds	r2, r2, r7
 80049d8:	18d3      	adds	r3, r2, r3
 80049da:	0018      	movs	r0, r3
 80049dc:	f7fb fb92 	bl	8000104 <strlen>
 80049e0:	0003      	movs	r3, r0
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	0021      	movs	r1, r4
 80049e6:	2038      	movs	r0, #56	@ 0x38
 80049e8:	180b      	adds	r3, r1, r0
 80049ea:	19db      	adds	r3, r3, r7
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	18d3      	adds	r3, r2, r3
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	180b      	adds	r3, r1, r0
 80049f4:	19db      	adds	r3, r3, r7
 80049f6:	3201      	adds	r2, #1
 80049f8:	801a      	strh	r2, [r3, #0]
		if (i < paramCount - 1)
 80049fa:	0033      	movs	r3, r6
 80049fc:	181b      	adds	r3, r3, r0
 80049fe:	19db      	adds	r3, r3, r7
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	2368      	movs	r3, #104	@ 0x68
 8004a04:	181b      	adds	r3, r3, r0
 8004a06:	19db      	adds	r3, r3, r7
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	da08      	bge.n	8004a22 <espAt_sendParams+0x17a>
			argumentsBuffer[characterCounter - 1] = ','; //add comma only if NOT last parameter
 8004a10:	0002      	movs	r2, r0
 8004a12:	188b      	adds	r3, r1, r2
 8004a14:	19db      	adds	r3, r3, r7
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	18aa      	adds	r2, r5, r2
 8004a1c:	19d2      	adds	r2, r2, r7
 8004a1e:	212c      	movs	r1, #44	@ 0x2c
 8004a20:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 8004a22:	214a      	movs	r1, #74	@ 0x4a
 8004a24:	2038      	movs	r0, #56	@ 0x38
 8004a26:	180b      	adds	r3, r1, r0
 8004a28:	19db      	adds	r3, r3, r7
 8004a2a:	881a      	ldrh	r2, [r3, #0]
 8004a2c:	180b      	adds	r3, r1, r0
 8004a2e:	19db      	adds	r3, r3, r7
 8004a30:	3201      	adds	r2, #1
 8004a32:	801a      	strh	r2, [r3, #0]
 8004a34:	234a      	movs	r3, #74	@ 0x4a
 8004a36:	2638      	movs	r6, #56	@ 0x38
 8004a38:	199b      	adds	r3, r3, r6
 8004a3a:	19da      	adds	r2, r3, r7
 8004a3c:	2368      	movs	r3, #104	@ 0x68
 8004a3e:	199b      	adds	r3, r3, r6
 8004a40:	19db      	adds	r3, r3, r7
 8004a42:	8812      	ldrh	r2, [r2, #0]
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d3ab      	bcc.n	80049a2 <espAt_sendParams+0xfa>
	}

	va_end(ap);

	//count buffer length
	uint16_t prefixLength = strlen(AT_PREFIX);
 8004a4a:	243e      	movs	r4, #62	@ 0x3e
 8004a4c:	19a3      	adds	r3, r4, r6
 8004a4e:	19db      	adds	r3, r3, r7
 8004a50:	2203      	movs	r2, #3
 8004a52:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8004a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fb fb54 	bl	8000104 <strlen>
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	253c      	movs	r5, #60	@ 0x3c
 8004a60:	19ab      	adds	r3, r5, r6
 8004a62:	19db      	adds	r3, r3, r7
 8004a64:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 8004a66:	213a      	movs	r1, #58	@ 0x3a
 8004a68:	198b      	adds	r3, r1, r6
 8004a6a:	19db      	adds	r3, r3, r7
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	801a      	strh	r2, [r3, #0]
	uint16_t parametersLength = --characterCounter;
 8004a70:	224c      	movs	r2, #76	@ 0x4c
 8004a72:	0030      	movs	r0, r6
 8004a74:	1993      	adds	r3, r2, r6
 8004a76:	19db      	adds	r3, r3, r7
 8004a78:	0016      	movs	r6, r2
 8004a7a:	1812      	adds	r2, r2, r0
 8004a7c:	19d2      	adds	r2, r2, r7
 8004a7e:	8812      	ldrh	r2, [r2, #0]
 8004a80:	3a01      	subs	r2, #1
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	2038      	movs	r0, #56	@ 0x38
 8004a86:	2338      	movs	r3, #56	@ 0x38
 8004a88:	18c2      	adds	r2, r0, r3
 8004a8a:	19d3      	adds	r3, r2, r7
 8004a8c:	0032      	movs	r2, r6
 8004a8e:	2638      	movs	r6, #56	@ 0x38
 8004a90:	1992      	adds	r2, r2, r6
 8004a92:	19d2      	adds	r2, r2, r7
 8004a94:	8812      	ldrh	r2, [r2, #0]
 8004a96:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8004a98:	2336      	movs	r3, #54	@ 0x36
 8004a9a:	001e      	movs	r6, r3
 8004a9c:	2238      	movs	r2, #56	@ 0x38
 8004a9e:	189a      	adds	r2, r3, r2
 8004aa0:	19d3      	adds	r3, r2, r7
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	801a      	strh	r2, [r3, #0]

	//create master buffer and clear it
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8004aa6:	2338      	movs	r3, #56	@ 0x38
 8004aa8:	18e2      	adds	r2, r4, r3
 8004aaa:	19d2      	adds	r2, r2, r7
 8004aac:	18eb      	adds	r3, r5, r3
 8004aae:	19db      	adds	r3, r3, r7
 8004ab0:	8812      	ldrh	r2, [r2, #0]
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	18d3      	adds	r3, r2, r3
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	2338      	movs	r3, #56	@ 0x38
 8004aba:	18c9      	adds	r1, r1, r3
 8004abc:	19cb      	adds	r3, r1, r7
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	18d3      	adds	r3, r2, r3
 8004ac2:	b29a      	uxth	r2, r3
			+ parametersLength + endingLength;
 8004ac4:	2338      	movs	r3, #56	@ 0x38
 8004ac6:	18c1      	adds	r1, r0, r3
 8004ac8:	19cb      	adds	r3, r1, r7
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	18d3      	adds	r3, r2, r3
 8004ace:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8004ad0:	2234      	movs	r2, #52	@ 0x34
 8004ad2:	0010      	movs	r0, r2
 8004ad4:	2338      	movs	r3, #56	@ 0x38
 8004ad6:	18d2      	adds	r2, r2, r3
 8004ad8:	19d3      	adds	r3, r2, r7
 8004ada:	0032      	movs	r2, r6
 8004adc:	2638      	movs	r6, #56	@ 0x38
 8004ade:	1992      	adds	r2, r2, r6
 8004ae0:	19d2      	adds	r2, r2, r7
 8004ae2:	8812      	ldrh	r2, [r2, #0]
 8004ae4:	188a      	adds	r2, r1, r2
 8004ae6:	801a      	strh	r2, [r3, #0]
	char buffer[bufferSize];
 8004ae8:	0002      	movs	r2, r0
 8004aea:	1993      	adds	r3, r2, r6
 8004aec:	19db      	adds	r3, r3, r7
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	001a      	movs	r2, r3
 8004af2:	3a01      	subs	r2, #1
 8004af4:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	2200      	movs	r2, #0
 8004afa:	60fa      	str	r2, [r7, #12]
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	0006      	movs	r6, r0
 8004b02:	0f72      	lsrs	r2, r6, #29
 8004b04:	000e      	movs	r6, r1
 8004b06:	00f6      	lsls	r6, r6, #3
 8004b08:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8004b0a:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8004b0c:	4316      	orrs	r6, r2
 8004b0e:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8004b10:	0006      	movs	r6, r0
 8004b12:	00f6      	lsls	r6, r6, #3
 8004b14:	62be      	str	r6, [r7, #40]	@ 0x28
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	6838      	ldr	r0, [r7, #0]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	0006      	movs	r6, r0
 8004b22:	0f72      	lsrs	r2, r6, #29
 8004b24:	000e      	movs	r6, r1
 8004b26:	00f6      	lsls	r6, r6, #3
 8004b28:	627e      	str	r6, [r7, #36]	@ 0x24
 8004b2a:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8004b2c:	4316      	orrs	r6, r2
 8004b2e:	627e      	str	r6, [r7, #36]	@ 0x24
 8004b30:	0006      	movs	r6, r0
 8004b32:	00f6      	lsls	r6, r6, #3
 8004b34:	623e      	str	r6, [r7, #32]
 8004b36:	3307      	adds	r3, #7
 8004b38:	08db      	lsrs	r3, r3, #3
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	466e      	mov	r6, sp
 8004b3e:	1af6      	subs	r6, r6, r3
 8004b40:	46b5      	mov	sp, r6
 8004b42:	466b      	mov	r3, sp
 8004b44:	3300      	adds	r3, #0
 8004b46:	667b      	str	r3, [r7, #100]	@ 0x64
	memset(buffer, ' ', bufferSize);
 8004b48:	2234      	movs	r2, #52	@ 0x34
 8004b4a:	2638      	movs	r6, #56	@ 0x38
 8004b4c:	1993      	adds	r3, r2, r6
 8004b4e:	19db      	adds	r3, r3, r7
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b54:	2120      	movs	r1, #32
 8004b56:	0018      	movs	r0, r3
 8004b58:	f001 f9e6 	bl	8005f28 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8004b5c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004b5e:	19a3      	adds	r3, r4, r6
 8004b60:	19db      	adds	r3, r3, r7
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	4b39      	ldr	r3, [pc, #228]	@ (8004c4c <espAt_sendParams+0x3a4>)
 8004b66:	0019      	movs	r1, r3
 8004b68:	f001 fa0a 	bl	8005f80 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8004b6c:	0031      	movs	r1, r6
 8004b6e:	19a3      	adds	r3, r4, r6
 8004b70:	19db      	adds	r3, r3, r7
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b76:	18d0      	adds	r0, r2, r3
 8004b78:	000e      	movs	r6, r1
 8004b7a:	186b      	adds	r3, r5, r1
 8004b7c:	19db      	adds	r3, r3, r7
 8004b7e:	881a      	ldrh	r2, [r3, #0]
 8004b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b82:	0019      	movs	r1, r3
 8004b84:	f001 f9fc 	bl	8005f80 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8004b88:	0031      	movs	r1, r6
 8004b8a:	1863      	adds	r3, r4, r1
 8004b8c:	19db      	adds	r3, r3, r7
 8004b8e:	881a      	ldrh	r2, [r3, #0]
 8004b90:	1868      	adds	r0, r5, r1
 8004b92:	19c3      	adds	r3, r0, r7
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	18d3      	adds	r3, r2, r3
 8004b98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b9a:	18d0      	adds	r0, r2, r3
 8004b9c:	213a      	movs	r1, #58	@ 0x3a
 8004b9e:	000e      	movs	r6, r1
 8004ba0:	2338      	movs	r3, #56	@ 0x38
 8004ba2:	18ca      	adds	r2, r1, r3
 8004ba4:	19d3      	adds	r3, r2, r7
 8004ba6:	881a      	ldrh	r2, [r3, #0]
 8004ba8:	4b29      	ldr	r3, [pc, #164]	@ (8004c50 <espAt_sendParams+0x3a8>)
 8004baa:	0019      	movs	r1, r3
 8004bac:	f001 f9e8 	bl	8005f80 <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8004bb0:	2038      	movs	r0, #56	@ 0x38
 8004bb2:	1823      	adds	r3, r4, r0
 8004bb4:	19db      	adds	r3, r3, r7
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	182b      	adds	r3, r5, r0
 8004bba:	19db      	adds	r3, r3, r7
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	18d2      	adds	r2, r2, r3
 8004bc0:	0031      	movs	r1, r6
 8004bc2:	0006      	movs	r6, r0
 8004bc4:	180b      	adds	r3, r1, r0
 8004bc6:	19db      	adds	r3, r3, r7
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	18d3      	adds	r3, r2, r3
 8004bcc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bce:	18d0      	adds	r0, r2, r3
 8004bd0:	2338      	movs	r3, #56	@ 0x38
 8004bd2:	0031      	movs	r1, r6
 8004bd4:	185b      	adds	r3, r3, r1
 8004bd6:	19db      	adds	r3, r3, r7
 8004bd8:	881a      	ldrh	r2, [r3, #0]
 8004bda:	2608      	movs	r6, #8
 8004bdc:	1873      	adds	r3, r6, r1
 8004bde:	19db      	adds	r3, r3, r7
 8004be0:	0019      	movs	r1, r3
 8004be2:	f001 f9cd 	bl	8005f80 <memcpy>
			argumentsBuffer, parametersLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8004be6:	2038      	movs	r0, #56	@ 0x38
 8004be8:	1823      	adds	r3, r4, r0
 8004bea:	19db      	adds	r3, r3, r7
 8004bec:	881a      	ldrh	r2, [r3, #0]
 8004bee:	182b      	adds	r3, r5, r0
 8004bf0:	19db      	adds	r3, r3, r7
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	18d2      	adds	r2, r2, r3
 8004bf6:	213a      	movs	r1, #58	@ 0x3a
 8004bf8:	180b      	adds	r3, r1, r0
 8004bfa:	19db      	adds	r3, r3, r7
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	18d2      	adds	r2, r2, r3
					+ parametersLength], AT_ENDING, endingLength);
 8004c00:	2338      	movs	r3, #56	@ 0x38
 8004c02:	0001      	movs	r1, r0
 8004c04:	185b      	adds	r3, r3, r1
 8004c06:	19db      	adds	r3, r3, r7
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8004c0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c0e:	18d0      	adds	r0, r2, r3
	memcpy(
 8004c10:	2336      	movs	r3, #54	@ 0x36
 8004c12:	000c      	movs	r4, r1
 8004c14:	185b      	adds	r3, r3, r1
 8004c16:	19db      	adds	r3, r3, r7
 8004c18:	881a      	ldrh	r2, [r3, #0]
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <espAt_sendParams+0x3ac>)
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	f001 f9af 	bl	8005f80 <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 8004c22:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004c24:	2234      	movs	r2, #52	@ 0x34
 8004c26:	1913      	adds	r3, r2, r4
 8004c28:	19db      	adds	r3, r3, r7
 8004c2a:	881a      	ldrh	r2, [r3, #0]
 8004c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c2e:	0019      	movs	r1, r3
 8004c30:	f7ff fd46 	bl	80046c0 <uartSend>
 8004c34:	0003      	movs	r3, r0
 8004c36:	46c5      	mov	sp, r8

}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b022      	add	sp, #136	@ 0x88
 8004c3e:	bc80      	pop	{r7}
 8004c40:	46b8      	mov	r8, r7
 8004c42:	bcf0      	pop	{r4, r5, r6, r7}
 8004c44:	bc08      	pop	{r3}
 8004c46:	b002      	add	sp, #8
 8004c48:	4718      	bx	r3
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	08005fac 	.word	0x08005fac
 8004c50:	08005fb4 	.word	0x08005fb4
 8004c54:	08005fb0 	.word	0x08005fb0

08004c58 <espAt_sendString>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendString(espat_radio_t *radio, char *command,
		char *string) {
 8004c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c5a:	46c6      	mov	lr, r8
 8004c5c:	b500      	push	{lr}
 8004c5e:	b090      	sub	sp, #64	@ 0x40
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c64:	6239      	str	r1, [r7, #32]
 8004c66:	61fa      	str	r2, [r7, #28]
 8004c68:	466b      	mov	r3, sp
 8004c6a:	4698      	mov	r8, r3

	//check if command and string are valid
	if (command == NULL || string == NULL)
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <espAt_sendString+0x20>
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <espAt_sendString+0x24>
		return ESPAT_STATE_ERR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e139      	b.n	8004ef0 <espAt_sendString+0x298>

	uint16_t prefixLength = strlen(AT_PREFIX);
 8004c7c:	2326      	movs	r3, #38	@ 0x26
 8004c7e:	2618      	movs	r6, #24
 8004c80:	199b      	adds	r3, r3, r6
 8004c82:	19db      	adds	r3, r3, r7
 8004c84:	2203      	movs	r2, #3
 8004c86:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f7fb fa3a 	bl	8000104 <strlen>
 8004c90:	0002      	movs	r2, r0
 8004c92:	2124      	movs	r1, #36	@ 0x24
 8004c94:	198b      	adds	r3, r1, r6
 8004c96:	19db      	adds	r3, r3, r7
 8004c98:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 8004c9a:	2222      	movs	r2, #34	@ 0x22
 8004c9c:	1993      	adds	r3, r2, r6
 8004c9e:	19db      	adds	r3, r3, r7
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	801a      	strh	r2, [r3, #0]
	uint16_t quoteLength = strlen(AT_STRING_QUOTE_MARK);
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	1993      	adds	r3, r2, r6
 8004ca8:	19db      	adds	r3, r3, r7
 8004caa:	2201      	movs	r2, #1
 8004cac:	801a      	strh	r2, [r3, #0]
	uint16_t stringLength = strlen(string);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f7fb fa27 	bl	8000104 <strlen>
 8004cb6:	0002      	movs	r2, r0
 8004cb8:	231e      	movs	r3, #30
 8004cba:	0031      	movs	r1, r6
 8004cbc:	185b      	adds	r3, r3, r1
 8004cbe:	19db      	adds	r3, r3, r7
 8004cc0:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8004cc2:	221c      	movs	r2, #28
 8004cc4:	0016      	movs	r6, r2
 8004cc6:	1853      	adds	r3, r2, r1
 8004cc8:	19db      	adds	r3, r3, r7
 8004cca:	2202      	movs	r2, #2
 8004ccc:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8004cce:	2326      	movs	r3, #38	@ 0x26
 8004cd0:	0008      	movs	r0, r1
 8004cd2:	185b      	adds	r3, r3, r1
 8004cd4:	19da      	adds	r2, r3, r7
 8004cd6:	2124      	movs	r1, #36	@ 0x24
 8004cd8:	180b      	adds	r3, r1, r0
 8004cda:	19db      	adds	r3, r3, r7
 8004cdc:	8812      	ldrh	r2, [r2, #0]
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	18d3      	adds	r3, r2, r3
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	2022      	movs	r0, #34	@ 0x22
 8004ce6:	2118      	movs	r1, #24
 8004ce8:	1843      	adds	r3, r0, r1
 8004cea:	19db      	adds	r3, r3, r7
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	18d3      	adds	r3, r2, r3
 8004cf0:	b29a      	uxth	r2, r3
			+ (quoteLength * 2) + stringLength + endingLength;
 8004cf2:	2020      	movs	r0, #32
 8004cf4:	1840      	adds	r0, r0, r1
 8004cf6:	19c3      	adds	r3, r0, r7
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	18db      	adds	r3, r3, r3
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	18d3      	adds	r3, r2, r3
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	211e      	movs	r1, #30
 8004d04:	2318      	movs	r3, #24
 8004d06:	18c9      	adds	r1, r1, r3
 8004d08:	19cb      	adds	r3, r1, r7
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	18d3      	adds	r3, r2, r3
 8004d0e:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8004d10:	201a      	movs	r0, #26
 8004d12:	2318      	movs	r3, #24
 8004d14:	18c2      	adds	r2, r0, r3
 8004d16:	19d3      	adds	r3, r2, r7
 8004d18:	0032      	movs	r2, r6
 8004d1a:	2618      	movs	r6, #24
 8004d1c:	1992      	adds	r2, r2, r6
 8004d1e:	19d2      	adds	r2, r2, r7
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	188a      	adds	r2, r1, r2
 8004d24:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 8004d26:	1983      	adds	r3, r0, r6
 8004d28:	19db      	adds	r3, r3, r7
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	3a01      	subs	r2, #1
 8004d30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	2200      	movs	r2, #0
 8004d36:	60fa      	str	r2, [r7, #12]
 8004d38:	68b8      	ldr	r0, [r7, #8]
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	0006      	movs	r6, r0
 8004d3e:	0f72      	lsrs	r2, r6, #29
 8004d40:	000e      	movs	r6, r1
 8004d42:	00f6      	lsls	r6, r6, #3
 8004d44:	617e      	str	r6, [r7, #20]
 8004d46:	697e      	ldr	r6, [r7, #20]
 8004d48:	4316      	orrs	r6, r2
 8004d4a:	617e      	str	r6, [r7, #20]
 8004d4c:	0006      	movs	r6, r0
 8004d4e:	00f6      	lsls	r6, r6, #3
 8004d50:	613e      	str	r6, [r7, #16]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	2200      	movs	r2, #0
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	6838      	ldr	r0, [r7, #0]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	0006      	movs	r6, r0
 8004d5e:	0f72      	lsrs	r2, r6, #29
 8004d60:	000e      	movs	r6, r1
 8004d62:	00f5      	lsls	r5, r6, #3
 8004d64:	4315      	orrs	r5, r2
 8004d66:	0006      	movs	r6, r0
 8004d68:	00f4      	lsls	r4, r6, #3
 8004d6a:	3307      	adds	r3, #7
 8004d6c:	08db      	lsrs	r3, r3, #3
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	466e      	mov	r6, sp
 8004d72:	1af6      	subs	r6, r6, r3
 8004d74:	46b5      	mov	sp, r6
 8004d76:	466b      	mov	r3, sp
 8004d78:	3300      	adds	r3, #0
 8004d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(buffer, ' ', bufferSize);
 8004d7c:	221a      	movs	r2, #26
 8004d7e:	2618      	movs	r6, #24
 8004d80:	1993      	adds	r3, r2, r6
 8004d82:	19db      	adds	r3, r3, r7
 8004d84:	881a      	ldrh	r2, [r3, #0]
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	2120      	movs	r1, #32
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f001 f8cc 	bl	8005f28 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8004d90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d92:	2426      	movs	r4, #38	@ 0x26
 8004d94:	19a3      	adds	r3, r4, r6
 8004d96:	19db      	adds	r3, r3, r7
 8004d98:	881a      	ldrh	r2, [r3, #0]
 8004d9a:	4b59      	ldr	r3, [pc, #356]	@ (8004f00 <espAt_sendString+0x2a8>)
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	f001 f8ef 	bl	8005f80 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8004da2:	19a3      	adds	r3, r4, r6
 8004da4:	19db      	adds	r3, r3, r7
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004daa:	18d0      	adds	r0, r2, r3
 8004dac:	2524      	movs	r5, #36	@ 0x24
 8004dae:	19ab      	adds	r3, r5, r6
 8004db0:	19db      	adds	r3, r3, r7
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	0019      	movs	r1, r3
 8004db8:	f001 f8e2 	bl	8005f80 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8004dbc:	0031      	movs	r1, r6
 8004dbe:	1863      	adds	r3, r4, r1
 8004dc0:	19db      	adds	r3, r3, r7
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	186b      	adds	r3, r5, r1
 8004dc6:	19db      	adds	r3, r3, r7
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	18d3      	adds	r3, r2, r3
 8004dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dce:	18d0      	adds	r0, r2, r3
 8004dd0:	2222      	movs	r2, #34	@ 0x22
 8004dd2:	0016      	movs	r6, r2
 8004dd4:	1853      	adds	r3, r2, r1
 8004dd6:	19db      	adds	r3, r3, r7
 8004dd8:	881a      	ldrh	r2, [r3, #0]
 8004dda:	4b4a      	ldr	r3, [pc, #296]	@ (8004f04 <espAt_sendString+0x2ac>)
 8004ddc:	0019      	movs	r1, r3
 8004dde:	f001 f8cf 	bl	8005f80 <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8004de2:	2118      	movs	r1, #24
 8004de4:	1863      	adds	r3, r4, r1
 8004de6:	19db      	adds	r3, r3, r7
 8004de8:	881a      	ldrh	r2, [r3, #0]
 8004dea:	186b      	adds	r3, r5, r1
 8004dec:	19db      	adds	r3, r3, r7
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	18d2      	adds	r2, r2, r3
 8004df2:	0030      	movs	r0, r6
 8004df4:	1843      	adds	r3, r0, r1
 8004df6:	19db      	adds	r3, r3, r7
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	18d3      	adds	r3, r2, r3
 8004dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dfe:	18d0      	adds	r0, r2, r3
 8004e00:	2320      	movs	r3, #32
 8004e02:	001e      	movs	r6, r3
 8004e04:	185b      	adds	r3, r3, r1
 8004e06:	19db      	adds	r3, r3, r7
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f08 <espAt_sendString+0x2b0>)
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	f001 f8b7 	bl	8005f80 <memcpy>
	AT_STRING_QUOTE_MARK, quoteLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8004e12:	2118      	movs	r1, #24
 8004e14:	1863      	adds	r3, r4, r1
 8004e16:	19db      	adds	r3, r3, r7
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	186b      	adds	r3, r5, r1
 8004e1c:	19db      	adds	r3, r3, r7
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	18d2      	adds	r2, r2, r3
 8004e22:	2022      	movs	r0, #34	@ 0x22
 8004e24:	1843      	adds	r3, r0, r1
 8004e26:	19db      	adds	r3, r3, r7
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	18d2      	adds	r2, r2, r3
					+ quoteLength], string, stringLength);
 8004e2c:	0033      	movs	r3, r6
 8004e2e:	1858      	adds	r0, r3, r1
 8004e30:	19c3      	adds	r3, r0, r7
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8004e36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e38:	18d0      	adds	r0, r2, r3
	memcpy(
 8004e3a:	211e      	movs	r1, #30
 8004e3c:	000e      	movs	r6, r1
 8004e3e:	2318      	movs	r3, #24
 8004e40:	18ca      	adds	r2, r1, r3
 8004e42:	19d3      	adds	r3, r2, r7
 8004e44:	881a      	ldrh	r2, [r3, #0]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	0019      	movs	r1, r3
 8004e4a:	f001 f899 	bl	8005f80 <memcpy>
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8004e4e:	2118      	movs	r1, #24
 8004e50:	1863      	adds	r3, r4, r1
 8004e52:	19db      	adds	r3, r3, r7
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	186b      	adds	r3, r5, r1
 8004e58:	19db      	adds	r3, r3, r7
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	18d2      	adds	r2, r2, r3
 8004e5e:	2022      	movs	r0, #34	@ 0x22
 8004e60:	1843      	adds	r3, r0, r1
 8004e62:	19db      	adds	r3, r3, r7
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	18d2      	adds	r2, r2, r3
					+ quoteLength + stringLength], AT_STRING_QUOTE_MARK,
 8004e68:	2320      	movs	r3, #32
 8004e6a:	0008      	movs	r0, r1
 8004e6c:	185b      	adds	r3, r3, r1
 8004e6e:	19db      	adds	r3, r3, r7
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	18d2      	adds	r2, r2, r3
 8004e74:	0031      	movs	r1, r6
 8004e76:	180e      	adds	r6, r1, r0
 8004e78:	19f3      	adds	r3, r6, r7
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8004e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e80:	18d0      	adds	r0, r2, r3
	memcpy(
 8004e82:	000e      	movs	r6, r1
 8004e84:	2318      	movs	r3, #24
 8004e86:	18ca      	adds	r2, r1, r3
 8004e88:	19d3      	adds	r3, r2, r7
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f08 <espAt_sendString+0x2b0>)
 8004e8e:	0019      	movs	r1, r3
 8004e90:	f001 f876 	bl	8005f80 <memcpy>
			stringLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8004e94:	2118      	movs	r1, #24
 8004e96:	1863      	adds	r3, r4, r1
 8004e98:	19db      	adds	r3, r3, r7
 8004e9a:	881a      	ldrh	r2, [r3, #0]
 8004e9c:	186b      	adds	r3, r5, r1
 8004e9e:	19db      	adds	r3, r3, r7
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	18d2      	adds	r2, r2, r3
 8004ea4:	2022      	movs	r0, #34	@ 0x22
 8004ea6:	1843      	adds	r3, r0, r1
 8004ea8:	19db      	adds	r3, r3, r7
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	18d2      	adds	r2, r2, r3
					+ (quoteLength * 2) + stringLength], AT_ENDING,
 8004eae:	2320      	movs	r3, #32
 8004eb0:	0008      	movs	r0, r1
 8004eb2:	185b      	adds	r3, r3, r1
 8004eb4:	19db      	adds	r3, r3, r7
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	18d2      	adds	r2, r2, r3
 8004ebc:	0031      	movs	r1, r6
 8004ebe:	0004      	movs	r4, r0
 8004ec0:	180b      	adds	r3, r1, r0
 8004ec2:	19db      	adds	r3, r3, r7
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8004ec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eca:	18d0      	adds	r0, r2, r3
	memcpy(
 8004ecc:	231c      	movs	r3, #28
 8004ece:	191b      	adds	r3, r3, r4
 8004ed0:	19db      	adds	r3, r3, r7
 8004ed2:	881a      	ldrh	r2, [r3, #0]
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <espAt_sendString+0x2b4>)
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	f001 f852 	bl	8005f80 <memcpy>
			endingLength);

	return uartSend(&radio->espUart, buffer, bufferSize);
 8004edc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ede:	221a      	movs	r2, #26
 8004ee0:	1913      	adds	r3, r2, r4
 8004ee2:	19db      	adds	r3, r3, r7
 8004ee4:	881a      	ldrh	r2, [r3, #0]
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	0019      	movs	r1, r3
 8004eea:	f7ff fbe9 	bl	80046c0 <uartSend>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	46c5      	mov	sp, r8

}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b010      	add	sp, #64	@ 0x40
 8004ef8:	bc80      	pop	{r7}
 8004efa:	46b8      	mov	r8, r7
 8004efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	08005fac 	.word	0x08005fac
 8004f04:	08005fb4 	.word	0x08005fb4
 8004f08:	08005fb8 	.word	0x08005fb8
 8004f0c:	08005fb0 	.word	0x08005fb0

08004f10 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b089      	sub	sp, #36	@ 0x24
 8004f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f16:	240c      	movs	r4, #12
 8004f18:	193b      	adds	r3, r7, r4
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	2314      	movs	r3, #20
 8004f1e:	001a      	movs	r2, r3
 8004f20:	2100      	movs	r1, #0
 8004f22:	f001 f801 	bl	8005f28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f26:	4b36      	ldr	r3, [pc, #216]	@ (8005000 <MX_GPIO_Init+0xf0>)
 8004f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f2a:	4b35      	ldr	r3, [pc, #212]	@ (8005000 <MX_GPIO_Init+0xf0>)
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f32:	4b33      	ldr	r3, [pc, #204]	@ (8005000 <MX_GPIO_Init+0xf0>)
 8004f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f36:	2204      	movs	r2, #4
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f3e:	4b30      	ldr	r3, [pc, #192]	@ (8005000 <MX_GPIO_Init+0xf0>)
 8004f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f42:	4b2f      	ldr	r3, [pc, #188]	@ (8005000 <MX_GPIO_Init+0xf0>)
 8004f44:	2101      	movs	r1, #1
 8004f46:	430a      	orrs	r2, r1
 8004f48:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8005000 <MX_GPIO_Init+0xf0>)
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4013      	ands	r3, r2
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f56:	4b2a      	ldr	r3, [pc, #168]	@ (8005000 <MX_GPIO_Init+0xf0>)
 8004f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f5a:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <MX_GPIO_Init+0xf0>)
 8004f5c:	2102      	movs	r1, #2
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f62:	4b27      	ldr	r3, [pc, #156]	@ (8005000 <MX_GPIO_Init+0xf0>)
 8004f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f66:	2202      	movs	r2, #2
 8004f68:	4013      	ands	r3, r2
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8004f6e:	23a0      	movs	r3, #160	@ 0xa0
 8004f70:	05db      	lsls	r3, r3, #23
 8004f72:	2200      	movs	r2, #0
 8004f74:	2120      	movs	r1, #32
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7fc fa33 	bl	80013e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8004f7c:	193b      	adds	r3, r7, r4
 8004f7e:	2280      	movs	r2, #128	@ 0x80
 8004f80:	0192      	lsls	r2, r2, #6
 8004f82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f84:	193b      	adds	r3, r7, r4
 8004f86:	2200      	movs	r2, #0
 8004f88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8a:	193b      	adds	r3, r7, r4
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8004f90:	193b      	adds	r3, r7, r4
 8004f92:	4a1c      	ldr	r2, [pc, #112]	@ (8005004 <MX_GPIO_Init+0xf4>)
 8004f94:	0019      	movs	r1, r3
 8004f96:	0010      	movs	r0, r2
 8004f98:	f7fb ffd2 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8004f9c:	193b      	adds	r3, r7, r4
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fa2:	193b      	adds	r3, r7, r4
 8004fa4:	2288      	movs	r2, #136	@ 0x88
 8004fa6:	0352      	lsls	r2, r2, #13
 8004fa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004faa:	193b      	adds	r3, r7, r4
 8004fac:	2202      	movs	r2, #2
 8004fae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8004fb0:	193a      	adds	r2, r7, r4
 8004fb2:	23a0      	movs	r3, #160	@ 0xa0
 8004fb4:	05db      	lsls	r3, r3, #23
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7fb ffc1 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8004fbe:	0021      	movs	r1, r4
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	2201      	movs	r2, #1
 8004fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd2:	187b      	adds	r3, r7, r1
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8004fd8:	187a      	adds	r2, r7, r1
 8004fda:	23a0      	movs	r3, #160	@ 0xa0
 8004fdc:	05db      	lsls	r3, r3, #23
 8004fde:	0011      	movs	r1, r2
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7fb ffad 	bl	8000f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2100      	movs	r1, #0
 8004fea:	2005      	movs	r0, #5
 8004fec:	f7fb fc96 	bl	800091c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004ff0:	2005      	movs	r0, #5
 8004ff2:	f7fb fca8 	bl	8000946 <HAL_NVIC_EnableIRQ>

}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b009      	add	sp, #36	@ 0x24
 8004ffc:	bd90      	pop	{r4, r7, pc}
 8004ffe:	46c0      	nop			@ (mov r8, r8)
 8005000:	40021000 	.word	0x40021000
 8005004:	50000800 	.word	0x50000800

08005008 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800500c:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <MX_I2C1_Init+0x74>)
 800500e:	4a1c      	ldr	r2, [pc, #112]	@ (8005080 <MX_I2C1_Init+0x78>)
 8005010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8005012:	4b1a      	ldr	r3, [pc, #104]	@ (800507c <MX_I2C1_Init+0x74>)
 8005014:	4a1b      	ldr	r2, [pc, #108]	@ (8005084 <MX_I2C1_Init+0x7c>)
 8005016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005018:	4b18      	ldr	r3, [pc, #96]	@ (800507c <MX_I2C1_Init+0x74>)
 800501a:	2200      	movs	r2, #0
 800501c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800501e:	4b17      	ldr	r3, [pc, #92]	@ (800507c <MX_I2C1_Init+0x74>)
 8005020:	2201      	movs	r2, #1
 8005022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005024:	4b15      	ldr	r3, [pc, #84]	@ (800507c <MX_I2C1_Init+0x74>)
 8005026:	2200      	movs	r2, #0
 8005028:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800502a:	4b14      	ldr	r3, [pc, #80]	@ (800507c <MX_I2C1_Init+0x74>)
 800502c:	2200      	movs	r2, #0
 800502e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005030:	4b12      	ldr	r3, [pc, #72]	@ (800507c <MX_I2C1_Init+0x74>)
 8005032:	2200      	movs	r2, #0
 8005034:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005036:	4b11      	ldr	r3, [pc, #68]	@ (800507c <MX_I2C1_Init+0x74>)
 8005038:	2200      	movs	r2, #0
 800503a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800503c:	4b0f      	ldr	r3, [pc, #60]	@ (800507c <MX_I2C1_Init+0x74>)
 800503e:	2200      	movs	r2, #0
 8005040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005042:	4b0e      	ldr	r3, [pc, #56]	@ (800507c <MX_I2C1_Init+0x74>)
 8005044:	0018      	movs	r0, r3
 8005046:	f7fc fa1d 	bl	8001484 <HAL_I2C_Init>
 800504a:	1e03      	subs	r3, r0, #0
 800504c:	d001      	beq.n	8005052 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800504e:	f000 fc2f 	bl	80058b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005052:	4b0a      	ldr	r3, [pc, #40]	@ (800507c <MX_I2C1_Init+0x74>)
 8005054:	2100      	movs	r1, #0
 8005056:	0018      	movs	r0, r3
 8005058:	f7fd f818 	bl	800208c <HAL_I2CEx_ConfigAnalogFilter>
 800505c:	1e03      	subs	r3, r0, #0
 800505e:	d001      	beq.n	8005064 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005060:	f000 fc26 	bl	80058b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <MX_I2C1_Init+0x74>)
 8005066:	2100      	movs	r1, #0
 8005068:	0018      	movs	r0, r3
 800506a:	f7fd f85b 	bl	8002124 <HAL_I2CEx_ConfigDigitalFilter>
 800506e:	1e03      	subs	r3, r0, #0
 8005070:	d001      	beq.n	8005076 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005072:	f000 fc1d 	bl	80058b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	2000002c 	.word	0x2000002c
 8005080:	40005400 	.word	0x40005400
 8005084:	00c12166 	.word	0x00c12166

08005088 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b097      	sub	sp, #92	@ 0x5c
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005090:	2344      	movs	r3, #68	@ 0x44
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	0018      	movs	r0, r3
 8005096:	2314      	movs	r3, #20
 8005098:	001a      	movs	r2, r3
 800509a:	2100      	movs	r1, #0
 800509c:	f000 ff44 	bl	8005f28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050a0:	2410      	movs	r4, #16
 80050a2:	193b      	adds	r3, r7, r4
 80050a4:	0018      	movs	r0, r3
 80050a6:	2334      	movs	r3, #52	@ 0x34
 80050a8:	001a      	movs	r2, r3
 80050aa:	2100      	movs	r1, #0
 80050ac:	f000 ff3c 	bl	8005f28 <memset>
  if(i2cHandle->Instance==I2C1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a22      	ldr	r2, [pc, #136]	@ (8005140 <HAL_I2C_MspInit+0xb8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d13e      	bne.n	8005138 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80050ba:	193b      	adds	r3, r7, r4
 80050bc:	2220      	movs	r2, #32
 80050be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80050c0:	193b      	adds	r3, r7, r4
 80050c2:	2200      	movs	r2, #0
 80050c4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050c6:	193b      	adds	r3, r7, r4
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7fd fd87 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
 80050ce:	1e03      	subs	r3, r0, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80050d2:	f000 fbed 	bl	80058b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005144 <HAL_I2C_MspInit+0xbc>)
 80050d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050da:	4b1a      	ldr	r3, [pc, #104]	@ (8005144 <HAL_I2C_MspInit+0xbc>)
 80050dc:	2102      	movs	r1, #2
 80050de:	430a      	orrs	r2, r1
 80050e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80050e2:	4b18      	ldr	r3, [pc, #96]	@ (8005144 <HAL_I2C_MspInit+0xbc>)
 80050e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e6:	2202      	movs	r2, #2
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80050ee:	2144      	movs	r1, #68	@ 0x44
 80050f0:	187b      	adds	r3, r7, r1
 80050f2:	22c0      	movs	r2, #192	@ 0xc0
 80050f4:	0092      	lsls	r2, r2, #2
 80050f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050f8:	187b      	adds	r3, r7, r1
 80050fa:	2212      	movs	r2, #18
 80050fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fe:	187b      	adds	r3, r7, r1
 8005100:	2200      	movs	r2, #0
 8005102:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005104:	187b      	adds	r3, r7, r1
 8005106:	2200      	movs	r2, #0
 8005108:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800510a:	187b      	adds	r3, r7, r1
 800510c:	2206      	movs	r2, #6
 800510e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005110:	187b      	adds	r3, r7, r1
 8005112:	4a0d      	ldr	r2, [pc, #52]	@ (8005148 <HAL_I2C_MspInit+0xc0>)
 8005114:	0019      	movs	r1, r3
 8005116:	0010      	movs	r0, r2
 8005118:	f7fb ff12 	bl	8000f40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800511c:	4b09      	ldr	r3, [pc, #36]	@ (8005144 <HAL_I2C_MspInit+0xbc>)
 800511e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005120:	4b08      	ldr	r3, [pc, #32]	@ (8005144 <HAL_I2C_MspInit+0xbc>)
 8005122:	2180      	movs	r1, #128	@ 0x80
 8005124:	0389      	lsls	r1, r1, #14
 8005126:	430a      	orrs	r2, r1
 8005128:	63da      	str	r2, [r3, #60]	@ 0x3c
 800512a:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <HAL_I2C_MspInit+0xbc>)
 800512c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800512e:	2380      	movs	r3, #128	@ 0x80
 8005130:	039b      	lsls	r3, r3, #14
 8005132:	4013      	ands	r3, r2
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b017      	add	sp, #92	@ 0x5c
 800513e:	bd90      	pop	{r4, r7, pc}
 8005140:	40005400 	.word	0x40005400
 8005144:	40021000 	.word	0x40021000
 8005148:	50000400 	.word	0x50000400

0800514c <i2cSend>:
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
lsm6ds_state_t i2cSend(lsm6ds_serialInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 800514c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514e:	b08b      	sub	sp, #44	@ 0x2c
 8005150:	af04      	add	r7, sp, #16
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	0008      	movs	r0, r1
 8005156:	0011      	movs	r1, r2
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	260a      	movs	r6, #10
 800515c:	19bb      	adds	r3, r7, r6
 800515e:	1c02      	adds	r2, r0, #0
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	2508      	movs	r5, #8
 8005164:	197b      	adds	r3, r7, r5
 8005166:	1c0a      	adds	r2, r1, #0
 8005168:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Write(i2c->i2c, devAddr, memAddr,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2117      	movs	r1, #23
 8005178:	187c      	adds	r4, r7, r1
 800517a:	1979      	adds	r1, r7, r5
 800517c:	880d      	ldrh	r5, [r1, #0]
 800517e:	19b9      	adds	r1, r7, r6
 8005180:	8809      	ldrh	r1, [r1, #0]
 8005182:	9302      	str	r3, [sp, #8]
 8005184:	9201      	str	r2, [sp, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	2301      	movs	r3, #1
 800518c:	002a      	movs	r2, r5
 800518e:	f7fc fa1f 	bl	80015d0 <HAL_I2C_Mem_Write>
 8005192:	0003      	movs	r3, r0
 8005194:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->sendTimeout);

	if (state == HAL_OK)
 8005196:	2117      	movs	r1, #23
 8005198:	187b      	adds	r3, r7, r1
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <i2cSend+0x58>
		return LSM6DS_STATE_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e007      	b.n	80051b4 <i2cSend+0x68>
	else if (state == HAL_TIMEOUT)
 80051a4:	2317      	movs	r3, #23
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d101      	bne.n	80051b2 <i2cSend+0x66>
		return LSM6DS_STATE_TIMEOUT;
 80051ae:	2302      	movs	r3, #2
 80051b0:	e000      	b.n	80051b4 <i2cSend+0x68>
	else
		return LSM6DS_STATE_ERR;
 80051b2:	2301      	movs	r3, #1
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b007      	add	sp, #28
 80051ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051bc <i2cReceive>:

//port
lsm6ds_state_t i2cReceive(lsm6ds_serialInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 80051bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051be:	b08b      	sub	sp, #44	@ 0x2c
 80051c0:	af04      	add	r7, sp, #16
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	0008      	movs	r0, r1
 80051c6:	0011      	movs	r1, r2
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	260a      	movs	r6, #10
 80051cc:	19bb      	adds	r3, r7, r6
 80051ce:	1c02      	adds	r2, r0, #0
 80051d0:	801a      	strh	r2, [r3, #0]
 80051d2:	2508      	movs	r5, #8
 80051d4:	197b      	adds	r3, r7, r5
 80051d6:	1c0a      	adds	r2, r1, #0
 80051d8:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Read(i2c->i2c, devAddr, memAddr,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2117      	movs	r1, #23
 80051e8:	187c      	adds	r4, r7, r1
 80051ea:	1979      	adds	r1, r7, r5
 80051ec:	880d      	ldrh	r5, [r1, #0]
 80051ee:	19b9      	adds	r1, r7, r6
 80051f0:	8809      	ldrh	r1, [r1, #0]
 80051f2:	9302      	str	r3, [sp, #8]
 80051f4:	9201      	str	r2, [sp, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	2301      	movs	r3, #1
 80051fc:	002a      	movs	r2, r5
 80051fe:	f7fc fb15 	bl	800182c <HAL_I2C_Mem_Read>
 8005202:	0003      	movs	r3, r0
 8005204:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->receiveTimeout);

	if (state == HAL_OK)
 8005206:	2117      	movs	r1, #23
 8005208:	187b      	adds	r3, r7, r1
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <i2cReceive+0x58>
		return LSM6DS_STATE_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e007      	b.n	8005224 <i2cReceive+0x68>
	else if (state == HAL_TIMEOUT)
 8005214:	2317      	movs	r3, #23
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d101      	bne.n	8005222 <i2cReceive+0x66>
		return LSM6DS_STATE_TIMEOUT;
 800521e:	2302      	movs	r3, #2
 8005220:	e000      	b.n	8005224 <i2cReceive+0x68>
	else
		return LSM6DS_STATE_ERR;
 8005222:	2301      	movs	r3, #1
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	b007      	add	sp, #28
 800522a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800522c <modifyReg>:
 * @param: register address
 * @param: bitmask
 * @param: value
 */
lsm6ds_state_t modifyReg(lsm6ds_sensor_t *sensor, uint16_t regAddr,
		uint8_t bitmask, uint16_t value) {
 800522c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800522e:	b089      	sub	sp, #36	@ 0x24
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	000c      	movs	r4, r1
 8005236:	0010      	movs	r0, r2
 8005238:	0019      	movs	r1, r3
 800523a:	230a      	movs	r3, #10
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	1c22      	adds	r2, r4, #0
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	2209      	movs	r2, #9
 8005244:	18bb      	adds	r3, r7, r2
 8005246:	1c02      	adds	r2, r0, #0
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	1dbb      	adds	r3, r7, #6
 800524c:	1c0a      	adds	r2, r1, #0
 800524e:	801a      	strh	r2, [r3, #0]

	uint8_t readedReg = 0;
 8005250:	2516      	movs	r5, #22
 8005252:	197b      	adds	r3, r7, r5
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8005258:	2617      	movs	r6, #23
 800525a:	19bb      	adds	r3, r7, r6
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]

	//read original register
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr,
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8999      	ldrh	r1, [r3, #12]
 8005266:	19bc      	adds	r4, r7, r6
 8005268:	197d      	adds	r5, r7, r5
 800526a:	230a      	movs	r3, #10
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	881a      	ldrh	r2, [r3, #0]
 8005270:	2301      	movs	r3, #1
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	002b      	movs	r3, r5
 8005276:	f7ff ffa1 	bl	80051bc <i2cReceive>
 800527a:	0003      	movs	r3, r0
 800527c:	7023      	strb	r3, [r4, #0]
			&readedReg, 1);

	if (state != LSM6DS_STATE_OK)
 800527e:	19bb      	adds	r3, r7, r6
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <modifyReg+0x60>
		return state;
 8005286:	19bb      	adds	r3, r7, r6
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	e02c      	b.n	80052e6 <modifyReg+0xba>

	//clear bits corresponding to mask
	readedReg &= ~(bitmask);
 800528c:	2009      	movs	r0, #9
 800528e:	183b      	adds	r3, r7, r0
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	b25b      	sxtb	r3, r3
 8005294:	43db      	mvns	r3, r3
 8005296:	b25b      	sxtb	r3, r3
 8005298:	2116      	movs	r1, #22
 800529a:	187a      	adds	r2, r7, r1
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	b252      	sxtb	r2, r2
 80052a0:	4013      	ands	r3, r2
 80052a2:	b25b      	sxtb	r3, r3
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	701a      	strb	r2, [r3, #0]

	//modify register
	uint8_t regToWrite = readedReg | (bitmask & value);
 80052aa:	1dbb      	adds	r3, r7, #6
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	183a      	adds	r2, r7, r0
 80052b2:	7812      	ldrb	r2, [r2, #0]
 80052b4:	4013      	ands	r3, r2
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	b25a      	sxtb	r2, r3
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b25b      	sxtb	r3, r3
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	2415      	movs	r4, #21
 80052c8:	193b      	adds	r3, r7, r4
 80052ca:	701a      	strb	r2, [r3, #0]

	//write register
	return i2cSend(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr, &regToWrite,
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8999      	ldrh	r1, [r3, #12]
 80052d2:	193c      	adds	r4, r7, r4
 80052d4:	230a      	movs	r3, #10
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	881a      	ldrh	r2, [r3, #0]
 80052da:	2301      	movs	r3, #1
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	0023      	movs	r3, r4
 80052e0:	f7ff ff34 	bl	800514c <i2cSend>
 80052e4:	0003      	movs	r3, r0
			1);

}
 80052e6:	0018      	movs	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b007      	add	sp, #28
 80052ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052ee <lsm6ds_init>:
 * @param: rxTimeout
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_init(lsm6ds_sensor_t *sensor, uint16_t devAddr,
		I2C_HandleTypeDef *i2c, uint32_t txTimeout, uint32_t rxTimeout) { //port
 80052ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f0:	b089      	sub	sp, #36	@ 0x24
 80052f2:	af02      	add	r7, sp, #8
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
 80052fa:	200a      	movs	r0, #10
 80052fc:	183b      	adds	r3, r7, r0
 80052fe:	1c0a      	adds	r2, r1, #0
 8005300:	801a      	strh	r2, [r3, #0]

	sensor->deviceAddr = devAddr;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	183a      	adds	r2, r7, r0
 8005306:	8812      	ldrh	r2, [r2, #0]
 8005308:	819a      	strh	r2, [r3, #12]
	sensor->lsm6dsI2c.i2c = i2c;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	601a      	str	r2, [r3, #0]
	sensor->lsm6dsI2c.receiveTimeout = rxTimeout;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005314:	609a      	str	r2, [r3, #8]
	sensor->lsm6dsI2c.sendTimeout = txTimeout;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	605a      	str	r2, [r3, #4]

	memset(&sensor->outGR, 0, sizeof(sensor->outGR));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3314      	adds	r3, #20
 8005320:	2206      	movs	r2, #6
 8005322:	2100      	movs	r1, #0
 8005324:	0018      	movs	r0, r3
 8005326:	f000 fdff 	bl	8005f28 <memset>
	memset(&sensor->outXL, 0, sizeof(sensor->outXL));
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	330e      	adds	r3, #14
 800532e:	2206      	movs	r2, #6
 8005330:	2100      	movs	r1, #0
 8005332:	0018      	movs	r0, r3
 8005334:	f000 fdf8 	bl	8005f28 <memset>
	sensor->outTemperature = 0;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	835a      	strh	r2, [r3, #26]

	//check communication
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 800533e:	2417      	movs	r4, #23
 8005340:	193b      	adds	r3, r7, r4
 8005342:	2201      	movs	r2, #1
 8005344:	701a      	strb	r2, [r3, #0]
	uint8_t receivedWhoIAm = 0;
 8005346:	2616      	movs	r6, #22
 8005348:	19bb      	adds	r3, r7, r6
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr,
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8999      	ldrh	r1, [r3, #12]
 8005354:	0025      	movs	r5, r4
 8005356:	193c      	adds	r4, r7, r4
 8005358:	19bb      	adds	r3, r7, r6
 800535a:	2201      	movs	r2, #1
 800535c:	9200      	str	r2, [sp, #0]
 800535e:	220f      	movs	r2, #15
 8005360:	f7ff ff2c 	bl	80051bc <i2cReceive>
 8005364:	0003      	movs	r3, r0
 8005366:	7023      	strb	r3, [r4, #0]
	LSM6DS_REG_WHO_AM_I, &receivedWhoIAm, 1);
	if (state == LSM6DS_STATE_ERR)
 8005368:	197b      	adds	r3, r7, r5
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <lsm6ds_init+0x86>
		return LSM6DS_STATE_ERR_SERIAL;
 8005370:	2303      	movs	r3, #3
 8005372:	e00f      	b.n	8005394 <lsm6ds_init+0xa6>
	else if (state == LSM6DS_STATE_TIMEOUT)
 8005374:	2217      	movs	r2, #23
 8005376:	18bb      	adds	r3, r7, r2
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d102      	bne.n	8005384 <lsm6ds_init+0x96>
		return state;
 800537e:	18bb      	adds	r3, r7, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	e007      	b.n	8005394 <lsm6ds_init+0xa6>
	else {
		if (receivedWhoIAm == LSM6DS_WHO_AM_I)
 8005384:	2316      	movs	r3, #22
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b6a      	cmp	r3, #106	@ 0x6a
 800538c:	d101      	bne.n	8005392 <lsm6ds_init+0xa4>
			return LSM6DS_STATE_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	e000      	b.n	8005394 <lsm6ds_init+0xa6>
		else
			return LSM6DS_STATE_WRONG_WHOAMI;
 8005392:	2304      	movs	r3, #4
	}

}
 8005394:	0018      	movs	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	b007      	add	sp, #28
 800539a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800539c <lsm6ds_setInt1Drdy>:
 * @param: sensor
 * @param: LSM6DS_INT1_DRDY_G/XL/DIS
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setInt1Drdy(lsm6ds_sensor_t *sensor, uint8_t interrupt){
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	000a      	movs	r2, r1
 80053a6:	1cfb      	adds	r3, r7, #3
 80053a8:	701a      	strb	r2, [r3, #0]

	return modifyReg(sensor, LSM6DS_REG_INT1_CTRL, LSM6DS_MASK_INT1_DRDY_G_XL, interrupt);
 80053aa:	1cfb      	adds	r3, r7, #3
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	2203      	movs	r2, #3
 80053b4:	210d      	movs	r1, #13
 80053b6:	f7ff ff39 	bl	800522c <modifyReg>
 80053ba:	0003      	movs	r3, r0

}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <lsm6ds_setGROutputDataRate>:
 * @param: sensor
 * @param: LSM6DS_ODR_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGROutputDataRate(lsm6ds_sensor_t *sensor, uint8_t odr) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	000a      	movs	r2, r1
 80053ce:	1cfb      	adds	r3, r7, #3
 80053d0:	701a      	strb	r2, [r3, #0]
	return modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_ODR_G, odr);
 80053d2:	1cfb      	adds	r3, r7, #3
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	22f0      	movs	r2, #240	@ 0xf0
 80053dc:	2111      	movs	r1, #17
 80053de:	f7ff ff25 	bl	800522c <modifyReg>
 80053e2:	0003      	movs	r3, r0

}
 80053e4:	0018      	movs	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b002      	add	sp, #8
 80053ea:	bd80      	pop	{r7, pc}

080053ec <lsm6ds_setGRFullScale>:
 * @param: sensor
 * @param: LSM6DS_FS_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGRFullScale(lsm6ds_sensor_t *sensor, uint8_t fs) {
 80053ec:	b5b0      	push	{r4, r5, r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	000a      	movs	r2, r1
 80053f6:	1cfb      	adds	r3, r7, #3
 80053f8:	701a      	strb	r2, [r3, #0]

	lsm6ds_state_t stat = LSM6DS_STATE_ERR;
 80053fa:	250f      	movs	r5, #15
 80053fc:	197b      	adds	r3, r7, r5
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]

	if (fs == LSM6DS_FS_G_125DPS) {
 8005402:	1cfb      	adds	r3, r7, #3
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d120      	bne.n	800544c <lsm6ds_setGRFullScale+0x60>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G,
 800540a:	197c      	adds	r4, r7, r5
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	2300      	movs	r3, #0
 8005410:	220c      	movs	r2, #12
 8005412:	2111      	movs	r1, #17
 8005414:	f7ff ff0a 	bl	800522c <modifyReg>
 8005418:	0003      	movs	r3, r0
 800541a:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_245DPS);
		if (stat != LSM6DS_STATE_OK)
 800541c:	197b      	adds	r3, r7, r5
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <lsm6ds_setGRFullScale+0x3e>
			return stat;
 8005424:	197b      	adds	r3, r7, r5
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	e037      	b.n	800549a <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125,
 800542a:	250f      	movs	r5, #15
 800542c:	197c      	adds	r4, r7, r5
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	2302      	movs	r3, #2
 8005432:	2202      	movs	r2, #2
 8005434:	2111      	movs	r1, #17
 8005436:	f7ff fef9 	bl	800522c <modifyReg>
 800543a:	0003      	movs	r3, r0
 800543c:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_125DPS);
		if (stat != LSM6DS_STATE_OK)
 800543e:	197b      	adds	r3, r7, r5
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d026      	beq.n	8005494 <lsm6ds_setGRFullScale+0xa8>
			return stat;
 8005446:	197b      	adds	r3, r7, r5
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	e026      	b.n	800549a <lsm6ds_setGRFullScale+0xae>

	} else {

		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125, 0);
 800544c:	250f      	movs	r5, #15
 800544e:	197c      	adds	r4, r7, r5
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	2300      	movs	r3, #0
 8005454:	2202      	movs	r2, #2
 8005456:	2111      	movs	r1, #17
 8005458:	f7ff fee8 	bl	800522c <modifyReg>
 800545c:	0003      	movs	r3, r0
 800545e:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 8005460:	197b      	adds	r3, r7, r5
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <lsm6ds_setGRFullScale+0x82>
			return stat;
 8005468:	197b      	adds	r3, r7, r5
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	e015      	b.n	800549a <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G, fs);
 800546e:	1cfb      	adds	r3, r7, #3
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	250f      	movs	r5, #15
 8005476:	197c      	adds	r4, r7, r5
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	220c      	movs	r2, #12
 800547c:	2111      	movs	r1, #17
 800547e:	f7ff fed5 	bl	800522c <modifyReg>
 8005482:	0003      	movs	r3, r0
 8005484:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 8005486:	197b      	adds	r3, r7, r5
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <lsm6ds_setGRFullScale+0xa8>
			return stat;
 800548e:	197b      	adds	r3, r7, r5
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	e002      	b.n	800549a <lsm6ds_setGRFullScale+0xae>

	}

	return stat;
 8005494:	230f      	movs	r3, #15
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	781b      	ldrb	r3, [r3, #0]

}
 800549a:	0018      	movs	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	b004      	add	sp, #16
 80054a0:	bdb0      	pop	{r4, r5, r7, pc}

080054a2 <lsm6ds_reset>:
 * software reset
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_reset(lsm6ds_sensor_t *sensor) {
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
	return modifyReg(sensor, LSM6DS_REG_CTRL3_C, LSM6DS_MASK_SW_RESET,
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	2301      	movs	r3, #1
 80054ae:	2201      	movs	r2, #1
 80054b0:	2112      	movs	r1, #18
 80054b2:	f7ff febb 	bl	800522c <modifyReg>
 80054b6:	0003      	movs	r3, r0
	LSM6DS_SW_RESET);
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b002      	add	sp, #8
 80054be:	bd80      	pop	{r7, pc}

080054c0 <lsm6ds_updateGR>:
 * updates gyro data in sensor struct
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_updateGR(lsm6ds_sensor_t *sensor){
 80054c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 80054c8:	250f      	movs	r5, #15
 80054ca:	197b      	adds	r3, r7, r5
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
	union{
		uint8_t raw[6];
		int16_t separated[3];
	}outputData;

	memset(&outputData, 0, sizeof(outputData));
 80054d0:	2608      	movs	r6, #8
 80054d2:	19bb      	adds	r3, r7, r6
 80054d4:	2206      	movs	r2, #6
 80054d6:	2100      	movs	r1, #0
 80054d8:	0018      	movs	r0, r3
 80054da:	f000 fd25 	bl	8005f28 <memset>

	status = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, LSM6DS_REG_OUTX_L_G, outputData.raw, 6);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8999      	ldrh	r1, [r3, #12]
 80054e4:	197c      	adds	r4, r7, r5
 80054e6:	19bb      	adds	r3, r7, r6
 80054e8:	2206      	movs	r2, #6
 80054ea:	9200      	str	r2, [sp, #0]
 80054ec:	2222      	movs	r2, #34	@ 0x22
 80054ee:	f7ff fe65 	bl	80051bc <i2cReceive>
 80054f2:	0003      	movs	r3, r0
 80054f4:	7023      	strb	r3, [r4, #0]

	if(status != LSM6DS_STATE_OK)
 80054f6:	197b      	adds	r3, r7, r5
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <lsm6ds_updateGR+0x44>
		return status;
 80054fe:	197b      	adds	r3, r7, r5
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	e012      	b.n	800552a <lsm6ds_updateGR+0x6a>

	sensor->outGR.x = outputData.separated[0];
 8005504:	2108      	movs	r1, #8
 8005506:	187b      	adds	r3, r7, r1
 8005508:	2200      	movs	r2, #0
 800550a:	5e9a      	ldrsh	r2, [r3, r2]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	829a      	strh	r2, [r3, #20]
	sensor->outGR.y = outputData.separated[1];
 8005510:	187b      	adds	r3, r7, r1
 8005512:	2202      	movs	r2, #2
 8005514:	5e9a      	ldrsh	r2, [r3, r2]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	82da      	strh	r2, [r3, #22]
	sensor->outGR.z = outputData.separated[2];
 800551a:	187b      	adds	r3, r7, r1
 800551c:	2204      	movs	r2, #4
 800551e:	5e9a      	ldrsh	r2, [r3, r2]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	831a      	strh	r2, [r3, #24]


	return status;
 8005524:	230f      	movs	r3, #15
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	781b      	ldrb	r3, [r3, #0]

}
 800552a:	0018      	movs	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	b005      	add	sp, #20
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005534 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005534:	b5b0      	push	{r4, r5, r7, lr}
 8005536:	b08a      	sub	sp, #40	@ 0x28
 8005538:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800553a:	f7fb f877 	bl	800062c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800553e:	f000 f945 	bl	80057cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005542:	f7ff fce5 	bl	8004f10 <MX_GPIO_Init>
	MX_DMA_Init();
 8005546:	f7ff f89d 	bl	8004684 <MX_DMA_Init>
	MX_USART1_UART_Init();
 800554a:	f000 faa3 	bl	8005a94 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800554e:	f000 faef 	bl	8005b30 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8005552:	f7ff fd59 	bl	8005008 <MX_I2C1_Init>
	MX_SPI1_Init();
 8005556:	f000 f9b1 	bl	80058bc <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	lsm6ds_state_t sensorStat = lsm6ds_init(&mems, LSM6DS_ADDR_SA0_L, &hi2c1,
 800555a:	2516      	movs	r5, #22
 800555c:	197c      	adds	r4, r7, r5
 800555e:	4a8b      	ldr	r2, [pc, #556]	@ (800578c <main+0x258>)
 8005560:	488b      	ldr	r0, [pc, #556]	@ (8005790 <main+0x25c>)
 8005562:	2364      	movs	r3, #100	@ 0x64
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2364      	movs	r3, #100	@ 0x64
 8005568:	21d4      	movs	r1, #212	@ 0xd4
 800556a:	f7ff fec0 	bl	80052ee <lsm6ds_init>
 800556e:	0003      	movs	r3, r0
 8005570:	7023      	strb	r3, [r4, #0]
			100, 100);

	espAt_init(&bleRadio, &huart1, 50, 2000);
 8005572:	23fa      	movs	r3, #250	@ 0xfa
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4987      	ldr	r1, [pc, #540]	@ (8005794 <main+0x260>)
 8005578:	4887      	ldr	r0, [pc, #540]	@ (8005798 <main+0x264>)
 800557a:	2232      	movs	r2, #50	@ 0x32
 800557c:	f7ff f8d0 	bl	8004720 <espAt_init>

	espAt_sendCommand(&bleRadio, G_RST);
 8005580:	4a86      	ldr	r2, [pc, #536]	@ (800579c <main+0x268>)
 8005582:	4b85      	ldr	r3, [pc, #532]	@ (8005798 <main+0x264>)
 8005584:	0011      	movs	r1, r2
 8005586:	0018      	movs	r0, r3
 8005588:	f7ff f8e0 	bl	800474c <espAt_sendCommand>
	HAL_Delay(1000);
 800558c:	23fa      	movs	r3, #250	@ 0xfa
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	0018      	movs	r0, r3
 8005592:	f7fb f8d1 	bl	8000738 <HAL_Delay>

	espAt_sendString(&bleRadio, S_BHN, "bartsHID");
 8005596:	4a82      	ldr	r2, [pc, #520]	@ (80057a0 <main+0x26c>)
 8005598:	4982      	ldr	r1, [pc, #520]	@ (80057a4 <main+0x270>)
 800559a:	4b7f      	ldr	r3, [pc, #508]	@ (8005798 <main+0x264>)
 800559c:	0018      	movs	r0, r3
 800559e:	f7ff fb5b 	bl	8004c58 <espAt_sendString>
	HAL_Delay(200);
 80055a2:	20c8      	movs	r0, #200	@ 0xc8
 80055a4:	f7fb f8c8 	bl	8000738 <HAL_Delay>
	espAt_sendParams(&bleRadio, P_BHI, 1, 1);
 80055a8:	497f      	ldr	r1, [pc, #508]	@ (80057a8 <main+0x274>)
 80055aa:	487b      	ldr	r0, [pc, #492]	@ (8005798 <main+0x264>)
 80055ac:	2301      	movs	r3, #1
 80055ae:	2201      	movs	r2, #1
 80055b0:	f7ff f97a 	bl	80048a8 <espAt_sendParams>
	HAL_Delay(200);
 80055b4:	20c8      	movs	r0, #200	@ 0xc8
 80055b6:	f7fb f8bf 	bl	8000738 <HAL_Delay>

	//change baudrate
	espAt_sendParams(&bleRadio, P_UC, 5, 3000000, 8, 1, 0, 0);
 80055ba:	4a7c      	ldr	r2, [pc, #496]	@ (80057ac <main+0x278>)
 80055bc:	497c      	ldr	r1, [pc, #496]	@ (80057b0 <main+0x27c>)
 80055be:	4876      	ldr	r0, [pc, #472]	@ (8005798 <main+0x264>)
 80055c0:	2300      	movs	r3, #0
 80055c2:	9303      	str	r3, [sp, #12]
 80055c4:	2300      	movs	r3, #0
 80055c6:	9302      	str	r3, [sp, #8]
 80055c8:	2301      	movs	r3, #1
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	2308      	movs	r3, #8
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	0013      	movs	r3, r2
 80055d2:	2205      	movs	r2, #5
 80055d4:	f7ff f968 	bl	80048a8 <espAt_sendParams>
	HAL_Delay(200);
 80055d8:	20c8      	movs	r0, #200	@ 0xc8
 80055da:	f7fb f8ad 	bl	8000738 <HAL_Delay>
	HAL_UART_ChangeSpeed(&huart1, 3000000);
 80055de:	4a73      	ldr	r2, [pc, #460]	@ (80057ac <main+0x278>)
 80055e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005794 <main+0x260>)
 80055e2:	0011      	movs	r1, r2
 80055e4:	0018      	movs	r0, r3
 80055e6:	f000 fc0d 	bl	8005e04 <HAL_UART_ChangeSpeed>

	sensorStat = lsm6ds_reset(&mems);
 80055ea:	197c      	adds	r4, r7, r5
 80055ec:	4b68      	ldr	r3, [pc, #416]	@ (8005790 <main+0x25c>)
 80055ee:	0018      	movs	r0, r3
 80055f0:	f7ff ff57 	bl	80054a2 <lsm6ds_reset>
 80055f4:	0003      	movs	r3, r0
 80055f6:	7023      	strb	r3, [r4, #0]

//	sensorStat = lsm6ds_setXLOutputDataRate(&mems, LSM6DS_ODR_XL_12_5_HZ);
	//	sensorStat = lsm6ds_setXLFullScale(&mems, LSM6DS_FS_XL_16G);

//	sensorStat = lsm6ds_setGRLowPass(&mems, LSM6DS_FTYPE_LOW);
	sensorStat = lsm6ds_setGROutputDataRate(&mems, LSM6DS_ODR_G_52_HZ);
 80055f8:	197c      	adds	r4, r7, r5
 80055fa:	4b65      	ldr	r3, [pc, #404]	@ (8005790 <main+0x25c>)
 80055fc:	2130      	movs	r1, #48	@ 0x30
 80055fe:	0018      	movs	r0, r3
 8005600:	f7ff fee0 	bl	80053c4 <lsm6ds_setGROutputDataRate>
 8005604:	0003      	movs	r3, r0
 8005606:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setGRFullScale(&mems, LSM6DS_FS_G_2000DPS);
 8005608:	197c      	adds	r4, r7, r5
 800560a:	4b61      	ldr	r3, [pc, #388]	@ (8005790 <main+0x25c>)
 800560c:	210c      	movs	r1, #12
 800560e:	0018      	movs	r0, r3
 8005610:	f7ff feec 	bl	80053ec <lsm6ds_setGRFullScale>
 8005614:	0003      	movs	r3, r0
 8005616:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setInt1Drdy(&mems, LSM6DS_INT1_DRDY_G);
 8005618:	197c      	adds	r4, r7, r5
 800561a:	4b5d      	ldr	r3, [pc, #372]	@ (8005790 <main+0x25c>)
 800561c:	2102      	movs	r1, #2
 800561e:	0018      	movs	r0, r3
 8005620:	f7ff febc 	bl	800539c <lsm6ds_setInt1Drdy>
 8005624:	0003      	movs	r3, r0
 8005626:	7023      	strb	r3, [r4, #0]

	int32_t sensitivity = 250; //10000 are 1
 8005628:	23fa      	movs	r3, #250	@ 0xfa
 800562a:	613b      	str	r3, [r7, #16]
	int32_t acceleration = 100; //1 - no acceleration, 0- no movement
 800562c:	2364      	movs	r3, #100	@ 0x64
 800562e:	60fb      	str	r3, [r7, #12]

	uint8_t newDataAvailable = 0;
 8005630:	230b      	movs	r3, #11
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
	uint8_t blueButtonState = 0;
 8005638:	2317      	movs	r3, #23
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]

	int32_t maxVal = 100;
 8005640:	2364      	movs	r3, #100	@ 0x64
 8005642:	607b      	str	r3, [r7, #4]

//		sensorStat = lsm6ds_newDataAvailableCheck(&mems, &newDataAvailable);

//		if (newDataAvailable & LSM6DS_GDA) {

		if (flagDrdyG) {
 8005644:	4b5b      	ldr	r3, [pc, #364]	@ (80057b4 <main+0x280>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0fa      	beq.n	8005644 <main+0x110>
			flagDrdyG = 0;
 800564e:	4b59      	ldr	r3, [pc, #356]	@ (80057b4 <main+0x280>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]

			sensorStat = lsm6ds_updateGR(&mems);
 8005654:	2316      	movs	r3, #22
 8005656:	18fc      	adds	r4, r7, r3
 8005658:	4b4d      	ldr	r3, [pc, #308]	@ (8005790 <main+0x25c>)
 800565a:	0018      	movs	r0, r3
 800565c:	f7ff ff30 	bl	80054c0 <lsm6ds_updateGR>
 8005660:	0003      	movs	r3, r0
 8005662:	7023      	strb	r3, [r4, #0]

			//sensitivity
			amx = ((int32_t) mems.outGR.x * sensitivity) / 10000;
 8005664:	4b4a      	ldr	r3, [pc, #296]	@ (8005790 <main+0x25c>)
 8005666:	2214      	movs	r2, #20
 8005668:	5e9b      	ldrsh	r3, [r3, r2]
 800566a:	001a      	movs	r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4353      	muls	r3, r2
 8005670:	4951      	ldr	r1, [pc, #324]	@ (80057b8 <main+0x284>)
 8005672:	0018      	movs	r0, r3
 8005674:	f7fa fdd8 	bl	8000228 <__divsi3>
 8005678:	0003      	movs	r3, r0
 800567a:	001a      	movs	r2, r3
 800567c:	4b4f      	ldr	r3, [pc, #316]	@ (80057bc <main+0x288>)
 800567e:	601a      	str	r2, [r3, #0]
			amz = ((int32_t) mems.outGR.z * sensitivity) / 10000;
 8005680:	4b43      	ldr	r3, [pc, #268]	@ (8005790 <main+0x25c>)
 8005682:	2218      	movs	r2, #24
 8005684:	5e9b      	ldrsh	r3, [r3, r2]
 8005686:	001a      	movs	r2, r3
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4353      	muls	r3, r2
 800568c:	494a      	ldr	r1, [pc, #296]	@ (80057b8 <main+0x284>)
 800568e:	0018      	movs	r0, r3
 8005690:	f7fa fdca 	bl	8000228 <__divsi3>
 8005694:	0003      	movs	r3, r0
 8005696:	001a      	movs	r2, r3
 8005698:	4b49      	ldr	r3, [pc, #292]	@ (80057c0 <main+0x28c>)
 800569a:	601a      	str	r2, [r3, #0]

			//acceleration

			//counting
			amx = (abs(amx) * amx * acceleration) / 1000;
 800569c:	4b47      	ldr	r3, [pc, #284]	@ (80057bc <main+0x288>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	17d9      	asrs	r1, r3, #31
 80056a2:	185a      	adds	r2, r3, r1
 80056a4:	404a      	eors	r2, r1
 80056a6:	4b45      	ldr	r3, [pc, #276]	@ (80057bc <main+0x288>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4353      	muls	r3, r2
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4353      	muls	r3, r2
 80056b0:	22fa      	movs	r2, #250	@ 0xfa
 80056b2:	0091      	lsls	r1, r2, #2
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7fa fdb7 	bl	8000228 <__divsi3>
 80056ba:	0003      	movs	r3, r0
 80056bc:	001a      	movs	r2, r3
 80056be:	4b3f      	ldr	r3, [pc, #252]	@ (80057bc <main+0x288>)
 80056c0:	601a      	str	r2, [r3, #0]
			amz = (abs(amz) * amz * acceleration) / 1000;
 80056c2:	4b3f      	ldr	r3, [pc, #252]	@ (80057c0 <main+0x28c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	17d9      	asrs	r1, r3, #31
 80056c8:	185a      	adds	r2, r3, r1
 80056ca:	404a      	eors	r2, r1
 80056cc:	4b3c      	ldr	r3, [pc, #240]	@ (80057c0 <main+0x28c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4353      	muls	r3, r2
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4353      	muls	r3, r2
 80056d6:	22fa      	movs	r2, #250	@ 0xfa
 80056d8:	0091      	lsls	r1, r2, #2
 80056da:	0018      	movs	r0, r3
 80056dc:	f7fa fda4 	bl	8000228 <__divsi3>
 80056e0:	0003      	movs	r3, r0
 80056e2:	001a      	movs	r2, r3
 80056e4:	4b36      	ldr	r3, [pc, #216]	@ (80057c0 <main+0x28c>)
 80056e6:	601a      	str	r2, [r3, #0]
//			uint32_t accZ = amz/40;
//			amx *= accelerationSteps[accX];
//			amz *= accelerationSteps[accZ];

			//to high value secure
			if (amx > maxVal)
 80056e8:	4b34      	ldr	r3, [pc, #208]	@ (80057bc <main+0x288>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	da02      	bge.n	80056f8 <main+0x1c4>
				amx = maxVal;
 80056f2:	4b32      	ldr	r3, [pc, #200]	@ (80057bc <main+0x288>)
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	601a      	str	r2, [r3, #0]
			if (amx < -maxVal)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	425a      	negs	r2, r3
 80056fc:	4b2f      	ldr	r3, [pc, #188]	@ (80057bc <main+0x288>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	dd03      	ble.n	800570c <main+0x1d8>
				amx = -maxVal;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	425a      	negs	r2, r3
 8005708:	4b2c      	ldr	r3, [pc, #176]	@ (80057bc <main+0x288>)
 800570a:	601a      	str	r2, [r3, #0]

			if (amz > maxVal)
 800570c:	4b2c      	ldr	r3, [pc, #176]	@ (80057c0 <main+0x28c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	da02      	bge.n	800571c <main+0x1e8>
				amz = maxVal;
 8005716:	4b2a      	ldr	r3, [pc, #168]	@ (80057c0 <main+0x28c>)
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
			if (amz < -maxVal)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	425a      	negs	r2, r3
 8005720:	4b27      	ldr	r3, [pc, #156]	@ (80057c0 <main+0x28c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	dd03      	ble.n	8005730 <main+0x1fc>
				amz = -maxVal;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	425a      	negs	r2, r3
 800572c:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <main+0x28c>)
 800572e:	601a      	str	r2, [r3, #0]

			//revert sign
			amz *= -1;
 8005730:	4b23      	ldr	r3, [pc, #140]	@ (80057c0 <main+0x28c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	425a      	negs	r2, r3
 8005736:	4b22      	ldr	r3, [pc, #136]	@ (80057c0 <main+0x28c>)
 8005738:	601a      	str	r2, [r3, #0]
			amx *= -1;
 800573a:	4b20      	ldr	r3, [pc, #128]	@ (80057bc <main+0x288>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	425a      	negs	r2, r3
 8005740:	4b1e      	ldr	r3, [pc, #120]	@ (80057bc <main+0x288>)
 8005742:	601a      	str	r2, [r3, #0]

			if (HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin)
 8005744:	2380      	movs	r3, #128	@ 0x80
 8005746:	019b      	lsls	r3, r3, #6
 8005748:	4a1e      	ldr	r2, [pc, #120]	@ (80057c4 <main+0x290>)
 800574a:	0019      	movs	r1, r3
 800574c:	0010      	movs	r0, r2
 800574e:	f7fb fe2b 	bl	80013a8 <HAL_GPIO_ReadPin>
 8005752:	1e03      	subs	r3, r0, #0
 8005754:	d104      	bne.n	8005760 <main+0x22c>
					== GPIO_PIN_RESET)
				blueButtonState = 1;
 8005756:	2317      	movs	r3, #23
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e003      	b.n	8005768 <main+0x234>
			else
				blueButtonState = 0;
 8005760:	2317      	movs	r3, #23
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]

			espAt_sendParams(&bleRadio, P_BHM, 4, blueButtonState, amz, amx, 0);
 8005768:	2317      	movs	r3, #23
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	781c      	ldrb	r4, [r3, #0]
 800576e:	4b14      	ldr	r3, [pc, #80]	@ (80057c0 <main+0x28c>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b12      	ldr	r3, [pc, #72]	@ (80057bc <main+0x288>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4914      	ldr	r1, [pc, #80]	@ (80057c8 <main+0x294>)
 8005778:	4807      	ldr	r0, [pc, #28]	@ (8005798 <main+0x264>)
 800577a:	2500      	movs	r5, #0
 800577c:	9502      	str	r5, [sp, #8]
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	9200      	str	r2, [sp, #0]
 8005782:	0023      	movs	r3, r4
 8005784:	2204      	movs	r2, #4
 8005786:	f7ff f88f 	bl	80048a8 <espAt_sendParams>
		if (flagDrdyG) {
 800578a:	e75b      	b.n	8005644 <main+0x110>
 800578c:	2000002c 	.word	0x2000002c
 8005790:	2000008c 	.word	0x2000008c
 8005794:	20000118 	.word	0x20000118
 8005798:	20000080 	.word	0x20000080
 800579c:	08005fbc 	.word	0x08005fbc
 80057a0:	08005fc0 	.word	0x08005fc0
 80057a4:	08005fcc 	.word	0x08005fcc
 80057a8:	08005fd8 	.word	0x08005fd8
 80057ac:	002dc6c0 	.word	0x002dc6c0
 80057b0:	08005fe4 	.word	0x08005fe4
 80057b4:	200000b0 	.word	0x200000b0
 80057b8:	00002710 	.word	0x00002710
 80057bc:	200000a8 	.word	0x200000a8
 80057c0:	200000ac 	.word	0x200000ac
 80057c4:	50000800 	.word	0x50000800
 80057c8:	08005ff0 	.word	0x08005ff0

080057cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b093      	sub	sp, #76	@ 0x4c
 80057d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80057d2:	2410      	movs	r4, #16
 80057d4:	193b      	adds	r3, r7, r4
 80057d6:	0018      	movs	r0, r3
 80057d8:	2338      	movs	r3, #56	@ 0x38
 80057da:	001a      	movs	r2, r3
 80057dc:	2100      	movs	r1, #0
 80057de:	f000 fba3 	bl	8005f28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80057e2:	003b      	movs	r3, r7
 80057e4:	0018      	movs	r0, r3
 80057e6:	2310      	movs	r3, #16
 80057e8:	001a      	movs	r2, r3
 80057ea:	2100      	movs	r1, #0
 80057ec:	f000 fb9c 	bl	8005f28 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7fc fce1 	bl	80021bc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80057fa:	193b      	adds	r3, r7, r4
 80057fc:	2202      	movs	r2, #2
 80057fe:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005800:	193b      	adds	r3, r7, r4
 8005802:	2280      	movs	r2, #128	@ 0x80
 8005804:	0052      	lsls	r2, r2, #1
 8005806:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005808:	0021      	movs	r1, r4
 800580a:	187b      	adds	r3, r7, r1
 800580c:	2200      	movs	r2, #0
 800580e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005810:	187b      	adds	r3, r7, r1
 8005812:	2240      	movs	r2, #64	@ 0x40
 8005814:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005816:	187b      	adds	r3, r7, r1
 8005818:	2202      	movs	r2, #2
 800581a:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800581c:	187b      	adds	r3, r7, r1
 800581e:	2202      	movs	r2, #2
 8005820:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005822:	187b      	adds	r3, r7, r1
 8005824:	2200      	movs	r2, #0
 8005826:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8005828:	187b      	adds	r3, r7, r1
 800582a:	2208      	movs	r2, #8
 800582c:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800582e:	187b      	adds	r3, r7, r1
 8005830:	2280      	movs	r2, #128	@ 0x80
 8005832:	0292      	lsls	r2, r2, #10
 8005834:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005836:	187b      	adds	r3, r7, r1
 8005838:	2280      	movs	r2, #128	@ 0x80
 800583a:	0492      	lsls	r2, r2, #18
 800583c:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800583e:	187b      	adds	r3, r7, r1
 8005840:	2280      	movs	r2, #128	@ 0x80
 8005842:	0592      	lsls	r2, r2, #22
 8005844:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005846:	187b      	adds	r3, r7, r1
 8005848:	0018      	movs	r0, r3
 800584a:	f7fc fd03 	bl	8002254 <HAL_RCC_OscConfig>
 800584e:	1e03      	subs	r3, r0, #0
 8005850:	d001      	beq.n	8005856 <SystemClock_Config+0x8a>
		Error_Handler();
 8005852:	f000 f82d 	bl	80058b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005856:	003b      	movs	r3, r7
 8005858:	2207      	movs	r2, #7
 800585a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800585c:	003b      	movs	r3, r7
 800585e:	2202      	movs	r2, #2
 8005860:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005862:	003b      	movs	r3, r7
 8005864:	2200      	movs	r2, #0
 8005866:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005868:	003b      	movs	r3, r7
 800586a:	2200      	movs	r2, #0
 800586c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800586e:	003b      	movs	r3, r7
 8005870:	2102      	movs	r1, #2
 8005872:	0018      	movs	r0, r3
 8005874:	f7fd f808 	bl	8002888 <HAL_RCC_ClockConfig>
 8005878:	1e03      	subs	r3, r0, #0
 800587a:	d001      	beq.n	8005880 <SystemClock_Config+0xb4>
		Error_Handler();
 800587c:	f000 f818 	bl	80058b0 <Error_Handler>
	}
}
 8005880:	46c0      	nop			@ (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b013      	add	sp, #76	@ 0x4c
 8005886:	bd90      	pop	{r4, r7, pc}

08005888 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	0002      	movs	r2, r0
 8005890:	1dbb      	adds	r3, r7, #6
 8005892:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == INT1_Pin) {
 8005894:	1dbb      	adds	r3, r7, #6
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d102      	bne.n	80058a2 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		flagDrdyG = 1;
 800589c:	4b03      	ldr	r3, [pc, #12]	@ (80058ac <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
	}
}
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b002      	add	sp, #8
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	200000b0 	.word	0x200000b0

080058b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80058b4:	b672      	cpsid	i
}
 80058b6:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80058b8:	46c0      	nop			@ (mov r8, r8)
 80058ba:	e7fd      	b.n	80058b8 <Error_Handler+0x8>

080058bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80058c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005934 <MX_SPI1_Init+0x78>)
 80058c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80058c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058c8:	2282      	movs	r2, #130	@ 0x82
 80058ca:	0052      	lsls	r2, r2, #1
 80058cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80058ce:	4b18      	ldr	r3, [pc, #96]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80058d4:	4b16      	ldr	r3, [pc, #88]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058d6:	22c0      	movs	r2, #192	@ 0xc0
 80058d8:	0092      	lsls	r2, r2, #2
 80058da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80058dc:	4b14      	ldr	r3, [pc, #80]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058de:	2200      	movs	r2, #0
 80058e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058e2:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80058e8:	4b11      	ldr	r3, [pc, #68]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058ea:	2280      	movs	r2, #128	@ 0x80
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80058fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005930 <MX_SPI1_Init+0x74>)
 80058fe:	2200      	movs	r2, #0
 8005900:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005902:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <MX_SPI1_Init+0x74>)
 8005904:	2200      	movs	r2, #0
 8005906:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005908:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <MX_SPI1_Init+0x74>)
 800590a:	2207      	movs	r2, #7
 800590c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800590e:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <MX_SPI1_Init+0x74>)
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005914:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <MX_SPI1_Init+0x74>)
 8005916:	2208      	movs	r2, #8
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800591a:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <MX_SPI1_Init+0x74>)
 800591c:	0018      	movs	r0, r3
 800591e:	f7fd fb15 	bl	8002f4c <HAL_SPI_Init>
 8005922:	1e03      	subs	r3, r0, #0
 8005924:	d001      	beq.n	800592a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005926:	f7ff ffc3 	bl	80058b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	200000b4 	.word	0x200000b4
 8005934:	40013000 	.word	0x40013000

08005938 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005938:	b590      	push	{r4, r7, lr}
 800593a:	b08b      	sub	sp, #44	@ 0x2c
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005940:	2414      	movs	r4, #20
 8005942:	193b      	adds	r3, r7, r4
 8005944:	0018      	movs	r0, r3
 8005946:	2314      	movs	r3, #20
 8005948:	001a      	movs	r2, r3
 800594a:	2100      	movs	r1, #0
 800594c:	f000 faec 	bl	8005f28 <memset>
  if(spiHandle->Instance==SPI1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1b      	ldr	r2, [pc, #108]	@ (80059c4 <HAL_SPI_MspInit+0x8c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d130      	bne.n	80059bc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800595a:	4b1b      	ldr	r3, [pc, #108]	@ (80059c8 <HAL_SPI_MspInit+0x90>)
 800595c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800595e:	4b1a      	ldr	r3, [pc, #104]	@ (80059c8 <HAL_SPI_MspInit+0x90>)
 8005960:	2180      	movs	r1, #128	@ 0x80
 8005962:	0149      	lsls	r1, r1, #5
 8005964:	430a      	orrs	r2, r1
 8005966:	641a      	str	r2, [r3, #64]	@ 0x40
 8005968:	4b17      	ldr	r3, [pc, #92]	@ (80059c8 <HAL_SPI_MspInit+0x90>)
 800596a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800596c:	2380      	movs	r3, #128	@ 0x80
 800596e:	015b      	lsls	r3, r3, #5
 8005970:	4013      	ands	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005976:	4b14      	ldr	r3, [pc, #80]	@ (80059c8 <HAL_SPI_MspInit+0x90>)
 8005978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800597a:	4b13      	ldr	r3, [pc, #76]	@ (80059c8 <HAL_SPI_MspInit+0x90>)
 800597c:	2101      	movs	r1, #1
 800597e:	430a      	orrs	r2, r1
 8005980:	635a      	str	r2, [r3, #52]	@ 0x34
 8005982:	4b11      	ldr	r3, [pc, #68]	@ (80059c8 <HAL_SPI_MspInit+0x90>)
 8005984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005986:	2201      	movs	r2, #1
 8005988:	4013      	ands	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800598e:	0021      	movs	r1, r4
 8005990:	187b      	adds	r3, r7, r1
 8005992:	22c2      	movs	r2, #194	@ 0xc2
 8005994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005996:	187b      	adds	r3, r7, r1
 8005998:	2202      	movs	r2, #2
 800599a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599c:	187b      	adds	r3, r7, r1
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	2200      	movs	r2, #0
 80059a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80059a8:	187b      	adds	r3, r7, r1
 80059aa:	2200      	movs	r2, #0
 80059ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ae:	187a      	adds	r2, r7, r1
 80059b0:	23a0      	movs	r3, #160	@ 0xa0
 80059b2:	05db      	lsls	r3, r3, #23
 80059b4:	0011      	movs	r1, r2
 80059b6:	0018      	movs	r0, r3
 80059b8:	f7fb fac2 	bl	8000f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80059bc:	46c0      	nop			@ (mov r8, r8)
 80059be:	46bd      	mov	sp, r7
 80059c0:	b00b      	add	sp, #44	@ 0x2c
 80059c2:	bd90      	pop	{r4, r7, pc}
 80059c4:	40013000 	.word	0x40013000
 80059c8:	40021000 	.word	0x40021000

080059cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <HAL_MspInit+0x44>)
 80059d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a10 <HAL_MspInit+0x44>)
 80059d8:	2101      	movs	r1, #1
 80059da:	430a      	orrs	r2, r1
 80059dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80059de:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <HAL_MspInit+0x44>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	2201      	movs	r2, #1
 80059e4:	4013      	ands	r3, r2
 80059e6:	607b      	str	r3, [r7, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059ea:	4b09      	ldr	r3, [pc, #36]	@ (8005a10 <HAL_MspInit+0x44>)
 80059ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059ee:	4b08      	ldr	r3, [pc, #32]	@ (8005a10 <HAL_MspInit+0x44>)
 80059f0:	2180      	movs	r1, #128	@ 0x80
 80059f2:	0549      	lsls	r1, r1, #21
 80059f4:	430a      	orrs	r2, r1
 80059f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80059f8:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <HAL_MspInit+0x44>)
 80059fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	055b      	lsls	r3, r3, #21
 8005a00:	4013      	ands	r3, r2
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a06:	46c0      	nop			@ (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b002      	add	sp, #8
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	40021000 	.word	0x40021000

08005a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	e7fd      	b.n	8005a18 <NMI_Handler+0x4>

08005a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a20:	46c0      	nop			@ (mov r8, r8)
 8005a22:	e7fd      	b.n	8005a20 <HardFault_Handler+0x4>

08005a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005a28:	46c0      	nop			@ (mov r8, r8)
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a3c:	f7fa fe60 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a40:	46c0      	nop			@ (mov r8, r8)
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	f7fb fce6 	bl	800141c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8005a50:	46c0      	nop			@ (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005a5c:	4b03      	ldr	r3, [pc, #12]	@ (8005a6c <DMA1_Channel1_IRQHandler+0x14>)
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f7fb f96c 	bl	8000d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005a64:	46c0      	nop			@ (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	46c0      	nop			@ (mov r8, r8)
 8005a6c:	20000240 	.word	0x20000240

08005a70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a74:	4b03      	ldr	r3, [pc, #12]	@ (8005a84 <USART1_IRQHandler+0x14>)
 8005a76:	0018      	movs	r0, r3
 8005a78:	f7fd fc5a 	bl	8003330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a7c:	46c0      	nop			@ (mov r8, r8)
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			@ (mov r8, r8)
 8005a84:	20000118 	.word	0x20000118

08005a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a8c:	46c0      	nop			@ (mov r8, r8)
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005a98:	4b23      	ldr	r3, [pc, #140]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005a9a:	4a24      	ldr	r2, [pc, #144]	@ (8005b2c <MX_USART1_UART_Init+0x98>)
 8005a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005a9e:	4b22      	ldr	r3, [pc, #136]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005aa0:	22e1      	movs	r2, #225	@ 0xe1
 8005aa2:	0252      	lsls	r2, r2, #9
 8005aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005aa6:	4b20      	ldr	r3, [pc, #128]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005aac:	4b1e      	ldr	r3, [pc, #120]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005aba:	220c      	movs	r2, #12
 8005abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005abe:	4b1a      	ldr	r3, [pc, #104]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ac4:	4b18      	ldr	r3, [pc, #96]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005aca:	4b17      	ldr	r3, [pc, #92]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ad0:	4b15      	ldr	r3, [pc, #84]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ad6:	4b14      	ldr	r3, [pc, #80]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005adc:	4b12      	ldr	r3, [pc, #72]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f7fd faec 	bl	80030bc <HAL_UART_Init>
 8005ae4:	1e03      	subs	r3, r0, #0
 8005ae6:	d001      	beq.n	8005aec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005ae8:	f7ff fee2 	bl	80058b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005aec:	4b0e      	ldr	r3, [pc, #56]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005aee:	2100      	movs	r1, #0
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7fe fce7 	bl	80044c4 <HAL_UARTEx_SetTxFifoThreshold>
 8005af6:	1e03      	subs	r3, r0, #0
 8005af8:	d001      	beq.n	8005afe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005afa:	f7ff fed9 	bl	80058b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005afe:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005b00:	2100      	movs	r1, #0
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7fe fd1e 	bl	8004544 <HAL_UARTEx_SetRxFifoThreshold>
 8005b08:	1e03      	subs	r3, r0, #0
 8005b0a:	d001      	beq.n	8005b10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005b0c:	f7ff fed0 	bl	80058b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005b10:	4b05      	ldr	r3, [pc, #20]	@ (8005b28 <MX_USART1_UART_Init+0x94>)
 8005b12:	0018      	movs	r0, r3
 8005b14:	f7fe fc9c 	bl	8004450 <HAL_UARTEx_DisableFifoMode>
 8005b18:	1e03      	subs	r3, r0, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005b1c:	f7ff fec8 	bl	80058b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b20:	46c0      	nop			@ (mov r8, r8)
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	20000118 	.word	0x20000118
 8005b2c:	40013800 	.word	0x40013800

08005b30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b34:	4b23      	ldr	r3, [pc, #140]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b36:	4a24      	ldr	r2, [pc, #144]	@ (8005bc8 <MX_USART2_UART_Init+0x98>)
 8005b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b3a:	4b22      	ldr	r3, [pc, #136]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b3c:	22e1      	movs	r2, #225	@ 0xe1
 8005b3e:	0252      	lsls	r2, r2, #9
 8005b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b42:	4b20      	ldr	r3, [pc, #128]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b48:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b54:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b56:	220c      	movs	r2, #12
 8005b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b60:	4b18      	ldr	r3, [pc, #96]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b66:	4b17      	ldr	r3, [pc, #92]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b6c:	4b15      	ldr	r3, [pc, #84]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b72:	4b14      	ldr	r3, [pc, #80]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b78:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f7fd fa9e 	bl	80030bc <HAL_UART_Init>
 8005b80:	1e03      	subs	r3, r0, #0
 8005b82:	d001      	beq.n	8005b88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005b84:	f7ff fe94 	bl	80058b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b88:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7fe fc99 	bl	80044c4 <HAL_UARTEx_SetTxFifoThreshold>
 8005b92:	1e03      	subs	r3, r0, #0
 8005b94:	d001      	beq.n	8005b9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005b96:	f7ff fe8b 	bl	80058b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f7fe fcd0 	bl	8004544 <HAL_UARTEx_SetRxFifoThreshold>
 8005ba4:	1e03      	subs	r3, r0, #0
 8005ba6:	d001      	beq.n	8005bac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005ba8:	f7ff fe82 	bl	80058b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <MX_USART2_UART_Init+0x94>)
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f7fe fc4e 	bl	8004450 <HAL_UARTEx_DisableFifoMode>
 8005bb4:	1e03      	subs	r3, r0, #0
 8005bb6:	d001      	beq.n	8005bbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005bb8:	f7ff fe7a 	bl	80058b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005bbc:	46c0      	nop			@ (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	200001ac 	.word	0x200001ac
 8005bc8:	40004400 	.word	0x40004400

08005bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005bcc:	b590      	push	{r4, r7, lr}
 8005bce:	b099      	sub	sp, #100	@ 0x64
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd4:	234c      	movs	r3, #76	@ 0x4c
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	0018      	movs	r0, r3
 8005bda:	2314      	movs	r3, #20
 8005bdc:	001a      	movs	r2, r3
 8005bde:	2100      	movs	r1, #0
 8005be0:	f000 f9a2 	bl	8005f28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005be4:	2418      	movs	r4, #24
 8005be6:	193b      	adds	r3, r7, r4
 8005be8:	0018      	movs	r0, r3
 8005bea:	2334      	movs	r3, #52	@ 0x34
 8005bec:	001a      	movs	r2, r3
 8005bee:	2100      	movs	r1, #0
 8005bf0:	f000 f99a 	bl	8005f28 <memset>
  if(uartHandle->Instance==USART1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a5d      	ldr	r2, [pc, #372]	@ (8005d70 <HAL_UART_MspInit+0x1a4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d16f      	bne.n	8005cde <HAL_UART_MspInit+0x112>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005bfe:	193b      	adds	r3, r7, r4
 8005c00:	2201      	movs	r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005c04:	193b      	adds	r3, r7, r4
 8005c06:	2200      	movs	r2, #0
 8005c08:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c0a:	193b      	adds	r3, r7, r4
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7fc ffe5 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
 8005c12:	1e03      	subs	r3, r0, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005c16:	f7ff fe4b 	bl	80058b0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c1a:	4b56      	ldr	r3, [pc, #344]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c1e:	4b55      	ldr	r3, [pc, #340]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005c20:	2180      	movs	r1, #128	@ 0x80
 8005c22:	01c9      	lsls	r1, r1, #7
 8005c24:	430a      	orrs	r2, r1
 8005c26:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c28:	4b52      	ldr	r3, [pc, #328]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005c2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c2c:	2380      	movs	r3, #128	@ 0x80
 8005c2e:	01db      	lsls	r3, r3, #7
 8005c30:	4013      	ands	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c36:	4b4f      	ldr	r3, [pc, #316]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c3a:	4b4e      	ldr	r3, [pc, #312]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005c3c:	2104      	movs	r1, #4
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c42:	4b4c      	ldr	r3, [pc, #304]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c46:	2204      	movs	r2, #4
 8005c48:	4013      	ands	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8005c4e:	214c      	movs	r1, #76	@ 0x4c
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	2230      	movs	r2, #48	@ 0x30
 8005c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c56:	187b      	adds	r3, r7, r1
 8005c58:	2202      	movs	r2, #2
 8005c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	2200      	movs	r2, #0
 8005c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c62:	187b      	adds	r3, r7, r1
 8005c64:	2200      	movs	r2, #0
 8005c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005c68:	187b      	adds	r3, r7, r1
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c6e:	187b      	adds	r3, r7, r1
 8005c70:	4a41      	ldr	r2, [pc, #260]	@ (8005d78 <HAL_UART_MspInit+0x1ac>)
 8005c72:	0019      	movs	r1, r3
 8005c74:	0010      	movs	r0, r2
 8005c76:	f7fb f963 	bl	8000f40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8005c7a:	4b40      	ldr	r3, [pc, #256]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005c7c:	4a40      	ldr	r2, [pc, #256]	@ (8005d80 <HAL_UART_MspInit+0x1b4>)
 8005c7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005c80:	4b3e      	ldr	r3, [pc, #248]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005c82:	2233      	movs	r2, #51	@ 0x33
 8005c84:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c86:	4b3d      	ldr	r3, [pc, #244]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005c88:	2210      	movs	r2, #16
 8005c8a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c92:	4b3a      	ldr	r3, [pc, #232]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005c94:	2280      	movs	r2, #128	@ 0x80
 8005c96:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c98:	4b38      	ldr	r3, [pc, #224]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c9e:	4b37      	ldr	r3, [pc, #220]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005ca4:	4b35      	ldr	r3, [pc, #212]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005caa:	4b34      	ldr	r3, [pc, #208]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005cb0:	4b32      	ldr	r3, [pc, #200]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f7fa fe74 	bl	80009a0 <HAL_DMA_Init>
 8005cb8:	1e03      	subs	r3, r0, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8005cbc:	f7ff fdf8 	bl	80058b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005cc4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d7c <HAL_UART_MspInit+0x1b0>)
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2100      	movs	r1, #0
 8005cd0:	201b      	movs	r0, #27
 8005cd2:	f7fa fe23 	bl	800091c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005cd6:	201b      	movs	r0, #27
 8005cd8:	f7fa fe35 	bl	8000946 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005cdc:	e044      	b.n	8005d68 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a28      	ldr	r2, [pc, #160]	@ (8005d84 <HAL_UART_MspInit+0x1b8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d13f      	bne.n	8005d68 <HAL_UART_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005ce8:	2118      	movs	r1, #24
 8005cea:	187b      	adds	r3, r7, r1
 8005cec:	2202      	movs	r2, #2
 8005cee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005cf0:	187b      	adds	r3, r7, r1
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005cf6:	187b      	adds	r3, r7, r1
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f7fc ff6f 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
 8005cfe:	1e03      	subs	r3, r0, #0
 8005d00:	d001      	beq.n	8005d06 <HAL_UART_MspInit+0x13a>
      Error_Handler();
 8005d02:	f7ff fdd5 	bl	80058b0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d06:	4b1b      	ldr	r3, [pc, #108]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005d0c:	2180      	movs	r1, #128	@ 0x80
 8005d0e:	0289      	lsls	r1, r1, #10
 8005d10:	430a      	orrs	r2, r1
 8005d12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d14:	4b17      	ldr	r3, [pc, #92]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d18:	2380      	movs	r3, #128	@ 0x80
 8005d1a:	029b      	lsls	r3, r3, #10
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d22:	4b14      	ldr	r3, [pc, #80]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d26:	4b13      	ldr	r3, [pc, #76]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005d28:	2101      	movs	r1, #1
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d2e:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <HAL_UART_MspInit+0x1a8>)
 8005d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d32:	2201      	movs	r2, #1
 8005d34:	4013      	ands	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d3a:	214c      	movs	r1, #76	@ 0x4c
 8005d3c:	187b      	adds	r3, r7, r1
 8005d3e:	220c      	movs	r2, #12
 8005d40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d42:	187b      	adds	r3, r7, r1
 8005d44:	2202      	movs	r2, #2
 8005d46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d48:	187b      	adds	r3, r7, r1
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	2200      	movs	r2, #0
 8005d52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005d54:	187b      	adds	r3, r7, r1
 8005d56:	2201      	movs	r2, #1
 8005d58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5a:	187a      	adds	r2, r7, r1
 8005d5c:	23a0      	movs	r3, #160	@ 0xa0
 8005d5e:	05db      	lsls	r3, r3, #23
 8005d60:	0011      	movs	r1, r2
 8005d62:	0018      	movs	r0, r3
 8005d64:	f7fb f8ec 	bl	8000f40 <HAL_GPIO_Init>
}
 8005d68:	46c0      	nop			@ (mov r8, r8)
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b019      	add	sp, #100	@ 0x64
 8005d6e:	bd90      	pop	{r4, r7, pc}
 8005d70:	40013800 	.word	0x40013800
 8005d74:	40021000 	.word	0x40021000
 8005d78:	50000800 	.word	0x50000800
 8005d7c:	20000240 	.word	0x20000240
 8005d80:	40020008 	.word	0x40020008
 8005d84:	40004400 	.word	0x40004400

08005d88 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a15      	ldr	r2, [pc, #84]	@ (8005dec <HAL_UART_MspDeInit+0x64>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d113      	bne.n	8005dc2 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005d9a:	4b15      	ldr	r3, [pc, #84]	@ (8005df0 <HAL_UART_MspDeInit+0x68>)
 8005d9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d9e:	4b14      	ldr	r3, [pc, #80]	@ (8005df0 <HAL_UART_MspDeInit+0x68>)
 8005da0:	4914      	ldr	r1, [pc, #80]	@ (8005df4 <HAL_UART_MspDeInit+0x6c>)
 8005da2:	400a      	ands	r2, r1
 8005da4:	641a      	str	r2, [r3, #64]	@ 0x40

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, ESP_TX_Pin|ESP_RX_Pin);
 8005da6:	4b14      	ldr	r3, [pc, #80]	@ (8005df8 <HAL_UART_MspDeInit+0x70>)
 8005da8:	2130      	movs	r1, #48	@ 0x30
 8005daa:	0018      	movs	r0, r3
 8005dac:	f7fb fa2c 	bl	8001208 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7fa fe7d 	bl	8000ab4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005dba:	201b      	movs	r0, #27
 8005dbc:	f7fa fdd3 	bl	8000966 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8005dc0:	e010      	b.n	8005de4 <HAL_UART_MspDeInit+0x5c>
  else if(uartHandle->Instance==USART2)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8005dfc <HAL_UART_MspDeInit+0x74>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d10b      	bne.n	8005de4 <HAL_UART_MspDeInit+0x5c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005dcc:	4b08      	ldr	r3, [pc, #32]	@ (8005df0 <HAL_UART_MspDeInit+0x68>)
 8005dce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dd0:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <HAL_UART_MspDeInit+0x68>)
 8005dd2:	490b      	ldr	r1, [pc, #44]	@ (8005e00 <HAL_UART_MspDeInit+0x78>)
 8005dd4:	400a      	ands	r2, r1
 8005dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8005dd8:	23a0      	movs	r3, #160	@ 0xa0
 8005dda:	05db      	lsls	r3, r3, #23
 8005ddc:	210c      	movs	r1, #12
 8005dde:	0018      	movs	r0, r3
 8005de0:	f7fb fa12 	bl	8001208 <HAL_GPIO_DeInit>
}
 8005de4:	46c0      	nop			@ (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40013800 	.word	0x40013800
 8005df0:	40021000 	.word	0x40021000
 8005df4:	ffffbfff 	.word	0xffffbfff
 8005df8:	50000800 	.word	0x50000800
 8005dfc:	40004400 	.word	0x40004400
 8005e00:	fffdffff 	.word	0xfffdffff

08005e04 <HAL_UART_ChangeSpeed>:

/* USER CODE BEGIN 1 */

void HAL_UART_ChangeSpeed(UART_HandleTypeDef *huart, uint32_t baudrate){
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]

	HAL_UART_DeInit(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	0018      	movs	r0, r3
 8005e12:	f7fd f9a9 	bl	8003168 <HAL_UART_DeInit>

	huart->Init.BaudRate = baudrate;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	605a      	str	r2, [r3, #4]

	if(HAL_UART_Init(huart)!=HAL_OK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f7fd f94c 	bl	80030bc <HAL_UART_Init>
 8005e24:	1e03      	subs	r3, r0, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_UART_ChangeSpeed+0x28>
		Error_Handler();
 8005e28:	f7ff fd42 	bl	80058b0 <Error_Handler>

}
 8005e2c:	46c0      	nop			@ (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e34:	480d      	ldr	r0, [pc, #52]	@ (8005e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005e38:	f7ff fe26 	bl	8005a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e3c:	480c      	ldr	r0, [pc, #48]	@ (8005e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e3e:	490d      	ldr	r1, [pc, #52]	@ (8005e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e40:	4a0d      	ldr	r2, [pc, #52]	@ (8005e78 <LoopForever+0xe>)
  movs r3, #0
 8005e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e44:	e002      	b.n	8005e4c <LoopCopyDataInit>

08005e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e4a:	3304      	adds	r3, #4

08005e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e50:	d3f9      	bcc.n	8005e46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e52:	4a0a      	ldr	r2, [pc, #40]	@ (8005e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e54:	4c0a      	ldr	r4, [pc, #40]	@ (8005e80 <LoopForever+0x16>)
  movs r3, #0
 8005e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e58:	e001      	b.n	8005e5e <LoopFillZerobss>

08005e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e5c:	3204      	adds	r2, #4

08005e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e60:	d3fb      	bcc.n	8005e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005e62:	f000 f869 	bl	8005f38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005e66:	f7ff fb65 	bl	8005534 <main>

08005e6a <LoopForever>:

LoopForever:
  b LoopForever
 8005e6a:	e7fe      	b.n	8005e6a <LoopForever>
  ldr   r0, =_estack
 8005e6c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005e78:	080060bc 	.word	0x080060bc
  ldr r2, =_sbss
 8005e7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005e80:	2000029c 	.word	0x2000029c

08005e84 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e84:	e7fe      	b.n	8005e84 <ADC1_COMP_IRQHandler>

08005e86 <__itoa>:
 8005e86:	1e93      	subs	r3, r2, #2
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	000c      	movs	r4, r1
 8005e8c:	2b22      	cmp	r3, #34	@ 0x22
 8005e8e:	d904      	bls.n	8005e9a <__itoa+0x14>
 8005e90:	2300      	movs	r3, #0
 8005e92:	001c      	movs	r4, r3
 8005e94:	700b      	strb	r3, [r1, #0]
 8005e96:	0020      	movs	r0, r4
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	2a0a      	cmp	r2, #10
 8005e9c:	d109      	bne.n	8005eb2 <__itoa+0x2c>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	da07      	bge.n	8005eb2 <__itoa+0x2c>
 8005ea2:	232d      	movs	r3, #45	@ 0x2d
 8005ea4:	700b      	strb	r3, [r1, #0]
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	4240      	negs	r0, r0
 8005eaa:	1861      	adds	r1, r4, r1
 8005eac:	f000 f808 	bl	8005ec0 <__utoa>
 8005eb0:	e7f1      	b.n	8005e96 <__itoa+0x10>
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	e7f9      	b.n	8005eaa <__itoa+0x24>

08005eb6 <itoa>:
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	f7ff ffe5 	bl	8005e86 <__itoa>
 8005ebc:	bd10      	pop	{r4, pc}
	...

08005ec0 <__utoa>:
 8005ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec2:	000c      	movs	r4, r1
 8005ec4:	0016      	movs	r6, r2
 8005ec6:	b08d      	sub	sp, #52	@ 0x34
 8005ec8:	2225      	movs	r2, #37	@ 0x25
 8005eca:	0007      	movs	r7, r0
 8005ecc:	4915      	ldr	r1, [pc, #84]	@ (8005f24 <__utoa+0x64>)
 8005ece:	a802      	add	r0, sp, #8
 8005ed0:	f000 f856 	bl	8005f80 <memcpy>
 8005ed4:	1e62      	subs	r2, r4, #1
 8005ed6:	1eb3      	subs	r3, r6, #2
 8005ed8:	2500      	movs	r5, #0
 8005eda:	9201      	str	r2, [sp, #4]
 8005edc:	2b22      	cmp	r3, #34	@ 0x22
 8005ede:	d904      	bls.n	8005eea <__utoa+0x2a>
 8005ee0:	7025      	strb	r5, [r4, #0]
 8005ee2:	002c      	movs	r4, r5
 8005ee4:	0020      	movs	r0, r4
 8005ee6:	b00d      	add	sp, #52	@ 0x34
 8005ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eea:	0038      	movs	r0, r7
 8005eec:	0031      	movs	r1, r6
 8005eee:	f7fa f997 	bl	8000220 <__aeabi_uidivmod>
 8005ef2:	000b      	movs	r3, r1
 8005ef4:	aa02      	add	r2, sp, #8
 8005ef6:	5cd3      	ldrb	r3, [r2, r3]
 8005ef8:	9a01      	ldr	r2, [sp, #4]
 8005efa:	0029      	movs	r1, r5
 8005efc:	3501      	adds	r5, #1
 8005efe:	5553      	strb	r3, [r2, r5]
 8005f00:	003b      	movs	r3, r7
 8005f02:	0007      	movs	r7, r0
 8005f04:	429e      	cmp	r6, r3
 8005f06:	d9f0      	bls.n	8005eea <__utoa+0x2a>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	0022      	movs	r2, r4
 8005f0c:	5563      	strb	r3, [r4, r5]
 8005f0e:	000b      	movs	r3, r1
 8005f10:	1ac8      	subs	r0, r1, r3
 8005f12:	4283      	cmp	r3, r0
 8005f14:	dde6      	ble.n	8005ee4 <__utoa+0x24>
 8005f16:	7810      	ldrb	r0, [r2, #0]
 8005f18:	5ce5      	ldrb	r5, [r4, r3]
 8005f1a:	7015      	strb	r5, [r2, #0]
 8005f1c:	54e0      	strb	r0, [r4, r3]
 8005f1e:	3201      	adds	r2, #1
 8005f20:	3b01      	subs	r3, #1
 8005f22:	e7f5      	b.n	8005f10 <__utoa+0x50>
 8005f24:	08006084 	.word	0x08006084

08005f28 <memset>:
 8005f28:	0003      	movs	r3, r0
 8005f2a:	1882      	adds	r2, r0, r2
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d100      	bne.n	8005f32 <memset+0xa>
 8005f30:	4770      	bx	lr
 8005f32:	7019      	strb	r1, [r3, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	e7f9      	b.n	8005f2c <memset+0x4>

08005f38 <__libc_init_array>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	2600      	movs	r6, #0
 8005f3c:	4c0c      	ldr	r4, [pc, #48]	@ (8005f70 <__libc_init_array+0x38>)
 8005f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f74 <__libc_init_array+0x3c>)
 8005f40:	1b64      	subs	r4, r4, r5
 8005f42:	10a4      	asrs	r4, r4, #2
 8005f44:	42a6      	cmp	r6, r4
 8005f46:	d109      	bne.n	8005f5c <__libc_init_array+0x24>
 8005f48:	2600      	movs	r6, #0
 8005f4a:	f000 f823 	bl	8005f94 <_init>
 8005f4e:	4c0a      	ldr	r4, [pc, #40]	@ (8005f78 <__libc_init_array+0x40>)
 8005f50:	4d0a      	ldr	r5, [pc, #40]	@ (8005f7c <__libc_init_array+0x44>)
 8005f52:	1b64      	subs	r4, r4, r5
 8005f54:	10a4      	asrs	r4, r4, #2
 8005f56:	42a6      	cmp	r6, r4
 8005f58:	d105      	bne.n	8005f66 <__libc_init_array+0x2e>
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	00b3      	lsls	r3, r6, #2
 8005f5e:	58eb      	ldr	r3, [r5, r3]
 8005f60:	4798      	blx	r3
 8005f62:	3601      	adds	r6, #1
 8005f64:	e7ee      	b.n	8005f44 <__libc_init_array+0xc>
 8005f66:	00b3      	lsls	r3, r6, #2
 8005f68:	58eb      	ldr	r3, [r5, r3]
 8005f6a:	4798      	blx	r3
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	e7f2      	b.n	8005f56 <__libc_init_array+0x1e>
 8005f70:	080060b4 	.word	0x080060b4
 8005f74:	080060b4 	.word	0x080060b4
 8005f78:	080060b8 	.word	0x080060b8
 8005f7c:	080060b4 	.word	0x080060b4

08005f80 <memcpy>:
 8005f80:	2300      	movs	r3, #0
 8005f82:	b510      	push	{r4, lr}
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d100      	bne.n	8005f8a <memcpy+0xa>
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	5ccc      	ldrb	r4, [r1, r3]
 8005f8c:	54c4      	strb	r4, [r0, r3]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	e7f8      	b.n	8005f84 <memcpy+0x4>
	...

08005f94 <_init>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	46c0      	nop			@ (mov r8, r8)
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr

08005fa0 <_fini>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr
