
airMouse-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004dac  08004dac  00005dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eac  08004eac  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004eac  08004eac  00005eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eb4  08004eb4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb4  08004eb4  00005eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004eb8  08004eb8  00005eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ebc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08004ec8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004ec8  000061d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106cb  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280a  00000000  00000000  000166ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00018f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000999  00000000  00000000  00019b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191f4  00000000  00000000  0001a511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011638  00000000  00000000  00033705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009abae  00000000  00000000  00044d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df8eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c20  00000000  00000000  000df930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e2550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004d94 	.word	0x08004d94

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004d94 	.word	0x08004d94

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	@ (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	@ (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	@ (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <HAL_Init+0x3c>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_Init+0x3c>)
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	0049      	lsls	r1, r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000646:	2003      	movs	r0, #3
 8000648:	f000 f810 	bl	800066c <HAL_InitTick>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d003      	beq.n	8000658 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e001      	b.n	800065c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f004 f916 	bl	8004888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40022000 	.word	0x40022000

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000674:	230f      	movs	r3, #15
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <HAL_InitTick+0x88>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d02b      	beq.n	80006dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <HAL_InitTick+0x8c>)
 8000686:	681c      	ldr	r4, [r3, #0]
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <HAL_InitTick+0x88>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	0019      	movs	r1, r3
 800068e:	23fa      	movs	r3, #250	@ 0xfa
 8000690:	0098      	lsls	r0, r3, #2
 8000692:	f7ff fd3f 	bl	8000114 <__udivsi3>
 8000696:	0003      	movs	r3, r0
 8000698:	0019      	movs	r1, r3
 800069a:	0020      	movs	r0, r4
 800069c:	f7ff fd3a 	bl	8000114 <__udivsi3>
 80006a0:	0003      	movs	r3, r0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f913 	bl	80008ce <HAL_SYSTICK_Config>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d112      	bne.n	80006d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 f8f2 	bl	80008a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <HAL_InitTick+0x90>)
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e00d      	b.n	80006e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e008      	b.n	80006e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d2:	230f      	movs	r3, #15
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e003      	b.n	80006e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	781b      	ldrb	r3, [r3, #0]
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b005      	add	sp, #20
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000000 	.word	0x20000000

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <HAL_IncTick+0x1c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	001a      	movs	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_IncTick+0x20>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	18d2      	adds	r2, r2, r3
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <HAL_IncTick+0x20>)
 8000712:	601a      	str	r2, [r3, #0]
}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	20000004 	.word	0x20000004
 8000720:	20000028 	.word	0x20000028

08000724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;
 8000728:	4b02      	ldr	r3, [pc, #8]	@ (8000734 <HAL_GetTick+0x10>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	20000028 	.word	0x20000028

08000738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff fff0 	bl	8000724 <HAL_GetTick>
 8000744:	0003      	movs	r3, r0
 8000746:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	d005      	beq.n	800075e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_Delay+0x44>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	001a      	movs	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	189b      	adds	r3, r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	f7ff ffe0 	bl	8000724 <HAL_GetTick>
 8000764:	0002      	movs	r2, r0
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8f7      	bhi.n	8000760 <HAL_Delay+0x28>
  {
  }
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b004      	add	sp, #16
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000004 	.word	0x20000004

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b7f      	cmp	r3, #127	@ 0x7f
 8000794:	d828      	bhi.n	80007e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000796:	4a2f      	ldr	r2, [pc, #188]	@ (8000854 <__NVIC_SetPriority+0xd4>)
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b25b      	sxtb	r3, r3
 800079e:	089b      	lsrs	r3, r3, #2
 80007a0:	33c0      	adds	r3, #192	@ 0xc0
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	589b      	ldr	r3, [r3, r2]
 80007a6:	1dfa      	adds	r2, r7, #7
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	0011      	movs	r1, r2
 80007ac:	2203      	movs	r2, #3
 80007ae:	400a      	ands	r2, r1
 80007b0:	00d2      	lsls	r2, r2, #3
 80007b2:	21ff      	movs	r1, #255	@ 0xff
 80007b4:	4091      	lsls	r1, r2
 80007b6:	000a      	movs	r2, r1
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	401a      	ands	r2, r3
 80007bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	22ff      	movs	r2, #255	@ 0xff
 80007c4:	401a      	ands	r2, r3
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0018      	movs	r0, r3
 80007cc:	2303      	movs	r3, #3
 80007ce:	4003      	ands	r3, r0
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d4:	481f      	ldr	r0, [pc, #124]	@ (8000854 <__NVIC_SetPriority+0xd4>)
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	089b      	lsrs	r3, r3, #2
 80007de:	430a      	orrs	r2, r1
 80007e0:	33c0      	adds	r3, #192	@ 0xc0
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007e6:	e031      	b.n	800084c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000858 <__NVIC_SetPriority+0xd8>)
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	0019      	movs	r1, r3
 80007f0:	230f      	movs	r3, #15
 80007f2:	400b      	ands	r3, r1
 80007f4:	3b08      	subs	r3, #8
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	3306      	adds	r3, #6
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	18d3      	adds	r3, r2, r3
 80007fe:	3304      	adds	r3, #4
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	1dfa      	adds	r2, r7, #7
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	0011      	movs	r1, r2
 8000808:	2203      	movs	r2, #3
 800080a:	400a      	ands	r2, r1
 800080c:	00d2      	lsls	r2, r2, #3
 800080e:	21ff      	movs	r1, #255	@ 0xff
 8000810:	4091      	lsls	r1, r2
 8000812:	000a      	movs	r2, r1
 8000814:	43d2      	mvns	r2, r2
 8000816:	401a      	ands	r2, r3
 8000818:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	019b      	lsls	r3, r3, #6
 800081e:	22ff      	movs	r2, #255	@ 0xff
 8000820:	401a      	ands	r2, r3
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	0018      	movs	r0, r3
 8000828:	2303      	movs	r3, #3
 800082a:	4003      	ands	r3, r0
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000830:	4809      	ldr	r0, [pc, #36]	@ (8000858 <__NVIC_SetPriority+0xd8>)
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	001c      	movs	r4, r3
 8000838:	230f      	movs	r3, #15
 800083a:	4023      	ands	r3, r4
 800083c:	3b08      	subs	r3, #8
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	430a      	orrs	r2, r1
 8000842:	3306      	adds	r3, #6
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	18c3      	adds	r3, r0, r3
 8000848:	3304      	adds	r3, #4
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b003      	add	sp, #12
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	1e5a      	subs	r2, r3, #1
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	045b      	lsls	r3, r3, #17
 800086c:	429a      	cmp	r2, r3
 800086e:	d301      	bcc.n	8000874 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000870:	2301      	movs	r3, #1
 8000872:	e010      	b.n	8000896 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <SysTick_Config+0x44>)
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	3a01      	subs	r2, #1
 800087a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087c:	2301      	movs	r3, #1
 800087e:	425b      	negs	r3, r3
 8000880:	2103      	movs	r1, #3
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff ff7c 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <SysTick_Config+0x44>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <SysTick_Config+0x44>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	210f      	movs	r1, #15
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	1c02      	adds	r2, r0, #0
 80008b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ffbf 	bl	800085c <SysTick_Config>
 80008de:	0003      	movs	r3, r0
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	e147      	b.n	8000b88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	4091      	lsls	r1, r2
 8000902:	000a      	movs	r2, r1
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d100      	bne.n	8000910 <HAL_GPIO_Init+0x28>
 800090e:	e138      	b.n	8000b82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2203      	movs	r2, #3
 8000916:	4013      	ands	r3, r2
 8000918:	2b01      	cmp	r3, #1
 800091a:	d005      	beq.n	8000928 <HAL_GPIO_Init+0x40>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2203      	movs	r2, #3
 8000922:	4013      	ands	r3, r2
 8000924:	2b02      	cmp	r3, #2
 8000926:	d130      	bne.n	800098a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	409a      	lsls	r2, r3
 8000936:	0013      	movs	r3, r2
 8000938:	43da      	mvns	r2, r3
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	409a      	lsls	r2, r3
 800094a:	0013      	movs	r3, r2
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4313      	orrs	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800095e:	2201      	movs	r2, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
 8000964:	0013      	movs	r3, r2
 8000966:	43da      	mvns	r2, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	091b      	lsrs	r3, r3, #4
 8000974:	2201      	movs	r2, #1
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
 800097c:	0013      	movs	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2203      	movs	r2, #3
 8000990:	4013      	ands	r3, r2
 8000992:	2b03      	cmp	r3, #3
 8000994:	d017      	beq.n	80009c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	409a      	lsls	r2, r3
 80009a4:	0013      	movs	r3, r2
 80009a6:	43da      	mvns	r2, r3
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	409a      	lsls	r2, r3
 80009b8:	0013      	movs	r3, r2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2203      	movs	r2, #3
 80009cc:	4013      	ands	r3, r2
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d123      	bne.n	8000a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	58d3      	ldr	r3, [r2, r3]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	2207      	movs	r2, #7
 80009e4:	4013      	ands	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	409a      	lsls	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	43da      	mvns	r2, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2107      	movs	r1, #7
 80009fe:	400b      	ands	r3, r1
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	6939      	ldr	r1, [r7, #16]
 8000a18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	409a      	lsls	r2, r3
 8000a28:	0013      	movs	r3, r2
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2203      	movs	r2, #3
 8000a38:	401a      	ands	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	23c0      	movs	r3, #192	@ 0xc0
 8000a54:	029b      	lsls	r3, r3, #10
 8000a56:	4013      	ands	r3, r2
 8000a58:	d100      	bne.n	8000a5c <HAL_GPIO_Init+0x174>
 8000a5a:	e092      	b.n	8000b82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a5c:	4a50      	ldr	r2, [pc, #320]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3318      	adds	r3, #24
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	589b      	ldr	r3, [r3, r2]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	4013      	ands	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	220f      	movs	r2, #15
 8000a74:	409a      	lsls	r2, r3
 8000a76:	0013      	movs	r3, r2
 8000a78:	43da      	mvns	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	23a0      	movs	r3, #160	@ 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0x1ca>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a45      	ldr	r2, [pc, #276]	@ (8000ba4 <HAL_GPIO_Init+0x2bc>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00d      	beq.n	8000aae <HAL_GPIO_Init+0x1c6>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a44      	ldr	r2, [pc, #272]	@ (8000ba8 <HAL_GPIO_Init+0x2c0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d007      	beq.n	8000aaa <HAL_GPIO_Init+0x1c2>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a43      	ldr	r2, [pc, #268]	@ (8000bac <HAL_GPIO_Init+0x2c4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_GPIO_Init+0x1be>
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x1cc>
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	e004      	b.n	8000ab4 <HAL_GPIO_Init+0x1cc>
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e002      	b.n	8000ab4 <HAL_GPIO_Init+0x1cc>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <HAL_GPIO_Init+0x1cc>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	400a      	ands	r2, r1
 8000aba:	00d2      	lsls	r2, r2, #3
 8000abc:	4093      	lsls	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ac4:	4936      	ldr	r1, [pc, #216]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3318      	adds	r3, #24
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	43da      	mvns	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	2380      	movs	r3, #128	@ 0x80
 8000ae8:	035b      	lsls	r3, r3, #13
 8000aea:	4013      	ands	r3, r2
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000af6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000afc:	4b28      	ldr	r3, [pc, #160]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	43da      	mvns	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	2380      	movs	r3, #128	@ 0x80
 8000b12:	039b      	lsls	r3, r3, #14
 8000b14:	4013      	ands	r3, r2
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b28:	2384      	movs	r3, #132	@ 0x84
 8000b2a:	58d3      	ldr	r3, [r2, r3]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	43da      	mvns	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	029b      	lsls	r3, r3, #10
 8000b40:	4013      	ands	r3, r2
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b4c:	4914      	ldr	r1, [pc, #80]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	2284      	movs	r2, #132	@ 0x84
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b56:	2380      	movs	r3, #128	@ 0x80
 8000b58:	58d3      	ldr	r3, [r2, r3]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	025b      	lsls	r3, r3, #9
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b7a:	4909      	ldr	r1, [pc, #36]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	40da      	lsrs	r2, r3
 8000b90:	1e13      	subs	r3, r2, #0
 8000b92:	d000      	beq.n	8000b96 <HAL_GPIO_Init+0x2ae>
 8000b94:	e6b0      	b.n	80008f8 <HAL_GPIO_Init+0x10>
  }
}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b006      	add	sp, #24
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	50000400 	.word	0x50000400
 8000ba8:	50000800 	.word	0x50000800
 8000bac:	50000c00 	.word	0x50000c00

08000bb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000bbe:	e0b4      	b.n	8000d2a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <HAL_GPIO_DeInit+0x24>
 8000bd2:	e0a7      	b.n	8000d24 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8000bd4:	4a5a      	ldr	r2, [pc, #360]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3318      	adds	r3, #24
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	589b      	ldr	r3, [r3, r2]
 8000be0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2203      	movs	r2, #3
 8000be6:	4013      	ands	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	220f      	movs	r2, #15
 8000bec:	409a      	lsls	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	23a0      	movs	r3, #160	@ 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d013      	beq.n	8000c26 <HAL_GPIO_DeInit+0x76>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a50      	ldr	r2, [pc, #320]	@ (8000d44 <HAL_GPIO_DeInit+0x194>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d00d      	beq.n	8000c22 <HAL_GPIO_DeInit+0x72>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a4f      	ldr	r2, [pc, #316]	@ (8000d48 <HAL_GPIO_DeInit+0x198>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d007      	beq.n	8000c1e <HAL_GPIO_DeInit+0x6e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <HAL_GPIO_DeInit+0x19c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_GPIO_DeInit+0x6a>
 8000c16:	2303      	movs	r3, #3
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_DeInit+0x78>
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	e004      	b.n	8000c28 <HAL_GPIO_DeInit+0x78>
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_DeInit+0x78>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <HAL_GPIO_DeInit+0x78>
 8000c26:	2300      	movs	r3, #0
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	00d2      	lsls	r2, r2, #3
 8000c30:	4093      	lsls	r3, r2
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d136      	bne.n	8000ca6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000c38:	4a41      	ldr	r2, [pc, #260]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c3a:	2380      	movs	r3, #128	@ 0x80
 8000c3c:	58d3      	ldr	r3, [r2, r3]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	43d2      	mvns	r2, r2
 8000c42:	493f      	ldr	r1, [pc, #252]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8000c4a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c4c:	2384      	movs	r3, #132	@ 0x84
 8000c4e:	58d3      	ldr	r3, [r2, r3]
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	43d2      	mvns	r2, r2
 8000c54:	493a      	ldr	r1, [pc, #232]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	2284      	movs	r2, #132	@ 0x84
 8000c5a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8000c5c:	4b38      	ldr	r3, [pc, #224]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	4b36      	ldr	r3, [pc, #216]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c66:	400a      	ands	r2, r1
 8000c68:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8000c6a:	4b35      	ldr	r3, [pc, #212]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	43d9      	mvns	r1, r3
 8000c72:	4b33      	ldr	r3, [pc, #204]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c74:	400a      	ands	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	220f      	movs	r2, #15
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8000c88:	4a2d      	ldr	r2, [pc, #180]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3318      	adds	r3, #24
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	589a      	ldr	r2, [r3, r2]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	4829      	ldr	r0, [pc, #164]	@ (8000d40 <HAL_GPIO_DeInit+0x190>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	3318      	adds	r3, #24
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2103      	movs	r1, #3
 8000cb0:	4099      	lsls	r1, r3
 8000cb2:	000b      	movs	r3, r1
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	58d3      	ldr	r3, [r2, r3]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	2107      	movs	r1, #7
 8000cca:	400a      	ands	r2, r1
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	210f      	movs	r1, #15
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	000a      	movs	r2, r1
 8000cd4:	43d1      	mvns	r1, r2
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	08d2      	lsrs	r2, r2, #3
 8000cda:	4019      	ands	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	0052      	lsls	r2, r2, #1
 8000cec:	2103      	movs	r1, #3
 8000cee:	4091      	lsls	r1, r2
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	43d2      	mvns	r2, r2
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2101      	movs	r1, #1
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	4091      	lsls	r1, r2
 8000d04:	000a      	movs	r2, r1
 8000d06:	43d2      	mvns	r2, r2
 8000d08:	401a      	ands	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	0052      	lsls	r2, r2, #1
 8000d16:	2103      	movs	r1, #3
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	60da      	str	r2, [r3, #12]
    }

    position++;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	40da      	lsrs	r2, r3
 8000d30:	1e13      	subs	r3, r2, #0
 8000d32:	d000      	beq.n	8000d36 <HAL_GPIO_DeInit+0x186>
 8000d34:	e744      	b.n	8000bc0 <HAL_GPIO_DeInit+0x10>
  }
}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b006      	add	sp, #24
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021800 	.word	0x40021800
 8000d44:	50000400 	.word	0x50000400
 8000d48:	50000800 	.word	0x50000800
 8000d4c:	50000c00 	.word	0x50000c00

08000d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	000a      	movs	r2, r1
 8000d5a:	1cbb      	adds	r3, r7, #2
 8000d5c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	1cba      	adds	r2, r7, #2
 8000d64:	8812      	ldrh	r2, [r2, #0]
 8000d66:	4013      	ands	r3, r2
 8000d68:	d004      	beq.n	8000d74 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e003      	b.n	8000d7c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	781b      	ldrb	r3, [r3, #0]
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	0008      	movs	r0, r1
 8000d94:	0011      	movs	r1, r2
 8000d96:	1cbb      	adds	r3, r7, #2
 8000d98:	1c02      	adds	r2, r0, #0
 8000d9a:	801a      	strh	r2, [r3, #0]
 8000d9c:	1c7b      	adds	r3, r7, #1
 8000d9e:	1c0a      	adds	r2, r1, #0
 8000da0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da2:	1c7b      	adds	r3, r7, #1
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d004      	beq.n	8000db4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000daa:	1cbb      	adds	r3, r7, #2
 8000dac:	881a      	ldrh	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db2:	e003      	b.n	8000dbc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db4:	1cbb      	adds	r3, r7, #2
 8000db6:	881a      	ldrh	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e08f      	b.n	8000ef6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2241      	movs	r2, #65	@ 0x41
 8000dda:	5c9b      	ldrb	r3, [r3, r2]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d107      	bne.n	8000df2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2240      	movs	r2, #64	@ 0x40
 8000de6:	2100      	movs	r1, #0
 8000de8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f003 f963 	bl	80040b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2241      	movs	r2, #65	@ 0x41
 8000df6:	2124      	movs	r1, #36	@ 0x24
 8000df8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	438a      	bics	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	493b      	ldr	r1, [pc, #236]	@ (8000f00 <HAL_I2C_Init+0x13c>)
 8000e14:	400a      	ands	r2, r1
 8000e16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4938      	ldr	r1, [pc, #224]	@ (8000f04 <HAL_I2C_Init+0x140>)
 8000e24:	400a      	ands	r2, r1
 8000e26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d108      	bne.n	8000e42 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0209      	lsls	r1, r1, #8
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	e007      	b.n	8000e52 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2184      	movs	r1, #132	@ 0x84
 8000e4c:	0209      	lsls	r1, r1, #8
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d109      	bne.n	8000e6e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2180      	movs	r1, #128	@ 0x80
 8000e66:	0109      	lsls	r1, r1, #4
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	e007      	b.n	8000e7e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4923      	ldr	r1, [pc, #140]	@ (8000f08 <HAL_I2C_Init+0x144>)
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4920      	ldr	r1, [pc, #128]	@ (8000f0c <HAL_I2C_Init+0x148>)
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	491a      	ldr	r1, [pc, #104]	@ (8000f04 <HAL_I2C_Init+0x140>)
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69d9      	ldr	r1, [r3, #28]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1a      	ldr	r2, [r3, #32]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2241      	movs	r2, #65	@ 0x41
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2242      	movs	r2, #66	@ 0x42
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	f0ffffff 	.word	0xf0ffffff
 8000f04:	ffff7fff 	.word	0xffff7fff
 8000f08:	fffff7ff 	.word	0xfffff7ff
 8000f0c:	02008000 	.word	0x02008000

08000f10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b089      	sub	sp, #36	@ 0x24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	000c      	movs	r4, r1
 8000f1a:	0010      	movs	r0, r2
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	230a      	movs	r3, #10
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	1c22      	adds	r2, r4, #0
 8000f24:	801a      	strh	r2, [r3, #0]
 8000f26:	2308      	movs	r3, #8
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	1c02      	adds	r2, r0, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	1dbb      	adds	r3, r7, #6
 8000f30:	1c0a      	adds	r2, r1, #0
 8000f32:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2241      	movs	r2, #65	@ 0x41
 8000f38:	5c9b      	ldrb	r3, [r3, r2]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	d000      	beq.n	8000f42 <HAL_I2C_Mem_Write+0x32>
 8000f40:	e10c      	b.n	800115c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <HAL_I2C_Mem_Write+0x42>
 8000f48:	232c      	movs	r3, #44	@ 0x2c
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d105      	bne.n	8000f5e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0ff      	b.n	800115e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2240      	movs	r2, #64	@ 0x40
 8000f62:	5c9b      	ldrb	r3, [r3, r2]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_I2C_Mem_Write+0x5c>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e0f8      	b.n	800115e <HAL_I2C_Mem_Write+0x24e>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2240      	movs	r2, #64	@ 0x40
 8000f70:	2101      	movs	r1, #1
 8000f72:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f74:	f7ff fbd6 	bl	8000724 <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	0219      	lsls	r1, r3, #8
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2319      	movs	r3, #25
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f000 fb0b 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e0e3      	b.n	800115e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2241      	movs	r2, #65	@ 0x41
 8000f9a:	2121      	movs	r1, #33	@ 0x21
 8000f9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2242      	movs	r2, #66	@ 0x42
 8000fa2:	2140      	movs	r1, #64	@ 0x40
 8000fa4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	222c      	movs	r2, #44	@ 0x2c
 8000fb6:	18ba      	adds	r2, r7, r2
 8000fb8:	8812      	ldrh	r2, [r2, #0]
 8000fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fc2:	1dbb      	adds	r3, r7, #6
 8000fc4:	881c      	ldrh	r4, [r3, #0]
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	230a      	movs	r3, #10
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	8819      	ldrh	r1, [r3, #0]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	0023      	movs	r3, r4
 8000fde:	f000 f9f9 	bl	80013d4 <I2C_RequestMemoryWrite>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2240      	movs	r2, #64	@ 0x40
 8000fea:	2100      	movs	r1, #0
 8000fec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e0b5      	b.n	800115e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2bff      	cmp	r3, #255	@ 0xff
 8000ffa:	d911      	bls.n	8001020 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	22ff      	movs	r2, #255	@ 0xff
 8001000:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001006:	b2da      	uxtb	r2, r3
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	045c      	lsls	r4, r3, #17
 800100c:	230a      	movs	r3, #10
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	8819      	ldrh	r1, [r3, #0]
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	2300      	movs	r3, #0
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	0023      	movs	r3, r4
 800101a:	f000 fc9d 	bl	8001958 <I2C_TransferConfig>
 800101e:	e012      	b.n	8001046 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001024:	b29a      	uxth	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800102e:	b2da      	uxtb	r2, r3
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	049c      	lsls	r4, r3, #18
 8001034:	230a      	movs	r3, #10
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	8819      	ldrh	r1, [r3, #0]
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	2300      	movs	r3, #0
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	0023      	movs	r3, r4
 8001042:	f000 fc89 	bl	8001958 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	0018      	movs	r0, r3
 800104e:	f000 fb01 	bl	8001654 <I2C_WaitOnTXISFlagUntilTimeout>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e081      	b.n	800115e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001074:	b29b      	uxth	r3, r3
 8001076:	3b01      	subs	r3, #1
 8001078:	b29a      	uxth	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001082:	3b01      	subs	r3, #1
 8001084:	b29a      	uxth	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800108e:	b29b      	uxth	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d03a      	beq.n	800110a <HAL_I2C_Mem_Write+0x1fa>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001098:	2b00      	cmp	r3, #0
 800109a:	d136      	bne.n	800110a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800109c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	0013      	movs	r3, r2
 80010a6:	2200      	movs	r2, #0
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	f000 fa7b 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e053      	b.n	800115e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	2bff      	cmp	r3, #255	@ 0xff
 80010be:	d911      	bls.n	80010e4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	22ff      	movs	r2, #255	@ 0xff
 80010c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	045c      	lsls	r4, r3, #17
 80010d0:	230a      	movs	r3, #10
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	8819      	ldrh	r1, [r3, #0]
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	2300      	movs	r3, #0
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	0023      	movs	r3, r4
 80010de:	f000 fc3b 	bl	8001958 <I2C_TransferConfig>
 80010e2:	e012      	b.n	800110a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	049c      	lsls	r4, r3, #18
 80010f8:	230a      	movs	r3, #10
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	8819      	ldrh	r1, [r3, #0]
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	2300      	movs	r3, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	0023      	movs	r3, r4
 8001106:	f000 fc27 	bl	8001958 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800110e:	b29b      	uxth	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d198      	bne.n	8001046 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	0018      	movs	r0, r3
 800111c:	f000 fae0 	bl	80016e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d001      	beq.n	8001128 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e01a      	b.n	800115e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2220      	movs	r2, #32
 800112e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	490b      	ldr	r1, [pc, #44]	@ (8001168 <HAL_I2C_Mem_Write+0x258>)
 800113c:	400a      	ands	r2, r1
 800113e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2241      	movs	r2, #65	@ 0x41
 8001144:	2120      	movs	r1, #32
 8001146:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2242      	movs	r2, #66	@ 0x42
 800114c:	2100      	movs	r1, #0
 800114e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2240      	movs	r2, #64	@ 0x40
 8001154:	2100      	movs	r1, #0
 8001156:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	e000      	b.n	800115e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800115c:	2302      	movs	r3, #2
  }
}
 800115e:	0018      	movs	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	b007      	add	sp, #28
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	fe00e800 	.word	0xfe00e800

0800116c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	000c      	movs	r4, r1
 8001176:	0010      	movs	r0, r2
 8001178:	0019      	movs	r1, r3
 800117a:	230a      	movs	r3, #10
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	1c22      	adds	r2, r4, #0
 8001180:	801a      	strh	r2, [r3, #0]
 8001182:	2308      	movs	r3, #8
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	1c02      	adds	r2, r0, #0
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	1dbb      	adds	r3, r7, #6
 800118c:	1c0a      	adds	r2, r1, #0
 800118e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2241      	movs	r2, #65	@ 0x41
 8001194:	5c9b      	ldrb	r3, [r3, r2]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b20      	cmp	r3, #32
 800119a:	d000      	beq.n	800119e <HAL_I2C_Mem_Read+0x32>
 800119c:	e110      	b.n	80013c0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800119e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_I2C_Mem_Read+0x42>
 80011a4:	232c      	movs	r3, #44	@ 0x2c
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d105      	bne.n	80011ba <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e103      	b.n	80013c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2240      	movs	r2, #64	@ 0x40
 80011be:	5c9b      	ldrb	r3, [r3, r2]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_I2C_Mem_Read+0x5c>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e0fc      	b.n	80013c2 <HAL_I2C_Mem_Read+0x256>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2240      	movs	r2, #64	@ 0x40
 80011cc:	2101      	movs	r1, #1
 80011ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011d0:	f7ff faa8 	bl	8000724 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	0219      	lsls	r1, r3, #8
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2319      	movs	r3, #25
 80011e4:	2201      	movs	r2, #1
 80011e6:	f000 f9dd 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0e7      	b.n	80013c2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2241      	movs	r2, #65	@ 0x41
 80011f6:	2122      	movs	r1, #34	@ 0x22
 80011f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2242      	movs	r2, #66	@ 0x42
 80011fe:	2140      	movs	r1, #64	@ 0x40
 8001200:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	222c      	movs	r2, #44	@ 0x2c
 8001212:	18ba      	adds	r2, r7, r2
 8001214:	8812      	ldrh	r2, [r2, #0]
 8001216:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800121e:	1dbb      	adds	r3, r7, #6
 8001220:	881c      	ldrh	r4, [r3, #0]
 8001222:	2308      	movs	r3, #8
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	881a      	ldrh	r2, [r3, #0]
 8001228:	230a      	movs	r3, #10
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	8819      	ldrh	r1, [r3, #0]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	0023      	movs	r3, r4
 800123a:	f000 f92f 	bl	800149c <I2C_RequestMemoryRead>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d005      	beq.n	800124e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2240      	movs	r2, #64	@ 0x40
 8001246:	2100      	movs	r1, #0
 8001248:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0b9      	b.n	80013c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001252:	b29b      	uxth	r3, r3
 8001254:	2bff      	cmp	r3, #255	@ 0xff
 8001256:	d911      	bls.n	800127c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	22ff      	movs	r2, #255	@ 0xff
 800125c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001262:	b2da      	uxtb	r2, r3
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	045c      	lsls	r4, r3, #17
 8001268:	230a      	movs	r3, #10
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	8819      	ldrh	r1, [r3, #0]
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	4b56      	ldr	r3, [pc, #344]	@ (80013cc <HAL_I2C_Mem_Read+0x260>)
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	0023      	movs	r3, r4
 8001276:	f000 fb6f 	bl	8001958 <I2C_TransferConfig>
 800127a:	e012      	b.n	80012a2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001280:	b29a      	uxth	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800128a:	b2da      	uxtb	r2, r3
 800128c:	2380      	movs	r3, #128	@ 0x80
 800128e:	049c      	lsls	r4, r3, #18
 8001290:	230a      	movs	r3, #10
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	8819      	ldrh	r1, [r3, #0]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	4b4c      	ldr	r3, [pc, #304]	@ (80013cc <HAL_I2C_Mem_Read+0x260>)
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	0023      	movs	r3, r4
 800129e:	f000 fb5b 	bl	8001958 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	0013      	movs	r3, r2
 80012ac:	2200      	movs	r2, #0
 80012ae:	2104      	movs	r1, #4
 80012b0:	f000 f978 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e082      	b.n	80013c2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d8:	3b01      	subs	r3, #1
 80012da:	b29a      	uxth	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	3b01      	subs	r3, #1
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d03a      	beq.n	800136e <HAL_I2C_Mem_Read+0x202>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d136      	bne.n	800136e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	0013      	movs	r3, r2
 800130a:	2200      	movs	r2, #0
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	f000 f949 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 8001312:	1e03      	subs	r3, r0, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e053      	b.n	80013c2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800131e:	b29b      	uxth	r3, r3
 8001320:	2bff      	cmp	r3, #255	@ 0xff
 8001322:	d911      	bls.n	8001348 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	22ff      	movs	r2, #255	@ 0xff
 8001328:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800132e:	b2da      	uxtb	r2, r3
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	045c      	lsls	r4, r3, #17
 8001334:	230a      	movs	r3, #10
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	8819      	ldrh	r1, [r3, #0]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	2300      	movs	r3, #0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	0023      	movs	r3, r4
 8001342:	f000 fb09 	bl	8001958 <I2C_TransferConfig>
 8001346:	e012      	b.n	800136e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800134c:	b29a      	uxth	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001356:	b2da      	uxtb	r2, r3
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	049c      	lsls	r4, r3, #18
 800135c:	230a      	movs	r3, #10
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	8819      	ldrh	r1, [r3, #0]
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	2300      	movs	r3, #0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	0023      	movs	r3, r4
 800136a:	f000 faf5 	bl	8001958 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001372:	b29b      	uxth	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d194      	bne.n	80012a2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	0018      	movs	r0, r3
 8001380:	f000 f9ae 	bl	80016e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e01a      	b.n	80013c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2220      	movs	r2, #32
 8001392:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	490c      	ldr	r1, [pc, #48]	@ (80013d0 <HAL_I2C_Mem_Read+0x264>)
 80013a0:	400a      	ands	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2241      	movs	r2, #65	@ 0x41
 80013a8:	2120      	movs	r1, #32
 80013aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2242      	movs	r2, #66	@ 0x42
 80013b0:	2100      	movs	r1, #0
 80013b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2240      	movs	r2, #64	@ 0x40
 80013b8:	2100      	movs	r1, #0
 80013ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	e000      	b.n	80013c2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80013c0:	2302      	movs	r3, #2
  }
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b007      	add	sp, #28
 80013c8:	bd90      	pop	{r4, r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	80002400 	.word	0x80002400
 80013d0:	fe00e800 	.word	0xfe00e800

080013d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af02      	add	r7, sp, #8
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	000c      	movs	r4, r1
 80013de:	0010      	movs	r0, r2
 80013e0:	0019      	movs	r1, r3
 80013e2:	250a      	movs	r5, #10
 80013e4:	197b      	adds	r3, r7, r5
 80013e6:	1c22      	adds	r2, r4, #0
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	2308      	movs	r3, #8
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	1c02      	adds	r2, r0, #0
 80013f0:	801a      	strh	r2, [r3, #0]
 80013f2:	1dbb      	adds	r3, r7, #6
 80013f4:	1c0a      	adds	r2, r1, #0
 80013f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013f8:	1dbb      	adds	r3, r7, #6
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	2380      	movs	r3, #128	@ 0x80
 8001400:	045c      	lsls	r4, r3, #17
 8001402:	197b      	adds	r3, r7, r5
 8001404:	8819      	ldrh	r1, [r3, #0]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <I2C_RequestMemoryWrite+0xc4>)
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	0023      	movs	r3, r4
 800140e:	f000 faa3 	bl	8001958 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001414:	6a39      	ldr	r1, [r7, #32]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	0018      	movs	r0, r3
 800141a:	f000 f91b 	bl	8001654 <I2C_WaitOnTXISFlagUntilTimeout>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d001      	beq.n	8001426 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e033      	b.n	800148e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001426:	1dbb      	adds	r3, r7, #6
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800142e:	2308      	movs	r3, #8
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
 800143c:	e019      	b.n	8001472 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800143e:	2308      	movs	r3, #8
 8001440:	18fb      	adds	r3, r7, r3
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	b29b      	uxth	r3, r3
 8001448:	b2da      	uxtb	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001452:	6a39      	ldr	r1, [r7, #32]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	0018      	movs	r0, r3
 8001458:	f000 f8fc 	bl	8001654 <I2C_WaitOnTXISFlagUntilTimeout>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d001      	beq.n	8001464 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e014      	b.n	800148e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001464:	2308      	movs	r3, #8
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001472:	6a3a      	ldr	r2, [r7, #32]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	0013      	movs	r3, r2
 800147c:	2200      	movs	r2, #0
 800147e:	2180      	movs	r1, #128	@ 0x80
 8001480:	f000 f890 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bdb0      	pop	{r4, r5, r7, pc}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	80002000 	.word	0x80002000

0800149c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	000c      	movs	r4, r1
 80014a6:	0010      	movs	r0, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	250a      	movs	r5, #10
 80014ac:	197b      	adds	r3, r7, r5
 80014ae:	1c22      	adds	r2, r4, #0
 80014b0:	801a      	strh	r2, [r3, #0]
 80014b2:	2308      	movs	r3, #8
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	1c02      	adds	r2, r0, #0
 80014b8:	801a      	strh	r2, [r3, #0]
 80014ba:	1dbb      	adds	r3, r7, #6
 80014bc:	1c0a      	adds	r2, r1, #0
 80014be:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80014c0:	1dbb      	adds	r3, r7, #6
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	197b      	adds	r3, r7, r5
 80014c8:	8819      	ldrh	r1, [r3, #0]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	4b23      	ldr	r3, [pc, #140]	@ (800155c <I2C_RequestMemoryRead+0xc0>)
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2300      	movs	r3, #0
 80014d2:	f000 fa41 	bl	8001958 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d8:	6a39      	ldr	r1, [r7, #32]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	0018      	movs	r0, r3
 80014de:	f000 f8b9 	bl	8001654 <I2C_WaitOnTXISFlagUntilTimeout>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d001      	beq.n	80014ea <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e033      	b.n	8001552 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014ea:	1dbb      	adds	r3, r7, #6
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014f2:	2308      	movs	r3, #8
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001500:	e019      	b.n	8001536 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001502:	2308      	movs	r3, #8
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	b29b      	uxth	r3, r3
 800150c:	b2da      	uxtb	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001516:	6a39      	ldr	r1, [r7, #32]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f89a 	bl	8001654 <I2C_WaitOnTXISFlagUntilTimeout>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e014      	b.n	8001552 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001528:	2308      	movs	r3, #8
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001536:	6a3a      	ldr	r2, [r7, #32]
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	0013      	movs	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	2140      	movs	r1, #64	@ 0x40
 8001544:	f000 f82e 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d001      	beq.n	8001550 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bdb0      	pop	{r4, r5, r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	80002000 	.word	0x80002000

08001560 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	2b02      	cmp	r3, #2
 8001574:	d103      	bne.n	800157e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	2b01      	cmp	r3, #1
 800158a:	d007      	beq.n	800159c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2101      	movs	r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	619a      	str	r2, [r3, #24]
  }
}
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015b4:	e03a      	b.n	800162c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	6839      	ldr	r1, [r7, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	0018      	movs	r0, r3
 80015be:	f000 f8d3 	bl	8001768 <I2C_IsErrorOccurred>
 80015c2:	1e03      	subs	r3, r0, #0
 80015c4:	d001      	beq.n	80015ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e040      	b.n	800164c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	d02d      	beq.n	800162c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d0:	f7ff f8a8 	bl	8000724 <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d302      	bcc.n	80015e6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d122      	bne.n	800162c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	4013      	ands	r3, r2
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	425a      	negs	r2, r3
 80015f6:	4153      	adcs	r3, r2
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	001a      	movs	r2, r3
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d113      	bne.n	800162c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001608:	2220      	movs	r2, #32
 800160a:	431a      	orrs	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2241      	movs	r2, #65	@ 0x41
 8001614:	2120      	movs	r1, #32
 8001616:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2242      	movs	r2, #66	@ 0x42
 800161c:	2100      	movs	r1, #0
 800161e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2240      	movs	r2, #64	@ 0x40
 8001624:	2100      	movs	r1, #0
 8001626:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e00f      	b.n	800164c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4013      	ands	r3, r2
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	425a      	negs	r2, r3
 800163c:	4153      	adcs	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	001a      	movs	r2, r3
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d0b5      	beq.n	80015b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b004      	add	sp, #16
 8001652:	bd80      	pop	{r7, pc}

08001654 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001660:	e032      	b.n	80016c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0018      	movs	r0, r3
 800166a:	f000 f87d 	bl	8001768 <I2C_IsErrorOccurred>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e030      	b.n	80016d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	d025      	beq.n	80016c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800167c:	f7ff f852 	bl	8000724 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	429a      	cmp	r2, r3
 800168a:	d302      	bcc.n	8001692 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d11a      	bne.n	80016c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	2b02      	cmp	r3, #2
 800169e:	d013      	beq.n	80016c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a4:	2220      	movs	r2, #32
 80016a6:	431a      	orrs	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2241      	movs	r2, #65	@ 0x41
 80016b0:	2120      	movs	r1, #32
 80016b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2242      	movs	r2, #66	@ 0x42
 80016b8:	2100      	movs	r1, #0
 80016ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2240      	movs	r2, #64	@ 0x40
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e007      	b.n	80016d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d1c5      	bne.n	8001662 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bd80      	pop	{r7, pc}

080016e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ec:	e02f      	b.n	800174e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 f837 	bl	8001768 <I2C_IsErrorOccurred>
 80016fa:	1e03      	subs	r3, r0, #0
 80016fc:	d001      	beq.n	8001702 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e02d      	b.n	800175e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001702:	f7ff f80f 	bl	8000724 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	429a      	cmp	r2, r3
 8001710:	d302      	bcc.n	8001718 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d11a      	bne.n	800174e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2220      	movs	r2, #32
 8001720:	4013      	ands	r3, r2
 8001722:	2b20      	cmp	r3, #32
 8001724:	d013      	beq.n	800174e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	2220      	movs	r2, #32
 800172c:	431a      	orrs	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2241      	movs	r2, #65	@ 0x41
 8001736:	2120      	movs	r1, #32
 8001738:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2242      	movs	r2, #66	@ 0x42
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2240      	movs	r2, #64	@ 0x40
 8001746:	2100      	movs	r1, #0
 8001748:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e007      	b.n	800175e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2220      	movs	r2, #32
 8001756:	4013      	ands	r3, r2
 8001758:	2b20      	cmp	r3, #32
 800175a:	d1c8      	bne.n	80016ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	@ 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	2327      	movs	r3, #39	@ 0x27
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2210      	movs	r2, #16
 8001790:	4013      	ands	r3, r2
 8001792:	d100      	bne.n	8001796 <I2C_IsErrorOccurred+0x2e>
 8001794:	e079      	b.n	800188a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2210      	movs	r2, #16
 800179c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800179e:	e057      	b.n	8001850 <I2C_IsErrorOccurred+0xe8>
 80017a0:	2227      	movs	r2, #39	@ 0x27
 80017a2:	18bb      	adds	r3, r7, r2
 80017a4:	18ba      	adds	r2, r7, r2
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	d04f      	beq.n	8001850 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017b0:	f7fe ffb8 	bl	8000724 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d302      	bcc.n	80017c6 <I2C_IsErrorOccurred+0x5e>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d144      	bne.n	8001850 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	01db      	lsls	r3, r3, #7
 80017d0:	4013      	ands	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017d4:	2013      	movs	r0, #19
 80017d6:	183b      	adds	r3, r7, r0
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	2142      	movs	r1, #66	@ 0x42
 80017dc:	5c52      	ldrb	r2, [r2, r1]
 80017de:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	2380      	movs	r3, #128	@ 0x80
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	401a      	ands	r2, r3
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d126      	bne.n	8001842 <I2C_IsErrorOccurred+0xda>
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	01db      	lsls	r3, r3, #7
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d021      	beq.n	8001842 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80017fe:	183b      	adds	r3, r7, r0
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b20      	cmp	r3, #32
 8001804:	d01d      	beq.n	8001842 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2180      	movs	r1, #128	@ 0x80
 8001812:	01c9      	lsls	r1, r1, #7
 8001814:	430a      	orrs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001818:	f7fe ff84 	bl	8000724 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001820:	e00f      	b.n	8001842 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001822:	f7fe ff7f 	bl	8000724 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b19      	cmp	r3, #25
 800182e:	d908      	bls.n	8001842 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	2220      	movs	r2, #32
 8001834:	4313      	orrs	r3, r2
 8001836:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001838:	2327      	movs	r3, #39	@ 0x27
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]

              break;
 8001840:	e006      	b.n	8001850 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2220      	movs	r2, #32
 800184a:	4013      	ands	r3, r2
 800184c:	2b20      	cmp	r3, #32
 800184e:	d1e8      	bne.n	8001822 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2220      	movs	r2, #32
 8001858:	4013      	ands	r3, r2
 800185a:	2b20      	cmp	r3, #32
 800185c:	d004      	beq.n	8001868 <I2C_IsErrorOccurred+0x100>
 800185e:	2327      	movs	r3, #39	@ 0x27
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d09b      	beq.n	80017a0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001868:	2327      	movs	r3, #39	@ 0x27
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2220      	movs	r2, #32
 8001878:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	2204      	movs	r2, #4
 800187e:	4313      	orrs	r3, r2
 8001880:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001882:	2327      	movs	r3, #39	@ 0x27
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4013      	ands	r3, r2
 800189a:	d00c      	beq.n	80018b6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	2201      	movs	r2, #1
 80018a0:	4313      	orrs	r3, r2
 80018a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2280      	movs	r2, #128	@ 0x80
 80018aa:	0052      	lsls	r2, r2, #1
 80018ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018ae:	2327      	movs	r3, #39	@ 0x27
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	d00c      	beq.n	80018da <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	2208      	movs	r2, #8
 80018c4:	4313      	orrs	r3, r2
 80018c6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2280      	movs	r2, #128	@ 0x80
 80018ce:	00d2      	lsls	r2, r2, #3
 80018d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018d2:	2327      	movs	r3, #39	@ 0x27
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4013      	ands	r3, r2
 80018e2:	d00c      	beq.n	80018fe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	2202      	movs	r2, #2
 80018e8:	4313      	orrs	r3, r2
 80018ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2280      	movs	r2, #128	@ 0x80
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018f6:	2327      	movs	r3, #39	@ 0x27
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80018fe:	2327      	movs	r3, #39	@ 0x27
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01d      	beq.n	8001944 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff fe28 	bl	8001560 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	490e      	ldr	r1, [pc, #56]	@ (8001954 <I2C_IsErrorOccurred+0x1ec>)
 800191c:	400a      	ands	r2, r1
 800191e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2241      	movs	r2, #65	@ 0x41
 8001930:	2120      	movs	r1, #32
 8001932:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2242      	movs	r2, #66	@ 0x42
 8001938:	2100      	movs	r1, #0
 800193a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2240      	movs	r2, #64	@ 0x40
 8001940:	2100      	movs	r1, #0
 8001942:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001944:	2327      	movs	r3, #39	@ 0x27
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	781b      	ldrb	r3, [r3, #0]
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b00a      	add	sp, #40	@ 0x28
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	fe00e800 	.word	0xfe00e800

08001958 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	0008      	movs	r0, r1
 8001962:	0011      	movs	r1, r2
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	240a      	movs	r4, #10
 8001968:	193b      	adds	r3, r7, r4
 800196a:	1c02      	adds	r2, r0, #0
 800196c:	801a      	strh	r2, [r3, #0]
 800196e:	2009      	movs	r0, #9
 8001970:	183b      	adds	r3, r7, r0
 8001972:	1c0a      	adds	r2, r1, #0
 8001974:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001976:	193b      	adds	r3, r7, r4
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	059b      	lsls	r3, r3, #22
 800197c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800197e:	183b      	adds	r3, r7, r0
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0419      	lsls	r1, r3, #16
 8001984:	23ff      	movs	r3, #255	@ 0xff
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800198a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001992:	4313      	orrs	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019a2:	0d51      	lsrs	r1, r2, #21
 80019a4:	2280      	movs	r2, #128	@ 0x80
 80019a6:	00d2      	lsls	r2, r2, #3
 80019a8:	400a      	ands	r2, r1
 80019aa:	4907      	ldr	r1, [pc, #28]	@ (80019c8 <I2C_TransferConfig+0x70>)
 80019ac:	430a      	orrs	r2, r1
 80019ae:	43d2      	mvns	r2, r2
 80019b0:	401a      	ands	r2, r3
 80019b2:	0011      	movs	r1, r2
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b007      	add	sp, #28
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	03ff63ff 	.word	0x03ff63ff

080019cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2241      	movs	r2, #65	@ 0x41
 80019da:	5c9b      	ldrb	r3, [r3, r2]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d138      	bne.n	8001a54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2240      	movs	r2, #64	@ 0x40
 80019e6:	5c9b      	ldrb	r3, [r3, r2]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e032      	b.n	8001a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2240      	movs	r2, #64	@ 0x40
 80019f4:	2101      	movs	r1, #1
 80019f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2241      	movs	r2, #65	@ 0x41
 80019fc:	2124      	movs	r1, #36	@ 0x24
 80019fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	438a      	bics	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4911      	ldr	r1, [pc, #68]	@ (8001a60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6819      	ldr	r1, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2241      	movs	r2, #65	@ 0x41
 8001a44:	2120      	movs	r1, #32
 8001a46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2240      	movs	r2, #64	@ 0x40
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e000      	b.n	8001a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
  }
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b002      	add	sp, #8
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	ffffefff 	.word	0xffffefff

08001a64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2241      	movs	r2, #65	@ 0x41
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b20      	cmp	r3, #32
 8001a78:	d139      	bne.n	8001aee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2240      	movs	r2, #64	@ 0x40
 8001a7e:	5c9b      	ldrb	r3, [r3, r2]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e033      	b.n	8001af0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2240      	movs	r2, #64	@ 0x40
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2241      	movs	r2, #65	@ 0x41
 8001a94:	2124      	movs	r1, #36	@ 0x24
 8001a96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2241      	movs	r2, #65	@ 0x41
 8001ade:	2120      	movs	r1, #32
 8001ae0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2240      	movs	r2, #64	@ 0x40
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001aee:	2302      	movs	r3, #2
  }
}
 8001af0:	0018      	movs	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b004      	add	sp, #16
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	fffff0ff 	.word	0xfffff0ff

08001afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a19      	ldr	r2, [pc, #100]	@ (8001b70 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d11f      	bne.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b20:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	0013      	movs	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	189b      	adds	r3, r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4912      	ldr	r1, [pc, #72]	@ (8001b78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7fe faf0 	bl	8000114 <__udivsi3>
 8001b34:	0003      	movs	r3, r0
 8001b36:	3301      	adds	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b3a:	e008      	b.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e001      	b.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e009      	b.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	401a      	ands	r2, r3
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d0ed      	beq.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b004      	add	sp, #16
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	fffff9ff 	.word	0xfffff9ff
 8001b74:	20000008 	.word	0x20000008
 8001b78:	000f4240 	.word	0x000f4240

08001b7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b80:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	23e0      	movs	r3, #224	@ 0xe0
 8001b86:	01db      	lsls	r3, r3, #7
 8001b88:	4013      	ands	r3, r2
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e2fe      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4013      	ands	r3, r2
 8001bae:	d100      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x1e>
 8001bb0:	e07c      	b.n	8001cac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb2:	4bc3      	ldr	r3, [pc, #780]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2238      	movs	r2, #56	@ 0x38
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bbc:	4bc0      	ldr	r3, [pc, #768]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d102      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3e>
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d002      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	4bb9      	ldr	r3, [pc, #740]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	029b      	lsls	r3, r3, #10
 8001be0:	4013      	ands	r3, r2
 8001be2:	d062      	beq.n	8001caa <HAL_RCC_OscConfig+0x116>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d15e      	bne.n	8001caa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e2d9      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	025b      	lsls	r3, r3, #9
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_OscConfig+0x78>
 8001bfc:	4bb0      	ldr	r3, [pc, #704]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4baf      	ldr	r3, [pc, #700]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	2180      	movs	r1, #128	@ 0x80
 8001c04:	0249      	lsls	r1, r1, #9
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e020      	b.n	8001c4e <HAL_RCC_OscConfig+0xba>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	23a0      	movs	r3, #160	@ 0xa0
 8001c12:	02db      	lsls	r3, r3, #11
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10e      	bne.n	8001c36 <HAL_RCC_OscConfig+0xa2>
 8001c18:	4ba9      	ldr	r3, [pc, #676]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4ba8      	ldr	r3, [pc, #672]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	2180      	movs	r1, #128	@ 0x80
 8001c20:	02c9      	lsls	r1, r1, #11
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	4ba6      	ldr	r3, [pc, #664]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4ba5      	ldr	r3, [pc, #660]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	2180      	movs	r1, #128	@ 0x80
 8001c2e:	0249      	lsls	r1, r1, #9
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e00b      	b.n	8001c4e <HAL_RCC_OscConfig+0xba>
 8001c36:	4ba2      	ldr	r3, [pc, #648]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4ba1      	ldr	r3, [pc, #644]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c3c:	49a1      	ldr	r1, [pc, #644]	@ (8001ec4 <HAL_RCC_OscConfig+0x330>)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	4b9f      	ldr	r3, [pc, #636]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b9e      	ldr	r3, [pc, #632]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	499f      	ldr	r1, [pc, #636]	@ (8001ec8 <HAL_RCC_OscConfig+0x334>)
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d014      	beq.n	8001c80 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7fe fd65 	bl	8000724 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7fe fd60 	bl	8000724 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	@ 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e298      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c72:	4b93      	ldr	r3, [pc, #588]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2380      	movs	r3, #128	@ 0x80
 8001c78:	029b      	lsls	r3, r3, #10
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xcc>
 8001c7e:	e015      	b.n	8001cac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7fe fd50 	bl	8000724 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8a:	f7fe fd4b 	bl	8000724 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	@ 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e283      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9c:	4b88      	ldr	r3, [pc, #544]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0xf6>
 8001ca8:	e000      	b.n	8001cac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001caa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d100      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x124>
 8001cb6:	e099      	b.n	8001dec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb8:	4b81      	ldr	r3, [pc, #516]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2238      	movs	r2, #56	@ 0x38
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x144>
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d002      	beq.n	8001cde <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d135      	bne.n	8001d4a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cde:	4b78      	ldr	r3, [pc, #480]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d005      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x162>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e256      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	4b72      	ldr	r3, [pc, #456]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a74      	ldr	r2, [pc, #464]	@ (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	021a      	lsls	r2, r3, #8
 8001d06:	4b6e      	ldr	r3, [pc, #440]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d112      	bne.n	8001d38 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d12:	4b6b      	ldr	r3, [pc, #428]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed0 <HAL_RCC_OscConfig+0x33c>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	4b67      	ldr	r3, [pc, #412]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d26:	4b66      	ldr	r3, [pc, #408]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0adb      	lsrs	r3, r3, #11
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	4013      	ands	r3, r2
 8001d30:	4a68      	ldr	r2, [pc, #416]	@ (8001ed4 <HAL_RCC_OscConfig+0x340>)
 8001d32:	40da      	lsrs	r2, r3
 8001d34:	4b68      	ldr	r3, [pc, #416]	@ (8001ed8 <HAL_RCC_OscConfig+0x344>)
 8001d36:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d38:	4b68      	ldr	r3, [pc, #416]	@ (8001edc <HAL_RCC_OscConfig+0x348>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7fe fc95 	bl	800066c <HAL_InitTick>
 8001d42:	1e03      	subs	r3, r0, #0
 8001d44:	d051      	beq.n	8001dea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e22c      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d030      	beq.n	8001db4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d52:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5e      	ldr	r2, [pc, #376]	@ (8001ed0 <HAL_RCC_OscConfig+0x33c>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	4b57      	ldr	r3, [pc, #348]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d66:	4b56      	ldr	r3, [pc, #344]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b55      	ldr	r3, [pc, #340]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0049      	lsls	r1, r1, #1
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe fcd6 	bl	8000724 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7fe fcd1 	bl	8000724 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e209      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	@ 0x80
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b48      	ldr	r3, [pc, #288]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a4a      	ldr	r2, [pc, #296]	@ (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	021a      	lsls	r2, r3, #8
 8001dac:	4b44      	ldr	r3, [pc, #272]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	e01b      	b.n	8001dec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001db4:	4b42      	ldr	r3, [pc, #264]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b41      	ldr	r3, [pc, #260]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001dba:	4949      	ldr	r1, [pc, #292]	@ (8001ee0 <HAL_RCC_OscConfig+0x34c>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fcb0 	bl	8000724 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7fe fcab 	bl	8000724 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e1e3      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ddc:	4b38      	ldr	r3, [pc, #224]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4013      	ands	r3, r2
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x236>
 8001de8:	e000      	b.n	8001dec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2208      	movs	r2, #8
 8001df2:	4013      	ands	r3, r2
 8001df4:	d047      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001df6:	4b32      	ldr	r3, [pc, #200]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2238      	movs	r2, #56	@ 0x38
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b18      	cmp	r3, #24
 8001e00:	d10a      	bne.n	8001e18 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e02:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e06:	2202      	movs	r2, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d03c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2f2>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d138      	bne.n	8001e86 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e1c5      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d019      	beq.n	8001e54 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e20:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001e22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e24:	4b26      	ldr	r3, [pc, #152]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe fc7a 	bl	8000724 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e36:	f7fe fc75 	bl	8000724 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e1ad      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d0f1      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2a2>
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001e56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e58:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe fc60 	bl	8000724 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7fe fc5b 	bl	8000724 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e193      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d1f1      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d100      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2fe>
 8001e90:	e0c6      	b.n	8002020 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e92:	231f      	movs	r3, #31
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2238      	movs	r2, #56	@ 0x38
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d11e      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d100      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x31e>
 8001eb0:	e0b6      	b.n	8002020 <HAL_RCC_OscConfig+0x48c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d000      	beq.n	8001ebc <HAL_RCC_OscConfig+0x328>
 8001eba:	e0b1      	b.n	8002020 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e171      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	fffeffff 	.word	0xfffeffff
 8001ec8:	fffbffff 	.word	0xfffbffff
 8001ecc:	ffff80ff 	.word	0xffff80ff
 8001ed0:	ffffc7ff 	.word	0xffffc7ff
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ee4:	4bb1      	ldr	r3, [pc, #708]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	055b      	lsls	r3, r3, #21
 8001eec:	4013      	ands	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x360>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x362>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d011      	beq.n	8001f1e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4bac      	ldr	r3, [pc, #688]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001efc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001efe:	4bab      	ldr	r3, [pc, #684]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f00:	2180      	movs	r1, #128	@ 0x80
 8001f02:	0549      	lsls	r1, r1, #21
 8001f04:	430a      	orrs	r2, r1
 8001f06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f08:	4ba8      	ldr	r3, [pc, #672]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	055b      	lsls	r3, r3, #21
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f16:	231f      	movs	r3, #31
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1e:	4ba4      	ldr	r3, [pc, #656]	@ (80021b0 <HAL_RCC_OscConfig+0x61c>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	d11a      	bne.n	8001f60 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f2a:	4ba1      	ldr	r3, [pc, #644]	@ (80021b0 <HAL_RCC_OscConfig+0x61c>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4ba0      	ldr	r3, [pc, #640]	@ (80021b0 <HAL_RCC_OscConfig+0x61c>)
 8001f30:	2180      	movs	r1, #128	@ 0x80
 8001f32:	0049      	lsls	r1, r1, #1
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fbf4 	bl	8000724 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f42:	f7fe fbef 	bl	8000724 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e127      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f54:	4b96      	ldr	r3, [pc, #600]	@ (80021b0 <HAL_RCC_OscConfig+0x61c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	@ 0x80
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3e2>
 8001f68:	4b90      	ldr	r3, [pc, #576]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f6e:	2101      	movs	r1, #1
 8001f70:	430a      	orrs	r2, r1
 8001f72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f74:	e01c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x41c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x404>
 8001f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f82:	4b8a      	ldr	r3, [pc, #552]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f84:	2104      	movs	r1, #4
 8001f86:	430a      	orrs	r2, r1
 8001f88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f8a:	4b88      	ldr	r3, [pc, #544]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f8e:	4b87      	ldr	r3, [pc, #540]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x41c>
 8001f98:	4b84      	ldr	r3, [pc, #528]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f9c:	4b83      	ldr	r3, [pc, #524]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fa4:	4b81      	ldr	r3, [pc, #516]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001fa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fa8:	4b80      	ldr	r3, [pc, #512]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001faa:	2104      	movs	r1, #4
 8001fac:	438a      	bics	r2, r1
 8001fae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d014      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fbb4 	bl	8000724 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc0:	e009      	b.n	8001fd6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe fbaf 	bl	8000724 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	4a79      	ldr	r2, [pc, #484]	@ (80021b4 <HAL_RCC_OscConfig+0x620>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0e6      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd6:	4b75      	ldr	r3, [pc, #468]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x42e>
 8001fe0:	e013      	b.n	800200a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fb9f 	bl	8000724 <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fea:	e009      	b.n	8002000 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fec:	f7fe fb9a 	bl	8000724 <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	4a6f      	ldr	r2, [pc, #444]	@ (80021b4 <HAL_RCC_OscConfig+0x620>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0d1      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002000:	4b6a      	ldr	r3, [pc, #424]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	2202      	movs	r2, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800200a:	231f      	movs	r3, #31
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002014:	4b65      	ldr	r3, [pc, #404]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002018:	4b64      	ldr	r3, [pc, #400]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 800201a:	4967      	ldr	r1, [pc, #412]	@ (80021b8 <HAL_RCC_OscConfig+0x624>)
 800201c:	400a      	ands	r2, r1
 800201e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <HAL_RCC_OscConfig+0x496>
 8002028:	e0bb      	b.n	80021a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202a:	4b60      	ldr	r3, [pc, #384]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2238      	movs	r2, #56	@ 0x38
 8002030:	4013      	ands	r3, r2
 8002032:	2b10      	cmp	r3, #16
 8002034:	d100      	bne.n	8002038 <HAL_RCC_OscConfig+0x4a4>
 8002036:	e07b      	b.n	8002130 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d156      	bne.n	80020ee <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b5a      	ldr	r3, [pc, #360]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b59      	ldr	r3, [pc, #356]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002046:	495d      	ldr	r1, [pc, #372]	@ (80021bc <HAL_RCC_OscConfig+0x628>)
 8002048:	400a      	ands	r2, r1
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe fb6a 	bl	8000724 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7fe fb65 	bl	8000724 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e09d      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002068:	4b50      	ldr	r3, [pc, #320]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	049b      	lsls	r3, r3, #18
 8002070:	4013      	ands	r3, r2
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002074:	4b4d      	ldr	r3, [pc, #308]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a51      	ldr	r2, [pc, #324]	@ (80021c0 <HAL_RCC_OscConfig+0x62c>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a0:	431a      	orrs	r2, r3
 80020a2:	4b42      	ldr	r3, [pc, #264]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020a4:	430a      	orrs	r2, r1
 80020a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a8:	4b40      	ldr	r3, [pc, #256]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b3f      	ldr	r3, [pc, #252]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020ae:	2180      	movs	r1, #128	@ 0x80
 80020b0:	0449      	lsls	r1, r1, #17
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80020b6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	4b3c      	ldr	r3, [pc, #240]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020bc:	2180      	movs	r1, #128	@ 0x80
 80020be:	0549      	lsls	r1, r1, #21
 80020c0:	430a      	orrs	r2, r1
 80020c2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe fb2e 	bl	8000724 <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ce:	f7fe fb29 	bl	8000724 <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e061      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e0:	4b32      	ldr	r3, [pc, #200]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	049b      	lsls	r3, r3, #18
 80020e8:	4013      	ands	r3, r2
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x53a>
 80020ec:	e059      	b.n	80021a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b2f      	ldr	r3, [pc, #188]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020f4:	4931      	ldr	r1, [pc, #196]	@ (80021bc <HAL_RCC_OscConfig+0x628>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7fe fb13 	bl	8000724 <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe fb0e 	bl	8000724 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e046      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	@ 0x80
 800211c:	049b      	lsls	r3, r3, #18
 800211e:	4013      	ands	r3, r2
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	4b21      	ldr	r3, [pc, #132]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002128:	4926      	ldr	r1, [pc, #152]	@ (80021c4 <HAL_RCC_OscConfig+0x630>)
 800212a:	400a      	ands	r2, r1
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	e038      	b.n	80021a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e033      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2203      	movs	r2, #3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	429a      	cmp	r2, r3
 800214e:	d126      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2270      	movs	r2, #112	@ 0x70
 8002154:	401a      	ands	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d11f      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	23fe      	movs	r3, #254	@ 0xfe
 8002162:	01db      	lsls	r3, r3, #7
 8002164:	401a      	ands	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d116      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	23f8      	movs	r3, #248	@ 0xf8
 8002174:	039b      	lsls	r3, r3, #14
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d10e      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	23e0      	movs	r3, #224	@ 0xe0
 8002184:	051b      	lsls	r3, r3, #20
 8002186:	401a      	ands	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	0f5b      	lsrs	r3, r3, #29
 8002194:	075a      	lsls	r2, r3, #29
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b008      	add	sp, #32
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40007000 	.word	0x40007000
 80021b4:	00001388 	.word	0x00001388
 80021b8:	efffffff 	.word	0xefffffff
 80021bc:	feffffff 	.word	0xfeffffff
 80021c0:	11c1808c 	.word	0x11c1808c
 80021c4:	eefefffc 	.word	0xeefefffc

080021c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0e9      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b76      	ldr	r3, [pc, #472]	@ (80023b8 <HAL_RCC_ClockConfig+0x1f0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2207      	movs	r2, #7
 80021e2:	4013      	ands	r3, r2
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d91e      	bls.n	8002228 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b73      	ldr	r3, [pc, #460]	@ (80023b8 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2207      	movs	r2, #7
 80021f0:	4393      	bics	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	4b70      	ldr	r3, [pc, #448]	@ (80023b8 <HAL_RCC_ClockConfig+0x1f0>)
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021fc:	f7fe fa92 	bl	8000724 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002204:	e009      	b.n	800221a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002206:	f7fe fa8d 	bl	8000724 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	4a6a      	ldr	r2, [pc, #424]	@ (80023bc <HAL_RCC_ClockConfig+0x1f4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0ca      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800221a:	4b67      	ldr	r3, [pc, #412]	@ (80023b8 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2207      	movs	r2, #7
 8002220:	4013      	ands	r3, r2
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d1ee      	bne.n	8002206 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d015      	beq.n	800225e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2204      	movs	r2, #4
 8002238:	4013      	ands	r3, r2
 800223a:	d006      	beq.n	800224a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800223c:	4b60      	ldr	r3, [pc, #384]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	4b5f      	ldr	r3, [pc, #380]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002242:	21e0      	movs	r1, #224	@ 0xe0
 8002244:	01c9      	lsls	r1, r1, #7
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224a:	4b5d      	ldr	r3, [pc, #372]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4a5d      	ldr	r2, [pc, #372]	@ (80023c4 <HAL_RCC_ClockConfig+0x1fc>)
 8002250:	4013      	ands	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	4b59      	ldr	r3, [pc, #356]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	4013      	ands	r3, r2
 8002266:	d057      	beq.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002270:	4b53      	ldr	r3, [pc, #332]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	029b      	lsls	r3, r3, #10
 8002278:	4013      	ands	r3, r2
 800227a:	d12b      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e097      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d107      	bne.n	8002298 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002288:	4b4d      	ldr	r3, [pc, #308]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	049b      	lsls	r3, r3, #18
 8002290:	4013      	ands	r3, r2
 8002292:	d11f      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e08b      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a0:	4b47      	ldr	r3, [pc, #284]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	@ 0x80
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4013      	ands	r3, r2
 80022aa:	d113      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e07f      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b8:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 80022ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022bc:	2202      	movs	r2, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d108      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e074      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c6:	4b3e      	ldr	r3, [pc, #248]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	2202      	movs	r2, #2
 80022cc:	4013      	ands	r3, r2
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e06d      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022d4:	4b3a      	ldr	r3, [pc, #232]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2207      	movs	r2, #7
 80022da:	4393      	bics	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4b37      	ldr	r3, [pc, #220]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e8:	f7fe fa1c 	bl	8000724 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f0:	e009      	b.n	8002306 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f2:	f7fe fa17 	bl	8000724 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	4a2f      	ldr	r2, [pc, #188]	@ (80023bc <HAL_RCC_ClockConfig+0x1f4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e054      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2e      	ldr	r3, [pc, #184]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2238      	movs	r2, #56	@ 0x38
 800230c:	401a      	ands	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	429a      	cmp	r2, r3
 8002316:	d1ec      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <HAL_RCC_ClockConfig+0x1f0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2207      	movs	r2, #7
 800231e:	4013      	ands	r3, r2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d21e      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2207      	movs	r2, #7
 800232c:	4393      	bics	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	4b21      	ldr	r3, [pc, #132]	@ (80023b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002338:	f7fe f9f4 	bl	8000724 <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002340:	e009      	b.n	8002356 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002342:	f7fe f9ef 	bl	8000724 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a1b      	ldr	r2, [pc, #108]	@ (80023bc <HAL_RCC_ClockConfig+0x1f4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e02c      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002356:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2207      	movs	r2, #7
 800235c:	4013      	ands	r3, r2
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2204      	movs	r2, #4
 800236a:	4013      	ands	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800236e:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4a15      	ldr	r2, [pc, #84]	@ (80023c8 <HAL_RCC_ClockConfig+0x200>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002382:	f000 f829 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002386:	0001      	movs	r1, r0
 8002388:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <HAL_RCC_ClockConfig+0x1f8>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	220f      	movs	r2, #15
 8002390:	401a      	ands	r2, r3
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_RCC_ClockConfig+0x204>)
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	58d3      	ldr	r3, [r2, r3]
 8002398:	221f      	movs	r2, #31
 800239a:	4013      	ands	r3, r2
 800239c:	000a      	movs	r2, r1
 800239e:	40da      	lsrs	r2, r3
 80023a0:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_RCC_ClockConfig+0x208>)
 80023a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <HAL_RCC_ClockConfig+0x20c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7fe f95f 	bl	800066c <HAL_InitTick>
 80023ae:	0003      	movs	r3, r0
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b004      	add	sp, #16
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40022000 	.word	0x40022000
 80023bc:	00001388 	.word	0x00001388
 80023c0:	40021000 	.word	0x40021000
 80023c4:	fffff0ff 	.word	0xfffff0ff
 80023c8:	ffff8fff 	.word	0xffff8fff
 80023cc:	08004e24 	.word	0x08004e24
 80023d0:	20000008 	.word	0x20000008
 80023d4:	20000000 	.word	0x20000000

080023d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023de:	4b3c      	ldr	r3, [pc, #240]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2238      	movs	r2, #56	@ 0x38
 80023e4:	4013      	ands	r3, r2
 80023e6:	d10f      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023e8:	4b39      	ldr	r3, [pc, #228]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0adb      	lsrs	r3, r3, #11
 80023ee:	2207      	movs	r2, #7
 80023f0:	4013      	ands	r3, r2
 80023f2:	2201      	movs	r2, #1
 80023f4:	409a      	lsls	r2, r3
 80023f6:	0013      	movs	r3, r2
 80023f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023fa:	6839      	ldr	r1, [r7, #0]
 80023fc:	4835      	ldr	r0, [pc, #212]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023fe:	f7fd fe89 	bl	8000114 <__udivsi3>
 8002402:	0003      	movs	r3, r0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	e05d      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002408:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2238      	movs	r2, #56	@ 0x38
 800240e:	4013      	ands	r3, r2
 8002410:	2b08      	cmp	r3, #8
 8002412:	d102      	bne.n	800241a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002414:	4b30      	ldr	r3, [pc, #192]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e054      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241a:	4b2d      	ldr	r3, [pc, #180]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2238      	movs	r2, #56	@ 0x38
 8002420:	4013      	ands	r3, r2
 8002422:	2b10      	cmp	r3, #16
 8002424:	d138      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002426:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2203      	movs	r2, #3
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002430:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	2207      	movs	r2, #7
 8002438:	4013      	ands	r3, r2
 800243a:	3301      	adds	r3, #1
 800243c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d10d      	bne.n	8002460 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	4824      	ldr	r0, [pc, #144]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002448:	f7fd fe64 	bl	8000114 <__udivsi3>
 800244c:	0003      	movs	r3, r0
 800244e:	0019      	movs	r1, r3
 8002450:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	227f      	movs	r2, #127	@ 0x7f
 8002458:	4013      	ands	r3, r2
 800245a:	434b      	muls	r3, r1
 800245c:	617b      	str	r3, [r7, #20]
        break;
 800245e:	e00d      	b.n	800247c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	481c      	ldr	r0, [pc, #112]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002464:	f7fd fe56 	bl	8000114 <__udivsi3>
 8002468:	0003      	movs	r3, r0
 800246a:	0019      	movs	r1, r3
 800246c:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	227f      	movs	r2, #127	@ 0x7f
 8002474:	4013      	ands	r3, r2
 8002476:	434b      	muls	r3, r1
 8002478:	617b      	str	r3, [r7, #20]
        break;
 800247a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0f5b      	lsrs	r3, r3, #29
 8002482:	2207      	movs	r2, #7
 8002484:	4013      	ands	r3, r2
 8002486:	3301      	adds	r3, #1
 8002488:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	6978      	ldr	r0, [r7, #20]
 800248e:	f7fd fe41 	bl	8000114 <__udivsi3>
 8002492:	0003      	movs	r3, r0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	e015      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002498:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2238      	movs	r2, #56	@ 0x38
 800249e:	4013      	ands	r3, r2
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d103      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2238      	movs	r2, #56	@ 0x38
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b18      	cmp	r3, #24
 80024b6:	d103      	bne.n	80024c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024b8:	23fa      	movs	r3, #250	@ 0xfa
 80024ba:	01db      	lsls	r3, r3, #7
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	e001      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024c4:	693b      	ldr	r3, [r7, #16]
}
 80024c6:	0018      	movs	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b006      	add	sp, #24
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	40021000 	.word	0x40021000
 80024d4:	00f42400 	.word	0x00f42400
 80024d8:	007a1200 	.word	0x007a1200

080024dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e0:	4b02      	ldr	r3, [pc, #8]	@ (80024ec <HAL_RCC_GetHCLKFreq+0x10>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	20000008 	.word	0x20000008

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80024f4:	f7ff fff2 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 80024f8:	0004      	movs	r4, r0
 80024fa:	f7ff fb3f 	bl	8001b7c <LL_RCC_GetAPB1Prescaler>
 80024fe:	0003      	movs	r3, r0
 8002500:	0b1a      	lsrs	r2, r3, #12
 8002502:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002504:	0092      	lsls	r2, r2, #2
 8002506:	58d3      	ldr	r3, [r2, r3]
 8002508:	221f      	movs	r2, #31
 800250a:	4013      	ands	r3, r2
 800250c:	40dc      	lsrs	r4, r3
 800250e:	0023      	movs	r3, r4
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bdb0      	pop	{r4, r5, r7, pc}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	08004e64 	.word	0x08004e64

0800251c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002524:	2313      	movs	r3, #19
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800252c:	2312      	movs	r3, #18
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	4013      	ands	r3, r2
 800253e:	d100      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002540:	e0a3      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2011      	movs	r0, #17
 8002544:	183b      	adds	r3, r7, r0
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4bc3      	ldr	r3, [pc, #780]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800254c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	055b      	lsls	r3, r3, #21
 8002552:	4013      	ands	r3, r2
 8002554:	d110      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4bc0      	ldr	r3, [pc, #768]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002558:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800255a:	4bbf      	ldr	r3, [pc, #764]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800255c:	2180      	movs	r1, #128	@ 0x80
 800255e:	0549      	lsls	r1, r1, #21
 8002560:	430a      	orrs	r2, r1
 8002562:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002564:	4bbc      	ldr	r3, [pc, #752]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	055b      	lsls	r3, r3, #21
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002572:	183b      	adds	r3, r7, r0
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002578:	4bb8      	ldr	r3, [pc, #736]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4bb7      	ldr	r3, [pc, #732]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800257e:	2180      	movs	r1, #128	@ 0x80
 8002580:	0049      	lsls	r1, r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002586:	f7fe f8cd 	bl	8000724 <HAL_GetTick>
 800258a:	0003      	movs	r3, r0
 800258c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800258e:	e00b      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002590:	f7fe f8c8 	bl	8000724 <HAL_GetTick>
 8002594:	0002      	movs	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d904      	bls.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800259e:	2313      	movs	r3, #19
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2203      	movs	r2, #3
 80025a4:	701a      	strb	r2, [r3, #0]
        break;
 80025a6:	e005      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025a8:	4bac      	ldr	r3, [pc, #688]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	2380      	movs	r3, #128	@ 0x80
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4013      	ands	r3, r2
 80025b2:	d0ed      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80025b4:	2313      	movs	r3, #19
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d154      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025be:	4ba6      	ldr	r3, [pc, #664]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025c2:	23c0      	movs	r3, #192	@ 0xc0
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4013      	ands	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d019      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d014      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025da:	4b9f      	ldr	r3, [pc, #636]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025de:	4aa0      	ldr	r2, [pc, #640]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025e8:	4b9b      	ldr	r3, [pc, #620]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ea:	2180      	movs	r1, #128	@ 0x80
 80025ec:	0249      	lsls	r1, r1, #9
 80025ee:	430a      	orrs	r2, r1
 80025f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025f2:	4b99      	ldr	r3, [pc, #612]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025f6:	4b98      	ldr	r3, [pc, #608]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f8:	499a      	ldr	r1, [pc, #616]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80025fa:	400a      	ands	r2, r1
 80025fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025fe:	4b96      	ldr	r3, [pc, #600]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	d016      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe f88a 	bl	8000724 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002614:	e00c      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe f885 	bl	8000724 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	4a91      	ldr	r2, [pc, #580]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d904      	bls.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002626:	2313      	movs	r3, #19
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2203      	movs	r2, #3
 800262c:	701a      	strb	r2, [r3, #0]
            break;
 800262e:	e004      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002630:	4b89      	ldr	r3, [pc, #548]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	2202      	movs	r2, #2
 8002636:	4013      	ands	r3, r2
 8002638:	d0ed      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800263a:	2313      	movs	r3, #19
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002644:	4b84      	ldr	r3, [pc, #528]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	4a85      	ldr	r2, [pc, #532]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800264a:	4013      	ands	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002652:	4b81      	ldr	r3, [pc, #516]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002654:	430a      	orrs	r2, r1
 8002656:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002658:	e00c      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800265a:	2312      	movs	r3, #18
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2213      	movs	r2, #19
 8002660:	18ba      	adds	r2, r7, r2
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e005      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002668:	2312      	movs	r3, #18
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2213      	movs	r2, #19
 800266e:	18ba      	adds	r2, r7, r2
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002674:	2311      	movs	r3, #17
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b76      	ldr	r3, [pc, #472]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002680:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002682:	4b75      	ldr	r3, [pc, #468]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002684:	4979      	ldr	r1, [pc, #484]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002686:	400a      	ands	r2, r1
 8002688:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2201      	movs	r2, #1
 8002690:	4013      	ands	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002694:	4b70      	ldr	r3, [pc, #448]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	2203      	movs	r2, #3
 800269a:	4393      	bics	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2202      	movs	r2, #2
 80026ae:	4013      	ands	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b2:	4b69      	ldr	r3, [pc, #420]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	220c      	movs	r2, #12
 80026b8:	4393      	bics	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	4b65      	ldr	r3, [pc, #404]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026c2:	430a      	orrs	r2, r1
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2210      	movs	r2, #16
 80026cc:	4013      	ands	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026d0:	4b61      	ldr	r3, [pc, #388]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d4:	4a66      	ldr	r2, [pc, #408]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	0019      	movs	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	4b5e      	ldr	r3, [pc, #376]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e0:	430a      	orrs	r2, r1
 80026e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	d009      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f0:	4b59      	ldr	r3, [pc, #356]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	4b56      	ldr	r3, [pc, #344]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002700:	430a      	orrs	r2, r1
 8002702:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4013      	ands	r3, r2
 800270e:	d009      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002710:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	4a58      	ldr	r2, [pc, #352]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002716:	4013      	ands	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	4b4e      	ldr	r3, [pc, #312]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002720:	430a      	orrs	r2, r1
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2220      	movs	r2, #32
 800272a:	4013      	ands	r3, r2
 800272c:	d009      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800272e:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002732:	4a52      	ldr	r2, [pc, #328]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002734:	4013      	ands	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	4b46      	ldr	r3, [pc, #280]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800273e:	430a      	orrs	r2, r1
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	01db      	lsls	r3, r3, #7
 800274a:	4013      	ands	r3, r2
 800274c:	d015      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800274e:	4b42      	ldr	r3, [pc, #264]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	0899      	lsrs	r1, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	4b3f      	ldr	r3, [pc, #252]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800275c:	430a      	orrs	r2, r1
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	05db      	lsls	r3, r3, #23
 8002768:	429a      	cmp	r2, r3
 800276a:	d106      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800276c:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002772:	2180      	movs	r1, #128	@ 0x80
 8002774:	0249      	lsls	r1, r1, #9
 8002776:	430a      	orrs	r2, r1
 8002778:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	031b      	lsls	r3, r3, #12
 8002782:	4013      	ands	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002786:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	2240      	movs	r2, #64	@ 0x40
 800278c:	4393      	bics	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002794:	4b30      	ldr	r3, [pc, #192]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002796:	430a      	orrs	r2, r1
 8002798:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	039b      	lsls	r3, r3, #14
 80027a2:	4013      	ands	r3, r2
 80027a4:	d016      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027aa:	4a35      	ldr	r2, [pc, #212]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	0019      	movs	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027b4:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b6:	430a      	orrs	r2, r1
 80027b8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	03db      	lsls	r3, r3, #15
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d106      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027c6:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	0449      	lsls	r1, r1, #17
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	03db      	lsls	r3, r3, #15
 80027dc:	4013      	ands	r3, r2
 80027de:	d016      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f0:	430a      	orrs	r2, r1
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	045b      	lsls	r3, r3, #17
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d106      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002800:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002806:	2180      	movs	r1, #128	@ 0x80
 8002808:	0449      	lsls	r1, r1, #17
 800280a:	430a      	orrs	r2, r1
 800280c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	@ 0x80
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	4013      	ands	r3, r2
 8002818:	d016      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800281a:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800281c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281e:	4a1a      	ldr	r2, [pc, #104]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002820:	4013      	ands	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800282a:	430a      	orrs	r2, r1
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	2380      	movs	r3, #128	@ 0x80
 8002834:	01db      	lsls	r3, r3, #7
 8002836:	429a      	cmp	r2, r3
 8002838:	d106      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800283a:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002840:	2180      	movs	r1, #128	@ 0x80
 8002842:	0249      	lsls	r1, r1, #9
 8002844:	430a      	orrs	r2, r1
 8002846:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002848:	2312      	movs	r3, #18
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	781b      	ldrb	r3, [r3, #0]
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b006      	add	sp, #24
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	40021000 	.word	0x40021000
 800285c:	40007000 	.word	0x40007000
 8002860:	fffffcff 	.word	0xfffffcff
 8002864:	fffeffff 	.word	0xfffeffff
 8002868:	00001388 	.word	0x00001388
 800286c:	efffffff 	.word	0xefffffff
 8002870:	fffff3ff 	.word	0xfffff3ff
 8002874:	fff3ffff 	.word	0xfff3ffff
 8002878:	ffcfffff 	.word	0xffcfffff
 800287c:	ffffcfff 	.word	0xffffcfff
 8002880:	ffbfffff 	.word	0xffbfffff
 8002884:	feffffff 	.word	0xfeffffff
 8002888:	ffff3fff 	.word	0xffff3fff

0800288c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e046      	b.n	800292c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2288      	movs	r2, #136	@ 0x88
 80028a2:	589b      	ldr	r3, [r3, r2]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2284      	movs	r2, #132	@ 0x84
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f002 f8c6 	bl	8004a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2288      	movs	r2, #136	@ 0x88
 80028bc:	2124      	movs	r1, #36	@ 0x24
 80028be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2101      	movs	r1, #1
 80028cc:	438a      	bics	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fbce 	bl	800307c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 f90c 	bl	8002b00 <UART_SetConfig>
 80028e8:	0003      	movs	r3, r0
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e01c      	b.n	800292c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	490d      	ldr	r1, [pc, #52]	@ (8002934 <HAL_UART_Init+0xa8>)
 80028fe:	400a      	ands	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	212a      	movs	r1, #42	@ 0x2a
 800290e:	438a      	bics	r2, r1
 8002910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 fc5d 	bl	80031e4 <UART_CheckIdleState>
 800292a:	0003      	movs	r3, r0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}
 8002934:	ffffb7ff 	.word	0xffffb7ff

08002938 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e032      	b.n	80029b0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2288      	movs	r2, #136	@ 0x88
 800294e:	2124      	movs	r1, #36	@ 0x24
 8002950:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2101      	movs	r1, #1
 800295e:	438a      	bics	r2, r1
 8002960:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f002 f90b 	bl	8004b98 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2290      	movs	r2, #144	@ 0x90
 8002986:	2100      	movs	r1, #0
 8002988:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2288      	movs	r2, #136	@ 0x88
 800298e:	2100      	movs	r1, #0
 8002990:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	228c      	movs	r2, #140	@ 0x8c
 8002996:	2100      	movs	r1, #0
 8002998:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2284      	movs	r2, #132	@ 0x84
 80029aa:	2100      	movs	r1, #0
 80029ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	@ 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	1dbb      	adds	r3, r7, #6
 80029c6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2288      	movs	r2, #136	@ 0x88
 80029cc:	589b      	ldr	r3, [r3, r2]
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d000      	beq.n	80029d4 <HAL_UART_Transmit+0x1c>
 80029d2:	e090      	b.n	8002af6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_UART_Transmit+0x2a>
 80029da:	1dbb      	adds	r3, r7, #6
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e088      	b.n	8002af8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	015b      	lsls	r3, r3, #5
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d109      	bne.n	8002a06 <HAL_UART_Transmit+0x4e>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2201      	movs	r2, #1
 80029fe:	4013      	ands	r3, r2
 8002a00:	d001      	beq.n	8002a06 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e078      	b.n	8002af8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2290      	movs	r2, #144	@ 0x90
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2288      	movs	r2, #136	@ 0x88
 8002a12:	2121      	movs	r1, #33	@ 0x21
 8002a14:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a16:	f7fd fe85 	bl	8000724 <HAL_GetTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1dba      	adds	r2, r7, #6
 8002a22:	2154      	movs	r1, #84	@ 0x54
 8002a24:	8812      	ldrh	r2, [r2, #0]
 8002a26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1dba      	adds	r2, r7, #6
 8002a2c:	2156      	movs	r1, #86	@ 0x56
 8002a2e:	8812      	ldrh	r2, [r2, #0]
 8002a30:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	015b      	lsls	r3, r3, #5
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d108      	bne.n	8002a50 <HAL_UART_Transmit+0x98>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d104      	bne.n	8002a50 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	e003      	b.n	8002a58 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a58:	e030      	b.n	8002abc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	0013      	movs	r3, r2
 8002a64:	2200      	movs	r2, #0
 8002a66:	2180      	movs	r1, #128	@ 0x80
 8002a68:	f000 fc66 	bl	8003338 <UART_WaitOnFlagUntilTimeout>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2288      	movs	r2, #136	@ 0x88
 8002a74:	2120      	movs	r1, #32
 8002a76:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e03d      	b.n	8002af8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10b      	bne.n	8002a9a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	001a      	movs	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	05d2      	lsls	r2, r2, #23
 8002a8e:	0dd2      	lsrs	r2, r2, #23
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	3302      	adds	r3, #2
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	e007      	b.n	8002aaa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2256      	movs	r2, #86	@ 0x56
 8002aae:	5a9b      	ldrh	r3, [r3, r2]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b299      	uxth	r1, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2256      	movs	r2, #86	@ 0x56
 8002aba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2256      	movs	r2, #86	@ 0x56
 8002ac0:	5a9b      	ldrh	r3, [r3, r2]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1c8      	bne.n	8002a5a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2140      	movs	r1, #64	@ 0x40
 8002ad6:	f000 fc2f 	bl	8003338 <UART_WaitOnFlagUntilTimeout>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d005      	beq.n	8002aea <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2288      	movs	r2, #136	@ 0x88
 8002ae2:	2120      	movs	r1, #32
 8002ae4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e006      	b.n	8002af8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2288      	movs	r2, #136	@ 0x88
 8002aee:	2120      	movs	r1, #32
 8002af0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
  }
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b008      	add	sp, #32
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b00:	b5b0      	push	{r4, r5, r7, lr}
 8002b02:	b090      	sub	sp, #64	@ 0x40
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b08:	231a      	movs	r3, #26
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	189b      	adds	r3, r3, r2
 8002b0e:	19db      	adds	r3, r3, r7
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4aaf      	ldr	r2, [pc, #700]	@ (8002df0 <UART_SetConfig+0x2f0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	0019      	movs	r1, r3
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4aaa      	ldr	r2, [pc, #680]	@ (8002df4 <UART_SetConfig+0x2f4>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	68d9      	ldr	r1, [r3, #12]
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	0003      	movs	r3, r0
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4aa4      	ldr	r2, [pc, #656]	@ (8002df8 <UART_SetConfig+0x2f8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b72:	4313      	orrs	r3, r2
 8002b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a9f      	ldr	r2, [pc, #636]	@ (8002dfc <UART_SetConfig+0x2fc>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	220f      	movs	r2, #15
 8002b94:	4393      	bics	r3, r2
 8002b96:	0018      	movs	r0, r3
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a95      	ldr	r2, [pc, #596]	@ (8002e00 <UART_SetConfig+0x300>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d131      	bne.n	8002c14 <UART_SetConfig+0x114>
 8002bb0:	4b94      	ldr	r3, [pc, #592]	@ (8002e04 <UART_SetConfig+0x304>)
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d01d      	beq.n	8002bf8 <UART_SetConfig+0xf8>
 8002bbc:	d823      	bhi.n	8002c06 <UART_SetConfig+0x106>
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d00c      	beq.n	8002bdc <UART_SetConfig+0xdc>
 8002bc2:	d820      	bhi.n	8002c06 <UART_SetConfig+0x106>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <UART_SetConfig+0xce>
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d00e      	beq.n	8002bea <UART_SetConfig+0xea>
 8002bcc:	e01b      	b.n	8002c06 <UART_SetConfig+0x106>
 8002bce:	231b      	movs	r3, #27
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	189b      	adds	r3, r3, r2
 8002bd4:	19db      	adds	r3, r3, r7
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e0b4      	b.n	8002d46 <UART_SetConfig+0x246>
 8002bdc:	231b      	movs	r3, #27
 8002bde:	2220      	movs	r2, #32
 8002be0:	189b      	adds	r3, r3, r2
 8002be2:	19db      	adds	r3, r3, r7
 8002be4:	2202      	movs	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e0ad      	b.n	8002d46 <UART_SetConfig+0x246>
 8002bea:	231b      	movs	r3, #27
 8002bec:	2220      	movs	r2, #32
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	19db      	adds	r3, r3, r7
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e0a6      	b.n	8002d46 <UART_SetConfig+0x246>
 8002bf8:	231b      	movs	r3, #27
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	189b      	adds	r3, r3, r2
 8002bfe:	19db      	adds	r3, r3, r7
 8002c00:	2208      	movs	r2, #8
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e09f      	b.n	8002d46 <UART_SetConfig+0x246>
 8002c06:	231b      	movs	r3, #27
 8002c08:	2220      	movs	r2, #32
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	19db      	adds	r3, r3, r7
 8002c0e:	2210      	movs	r2, #16
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e098      	b.n	8002d46 <UART_SetConfig+0x246>
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a7b      	ldr	r2, [pc, #492]	@ (8002e08 <UART_SetConfig+0x308>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d131      	bne.n	8002c82 <UART_SetConfig+0x182>
 8002c1e:	4b79      	ldr	r3, [pc, #484]	@ (8002e04 <UART_SetConfig+0x304>)
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	220c      	movs	r2, #12
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d01d      	beq.n	8002c66 <UART_SetConfig+0x166>
 8002c2a:	d823      	bhi.n	8002c74 <UART_SetConfig+0x174>
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d00c      	beq.n	8002c4a <UART_SetConfig+0x14a>
 8002c30:	d820      	bhi.n	8002c74 <UART_SetConfig+0x174>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <UART_SetConfig+0x13c>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d00e      	beq.n	8002c58 <UART_SetConfig+0x158>
 8002c3a:	e01b      	b.n	8002c74 <UART_SetConfig+0x174>
 8002c3c:	231b      	movs	r3, #27
 8002c3e:	2220      	movs	r2, #32
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	19db      	adds	r3, r3, r7
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e07d      	b.n	8002d46 <UART_SetConfig+0x246>
 8002c4a:	231b      	movs	r3, #27
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	19db      	adds	r3, r3, r7
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e076      	b.n	8002d46 <UART_SetConfig+0x246>
 8002c58:	231b      	movs	r3, #27
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	189b      	adds	r3, r3, r2
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	2204      	movs	r2, #4
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e06f      	b.n	8002d46 <UART_SetConfig+0x246>
 8002c66:	231b      	movs	r3, #27
 8002c68:	2220      	movs	r2, #32
 8002c6a:	189b      	adds	r3, r3, r2
 8002c6c:	19db      	adds	r3, r3, r7
 8002c6e:	2208      	movs	r2, #8
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e068      	b.n	8002d46 <UART_SetConfig+0x246>
 8002c74:	231b      	movs	r3, #27
 8002c76:	2220      	movs	r2, #32
 8002c78:	189b      	adds	r3, r3, r2
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e061      	b.n	8002d46 <UART_SetConfig+0x246>
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a61      	ldr	r2, [pc, #388]	@ (8002e0c <UART_SetConfig+0x30c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d106      	bne.n	8002c9a <UART_SetConfig+0x19a>
 8002c8c:	231b      	movs	r3, #27
 8002c8e:	2220      	movs	r2, #32
 8002c90:	189b      	adds	r3, r3, r2
 8002c92:	19db      	adds	r3, r3, r7
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e055      	b.n	8002d46 <UART_SetConfig+0x246>
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8002e10 <UART_SetConfig+0x310>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d106      	bne.n	8002cb2 <UART_SetConfig+0x1b2>
 8002ca4:	231b      	movs	r3, #27
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	189b      	adds	r3, r3, r2
 8002caa:	19db      	adds	r3, r3, r7
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e049      	b.n	8002d46 <UART_SetConfig+0x246>
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a50      	ldr	r2, [pc, #320]	@ (8002df8 <UART_SetConfig+0x2f8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d13e      	bne.n	8002d3a <UART_SetConfig+0x23a>
 8002cbc:	4b51      	ldr	r3, [pc, #324]	@ (8002e04 <UART_SetConfig+0x304>)
 8002cbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cc0:	23c0      	movs	r3, #192	@ 0xc0
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	22c0      	movs	r2, #192	@ 0xc0
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d027      	beq.n	8002d1e <UART_SetConfig+0x21e>
 8002cce:	22c0      	movs	r2, #192	@ 0xc0
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d82a      	bhi.n	8002d2c <UART_SetConfig+0x22c>
 8002cd6:	2280      	movs	r2, #128	@ 0x80
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d011      	beq.n	8002d02 <UART_SetConfig+0x202>
 8002cde:	2280      	movs	r2, #128	@ 0x80
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d822      	bhi.n	8002d2c <UART_SetConfig+0x22c>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <UART_SetConfig+0x1f4>
 8002cea:	2280      	movs	r2, #128	@ 0x80
 8002cec:	00d2      	lsls	r2, r2, #3
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00e      	beq.n	8002d10 <UART_SetConfig+0x210>
 8002cf2:	e01b      	b.n	8002d2c <UART_SetConfig+0x22c>
 8002cf4:	231b      	movs	r3, #27
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	189b      	adds	r3, r3, r2
 8002cfa:	19db      	adds	r3, r3, r7
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e021      	b.n	8002d46 <UART_SetConfig+0x246>
 8002d02:	231b      	movs	r3, #27
 8002d04:	2220      	movs	r2, #32
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	19db      	adds	r3, r3, r7
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e01a      	b.n	8002d46 <UART_SetConfig+0x246>
 8002d10:	231b      	movs	r3, #27
 8002d12:	2220      	movs	r2, #32
 8002d14:	189b      	adds	r3, r3, r2
 8002d16:	19db      	adds	r3, r3, r7
 8002d18:	2204      	movs	r2, #4
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e013      	b.n	8002d46 <UART_SetConfig+0x246>
 8002d1e:	231b      	movs	r3, #27
 8002d20:	2220      	movs	r2, #32
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	19db      	adds	r3, r3, r7
 8002d26:	2208      	movs	r2, #8
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e00c      	b.n	8002d46 <UART_SetConfig+0x246>
 8002d2c:	231b      	movs	r3, #27
 8002d2e:	2220      	movs	r2, #32
 8002d30:	189b      	adds	r3, r3, r2
 8002d32:	19db      	adds	r3, r3, r7
 8002d34:	2210      	movs	r2, #16
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e005      	b.n	8002d46 <UART_SetConfig+0x246>
 8002d3a:	231b      	movs	r3, #27
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	189b      	adds	r3, r3, r2
 8002d40:	19db      	adds	r3, r3, r7
 8002d42:	2210      	movs	r2, #16
 8002d44:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002df8 <UART_SetConfig+0x2f8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d000      	beq.n	8002d52 <UART_SetConfig+0x252>
 8002d50:	e0a9      	b.n	8002ea6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d52:	231b      	movs	r3, #27
 8002d54:	2220      	movs	r2, #32
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	19db      	adds	r3, r3, r7
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d015      	beq.n	8002d8c <UART_SetConfig+0x28c>
 8002d60:	dc18      	bgt.n	8002d94 <UART_SetConfig+0x294>
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d00d      	beq.n	8002d82 <UART_SetConfig+0x282>
 8002d66:	dc15      	bgt.n	8002d94 <UART_SetConfig+0x294>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <UART_SetConfig+0x272>
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d005      	beq.n	8002d7c <UART_SetConfig+0x27c>
 8002d70:	e010      	b.n	8002d94 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d72:	f7ff fbbd 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8002d76:	0003      	movs	r3, r0
 8002d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d7a:	e014      	b.n	8002da6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d7c:	4b25      	ldr	r3, [pc, #148]	@ (8002e14 <UART_SetConfig+0x314>)
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d80:	e011      	b.n	8002da6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d82:	f7ff fb29 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002d86:	0003      	movs	r3, r0
 8002d88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d8a:	e00c      	b.n	8002da6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d92:	e008      	b.n	8002da6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002d98:	231a      	movs	r3, #26
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
        break;
 8002da4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d100      	bne.n	8002dae <UART_SetConfig+0x2ae>
 8002dac:	e14b      	b.n	8003046 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002db2:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <UART_SetConfig+0x318>)
 8002db4:	0052      	lsls	r2, r2, #1
 8002db6:	5ad3      	ldrh	r3, [r2, r3]
 8002db8:	0019      	movs	r1, r3
 8002dba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002dbc:	f7fd f9aa 	bl	8000114 <__udivsi3>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	0013      	movs	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	189b      	adds	r3, r3, r2
 8002dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d305      	bcc.n	8002de0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d91d      	bls.n	8002e1c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002de0:	231a      	movs	r3, #26
 8002de2:	2220      	movs	r2, #32
 8002de4:	189b      	adds	r3, r3, r2
 8002de6:	19db      	adds	r3, r3, r7
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e12b      	b.n	8003046 <UART_SetConfig+0x546>
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	cfff69f3 	.word	0xcfff69f3
 8002df4:	ffffcfff 	.word	0xffffcfff
 8002df8:	40008000 	.word	0x40008000
 8002dfc:	11fff4ff 	.word	0x11fff4ff
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40004400 	.word	0x40004400
 8002e0c:	40004800 	.word	0x40004800
 8002e10:	40004c00 	.word	0x40004c00
 8002e14:	00f42400 	.word	0x00f42400
 8002e18:	08004dfc 	.word	0x08004dfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e28:	4b92      	ldr	r3, [pc, #584]	@ (8003074 <UART_SetConfig+0x574>)
 8002e2a:	0052      	lsls	r2, r2, #1
 8002e2c:	5ad3      	ldrh	r3, [r2, r3]
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	69b8      	ldr	r0, [r7, #24]
 8002e3a:	69f9      	ldr	r1, [r7, #28]
 8002e3c:	f7fd fae0 	bl	8000400 <__aeabi_uldivmod>
 8002e40:	0002      	movs	r2, r0
 8002e42:	000b      	movs	r3, r1
 8002e44:	0e11      	lsrs	r1, r2, #24
 8002e46:	021d      	lsls	r5, r3, #8
 8002e48:	430d      	orrs	r5, r1
 8002e4a:	0214      	lsls	r4, r2, #8
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68b8      	ldr	r0, [r7, #8]
 8002e5a:	68f9      	ldr	r1, [r7, #12]
 8002e5c:	1900      	adds	r0, r0, r4
 8002e5e:	4169      	adcs	r1, r5
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f7fd fac7 	bl	8000400 <__aeabi_uldivmod>
 8002e72:	0002      	movs	r2, r0
 8002e74:	000b      	movs	r3, r1
 8002e76:	0013      	movs	r3, r2
 8002e78:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e7c:	23c0      	movs	r3, #192	@ 0xc0
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d309      	bcc.n	8002e98 <UART_SetConfig+0x398>
 8002e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	035b      	lsls	r3, r3, #13
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d204      	bcs.n	8002e98 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e0d6      	b.n	8003046 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002e98:	231a      	movs	r3, #26
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	189b      	adds	r3, r3, r2
 8002e9e:	19db      	adds	r3, r3, r7
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e0cf      	b.n	8003046 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d000      	beq.n	8002eb4 <UART_SetConfig+0x3b4>
 8002eb2:	e070      	b.n	8002f96 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002eb4:	231b      	movs	r3, #27
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	19db      	adds	r3, r3, r7
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d015      	beq.n	8002eee <UART_SetConfig+0x3ee>
 8002ec2:	dc18      	bgt.n	8002ef6 <UART_SetConfig+0x3f6>
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d00d      	beq.n	8002ee4 <UART_SetConfig+0x3e4>
 8002ec8:	dc15      	bgt.n	8002ef6 <UART_SetConfig+0x3f6>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <UART_SetConfig+0x3d4>
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d005      	beq.n	8002ede <UART_SetConfig+0x3de>
 8002ed2:	e010      	b.n	8002ef6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed4:	f7ff fb0c 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002edc:	e014      	b.n	8002f08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ede:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <UART_SetConfig+0x578>)
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ee2:	e011      	b.n	8002f08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee4:	f7ff fa78 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002eec:	e00c      	b.n	8002f08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eee:	2380      	movs	r3, #128	@ 0x80
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ef4:	e008      	b.n	8002f08 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002efa:	231a      	movs	r3, #26
 8002efc:	2220      	movs	r2, #32
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
        break;
 8002f06:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d100      	bne.n	8002f10 <UART_SetConfig+0x410>
 8002f0e:	e09a      	b.n	8003046 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f14:	4b57      	ldr	r3, [pc, #348]	@ (8003074 <UART_SetConfig+0x574>)
 8002f16:	0052      	lsls	r2, r2, #1
 8002f18:	5ad3      	ldrh	r3, [r2, r3]
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f1e:	f7fd f8f9 	bl	8000114 <__udivsi3>
 8002f22:	0003      	movs	r3, r0
 8002f24:	005a      	lsls	r2, r3, #1
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	18d2      	adds	r2, r2, r3
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	0019      	movs	r1, r3
 8002f34:	0010      	movs	r0, r2
 8002f36:	f7fd f8ed 	bl	8000114 <__udivsi3>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	2b0f      	cmp	r3, #15
 8002f42:	d921      	bls.n	8002f88 <UART_SetConfig+0x488>
 8002f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f46:	2380      	movs	r3, #128	@ 0x80
 8002f48:	025b      	lsls	r3, r3, #9
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d21c      	bcs.n	8002f88 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	200e      	movs	r0, #14
 8002f54:	2420      	movs	r4, #32
 8002f56:	1903      	adds	r3, r0, r4
 8002f58:	19db      	adds	r3, r3, r7
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2207      	movs	r2, #7
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b299      	uxth	r1, r3
 8002f6c:	1903      	adds	r3, r0, r4
 8002f6e:	19db      	adds	r3, r3, r7
 8002f70:	1902      	adds	r2, r0, r4
 8002f72:	19d2      	adds	r2, r2, r7
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	1902      	adds	r2, r0, r4
 8002f80:	19d2      	adds	r2, r2, r7
 8002f82:	8812      	ldrh	r2, [r2, #0]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	e05e      	b.n	8003046 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002f88:	231a      	movs	r3, #26
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	189b      	adds	r3, r3, r2
 8002f8e:	19db      	adds	r3, r3, r7
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e057      	b.n	8003046 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f96:	231b      	movs	r3, #27
 8002f98:	2220      	movs	r2, #32
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	19db      	adds	r3, r3, r7
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d015      	beq.n	8002fd0 <UART_SetConfig+0x4d0>
 8002fa4:	dc18      	bgt.n	8002fd8 <UART_SetConfig+0x4d8>
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d00d      	beq.n	8002fc6 <UART_SetConfig+0x4c6>
 8002faa:	dc15      	bgt.n	8002fd8 <UART_SetConfig+0x4d8>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <UART_SetConfig+0x4b6>
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d005      	beq.n	8002fc0 <UART_SetConfig+0x4c0>
 8002fb4:	e010      	b.n	8002fd8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb6:	f7ff fa9b 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002fbe:	e014      	b.n	8002fea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003078 <UART_SetConfig+0x578>)
 8002fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002fc4:	e011      	b.n	8002fea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc6:	f7ff fa07 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002fce:	e00c      	b.n	8002fea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fd0:	2380      	movs	r3, #128	@ 0x80
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002fd6:	e008      	b.n	8002fea <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002fdc:	231a      	movs	r3, #26
 8002fde:	2220      	movs	r2, #32
 8002fe0:	189b      	adds	r3, r3, r2
 8002fe2:	19db      	adds	r3, r3, r7
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
        break;
 8002fe8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02a      	beq.n	8003046 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8003074 <UART_SetConfig+0x574>)
 8002ff6:	0052      	lsls	r2, r2, #1
 8002ff8:	5ad3      	ldrh	r3, [r2, r3]
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002ffe:	f7fd f889 	bl	8000114 <__udivsi3>
 8003002:	0003      	movs	r3, r0
 8003004:	001a      	movs	r2, r3
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	18d2      	adds	r2, r2, r3
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	0019      	movs	r1, r3
 8003014:	0010      	movs	r0, r2
 8003016:	f7fd f87d 	bl	8000114 <__udivsi3>
 800301a:	0003      	movs	r3, r0
 800301c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d90a      	bls.n	800303a <UART_SetConfig+0x53a>
 8003024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003026:	2380      	movs	r3, #128	@ 0x80
 8003028:	025b      	lsls	r3, r3, #9
 800302a:	429a      	cmp	r2, r3
 800302c:	d205      	bcs.n	800303a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	b29a      	uxth	r2, r3
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	e005      	b.n	8003046 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800303a:	231a      	movs	r3, #26
 800303c:	2220      	movs	r2, #32
 800303e:	189b      	adds	r3, r3, r2
 8003040:	19db      	adds	r3, r3, r7
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	226a      	movs	r2, #106	@ 0x6a
 800304a:	2101      	movs	r1, #1
 800304c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	2268      	movs	r2, #104	@ 0x68
 8003052:	2101      	movs	r1, #1
 8003054:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	2200      	movs	r2, #0
 800305a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	2200      	movs	r2, #0
 8003060:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003062:	231a      	movs	r3, #26
 8003064:	2220      	movs	r2, #32
 8003066:	189b      	adds	r3, r3, r2
 8003068:	19db      	adds	r3, r3, r7
 800306a:	781b      	ldrb	r3, [r3, #0]
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b010      	add	sp, #64	@ 0x40
 8003072:	bdb0      	pop	{r4, r5, r7, pc}
 8003074:	08004dfc 	.word	0x08004dfc
 8003078:	00f42400 	.word	0x00f42400

0800307c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	2208      	movs	r2, #8
 800308a:	4013      	ands	r3, r2
 800308c:	d00b      	beq.n	80030a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a4a      	ldr	r2, [pc, #296]	@ (80031c0 <UART_AdvFeatureConfig+0x144>)
 8003096:	4013      	ands	r3, r2
 8003098:	0019      	movs	r1, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030aa:	2201      	movs	r2, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	d00b      	beq.n	80030c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4a43      	ldr	r2, [pc, #268]	@ (80031c4 <UART_AdvFeatureConfig+0x148>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030cc:	2202      	movs	r2, #2
 80030ce:	4013      	ands	r3, r2
 80030d0:	d00b      	beq.n	80030ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a3b      	ldr	r2, [pc, #236]	@ (80031c8 <UART_AdvFeatureConfig+0x14c>)
 80030da:	4013      	ands	r3, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	2204      	movs	r2, #4
 80030f0:	4013      	ands	r3, r2
 80030f2:	d00b      	beq.n	800310c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a34      	ldr	r2, [pc, #208]	@ (80031cc <UART_AdvFeatureConfig+0x150>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	2210      	movs	r2, #16
 8003112:	4013      	ands	r3, r2
 8003114:	d00b      	beq.n	800312e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a2c      	ldr	r2, [pc, #176]	@ (80031d0 <UART_AdvFeatureConfig+0x154>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	2220      	movs	r2, #32
 8003134:	4013      	ands	r3, r2
 8003136:	d00b      	beq.n	8003150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	4a25      	ldr	r2, [pc, #148]	@ (80031d4 <UART_AdvFeatureConfig+0x158>)
 8003140:	4013      	ands	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	2240      	movs	r2, #64	@ 0x40
 8003156:	4013      	ands	r3, r2
 8003158:	d01d      	beq.n	8003196 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <UART_AdvFeatureConfig+0x15c>)
 8003162:	4013      	ands	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003176:	2380      	movs	r3, #128	@ 0x80
 8003178:	035b      	lsls	r3, r3, #13
 800317a:	429a      	cmp	r2, r3
 800317c:	d10b      	bne.n	8003196 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a15      	ldr	r2, [pc, #84]	@ (80031dc <UART_AdvFeatureConfig+0x160>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319a:	2280      	movs	r2, #128	@ 0x80
 800319c:	4013      	ands	r3, r2
 800319e:	d00b      	beq.n	80031b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a0e      	ldr	r2, [pc, #56]	@ (80031e0 <UART_AdvFeatureConfig+0x164>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }
}
 80031b8:	46c0      	nop			@ (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	ffff7fff 	.word	0xffff7fff
 80031c4:	fffdffff 	.word	0xfffdffff
 80031c8:	fffeffff 	.word	0xfffeffff
 80031cc:	fffbffff 	.word	0xfffbffff
 80031d0:	ffffefff 	.word	0xffffefff
 80031d4:	ffffdfff 	.word	0xffffdfff
 80031d8:	ffefffff 	.word	0xffefffff
 80031dc:	ff9fffff 	.word	0xff9fffff
 80031e0:	fff7ffff 	.word	0xfff7ffff

080031e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b092      	sub	sp, #72	@ 0x48
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2290      	movs	r2, #144	@ 0x90
 80031f0:	2100      	movs	r1, #0
 80031f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031f4:	f7fd fa96 	bl	8000724 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2208      	movs	r2, #8
 8003204:	4013      	ands	r3, r2
 8003206:	2b08      	cmp	r3, #8
 8003208:	d12d      	bne.n	8003266 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800320a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320c:	2280      	movs	r2, #128	@ 0x80
 800320e:	0391      	lsls	r1, r2, #14
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4a47      	ldr	r2, [pc, #284]	@ (8003330 <UART_CheckIdleState+0x14c>)
 8003214:	9200      	str	r2, [sp, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	f000 f88e 	bl	8003338 <UART_WaitOnFlagUntilTimeout>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d022      	beq.n	8003266 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003220:	f3ef 8310 	mrs	r3, PRIMASK
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003228:	63bb      	str	r3, [r7, #56]	@ 0x38
 800322a:	2301      	movs	r3, #1
 800322c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2180      	movs	r1, #128	@ 0x80
 8003242:	438a      	bics	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324c:	f383 8810 	msr	PRIMASK, r3
}
 8003250:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2288      	movs	r2, #136	@ 0x88
 8003256:	2120      	movs	r1, #32
 8003258:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2284      	movs	r2, #132	@ 0x84
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e060      	b.n	8003328 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2204      	movs	r2, #4
 800326e:	4013      	ands	r3, r2
 8003270:	2b04      	cmp	r3, #4
 8003272:	d146      	bne.n	8003302 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	03d1      	lsls	r1, r2, #15
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4a2c      	ldr	r2, [pc, #176]	@ (8003330 <UART_CheckIdleState+0x14c>)
 800327e:	9200      	str	r2, [sp, #0]
 8003280:	2200      	movs	r2, #0
 8003282:	f000 f859 	bl	8003338 <UART_WaitOnFlagUntilTimeout>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d03b      	beq.n	8003302 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328a:	f3ef 8310 	mrs	r3, PRIMASK
 800328e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003290:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003292:	637b      	str	r3, [r7, #52]	@ 0x34
 8003294:	2301      	movs	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4922      	ldr	r1, [pc, #136]	@ (8003334 <UART_CheckIdleState+0x150>)
 80032ac:	400a      	ands	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f383 8810 	msr	PRIMASK, r3
}
 80032ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032bc:	f3ef 8310 	mrs	r3, PRIMASK
 80032c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80032c2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032c6:	2301      	movs	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	438a      	bics	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	228c      	movs	r2, #140	@ 0x8c
 80032f2:	2120      	movs	r1, #32
 80032f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2284      	movs	r2, #132	@ 0x84
 80032fa:	2100      	movs	r1, #0
 80032fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e012      	b.n	8003328 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2288      	movs	r2, #136	@ 0x88
 8003306:	2120      	movs	r1, #32
 8003308:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	228c      	movs	r2, #140	@ 0x8c
 800330e:	2120      	movs	r1, #32
 8003310:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2284      	movs	r2, #132	@ 0x84
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b010      	add	sp, #64	@ 0x40
 800332e:	bd80      	pop	{r7, pc}
 8003330:	01ffffff 	.word	0x01ffffff
 8003334:	fffffedf 	.word	0xfffffedf

08003338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003348:	e051      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	3301      	adds	r3, #1
 800334e:	d04e      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003350:	f7fd f9e8 	bl	8000724 <HAL_GetTick>
 8003354:	0002      	movs	r2, r0
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	429a      	cmp	r2, r3
 800335e:	d302      	bcc.n	8003366 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e051      	b.n	800340e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2204      	movs	r2, #4
 8003372:	4013      	ands	r3, r2
 8003374:	d03b      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0xb6>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b80      	cmp	r3, #128	@ 0x80
 800337a:	d038      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0xb6>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b40      	cmp	r3, #64	@ 0x40
 8003380:	d035      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	2208      	movs	r2, #8
 800338a:	4013      	ands	r3, r2
 800338c:	2b08      	cmp	r3, #8
 800338e:	d111      	bne.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2208      	movs	r2, #8
 8003396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	0018      	movs	r0, r3
 800339c:	f000 f83c 	bl	8003418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2290      	movs	r2, #144	@ 0x90
 80033a4:	2108      	movs	r1, #8
 80033a6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2284      	movs	r2, #132	@ 0x84
 80033ac:	2100      	movs	r1, #0
 80033ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e02c      	b.n	800340e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69da      	ldr	r2, [r3, #28]
 80033ba:	2380      	movs	r3, #128	@ 0x80
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	401a      	ands	r2, r3
 80033c0:	2380      	movs	r3, #128	@ 0x80
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d112      	bne.n	80033ee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2280      	movs	r2, #128	@ 0x80
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 f81f 	bl	8003418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2290      	movs	r2, #144	@ 0x90
 80033de:	2120      	movs	r1, #32
 80033e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2284      	movs	r2, #132	@ 0x84
 80033e6:	2100      	movs	r1, #0
 80033e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e00f      	b.n	800340e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	4013      	ands	r3, r2
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	425a      	negs	r2, r3
 80033fe:	4153      	adcs	r3, r2
 8003400:	b2db      	uxtb	r3, r3
 8003402:	001a      	movs	r2, r3
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d09e      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08e      	sub	sp, #56	@ 0x38
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003420:	f3ef 8310 	mrs	r3, PRIMASK
 8003424:	617b      	str	r3, [r7, #20]
  return(result);
 8003426:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003428:	637b      	str	r3, [r7, #52]	@ 0x34
 800342a:	2301      	movs	r3, #1
 800342c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4926      	ldr	r1, [pc, #152]	@ (80034dc <UART_EndRxTransfer+0xc4>)
 8003442:	400a      	ands	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003452:	f3ef 8310 	mrs	r3, PRIMASK
 8003456:	623b      	str	r3, [r7, #32]
  return(result);
 8003458:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800345a:	633b      	str	r3, [r7, #48]	@ 0x30
 800345c:	2301      	movs	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	491b      	ldr	r1, [pc, #108]	@ (80034e0 <UART_EndRxTransfer+0xc8>)
 8003474:	400a      	ands	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d118      	bne.n	80034be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348c:	f3ef 8310 	mrs	r3, PRIMASK
 8003490:	60bb      	str	r3, [r7, #8]
  return(result);
 8003492:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003496:	2301      	movs	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2110      	movs	r1, #16
 80034ae:	438a      	bics	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f383 8810 	msr	PRIMASK, r3
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	228c      	movs	r2, #140	@ 0x8c
 80034c2:	2120      	movs	r1, #32
 80034c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b00e      	add	sp, #56	@ 0x38
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	fffffedf 	.word	0xfffffedf
 80034e0:	effffffe 	.word	0xeffffffe

080034e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2284      	movs	r2, #132	@ 0x84
 80034f0:	5c9b      	ldrb	r3, [r3, r2]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_UARTEx_DisableFifoMode+0x16>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e027      	b.n	800354a <HAL_UARTEx_DisableFifoMode+0x66>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2284      	movs	r2, #132	@ 0x84
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2288      	movs	r2, #136	@ 0x88
 8003506:	2124      	movs	r1, #36	@ 0x24
 8003508:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	438a      	bics	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a0b      	ldr	r2, [pc, #44]	@ (8003554 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003526:	4013      	ands	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2288      	movs	r2, #136	@ 0x88
 800353c:	2120      	movs	r1, #32
 800353e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2284      	movs	r2, #132	@ 0x84
 8003544:	2100      	movs	r1, #0
 8003546:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	dfffffff 	.word	0xdfffffff

08003558 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2284      	movs	r2, #132	@ 0x84
 8003566:	5c9b      	ldrb	r3, [r3, r2]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800356c:	2302      	movs	r3, #2
 800356e:	e02e      	b.n	80035ce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2284      	movs	r2, #132	@ 0x84
 8003574:	2101      	movs	r1, #1
 8003576:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2288      	movs	r2, #136	@ 0x88
 800357c:	2124      	movs	r1, #36	@ 0x24
 800357e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	438a      	bics	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	08d9      	lsrs	r1, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 f854 	bl	800365c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2288      	movs	r2, #136	@ 0x88
 80035c0:	2120      	movs	r1, #32
 80035c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2284      	movs	r2, #132	@ 0x84
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b004      	add	sp, #16
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2284      	movs	r2, #132	@ 0x84
 80035e6:	5c9b      	ldrb	r3, [r3, r2]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e02f      	b.n	8003650 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2284      	movs	r2, #132	@ 0x84
 80035f4:	2101      	movs	r1, #1
 80035f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2288      	movs	r2, #136	@ 0x88
 80035fc:	2124      	movs	r1, #36	@ 0x24
 80035fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2101      	movs	r1, #1
 8003614:	438a      	bics	r2, r1
 8003616:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	4a0e      	ldr	r2, [pc, #56]	@ (8003658 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f813 	bl	800365c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2288      	movs	r2, #136	@ 0x88
 8003642:	2120      	movs	r1, #32
 8003644:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2284      	movs	r2, #132	@ 0x84
 800364a:	2100      	movs	r1, #0
 800364c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bd80      	pop	{r7, pc}
 8003658:	f1ffffff 	.word	0xf1ffffff

0800365c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003668:	2b00      	cmp	r3, #0
 800366a:	d108      	bne.n	800367e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	226a      	movs	r2, #106	@ 0x6a
 8003670:	2101      	movs	r1, #1
 8003672:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2268      	movs	r2, #104	@ 0x68
 8003678:	2101      	movs	r1, #1
 800367a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800367c:	e043      	b.n	8003706 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800367e:	260f      	movs	r6, #15
 8003680:	19bb      	adds	r3, r7, r6
 8003682:	2208      	movs	r2, #8
 8003684:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003686:	200e      	movs	r0, #14
 8003688:	183b      	adds	r3, r7, r0
 800368a:	2208      	movs	r2, #8
 800368c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	0e5b      	lsrs	r3, r3, #25
 8003696:	b2da      	uxtb	r2, r3
 8003698:	240d      	movs	r4, #13
 800369a:	193b      	adds	r3, r7, r4
 800369c:	2107      	movs	r1, #7
 800369e:	400a      	ands	r2, r1
 80036a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	0f5b      	lsrs	r3, r3, #29
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	250c      	movs	r5, #12
 80036ae:	197b      	adds	r3, r7, r5
 80036b0:	2107      	movs	r1, #7
 80036b2:	400a      	ands	r2, r1
 80036b4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036b6:	183b      	adds	r3, r7, r0
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	197a      	adds	r2, r7, r5
 80036bc:	7812      	ldrb	r2, [r2, #0]
 80036be:	4914      	ldr	r1, [pc, #80]	@ (8003710 <UARTEx_SetNbDataToProcess+0xb4>)
 80036c0:	5c8a      	ldrb	r2, [r1, r2]
 80036c2:	435a      	muls	r2, r3
 80036c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80036c6:	197b      	adds	r3, r7, r5
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4a12      	ldr	r2, [pc, #72]	@ (8003714 <UARTEx_SetNbDataToProcess+0xb8>)
 80036cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036ce:	0019      	movs	r1, r3
 80036d0:	f7fc fdaa 	bl	8000228 <__divsi3>
 80036d4:	0003      	movs	r3, r0
 80036d6:	b299      	uxth	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	226a      	movs	r2, #106	@ 0x6a
 80036dc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036de:	19bb      	adds	r3, r7, r6
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	193a      	adds	r2, r7, r4
 80036e4:	7812      	ldrb	r2, [r2, #0]
 80036e6:	490a      	ldr	r1, [pc, #40]	@ (8003710 <UARTEx_SetNbDataToProcess+0xb4>)
 80036e8:	5c8a      	ldrb	r2, [r1, r2]
 80036ea:	435a      	muls	r2, r3
 80036ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80036ee:	193b      	adds	r3, r7, r4
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	4a08      	ldr	r2, [pc, #32]	@ (8003714 <UARTEx_SetNbDataToProcess+0xb8>)
 80036f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036f6:	0019      	movs	r1, r3
 80036f8:	f7fc fd96 	bl	8000228 <__divsi3>
 80036fc:	0003      	movs	r3, r0
 80036fe:	b299      	uxth	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2268      	movs	r2, #104	@ 0x68
 8003704:	5299      	strh	r1, [r3, r2]
}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b005      	add	sp, #20
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	08004e14 	.word	0x08004e14
 8003714:	08004e1c 	.word	0x08004e1c

08003718 <uartSend>:
//---------------------------IMPLICIT FUNCTIONS---------------------------
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
espat_state_t uartSend(espat_uartInstance_t *uart, char *data, uint32_t size) {
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]


	HAL_StatusTypeDef state = HAL_UART_Transmit(uart->uart, (uint8_t*) data,
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2517      	movs	r5, #23
 8003732:	197c      	adds	r4, r7, r5
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	f7ff f93f 	bl	80029b8 <HAL_UART_Transmit>
 800373a:	0003      	movs	r3, r0
 800373c:	7023      	strb	r3, [r4, #0]
			size, uart->sendTimeout);

	if (state == HAL_OK)
 800373e:	197b      	adds	r3, r7, r5
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <uartSend+0x32>
		return ESPAT_STATE_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e007      	b.n	800375a <uartSend+0x42>
	else if (state == HAL_TIMEOUT)
 800374a:	2317      	movs	r3, #23
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d101      	bne.n	8003758 <uartSend+0x40>
		return ESPAT_STATE_TIMEOUT;
 8003754:	2302      	movs	r3, #2
 8003756:	e000      	b.n	800375a <uartSend+0x42>
	else
		return ESPAT_STATE_ERR;
 8003758:	2301      	movs	r3, #1
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b006      	add	sp, #24
 8003760:	bdb0      	pop	{r4, r5, r7, pc}

08003762 <espAt_init>:
 * @param: timout for receive
 *
 * @retval: always ESPATHID_OK
 */
espat_state_t espAt_init(espat_radio_t *radio, UART_HandleTypeDef *uart,
		uint32_t txTimeout, uint32_t rxTimeout) { //port
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]

	radio->espUart.uart = uart;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	601a      	str	r2, [r3, #0]
	radio->espUart.sendTimeout = txTimeout;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	605a      	str	r2, [r3, #4]
	radio->espUart.receiveTimeout = rxTimeout;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	609a      	str	r2, [r3, #8]
	return ESPAT_STATE_OK;
 8003782:	2300      	movs	r3, #0

}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b004      	add	sp, #16
 800378a:	bd80      	pop	{r7, pc}

0800378c <espAt_sendCommand>:
 *
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendCommand(espat_radio_t *radio, char *command) {
 800378c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378e:	46c6      	mov	lr, r8
 8003790:	b500      	push	{lr}
 8003792:	b08c      	sub	sp, #48	@ 0x30
 8003794:	af00      	add	r7, sp, #0
 8003796:	61f8      	str	r0, [r7, #28]
 8003798:	61b9      	str	r1, [r7, #24]
 800379a:	466b      	mov	r3, sp
 800379c:	4698      	mov	r8, r3
	//check if command and string are valid
	if (command == NULL)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <espAt_sendCommand+0x1c>
		return ESPAT_STATE_ERR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e093      	b.n	80038d0 <espAt_sendCommand+0x144>

	uint16_t prefixLength = strlen(AT_PREFIX);
 80037a8:	2316      	movs	r3, #22
 80037aa:	2618      	movs	r6, #24
 80037ac:	199b      	adds	r3, r3, r6
 80037ae:	19db      	adds	r3, r3, r7
 80037b0:	2203      	movs	r2, #3
 80037b2:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fc fca4 	bl	8000104 <strlen>
 80037bc:	0002      	movs	r2, r0
 80037be:	2114      	movs	r1, #20
 80037c0:	0030      	movs	r0, r6
 80037c2:	180b      	adds	r3, r1, r0
 80037c4:	19db      	adds	r3, r3, r7
 80037c6:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 80037c8:	2212      	movs	r2, #18
 80037ca:	0016      	movs	r6, r2
 80037cc:	1813      	adds	r3, r2, r0
 80037ce:	19db      	adds	r3, r3, r7
 80037d0:	2202      	movs	r2, #2
 80037d2:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + endingLength;
 80037d4:	2316      	movs	r3, #22
 80037d6:	181b      	adds	r3, r3, r0
 80037d8:	19da      	adds	r2, r3, r7
 80037da:	1809      	adds	r1, r1, r0
 80037dc:	19cb      	adds	r3, r1, r7
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	18d3      	adds	r3, r2, r3
 80037e4:	b299      	uxth	r1, r3
 80037e6:	2010      	movs	r0, #16
 80037e8:	2318      	movs	r3, #24
 80037ea:	18c2      	adds	r2, r0, r3
 80037ec:	19d3      	adds	r3, r2, r7
 80037ee:	0032      	movs	r2, r6
 80037f0:	2618      	movs	r6, #24
 80037f2:	1992      	adds	r2, r2, r6
 80037f4:	19d2      	adds	r2, r2, r7
 80037f6:	8812      	ldrh	r2, [r2, #0]
 80037f8:	188a      	adds	r2, r1, r2
 80037fa:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 80037fc:	1983      	adds	r3, r0, r6
 80037fe:	19db      	adds	r3, r3, r7
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	001a      	movs	r2, r3
 8003804:	3a01      	subs	r2, #1
 8003806:	627a      	str	r2, [r7, #36]	@ 0x24
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	2200      	movs	r2, #0
 800380c:	60fa      	str	r2, [r7, #12]
 800380e:	68b8      	ldr	r0, [r7, #8]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	0006      	movs	r6, r0
 8003814:	0f72      	lsrs	r2, r6, #29
 8003816:	000e      	movs	r6, r1
 8003818:	00f6      	lsls	r6, r6, #3
 800381a:	617e      	str	r6, [r7, #20]
 800381c:	697e      	ldr	r6, [r7, #20]
 800381e:	4316      	orrs	r6, r2
 8003820:	617e      	str	r6, [r7, #20]
 8003822:	0006      	movs	r6, r0
 8003824:	00f6      	lsls	r6, r6, #3
 8003826:	613e      	str	r6, [r7, #16]
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	0006      	movs	r6, r0
 8003834:	0f72      	lsrs	r2, r6, #29
 8003836:	000e      	movs	r6, r1
 8003838:	00f5      	lsls	r5, r6, #3
 800383a:	4315      	orrs	r5, r2
 800383c:	0006      	movs	r6, r0
 800383e:	00f4      	lsls	r4, r6, #3
 8003840:	3307      	adds	r3, #7
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	466e      	mov	r6, sp
 8003848:	1af6      	subs	r6, r6, r3
 800384a:	46b5      	mov	sp, r6
 800384c:	466b      	mov	r3, sp
 800384e:	3300      	adds	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
	memset(buffer, ' ', bufferSize);
 8003852:	2010      	movs	r0, #16
 8003854:	0006      	movs	r6, r0
 8003856:	2518      	movs	r5, #24
 8003858:	1943      	adds	r3, r0, r5
 800385a:	19db      	adds	r3, r3, r7
 800385c:	881a      	ldrh	r2, [r3, #0]
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	2120      	movs	r1, #32
 8003862:	0018      	movs	r0, r3
 8003864:	f001 fa60 	bl	8004d28 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8003868:	6a38      	ldr	r0, [r7, #32]
 800386a:	2416      	movs	r4, #22
 800386c:	1963      	adds	r3, r4, r5
 800386e:	19db      	adds	r3, r3, r7
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <espAt_sendCommand+0x154>)
 8003874:	0019      	movs	r1, r3
 8003876:	f001 fa83 	bl	8004d80 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 800387a:	0029      	movs	r1, r5
 800387c:	1863      	adds	r3, r4, r1
 800387e:	19db      	adds	r3, r3, r7
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	6a3a      	ldr	r2, [r7, #32]
 8003884:	18d0      	adds	r0, r2, r3
 8003886:	2514      	movs	r5, #20
 8003888:	186b      	adds	r3, r5, r1
 800388a:	19db      	adds	r3, r3, r7
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	0019      	movs	r1, r3
 8003892:	f001 fa75 	bl	8004d80 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ENDING, endingLength);
 8003896:	2118      	movs	r1, #24
 8003898:	1863      	adds	r3, r4, r1
 800389a:	19db      	adds	r3, r3, r7
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	000c      	movs	r4, r1
 80038a0:	192b      	adds	r3, r5, r4
 80038a2:	19db      	adds	r3, r3, r7
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	18d3      	adds	r3, r2, r3
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	18d0      	adds	r0, r2, r3
 80038ac:	2212      	movs	r2, #18
 80038ae:	1913      	adds	r3, r2, r4
 80038b0:	19db      	adds	r3, r3, r7
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <espAt_sendCommand+0x158>)
 80038b6:	0019      	movs	r1, r3
 80038b8:	f001 fa62 	bl	8004d80 <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 80038bc:	69f8      	ldr	r0, [r7, #28]
 80038be:	0033      	movs	r3, r6
 80038c0:	191b      	adds	r3, r3, r4
 80038c2:	19db      	adds	r3, r3, r7
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	0019      	movs	r1, r3
 80038ca:	f7ff ff25 	bl	8003718 <uartSend>
 80038ce:	0003      	movs	r3, r0
 80038d0:	46c5      	mov	sp, r8
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b00c      	add	sp, #48	@ 0x30
 80038d8:	bc80      	pop	{r7}
 80038da:	46b8      	mov	r8, r7
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	08004dac 	.word	0x08004dac
 80038e4:	08004db0 	.word	0x08004db0

080038e8 <espAt_sendParams>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendParams(espat_radio_t *radio, char *command,
		uint16_t paramCount, ...) {
 80038e8:	b40c      	push	{r2, r3}
 80038ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ec:	46c6      	mov	lr, r8
 80038ee:	b500      	push	{lr}
 80038f0:	b0a2      	sub	sp, #136	@ 0x88
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80038f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038f8:	466b      	mov	r3, sp
 80038fa:	4698      	mov	r8, r3

	//check if command are valid
	if (command == NULL)
 80038fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <espAt_sendParams+0x1e>
		return ESPAT_STATE_ERR;
 8003902:	2301      	movs	r3, #1
 8003904:	e1b7      	b.n	8003c76 <espAt_sendParams+0x38e>

	va_list ap;
	va_start(ap, paramCount);
 8003906:	236c      	movs	r3, #108	@ 0x6c
 8003908:	2238      	movs	r2, #56	@ 0x38
 800390a:	189b      	adds	r3, r3, r2
 800390c:	19db      	adds	r3, r3, r7
 800390e:	663b      	str	r3, [r7, #96]	@ 0x60

	//make parameters array
	int32_t parameters[paramCount];
 8003910:	2368      	movs	r3, #104	@ 0x68
 8003912:	189b      	adds	r3, r3, r2
 8003914:	19db      	adds	r3, r3, r7
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	0013      	movs	r3, r2
 800391a:	3b01      	subs	r3, #1
 800391c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800391e:	61ba      	str	r2, [r7, #24]
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	69b8      	ldr	r0, [r7, #24]
 8003926:	69f9      	ldr	r1, [r7, #28]
 8003928:	0003      	movs	r3, r0
 800392a:	0edb      	lsrs	r3, r3, #27
 800392c:	000e      	movs	r6, r1
 800392e:	0175      	lsls	r5, r6, #5
 8003930:	431d      	orrs	r5, r3
 8003932:	0003      	movs	r3, r0
 8003934:	015c      	lsls	r4, r3, #5
 8003936:	613a      	str	r2, [r7, #16]
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	6938      	ldr	r0, [r7, #16]
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	0003      	movs	r3, r0
 8003942:	0edb      	lsrs	r3, r3, #27
 8003944:	000c      	movs	r4, r1
 8003946:	0164      	lsls	r4, r4, #5
 8003948:	637c      	str	r4, [r7, #52]	@ 0x34
 800394a:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800394c:	431c      	orrs	r4, r3
 800394e:	637c      	str	r4, [r7, #52]	@ 0x34
 8003950:	0003      	movs	r3, r0
 8003952:	015b      	lsls	r3, r3, #5
 8003954:	633b      	str	r3, [r7, #48]	@ 0x30
 8003956:	0013      	movs	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	3307      	adds	r3, #7
 800395c:	08db      	lsrs	r3, r3, #3
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	466a      	mov	r2, sp
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	469d      	mov	sp, r3
 8003966:	466b      	mov	r3, sp
 8003968:	3303      	adds	r3, #3
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	67bb      	str	r3, [r7, #120]	@ 0x78

	//fill parameters array
	for (uint16_t i = 0; i < paramCount; i++) {
 8003970:	234e      	movs	r3, #78	@ 0x4e
 8003972:	2238      	movs	r2, #56	@ 0x38
 8003974:	189b      	adds	r3, r3, r2
 8003976:	19db      	adds	r3, r3, r7
 8003978:	2200      	movs	r2, #0
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	e012      	b.n	80039a4 <espAt_sendParams+0xbc>
		parameters[i] = va_arg(ap, int32_t);
 800397e:	204e      	movs	r0, #78	@ 0x4e
 8003980:	2438      	movs	r4, #56	@ 0x38
 8003982:	1903      	adds	r3, r0, r4
 8003984:	19db      	adds	r3, r3, r7
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800398a:	1d19      	adds	r1, r3, #4
 800398c:	6639      	str	r1, [r7, #96]	@ 0x60
 800398e:	6819      	ldr	r1, [r3, #0]
 8003990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003992:	0092      	lsls	r2, r2, #2
 8003994:	50d1      	str	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 8003996:	1903      	adds	r3, r0, r4
 8003998:	19db      	adds	r3, r3, r7
 800399a:	881a      	ldrh	r2, [r3, #0]
 800399c:	1903      	adds	r3, r0, r4
 800399e:	19db      	adds	r3, r3, r7
 80039a0:	3201      	adds	r2, #1
 80039a2:	801a      	strh	r2, [r3, #0]
 80039a4:	234e      	movs	r3, #78	@ 0x4e
 80039a6:	2138      	movs	r1, #56	@ 0x38
 80039a8:	185b      	adds	r3, r3, r1
 80039aa:	19da      	adds	r2, r3, r7
 80039ac:	2368      	movs	r3, #104	@ 0x68
 80039ae:	185b      	adds	r3, r3, r1
 80039b0:	19db      	adds	r3, r3, r7
 80039b2:	8812      	ldrh	r2, [r2, #0]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d3e1      	bcc.n	800397e <espAt_sendParams+0x96>
	}

	//make arguments list string
	uint16_t characterCounter = 0;
 80039ba:	234c      	movs	r3, #76	@ 0x4c
 80039bc:	185b      	adds	r3, r3, r1
 80039be:	19db      	adds	r3, r3, r7
 80039c0:	2200      	movs	r2, #0
 80039c2:	801a      	strh	r2, [r3, #0]
	char argumentsBuffer[AT_BUFFER_SIZE];
	memset(argumentsBuffer, '\0', AT_BUFFER_SIZE);
 80039c4:	2308      	movs	r3, #8
 80039c6:	000c      	movs	r4, r1
 80039c8:	185b      	adds	r3, r3, r1
 80039ca:	19db      	adds	r3, r3, r7
 80039cc:	221e      	movs	r2, #30
 80039ce:	2100      	movs	r1, #0
 80039d0:	0018      	movs	r0, r3
 80039d2:	f001 f9a9 	bl	8004d28 <memset>

	for (uint16_t i = 0; i < paramCount; i++) {
 80039d6:	234a      	movs	r3, #74	@ 0x4a
 80039d8:	191b      	adds	r3, r3, r4
 80039da:	19db      	adds	r3, r3, r7
 80039dc:	2200      	movs	r2, #0
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e048      	b.n	8003a74 <espAt_sendParams+0x18c>
		itoa(parameters[i], &argumentsBuffer[characterCounter], 10);
 80039e2:	234a      	movs	r3, #74	@ 0x4a
 80039e4:	001e      	movs	r6, r3
 80039e6:	2138      	movs	r1, #56	@ 0x38
 80039e8:	185b      	adds	r3, r3, r1
 80039ea:	19db      	adds	r3, r3, r7
 80039ec:	881a      	ldrh	r2, [r3, #0]
 80039ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f0:	0092      	lsls	r2, r2, #2
 80039f2:	58d0      	ldr	r0, [r2, r3]
 80039f4:	244c      	movs	r4, #76	@ 0x4c
 80039f6:	1863      	adds	r3, r4, r1
 80039f8:	19db      	adds	r3, r3, r7
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	2508      	movs	r5, #8
 80039fe:	186a      	adds	r2, r5, r1
 8003a00:	19d2      	adds	r2, r2, r7
 8003a02:	18d3      	adds	r3, r2, r3
 8003a04:	220a      	movs	r2, #10
 8003a06:	0019      	movs	r1, r3
 8003a08:	f001 f955 	bl	8004cb6 <itoa>
		characterCounter += strlen(&argumentsBuffer[characterCounter]) + 1;
 8003a0c:	2038      	movs	r0, #56	@ 0x38
 8003a0e:	1823      	adds	r3, r4, r0
 8003a10:	19db      	adds	r3, r3, r7
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	182a      	adds	r2, r5, r0
 8003a16:	19d2      	adds	r2, r2, r7
 8003a18:	18d3      	adds	r3, r2, r3
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fc fb72 	bl	8000104 <strlen>
 8003a20:	0003      	movs	r3, r0
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	0021      	movs	r1, r4
 8003a26:	2038      	movs	r0, #56	@ 0x38
 8003a28:	180b      	adds	r3, r1, r0
 8003a2a:	19db      	adds	r3, r3, r7
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	18d3      	adds	r3, r2, r3
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	180b      	adds	r3, r1, r0
 8003a34:	19db      	adds	r3, r3, r7
 8003a36:	3201      	adds	r2, #1
 8003a38:	801a      	strh	r2, [r3, #0]
		if (i < paramCount - 1)
 8003a3a:	0033      	movs	r3, r6
 8003a3c:	181b      	adds	r3, r3, r0
 8003a3e:	19db      	adds	r3, r3, r7
 8003a40:	881a      	ldrh	r2, [r3, #0]
 8003a42:	2368      	movs	r3, #104	@ 0x68
 8003a44:	181b      	adds	r3, r3, r0
 8003a46:	19db      	adds	r3, r3, r7
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	da08      	bge.n	8003a62 <espAt_sendParams+0x17a>
			argumentsBuffer[characterCounter - 1] = ','; //add comma only if NOT last parameter
 8003a50:	0002      	movs	r2, r0
 8003a52:	188b      	adds	r3, r1, r2
 8003a54:	19db      	adds	r3, r3, r7
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	18aa      	adds	r2, r5, r2
 8003a5c:	19d2      	adds	r2, r2, r7
 8003a5e:	212c      	movs	r1, #44	@ 0x2c
 8003a60:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 8003a62:	214a      	movs	r1, #74	@ 0x4a
 8003a64:	2038      	movs	r0, #56	@ 0x38
 8003a66:	180b      	adds	r3, r1, r0
 8003a68:	19db      	adds	r3, r3, r7
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	180b      	adds	r3, r1, r0
 8003a6e:	19db      	adds	r3, r3, r7
 8003a70:	3201      	adds	r2, #1
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	234a      	movs	r3, #74	@ 0x4a
 8003a76:	2638      	movs	r6, #56	@ 0x38
 8003a78:	199b      	adds	r3, r3, r6
 8003a7a:	19da      	adds	r2, r3, r7
 8003a7c:	2368      	movs	r3, #104	@ 0x68
 8003a7e:	199b      	adds	r3, r3, r6
 8003a80:	19db      	adds	r3, r3, r7
 8003a82:	8812      	ldrh	r2, [r2, #0]
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d3ab      	bcc.n	80039e2 <espAt_sendParams+0xfa>
	}

	va_end(ap);

	//count buffer length
	uint16_t prefixLength = strlen(AT_PREFIX);
 8003a8a:	243e      	movs	r4, #62	@ 0x3e
 8003a8c:	19a3      	adds	r3, r4, r6
 8003a8e:	19db      	adds	r3, r3, r7
 8003a90:	2203      	movs	r2, #3
 8003a92:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8003a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7fc fb34 	bl	8000104 <strlen>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	253c      	movs	r5, #60	@ 0x3c
 8003aa0:	19ab      	adds	r3, r5, r6
 8003aa2:	19db      	adds	r3, r3, r7
 8003aa4:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 8003aa6:	213a      	movs	r1, #58	@ 0x3a
 8003aa8:	198b      	adds	r3, r1, r6
 8003aaa:	19db      	adds	r3, r3, r7
 8003aac:	2201      	movs	r2, #1
 8003aae:	801a      	strh	r2, [r3, #0]
	uint16_t parametersLength = --characterCounter;
 8003ab0:	224c      	movs	r2, #76	@ 0x4c
 8003ab2:	0030      	movs	r0, r6
 8003ab4:	1993      	adds	r3, r2, r6
 8003ab6:	19db      	adds	r3, r3, r7
 8003ab8:	0016      	movs	r6, r2
 8003aba:	1812      	adds	r2, r2, r0
 8003abc:	19d2      	adds	r2, r2, r7
 8003abe:	8812      	ldrh	r2, [r2, #0]
 8003ac0:	3a01      	subs	r2, #1
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	2038      	movs	r0, #56	@ 0x38
 8003ac6:	2338      	movs	r3, #56	@ 0x38
 8003ac8:	18c2      	adds	r2, r0, r3
 8003aca:	19d3      	adds	r3, r2, r7
 8003acc:	0032      	movs	r2, r6
 8003ace:	2638      	movs	r6, #56	@ 0x38
 8003ad0:	1992      	adds	r2, r2, r6
 8003ad2:	19d2      	adds	r2, r2, r7
 8003ad4:	8812      	ldrh	r2, [r2, #0]
 8003ad6:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8003ad8:	2336      	movs	r3, #54	@ 0x36
 8003ada:	001e      	movs	r6, r3
 8003adc:	2238      	movs	r2, #56	@ 0x38
 8003ade:	189a      	adds	r2, r3, r2
 8003ae0:	19d3      	adds	r3, r2, r7
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	801a      	strh	r2, [r3, #0]

	//create master buffer and clear it
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8003ae6:	2338      	movs	r3, #56	@ 0x38
 8003ae8:	18e2      	adds	r2, r4, r3
 8003aea:	19d2      	adds	r2, r2, r7
 8003aec:	18eb      	adds	r3, r5, r3
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	8812      	ldrh	r2, [r2, #0]
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	18d3      	adds	r3, r2, r3
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	2338      	movs	r3, #56	@ 0x38
 8003afa:	18c9      	adds	r1, r1, r3
 8003afc:	19cb      	adds	r3, r1, r7
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	18d3      	adds	r3, r2, r3
 8003b02:	b29a      	uxth	r2, r3
			+ parametersLength + endingLength;
 8003b04:	2338      	movs	r3, #56	@ 0x38
 8003b06:	18c1      	adds	r1, r0, r3
 8003b08:	19cb      	adds	r3, r1, r7
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	18d3      	adds	r3, r2, r3
 8003b0e:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8003b10:	2234      	movs	r2, #52	@ 0x34
 8003b12:	0010      	movs	r0, r2
 8003b14:	2338      	movs	r3, #56	@ 0x38
 8003b16:	18d2      	adds	r2, r2, r3
 8003b18:	19d3      	adds	r3, r2, r7
 8003b1a:	0032      	movs	r2, r6
 8003b1c:	2638      	movs	r6, #56	@ 0x38
 8003b1e:	1992      	adds	r2, r2, r6
 8003b20:	19d2      	adds	r2, r2, r7
 8003b22:	8812      	ldrh	r2, [r2, #0]
 8003b24:	188a      	adds	r2, r1, r2
 8003b26:	801a      	strh	r2, [r3, #0]
	char buffer[bufferSize];
 8003b28:	0002      	movs	r2, r0
 8003b2a:	1993      	adds	r3, r2, r6
 8003b2c:	19db      	adds	r3, r3, r7
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	001a      	movs	r2, r3
 8003b32:	3a01      	subs	r2, #1
 8003b34:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	60fa      	str	r2, [r7, #12]
 8003b3c:	68b8      	ldr	r0, [r7, #8]
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	0006      	movs	r6, r0
 8003b42:	0f72      	lsrs	r2, r6, #29
 8003b44:	000e      	movs	r6, r1
 8003b46:	00f6      	lsls	r6, r6, #3
 8003b48:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8003b4a:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8003b4c:	4316      	orrs	r6, r2
 8003b4e:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8003b50:	0006      	movs	r6, r0
 8003b52:	00f6      	lsls	r6, r6, #3
 8003b54:	62be      	str	r6, [r7, #40]	@ 0x28
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	6838      	ldr	r0, [r7, #0]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	0006      	movs	r6, r0
 8003b62:	0f72      	lsrs	r2, r6, #29
 8003b64:	000e      	movs	r6, r1
 8003b66:	00f6      	lsls	r6, r6, #3
 8003b68:	627e      	str	r6, [r7, #36]	@ 0x24
 8003b6a:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8003b6c:	4316      	orrs	r6, r2
 8003b6e:	627e      	str	r6, [r7, #36]	@ 0x24
 8003b70:	0006      	movs	r6, r0
 8003b72:	00f6      	lsls	r6, r6, #3
 8003b74:	623e      	str	r6, [r7, #32]
 8003b76:	3307      	adds	r3, #7
 8003b78:	08db      	lsrs	r3, r3, #3
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	466e      	mov	r6, sp
 8003b7e:	1af6      	subs	r6, r6, r3
 8003b80:	46b5      	mov	sp, r6
 8003b82:	466b      	mov	r3, sp
 8003b84:	3300      	adds	r3, #0
 8003b86:	667b      	str	r3, [r7, #100]	@ 0x64
	memset(buffer, ' ', bufferSize);
 8003b88:	2234      	movs	r2, #52	@ 0x34
 8003b8a:	2638      	movs	r6, #56	@ 0x38
 8003b8c:	1993      	adds	r3, r2, r6
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b94:	2120      	movs	r1, #32
 8003b96:	0018      	movs	r0, r3
 8003b98:	f001 f8c6 	bl	8004d28 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8003b9c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003b9e:	19a3      	adds	r3, r4, r6
 8003ba0:	19db      	adds	r3, r3, r7
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <espAt_sendParams+0x3a4>)
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	f001 f8ea 	bl	8004d80 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8003bac:	0031      	movs	r1, r6
 8003bae:	19a3      	adds	r3, r4, r6
 8003bb0:	19db      	adds	r3, r3, r7
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bb6:	18d0      	adds	r0, r2, r3
 8003bb8:	000e      	movs	r6, r1
 8003bba:	186b      	adds	r3, r5, r1
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	881a      	ldrh	r2, [r3, #0]
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	f001 f8dc 	bl	8004d80 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8003bc8:	0031      	movs	r1, r6
 8003bca:	1863      	adds	r3, r4, r1
 8003bcc:	19db      	adds	r3, r3, r7
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	1868      	adds	r0, r5, r1
 8003bd2:	19c3      	adds	r3, r0, r7
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	18d3      	adds	r3, r2, r3
 8003bd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bda:	18d0      	adds	r0, r2, r3
 8003bdc:	213a      	movs	r1, #58	@ 0x3a
 8003bde:	000e      	movs	r6, r1
 8003be0:	2338      	movs	r3, #56	@ 0x38
 8003be2:	18ca      	adds	r2, r1, r3
 8003be4:	19d3      	adds	r3, r2, r7
 8003be6:	881a      	ldrh	r2, [r3, #0]
 8003be8:	4b29      	ldr	r3, [pc, #164]	@ (8003c90 <espAt_sendParams+0x3a8>)
 8003bea:	0019      	movs	r1, r3
 8003bec:	f001 f8c8 	bl	8004d80 <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8003bf0:	2038      	movs	r0, #56	@ 0x38
 8003bf2:	1823      	adds	r3, r4, r0
 8003bf4:	19db      	adds	r3, r3, r7
 8003bf6:	881a      	ldrh	r2, [r3, #0]
 8003bf8:	182b      	adds	r3, r5, r0
 8003bfa:	19db      	adds	r3, r3, r7
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	18d2      	adds	r2, r2, r3
 8003c00:	0031      	movs	r1, r6
 8003c02:	0006      	movs	r6, r0
 8003c04:	180b      	adds	r3, r1, r0
 8003c06:	19db      	adds	r3, r3, r7
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	18d3      	adds	r3, r2, r3
 8003c0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c0e:	18d0      	adds	r0, r2, r3
 8003c10:	2338      	movs	r3, #56	@ 0x38
 8003c12:	0031      	movs	r1, r6
 8003c14:	185b      	adds	r3, r3, r1
 8003c16:	19db      	adds	r3, r3, r7
 8003c18:	881a      	ldrh	r2, [r3, #0]
 8003c1a:	2608      	movs	r6, #8
 8003c1c:	1873      	adds	r3, r6, r1
 8003c1e:	19db      	adds	r3, r3, r7
 8003c20:	0019      	movs	r1, r3
 8003c22:	f001 f8ad 	bl	8004d80 <memcpy>
			argumentsBuffer, parametersLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8003c26:	2038      	movs	r0, #56	@ 0x38
 8003c28:	1823      	adds	r3, r4, r0
 8003c2a:	19db      	adds	r3, r3, r7
 8003c2c:	881a      	ldrh	r2, [r3, #0]
 8003c2e:	182b      	adds	r3, r5, r0
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	18d2      	adds	r2, r2, r3
 8003c36:	213a      	movs	r1, #58	@ 0x3a
 8003c38:	180b      	adds	r3, r1, r0
 8003c3a:	19db      	adds	r3, r3, r7
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	18d2      	adds	r2, r2, r3
					+ parametersLength], AT_ENDING, endingLength);
 8003c40:	2338      	movs	r3, #56	@ 0x38
 8003c42:	0001      	movs	r1, r0
 8003c44:	185b      	adds	r3, r3, r1
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8003c4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c4e:	18d0      	adds	r0, r2, r3
	memcpy(
 8003c50:	2336      	movs	r3, #54	@ 0x36
 8003c52:	000c      	movs	r4, r1
 8003c54:	185b      	adds	r3, r3, r1
 8003c56:	19db      	adds	r3, r3, r7
 8003c58:	881a      	ldrh	r2, [r3, #0]
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c94 <espAt_sendParams+0x3ac>)
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	f001 f88f 	bl	8004d80 <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 8003c62:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003c64:	2234      	movs	r2, #52	@ 0x34
 8003c66:	1913      	adds	r3, r2, r4
 8003c68:	19db      	adds	r3, r3, r7
 8003c6a:	881a      	ldrh	r2, [r3, #0]
 8003c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c6e:	0019      	movs	r1, r3
 8003c70:	f7ff fd52 	bl	8003718 <uartSend>
 8003c74:	0003      	movs	r3, r0
 8003c76:	46c5      	mov	sp, r8

}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b022      	add	sp, #136	@ 0x88
 8003c7e:	bc80      	pop	{r7}
 8003c80:	46b8      	mov	r8, r7
 8003c82:	bcf0      	pop	{r4, r5, r6, r7}
 8003c84:	bc08      	pop	{r3}
 8003c86:	b002      	add	sp, #8
 8003c88:	4718      	bx	r3
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	08004dac 	.word	0x08004dac
 8003c90:	08004db4 	.word	0x08004db4
 8003c94:	08004db0 	.word	0x08004db0

08003c98 <espAt_sendString>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendString(espat_radio_t *radio, char *command,
		char *string) {
 8003c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9a:	46c6      	mov	lr, r8
 8003c9c:	b500      	push	{lr}
 8003c9e:	b090      	sub	sp, #64	@ 0x40
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ca4:	6239      	str	r1, [r7, #32]
 8003ca6:	61fa      	str	r2, [r7, #28]
 8003ca8:	466b      	mov	r3, sp
 8003caa:	4698      	mov	r8, r3

	//check if command and string are valid
	if (command == NULL || string == NULL)
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <espAt_sendString+0x20>
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <espAt_sendString+0x24>
		return ESPAT_STATE_ERR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e139      	b.n	8003f30 <espAt_sendString+0x298>

	uint16_t prefixLength = strlen(AT_PREFIX);
 8003cbc:	2326      	movs	r3, #38	@ 0x26
 8003cbe:	2618      	movs	r6, #24
 8003cc0:	199b      	adds	r3, r3, r6
 8003cc2:	19db      	adds	r3, r3, r7
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7fc fa1a 	bl	8000104 <strlen>
 8003cd0:	0002      	movs	r2, r0
 8003cd2:	2124      	movs	r1, #36	@ 0x24
 8003cd4:	198b      	adds	r3, r1, r6
 8003cd6:	19db      	adds	r3, r3, r7
 8003cd8:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 8003cda:	2222      	movs	r2, #34	@ 0x22
 8003cdc:	1993      	adds	r3, r2, r6
 8003cde:	19db      	adds	r3, r3, r7
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	801a      	strh	r2, [r3, #0]
	uint16_t quoteLength = strlen(AT_STRING_QUOTE_MARK);
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	1993      	adds	r3, r2, r6
 8003ce8:	19db      	adds	r3, r3, r7
 8003cea:	2201      	movs	r2, #1
 8003cec:	801a      	strh	r2, [r3, #0]
	uint16_t stringLength = strlen(string);
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7fc fa07 	bl	8000104 <strlen>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	231e      	movs	r3, #30
 8003cfa:	0031      	movs	r1, r6
 8003cfc:	185b      	adds	r3, r3, r1
 8003cfe:	19db      	adds	r3, r3, r7
 8003d00:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8003d02:	221c      	movs	r2, #28
 8003d04:	0016      	movs	r6, r2
 8003d06:	1853      	adds	r3, r2, r1
 8003d08:	19db      	adds	r3, r3, r7
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8003d0e:	2326      	movs	r3, #38	@ 0x26
 8003d10:	0008      	movs	r0, r1
 8003d12:	185b      	adds	r3, r3, r1
 8003d14:	19da      	adds	r2, r3, r7
 8003d16:	2124      	movs	r1, #36	@ 0x24
 8003d18:	180b      	adds	r3, r1, r0
 8003d1a:	19db      	adds	r3, r3, r7
 8003d1c:	8812      	ldrh	r2, [r2, #0]
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	18d3      	adds	r3, r2, r3
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	2022      	movs	r0, #34	@ 0x22
 8003d26:	2118      	movs	r1, #24
 8003d28:	1843      	adds	r3, r0, r1
 8003d2a:	19db      	adds	r3, r3, r7
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	18d3      	adds	r3, r2, r3
 8003d30:	b29a      	uxth	r2, r3
			+ (quoteLength * 2) + stringLength + endingLength;
 8003d32:	2020      	movs	r0, #32
 8003d34:	1840      	adds	r0, r0, r1
 8003d36:	19c3      	adds	r3, r0, r7
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	18db      	adds	r3, r3, r3
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	18d3      	adds	r3, r2, r3
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	211e      	movs	r1, #30
 8003d44:	2318      	movs	r3, #24
 8003d46:	18c9      	adds	r1, r1, r3
 8003d48:	19cb      	adds	r3, r1, r7
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	18d3      	adds	r3, r2, r3
 8003d4e:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8003d50:	201a      	movs	r0, #26
 8003d52:	2318      	movs	r3, #24
 8003d54:	18c2      	adds	r2, r0, r3
 8003d56:	19d3      	adds	r3, r2, r7
 8003d58:	0032      	movs	r2, r6
 8003d5a:	2618      	movs	r6, #24
 8003d5c:	1992      	adds	r2, r2, r6
 8003d5e:	19d2      	adds	r2, r2, r7
 8003d60:	8812      	ldrh	r2, [r2, #0]
 8003d62:	188a      	adds	r2, r1, r2
 8003d64:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 8003d66:	1983      	adds	r3, r0, r6
 8003d68:	19db      	adds	r3, r3, r7
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	3a01      	subs	r2, #1
 8003d70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	2200      	movs	r2, #0
 8003d76:	60fa      	str	r2, [r7, #12]
 8003d78:	68b8      	ldr	r0, [r7, #8]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	0006      	movs	r6, r0
 8003d7e:	0f72      	lsrs	r2, r6, #29
 8003d80:	000e      	movs	r6, r1
 8003d82:	00f6      	lsls	r6, r6, #3
 8003d84:	617e      	str	r6, [r7, #20]
 8003d86:	697e      	ldr	r6, [r7, #20]
 8003d88:	4316      	orrs	r6, r2
 8003d8a:	617e      	str	r6, [r7, #20]
 8003d8c:	0006      	movs	r6, r0
 8003d8e:	00f6      	lsls	r6, r6, #3
 8003d90:	613e      	str	r6, [r7, #16]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	6838      	ldr	r0, [r7, #0]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	0006      	movs	r6, r0
 8003d9e:	0f72      	lsrs	r2, r6, #29
 8003da0:	000e      	movs	r6, r1
 8003da2:	00f5      	lsls	r5, r6, #3
 8003da4:	4315      	orrs	r5, r2
 8003da6:	0006      	movs	r6, r0
 8003da8:	00f4      	lsls	r4, r6, #3
 8003daa:	3307      	adds	r3, #7
 8003dac:	08db      	lsrs	r3, r3, #3
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	466e      	mov	r6, sp
 8003db2:	1af6      	subs	r6, r6, r3
 8003db4:	46b5      	mov	sp, r6
 8003db6:	466b      	mov	r3, sp
 8003db8:	3300      	adds	r3, #0
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(buffer, ' ', bufferSize);
 8003dbc:	221a      	movs	r2, #26
 8003dbe:	2618      	movs	r6, #24
 8003dc0:	1993      	adds	r3, r2, r6
 8003dc2:	19db      	adds	r3, r3, r7
 8003dc4:	881a      	ldrh	r2, [r3, #0]
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc8:	2120      	movs	r1, #32
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 ffac 	bl	8004d28 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8003dd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dd2:	2426      	movs	r4, #38	@ 0x26
 8003dd4:	19a3      	adds	r3, r4, r6
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	4b59      	ldr	r3, [pc, #356]	@ (8003f40 <espAt_sendString+0x2a8>)
 8003ddc:	0019      	movs	r1, r3
 8003dde:	f000 ffcf 	bl	8004d80 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8003de2:	19a3      	adds	r3, r4, r6
 8003de4:	19db      	adds	r3, r3, r7
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dea:	18d0      	adds	r0, r2, r3
 8003dec:	2524      	movs	r5, #36	@ 0x24
 8003dee:	19ab      	adds	r3, r5, r6
 8003df0:	19db      	adds	r3, r3, r7
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	0019      	movs	r1, r3
 8003df8:	f000 ffc2 	bl	8004d80 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8003dfc:	0031      	movs	r1, r6
 8003dfe:	1863      	adds	r3, r4, r1
 8003e00:	19db      	adds	r3, r3, r7
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	186b      	adds	r3, r5, r1
 8003e06:	19db      	adds	r3, r3, r7
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	18d3      	adds	r3, r2, r3
 8003e0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e0e:	18d0      	adds	r0, r2, r3
 8003e10:	2222      	movs	r2, #34	@ 0x22
 8003e12:	0016      	movs	r6, r2
 8003e14:	1853      	adds	r3, r2, r1
 8003e16:	19db      	adds	r3, r3, r7
 8003e18:	881a      	ldrh	r2, [r3, #0]
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f44 <espAt_sendString+0x2ac>)
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	f000 ffaf 	bl	8004d80 <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8003e22:	2118      	movs	r1, #24
 8003e24:	1863      	adds	r3, r4, r1
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	186b      	adds	r3, r5, r1
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	18d2      	adds	r2, r2, r3
 8003e32:	0030      	movs	r0, r6
 8003e34:	1843      	adds	r3, r0, r1
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	18d3      	adds	r3, r2, r3
 8003e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e3e:	18d0      	adds	r0, r2, r3
 8003e40:	2320      	movs	r3, #32
 8003e42:	001e      	movs	r6, r3
 8003e44:	185b      	adds	r3, r3, r1
 8003e46:	19db      	adds	r3, r3, r7
 8003e48:	881a      	ldrh	r2, [r3, #0]
 8003e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f48 <espAt_sendString+0x2b0>)
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	f000 ff97 	bl	8004d80 <memcpy>
	AT_STRING_QUOTE_MARK, quoteLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8003e52:	2118      	movs	r1, #24
 8003e54:	1863      	adds	r3, r4, r1
 8003e56:	19db      	adds	r3, r3, r7
 8003e58:	881a      	ldrh	r2, [r3, #0]
 8003e5a:	186b      	adds	r3, r5, r1
 8003e5c:	19db      	adds	r3, r3, r7
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	18d2      	adds	r2, r2, r3
 8003e62:	2022      	movs	r0, #34	@ 0x22
 8003e64:	1843      	adds	r3, r0, r1
 8003e66:	19db      	adds	r3, r3, r7
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	18d2      	adds	r2, r2, r3
					+ quoteLength], string, stringLength);
 8003e6c:	0033      	movs	r3, r6
 8003e6e:	1858      	adds	r0, r3, r1
 8003e70:	19c3      	adds	r3, r0, r7
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8003e76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e78:	18d0      	adds	r0, r2, r3
	memcpy(
 8003e7a:	211e      	movs	r1, #30
 8003e7c:	000e      	movs	r6, r1
 8003e7e:	2318      	movs	r3, #24
 8003e80:	18ca      	adds	r2, r1, r3
 8003e82:	19d3      	adds	r3, r2, r7
 8003e84:	881a      	ldrh	r2, [r3, #0]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	0019      	movs	r1, r3
 8003e8a:	f000 ff79 	bl	8004d80 <memcpy>
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8003e8e:	2118      	movs	r1, #24
 8003e90:	1863      	adds	r3, r4, r1
 8003e92:	19db      	adds	r3, r3, r7
 8003e94:	881a      	ldrh	r2, [r3, #0]
 8003e96:	186b      	adds	r3, r5, r1
 8003e98:	19db      	adds	r3, r3, r7
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	18d2      	adds	r2, r2, r3
 8003e9e:	2022      	movs	r0, #34	@ 0x22
 8003ea0:	1843      	adds	r3, r0, r1
 8003ea2:	19db      	adds	r3, r3, r7
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	18d2      	adds	r2, r2, r3
					+ quoteLength + stringLength], AT_STRING_QUOTE_MARK,
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	0008      	movs	r0, r1
 8003eac:	185b      	adds	r3, r3, r1
 8003eae:	19db      	adds	r3, r3, r7
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	18d2      	adds	r2, r2, r3
 8003eb4:	0031      	movs	r1, r6
 8003eb6:	180e      	adds	r6, r1, r0
 8003eb8:	19f3      	adds	r3, r6, r7
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8003ebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ec0:	18d0      	adds	r0, r2, r3
	memcpy(
 8003ec2:	000e      	movs	r6, r1
 8003ec4:	2318      	movs	r3, #24
 8003ec6:	18ca      	adds	r2, r1, r3
 8003ec8:	19d3      	adds	r3, r2, r7
 8003eca:	881a      	ldrh	r2, [r3, #0]
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f48 <espAt_sendString+0x2b0>)
 8003ece:	0019      	movs	r1, r3
 8003ed0:	f000 ff56 	bl	8004d80 <memcpy>
			stringLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8003ed4:	2118      	movs	r1, #24
 8003ed6:	1863      	adds	r3, r4, r1
 8003ed8:	19db      	adds	r3, r3, r7
 8003eda:	881a      	ldrh	r2, [r3, #0]
 8003edc:	186b      	adds	r3, r5, r1
 8003ede:	19db      	adds	r3, r3, r7
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	18d2      	adds	r2, r2, r3
 8003ee4:	2022      	movs	r0, #34	@ 0x22
 8003ee6:	1843      	adds	r3, r0, r1
 8003ee8:	19db      	adds	r3, r3, r7
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	18d2      	adds	r2, r2, r3
					+ (quoteLength * 2) + stringLength], AT_ENDING,
 8003eee:	2320      	movs	r3, #32
 8003ef0:	0008      	movs	r0, r1
 8003ef2:	185b      	adds	r3, r3, r1
 8003ef4:	19db      	adds	r3, r3, r7
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	18d2      	adds	r2, r2, r3
 8003efc:	0031      	movs	r1, r6
 8003efe:	0004      	movs	r4, r0
 8003f00:	180b      	adds	r3, r1, r0
 8003f02:	19db      	adds	r3, r3, r7
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8003f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f0a:	18d0      	adds	r0, r2, r3
	memcpy(
 8003f0c:	231c      	movs	r3, #28
 8003f0e:	191b      	adds	r3, r3, r4
 8003f10:	19db      	adds	r3, r3, r7
 8003f12:	881a      	ldrh	r2, [r3, #0]
 8003f14:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <espAt_sendString+0x2b4>)
 8003f16:	0019      	movs	r1, r3
 8003f18:	f000 ff32 	bl	8004d80 <memcpy>
			endingLength);

	return uartSend(&radio->espUart, buffer, bufferSize);
 8003f1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f1e:	221a      	movs	r2, #26
 8003f20:	1913      	adds	r3, r2, r4
 8003f22:	19db      	adds	r3, r3, r7
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	0019      	movs	r1, r3
 8003f2a:	f7ff fbf5 	bl	8003718 <uartSend>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	46c5      	mov	sp, r8

}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b010      	add	sp, #64	@ 0x40
 8003f38:	bc80      	pop	{r7}
 8003f3a:	46b8      	mov	r8, r7
 8003f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	08004dac 	.word	0x08004dac
 8003f44:	08004db4 	.word	0x08004db4
 8003f48:	08004db8 	.word	0x08004db8
 8003f4c:	08004db0 	.word	0x08004db0

08003f50 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b089      	sub	sp, #36	@ 0x24
 8003f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f56:	240c      	movs	r4, #12
 8003f58:	193b      	adds	r3, r7, r4
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	2314      	movs	r3, #20
 8003f5e:	001a      	movs	r2, r3
 8003f60:	2100      	movs	r1, #0
 8003f62:	f000 fee1 	bl	8004d28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f66:	4b32      	ldr	r3, [pc, #200]	@ (8004030 <MX_GPIO_Init+0xe0>)
 8003f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f6a:	4b31      	ldr	r3, [pc, #196]	@ (8004030 <MX_GPIO_Init+0xe0>)
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f72:	4b2f      	ldr	r3, [pc, #188]	@ (8004030 <MX_GPIO_Init+0xe0>)
 8003f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f76:	2204      	movs	r2, #4
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004030 <MX_GPIO_Init+0xe0>)
 8003f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f82:	4b2b      	ldr	r3, [pc, #172]	@ (8004030 <MX_GPIO_Init+0xe0>)
 8003f84:	2101      	movs	r1, #1
 8003f86:	430a      	orrs	r2, r1
 8003f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f8a:	4b29      	ldr	r3, [pc, #164]	@ (8004030 <MX_GPIO_Init+0xe0>)
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4013      	ands	r3, r2
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f96:	4b26      	ldr	r3, [pc, #152]	@ (8004030 <MX_GPIO_Init+0xe0>)
 8003f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f9a:	4b25      	ldr	r3, [pc, #148]	@ (8004030 <MX_GPIO_Init+0xe0>)
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fa2:	4b23      	ldr	r3, [pc, #140]	@ (8004030 <MX_GPIO_Init+0xe0>)
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	4013      	ands	r3, r2
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003fae:	23a0      	movs	r3, #160	@ 0xa0
 8003fb0:	05db      	lsls	r3, r3, #23
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2120      	movs	r1, #32
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7fc fee7 	bl	8000d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8003fbc:	193b      	adds	r3, r7, r4
 8003fbe:	2280      	movs	r2, #128	@ 0x80
 8003fc0:	0192      	lsls	r2, r2, #6
 8003fc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fc4:	193b      	adds	r3, r7, r4
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	193b      	adds	r3, r7, r4
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8003fd0:	193b      	adds	r3, r7, r4
 8003fd2:	4a18      	ldr	r2, [pc, #96]	@ (8004034 <MX_GPIO_Init+0xe4>)
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	0010      	movs	r0, r2
 8003fd8:	f7fc fc86 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8003fdc:	193b      	adds	r3, r7, r4
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	2288      	movs	r2, #136	@ 0x88
 8003fe6:	0352      	lsls	r2, r2, #13
 8003fe8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	193b      	adds	r3, r7, r4
 8003fec:	2200      	movs	r2, #0
 8003fee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8003ff0:	193a      	adds	r2, r7, r4
 8003ff2:	23a0      	movs	r3, #160	@ 0xa0
 8003ff4:	05db      	lsls	r3, r3, #23
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fc fc75 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003ffe:	0021      	movs	r1, r4
 8004000:	187b      	adds	r3, r7, r1
 8004002:	2220      	movs	r2, #32
 8004004:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004006:	187b      	adds	r3, r7, r1
 8004008:	2201      	movs	r2, #1
 800400a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	187b      	adds	r3, r7, r1
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004012:	187b      	adds	r3, r7, r1
 8004014:	2200      	movs	r2, #0
 8004016:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8004018:	187a      	adds	r2, r7, r1
 800401a:	23a0      	movs	r3, #160	@ 0xa0
 800401c:	05db      	lsls	r3, r3, #23
 800401e:	0011      	movs	r1, r2
 8004020:	0018      	movs	r0, r3
 8004022:	f7fc fc61 	bl	80008e8 <HAL_GPIO_Init>

}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b009      	add	sp, #36	@ 0x24
 800402c:	bd90      	pop	{r4, r7, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	40021000 	.word	0x40021000
 8004034:	50000800 	.word	0x50000800

08004038 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800403c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ac <MX_I2C1_Init+0x74>)
 800403e:	4a1c      	ldr	r2, [pc, #112]	@ (80040b0 <MX_I2C1_Init+0x78>)
 8004040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8004042:	4b1a      	ldr	r3, [pc, #104]	@ (80040ac <MX_I2C1_Init+0x74>)
 8004044:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <MX_I2C1_Init+0x7c>)
 8004046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004048:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <MX_I2C1_Init+0x74>)
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800404e:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <MX_I2C1_Init+0x74>)
 8004050:	2201      	movs	r2, #1
 8004052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004054:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <MX_I2C1_Init+0x74>)
 8004056:	2200      	movs	r2, #0
 8004058:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800405a:	4b14      	ldr	r3, [pc, #80]	@ (80040ac <MX_I2C1_Init+0x74>)
 800405c:	2200      	movs	r2, #0
 800405e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004060:	4b12      	ldr	r3, [pc, #72]	@ (80040ac <MX_I2C1_Init+0x74>)
 8004062:	2200      	movs	r2, #0
 8004064:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004066:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <MX_I2C1_Init+0x74>)
 8004068:	2200      	movs	r2, #0
 800406a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800406c:	4b0f      	ldr	r3, [pc, #60]	@ (80040ac <MX_I2C1_Init+0x74>)
 800406e:	2200      	movs	r2, #0
 8004070:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004072:	4b0e      	ldr	r3, [pc, #56]	@ (80040ac <MX_I2C1_Init+0x74>)
 8004074:	0018      	movs	r0, r3
 8004076:	f7fc fea5 	bl	8000dc4 <HAL_I2C_Init>
 800407a:	1e03      	subs	r3, r0, #0
 800407c:	d001      	beq.n	8004082 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800407e:	f000 fbfd 	bl	800487c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004082:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <MX_I2C1_Init+0x74>)
 8004084:	2100      	movs	r1, #0
 8004086:	0018      	movs	r0, r3
 8004088:	f7fd fca0 	bl	80019cc <HAL_I2CEx_ConfigAnalogFilter>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004090:	f000 fbf4 	bl	800487c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <MX_I2C1_Init+0x74>)
 8004096:	2100      	movs	r1, #0
 8004098:	0018      	movs	r0, r3
 800409a:	f7fd fce3 	bl	8001a64 <HAL_I2CEx_ConfigDigitalFilter>
 800409e:	1e03      	subs	r3, r0, #0
 80040a0:	d001      	beq.n	80040a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80040a2:	f000 fbeb 	bl	800487c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	2000002c 	.word	0x2000002c
 80040b0:	40005400 	.word	0x40005400
 80040b4:	00c12166 	.word	0x00c12166

080040b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b097      	sub	sp, #92	@ 0x5c
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c0:	2344      	movs	r3, #68	@ 0x44
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	0018      	movs	r0, r3
 80040c6:	2314      	movs	r3, #20
 80040c8:	001a      	movs	r2, r3
 80040ca:	2100      	movs	r1, #0
 80040cc:	f000 fe2c 	bl	8004d28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040d0:	2410      	movs	r4, #16
 80040d2:	193b      	adds	r3, r7, r4
 80040d4:	0018      	movs	r0, r3
 80040d6:	2334      	movs	r3, #52	@ 0x34
 80040d8:	001a      	movs	r2, r3
 80040da:	2100      	movs	r1, #0
 80040dc:	f000 fe24 	bl	8004d28 <memset>
  if(i2cHandle->Instance==I2C1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a22      	ldr	r2, [pc, #136]	@ (8004170 <HAL_I2C_MspInit+0xb8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d13e      	bne.n	8004168 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	2220      	movs	r2, #32
 80040ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80040f0:	193b      	adds	r3, r7, r4
 80040f2:	2200      	movs	r2, #0
 80040f4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040f6:	193b      	adds	r3, r7, r4
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7fe fa0f 	bl	800251c <HAL_RCCEx_PeriphCLKConfig>
 80040fe:	1e03      	subs	r3, r0, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004102:	f000 fbbb 	bl	800487c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004106:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <HAL_I2C_MspInit+0xbc>)
 8004108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800410a:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <HAL_I2C_MspInit+0xbc>)
 800410c:	2102      	movs	r1, #2
 800410e:	430a      	orrs	r2, r1
 8004110:	635a      	str	r2, [r3, #52]	@ 0x34
 8004112:	4b18      	ldr	r3, [pc, #96]	@ (8004174 <HAL_I2C_MspInit+0xbc>)
 8004114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004116:	2202      	movs	r2, #2
 8004118:	4013      	ands	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800411e:	2144      	movs	r1, #68	@ 0x44
 8004120:	187b      	adds	r3, r7, r1
 8004122:	22c0      	movs	r2, #192	@ 0xc0
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004128:	187b      	adds	r3, r7, r1
 800412a:	2212      	movs	r2, #18
 800412c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	187b      	adds	r3, r7, r1
 8004130:	2200      	movs	r2, #0
 8004132:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	187b      	adds	r3, r7, r1
 8004136:	2200      	movs	r2, #0
 8004138:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800413a:	187b      	adds	r3, r7, r1
 800413c:	2206      	movs	r2, #6
 800413e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004140:	187b      	adds	r3, r7, r1
 8004142:	4a0d      	ldr	r2, [pc, #52]	@ (8004178 <HAL_I2C_MspInit+0xc0>)
 8004144:	0019      	movs	r1, r3
 8004146:	0010      	movs	r0, r2
 8004148:	f7fc fbce 	bl	80008e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800414c:	4b09      	ldr	r3, [pc, #36]	@ (8004174 <HAL_I2C_MspInit+0xbc>)
 800414e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004150:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <HAL_I2C_MspInit+0xbc>)
 8004152:	2180      	movs	r1, #128	@ 0x80
 8004154:	0389      	lsls	r1, r1, #14
 8004156:	430a      	orrs	r2, r1
 8004158:	63da      	str	r2, [r3, #60]	@ 0x3c
 800415a:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <HAL_I2C_MspInit+0xbc>)
 800415c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	039b      	lsls	r3, r3, #14
 8004162:	4013      	ands	r3, r2
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004168:	46c0      	nop			@ (mov r8, r8)
 800416a:	46bd      	mov	sp, r7
 800416c:	b017      	add	sp, #92	@ 0x5c
 800416e:	bd90      	pop	{r4, r7, pc}
 8004170:	40005400 	.word	0x40005400
 8004174:	40021000 	.word	0x40021000
 8004178:	50000400 	.word	0x50000400

0800417c <i2cSend>:
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
lsm6ds_state_t i2cSend(lsm6ds_i2cInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 800417c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417e:	b08b      	sub	sp, #44	@ 0x2c
 8004180:	af04      	add	r7, sp, #16
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	0008      	movs	r0, r1
 8004186:	0011      	movs	r1, r2
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	260a      	movs	r6, #10
 800418c:	19bb      	adds	r3, r7, r6
 800418e:	1c02      	adds	r2, r0, #0
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	2508      	movs	r5, #8
 8004194:	197b      	adds	r3, r7, r5
 8004196:	1c0a      	adds	r2, r1, #0
 8004198:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Write(i2c->i2c, devAddr, memAddr,
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2117      	movs	r1, #23
 80041a8:	187c      	adds	r4, r7, r1
 80041aa:	1979      	adds	r1, r7, r5
 80041ac:	880d      	ldrh	r5, [r1, #0]
 80041ae:	19b9      	adds	r1, r7, r6
 80041b0:	8809      	ldrh	r1, [r1, #0]
 80041b2:	9302      	str	r3, [sp, #8]
 80041b4:	9201      	str	r2, [sp, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	2301      	movs	r3, #1
 80041bc:	002a      	movs	r2, r5
 80041be:	f7fc fea7 	bl	8000f10 <HAL_I2C_Mem_Write>
 80041c2:	0003      	movs	r3, r0
 80041c4:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->sendTimeout);

	if (state == HAL_OK)
 80041c6:	2117      	movs	r1, #23
 80041c8:	187b      	adds	r3, r7, r1
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <i2cSend+0x58>
		return LSM6DS_STATE_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e007      	b.n	80041e4 <i2cSend+0x68>
	else if (state == HAL_TIMEOUT)
 80041d4:	2317      	movs	r3, #23
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d101      	bne.n	80041e2 <i2cSend+0x66>
		return LSM6DS_STATE_TIMEOUT;
 80041de:	2302      	movs	r3, #2
 80041e0:	e000      	b.n	80041e4 <i2cSend+0x68>
	else
		return LSM6DS_STATE_ERR;
 80041e2:	2301      	movs	r3, #1
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b007      	add	sp, #28
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041ec <i2cReceive>:

//port
lsm6ds_state_t i2cReceive(lsm6ds_i2cInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 80041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ee:	b08b      	sub	sp, #44	@ 0x2c
 80041f0:	af04      	add	r7, sp, #16
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	0008      	movs	r0, r1
 80041f6:	0011      	movs	r1, r2
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	260a      	movs	r6, #10
 80041fc:	19bb      	adds	r3, r7, r6
 80041fe:	1c02      	adds	r2, r0, #0
 8004200:	801a      	strh	r2, [r3, #0]
 8004202:	2508      	movs	r5, #8
 8004204:	197b      	adds	r3, r7, r5
 8004206:	1c0a      	adds	r2, r1, #0
 8004208:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Read(i2c->i2c, devAddr, memAddr,
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2117      	movs	r1, #23
 8004218:	187c      	adds	r4, r7, r1
 800421a:	1979      	adds	r1, r7, r5
 800421c:	880d      	ldrh	r5, [r1, #0]
 800421e:	19b9      	adds	r1, r7, r6
 8004220:	8809      	ldrh	r1, [r1, #0]
 8004222:	9302      	str	r3, [sp, #8]
 8004224:	9201      	str	r2, [sp, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2301      	movs	r3, #1
 800422c:	002a      	movs	r2, r5
 800422e:	f7fc ff9d 	bl	800116c <HAL_I2C_Mem_Read>
 8004232:	0003      	movs	r3, r0
 8004234:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->receiveTimeout);

	if (state == HAL_OK)
 8004236:	2117      	movs	r1, #23
 8004238:	187b      	adds	r3, r7, r1
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <i2cReceive+0x58>
		return LSM6DS_STATE_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e007      	b.n	8004254 <i2cReceive+0x68>
	else if (state == HAL_TIMEOUT)
 8004244:	2317      	movs	r3, #23
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d101      	bne.n	8004252 <i2cReceive+0x66>
		return LSM6DS_STATE_TIMEOUT;
 800424e:	2302      	movs	r3, #2
 8004250:	e000      	b.n	8004254 <i2cReceive+0x68>
	else
		return LSM6DS_STATE_ERR;
 8004252:	2301      	movs	r3, #1
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b007      	add	sp, #28
 800425a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800425c <modifyReg>:
 * @param: register address
 * @param: bitmask
 * @param: value
 */
lsm6ds_state_t modifyReg(lsm6ds_sensor_t *sensor, uint16_t regAddr,
		uint8_t bitmask, uint16_t value) {
 800425c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425e:	b089      	sub	sp, #36	@ 0x24
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	000c      	movs	r4, r1
 8004266:	0010      	movs	r0, r2
 8004268:	0019      	movs	r1, r3
 800426a:	230a      	movs	r3, #10
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	1c22      	adds	r2, r4, #0
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	2209      	movs	r2, #9
 8004274:	18bb      	adds	r3, r7, r2
 8004276:	1c02      	adds	r2, r0, #0
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	1dbb      	adds	r3, r7, #6
 800427c:	1c0a      	adds	r2, r1, #0
 800427e:	801a      	strh	r2, [r3, #0]

	uint8_t readedReg = 0;
 8004280:	2516      	movs	r5, #22
 8004282:	197b      	adds	r3, r7, r5
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8004288:	2617      	movs	r6, #23
 800428a:	19bb      	adds	r3, r7, r6
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]

	//read original register
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr,
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8999      	ldrh	r1, [r3, #12]
 8004296:	19bc      	adds	r4, r7, r6
 8004298:	197d      	adds	r5, r7, r5
 800429a:	230a      	movs	r3, #10
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	2301      	movs	r3, #1
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	002b      	movs	r3, r5
 80042a6:	f7ff ffa1 	bl	80041ec <i2cReceive>
 80042aa:	0003      	movs	r3, r0
 80042ac:	7023      	strb	r3, [r4, #0]
			&readedReg, 1);

	if (state != LSM6DS_STATE_OK)
 80042ae:	19bb      	adds	r3, r7, r6
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <modifyReg+0x60>
		return state;
 80042b6:	19bb      	adds	r3, r7, r6
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	e02c      	b.n	8004316 <modifyReg+0xba>

	//clear bits corresponding to mask
	readedReg &= ~(bitmask);
 80042bc:	2009      	movs	r0, #9
 80042be:	183b      	adds	r3, r7, r0
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b25b      	sxtb	r3, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	b25b      	sxtb	r3, r3
 80042c8:	2116      	movs	r1, #22
 80042ca:	187a      	adds	r2, r7, r1
 80042cc:	7812      	ldrb	r2, [r2, #0]
 80042ce:	b252      	sxtb	r2, r2
 80042d0:	4013      	ands	r3, r2
 80042d2:	b25b      	sxtb	r3, r3
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	701a      	strb	r2, [r3, #0]

	//modify register
	uint8_t regToWrite = readedReg | (bitmask & value);
 80042da:	1dbb      	adds	r3, r7, #6
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	183a      	adds	r2, r7, r0
 80042e2:	7812      	ldrb	r2, [r2, #0]
 80042e4:	4013      	ands	r3, r2
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	b25a      	sxtb	r2, r3
 80042ea:	187b      	adds	r3, r7, r1
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b25b      	sxtb	r3, r3
 80042f0:	4313      	orrs	r3, r2
 80042f2:	b25b      	sxtb	r3, r3
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	2415      	movs	r4, #21
 80042f8:	193b      	adds	r3, r7, r4
 80042fa:	701a      	strb	r2, [r3, #0]

	//write register
	return i2cSend(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr, &regToWrite,
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8999      	ldrh	r1, [r3, #12]
 8004302:	193c      	adds	r4, r7, r4
 8004304:	230a      	movs	r3, #10
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	881a      	ldrh	r2, [r3, #0]
 800430a:	2301      	movs	r3, #1
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	0023      	movs	r3, r4
 8004310:	f7ff ff34 	bl	800417c <i2cSend>
 8004314:	0003      	movs	r3, r0
			1);

}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b007      	add	sp, #28
 800431c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800431e <lsm6ds_init>:
 * @param: rxTimeout
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_init(lsm6ds_sensor_t *sensor, uint16_t devAddr,
		I2C_HandleTypeDef *i2c, uint32_t txTimeout, uint32_t rxTimeout) { //port
 800431e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004320:	b089      	sub	sp, #36	@ 0x24
 8004322:	af02      	add	r7, sp, #8
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	200a      	movs	r0, #10
 800432c:	183b      	adds	r3, r7, r0
 800432e:	1c0a      	adds	r2, r1, #0
 8004330:	801a      	strh	r2, [r3, #0]

	sensor->deviceAddr = devAddr;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	183a      	adds	r2, r7, r0
 8004336:	8812      	ldrh	r2, [r2, #0]
 8004338:	819a      	strh	r2, [r3, #12]
	sensor->lsm6dsI2c.i2c = i2c;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	601a      	str	r2, [r3, #0]
	sensor->lsm6dsI2c.receiveTimeout = rxTimeout;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004344:	609a      	str	r2, [r3, #8]
	sensor->lsm6dsI2c.sendTimeout = txTimeout;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	605a      	str	r2, [r3, #4]

	memset(&sensor->outGR, 0, sizeof(sensor->outGR));
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3314      	adds	r3, #20
 8004350:	2206      	movs	r2, #6
 8004352:	2100      	movs	r1, #0
 8004354:	0018      	movs	r0, r3
 8004356:	f000 fce7 	bl	8004d28 <memset>
	memset(&sensor->outXL, 0, sizeof(sensor->outXL));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	330e      	adds	r3, #14
 800435e:	2206      	movs	r2, #6
 8004360:	2100      	movs	r1, #0
 8004362:	0018      	movs	r0, r3
 8004364:	f000 fce0 	bl	8004d28 <memset>
	sensor->outTemperature = 0;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	835a      	strh	r2, [r3, #26]

	//check communication
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 800436e:	2417      	movs	r4, #23
 8004370:	193b      	adds	r3, r7, r4
 8004372:	2201      	movs	r2, #1
 8004374:	701a      	strb	r2, [r3, #0]
	uint8_t receivedWhoIAm = 0;
 8004376:	2616      	movs	r6, #22
 8004378:	19bb      	adds	r3, r7, r6
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr,
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8999      	ldrh	r1, [r3, #12]
 8004384:	0025      	movs	r5, r4
 8004386:	193c      	adds	r4, r7, r4
 8004388:	19bb      	adds	r3, r7, r6
 800438a:	2201      	movs	r2, #1
 800438c:	9200      	str	r2, [sp, #0]
 800438e:	220f      	movs	r2, #15
 8004390:	f7ff ff2c 	bl	80041ec <i2cReceive>
 8004394:	0003      	movs	r3, r0
 8004396:	7023      	strb	r3, [r4, #0]
	LSM6DS_REG_WHO_AM_I, &receivedWhoIAm, 1);
	if (state == LSM6DS_STATE_ERR)
 8004398:	197b      	adds	r3, r7, r5
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <lsm6ds_init+0x86>
		return LSM6DS_STATE_ERR_SERIAL;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e00f      	b.n	80043c4 <lsm6ds_init+0xa6>
	else if (state == LSM6DS_STATE_TIMEOUT)
 80043a4:	2217      	movs	r2, #23
 80043a6:	18bb      	adds	r3, r7, r2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d102      	bne.n	80043b4 <lsm6ds_init+0x96>
		return state;
 80043ae:	18bb      	adds	r3, r7, r2
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	e007      	b.n	80043c4 <lsm6ds_init+0xa6>
	else {
		if (receivedWhoIAm == LSM6DS_WHO_AM_I)
 80043b4:	2316      	movs	r3, #22
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b6a      	cmp	r3, #106	@ 0x6a
 80043bc:	d101      	bne.n	80043c2 <lsm6ds_init+0xa4>
			return LSM6DS_STATE_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <lsm6ds_init+0xa6>
		else
			return LSM6DS_STATE_WRONG_WHOAMI;
 80043c2:	2304      	movs	r3, #4
	}

}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b007      	add	sp, #28
 80043ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043cc <lsm6ds_setXLOutputDataRate>:
 * @param: sensor
 * @param: LSM6DS_ODR_XL_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setXLOutputDataRate(lsm6ds_sensor_t *sensor, uint8_t odr) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	000a      	movs	r2, r1
 80043d6:	1cfb      	adds	r3, r7, #3
 80043d8:	701a      	strb	r2, [r3, #0]

	return modifyReg(sensor, LSM6DS_REG_CTRL1_XL, LSM6DS_MASK_ODR_XL, odr);
 80043da:	1cfb      	adds	r3, r7, #3
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	22f0      	movs	r2, #240	@ 0xf0
 80043e4:	2110      	movs	r1, #16
 80043e6:	f7ff ff39 	bl	800425c <modifyReg>
 80043ea:	0003      	movs	r3, r0

}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b002      	add	sp, #8
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <lsm6ds_setXLFullScale>:
 * @param: sensor
 * @param: LSM6DS_FS_XL_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setXLFullScale(lsm6ds_sensor_t *sensor, uint8_t fs) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	000a      	movs	r2, r1
 80043fe:	1cfb      	adds	r3, r7, #3
 8004400:	701a      	strb	r2, [r3, #0]

	return modifyReg(sensor, LSM6DS_REG_CTRL1_XL, LSM6DS_MASK_FS_XL, fs);
 8004402:	1cfb      	adds	r3, r7, #3
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	220c      	movs	r2, #12
 800440c:	2110      	movs	r1, #16
 800440e:	f7ff ff25 	bl	800425c <modifyReg>
 8004412:	0003      	movs	r3, r0

}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}

0800441c <lsm6ds_setGROutputDataRate>:
 * @param: sensor
 * @param: LSM6DS_ODR_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGROutputDataRate(lsm6ds_sensor_t *sensor, uint8_t odr) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	000a      	movs	r2, r1
 8004426:	1cfb      	adds	r3, r7, #3
 8004428:	701a      	strb	r2, [r3, #0]
	return modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_ODR_G, odr);
 800442a:	1cfb      	adds	r3, r7, #3
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	22f0      	movs	r2, #240	@ 0xf0
 8004434:	2111      	movs	r1, #17
 8004436:	f7ff ff11 	bl	800425c <modifyReg>
 800443a:	0003      	movs	r3, r0

}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <lsm6ds_setGRFullScale>:
 * @param: sensor
 * @param: LSM6DS_FS_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGRFullScale(lsm6ds_sensor_t *sensor, uint8_t fs) {
 8004444:	b5b0      	push	{r4, r5, r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	000a      	movs	r2, r1
 800444e:	1cfb      	adds	r3, r7, #3
 8004450:	701a      	strb	r2, [r3, #0]

	lsm6ds_state_t stat = LSM6DS_STATE_ERR;
 8004452:	250f      	movs	r5, #15
 8004454:	197b      	adds	r3, r7, r5
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]

	if (fs == LSM6DS_FS_G_125DPS) {
 800445a:	1cfb      	adds	r3, r7, #3
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d120      	bne.n	80044a4 <lsm6ds_setGRFullScale+0x60>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G,
 8004462:	197c      	adds	r4, r7, r5
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	2300      	movs	r3, #0
 8004468:	220c      	movs	r2, #12
 800446a:	2111      	movs	r1, #17
 800446c:	f7ff fef6 	bl	800425c <modifyReg>
 8004470:	0003      	movs	r3, r0
 8004472:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_245DPS);
		if (stat != LSM6DS_STATE_OK)
 8004474:	197b      	adds	r3, r7, r5
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <lsm6ds_setGRFullScale+0x3e>
			return stat;
 800447c:	197b      	adds	r3, r7, r5
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	e037      	b.n	80044f2 <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125,
 8004482:	250f      	movs	r5, #15
 8004484:	197c      	adds	r4, r7, r5
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	2302      	movs	r3, #2
 800448a:	2202      	movs	r2, #2
 800448c:	2111      	movs	r1, #17
 800448e:	f7ff fee5 	bl	800425c <modifyReg>
 8004492:	0003      	movs	r3, r0
 8004494:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_125DPS);
		if (stat != LSM6DS_STATE_OK)
 8004496:	197b      	adds	r3, r7, r5
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d026      	beq.n	80044ec <lsm6ds_setGRFullScale+0xa8>
			return stat;
 800449e:	197b      	adds	r3, r7, r5
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	e026      	b.n	80044f2 <lsm6ds_setGRFullScale+0xae>

	} else {

		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125, 0);
 80044a4:	250f      	movs	r5, #15
 80044a6:	197c      	adds	r4, r7, r5
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	2300      	movs	r3, #0
 80044ac:	2202      	movs	r2, #2
 80044ae:	2111      	movs	r1, #17
 80044b0:	f7ff fed4 	bl	800425c <modifyReg>
 80044b4:	0003      	movs	r3, r0
 80044b6:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 80044b8:	197b      	adds	r3, r7, r5
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <lsm6ds_setGRFullScale+0x82>
			return stat;
 80044c0:	197b      	adds	r3, r7, r5
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	e015      	b.n	80044f2 <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G, fs);
 80044c6:	1cfb      	adds	r3, r7, #3
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	250f      	movs	r5, #15
 80044ce:	197c      	adds	r4, r7, r5
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	220c      	movs	r2, #12
 80044d4:	2111      	movs	r1, #17
 80044d6:	f7ff fec1 	bl	800425c <modifyReg>
 80044da:	0003      	movs	r3, r0
 80044dc:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 80044de:	197b      	adds	r3, r7, r5
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <lsm6ds_setGRFullScale+0xa8>
			return stat;
 80044e6:	197b      	adds	r3, r7, r5
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	e002      	b.n	80044f2 <lsm6ds_setGRFullScale+0xae>

	}

	return stat;
 80044ec:	230f      	movs	r3, #15
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	781b      	ldrb	r3, [r3, #0]

}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b004      	add	sp, #16
 80044f8:	bdb0      	pop	{r4, r5, r7, pc}

080044fa <lsm6ds_reset>:
 * software reset
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_reset(lsm6ds_sensor_t *sensor) {
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
	return modifyReg(sensor, LSM6DS_REG_CTRL3_C, LSM6DS_MASK_SW_RESET,
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	2301      	movs	r3, #1
 8004506:	2201      	movs	r2, #1
 8004508:	2112      	movs	r1, #18
 800450a:	f7ff fea7 	bl	800425c <modifyReg>
 800450e:	0003      	movs	r3, r0
	LSM6DS_SW_RESET);
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	b002      	add	sp, #8
 8004516:	bd80      	pop	{r7, pc}

08004518 <lsm6ds_newDataAvailableCheck>:
 * @output: check output with LSM6DS_TDA/GDA/XLDA
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_newDataAvailableCheck(lsm6ds_sensor_t *sensor,
		uint8_t *newData) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af02      	add	r7, sp, #8
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]

	return i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr,
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8999      	ldrh	r1, [r3, #12]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2201      	movs	r2, #1
 800452c:	9200      	str	r2, [sp, #0]
 800452e:	221e      	movs	r2, #30
 8004530:	f7ff fe5c 	bl	80041ec <i2cReceive>
 8004534:	0003      	movs	r3, r0
			LSM6DS_REG_STATUS_REG, newData, 1);

}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}

0800453e <lsm6ds_updateGR>:
 * updates gyro data in sensor struct
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_updateGR(lsm6ds_sensor_t *sensor){
 800453e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004540:	b087      	sub	sp, #28
 8004542:	af02      	add	r7, sp, #8
 8004544:	6078      	str	r0, [r7, #4]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 8004546:	250f      	movs	r5, #15
 8004548:	197b      	adds	r3, r7, r5
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
	union{
		uint8_t raw[6];
		int16_t separated[3];
	}outputData;

	memset(&outputData, 0, sizeof(outputData));
 800454e:	2608      	movs	r6, #8
 8004550:	19bb      	adds	r3, r7, r6
 8004552:	2206      	movs	r2, #6
 8004554:	2100      	movs	r1, #0
 8004556:	0018      	movs	r0, r3
 8004558:	f000 fbe6 	bl	8004d28 <memset>

	status = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, LSM6DS_REG_OUTX_L_G, outputData.raw, 6);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8999      	ldrh	r1, [r3, #12]
 8004562:	197c      	adds	r4, r7, r5
 8004564:	19bb      	adds	r3, r7, r6
 8004566:	2206      	movs	r2, #6
 8004568:	9200      	str	r2, [sp, #0]
 800456a:	2222      	movs	r2, #34	@ 0x22
 800456c:	f7ff fe3e 	bl	80041ec <i2cReceive>
 8004570:	0003      	movs	r3, r0
 8004572:	7023      	strb	r3, [r4, #0]

	if(status != LSM6DS_STATE_OK)
 8004574:	197b      	adds	r3, r7, r5
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <lsm6ds_updateGR+0x44>
		return status;
 800457c:	197b      	adds	r3, r7, r5
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	e012      	b.n	80045a8 <lsm6ds_updateGR+0x6a>

	sensor->outGR.x = outputData.separated[0];
 8004582:	2108      	movs	r1, #8
 8004584:	187b      	adds	r3, r7, r1
 8004586:	2200      	movs	r2, #0
 8004588:	5e9a      	ldrsh	r2, [r3, r2]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	829a      	strh	r2, [r3, #20]
	sensor->outGR.y = outputData.separated[1];
 800458e:	187b      	adds	r3, r7, r1
 8004590:	2202      	movs	r2, #2
 8004592:	5e9a      	ldrsh	r2, [r3, r2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	82da      	strh	r2, [r3, #22]
	sensor->outGR.z = outputData.separated[2];
 8004598:	187b      	adds	r3, r7, r1
 800459a:	2204      	movs	r2, #4
 800459c:	5e9a      	ldrsh	r2, [r3, r2]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	831a      	strh	r2, [r3, #24]


	return status;
 80045a2:	230f      	movs	r3, #15
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	781b      	ldrb	r3, [r3, #0]

}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b005      	add	sp, #20
 80045ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80045b0:	b5b0      	push	{r4, r5, r7, lr}
 80045b2:	b08c      	sub	sp, #48	@ 0x30
 80045b4:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80045b6:	f7fc f839 	bl	800062c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80045ba:	f000 f8e9 	bl	8004790 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80045be:	f7ff fcc7 	bl	8003f50 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80045c2:	f000 f9a3 	bl	800490c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80045c6:	f000 f9ef 	bl	80049a8 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80045ca:	f7ff fd35 	bl	8004038 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	lsm6ds_state_t sensorStat = lsm6ds_init(&mems, LSM6DS_ADDR_SA0_L, &hi2c1,
 80045ce:	251f      	movs	r5, #31
 80045d0:	197c      	adds	r4, r7, r5
 80045d2:	4a62      	ldr	r2, [pc, #392]	@ (800475c <main+0x1ac>)
 80045d4:	4862      	ldr	r0, [pc, #392]	@ (8004760 <main+0x1b0>)
 80045d6:	2364      	movs	r3, #100	@ 0x64
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	2364      	movs	r3, #100	@ 0x64
 80045dc:	21d4      	movs	r1, #212	@ 0xd4
 80045de:	f7ff fe9e 	bl	800431e <lsm6ds_init>
 80045e2:	0003      	movs	r3, r0
 80045e4:	7023      	strb	r3, [r4, #0]
			100, 100);

	espAt_init(&bleRadio, &huart1, 50, 2000);
 80045e6:	23fa      	movs	r3, #250	@ 0xfa
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	495e      	ldr	r1, [pc, #376]	@ (8004764 <main+0x1b4>)
 80045ec:	485e      	ldr	r0, [pc, #376]	@ (8004768 <main+0x1b8>)
 80045ee:	2232      	movs	r2, #50	@ 0x32
 80045f0:	f7ff f8b7 	bl	8003762 <espAt_init>

	espAt_sendCommand(&bleRadio, G_RST);
 80045f4:	4a5d      	ldr	r2, [pc, #372]	@ (800476c <main+0x1bc>)
 80045f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004768 <main+0x1b8>)
 80045f8:	0011      	movs	r1, r2
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7ff f8c6 	bl	800378c <espAt_sendCommand>
	HAL_Delay(1000);
 8004600:	23fa      	movs	r3, #250	@ 0xfa
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	0018      	movs	r0, r3
 8004606:	f7fc f897 	bl	8000738 <HAL_Delay>

	espAt_sendString(&bleRadio, S_BHN, "bartsHID2");
 800460a:	4a59      	ldr	r2, [pc, #356]	@ (8004770 <main+0x1c0>)
 800460c:	4959      	ldr	r1, [pc, #356]	@ (8004774 <main+0x1c4>)
 800460e:	4b56      	ldr	r3, [pc, #344]	@ (8004768 <main+0x1b8>)
 8004610:	0018      	movs	r0, r3
 8004612:	f7ff fb41 	bl	8003c98 <espAt_sendString>
	HAL_Delay(200);
 8004616:	20c8      	movs	r0, #200	@ 0xc8
 8004618:	f7fc f88e 	bl	8000738 <HAL_Delay>
	espAt_sendParams(&bleRadio, P_BHI, 1, 1);
 800461c:	4956      	ldr	r1, [pc, #344]	@ (8004778 <main+0x1c8>)
 800461e:	4852      	ldr	r0, [pc, #328]	@ (8004768 <main+0x1b8>)
 8004620:	2301      	movs	r3, #1
 8004622:	2201      	movs	r2, #1
 8004624:	f7ff f960 	bl	80038e8 <espAt_sendParams>
	HAL_Delay(200);
 8004628:	20c8      	movs	r0, #200	@ 0xc8
 800462a:	f7fc f885 	bl	8000738 <HAL_Delay>

	//change baudrate
	espAt_sendParams(&bleRadio, P_UC, 5, 1152000, 8, 1, 0, 0);
 800462e:	4a53      	ldr	r2, [pc, #332]	@ (800477c <main+0x1cc>)
 8004630:	4953      	ldr	r1, [pc, #332]	@ (8004780 <main+0x1d0>)
 8004632:	484d      	ldr	r0, [pc, #308]	@ (8004768 <main+0x1b8>)
 8004634:	2300      	movs	r3, #0
 8004636:	9303      	str	r3, [sp, #12]
 8004638:	2300      	movs	r3, #0
 800463a:	9302      	str	r3, [sp, #8]
 800463c:	2301      	movs	r3, #1
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	2308      	movs	r3, #8
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	0013      	movs	r3, r2
 8004646:	2205      	movs	r2, #5
 8004648:	f7ff f94e 	bl	80038e8 <espAt_sendParams>
	HAL_Delay(200);
 800464c:	20c8      	movs	r0, #200	@ 0xc8
 800464e:	f7fc f873 	bl	8000738 <HAL_Delay>
	HAL_UART_ChangeSpeed(&huart1, 1152000);
 8004652:	4a4a      	ldr	r2, [pc, #296]	@ (800477c <main+0x1cc>)
 8004654:	4b43      	ldr	r3, [pc, #268]	@ (8004764 <main+0x1b4>)
 8004656:	0011      	movs	r1, r2
 8004658:	0018      	movs	r0, r3
 800465a:	f000 fad3 	bl	8004c04 <HAL_UART_ChangeSpeed>

	sensorStat = lsm6ds_reset(&mems);
 800465e:	197c      	adds	r4, r7, r5
 8004660:	4b3f      	ldr	r3, [pc, #252]	@ (8004760 <main+0x1b0>)
 8004662:	0018      	movs	r0, r3
 8004664:	f7ff ff49 	bl	80044fa <lsm6ds_reset>
 8004668:	0003      	movs	r3, r0
 800466a:	7023      	strb	r3, [r4, #0]

	sensorStat = lsm6ds_setXLOutputDataRate(&mems, LSM6DS_ODR_XL_12_5_HZ);
 800466c:	197c      	adds	r4, r7, r5
 800466e:	4b3c      	ldr	r3, [pc, #240]	@ (8004760 <main+0x1b0>)
 8004670:	2110      	movs	r1, #16
 8004672:	0018      	movs	r0, r3
 8004674:	f7ff feaa 	bl	80043cc <lsm6ds_setXLOutputDataRate>
 8004678:	0003      	movs	r3, r0
 800467a:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setGROutputDataRate(&mems, LSM6DS_ODR_G_833_HZ);
 800467c:	197c      	adds	r4, r7, r5
 800467e:	4b38      	ldr	r3, [pc, #224]	@ (8004760 <main+0x1b0>)
 8004680:	2170      	movs	r1, #112	@ 0x70
 8004682:	0018      	movs	r0, r3
 8004684:	f7ff feca 	bl	800441c <lsm6ds_setGROutputDataRate>
 8004688:	0003      	movs	r3, r0
 800468a:	7023      	strb	r3, [r4, #0]

	sensorStat = lsm6ds_setXLFullScale(&mems, LSM6DS_FS_XL_16G);
 800468c:	197c      	adds	r4, r7, r5
 800468e:	4b34      	ldr	r3, [pc, #208]	@ (8004760 <main+0x1b0>)
 8004690:	2104      	movs	r1, #4
 8004692:	0018      	movs	r0, r3
 8004694:	f7ff feae 	bl	80043f4 <lsm6ds_setXLFullScale>
 8004698:	0003      	movs	r3, r0
 800469a:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setGRFullScale(&mems, LSM6DS_FS_G_125DPS);
 800469c:	197c      	adds	r4, r7, r5
 800469e:	4b30      	ldr	r3, [pc, #192]	@ (8004760 <main+0x1b0>)
 80046a0:	2102      	movs	r1, #2
 80046a2:	0018      	movs	r0, r3
 80046a4:	f7ff fece 	bl	8004444 <lsm6ds_setGRFullScale>
 80046a8:	0003      	movs	r3, r0
 80046aa:	7023      	strb	r3, [r4, #0]

	int32_t amx = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
	int32_t amy = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
	int32_t amz = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]

	int32_t amDivider = 1000;
 80046b8:	23fa      	movs	r3, #250	@ 0xfa
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	60fb      	str	r3, [r7, #12]
	float amAcceleration = 1.2;
 80046be:	4b31      	ldr	r3, [pc, #196]	@ (8004784 <main+0x1d4>)
 80046c0:	60bb      	str	r3, [r7, #8]

	uint8_t newDataAvailable = 0;
 80046c2:	1dfb      	adds	r3, r7, #7
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		ledOn();
 80046c8:	f000 f8c0 	bl	800484c <ledOn>
		sensorStat = lsm6ds_newDataAvailableCheck(&mems, &newDataAvailable);
 80046cc:	251f      	movs	r5, #31
 80046ce:	197c      	adds	r4, r7, r5
 80046d0:	1dfa      	adds	r2, r7, #7
 80046d2:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <main+0x1b0>)
 80046d4:	0011      	movs	r1, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff ff1e 	bl	8004518 <lsm6ds_newDataAvailableCheck>
 80046dc:	0003      	movs	r3, r0
 80046de:	7023      	strb	r3, [r4, #0]
		ledOff();
 80046e0:	f000 f8c0 	bl	8004864 <ledOff>
//		}
//		if (newDataAvailable & LSM6DS_XLDA) {
//			sensorStat = lsm6ds_updateXL(&mems);
//		}

		if (newDataAvailable & LSM6DS_GDA) {
 80046e4:	1dfb      	adds	r3, r7, #7
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	001a      	movs	r2, r3
 80046ea:	2302      	movs	r3, #2
 80046ec:	4013      	ands	r3, r2
 80046ee:	d0eb      	beq.n	80046c8 <main+0x118>
			ledOn();
 80046f0:	f000 f8ac 	bl	800484c <ledOn>
			sensorStat = lsm6ds_updateGR(&mems);
 80046f4:	197c      	adds	r4, r7, r5
 80046f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004760 <main+0x1b0>)
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff ff20 	bl	800453e <lsm6ds_updateGR>
 80046fe:	0003      	movs	r3, r0
 8004700:	7023      	strb	r3, [r4, #0]

			ledOff();
 8004702:	f000 f8af 	bl	8004864 <ledOff>

			amx = mems.outGR.x / amDivider;
 8004706:	4b16      	ldr	r3, [pc, #88]	@ (8004760 <main+0x1b0>)
 8004708:	2214      	movs	r2, #20
 800470a:	5e9b      	ldrsh	r3, [r3, r2]
 800470c:	68f9      	ldr	r1, [r7, #12]
 800470e:	0018      	movs	r0, r3
 8004710:	f7fb fd8a 	bl	8000228 <__divsi3>
 8004714:	0003      	movs	r3, r0
 8004716:	61bb      	str	r3, [r7, #24]
			amz = mems.outGR.z / amDivider;
 8004718:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <main+0x1b0>)
 800471a:	2218      	movs	r2, #24
 800471c:	5e9b      	ldrsh	r3, [r3, r2]
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	0018      	movs	r0, r3
 8004722:	f7fb fd81 	bl	8000228 <__divsi3>
 8004726:	0003      	movs	r3, r0
 8004728:	613b      	str	r3, [r7, #16]
//				amz = -pow(-(double) amz, amAcceleration);
//			} else {
//				amz = pow((double) amz, amAcceleration);
//			}

			if (HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin)
 800472a:	2380      	movs	r3, #128	@ 0x80
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	4a16      	ldr	r2, [pc, #88]	@ (8004788 <main+0x1d8>)
 8004730:	0019      	movs	r1, r3
 8004732:	0010      	movs	r0, r2
 8004734:	f7fc fb0c 	bl	8000d50 <HAL_GPIO_ReadPin>
 8004738:	1e03      	subs	r3, r0, #0
 800473a:	d1c5      	bne.n	80046c8 <main+0x118>
					== GPIO_PIN_RESET) {
				espAt_sendParams(&bleRadio, P_BHM, 4, 0, amz * -1, amx * -1, 0);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	425b      	negs	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4252      	negs	r2, r2
 8004744:	4911      	ldr	r1, [pc, #68]	@ (800478c <main+0x1dc>)
 8004746:	4808      	ldr	r0, [pc, #32]	@ (8004768 <main+0x1b8>)
 8004748:	2400      	movs	r4, #0
 800474a:	9402      	str	r4, [sp, #8]
 800474c:	9201      	str	r2, [sp, #4]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	2300      	movs	r3, #0
 8004752:	2204      	movs	r2, #4
 8004754:	f7ff f8c8 	bl	80038e8 <espAt_sendParams>
		ledOn();
 8004758:	e7b6      	b.n	80046c8 <main+0x118>
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	2000002c 	.word	0x2000002c
 8004760:	2000008c 	.word	0x2000008c
 8004764:	200000a8 	.word	0x200000a8
 8004768:	20000080 	.word	0x20000080
 800476c:	08004dbc 	.word	0x08004dbc
 8004770:	08004dc0 	.word	0x08004dc0
 8004774:	08004dcc 	.word	0x08004dcc
 8004778:	08004dd8 	.word	0x08004dd8
 800477c:	00119400 	.word	0x00119400
 8004780:	08004de4 	.word	0x08004de4
 8004784:	3f99999a 	.word	0x3f99999a
 8004788:	50000800 	.word	0x50000800
 800478c:	08004df0 	.word	0x08004df0

08004790 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b093      	sub	sp, #76	@ 0x4c
 8004794:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004796:	2410      	movs	r4, #16
 8004798:	193b      	adds	r3, r7, r4
 800479a:	0018      	movs	r0, r3
 800479c:	2338      	movs	r3, #56	@ 0x38
 800479e:	001a      	movs	r2, r3
 80047a0:	2100      	movs	r1, #0
 80047a2:	f000 fac1 	bl	8004d28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80047a6:	003b      	movs	r3, r7
 80047a8:	0018      	movs	r0, r3
 80047aa:	2310      	movs	r3, #16
 80047ac:	001a      	movs	r2, r3
 80047ae:	2100      	movs	r1, #0
 80047b0:	f000 faba 	bl	8004d28 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047b4:	2380      	movs	r3, #128	@ 0x80
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fd f99f 	bl	8001afc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047be:	193b      	adds	r3, r7, r4
 80047c0:	2202      	movs	r2, #2
 80047c2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047c4:	193b      	adds	r3, r7, r4
 80047c6:	2280      	movs	r2, #128	@ 0x80
 80047c8:	0052      	lsls	r2, r2, #1
 80047ca:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80047cc:	0021      	movs	r1, r4
 80047ce:	187b      	adds	r3, r7, r1
 80047d0:	2200      	movs	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047d4:	187b      	adds	r3, r7, r1
 80047d6:	2240      	movs	r2, #64	@ 0x40
 80047d8:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047da:	187b      	adds	r3, r7, r1
 80047dc:	2202      	movs	r2, #2
 80047de:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	2202      	movs	r2, #2
 80047e4:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	2200      	movs	r2, #0
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	2208      	movs	r2, #8
 80047f0:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047f2:	187b      	adds	r3, r7, r1
 80047f4:	2280      	movs	r2, #128	@ 0x80
 80047f6:	0292      	lsls	r2, r2, #10
 80047f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80047fa:	187b      	adds	r3, r7, r1
 80047fc:	2280      	movs	r2, #128	@ 0x80
 80047fe:	0492      	lsls	r2, r2, #18
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004802:	187b      	adds	r3, r7, r1
 8004804:	2280      	movs	r2, #128	@ 0x80
 8004806:	0592      	lsls	r2, r2, #22
 8004808:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800480a:	187b      	adds	r3, r7, r1
 800480c:	0018      	movs	r0, r3
 800480e:	f7fd f9c1 	bl	8001b94 <HAL_RCC_OscConfig>
 8004812:	1e03      	subs	r3, r0, #0
 8004814:	d001      	beq.n	800481a <SystemClock_Config+0x8a>
		Error_Handler();
 8004816:	f000 f831 	bl	800487c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800481a:	003b      	movs	r3, r7
 800481c:	2207      	movs	r2, #7
 800481e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004820:	003b      	movs	r3, r7
 8004822:	2202      	movs	r2, #2
 8004824:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004826:	003b      	movs	r3, r7
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800482c:	003b      	movs	r3, r7
 800482e:	2200      	movs	r2, #0
 8004830:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004832:	003b      	movs	r3, r7
 8004834:	2102      	movs	r1, #2
 8004836:	0018      	movs	r0, r3
 8004838:	f7fd fcc6 	bl	80021c8 <HAL_RCC_ClockConfig>
 800483c:	1e03      	subs	r3, r0, #0
 800483e:	d001      	beq.n	8004844 <SystemClock_Config+0xb4>
		Error_Handler();
 8004840:	f000 f81c 	bl	800487c <Error_Handler>
	}
}
 8004844:	46c0      	nop			@ (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b013      	add	sp, #76	@ 0x4c
 800484a:	bd90      	pop	{r4, r7, pc}

0800484c <ledOn>:

/* USER CODE BEGIN 4 */

void ledOn(void) {
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8004850:	23a0      	movs	r3, #160	@ 0xa0
 8004852:	05db      	lsls	r3, r3, #23
 8004854:	2201      	movs	r2, #1
 8004856:	2120      	movs	r1, #32
 8004858:	0018      	movs	r0, r3
 800485a:	f7fc fa96 	bl	8000d8a <HAL_GPIO_WritePin>
}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <ledOff>:

void ledOff(void) {
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8004868:	23a0      	movs	r3, #160	@ 0xa0
 800486a:	05db      	lsls	r3, r3, #23
 800486c:	2200      	movs	r2, #0
 800486e:	2120      	movs	r1, #32
 8004870:	0018      	movs	r0, r3
 8004872:	f7fc fa8a 	bl	8000d8a <HAL_GPIO_WritePin>
}
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004880:	b672      	cpsid	i
}
 8004882:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004884:	46c0      	nop			@ (mov r8, r8)
 8004886:	e7fd      	b.n	8004884 <Error_Handler+0x8>

08004888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488e:	4b0f      	ldr	r3, [pc, #60]	@ (80048cc <HAL_MspInit+0x44>)
 8004890:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004892:	4b0e      	ldr	r3, [pc, #56]	@ (80048cc <HAL_MspInit+0x44>)
 8004894:	2101      	movs	r1, #1
 8004896:	430a      	orrs	r2, r1
 8004898:	641a      	str	r2, [r3, #64]	@ 0x40
 800489a:	4b0c      	ldr	r3, [pc, #48]	@ (80048cc <HAL_MspInit+0x44>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	2201      	movs	r2, #1
 80048a0:	4013      	ands	r3, r2
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	4b09      	ldr	r3, [pc, #36]	@ (80048cc <HAL_MspInit+0x44>)
 80048a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048aa:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <HAL_MspInit+0x44>)
 80048ac:	2180      	movs	r1, #128	@ 0x80
 80048ae:	0549      	lsls	r1, r1, #21
 80048b0:	430a      	orrs	r2, r1
 80048b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048b4:	4b05      	ldr	r3, [pc, #20]	@ (80048cc <HAL_MspInit+0x44>)
 80048b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048b8:	2380      	movs	r3, #128	@ 0x80
 80048ba:	055b      	lsls	r3, r3, #21
 80048bc:	4013      	ands	r3, r2
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	40021000 	.word	0x40021000

080048d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80048d4:	46c0      	nop			@ (mov r8, r8)
 80048d6:	e7fd      	b.n	80048d4 <NMI_Handler+0x4>

080048d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048dc:	46c0      	nop			@ (mov r8, r8)
 80048de:	e7fd      	b.n	80048dc <HardFault_Handler+0x4>

080048e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048f8:	f7fb ff02 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048fc:	46c0      	nop			@ (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004910:	4b23      	ldr	r3, [pc, #140]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004912:	4a24      	ldr	r2, [pc, #144]	@ (80049a4 <MX_USART1_UART_Init+0x98>)
 8004914:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004916:	4b22      	ldr	r3, [pc, #136]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004918:	22e1      	movs	r2, #225	@ 0xe1
 800491a:	0252      	lsls	r2, r2, #9
 800491c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800491e:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004920:	2200      	movs	r2, #0
 8004922:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004924:	4b1e      	ldr	r3, [pc, #120]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004926:	2200      	movs	r2, #0
 8004928:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800492a:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 800492c:	2200      	movs	r2, #0
 800492e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004930:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004932:	220c      	movs	r2, #12
 8004934:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004936:	4b1a      	ldr	r3, [pc, #104]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004938:	2200      	movs	r2, #0
 800493a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800493c:	4b18      	ldr	r3, [pc, #96]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 800493e:	2200      	movs	r2, #0
 8004940:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004942:	4b17      	ldr	r3, [pc, #92]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004944:	2200      	movs	r2, #0
 8004946:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004948:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 800494a:	2200      	movs	r2, #0
 800494c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800494e:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004950:	2200      	movs	r2, #0
 8004952:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004954:	4b12      	ldr	r3, [pc, #72]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004956:	0018      	movs	r0, r3
 8004958:	f7fd ff98 	bl	800288c <HAL_UART_Init>
 800495c:	1e03      	subs	r3, r0, #0
 800495e:	d001      	beq.n	8004964 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004960:	f7ff ff8c 	bl	800487c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004964:	4b0e      	ldr	r3, [pc, #56]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004966:	2100      	movs	r1, #0
 8004968:	0018      	movs	r0, r3
 800496a:	f7fe fdf5 	bl	8003558 <HAL_UARTEx_SetTxFifoThreshold>
 800496e:	1e03      	subs	r3, r0, #0
 8004970:	d001      	beq.n	8004976 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004972:	f7ff ff83 	bl	800487c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004976:	4b0a      	ldr	r3, [pc, #40]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 8004978:	2100      	movs	r1, #0
 800497a:	0018      	movs	r0, r3
 800497c:	f7fe fe2c 	bl	80035d8 <HAL_UARTEx_SetRxFifoThreshold>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d001      	beq.n	8004988 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004984:	f7ff ff7a 	bl	800487c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004988:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <MX_USART1_UART_Init+0x94>)
 800498a:	0018      	movs	r0, r3
 800498c:	f7fe fdaa 	bl	80034e4 <HAL_UARTEx_DisableFifoMode>
 8004990:	1e03      	subs	r3, r0, #0
 8004992:	d001      	beq.n	8004998 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004994:	f7ff ff72 	bl	800487c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004998:	46c0      	nop			@ (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	200000a8 	.word	0x200000a8
 80049a4:	40013800 	.word	0x40013800

080049a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049ac:	4b23      	ldr	r3, [pc, #140]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049ae:	4a24      	ldr	r2, [pc, #144]	@ (8004a40 <MX_USART2_UART_Init+0x98>)
 80049b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80049b2:	4b22      	ldr	r3, [pc, #136]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049b4:	22e1      	movs	r2, #225	@ 0xe1
 80049b6:	0252      	lsls	r2, r2, #9
 80049b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049ba:	4b20      	ldr	r3, [pc, #128]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049bc:	2200      	movs	r2, #0
 80049be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049c0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049c6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049cc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049ce:	220c      	movs	r2, #12
 80049d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049d2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d8:	4b18      	ldr	r3, [pc, #96]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049da:	2200      	movs	r2, #0
 80049dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049de:	4b17      	ldr	r3, [pc, #92]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049e4:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049ea:	4b14      	ldr	r3, [pc, #80]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049f0:	4b12      	ldr	r3, [pc, #72]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7fd ff4a 	bl	800288c <HAL_UART_Init>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d001      	beq.n	8004a00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80049fc:	f7ff ff3e 	bl	800487c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a00:	4b0e      	ldr	r3, [pc, #56]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 8004a02:	2100      	movs	r1, #0
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fe fda7 	bl	8003558 <HAL_UARTEx_SetTxFifoThreshold>
 8004a0a:	1e03      	subs	r3, r0, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004a0e:	f7ff ff35 	bl	800487c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a12:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 8004a14:	2100      	movs	r1, #0
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7fe fdde 	bl	80035d8 <HAL_UARTEx_SetRxFifoThreshold>
 8004a1c:	1e03      	subs	r3, r0, #0
 8004a1e:	d001      	beq.n	8004a24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004a20:	f7ff ff2c 	bl	800487c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004a24:	4b05      	ldr	r3, [pc, #20]	@ (8004a3c <MX_USART2_UART_Init+0x94>)
 8004a26:	0018      	movs	r0, r3
 8004a28:	f7fe fd5c 	bl	80034e4 <HAL_UARTEx_DisableFifoMode>
 8004a2c:	1e03      	subs	r3, r0, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004a30:	f7ff ff24 	bl	800487c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a34:	46c0      	nop			@ (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	2000013c 	.word	0x2000013c
 8004a40:	40004400 	.word	0x40004400

08004a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b099      	sub	sp, #100	@ 0x64
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a4c:	234c      	movs	r3, #76	@ 0x4c
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	0018      	movs	r0, r3
 8004a52:	2314      	movs	r3, #20
 8004a54:	001a      	movs	r2, r3
 8004a56:	2100      	movs	r1, #0
 8004a58:	f000 f966 	bl	8004d28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a5c:	2418      	movs	r4, #24
 8004a5e:	193b      	adds	r3, r7, r4
 8004a60:	0018      	movs	r0, r3
 8004a62:	2334      	movs	r3, #52	@ 0x34
 8004a64:	001a      	movs	r2, r3
 8004a66:	2100      	movs	r1, #0
 8004a68:	f000 f95e 	bl	8004d28 <memset>
  if(uartHandle->Instance==USART1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a45      	ldr	r2, [pc, #276]	@ (8004b88 <HAL_UART_MspInit+0x144>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d13e      	bne.n	8004af4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004a76:	193b      	adds	r3, r7, r4
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004a7c:	193b      	adds	r3, r7, r4
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a82:	193b      	adds	r3, r7, r4
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7fd fd49 	bl	800251c <HAL_RCCEx_PeriphCLKConfig>
 8004a8a:	1e03      	subs	r3, r0, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004a8e:	f7ff fef5 	bl	800487c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a92:	4b3e      	ldr	r3, [pc, #248]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a96:	4b3d      	ldr	r3, [pc, #244]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004a98:	2180      	movs	r1, #128	@ 0x80
 8004a9a:	01c9      	lsls	r1, r1, #7
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aa4:	2380      	movs	r3, #128	@ 0x80
 8004aa6:	01db      	lsls	r3, r3, #7
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aae:	4b37      	ldr	r3, [pc, #220]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab2:	4b36      	ldr	r3, [pc, #216]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004aba:	4b34      	ldr	r3, [pc, #208]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abe:	2204      	movs	r2, #4
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8004ac6:	214c      	movs	r1, #76	@ 0x4c
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	2230      	movs	r2, #48	@ 0x30
 8004acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	2200      	movs	r2, #0
 8004ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae6:	187b      	adds	r3, r7, r1
 8004ae8:	4a29      	ldr	r2, [pc, #164]	@ (8004b90 <HAL_UART_MspInit+0x14c>)
 8004aea:	0019      	movs	r1, r3
 8004aec:	0010      	movs	r0, r2
 8004aee:	f7fb fefb 	bl	80008e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004af2:	e044      	b.n	8004b7e <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a26      	ldr	r2, [pc, #152]	@ (8004b94 <HAL_UART_MspInit+0x150>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d13f      	bne.n	8004b7e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004afe:	2118      	movs	r1, #24
 8004b00:	187b      	adds	r3, r7, r1
 8004b02:	2202      	movs	r2, #2
 8004b04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b06:	187b      	adds	r3, r7, r1
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b0c:	187b      	adds	r3, r7, r1
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7fd fd04 	bl	800251c <HAL_RCCEx_PeriphCLKConfig>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8004b18:	f7ff feb0 	bl	800487c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b20:	4b1a      	ldr	r3, [pc, #104]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004b22:	2180      	movs	r1, #128	@ 0x80
 8004b24:	0289      	lsls	r1, r1, #10
 8004b26:	430a      	orrs	r2, r1
 8004b28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b2a:	4b18      	ldr	r3, [pc, #96]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004b2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b2e:	2380      	movs	r3, #128	@ 0x80
 8004b30:	029b      	lsls	r3, r3, #10
 8004b32:	4013      	ands	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b38:	4b14      	ldr	r3, [pc, #80]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004b3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b3c:	4b13      	ldr	r3, [pc, #76]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004b3e:	2101      	movs	r1, #1
 8004b40:	430a      	orrs	r2, r1
 8004b42:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b44:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <HAL_UART_MspInit+0x148>)
 8004b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b48:	2201      	movs	r2, #1
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b50:	214c      	movs	r1, #76	@ 0x4c
 8004b52:	187b      	adds	r3, r7, r1
 8004b54:	220c      	movs	r2, #12
 8004b56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	2200      	movs	r2, #0
 8004b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b64:	187b      	adds	r3, r7, r1
 8004b66:	2200      	movs	r2, #0
 8004b68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004b6a:	187b      	adds	r3, r7, r1
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b70:	187a      	adds	r2, r7, r1
 8004b72:	23a0      	movs	r3, #160	@ 0xa0
 8004b74:	05db      	lsls	r3, r3, #23
 8004b76:	0011      	movs	r1, r2
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7fb feb5 	bl	80008e8 <HAL_GPIO_Init>
}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b019      	add	sp, #100	@ 0x64
 8004b84:	bd90      	pop	{r4, r7, pc}
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	40013800 	.word	0x40013800
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	50000800 	.word	0x50000800
 8004b94:	40004400 	.word	0x40004400

08004b98 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a11      	ldr	r2, [pc, #68]	@ (8004bec <HAL_UART_MspDeInit+0x54>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004baa:	4b11      	ldr	r3, [pc, #68]	@ (8004bf0 <HAL_UART_MspDeInit+0x58>)
 8004bac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bae:	4b10      	ldr	r3, [pc, #64]	@ (8004bf0 <HAL_UART_MspDeInit+0x58>)
 8004bb0:	4910      	ldr	r1, [pc, #64]	@ (8004bf4 <HAL_UART_MspDeInit+0x5c>)
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, ESP_TX_Pin|ESP_RX_Pin);
 8004bb6:	4b10      	ldr	r3, [pc, #64]	@ (8004bf8 <HAL_UART_MspDeInit+0x60>)
 8004bb8:	2130      	movs	r1, #48	@ 0x30
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7fb fff8 	bl	8000bb0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8004bc0:	e010      	b.n	8004be4 <HAL_UART_MspDeInit+0x4c>
  else if(uartHandle->Instance==USART2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8004bfc <HAL_UART_MspDeInit+0x64>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d10b      	bne.n	8004be4 <HAL_UART_MspDeInit+0x4c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004bcc:	4b08      	ldr	r3, [pc, #32]	@ (8004bf0 <HAL_UART_MspDeInit+0x58>)
 8004bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bd0:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <HAL_UART_MspDeInit+0x58>)
 8004bd2:	490b      	ldr	r1, [pc, #44]	@ (8004c00 <HAL_UART_MspDeInit+0x68>)
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004bd8:	23a0      	movs	r3, #160	@ 0xa0
 8004bda:	05db      	lsls	r3, r3, #23
 8004bdc:	210c      	movs	r1, #12
 8004bde:	0018      	movs	r0, r3
 8004be0:	f7fb ffe6 	bl	8000bb0 <HAL_GPIO_DeInit>
}
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	ffffbfff 	.word	0xffffbfff
 8004bf8:	50000800 	.word	0x50000800
 8004bfc:	40004400 	.word	0x40004400
 8004c00:	fffdffff 	.word	0xfffdffff

08004c04 <HAL_UART_ChangeSpeed>:

/* USER CODE BEGIN 1 */

void HAL_UART_ChangeSpeed(UART_HandleTypeDef *huart, uint32_t baudrate){
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]

	HAL_UART_DeInit(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7fd fe91 	bl	8002938 <HAL_UART_DeInit>

	huart->Init.BaudRate = baudrate;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	605a      	str	r2, [r3, #4]

	if(HAL_UART_Init(huart)!=HAL_OK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7fd fe34 	bl	800288c <HAL_UART_Init>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_UART_ChangeSpeed+0x28>
		Error_Handler();
 8004c28:	f7ff fe28 	bl	800487c <Error_Handler>

}
 8004c2c:	46c0      	nop			@ (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c34:	480d      	ldr	r0, [pc, #52]	@ (8004c6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c38:	f7ff fe63 	bl	8004902 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c3c:	480c      	ldr	r0, [pc, #48]	@ (8004c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c3e:	490d      	ldr	r1, [pc, #52]	@ (8004c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c40:	4a0d      	ldr	r2, [pc, #52]	@ (8004c78 <LoopForever+0xe>)
  movs r3, #0
 8004c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c44:	e002      	b.n	8004c4c <LoopCopyDataInit>

08004c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c4a:	3304      	adds	r3, #4

08004c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c50:	d3f9      	bcc.n	8004c46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c52:	4a0a      	ldr	r2, [pc, #40]	@ (8004c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c54:	4c0a      	ldr	r4, [pc, #40]	@ (8004c80 <LoopForever+0x16>)
  movs r3, #0
 8004c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c58:	e001      	b.n	8004c5e <LoopFillZerobss>

08004c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c5c:	3204      	adds	r2, #4

08004c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c60:	d3fb      	bcc.n	8004c5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004c62:	f000 f869 	bl	8004d38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004c66:	f7ff fca3 	bl	80045b0 <main>

08004c6a <LoopForever>:

LoopForever:
  b LoopForever
 8004c6a:	e7fe      	b.n	8004c6a <LoopForever>
  ldr   r0, =_estack
 8004c6c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004c78:	08004ebc 	.word	0x08004ebc
  ldr r2, =_sbss
 8004c7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004c80:	200001d0 	.word	0x200001d0

08004c84 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c84:	e7fe      	b.n	8004c84 <ADC1_COMP_IRQHandler>

08004c86 <__itoa>:
 8004c86:	1e93      	subs	r3, r2, #2
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	000c      	movs	r4, r1
 8004c8c:	2b22      	cmp	r3, #34	@ 0x22
 8004c8e:	d904      	bls.n	8004c9a <__itoa+0x14>
 8004c90:	2300      	movs	r3, #0
 8004c92:	001c      	movs	r4, r3
 8004c94:	700b      	strb	r3, [r1, #0]
 8004c96:	0020      	movs	r0, r4
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	2a0a      	cmp	r2, #10
 8004c9c:	d109      	bne.n	8004cb2 <__itoa+0x2c>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	da07      	bge.n	8004cb2 <__itoa+0x2c>
 8004ca2:	232d      	movs	r3, #45	@ 0x2d
 8004ca4:	700b      	strb	r3, [r1, #0]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4240      	negs	r0, r0
 8004caa:	1861      	adds	r1, r4, r1
 8004cac:	f000 f808 	bl	8004cc0 <__utoa>
 8004cb0:	e7f1      	b.n	8004c96 <__itoa+0x10>
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	e7f9      	b.n	8004caa <__itoa+0x24>

08004cb6 <itoa>:
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	f7ff ffe5 	bl	8004c86 <__itoa>
 8004cbc:	bd10      	pop	{r4, pc}
	...

08004cc0 <__utoa>:
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	000c      	movs	r4, r1
 8004cc4:	0016      	movs	r6, r2
 8004cc6:	b08d      	sub	sp, #52	@ 0x34
 8004cc8:	2225      	movs	r2, #37	@ 0x25
 8004cca:	0007      	movs	r7, r0
 8004ccc:	4915      	ldr	r1, [pc, #84]	@ (8004d24 <__utoa+0x64>)
 8004cce:	a802      	add	r0, sp, #8
 8004cd0:	f000 f856 	bl	8004d80 <memcpy>
 8004cd4:	1e62      	subs	r2, r4, #1
 8004cd6:	1eb3      	subs	r3, r6, #2
 8004cd8:	2500      	movs	r5, #0
 8004cda:	9201      	str	r2, [sp, #4]
 8004cdc:	2b22      	cmp	r3, #34	@ 0x22
 8004cde:	d904      	bls.n	8004cea <__utoa+0x2a>
 8004ce0:	7025      	strb	r5, [r4, #0]
 8004ce2:	002c      	movs	r4, r5
 8004ce4:	0020      	movs	r0, r4
 8004ce6:	b00d      	add	sp, #52	@ 0x34
 8004ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cea:	0038      	movs	r0, r7
 8004cec:	0031      	movs	r1, r6
 8004cee:	f7fb fa97 	bl	8000220 <__aeabi_uidivmod>
 8004cf2:	000b      	movs	r3, r1
 8004cf4:	aa02      	add	r2, sp, #8
 8004cf6:	5cd3      	ldrb	r3, [r2, r3]
 8004cf8:	9a01      	ldr	r2, [sp, #4]
 8004cfa:	0029      	movs	r1, r5
 8004cfc:	3501      	adds	r5, #1
 8004cfe:	5553      	strb	r3, [r2, r5]
 8004d00:	003b      	movs	r3, r7
 8004d02:	0007      	movs	r7, r0
 8004d04:	429e      	cmp	r6, r3
 8004d06:	d9f0      	bls.n	8004cea <__utoa+0x2a>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	0022      	movs	r2, r4
 8004d0c:	5563      	strb	r3, [r4, r5]
 8004d0e:	000b      	movs	r3, r1
 8004d10:	1ac8      	subs	r0, r1, r3
 8004d12:	4283      	cmp	r3, r0
 8004d14:	dde6      	ble.n	8004ce4 <__utoa+0x24>
 8004d16:	7810      	ldrb	r0, [r2, #0]
 8004d18:	5ce5      	ldrb	r5, [r4, r3]
 8004d1a:	7015      	strb	r5, [r2, #0]
 8004d1c:	54e0      	strb	r0, [r4, r3]
 8004d1e:	3201      	adds	r2, #1
 8004d20:	3b01      	subs	r3, #1
 8004d22:	e7f5      	b.n	8004d10 <__utoa+0x50>
 8004d24:	08004e84 	.word	0x08004e84

08004d28 <memset>:
 8004d28:	0003      	movs	r3, r0
 8004d2a:	1882      	adds	r2, r0, r2
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <memset+0xa>
 8004d30:	4770      	bx	lr
 8004d32:	7019      	strb	r1, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	e7f9      	b.n	8004d2c <memset+0x4>

08004d38 <__libc_init_array>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	4c0c      	ldr	r4, [pc, #48]	@ (8004d70 <__libc_init_array+0x38>)
 8004d3e:	4d0d      	ldr	r5, [pc, #52]	@ (8004d74 <__libc_init_array+0x3c>)
 8004d40:	1b64      	subs	r4, r4, r5
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	42a6      	cmp	r6, r4
 8004d46:	d109      	bne.n	8004d5c <__libc_init_array+0x24>
 8004d48:	2600      	movs	r6, #0
 8004d4a:	f000 f823 	bl	8004d94 <_init>
 8004d4e:	4c0a      	ldr	r4, [pc, #40]	@ (8004d78 <__libc_init_array+0x40>)
 8004d50:	4d0a      	ldr	r5, [pc, #40]	@ (8004d7c <__libc_init_array+0x44>)
 8004d52:	1b64      	subs	r4, r4, r5
 8004d54:	10a4      	asrs	r4, r4, #2
 8004d56:	42a6      	cmp	r6, r4
 8004d58:	d105      	bne.n	8004d66 <__libc_init_array+0x2e>
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	00b3      	lsls	r3, r6, #2
 8004d5e:	58eb      	ldr	r3, [r5, r3]
 8004d60:	4798      	blx	r3
 8004d62:	3601      	adds	r6, #1
 8004d64:	e7ee      	b.n	8004d44 <__libc_init_array+0xc>
 8004d66:	00b3      	lsls	r3, r6, #2
 8004d68:	58eb      	ldr	r3, [r5, r3]
 8004d6a:	4798      	blx	r3
 8004d6c:	3601      	adds	r6, #1
 8004d6e:	e7f2      	b.n	8004d56 <__libc_init_array+0x1e>
 8004d70:	08004eb4 	.word	0x08004eb4
 8004d74:	08004eb4 	.word	0x08004eb4
 8004d78:	08004eb8 	.word	0x08004eb8
 8004d7c:	08004eb4 	.word	0x08004eb4

08004d80 <memcpy>:
 8004d80:	2300      	movs	r3, #0
 8004d82:	b510      	push	{r4, lr}
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d100      	bne.n	8004d8a <memcpy+0xa>
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	5ccc      	ldrb	r4, [r1, r3]
 8004d8c:	54c4      	strb	r4, [r0, r3]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	e7f8      	b.n	8004d84 <memcpy+0x4>
	...

08004d94 <_init>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr

08004da0 <_fini>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr
