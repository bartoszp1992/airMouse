
airMouse-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009444  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08009500  08009500  0000a500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009670  08009670  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  08009670  08009670  0000a670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009678  08009678  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009678  08009678  0000a678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009680  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000070  080096f0  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080096f0  0000b438  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e39  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003142  00000000  00000000  0001eed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00022018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be2  00000000  00000000  00022f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ade6  00000000  00000000  00023b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151ec  00000000  00000000  0003e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a54ae  00000000  00000000  00053b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8fe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c88  00000000  00000000  000f9028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000fccb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080094e8 	.word	0x080094e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080094e8 	.word	0x080094e8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0010      	movs	r0, r2
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	0019      	movs	r1, r3
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f001 f855 	bl	80014c0 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 ff95 	bl	8001350 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 f847 	bl	80014c0 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f83d 	bl	80014c0 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffbf 	bl	80013d8 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffb5 	bl	80013d8 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_uldivmod>:
 800047c:	2b00      	cmp	r3, #0
 800047e:	d111      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000480:	2a00      	cmp	r2, #0
 8000482:	d10f      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000484:	2900      	cmp	r1, #0
 8000486:	d100      	bne.n	800048a <__aeabi_uldivmod+0xe>
 8000488:	2800      	cmp	r0, #0
 800048a:	d002      	beq.n	8000492 <__aeabi_uldivmod+0x16>
 800048c:	2100      	movs	r1, #0
 800048e:	43c9      	mvns	r1, r1
 8000490:	0008      	movs	r0, r1
 8000492:	b407      	push	{r0, r1, r2}
 8000494:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <__aeabi_uldivmod+0x24>)
 8000496:	a102      	add	r1, pc, #8	@ (adr r1, 80004a0 <__aeabi_uldivmod+0x24>)
 8000498:	1840      	adds	r0, r0, r1
 800049a:	9002      	str	r0, [sp, #8]
 800049c:	bd03      	pop	{r0, r1, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	ffffff5d 	.word	0xffffff5d
 80004a4:	b403      	push	{r0, r1}
 80004a6:	4668      	mov	r0, sp
 80004a8:	b501      	push	{r0, lr}
 80004aa:	9802      	ldr	r0, [sp, #8]
 80004ac:	f000 f806 	bl	80004bc <__udivmoddi4>
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	469e      	mov	lr, r3
 80004b4:	b002      	add	sp, #8
 80004b6:	bc0c      	pop	{r2, r3}
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__udivmoddi4>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	4657      	mov	r7, sl
 80004c0:	464e      	mov	r6, r9
 80004c2:	4645      	mov	r5, r8
 80004c4:	46de      	mov	lr, fp
 80004c6:	b5e0      	push	{r5, r6, r7, lr}
 80004c8:	0004      	movs	r4, r0
 80004ca:	000d      	movs	r5, r1
 80004cc:	4692      	mov	sl, r2
 80004ce:	4699      	mov	r9, r3
 80004d0:	b083      	sub	sp, #12
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d830      	bhi.n	8000538 <__udivmoddi4+0x7c>
 80004d6:	d02d      	beq.n	8000534 <__udivmoddi4+0x78>
 80004d8:	4649      	mov	r1, r9
 80004da:	4650      	mov	r0, sl
 80004dc:	f001 ff70 	bl	80023c0 <__clzdi2>
 80004e0:	0029      	movs	r1, r5
 80004e2:	0006      	movs	r6, r0
 80004e4:	0020      	movs	r0, r4
 80004e6:	f001 ff6b 	bl	80023c0 <__clzdi2>
 80004ea:	1a33      	subs	r3, r6, r0
 80004ec:	4698      	mov	r8, r3
 80004ee:	3b20      	subs	r3, #32
 80004f0:	d434      	bmi.n	800055c <__udivmoddi4+0xa0>
 80004f2:	469b      	mov	fp, r3
 80004f4:	4653      	mov	r3, sl
 80004f6:	465a      	mov	r2, fp
 80004f8:	4093      	lsls	r3, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	001f      	movs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d83b      	bhi.n	8000580 <__udivmoddi4+0xc4>
 8000508:	42af      	cmp	r7, r5
 800050a:	d100      	bne.n	800050e <__udivmoddi4+0x52>
 800050c:	e079      	b.n	8000602 <__udivmoddi4+0x146>
 800050e:	465b      	mov	r3, fp
 8000510:	1ba4      	subs	r4, r4, r6
 8000512:	41bd      	sbcs	r5, r7
 8000514:	2b00      	cmp	r3, #0
 8000516:	da00      	bge.n	800051a <__udivmoddi4+0x5e>
 8000518:	e076      	b.n	8000608 <__udivmoddi4+0x14c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	465a      	mov	r2, fp
 8000526:	4093      	lsls	r3, r2
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	4642      	mov	r2, r8
 800052e:	4093      	lsls	r3, r2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	e029      	b.n	8000588 <__udivmoddi4+0xcc>
 8000534:	4282      	cmp	r2, r0
 8000536:	d9cf      	bls.n	80004d8 <__udivmoddi4+0x1c>
 8000538:	2200      	movs	r2, #0
 800053a:	2300      	movs	r3, #0
 800053c:	9200      	str	r2, [sp, #0]
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <__udivmoddi4+0x8e>
 8000546:	601c      	str	r4, [r3, #0]
 8000548:	605d      	str	r5, [r3, #4]
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	b003      	add	sp, #12
 8000550:	bcf0      	pop	{r4, r5, r6, r7}
 8000552:	46bb      	mov	fp, r7
 8000554:	46b2      	mov	sl, r6
 8000556:	46a9      	mov	r9, r5
 8000558:	46a0      	mov	r8, r4
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055c:	4642      	mov	r2, r8
 800055e:	469b      	mov	fp, r3
 8000560:	2320      	movs	r3, #32
 8000562:	1a9b      	subs	r3, r3, r2
 8000564:	4652      	mov	r2, sl
 8000566:	40da      	lsrs	r2, r3
 8000568:	4641      	mov	r1, r8
 800056a:	0013      	movs	r3, r2
 800056c:	464a      	mov	r2, r9
 800056e:	408a      	lsls	r2, r1
 8000570:	0017      	movs	r7, r2
 8000572:	4642      	mov	r2, r8
 8000574:	431f      	orrs	r7, r3
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	001e      	movs	r6, r3
 800057c:	42af      	cmp	r7, r5
 800057e:	d9c3      	bls.n	8000508 <__udivmoddi4+0x4c>
 8000580:	2200      	movs	r2, #0
 8000582:	2300      	movs	r3, #0
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	4643      	mov	r3, r8
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0d8      	beq.n	8000540 <__udivmoddi4+0x84>
 800058e:	07fb      	lsls	r3, r7, #31
 8000590:	0872      	lsrs	r2, r6, #1
 8000592:	431a      	orrs	r2, r3
 8000594:	4646      	mov	r6, r8
 8000596:	087b      	lsrs	r3, r7, #1
 8000598:	e00e      	b.n	80005b8 <__udivmoddi4+0xfc>
 800059a:	42ab      	cmp	r3, r5
 800059c:	d101      	bne.n	80005a2 <__udivmoddi4+0xe6>
 800059e:	42a2      	cmp	r2, r4
 80005a0:	d80c      	bhi.n	80005bc <__udivmoddi4+0x100>
 80005a2:	1aa4      	subs	r4, r4, r2
 80005a4:	419d      	sbcs	r5, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2100      	movs	r1, #0
 80005ae:	3e01      	subs	r6, #1
 80005b0:	1824      	adds	r4, r4, r0
 80005b2:	414d      	adcs	r5, r1
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d006      	beq.n	80005c6 <__udivmoddi4+0x10a>
 80005b8:	42ab      	cmp	r3, r5
 80005ba:	d9ee      	bls.n	800059a <__udivmoddi4+0xde>
 80005bc:	3e01      	subs	r6, #1
 80005be:	1924      	adds	r4, r4, r4
 80005c0:	416d      	adcs	r5, r5
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d1f8      	bne.n	80005b8 <__udivmoddi4+0xfc>
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	465b      	mov	r3, fp
 80005cc:	1900      	adds	r0, r0, r4
 80005ce:	4169      	adcs	r1, r5
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db24      	blt.n	800061e <__udivmoddi4+0x162>
 80005d4:	002b      	movs	r3, r5
 80005d6:	465a      	mov	r2, fp
 80005d8:	4644      	mov	r4, r8
 80005da:	40d3      	lsrs	r3, r2
 80005dc:	002a      	movs	r2, r5
 80005de:	40e2      	lsrs	r2, r4
 80005e0:	001c      	movs	r4, r3
 80005e2:	465b      	mov	r3, fp
 80005e4:	0015      	movs	r5, r2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db2a      	blt.n	8000640 <__udivmoddi4+0x184>
 80005ea:	0026      	movs	r6, r4
 80005ec:	409e      	lsls	r6, r3
 80005ee:	0033      	movs	r3, r6
 80005f0:	0026      	movs	r6, r4
 80005f2:	4647      	mov	r7, r8
 80005f4:	40be      	lsls	r6, r7
 80005f6:	0032      	movs	r2, r6
 80005f8:	1a80      	subs	r0, r0, r2
 80005fa:	4199      	sbcs	r1, r3
 80005fc:	9000      	str	r0, [sp, #0]
 80005fe:	9101      	str	r1, [sp, #4]
 8000600:	e79e      	b.n	8000540 <__udivmoddi4+0x84>
 8000602:	42a3      	cmp	r3, r4
 8000604:	d8bc      	bhi.n	8000580 <__udivmoddi4+0xc4>
 8000606:	e782      	b.n	800050e <__udivmoddi4+0x52>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	2100      	movs	r1, #0
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	2200      	movs	r2, #0
 8000612:	9100      	str	r1, [sp, #0]
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	2201      	movs	r2, #1
 8000618:	40da      	lsrs	r2, r3
 800061a:	9201      	str	r2, [sp, #4]
 800061c:	e785      	b.n	800052a <__udivmoddi4+0x6e>
 800061e:	4642      	mov	r2, r8
 8000620:	2320      	movs	r3, #32
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	002a      	movs	r2, r5
 8000626:	4646      	mov	r6, r8
 8000628:	409a      	lsls	r2, r3
 800062a:	0023      	movs	r3, r4
 800062c:	40f3      	lsrs	r3, r6
 800062e:	4644      	mov	r4, r8
 8000630:	4313      	orrs	r3, r2
 8000632:	002a      	movs	r2, r5
 8000634:	40e2      	lsrs	r2, r4
 8000636:	001c      	movs	r4, r3
 8000638:	465b      	mov	r3, fp
 800063a:	0015      	movs	r5, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	dad4      	bge.n	80005ea <__udivmoddi4+0x12e>
 8000640:	4642      	mov	r2, r8
 8000642:	002f      	movs	r7, r5
 8000644:	2320      	movs	r3, #32
 8000646:	0026      	movs	r6, r4
 8000648:	4097      	lsls	r7, r2
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	40de      	lsrs	r6, r3
 800064e:	003b      	movs	r3, r7
 8000650:	4333      	orrs	r3, r6
 8000652:	e7cd      	b.n	80005f0 <__udivmoddi4+0x134>

08000654 <__aeabi_dadd>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	4657      	mov	r7, sl
 8000658:	464e      	mov	r6, r9
 800065a:	4645      	mov	r5, r8
 800065c:	46de      	mov	lr, fp
 800065e:	b5e0      	push	{r5, r6, r7, lr}
 8000660:	b083      	sub	sp, #12
 8000662:	9000      	str	r0, [sp, #0]
 8000664:	9101      	str	r1, [sp, #4]
 8000666:	030c      	lsls	r4, r1, #12
 8000668:	004f      	lsls	r7, r1, #1
 800066a:	0fce      	lsrs	r6, r1, #31
 800066c:	0a61      	lsrs	r1, r4, #9
 800066e:	9c00      	ldr	r4, [sp, #0]
 8000670:	031d      	lsls	r5, r3, #12
 8000672:	0f64      	lsrs	r4, r4, #29
 8000674:	430c      	orrs	r4, r1
 8000676:	9900      	ldr	r1, [sp, #0]
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	00c8      	lsls	r0, r1, #3
 800067e:	0059      	lsls	r1, r3, #1
 8000680:	0d4b      	lsrs	r3, r1, #21
 8000682:	4699      	mov	r9, r3
 8000684:	9a00      	ldr	r2, [sp, #0]
 8000686:	9b01      	ldr	r3, [sp, #4]
 8000688:	0a6d      	lsrs	r5, r5, #9
 800068a:	0fd9      	lsrs	r1, r3, #31
 800068c:	0f53      	lsrs	r3, r2, #29
 800068e:	432b      	orrs	r3, r5
 8000690:	469a      	mov	sl, r3
 8000692:	9b00      	ldr	r3, [sp, #0]
 8000694:	0d7f      	lsrs	r7, r7, #21
 8000696:	00da      	lsls	r2, r3, #3
 8000698:	4694      	mov	ip, r2
 800069a:	464a      	mov	r2, r9
 800069c:	46b0      	mov	r8, r6
 800069e:	1aba      	subs	r2, r7, r2
 80006a0:	428e      	cmp	r6, r1
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x52>
 80006a4:	e0b0      	b.n	8000808 <__aeabi_dadd+0x1b4>
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	dc00      	bgt.n	80006ac <__aeabi_dadd+0x58>
 80006aa:	e078      	b.n	800079e <__aeabi_dadd+0x14a>
 80006ac:	4649      	mov	r1, r9
 80006ae:	2900      	cmp	r1, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x60>
 80006b2:	e0e9      	b.n	8000888 <__aeabi_dadd+0x234>
 80006b4:	49c9      	ldr	r1, [pc, #804]	@ (80009dc <__aeabi_dadd+0x388>)
 80006b6:	428f      	cmp	r7, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x68>
 80006ba:	e195      	b.n	80009e8 <__aeabi_dadd+0x394>
 80006bc:	2501      	movs	r5, #1
 80006be:	2a38      	cmp	r2, #56	@ 0x38
 80006c0:	dc16      	bgt.n	80006f0 <__aeabi_dadd+0x9c>
 80006c2:	2180      	movs	r1, #128	@ 0x80
 80006c4:	4653      	mov	r3, sl
 80006c6:	0409      	lsls	r1, r1, #16
 80006c8:	430b      	orrs	r3, r1
 80006ca:	469a      	mov	sl, r3
 80006cc:	2a1f      	cmp	r2, #31
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_dadd+0x7e>
 80006d0:	e1e7      	b.n	8000aa2 <__aeabi_dadd+0x44e>
 80006d2:	2120      	movs	r1, #32
 80006d4:	4655      	mov	r5, sl
 80006d6:	1a8b      	subs	r3, r1, r2
 80006d8:	4661      	mov	r1, ip
 80006da:	409d      	lsls	r5, r3
 80006dc:	40d1      	lsrs	r1, r2
 80006de:	430d      	orrs	r5, r1
 80006e0:	4661      	mov	r1, ip
 80006e2:	4099      	lsls	r1, r3
 80006e4:	1e4b      	subs	r3, r1, #1
 80006e6:	4199      	sbcs	r1, r3
 80006e8:	4653      	mov	r3, sl
 80006ea:	40d3      	lsrs	r3, r2
 80006ec:	430d      	orrs	r5, r1
 80006ee:	1ae4      	subs	r4, r4, r3
 80006f0:	1b45      	subs	r5, r0, r5
 80006f2:	42a8      	cmp	r0, r5
 80006f4:	4180      	sbcs	r0, r0
 80006f6:	4240      	negs	r0, r0
 80006f8:	1a24      	subs	r4, r4, r0
 80006fa:	0223      	lsls	r3, r4, #8
 80006fc:	d400      	bmi.n	8000700 <__aeabi_dadd+0xac>
 80006fe:	e10f      	b.n	8000920 <__aeabi_dadd+0x2cc>
 8000700:	0264      	lsls	r4, r4, #9
 8000702:	0a64      	lsrs	r4, r4, #9
 8000704:	2c00      	cmp	r4, #0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0xb6>
 8000708:	e139      	b.n	800097e <__aeabi_dadd+0x32a>
 800070a:	0020      	movs	r0, r4
 800070c:	f001 fe3a 	bl	8002384 <__clzsi2>
 8000710:	0003      	movs	r3, r0
 8000712:	3b08      	subs	r3, #8
 8000714:	2120      	movs	r1, #32
 8000716:	0028      	movs	r0, r5
 8000718:	1aca      	subs	r2, r1, r3
 800071a:	40d0      	lsrs	r0, r2
 800071c:	409c      	lsls	r4, r3
 800071e:	0002      	movs	r2, r0
 8000720:	409d      	lsls	r5, r3
 8000722:	4322      	orrs	r2, r4
 8000724:	429f      	cmp	r7, r3
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0xd6>
 8000728:	e173      	b.n	8000a12 <__aeabi_dadd+0x3be>
 800072a:	1bd8      	subs	r0, r3, r7
 800072c:	3001      	adds	r0, #1
 800072e:	1a09      	subs	r1, r1, r0
 8000730:	002c      	movs	r4, r5
 8000732:	408d      	lsls	r5, r1
 8000734:	40c4      	lsrs	r4, r0
 8000736:	1e6b      	subs	r3, r5, #1
 8000738:	419d      	sbcs	r5, r3
 800073a:	0013      	movs	r3, r2
 800073c:	40c2      	lsrs	r2, r0
 800073e:	408b      	lsls	r3, r1
 8000740:	4325      	orrs	r5, r4
 8000742:	2700      	movs	r7, #0
 8000744:	0014      	movs	r4, r2
 8000746:	431d      	orrs	r5, r3
 8000748:	076b      	lsls	r3, r5, #29
 800074a:	d009      	beq.n	8000760 <__aeabi_dadd+0x10c>
 800074c:	230f      	movs	r3, #15
 800074e:	402b      	ands	r3, r5
 8000750:	2b04      	cmp	r3, #4
 8000752:	d005      	beq.n	8000760 <__aeabi_dadd+0x10c>
 8000754:	1d2b      	adds	r3, r5, #4
 8000756:	42ab      	cmp	r3, r5
 8000758:	41ad      	sbcs	r5, r5
 800075a:	426d      	negs	r5, r5
 800075c:	1964      	adds	r4, r4, r5
 800075e:	001d      	movs	r5, r3
 8000760:	0223      	lsls	r3, r4, #8
 8000762:	d400      	bmi.n	8000766 <__aeabi_dadd+0x112>
 8000764:	e12d      	b.n	80009c2 <__aeabi_dadd+0x36e>
 8000766:	4a9d      	ldr	r2, [pc, #628]	@ (80009dc <__aeabi_dadd+0x388>)
 8000768:	3701      	adds	r7, #1
 800076a:	4297      	cmp	r7, r2
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0x11c>
 800076e:	e0d3      	b.n	8000918 <__aeabi_dadd+0x2c4>
 8000770:	4646      	mov	r6, r8
 8000772:	499b      	ldr	r1, [pc, #620]	@ (80009e0 <__aeabi_dadd+0x38c>)
 8000774:	08ed      	lsrs	r5, r5, #3
 8000776:	4021      	ands	r1, r4
 8000778:	074a      	lsls	r2, r1, #29
 800077a:	432a      	orrs	r2, r5
 800077c:	057c      	lsls	r4, r7, #21
 800077e:	024d      	lsls	r5, r1, #9
 8000780:	0b2d      	lsrs	r5, r5, #12
 8000782:	0d64      	lsrs	r4, r4, #21
 8000784:	0524      	lsls	r4, r4, #20
 8000786:	432c      	orrs	r4, r5
 8000788:	07f6      	lsls	r6, r6, #31
 800078a:	4334      	orrs	r4, r6
 800078c:	0010      	movs	r0, r2
 800078e:	0021      	movs	r1, r4
 8000790:	b003      	add	sp, #12
 8000792:	bcf0      	pop	{r4, r5, r6, r7}
 8000794:	46bb      	mov	fp, r7
 8000796:	46b2      	mov	sl, r6
 8000798:	46a9      	mov	r9, r5
 800079a:	46a0      	mov	r8, r4
 800079c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079e:	2a00      	cmp	r2, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x150>
 80007a2:	e084      	b.n	80008ae <__aeabi_dadd+0x25a>
 80007a4:	464a      	mov	r2, r9
 80007a6:	1bd2      	subs	r2, r2, r7
 80007a8:	2f00      	cmp	r7, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_dadd+0x15a>
 80007ac:	e16d      	b.n	8000a8a <__aeabi_dadd+0x436>
 80007ae:	0025      	movs	r5, r4
 80007b0:	4305      	orrs	r5, r0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x162>
 80007b4:	e127      	b.n	8000a06 <__aeabi_dadd+0x3b2>
 80007b6:	1e56      	subs	r6, r2, #1
 80007b8:	2a01      	cmp	r2, #1
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x16a>
 80007bc:	e23b      	b.n	8000c36 <__aeabi_dadd+0x5e2>
 80007be:	4d87      	ldr	r5, [pc, #540]	@ (80009dc <__aeabi_dadd+0x388>)
 80007c0:	42aa      	cmp	r2, r5
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x172>
 80007c4:	e26a      	b.n	8000c9c <__aeabi_dadd+0x648>
 80007c6:	2501      	movs	r5, #1
 80007c8:	2e38      	cmp	r6, #56	@ 0x38
 80007ca:	dc12      	bgt.n	80007f2 <__aeabi_dadd+0x19e>
 80007cc:	0032      	movs	r2, r6
 80007ce:	2a1f      	cmp	r2, #31
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_dadd+0x180>
 80007d2:	e1f8      	b.n	8000bc6 <__aeabi_dadd+0x572>
 80007d4:	2620      	movs	r6, #32
 80007d6:	0025      	movs	r5, r4
 80007d8:	1ab6      	subs	r6, r6, r2
 80007da:	0007      	movs	r7, r0
 80007dc:	4653      	mov	r3, sl
 80007de:	40b0      	lsls	r0, r6
 80007e0:	40d4      	lsrs	r4, r2
 80007e2:	40b5      	lsls	r5, r6
 80007e4:	40d7      	lsrs	r7, r2
 80007e6:	1e46      	subs	r6, r0, #1
 80007e8:	41b0      	sbcs	r0, r6
 80007ea:	1b1b      	subs	r3, r3, r4
 80007ec:	469a      	mov	sl, r3
 80007ee:	433d      	orrs	r5, r7
 80007f0:	4305      	orrs	r5, r0
 80007f2:	4662      	mov	r2, ip
 80007f4:	1b55      	subs	r5, r2, r5
 80007f6:	45ac      	cmp	ip, r5
 80007f8:	4192      	sbcs	r2, r2
 80007fa:	4653      	mov	r3, sl
 80007fc:	4252      	negs	r2, r2
 80007fe:	000e      	movs	r6, r1
 8000800:	464f      	mov	r7, r9
 8000802:	4688      	mov	r8, r1
 8000804:	1a9c      	subs	r4, r3, r2
 8000806:	e778      	b.n	80006fa <__aeabi_dadd+0xa6>
 8000808:	2a00      	cmp	r2, #0
 800080a:	dc00      	bgt.n	800080e <__aeabi_dadd+0x1ba>
 800080c:	e08e      	b.n	800092c <__aeabi_dadd+0x2d8>
 800080e:	4649      	mov	r1, r9
 8000810:	2900      	cmp	r1, #0
 8000812:	d175      	bne.n	8000900 <__aeabi_dadd+0x2ac>
 8000814:	4661      	mov	r1, ip
 8000816:	4653      	mov	r3, sl
 8000818:	4319      	orrs	r1, r3
 800081a:	d100      	bne.n	800081e <__aeabi_dadd+0x1ca>
 800081c:	e0f6      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 800081e:	1e51      	subs	r1, r2, #1
 8000820:	2a01      	cmp	r2, #1
 8000822:	d100      	bne.n	8000826 <__aeabi_dadd+0x1d2>
 8000824:	e191      	b.n	8000b4a <__aeabi_dadd+0x4f6>
 8000826:	4d6d      	ldr	r5, [pc, #436]	@ (80009dc <__aeabi_dadd+0x388>)
 8000828:	42aa      	cmp	r2, r5
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x1da>
 800082c:	e0dc      	b.n	80009e8 <__aeabi_dadd+0x394>
 800082e:	2501      	movs	r5, #1
 8000830:	2938      	cmp	r1, #56	@ 0x38
 8000832:	dc14      	bgt.n	800085e <__aeabi_dadd+0x20a>
 8000834:	000a      	movs	r2, r1
 8000836:	2a1f      	cmp	r2, #31
 8000838:	dd00      	ble.n	800083c <__aeabi_dadd+0x1e8>
 800083a:	e1a2      	b.n	8000b82 <__aeabi_dadd+0x52e>
 800083c:	2120      	movs	r1, #32
 800083e:	4653      	mov	r3, sl
 8000840:	1a89      	subs	r1, r1, r2
 8000842:	408b      	lsls	r3, r1
 8000844:	001d      	movs	r5, r3
 8000846:	4663      	mov	r3, ip
 8000848:	40d3      	lsrs	r3, r2
 800084a:	431d      	orrs	r5, r3
 800084c:	4663      	mov	r3, ip
 800084e:	408b      	lsls	r3, r1
 8000850:	0019      	movs	r1, r3
 8000852:	1e4b      	subs	r3, r1, #1
 8000854:	4199      	sbcs	r1, r3
 8000856:	4653      	mov	r3, sl
 8000858:	40d3      	lsrs	r3, r2
 800085a:	430d      	orrs	r5, r1
 800085c:	18e4      	adds	r4, r4, r3
 800085e:	182d      	adds	r5, r5, r0
 8000860:	4285      	cmp	r5, r0
 8000862:	4180      	sbcs	r0, r0
 8000864:	4240      	negs	r0, r0
 8000866:	1824      	adds	r4, r4, r0
 8000868:	0223      	lsls	r3, r4, #8
 800086a:	d559      	bpl.n	8000920 <__aeabi_dadd+0x2cc>
 800086c:	4b5b      	ldr	r3, [pc, #364]	@ (80009dc <__aeabi_dadd+0x388>)
 800086e:	3701      	adds	r7, #1
 8000870:	429f      	cmp	r7, r3
 8000872:	d051      	beq.n	8000918 <__aeabi_dadd+0x2c4>
 8000874:	2101      	movs	r1, #1
 8000876:	4b5a      	ldr	r3, [pc, #360]	@ (80009e0 <__aeabi_dadd+0x38c>)
 8000878:	086a      	lsrs	r2, r5, #1
 800087a:	401c      	ands	r4, r3
 800087c:	4029      	ands	r1, r5
 800087e:	430a      	orrs	r2, r1
 8000880:	07e5      	lsls	r5, r4, #31
 8000882:	4315      	orrs	r5, r2
 8000884:	0864      	lsrs	r4, r4, #1
 8000886:	e75f      	b.n	8000748 <__aeabi_dadd+0xf4>
 8000888:	4661      	mov	r1, ip
 800088a:	4653      	mov	r3, sl
 800088c:	4319      	orrs	r1, r3
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x23e>
 8000890:	e0bc      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 8000892:	1e51      	subs	r1, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x246>
 8000898:	e164      	b.n	8000b64 <__aeabi_dadd+0x510>
 800089a:	4d50      	ldr	r5, [pc, #320]	@ (80009dc <__aeabi_dadd+0x388>)
 800089c:	42aa      	cmp	r2, r5
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x24e>
 80008a0:	e16a      	b.n	8000b78 <__aeabi_dadd+0x524>
 80008a2:	2501      	movs	r5, #1
 80008a4:	2938      	cmp	r1, #56	@ 0x38
 80008a6:	dd00      	ble.n	80008aa <__aeabi_dadd+0x256>
 80008a8:	e722      	b.n	80006f0 <__aeabi_dadd+0x9c>
 80008aa:	000a      	movs	r2, r1
 80008ac:	e70e      	b.n	80006cc <__aeabi_dadd+0x78>
 80008ae:	4a4d      	ldr	r2, [pc, #308]	@ (80009e4 <__aeabi_dadd+0x390>)
 80008b0:	1c7d      	adds	r5, r7, #1
 80008b2:	4215      	tst	r5, r2
 80008b4:	d000      	beq.n	80008b8 <__aeabi_dadd+0x264>
 80008b6:	e0d0      	b.n	8000a5a <__aeabi_dadd+0x406>
 80008b8:	0025      	movs	r5, r4
 80008ba:	4662      	mov	r2, ip
 80008bc:	4653      	mov	r3, sl
 80008be:	4305      	orrs	r5, r0
 80008c0:	431a      	orrs	r2, r3
 80008c2:	2f00      	cmp	r7, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dadd+0x274>
 80008c6:	e137      	b.n	8000b38 <__aeabi_dadd+0x4e4>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x27a>
 80008cc:	e1a8      	b.n	8000c20 <__aeabi_dadd+0x5cc>
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d100      	bne.n	80008d4 <__aeabi_dadd+0x280>
 80008d2:	e16a      	b.n	8000baa <__aeabi_dadd+0x556>
 80008d4:	4663      	mov	r3, ip
 80008d6:	1ac5      	subs	r5, r0, r3
 80008d8:	4653      	mov	r3, sl
 80008da:	1ae2      	subs	r2, r4, r3
 80008dc:	42a8      	cmp	r0, r5
 80008de:	419b      	sbcs	r3, r3
 80008e0:	425b      	negs	r3, r3
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	021a      	lsls	r2, r3, #8
 80008e6:	d400      	bmi.n	80008ea <__aeabi_dadd+0x296>
 80008e8:	e203      	b.n	8000cf2 <__aeabi_dadd+0x69e>
 80008ea:	4663      	mov	r3, ip
 80008ec:	1a1d      	subs	r5, r3, r0
 80008ee:	45ac      	cmp	ip, r5
 80008f0:	4192      	sbcs	r2, r2
 80008f2:	4653      	mov	r3, sl
 80008f4:	4252      	negs	r2, r2
 80008f6:	1b1c      	subs	r4, r3, r4
 80008f8:	000e      	movs	r6, r1
 80008fa:	4688      	mov	r8, r1
 80008fc:	1aa4      	subs	r4, r4, r2
 80008fe:	e723      	b.n	8000748 <__aeabi_dadd+0xf4>
 8000900:	4936      	ldr	r1, [pc, #216]	@ (80009dc <__aeabi_dadd+0x388>)
 8000902:	428f      	cmp	r7, r1
 8000904:	d070      	beq.n	80009e8 <__aeabi_dadd+0x394>
 8000906:	2501      	movs	r5, #1
 8000908:	2a38      	cmp	r2, #56	@ 0x38
 800090a:	dca8      	bgt.n	800085e <__aeabi_dadd+0x20a>
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	4653      	mov	r3, sl
 8000910:	0409      	lsls	r1, r1, #16
 8000912:	430b      	orrs	r3, r1
 8000914:	469a      	mov	sl, r3
 8000916:	e78e      	b.n	8000836 <__aeabi_dadd+0x1e2>
 8000918:	003c      	movs	r4, r7
 800091a:	2500      	movs	r5, #0
 800091c:	2200      	movs	r2, #0
 800091e:	e731      	b.n	8000784 <__aeabi_dadd+0x130>
 8000920:	2307      	movs	r3, #7
 8000922:	402b      	ands	r3, r5
 8000924:	2b00      	cmp	r3, #0
 8000926:	d000      	beq.n	800092a <__aeabi_dadd+0x2d6>
 8000928:	e710      	b.n	800074c <__aeabi_dadd+0xf8>
 800092a:	e093      	b.n	8000a54 <__aeabi_dadd+0x400>
 800092c:	2a00      	cmp	r2, #0
 800092e:	d074      	beq.n	8000a1a <__aeabi_dadd+0x3c6>
 8000930:	464a      	mov	r2, r9
 8000932:	1bd2      	subs	r2, r2, r7
 8000934:	2f00      	cmp	r7, #0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x2e6>
 8000938:	e0c7      	b.n	8000aca <__aeabi_dadd+0x476>
 800093a:	4928      	ldr	r1, [pc, #160]	@ (80009dc <__aeabi_dadd+0x388>)
 800093c:	4589      	cmp	r9, r1
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x2ee>
 8000940:	e185      	b.n	8000c4e <__aeabi_dadd+0x5fa>
 8000942:	2501      	movs	r5, #1
 8000944:	2a38      	cmp	r2, #56	@ 0x38
 8000946:	dc12      	bgt.n	800096e <__aeabi_dadd+0x31a>
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	0409      	lsls	r1, r1, #16
 800094c:	430c      	orrs	r4, r1
 800094e:	2a1f      	cmp	r2, #31
 8000950:	dd00      	ble.n	8000954 <__aeabi_dadd+0x300>
 8000952:	e1ab      	b.n	8000cac <__aeabi_dadd+0x658>
 8000954:	2120      	movs	r1, #32
 8000956:	0025      	movs	r5, r4
 8000958:	1a89      	subs	r1, r1, r2
 800095a:	0007      	movs	r7, r0
 800095c:	4088      	lsls	r0, r1
 800095e:	408d      	lsls	r5, r1
 8000960:	40d7      	lsrs	r7, r2
 8000962:	1e41      	subs	r1, r0, #1
 8000964:	4188      	sbcs	r0, r1
 8000966:	40d4      	lsrs	r4, r2
 8000968:	433d      	orrs	r5, r7
 800096a:	4305      	orrs	r5, r0
 800096c:	44a2      	add	sl, r4
 800096e:	4465      	add	r5, ip
 8000970:	4565      	cmp	r5, ip
 8000972:	4192      	sbcs	r2, r2
 8000974:	4252      	negs	r2, r2
 8000976:	4452      	add	r2, sl
 8000978:	0014      	movs	r4, r2
 800097a:	464f      	mov	r7, r9
 800097c:	e774      	b.n	8000868 <__aeabi_dadd+0x214>
 800097e:	0028      	movs	r0, r5
 8000980:	f001 fd00 	bl	8002384 <__clzsi2>
 8000984:	0003      	movs	r3, r0
 8000986:	3318      	adds	r3, #24
 8000988:	2b1f      	cmp	r3, #31
 800098a:	dc00      	bgt.n	800098e <__aeabi_dadd+0x33a>
 800098c:	e6c2      	b.n	8000714 <__aeabi_dadd+0xc0>
 800098e:	002a      	movs	r2, r5
 8000990:	3808      	subs	r0, #8
 8000992:	4082      	lsls	r2, r0
 8000994:	429f      	cmp	r7, r3
 8000996:	dd00      	ble.n	800099a <__aeabi_dadd+0x346>
 8000998:	e0a9      	b.n	8000aee <__aeabi_dadd+0x49a>
 800099a:	1bdb      	subs	r3, r3, r7
 800099c:	1c58      	adds	r0, r3, #1
 800099e:	281f      	cmp	r0, #31
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x350>
 80009a2:	e1ac      	b.n	8000cfe <__aeabi_dadd+0x6aa>
 80009a4:	0015      	movs	r5, r2
 80009a6:	3b1f      	subs	r3, #31
 80009a8:	40dd      	lsrs	r5, r3
 80009aa:	2820      	cmp	r0, #32
 80009ac:	d005      	beq.n	80009ba <__aeabi_dadd+0x366>
 80009ae:	2340      	movs	r3, #64	@ 0x40
 80009b0:	1a1b      	subs	r3, r3, r0
 80009b2:	409a      	lsls	r2, r3
 80009b4:	1e53      	subs	r3, r2, #1
 80009b6:	419a      	sbcs	r2, r3
 80009b8:	4315      	orrs	r5, r2
 80009ba:	2307      	movs	r3, #7
 80009bc:	2700      	movs	r7, #0
 80009be:	402b      	ands	r3, r5
 80009c0:	e7b0      	b.n	8000924 <__aeabi_dadd+0x2d0>
 80009c2:	08ed      	lsrs	r5, r5, #3
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <__aeabi_dadd+0x388>)
 80009c6:	0762      	lsls	r2, r4, #29
 80009c8:	432a      	orrs	r2, r5
 80009ca:	08e4      	lsrs	r4, r4, #3
 80009cc:	429f      	cmp	r7, r3
 80009ce:	d00f      	beq.n	80009f0 <__aeabi_dadd+0x39c>
 80009d0:	0324      	lsls	r4, r4, #12
 80009d2:	0b25      	lsrs	r5, r4, #12
 80009d4:	057c      	lsls	r4, r7, #21
 80009d6:	0d64      	lsrs	r4, r4, #21
 80009d8:	e6d4      	b.n	8000784 <__aeabi_dadd+0x130>
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	000007ff 	.word	0x000007ff
 80009e0:	ff7fffff 	.word	0xff7fffff
 80009e4:	000007fe 	.word	0x000007fe
 80009e8:	08c0      	lsrs	r0, r0, #3
 80009ea:	0762      	lsls	r2, r4, #29
 80009ec:	4302      	orrs	r2, r0
 80009ee:	08e4      	lsrs	r4, r4, #3
 80009f0:	0013      	movs	r3, r2
 80009f2:	4323      	orrs	r3, r4
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x3a4>
 80009f6:	e186      	b.n	8000d06 <__aeabi_dadd+0x6b2>
 80009f8:	2580      	movs	r5, #128	@ 0x80
 80009fa:	032d      	lsls	r5, r5, #12
 80009fc:	4325      	orrs	r5, r4
 80009fe:	032d      	lsls	r5, r5, #12
 8000a00:	4cc3      	ldr	r4, [pc, #780]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000a02:	0b2d      	lsrs	r5, r5, #12
 8000a04:	e6be      	b.n	8000784 <__aeabi_dadd+0x130>
 8000a06:	4660      	mov	r0, ip
 8000a08:	4654      	mov	r4, sl
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	0017      	movs	r7, r2
 8000a0e:	08c5      	lsrs	r5, r0, #3
 8000a10:	e7d8      	b.n	80009c4 <__aeabi_dadd+0x370>
 8000a12:	4cc0      	ldr	r4, [pc, #768]	@ (8000d14 <__aeabi_dadd+0x6c0>)
 8000a14:	1aff      	subs	r7, r7, r3
 8000a16:	4014      	ands	r4, r2
 8000a18:	e696      	b.n	8000748 <__aeabi_dadd+0xf4>
 8000a1a:	4abf      	ldr	r2, [pc, #764]	@ (8000d18 <__aeabi_dadd+0x6c4>)
 8000a1c:	1c79      	adds	r1, r7, #1
 8000a1e:	4211      	tst	r1, r2
 8000a20:	d16b      	bne.n	8000afa <__aeabi_dadd+0x4a6>
 8000a22:	0022      	movs	r2, r4
 8000a24:	4302      	orrs	r2, r0
 8000a26:	2f00      	cmp	r7, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x3d8>
 8000a2a:	e0db      	b.n	8000be4 <__aeabi_dadd+0x590>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x3de>
 8000a30:	e12d      	b.n	8000c8e <__aeabi_dadd+0x63a>
 8000a32:	4662      	mov	r2, ip
 8000a34:	4653      	mov	r3, sl
 8000a36:	431a      	orrs	r2, r3
 8000a38:	d100      	bne.n	8000a3c <__aeabi_dadd+0x3e8>
 8000a3a:	e0b6      	b.n	8000baa <__aeabi_dadd+0x556>
 8000a3c:	4663      	mov	r3, ip
 8000a3e:	18c5      	adds	r5, r0, r3
 8000a40:	4285      	cmp	r5, r0
 8000a42:	4180      	sbcs	r0, r0
 8000a44:	4454      	add	r4, sl
 8000a46:	4240      	negs	r0, r0
 8000a48:	1824      	adds	r4, r4, r0
 8000a4a:	0223      	lsls	r3, r4, #8
 8000a4c:	d502      	bpl.n	8000a54 <__aeabi_dadd+0x400>
 8000a4e:	000f      	movs	r7, r1
 8000a50:	4bb0      	ldr	r3, [pc, #704]	@ (8000d14 <__aeabi_dadd+0x6c0>)
 8000a52:	401c      	ands	r4, r3
 8000a54:	003a      	movs	r2, r7
 8000a56:	0028      	movs	r0, r5
 8000a58:	e7d8      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 8000a5a:	4662      	mov	r2, ip
 8000a5c:	1a85      	subs	r5, r0, r2
 8000a5e:	42a8      	cmp	r0, r5
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	4653      	mov	r3, sl
 8000a64:	4252      	negs	r2, r2
 8000a66:	4691      	mov	r9, r2
 8000a68:	1ae3      	subs	r3, r4, r3
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	0013      	movs	r3, r2
 8000a72:	4691      	mov	r9, r2
 8000a74:	021a      	lsls	r2, r3, #8
 8000a76:	d454      	bmi.n	8000b22 <__aeabi_dadd+0x4ce>
 8000a78:	464a      	mov	r2, r9
 8000a7a:	464c      	mov	r4, r9
 8000a7c:	432a      	orrs	r2, r5
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dadd+0x42e>
 8000a80:	e640      	b.n	8000704 <__aeabi_dadd+0xb0>
 8000a82:	2600      	movs	r6, #0
 8000a84:	2400      	movs	r4, #0
 8000a86:	2500      	movs	r5, #0
 8000a88:	e67c      	b.n	8000784 <__aeabi_dadd+0x130>
 8000a8a:	4da1      	ldr	r5, [pc, #644]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000a8c:	45a9      	cmp	r9, r5
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x43e>
 8000a90:	e090      	b.n	8000bb4 <__aeabi_dadd+0x560>
 8000a92:	2501      	movs	r5, #1
 8000a94:	2a38      	cmp	r2, #56	@ 0x38
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dadd+0x446>
 8000a98:	e6ab      	b.n	80007f2 <__aeabi_dadd+0x19e>
 8000a9a:	2580      	movs	r5, #128	@ 0x80
 8000a9c:	042d      	lsls	r5, r5, #16
 8000a9e:	432c      	orrs	r4, r5
 8000aa0:	e695      	b.n	80007ce <__aeabi_dadd+0x17a>
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	4655      	mov	r5, sl
 8000aa6:	3920      	subs	r1, #32
 8000aa8:	40cd      	lsrs	r5, r1
 8000aaa:	46a9      	mov	r9, r5
 8000aac:	2a20      	cmp	r2, #32
 8000aae:	d006      	beq.n	8000abe <__aeabi_dadd+0x46a>
 8000ab0:	2140      	movs	r1, #64	@ 0x40
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	431a      	orrs	r2, r3
 8000abc:	4694      	mov	ip, r2
 8000abe:	4665      	mov	r5, ip
 8000ac0:	1e6b      	subs	r3, r5, #1
 8000ac2:	419d      	sbcs	r5, r3
 8000ac4:	464b      	mov	r3, r9
 8000ac6:	431d      	orrs	r5, r3
 8000ac8:	e612      	b.n	80006f0 <__aeabi_dadd+0x9c>
 8000aca:	0021      	movs	r1, r4
 8000acc:	4301      	orrs	r1, r0
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x47e>
 8000ad0:	e0c4      	b.n	8000c5c <__aeabi_dadd+0x608>
 8000ad2:	1e51      	subs	r1, r2, #1
 8000ad4:	2a01      	cmp	r2, #1
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dadd+0x486>
 8000ad8:	e0fb      	b.n	8000cd2 <__aeabi_dadd+0x67e>
 8000ada:	4d8d      	ldr	r5, [pc, #564]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000adc:	42aa      	cmp	r2, r5
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x48e>
 8000ae0:	e0b5      	b.n	8000c4e <__aeabi_dadd+0x5fa>
 8000ae2:	2501      	movs	r5, #1
 8000ae4:	2938      	cmp	r1, #56	@ 0x38
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dadd+0x496>
 8000ae8:	e741      	b.n	800096e <__aeabi_dadd+0x31a>
 8000aea:	000a      	movs	r2, r1
 8000aec:	e72f      	b.n	800094e <__aeabi_dadd+0x2fa>
 8000aee:	4c89      	ldr	r4, [pc, #548]	@ (8000d14 <__aeabi_dadd+0x6c0>)
 8000af0:	1aff      	subs	r7, r7, r3
 8000af2:	4014      	ands	r4, r2
 8000af4:	0762      	lsls	r2, r4, #29
 8000af6:	08e4      	lsrs	r4, r4, #3
 8000af8:	e76a      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000afa:	4a85      	ldr	r2, [pc, #532]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000afc:	4291      	cmp	r1, r2
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dadd+0x4ae>
 8000b00:	e0e3      	b.n	8000cca <__aeabi_dadd+0x676>
 8000b02:	4663      	mov	r3, ip
 8000b04:	18c2      	adds	r2, r0, r3
 8000b06:	4282      	cmp	r2, r0
 8000b08:	4180      	sbcs	r0, r0
 8000b0a:	0023      	movs	r3, r4
 8000b0c:	4240      	negs	r0, r0
 8000b0e:	4453      	add	r3, sl
 8000b10:	181b      	adds	r3, r3, r0
 8000b12:	07dd      	lsls	r5, r3, #31
 8000b14:	085c      	lsrs	r4, r3, #1
 8000b16:	2307      	movs	r3, #7
 8000b18:	0852      	lsrs	r2, r2, #1
 8000b1a:	4315      	orrs	r5, r2
 8000b1c:	000f      	movs	r7, r1
 8000b1e:	402b      	ands	r3, r5
 8000b20:	e700      	b.n	8000924 <__aeabi_dadd+0x2d0>
 8000b22:	4663      	mov	r3, ip
 8000b24:	1a1d      	subs	r5, r3, r0
 8000b26:	45ac      	cmp	ip, r5
 8000b28:	4192      	sbcs	r2, r2
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	1b1c      	subs	r4, r3, r4
 8000b30:	000e      	movs	r6, r1
 8000b32:	4688      	mov	r8, r1
 8000b34:	1aa4      	subs	r4, r4, r2
 8000b36:	e5e5      	b.n	8000704 <__aeabi_dadd+0xb0>
 8000b38:	2d00      	cmp	r5, #0
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_dadd+0x4ea>
 8000b3c:	e091      	b.n	8000c62 <__aeabi_dadd+0x60e>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d138      	bne.n	8000bb4 <__aeabi_dadd+0x560>
 8000b42:	2480      	movs	r4, #128	@ 0x80
 8000b44:	2600      	movs	r6, #0
 8000b46:	0324      	lsls	r4, r4, #12
 8000b48:	e756      	b.n	80009f8 <__aeabi_dadd+0x3a4>
 8000b4a:	4663      	mov	r3, ip
 8000b4c:	18c5      	adds	r5, r0, r3
 8000b4e:	4285      	cmp	r5, r0
 8000b50:	4180      	sbcs	r0, r0
 8000b52:	4454      	add	r4, sl
 8000b54:	4240      	negs	r0, r0
 8000b56:	1824      	adds	r4, r4, r0
 8000b58:	2701      	movs	r7, #1
 8000b5a:	0223      	lsls	r3, r4, #8
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_dadd+0x50c>
 8000b5e:	e6df      	b.n	8000920 <__aeabi_dadd+0x2cc>
 8000b60:	2702      	movs	r7, #2
 8000b62:	e687      	b.n	8000874 <__aeabi_dadd+0x220>
 8000b64:	4663      	mov	r3, ip
 8000b66:	1ac5      	subs	r5, r0, r3
 8000b68:	42a8      	cmp	r0, r5
 8000b6a:	4180      	sbcs	r0, r0
 8000b6c:	4653      	mov	r3, sl
 8000b6e:	4240      	negs	r0, r0
 8000b70:	1ae4      	subs	r4, r4, r3
 8000b72:	2701      	movs	r7, #1
 8000b74:	1a24      	subs	r4, r4, r0
 8000b76:	e5c0      	b.n	80006fa <__aeabi_dadd+0xa6>
 8000b78:	0762      	lsls	r2, r4, #29
 8000b7a:	08c0      	lsrs	r0, r0, #3
 8000b7c:	4302      	orrs	r2, r0
 8000b7e:	08e4      	lsrs	r4, r4, #3
 8000b80:	e736      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000b82:	0011      	movs	r1, r2
 8000b84:	4653      	mov	r3, sl
 8000b86:	3920      	subs	r1, #32
 8000b88:	40cb      	lsrs	r3, r1
 8000b8a:	4699      	mov	r9, r3
 8000b8c:	2a20      	cmp	r2, #32
 8000b8e:	d006      	beq.n	8000b9e <__aeabi_dadd+0x54a>
 8000b90:	2140      	movs	r1, #64	@ 0x40
 8000b92:	4653      	mov	r3, sl
 8000b94:	1a8a      	subs	r2, r1, r2
 8000b96:	4093      	lsls	r3, r2
 8000b98:	4662      	mov	r2, ip
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	4694      	mov	ip, r2
 8000b9e:	4665      	mov	r5, ip
 8000ba0:	1e6b      	subs	r3, r5, #1
 8000ba2:	419d      	sbcs	r5, r3
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	431d      	orrs	r5, r3
 8000ba8:	e659      	b.n	800085e <__aeabi_dadd+0x20a>
 8000baa:	0762      	lsls	r2, r4, #29
 8000bac:	08c0      	lsrs	r0, r0, #3
 8000bae:	4302      	orrs	r2, r0
 8000bb0:	08e4      	lsrs	r4, r4, #3
 8000bb2:	e70d      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000bb4:	4653      	mov	r3, sl
 8000bb6:	075a      	lsls	r2, r3, #29
 8000bb8:	4663      	mov	r3, ip
 8000bba:	08d8      	lsrs	r0, r3, #3
 8000bbc:	4653      	mov	r3, sl
 8000bbe:	000e      	movs	r6, r1
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	08dc      	lsrs	r4, r3, #3
 8000bc4:	e714      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000bc6:	0015      	movs	r5, r2
 8000bc8:	0026      	movs	r6, r4
 8000bca:	3d20      	subs	r5, #32
 8000bcc:	40ee      	lsrs	r6, r5
 8000bce:	2a20      	cmp	r2, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x586>
 8000bd2:	2540      	movs	r5, #64	@ 0x40
 8000bd4:	1aaa      	subs	r2, r5, r2
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	4320      	orrs	r0, r4
 8000bda:	1e42      	subs	r2, r0, #1
 8000bdc:	4190      	sbcs	r0, r2
 8000bde:	0005      	movs	r5, r0
 8000be0:	4335      	orrs	r5, r6
 8000be2:	e606      	b.n	80007f2 <__aeabi_dadd+0x19e>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d07c      	beq.n	8000ce2 <__aeabi_dadd+0x68e>
 8000be8:	4662      	mov	r2, ip
 8000bea:	4653      	mov	r3, sl
 8000bec:	08c0      	lsrs	r0, r0, #3
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x5a0>
 8000bf2:	e6fa      	b.n	80009ea <__aeabi_dadd+0x396>
 8000bf4:	0762      	lsls	r2, r4, #29
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	08e4      	lsrs	r4, r4, #3
 8000bfc:	0312      	lsls	r2, r2, #12
 8000bfe:	4214      	tst	r4, r2
 8000c00:	d008      	beq.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c02:	08d9      	lsrs	r1, r3, #3
 8000c04:	4211      	tst	r1, r2
 8000c06:	d105      	bne.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	08d8      	lsrs	r0, r3, #3
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	000c      	movs	r4, r1
 8000c10:	075b      	lsls	r3, r3, #29
 8000c12:	4318      	orrs	r0, r3
 8000c14:	0f42      	lsrs	r2, r0, #29
 8000c16:	00c0      	lsls	r0, r0, #3
 8000c18:	08c0      	lsrs	r0, r0, #3
 8000c1a:	0752      	lsls	r2, r2, #29
 8000c1c:	4302      	orrs	r2, r0
 8000c1e:	e6e7      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x5d2>
 8000c24:	e72d      	b.n	8000a82 <__aeabi_dadd+0x42e>
 8000c26:	4663      	mov	r3, ip
 8000c28:	08d8      	lsrs	r0, r3, #3
 8000c2a:	4653      	mov	r3, sl
 8000c2c:	075a      	lsls	r2, r3, #29
 8000c2e:	000e      	movs	r6, r1
 8000c30:	4302      	orrs	r2, r0
 8000c32:	08dc      	lsrs	r4, r3, #3
 8000c34:	e6cc      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000c36:	4663      	mov	r3, ip
 8000c38:	1a1d      	subs	r5, r3, r0
 8000c3a:	45ac      	cmp	ip, r5
 8000c3c:	4192      	sbcs	r2, r2
 8000c3e:	4653      	mov	r3, sl
 8000c40:	4252      	negs	r2, r2
 8000c42:	1b1c      	subs	r4, r3, r4
 8000c44:	000e      	movs	r6, r1
 8000c46:	4688      	mov	r8, r1
 8000c48:	1aa4      	subs	r4, r4, r2
 8000c4a:	3701      	adds	r7, #1
 8000c4c:	e555      	b.n	80006fa <__aeabi_dadd+0xa6>
 8000c4e:	4663      	mov	r3, ip
 8000c50:	08d9      	lsrs	r1, r3, #3
 8000c52:	4653      	mov	r3, sl
 8000c54:	075a      	lsls	r2, r3, #29
 8000c56:	430a      	orrs	r2, r1
 8000c58:	08dc      	lsrs	r4, r3, #3
 8000c5a:	e6c9      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000c5c:	4660      	mov	r0, ip
 8000c5e:	4654      	mov	r4, sl
 8000c60:	e6d4      	b.n	8000a0c <__aeabi_dadd+0x3b8>
 8000c62:	08c0      	lsrs	r0, r0, #3
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x616>
 8000c68:	e6bf      	b.n	80009ea <__aeabi_dadd+0x396>
 8000c6a:	0762      	lsls	r2, r4, #29
 8000c6c:	4310      	orrs	r0, r2
 8000c6e:	2280      	movs	r2, #128	@ 0x80
 8000c70:	08e4      	lsrs	r4, r4, #3
 8000c72:	0312      	lsls	r2, r2, #12
 8000c74:	4214      	tst	r4, r2
 8000c76:	d0cd      	beq.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c78:	08dd      	lsrs	r5, r3, #3
 8000c7a:	4215      	tst	r5, r2
 8000c7c:	d1ca      	bne.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c7e:	4663      	mov	r3, ip
 8000c80:	08d8      	lsrs	r0, r3, #3
 8000c82:	4653      	mov	r3, sl
 8000c84:	075b      	lsls	r3, r3, #29
 8000c86:	000e      	movs	r6, r1
 8000c88:	002c      	movs	r4, r5
 8000c8a:	4318      	orrs	r0, r3
 8000c8c:	e7c2      	b.n	8000c14 <__aeabi_dadd+0x5c0>
 8000c8e:	4663      	mov	r3, ip
 8000c90:	08d9      	lsrs	r1, r3, #3
 8000c92:	4653      	mov	r3, sl
 8000c94:	075a      	lsls	r2, r3, #29
 8000c96:	430a      	orrs	r2, r1
 8000c98:	08dc      	lsrs	r4, r3, #3
 8000c9a:	e699      	b.n	80009d0 <__aeabi_dadd+0x37c>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	08d8      	lsrs	r0, r3, #3
 8000ca0:	4653      	mov	r3, sl
 8000ca2:	075a      	lsls	r2, r3, #29
 8000ca4:	000e      	movs	r6, r1
 8000ca6:	4302      	orrs	r2, r0
 8000ca8:	08dc      	lsrs	r4, r3, #3
 8000caa:	e6a1      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000cac:	0011      	movs	r1, r2
 8000cae:	0027      	movs	r7, r4
 8000cb0:	3920      	subs	r1, #32
 8000cb2:	40cf      	lsrs	r7, r1
 8000cb4:	2a20      	cmp	r2, #32
 8000cb6:	d003      	beq.n	8000cc0 <__aeabi_dadd+0x66c>
 8000cb8:	2140      	movs	r1, #64	@ 0x40
 8000cba:	1a8a      	subs	r2, r1, r2
 8000cbc:	4094      	lsls	r4, r2
 8000cbe:	4320      	orrs	r0, r4
 8000cc0:	1e42      	subs	r2, r0, #1
 8000cc2:	4190      	sbcs	r0, r2
 8000cc4:	0005      	movs	r5, r0
 8000cc6:	433d      	orrs	r5, r7
 8000cc8:	e651      	b.n	800096e <__aeabi_dadd+0x31a>
 8000cca:	000c      	movs	r4, r1
 8000ccc:	2500      	movs	r5, #0
 8000cce:	2200      	movs	r2, #0
 8000cd0:	e558      	b.n	8000784 <__aeabi_dadd+0x130>
 8000cd2:	4460      	add	r0, ip
 8000cd4:	4560      	cmp	r0, ip
 8000cd6:	4192      	sbcs	r2, r2
 8000cd8:	4454      	add	r4, sl
 8000cda:	4252      	negs	r2, r2
 8000cdc:	0005      	movs	r5, r0
 8000cde:	18a4      	adds	r4, r4, r2
 8000ce0:	e73a      	b.n	8000b58 <__aeabi_dadd+0x504>
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	075a      	lsls	r2, r3, #29
 8000ce6:	4663      	mov	r3, ip
 8000ce8:	08d9      	lsrs	r1, r3, #3
 8000cea:	4653      	mov	r3, sl
 8000cec:	430a      	orrs	r2, r1
 8000cee:	08dc      	lsrs	r4, r3, #3
 8000cf0:	e67e      	b.n	80009f0 <__aeabi_dadd+0x39c>
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	432a      	orrs	r2, r5
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_dadd+0x6a8>
 8000cfa:	e6ab      	b.n	8000a54 <__aeabi_dadd+0x400>
 8000cfc:	e6c1      	b.n	8000a82 <__aeabi_dadd+0x42e>
 8000cfe:	2120      	movs	r1, #32
 8000d00:	2500      	movs	r5, #0
 8000d02:	1a09      	subs	r1, r1, r0
 8000d04:	e519      	b.n	800073a <__aeabi_dadd+0xe6>
 8000d06:	2200      	movs	r2, #0
 8000d08:	2500      	movs	r5, #0
 8000d0a:	4c01      	ldr	r4, [pc, #4]	@ (8000d10 <__aeabi_dadd+0x6bc>)
 8000d0c:	e53a      	b.n	8000784 <__aeabi_dadd+0x130>
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	000007ff 	.word	0x000007ff
 8000d14:	ff7fffff 	.word	0xff7fffff
 8000d18:	000007fe 	.word	0x000007fe

08000d1c <__aeabi_ddiv>:
 8000d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1e:	46de      	mov	lr, fp
 8000d20:	4645      	mov	r5, r8
 8000d22:	4657      	mov	r7, sl
 8000d24:	464e      	mov	r6, r9
 8000d26:	b5e0      	push	{r5, r6, r7, lr}
 8000d28:	b087      	sub	sp, #28
 8000d2a:	9200      	str	r2, [sp, #0]
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	030b      	lsls	r3, r1, #12
 8000d30:	0b1b      	lsrs	r3, r3, #12
 8000d32:	469b      	mov	fp, r3
 8000d34:	0fca      	lsrs	r2, r1, #31
 8000d36:	004b      	lsls	r3, r1, #1
 8000d38:	0004      	movs	r4, r0
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	0d5b      	lsrs	r3, r3, #21
 8000d3e:	9202      	str	r2, [sp, #8]
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0x28>
 8000d42:	e16a      	b.n	800101a <__aeabi_ddiv+0x2fe>
 8000d44:	4ad4      	ldr	r2, [pc, #848]	@ (8001098 <__aeabi_ddiv+0x37c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d100      	bne.n	8000d4c <__aeabi_ddiv+0x30>
 8000d4a:	e18c      	b.n	8001066 <__aeabi_ddiv+0x34a>
 8000d4c:	4659      	mov	r1, fp
 8000d4e:	0f42      	lsrs	r2, r0, #29
 8000d50:	00c9      	lsls	r1, r1, #3
 8000d52:	430a      	orrs	r2, r1
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	0409      	lsls	r1, r1, #16
 8000d58:	4311      	orrs	r1, r2
 8000d5a:	00c2      	lsls	r2, r0, #3
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	4acf      	ldr	r2, [pc, #828]	@ (800109c <__aeabi_ddiv+0x380>)
 8000d60:	4689      	mov	r9, r1
 8000d62:	4692      	mov	sl, r2
 8000d64:	449a      	add	sl, r3
 8000d66:	2300      	movs	r3, #0
 8000d68:	2400      	movs	r4, #0
 8000d6a:	9303      	str	r3, [sp, #12]
 8000d6c:	9e00      	ldr	r6, [sp, #0]
 8000d6e:	9f01      	ldr	r7, [sp, #4]
 8000d70:	033b      	lsls	r3, r7, #12
 8000d72:	0b1b      	lsrs	r3, r3, #12
 8000d74:	469b      	mov	fp, r3
 8000d76:	007b      	lsls	r3, r7, #1
 8000d78:	0030      	movs	r0, r6
 8000d7a:	0d5b      	lsrs	r3, r3, #21
 8000d7c:	0ffd      	lsrs	r5, r7, #31
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_ddiv+0x68>
 8000d82:	e128      	b.n	8000fd6 <__aeabi_ddiv+0x2ba>
 8000d84:	4ac4      	ldr	r2, [pc, #784]	@ (8001098 <__aeabi_ddiv+0x37c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x70>
 8000d8a:	e177      	b.n	800107c <__aeabi_ddiv+0x360>
 8000d8c:	4659      	mov	r1, fp
 8000d8e:	0f72      	lsrs	r2, r6, #29
 8000d90:	00c9      	lsls	r1, r1, #3
 8000d92:	430a      	orrs	r2, r1
 8000d94:	2180      	movs	r1, #128	@ 0x80
 8000d96:	0409      	lsls	r1, r1, #16
 8000d98:	4311      	orrs	r1, r2
 8000d9a:	468b      	mov	fp, r1
 8000d9c:	49bf      	ldr	r1, [pc, #764]	@ (800109c <__aeabi_ddiv+0x380>)
 8000d9e:	00f2      	lsls	r2, r6, #3
 8000da0:	468c      	mov	ip, r1
 8000da2:	4651      	mov	r1, sl
 8000da4:	4463      	add	r3, ip
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	469a      	mov	sl, r3
 8000daa:	2300      	movs	r3, #0
 8000dac:	9e02      	ldr	r6, [sp, #8]
 8000dae:	406e      	eors	r6, r5
 8000db0:	2c0f      	cmp	r4, #15
 8000db2:	d827      	bhi.n	8000e04 <__aeabi_ddiv+0xe8>
 8000db4:	49ba      	ldr	r1, [pc, #744]	@ (80010a0 <__aeabi_ddiv+0x384>)
 8000db6:	00a4      	lsls	r4, r4, #2
 8000db8:	5909      	ldr	r1, [r1, r4]
 8000dba:	468f      	mov	pc, r1
 8000dbc:	46cb      	mov	fp, r9
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	9e02      	ldr	r6, [sp, #8]
 8000dc2:	9b03      	ldr	r3, [sp, #12]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d016      	beq.n	8000df6 <__aeabi_ddiv+0xda>
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d100      	bne.n	8000dce <__aeabi_ddiv+0xb2>
 8000dcc:	e2a6      	b.n	800131c <__aeabi_ddiv+0x600>
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_ddiv+0xb8>
 8000dd2:	e0df      	b.n	8000f94 <__aeabi_ddiv+0x278>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2400      	movs	r4, #0
 8000dda:	4690      	mov	r8, r2
 8000ddc:	051b      	lsls	r3, r3, #20
 8000dde:	4323      	orrs	r3, r4
 8000de0:	07f6      	lsls	r6, r6, #31
 8000de2:	4333      	orrs	r3, r6
 8000de4:	4640      	mov	r0, r8
 8000de6:	0019      	movs	r1, r3
 8000de8:	b007      	add	sp, #28
 8000dea:	bcf0      	pop	{r4, r5, r6, r7}
 8000dec:	46bb      	mov	fp, r7
 8000dee:	46b2      	mov	sl, r6
 8000df0:	46a9      	mov	r9, r5
 8000df2:	46a0      	mov	r8, r4
 8000df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df6:	2200      	movs	r2, #0
 8000df8:	2400      	movs	r4, #0
 8000dfa:	4690      	mov	r8, r2
 8000dfc:	4ba6      	ldr	r3, [pc, #664]	@ (8001098 <__aeabi_ddiv+0x37c>)
 8000dfe:	e7ed      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 8000e00:	002e      	movs	r6, r5
 8000e02:	e7df      	b.n	8000dc4 <__aeabi_ddiv+0xa8>
 8000e04:	45cb      	cmp	fp, r9
 8000e06:	d200      	bcs.n	8000e0a <__aeabi_ddiv+0xee>
 8000e08:	e1d4      	b.n	80011b4 <__aeabi_ddiv+0x498>
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_ddiv+0xf2>
 8000e0c:	e1cf      	b.n	80011ae <__aeabi_ddiv+0x492>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	425b      	negs	r3, r3
 8000e12:	469c      	mov	ip, r3
 8000e14:	4644      	mov	r4, r8
 8000e16:	4648      	mov	r0, r9
 8000e18:	2700      	movs	r7, #0
 8000e1a:	44e2      	add	sl, ip
 8000e1c:	465b      	mov	r3, fp
 8000e1e:	0e15      	lsrs	r5, r2, #24
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	431d      	orrs	r5, r3
 8000e24:	0c19      	lsrs	r1, r3, #16
 8000e26:	042b      	lsls	r3, r5, #16
 8000e28:	0212      	lsls	r2, r2, #8
 8000e2a:	9500      	str	r5, [sp, #0]
 8000e2c:	0c1d      	lsrs	r5, r3, #16
 8000e2e:	4691      	mov	r9, r2
 8000e30:	9102      	str	r1, [sp, #8]
 8000e32:	9503      	str	r5, [sp, #12]
 8000e34:	f7ff f9f4 	bl	8000220 <__aeabi_uidivmod>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	436a      	muls	r2, r5
 8000e3c:	040b      	lsls	r3, r1, #16
 8000e3e:	0c21      	lsrs	r1, r4, #16
 8000e40:	4680      	mov	r8, r0
 8000e42:	4319      	orrs	r1, r3
 8000e44:	428a      	cmp	r2, r1
 8000e46:	d909      	bls.n	8000e5c <__aeabi_ddiv+0x140>
 8000e48:	9d00      	ldr	r5, [sp, #0]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	46ac      	mov	ip, r5
 8000e4e:	425b      	negs	r3, r3
 8000e50:	4461      	add	r1, ip
 8000e52:	469c      	mov	ip, r3
 8000e54:	44e0      	add	r8, ip
 8000e56:	428d      	cmp	r5, r1
 8000e58:	d800      	bhi.n	8000e5c <__aeabi_ddiv+0x140>
 8000e5a:	e1fb      	b.n	8001254 <__aeabi_ddiv+0x538>
 8000e5c:	1a88      	subs	r0, r1, r2
 8000e5e:	9902      	ldr	r1, [sp, #8]
 8000e60:	f7ff f9de 	bl	8000220 <__aeabi_uidivmod>
 8000e64:	9a03      	ldr	r2, [sp, #12]
 8000e66:	0424      	lsls	r4, r4, #16
 8000e68:	4342      	muls	r2, r0
 8000e6a:	0409      	lsls	r1, r1, #16
 8000e6c:	0c24      	lsrs	r4, r4, #16
 8000e6e:	0003      	movs	r3, r0
 8000e70:	430c      	orrs	r4, r1
 8000e72:	42a2      	cmp	r2, r4
 8000e74:	d906      	bls.n	8000e84 <__aeabi_ddiv+0x168>
 8000e76:	9900      	ldr	r1, [sp, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	468c      	mov	ip, r1
 8000e7c:	4464      	add	r4, ip
 8000e7e:	42a1      	cmp	r1, r4
 8000e80:	d800      	bhi.n	8000e84 <__aeabi_ddiv+0x168>
 8000e82:	e1e1      	b.n	8001248 <__aeabi_ddiv+0x52c>
 8000e84:	1aa0      	subs	r0, r4, r2
 8000e86:	4642      	mov	r2, r8
 8000e88:	0412      	lsls	r2, r2, #16
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	4693      	mov	fp, r2
 8000e8e:	464b      	mov	r3, r9
 8000e90:	4659      	mov	r1, fp
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	001d      	movs	r5, r3
 8000e96:	9304      	str	r3, [sp, #16]
 8000e98:	040b      	lsls	r3, r1, #16
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	0409      	lsls	r1, r1, #16
 8000e9e:	0c09      	lsrs	r1, r1, #16
 8000ea0:	000c      	movs	r4, r1
 8000ea2:	0c1b      	lsrs	r3, r3, #16
 8000ea4:	435c      	muls	r4, r3
 8000ea6:	0c12      	lsrs	r2, r2, #16
 8000ea8:	436b      	muls	r3, r5
 8000eaa:	4688      	mov	r8, r1
 8000eac:	4351      	muls	r1, r2
 8000eae:	436a      	muls	r2, r5
 8000eb0:	0c25      	lsrs	r5, r4, #16
 8000eb2:	46ac      	mov	ip, r5
 8000eb4:	185b      	adds	r3, r3, r1
 8000eb6:	4463      	add	r3, ip
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	d903      	bls.n	8000ec4 <__aeabi_ddiv+0x1a8>
 8000ebc:	2180      	movs	r1, #128	@ 0x80
 8000ebe:	0249      	lsls	r1, r1, #9
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	4462      	add	r2, ip
 8000ec4:	0c19      	lsrs	r1, r3, #16
 8000ec6:	0424      	lsls	r4, r4, #16
 8000ec8:	041b      	lsls	r3, r3, #16
 8000eca:	0c24      	lsrs	r4, r4, #16
 8000ecc:	188a      	adds	r2, r1, r2
 8000ece:	191c      	adds	r4, r3, r4
 8000ed0:	4290      	cmp	r0, r2
 8000ed2:	d302      	bcc.n	8000eda <__aeabi_ddiv+0x1be>
 8000ed4:	d116      	bne.n	8000f04 <__aeabi_ddiv+0x1e8>
 8000ed6:	42a7      	cmp	r7, r4
 8000ed8:	d214      	bcs.n	8000f04 <__aeabi_ddiv+0x1e8>
 8000eda:	465b      	mov	r3, fp
 8000edc:	9d00      	ldr	r5, [sp, #0]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	444f      	add	r7, r9
 8000ee2:	9305      	str	r3, [sp, #20]
 8000ee4:	454f      	cmp	r7, r9
 8000ee6:	419b      	sbcs	r3, r3
 8000ee8:	46ac      	mov	ip, r5
 8000eea:	425b      	negs	r3, r3
 8000eec:	4463      	add	r3, ip
 8000eee:	18c0      	adds	r0, r0, r3
 8000ef0:	4285      	cmp	r5, r0
 8000ef2:	d300      	bcc.n	8000ef6 <__aeabi_ddiv+0x1da>
 8000ef4:	e1a1      	b.n	800123a <__aeabi_ddiv+0x51e>
 8000ef6:	4282      	cmp	r2, r0
 8000ef8:	d900      	bls.n	8000efc <__aeabi_ddiv+0x1e0>
 8000efa:	e1f6      	b.n	80012ea <__aeabi_ddiv+0x5ce>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1e4>
 8000efe:	e1f1      	b.n	80012e4 <__aeabi_ddiv+0x5c8>
 8000f00:	9b05      	ldr	r3, [sp, #20]
 8000f02:	469b      	mov	fp, r3
 8000f04:	1b3c      	subs	r4, r7, r4
 8000f06:	42a7      	cmp	r7, r4
 8000f08:	41bf      	sbcs	r7, r7
 8000f0a:	9d00      	ldr	r5, [sp, #0]
 8000f0c:	1a80      	subs	r0, r0, r2
 8000f0e:	427f      	negs	r7, r7
 8000f10:	1bc0      	subs	r0, r0, r7
 8000f12:	4285      	cmp	r5, r0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_ddiv+0x1fc>
 8000f16:	e1d0      	b.n	80012ba <__aeabi_ddiv+0x59e>
 8000f18:	9902      	ldr	r1, [sp, #8]
 8000f1a:	f7ff f981 	bl	8000220 <__aeabi_uidivmod>
 8000f1e:	9a03      	ldr	r2, [sp, #12]
 8000f20:	040b      	lsls	r3, r1, #16
 8000f22:	4342      	muls	r2, r0
 8000f24:	0c21      	lsrs	r1, r4, #16
 8000f26:	0007      	movs	r7, r0
 8000f28:	4319      	orrs	r1, r3
 8000f2a:	428a      	cmp	r2, r1
 8000f2c:	d900      	bls.n	8000f30 <__aeabi_ddiv+0x214>
 8000f2e:	e178      	b.n	8001222 <__aeabi_ddiv+0x506>
 8000f30:	1a88      	subs	r0, r1, r2
 8000f32:	9902      	ldr	r1, [sp, #8]
 8000f34:	f7ff f974 	bl	8000220 <__aeabi_uidivmod>
 8000f38:	9a03      	ldr	r2, [sp, #12]
 8000f3a:	0424      	lsls	r4, r4, #16
 8000f3c:	4342      	muls	r2, r0
 8000f3e:	0409      	lsls	r1, r1, #16
 8000f40:	0c24      	lsrs	r4, r4, #16
 8000f42:	0003      	movs	r3, r0
 8000f44:	430c      	orrs	r4, r1
 8000f46:	42a2      	cmp	r2, r4
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x230>
 8000f4a:	e15d      	b.n	8001208 <__aeabi_ddiv+0x4ec>
 8000f4c:	4641      	mov	r1, r8
 8000f4e:	1aa4      	subs	r4, r4, r2
 8000f50:	043a      	lsls	r2, r7, #16
 8000f52:	431a      	orrs	r2, r3
 8000f54:	9d04      	ldr	r5, [sp, #16]
 8000f56:	0413      	lsls	r3, r2, #16
 8000f58:	0c1b      	lsrs	r3, r3, #16
 8000f5a:	4359      	muls	r1, r3
 8000f5c:	4647      	mov	r7, r8
 8000f5e:	436b      	muls	r3, r5
 8000f60:	469c      	mov	ip, r3
 8000f62:	0c10      	lsrs	r0, r2, #16
 8000f64:	4347      	muls	r7, r0
 8000f66:	0c0b      	lsrs	r3, r1, #16
 8000f68:	44bc      	add	ip, r7
 8000f6a:	4463      	add	r3, ip
 8000f6c:	4368      	muls	r0, r5
 8000f6e:	429f      	cmp	r7, r3
 8000f70:	d903      	bls.n	8000f7a <__aeabi_ddiv+0x25e>
 8000f72:	2580      	movs	r5, #128	@ 0x80
 8000f74:	026d      	lsls	r5, r5, #9
 8000f76:	46ac      	mov	ip, r5
 8000f78:	4460      	add	r0, ip
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	0409      	lsls	r1, r1, #16
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	0c09      	lsrs	r1, r1, #16
 8000f82:	183f      	adds	r7, r7, r0
 8000f84:	185b      	adds	r3, r3, r1
 8000f86:	42bc      	cmp	r4, r7
 8000f88:	d200      	bcs.n	8000f8c <__aeabi_ddiv+0x270>
 8000f8a:	e102      	b.n	8001192 <__aeabi_ddiv+0x476>
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_ddiv+0x274>
 8000f8e:	e0fd      	b.n	800118c <__aeabi_ddiv+0x470>
 8000f90:	2301      	movs	r3, #1
 8000f92:	431a      	orrs	r2, r3
 8000f94:	4b43      	ldr	r3, [pc, #268]	@ (80010a4 <__aeabi_ddiv+0x388>)
 8000f96:	4453      	add	r3, sl
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_ddiv+0x282>
 8000f9c:	e0ae      	b.n	80010fc <__aeabi_ddiv+0x3e0>
 8000f9e:	0751      	lsls	r1, r2, #29
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_ddiv+0x288>
 8000fa2:	e198      	b.n	80012d6 <__aeabi_ddiv+0x5ba>
 8000fa4:	4659      	mov	r1, fp
 8000fa6:	01c9      	lsls	r1, r1, #7
 8000fa8:	d506      	bpl.n	8000fb8 <__aeabi_ddiv+0x29c>
 8000faa:	4659      	mov	r1, fp
 8000fac:	4b3e      	ldr	r3, [pc, #248]	@ (80010a8 <__aeabi_ddiv+0x38c>)
 8000fae:	4019      	ands	r1, r3
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	468b      	mov	fp, r1
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4453      	add	r3, sl
 8000fb8:	493c      	ldr	r1, [pc, #240]	@ (80010ac <__aeabi_ddiv+0x390>)
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	dd00      	ble.n	8000fc0 <__aeabi_ddiv+0x2a4>
 8000fbe:	e71a      	b.n	8000df6 <__aeabi_ddiv+0xda>
 8000fc0:	4659      	mov	r1, fp
 8000fc2:	08d2      	lsrs	r2, r2, #3
 8000fc4:	0749      	lsls	r1, r1, #29
 8000fc6:	4311      	orrs	r1, r2
 8000fc8:	465a      	mov	r2, fp
 8000fca:	055b      	lsls	r3, r3, #21
 8000fcc:	0254      	lsls	r4, r2, #9
 8000fce:	4688      	mov	r8, r1
 8000fd0:	0b24      	lsrs	r4, r4, #12
 8000fd2:	0d5b      	lsrs	r3, r3, #21
 8000fd4:	e702      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 8000fd6:	465a      	mov	r2, fp
 8000fd8:	9b00      	ldr	r3, [sp, #0]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x2c4>
 8000fde:	e07e      	b.n	80010de <__aeabi_ddiv+0x3c2>
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0x2cc>
 8000fe6:	e100      	b.n	80011ea <__aeabi_ddiv+0x4ce>
 8000fe8:	4658      	mov	r0, fp
 8000fea:	f001 f9cb 	bl	8002384 <__clzsi2>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	3a0b      	subs	r2, #11
 8000ff4:	271d      	movs	r7, #29
 8000ff6:	9e00      	ldr	r6, [sp, #0]
 8000ff8:	1aba      	subs	r2, r7, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	4658      	mov	r0, fp
 8000ffe:	40d6      	lsrs	r6, r2
 8001000:	3908      	subs	r1, #8
 8001002:	4088      	lsls	r0, r1
 8001004:	0032      	movs	r2, r6
 8001006:	4302      	orrs	r2, r0
 8001008:	4693      	mov	fp, r2
 800100a:	9a00      	ldr	r2, [sp, #0]
 800100c:	408a      	lsls	r2, r1
 800100e:	4928      	ldr	r1, [pc, #160]	@ (80010b0 <__aeabi_ddiv+0x394>)
 8001010:	4453      	add	r3, sl
 8001012:	468a      	mov	sl, r1
 8001014:	449a      	add	sl, r3
 8001016:	2300      	movs	r3, #0
 8001018:	e6c8      	b.n	8000dac <__aeabi_ddiv+0x90>
 800101a:	465b      	mov	r3, fp
 800101c:	4303      	orrs	r3, r0
 800101e:	4699      	mov	r9, r3
 8001020:	d056      	beq.n	80010d0 <__aeabi_ddiv+0x3b4>
 8001022:	465b      	mov	r3, fp
 8001024:	2b00      	cmp	r3, #0
 8001026:	d100      	bne.n	800102a <__aeabi_ddiv+0x30e>
 8001028:	e0cd      	b.n	80011c6 <__aeabi_ddiv+0x4aa>
 800102a:	4658      	mov	r0, fp
 800102c:	f001 f9aa 	bl	8002384 <__clzsi2>
 8001030:	230b      	movs	r3, #11
 8001032:	425b      	negs	r3, r3
 8001034:	469c      	mov	ip, r3
 8001036:	0002      	movs	r2, r0
 8001038:	4484      	add	ip, r0
 800103a:	4666      	mov	r6, ip
 800103c:	231d      	movs	r3, #29
 800103e:	1b9b      	subs	r3, r3, r6
 8001040:	0026      	movs	r6, r4
 8001042:	0011      	movs	r1, r2
 8001044:	4658      	mov	r0, fp
 8001046:	40de      	lsrs	r6, r3
 8001048:	3908      	subs	r1, #8
 800104a:	4088      	lsls	r0, r1
 800104c:	0033      	movs	r3, r6
 800104e:	4303      	orrs	r3, r0
 8001050:	4699      	mov	r9, r3
 8001052:	0023      	movs	r3, r4
 8001054:	408b      	lsls	r3, r1
 8001056:	4698      	mov	r8, r3
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <__aeabi_ddiv+0x398>)
 800105a:	2400      	movs	r4, #0
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	469a      	mov	sl, r3
 8001060:	2300      	movs	r3, #0
 8001062:	9303      	str	r3, [sp, #12]
 8001064:	e682      	b.n	8000d6c <__aeabi_ddiv+0x50>
 8001066:	465a      	mov	r2, fp
 8001068:	4302      	orrs	r2, r0
 800106a:	4691      	mov	r9, r2
 800106c:	d12a      	bne.n	80010c4 <__aeabi_ddiv+0x3a8>
 800106e:	2200      	movs	r2, #0
 8001070:	469a      	mov	sl, r3
 8001072:	2302      	movs	r3, #2
 8001074:	4690      	mov	r8, r2
 8001076:	2408      	movs	r4, #8
 8001078:	9303      	str	r3, [sp, #12]
 800107a:	e677      	b.n	8000d6c <__aeabi_ddiv+0x50>
 800107c:	465a      	mov	r2, fp
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	431a      	orrs	r2, r3
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <__aeabi_ddiv+0x39c>)
 8001084:	469c      	mov	ip, r3
 8001086:	44e2      	add	sl, ip
 8001088:	2a00      	cmp	r2, #0
 800108a:	d117      	bne.n	80010bc <__aeabi_ddiv+0x3a0>
 800108c:	2302      	movs	r3, #2
 800108e:	431c      	orrs	r4, r3
 8001090:	2300      	movs	r3, #0
 8001092:	469b      	mov	fp, r3
 8001094:	3302      	adds	r3, #2
 8001096:	e689      	b.n	8000dac <__aeabi_ddiv+0x90>
 8001098:	000007ff 	.word	0x000007ff
 800109c:	fffffc01 	.word	0xfffffc01
 80010a0:	08009550 	.word	0x08009550
 80010a4:	000003ff 	.word	0x000003ff
 80010a8:	feffffff 	.word	0xfeffffff
 80010ac:	000007fe 	.word	0x000007fe
 80010b0:	000003f3 	.word	0x000003f3
 80010b4:	fffffc0d 	.word	0xfffffc0d
 80010b8:	fffff801 	.word	0xfffff801
 80010bc:	2303      	movs	r3, #3
 80010be:	0032      	movs	r2, r6
 80010c0:	431c      	orrs	r4, r3
 80010c2:	e673      	b.n	8000dac <__aeabi_ddiv+0x90>
 80010c4:	469a      	mov	sl, r3
 80010c6:	2303      	movs	r3, #3
 80010c8:	46d9      	mov	r9, fp
 80010ca:	240c      	movs	r4, #12
 80010cc:	9303      	str	r3, [sp, #12]
 80010ce:	e64d      	b.n	8000d6c <__aeabi_ddiv+0x50>
 80010d0:	2300      	movs	r3, #0
 80010d2:	4698      	mov	r8, r3
 80010d4:	469a      	mov	sl, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	2404      	movs	r4, #4
 80010da:	9303      	str	r3, [sp, #12]
 80010dc:	e646      	b.n	8000d6c <__aeabi_ddiv+0x50>
 80010de:	2301      	movs	r3, #1
 80010e0:	431c      	orrs	r4, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	469b      	mov	fp, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	e660      	b.n	8000dac <__aeabi_ddiv+0x90>
 80010ea:	2300      	movs	r3, #0
 80010ec:	2480      	movs	r4, #128	@ 0x80
 80010ee:	4698      	mov	r8, r3
 80010f0:	2600      	movs	r6, #0
 80010f2:	4b92      	ldr	r3, [pc, #584]	@ (800133c <__aeabi_ddiv+0x620>)
 80010f4:	0324      	lsls	r4, r4, #12
 80010f6:	e671      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 80010f8:	2201      	movs	r2, #1
 80010fa:	4252      	negs	r2, r2
 80010fc:	2101      	movs	r1, #1
 80010fe:	1ac9      	subs	r1, r1, r3
 8001100:	2938      	cmp	r1, #56	@ 0x38
 8001102:	dd00      	ble.n	8001106 <__aeabi_ddiv+0x3ea>
 8001104:	e666      	b.n	8000dd4 <__aeabi_ddiv+0xb8>
 8001106:	291f      	cmp	r1, #31
 8001108:	dc00      	bgt.n	800110c <__aeabi_ddiv+0x3f0>
 800110a:	e0ab      	b.n	8001264 <__aeabi_ddiv+0x548>
 800110c:	201f      	movs	r0, #31
 800110e:	4240      	negs	r0, r0
 8001110:	1ac3      	subs	r3, r0, r3
 8001112:	4658      	mov	r0, fp
 8001114:	40d8      	lsrs	r0, r3
 8001116:	0003      	movs	r3, r0
 8001118:	2920      	cmp	r1, #32
 800111a:	d004      	beq.n	8001126 <__aeabi_ddiv+0x40a>
 800111c:	4658      	mov	r0, fp
 800111e:	4988      	ldr	r1, [pc, #544]	@ (8001340 <__aeabi_ddiv+0x624>)
 8001120:	4451      	add	r1, sl
 8001122:	4088      	lsls	r0, r1
 8001124:	4302      	orrs	r2, r0
 8001126:	1e51      	subs	r1, r2, #1
 8001128:	418a      	sbcs	r2, r1
 800112a:	431a      	orrs	r2, r3
 800112c:	2307      	movs	r3, #7
 800112e:	0019      	movs	r1, r3
 8001130:	2400      	movs	r4, #0
 8001132:	4011      	ands	r1, r2
 8001134:	4213      	tst	r3, r2
 8001136:	d00c      	beq.n	8001152 <__aeabi_ddiv+0x436>
 8001138:	230f      	movs	r3, #15
 800113a:	4013      	ands	r3, r2
 800113c:	2b04      	cmp	r3, #4
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x426>
 8001140:	e0f9      	b.n	8001336 <__aeabi_ddiv+0x61a>
 8001142:	1d11      	adds	r1, r2, #4
 8001144:	4291      	cmp	r1, r2
 8001146:	419b      	sbcs	r3, r3
 8001148:	000a      	movs	r2, r1
 800114a:	425b      	negs	r3, r3
 800114c:	0759      	lsls	r1, r3, #29
 800114e:	025b      	lsls	r3, r3, #9
 8001150:	0b1c      	lsrs	r4, r3, #12
 8001152:	08d2      	lsrs	r2, r2, #3
 8001154:	430a      	orrs	r2, r1
 8001156:	4690      	mov	r8, r2
 8001158:	2300      	movs	r3, #0
 800115a:	e63f      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800115c:	2480      	movs	r4, #128	@ 0x80
 800115e:	464b      	mov	r3, r9
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	4223      	tst	r3, r4
 8001164:	d009      	beq.n	800117a <__aeabi_ddiv+0x45e>
 8001166:	465b      	mov	r3, fp
 8001168:	4223      	tst	r3, r4
 800116a:	d106      	bne.n	800117a <__aeabi_ddiv+0x45e>
 800116c:	431c      	orrs	r4, r3
 800116e:	0324      	lsls	r4, r4, #12
 8001170:	002e      	movs	r6, r5
 8001172:	4690      	mov	r8, r2
 8001174:	4b71      	ldr	r3, [pc, #452]	@ (800133c <__aeabi_ddiv+0x620>)
 8001176:	0b24      	lsrs	r4, r4, #12
 8001178:	e630      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800117a:	2480      	movs	r4, #128	@ 0x80
 800117c:	464b      	mov	r3, r9
 800117e:	0324      	lsls	r4, r4, #12
 8001180:	431c      	orrs	r4, r3
 8001182:	0324      	lsls	r4, r4, #12
 8001184:	9e02      	ldr	r6, [sp, #8]
 8001186:	4b6d      	ldr	r3, [pc, #436]	@ (800133c <__aeabi_ddiv+0x620>)
 8001188:	0b24      	lsrs	r4, r4, #12
 800118a:	e627      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_ddiv+0x476>
 8001190:	e700      	b.n	8000f94 <__aeabi_ddiv+0x278>
 8001192:	9800      	ldr	r0, [sp, #0]
 8001194:	1e51      	subs	r1, r2, #1
 8001196:	4684      	mov	ip, r0
 8001198:	4464      	add	r4, ip
 800119a:	4284      	cmp	r4, r0
 800119c:	d200      	bcs.n	80011a0 <__aeabi_ddiv+0x484>
 800119e:	e084      	b.n	80012aa <__aeabi_ddiv+0x58e>
 80011a0:	42bc      	cmp	r4, r7
 80011a2:	d200      	bcs.n	80011a6 <__aeabi_ddiv+0x48a>
 80011a4:	e0ae      	b.n	8001304 <__aeabi_ddiv+0x5e8>
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x48e>
 80011a8:	e0c1      	b.n	800132e <__aeabi_ddiv+0x612>
 80011aa:	000a      	movs	r2, r1
 80011ac:	e6f0      	b.n	8000f90 <__aeabi_ddiv+0x274>
 80011ae:	4542      	cmp	r2, r8
 80011b0:	d900      	bls.n	80011b4 <__aeabi_ddiv+0x498>
 80011b2:	e62c      	b.n	8000e0e <__aeabi_ddiv+0xf2>
 80011b4:	464b      	mov	r3, r9
 80011b6:	07dc      	lsls	r4, r3, #31
 80011b8:	0858      	lsrs	r0, r3, #1
 80011ba:	4643      	mov	r3, r8
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	431c      	orrs	r4, r3
 80011c0:	4643      	mov	r3, r8
 80011c2:	07df      	lsls	r7, r3, #31
 80011c4:	e62a      	b.n	8000e1c <__aeabi_ddiv+0x100>
 80011c6:	f001 f8dd 	bl	8002384 <__clzsi2>
 80011ca:	2315      	movs	r3, #21
 80011cc:	469c      	mov	ip, r3
 80011ce:	4484      	add	ip, r0
 80011d0:	0002      	movs	r2, r0
 80011d2:	4663      	mov	r3, ip
 80011d4:	3220      	adds	r2, #32
 80011d6:	2b1c      	cmp	r3, #28
 80011d8:	dc00      	bgt.n	80011dc <__aeabi_ddiv+0x4c0>
 80011da:	e72e      	b.n	800103a <__aeabi_ddiv+0x31e>
 80011dc:	0023      	movs	r3, r4
 80011de:	3808      	subs	r0, #8
 80011e0:	4083      	lsls	r3, r0
 80011e2:	4699      	mov	r9, r3
 80011e4:	2300      	movs	r3, #0
 80011e6:	4698      	mov	r8, r3
 80011e8:	e736      	b.n	8001058 <__aeabi_ddiv+0x33c>
 80011ea:	f001 f8cb 	bl	8002384 <__clzsi2>
 80011ee:	0002      	movs	r2, r0
 80011f0:	0003      	movs	r3, r0
 80011f2:	3215      	adds	r2, #21
 80011f4:	3320      	adds	r3, #32
 80011f6:	2a1c      	cmp	r2, #28
 80011f8:	dc00      	bgt.n	80011fc <__aeabi_ddiv+0x4e0>
 80011fa:	e6fb      	b.n	8000ff4 <__aeabi_ddiv+0x2d8>
 80011fc:	9900      	ldr	r1, [sp, #0]
 80011fe:	3808      	subs	r0, #8
 8001200:	4081      	lsls	r1, r0
 8001202:	2200      	movs	r2, #0
 8001204:	468b      	mov	fp, r1
 8001206:	e702      	b.n	800100e <__aeabi_ddiv+0x2f2>
 8001208:	9900      	ldr	r1, [sp, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	468c      	mov	ip, r1
 800120e:	4464      	add	r4, ip
 8001210:	42a1      	cmp	r1, r4
 8001212:	d900      	bls.n	8001216 <__aeabi_ddiv+0x4fa>
 8001214:	e69a      	b.n	8000f4c <__aeabi_ddiv+0x230>
 8001216:	42a2      	cmp	r2, r4
 8001218:	d800      	bhi.n	800121c <__aeabi_ddiv+0x500>
 800121a:	e697      	b.n	8000f4c <__aeabi_ddiv+0x230>
 800121c:	1e83      	subs	r3, r0, #2
 800121e:	4464      	add	r4, ip
 8001220:	e694      	b.n	8000f4c <__aeabi_ddiv+0x230>
 8001222:	46ac      	mov	ip, r5
 8001224:	4461      	add	r1, ip
 8001226:	3f01      	subs	r7, #1
 8001228:	428d      	cmp	r5, r1
 800122a:	d900      	bls.n	800122e <__aeabi_ddiv+0x512>
 800122c:	e680      	b.n	8000f30 <__aeabi_ddiv+0x214>
 800122e:	428a      	cmp	r2, r1
 8001230:	d800      	bhi.n	8001234 <__aeabi_ddiv+0x518>
 8001232:	e67d      	b.n	8000f30 <__aeabi_ddiv+0x214>
 8001234:	1e87      	subs	r7, r0, #2
 8001236:	4461      	add	r1, ip
 8001238:	e67a      	b.n	8000f30 <__aeabi_ddiv+0x214>
 800123a:	4285      	cmp	r5, r0
 800123c:	d000      	beq.n	8001240 <__aeabi_ddiv+0x524>
 800123e:	e65f      	b.n	8000f00 <__aeabi_ddiv+0x1e4>
 8001240:	45b9      	cmp	r9, r7
 8001242:	d900      	bls.n	8001246 <__aeabi_ddiv+0x52a>
 8001244:	e65c      	b.n	8000f00 <__aeabi_ddiv+0x1e4>
 8001246:	e656      	b.n	8000ef6 <__aeabi_ddiv+0x1da>
 8001248:	42a2      	cmp	r2, r4
 800124a:	d800      	bhi.n	800124e <__aeabi_ddiv+0x532>
 800124c:	e61a      	b.n	8000e84 <__aeabi_ddiv+0x168>
 800124e:	1e83      	subs	r3, r0, #2
 8001250:	4464      	add	r4, ip
 8001252:	e617      	b.n	8000e84 <__aeabi_ddiv+0x168>
 8001254:	428a      	cmp	r2, r1
 8001256:	d800      	bhi.n	800125a <__aeabi_ddiv+0x53e>
 8001258:	e600      	b.n	8000e5c <__aeabi_ddiv+0x140>
 800125a:	46ac      	mov	ip, r5
 800125c:	1e83      	subs	r3, r0, #2
 800125e:	4698      	mov	r8, r3
 8001260:	4461      	add	r1, ip
 8001262:	e5fb      	b.n	8000e5c <__aeabi_ddiv+0x140>
 8001264:	4837      	ldr	r0, [pc, #220]	@ (8001344 <__aeabi_ddiv+0x628>)
 8001266:	0014      	movs	r4, r2
 8001268:	4450      	add	r0, sl
 800126a:	4082      	lsls	r2, r0
 800126c:	465b      	mov	r3, fp
 800126e:	0017      	movs	r7, r2
 8001270:	4083      	lsls	r3, r0
 8001272:	40cc      	lsrs	r4, r1
 8001274:	1e7a      	subs	r2, r7, #1
 8001276:	4197      	sbcs	r7, r2
 8001278:	4323      	orrs	r3, r4
 800127a:	433b      	orrs	r3, r7
 800127c:	001a      	movs	r2, r3
 800127e:	465b      	mov	r3, fp
 8001280:	40cb      	lsrs	r3, r1
 8001282:	0751      	lsls	r1, r2, #29
 8001284:	d009      	beq.n	800129a <__aeabi_ddiv+0x57e>
 8001286:	210f      	movs	r1, #15
 8001288:	4011      	ands	r1, r2
 800128a:	2904      	cmp	r1, #4
 800128c:	d005      	beq.n	800129a <__aeabi_ddiv+0x57e>
 800128e:	1d11      	adds	r1, r2, #4
 8001290:	4291      	cmp	r1, r2
 8001292:	4192      	sbcs	r2, r2
 8001294:	4252      	negs	r2, r2
 8001296:	189b      	adds	r3, r3, r2
 8001298:	000a      	movs	r2, r1
 800129a:	0219      	lsls	r1, r3, #8
 800129c:	d400      	bmi.n	80012a0 <__aeabi_ddiv+0x584>
 800129e:	e755      	b.n	800114c <__aeabi_ddiv+0x430>
 80012a0:	2200      	movs	r2, #0
 80012a2:	2301      	movs	r3, #1
 80012a4:	2400      	movs	r4, #0
 80012a6:	4690      	mov	r8, r2
 80012a8:	e598      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 80012aa:	000a      	movs	r2, r1
 80012ac:	42bc      	cmp	r4, r7
 80012ae:	d000      	beq.n	80012b2 <__aeabi_ddiv+0x596>
 80012b0:	e66e      	b.n	8000f90 <__aeabi_ddiv+0x274>
 80012b2:	454b      	cmp	r3, r9
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x59c>
 80012b6:	e66b      	b.n	8000f90 <__aeabi_ddiv+0x274>
 80012b8:	e66c      	b.n	8000f94 <__aeabi_ddiv+0x278>
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <__aeabi_ddiv+0x62c>)
 80012bc:	4a23      	ldr	r2, [pc, #140]	@ (800134c <__aeabi_ddiv+0x630>)
 80012be:	4453      	add	r3, sl
 80012c0:	4592      	cmp	sl, r2
 80012c2:	da00      	bge.n	80012c6 <__aeabi_ddiv+0x5aa>
 80012c4:	e718      	b.n	80010f8 <__aeabi_ddiv+0x3dc>
 80012c6:	2101      	movs	r1, #1
 80012c8:	4249      	negs	r1, r1
 80012ca:	1d0a      	adds	r2, r1, #4
 80012cc:	428a      	cmp	r2, r1
 80012ce:	4189      	sbcs	r1, r1
 80012d0:	4249      	negs	r1, r1
 80012d2:	448b      	add	fp, r1
 80012d4:	e666      	b.n	8000fa4 <__aeabi_ddiv+0x288>
 80012d6:	210f      	movs	r1, #15
 80012d8:	4011      	ands	r1, r2
 80012da:	2904      	cmp	r1, #4
 80012dc:	d100      	bne.n	80012e0 <__aeabi_ddiv+0x5c4>
 80012de:	e661      	b.n	8000fa4 <__aeabi_ddiv+0x288>
 80012e0:	0011      	movs	r1, r2
 80012e2:	e7f2      	b.n	80012ca <__aeabi_ddiv+0x5ae>
 80012e4:	42bc      	cmp	r4, r7
 80012e6:	d800      	bhi.n	80012ea <__aeabi_ddiv+0x5ce>
 80012e8:	e60a      	b.n	8000f00 <__aeabi_ddiv+0x1e4>
 80012ea:	2302      	movs	r3, #2
 80012ec:	425b      	negs	r3, r3
 80012ee:	469c      	mov	ip, r3
 80012f0:	9900      	ldr	r1, [sp, #0]
 80012f2:	444f      	add	r7, r9
 80012f4:	454f      	cmp	r7, r9
 80012f6:	419b      	sbcs	r3, r3
 80012f8:	44e3      	add	fp, ip
 80012fa:	468c      	mov	ip, r1
 80012fc:	425b      	negs	r3, r3
 80012fe:	4463      	add	r3, ip
 8001300:	18c0      	adds	r0, r0, r3
 8001302:	e5ff      	b.n	8000f04 <__aeabi_ddiv+0x1e8>
 8001304:	4649      	mov	r1, r9
 8001306:	9d00      	ldr	r5, [sp, #0]
 8001308:	0048      	lsls	r0, r1, #1
 800130a:	4548      	cmp	r0, r9
 800130c:	4189      	sbcs	r1, r1
 800130e:	46ac      	mov	ip, r5
 8001310:	4249      	negs	r1, r1
 8001312:	4461      	add	r1, ip
 8001314:	4681      	mov	r9, r0
 8001316:	3a02      	subs	r2, #2
 8001318:	1864      	adds	r4, r4, r1
 800131a:	e7c7      	b.n	80012ac <__aeabi_ddiv+0x590>
 800131c:	2480      	movs	r4, #128	@ 0x80
 800131e:	465b      	mov	r3, fp
 8001320:	0324      	lsls	r4, r4, #12
 8001322:	431c      	orrs	r4, r3
 8001324:	0324      	lsls	r4, r4, #12
 8001326:	4690      	mov	r8, r2
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__aeabi_ddiv+0x620>)
 800132a:	0b24      	lsrs	r4, r4, #12
 800132c:	e556      	b.n	8000ddc <__aeabi_ddiv+0xc0>
 800132e:	4599      	cmp	r9, r3
 8001330:	d3e8      	bcc.n	8001304 <__aeabi_ddiv+0x5e8>
 8001332:	000a      	movs	r2, r1
 8001334:	e7bd      	b.n	80012b2 <__aeabi_ddiv+0x596>
 8001336:	2300      	movs	r3, #0
 8001338:	e708      	b.n	800114c <__aeabi_ddiv+0x430>
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	000007ff 	.word	0x000007ff
 8001340:	0000043e 	.word	0x0000043e
 8001344:	0000041e 	.word	0x0000041e
 8001348:	000003ff 	.word	0x000003ff
 800134c:	fffffc02 	.word	0xfffffc02

08001350 <__eqdf2>:
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001352:	4657      	mov	r7, sl
 8001354:	46de      	mov	lr, fp
 8001356:	464e      	mov	r6, r9
 8001358:	4645      	mov	r5, r8
 800135a:	b5e0      	push	{r5, r6, r7, lr}
 800135c:	000d      	movs	r5, r1
 800135e:	0004      	movs	r4, r0
 8001360:	0fe8      	lsrs	r0, r5, #31
 8001362:	4683      	mov	fp, r0
 8001364:	0309      	lsls	r1, r1, #12
 8001366:	0fd8      	lsrs	r0, r3, #31
 8001368:	0b09      	lsrs	r1, r1, #12
 800136a:	4682      	mov	sl, r0
 800136c:	4819      	ldr	r0, [pc, #100]	@ (80013d4 <__eqdf2+0x84>)
 800136e:	468c      	mov	ip, r1
 8001370:	031f      	lsls	r7, r3, #12
 8001372:	0069      	lsls	r1, r5, #1
 8001374:	005e      	lsls	r6, r3, #1
 8001376:	0d49      	lsrs	r1, r1, #21
 8001378:	0b3f      	lsrs	r7, r7, #12
 800137a:	0d76      	lsrs	r6, r6, #21
 800137c:	4281      	cmp	r1, r0
 800137e:	d018      	beq.n	80013b2 <__eqdf2+0x62>
 8001380:	4286      	cmp	r6, r0
 8001382:	d00f      	beq.n	80013a4 <__eqdf2+0x54>
 8001384:	2001      	movs	r0, #1
 8001386:	42b1      	cmp	r1, r6
 8001388:	d10d      	bne.n	80013a6 <__eqdf2+0x56>
 800138a:	45bc      	cmp	ip, r7
 800138c:	d10b      	bne.n	80013a6 <__eqdf2+0x56>
 800138e:	4294      	cmp	r4, r2
 8001390:	d109      	bne.n	80013a6 <__eqdf2+0x56>
 8001392:	45d3      	cmp	fp, sl
 8001394:	d01c      	beq.n	80013d0 <__eqdf2+0x80>
 8001396:	2900      	cmp	r1, #0
 8001398:	d105      	bne.n	80013a6 <__eqdf2+0x56>
 800139a:	4660      	mov	r0, ip
 800139c:	4320      	orrs	r0, r4
 800139e:	1e43      	subs	r3, r0, #1
 80013a0:	4198      	sbcs	r0, r3
 80013a2:	e000      	b.n	80013a6 <__eqdf2+0x56>
 80013a4:	2001      	movs	r0, #1
 80013a6:	bcf0      	pop	{r4, r5, r6, r7}
 80013a8:	46bb      	mov	fp, r7
 80013aa:	46b2      	mov	sl, r6
 80013ac:	46a9      	mov	r9, r5
 80013ae:	46a0      	mov	r8, r4
 80013b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b2:	2001      	movs	r0, #1
 80013b4:	428e      	cmp	r6, r1
 80013b6:	d1f6      	bne.n	80013a6 <__eqdf2+0x56>
 80013b8:	4661      	mov	r1, ip
 80013ba:	4339      	orrs	r1, r7
 80013bc:	000f      	movs	r7, r1
 80013be:	4317      	orrs	r7, r2
 80013c0:	4327      	orrs	r7, r4
 80013c2:	d1f0      	bne.n	80013a6 <__eqdf2+0x56>
 80013c4:	465b      	mov	r3, fp
 80013c6:	4652      	mov	r2, sl
 80013c8:	1a98      	subs	r0, r3, r2
 80013ca:	1e43      	subs	r3, r0, #1
 80013cc:	4198      	sbcs	r0, r3
 80013ce:	e7ea      	b.n	80013a6 <__eqdf2+0x56>
 80013d0:	2000      	movs	r0, #0
 80013d2:	e7e8      	b.n	80013a6 <__eqdf2+0x56>
 80013d4:	000007ff 	.word	0x000007ff

080013d8 <__gedf2>:
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	4657      	mov	r7, sl
 80013dc:	464e      	mov	r6, r9
 80013de:	4645      	mov	r5, r8
 80013e0:	46de      	mov	lr, fp
 80013e2:	b5e0      	push	{r5, r6, r7, lr}
 80013e4:	000d      	movs	r5, r1
 80013e6:	030f      	lsls	r7, r1, #12
 80013e8:	0b39      	lsrs	r1, r7, #12
 80013ea:	b083      	sub	sp, #12
 80013ec:	0004      	movs	r4, r0
 80013ee:	4680      	mov	r8, r0
 80013f0:	9101      	str	r1, [sp, #4]
 80013f2:	0058      	lsls	r0, r3, #1
 80013f4:	0fe9      	lsrs	r1, r5, #31
 80013f6:	4f31      	ldr	r7, [pc, #196]	@ (80014bc <__gedf2+0xe4>)
 80013f8:	0d40      	lsrs	r0, r0, #21
 80013fa:	468c      	mov	ip, r1
 80013fc:	006e      	lsls	r6, r5, #1
 80013fe:	0319      	lsls	r1, r3, #12
 8001400:	4682      	mov	sl, r0
 8001402:	4691      	mov	r9, r2
 8001404:	0d76      	lsrs	r6, r6, #21
 8001406:	0b09      	lsrs	r1, r1, #12
 8001408:	0fd8      	lsrs	r0, r3, #31
 800140a:	42be      	cmp	r6, r7
 800140c:	d01f      	beq.n	800144e <__gedf2+0x76>
 800140e:	45ba      	cmp	sl, r7
 8001410:	d00f      	beq.n	8001432 <__gedf2+0x5a>
 8001412:	2e00      	cmp	r6, #0
 8001414:	d12f      	bne.n	8001476 <__gedf2+0x9e>
 8001416:	4655      	mov	r5, sl
 8001418:	9e01      	ldr	r6, [sp, #4]
 800141a:	4334      	orrs	r4, r6
 800141c:	2d00      	cmp	r5, #0
 800141e:	d127      	bne.n	8001470 <__gedf2+0x98>
 8001420:	430a      	orrs	r2, r1
 8001422:	d03a      	beq.n	800149a <__gedf2+0xc2>
 8001424:	2c00      	cmp	r4, #0
 8001426:	d145      	bne.n	80014b4 <__gedf2+0xdc>
 8001428:	2800      	cmp	r0, #0
 800142a:	d11a      	bne.n	8001462 <__gedf2+0x8a>
 800142c:	2001      	movs	r0, #1
 800142e:	4240      	negs	r0, r0
 8001430:	e017      	b.n	8001462 <__gedf2+0x8a>
 8001432:	4311      	orrs	r1, r2
 8001434:	d13b      	bne.n	80014ae <__gedf2+0xd6>
 8001436:	2e00      	cmp	r6, #0
 8001438:	d102      	bne.n	8001440 <__gedf2+0x68>
 800143a:	9f01      	ldr	r7, [sp, #4]
 800143c:	4327      	orrs	r7, r4
 800143e:	d0f3      	beq.n	8001428 <__gedf2+0x50>
 8001440:	4584      	cmp	ip, r0
 8001442:	d109      	bne.n	8001458 <__gedf2+0x80>
 8001444:	4663      	mov	r3, ip
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <__gedf2+0x54>
 800144a:	4660      	mov	r0, ip
 800144c:	e009      	b.n	8001462 <__gedf2+0x8a>
 800144e:	9f01      	ldr	r7, [sp, #4]
 8001450:	4327      	orrs	r7, r4
 8001452:	d12c      	bne.n	80014ae <__gedf2+0xd6>
 8001454:	45b2      	cmp	sl, r6
 8001456:	d024      	beq.n	80014a2 <__gedf2+0xca>
 8001458:	4663      	mov	r3, ip
 800145a:	2002      	movs	r0, #2
 800145c:	3b01      	subs	r3, #1
 800145e:	4018      	ands	r0, r3
 8001460:	3801      	subs	r0, #1
 8001462:	b003      	add	sp, #12
 8001464:	bcf0      	pop	{r4, r5, r6, r7}
 8001466:	46bb      	mov	fp, r7
 8001468:	46b2      	mov	sl, r6
 800146a:	46a9      	mov	r9, r5
 800146c:	46a0      	mov	r8, r4
 800146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001470:	2c00      	cmp	r4, #0
 8001472:	d0d9      	beq.n	8001428 <__gedf2+0x50>
 8001474:	e7e4      	b.n	8001440 <__gedf2+0x68>
 8001476:	4654      	mov	r4, sl
 8001478:	2c00      	cmp	r4, #0
 800147a:	d0ed      	beq.n	8001458 <__gedf2+0x80>
 800147c:	4584      	cmp	ip, r0
 800147e:	d1eb      	bne.n	8001458 <__gedf2+0x80>
 8001480:	4556      	cmp	r6, sl
 8001482:	dce9      	bgt.n	8001458 <__gedf2+0x80>
 8001484:	dbde      	blt.n	8001444 <__gedf2+0x6c>
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	428b      	cmp	r3, r1
 800148a:	d8e5      	bhi.n	8001458 <__gedf2+0x80>
 800148c:	d1da      	bne.n	8001444 <__gedf2+0x6c>
 800148e:	45c8      	cmp	r8, r9
 8001490:	d8e2      	bhi.n	8001458 <__gedf2+0x80>
 8001492:	2000      	movs	r0, #0
 8001494:	45c8      	cmp	r8, r9
 8001496:	d2e4      	bcs.n	8001462 <__gedf2+0x8a>
 8001498:	e7d4      	b.n	8001444 <__gedf2+0x6c>
 800149a:	2000      	movs	r0, #0
 800149c:	2c00      	cmp	r4, #0
 800149e:	d0e0      	beq.n	8001462 <__gedf2+0x8a>
 80014a0:	e7da      	b.n	8001458 <__gedf2+0x80>
 80014a2:	4311      	orrs	r1, r2
 80014a4:	d103      	bne.n	80014ae <__gedf2+0xd6>
 80014a6:	4584      	cmp	ip, r0
 80014a8:	d1d6      	bne.n	8001458 <__gedf2+0x80>
 80014aa:	2000      	movs	r0, #0
 80014ac:	e7d9      	b.n	8001462 <__gedf2+0x8a>
 80014ae:	2002      	movs	r0, #2
 80014b0:	4240      	negs	r0, r0
 80014b2:	e7d6      	b.n	8001462 <__gedf2+0x8a>
 80014b4:	4584      	cmp	ip, r0
 80014b6:	d0e6      	beq.n	8001486 <__gedf2+0xae>
 80014b8:	e7ce      	b.n	8001458 <__gedf2+0x80>
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	000007ff 	.word	0x000007ff

080014c0 <__ledf2>:
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	4657      	mov	r7, sl
 80014c4:	464e      	mov	r6, r9
 80014c6:	4645      	mov	r5, r8
 80014c8:	46de      	mov	lr, fp
 80014ca:	b5e0      	push	{r5, r6, r7, lr}
 80014cc:	000d      	movs	r5, r1
 80014ce:	030f      	lsls	r7, r1, #12
 80014d0:	0004      	movs	r4, r0
 80014d2:	4680      	mov	r8, r0
 80014d4:	0fe8      	lsrs	r0, r5, #31
 80014d6:	0b39      	lsrs	r1, r7, #12
 80014d8:	4684      	mov	ip, r0
 80014da:	b083      	sub	sp, #12
 80014dc:	0058      	lsls	r0, r3, #1
 80014de:	4f30      	ldr	r7, [pc, #192]	@ (80015a0 <__ledf2+0xe0>)
 80014e0:	0d40      	lsrs	r0, r0, #21
 80014e2:	9101      	str	r1, [sp, #4]
 80014e4:	031e      	lsls	r6, r3, #12
 80014e6:	0069      	lsls	r1, r5, #1
 80014e8:	4682      	mov	sl, r0
 80014ea:	4691      	mov	r9, r2
 80014ec:	0d49      	lsrs	r1, r1, #21
 80014ee:	0b36      	lsrs	r6, r6, #12
 80014f0:	0fd8      	lsrs	r0, r3, #31
 80014f2:	42b9      	cmp	r1, r7
 80014f4:	d020      	beq.n	8001538 <__ledf2+0x78>
 80014f6:	45ba      	cmp	sl, r7
 80014f8:	d00f      	beq.n	800151a <__ledf2+0x5a>
 80014fa:	2900      	cmp	r1, #0
 80014fc:	d12b      	bne.n	8001556 <__ledf2+0x96>
 80014fe:	9901      	ldr	r1, [sp, #4]
 8001500:	430c      	orrs	r4, r1
 8001502:	4651      	mov	r1, sl
 8001504:	2900      	cmp	r1, #0
 8001506:	d137      	bne.n	8001578 <__ledf2+0xb8>
 8001508:	4332      	orrs	r2, r6
 800150a:	d038      	beq.n	800157e <__ledf2+0xbe>
 800150c:	2c00      	cmp	r4, #0
 800150e:	d144      	bne.n	800159a <__ledf2+0xda>
 8001510:	2800      	cmp	r0, #0
 8001512:	d119      	bne.n	8001548 <__ledf2+0x88>
 8001514:	2001      	movs	r0, #1
 8001516:	4240      	negs	r0, r0
 8001518:	e016      	b.n	8001548 <__ledf2+0x88>
 800151a:	4316      	orrs	r6, r2
 800151c:	d113      	bne.n	8001546 <__ledf2+0x86>
 800151e:	2900      	cmp	r1, #0
 8001520:	d102      	bne.n	8001528 <__ledf2+0x68>
 8001522:	9f01      	ldr	r7, [sp, #4]
 8001524:	4327      	orrs	r7, r4
 8001526:	d0f3      	beq.n	8001510 <__ledf2+0x50>
 8001528:	4584      	cmp	ip, r0
 800152a:	d020      	beq.n	800156e <__ledf2+0xae>
 800152c:	4663      	mov	r3, ip
 800152e:	2002      	movs	r0, #2
 8001530:	3b01      	subs	r3, #1
 8001532:	4018      	ands	r0, r3
 8001534:	3801      	subs	r0, #1
 8001536:	e007      	b.n	8001548 <__ledf2+0x88>
 8001538:	9f01      	ldr	r7, [sp, #4]
 800153a:	4327      	orrs	r7, r4
 800153c:	d103      	bne.n	8001546 <__ledf2+0x86>
 800153e:	458a      	cmp	sl, r1
 8001540:	d1f4      	bne.n	800152c <__ledf2+0x6c>
 8001542:	4316      	orrs	r6, r2
 8001544:	d01f      	beq.n	8001586 <__ledf2+0xc6>
 8001546:	2002      	movs	r0, #2
 8001548:	b003      	add	sp, #12
 800154a:	bcf0      	pop	{r4, r5, r6, r7}
 800154c:	46bb      	mov	fp, r7
 800154e:	46b2      	mov	sl, r6
 8001550:	46a9      	mov	r9, r5
 8001552:	46a0      	mov	r8, r4
 8001554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001556:	4654      	mov	r4, sl
 8001558:	2c00      	cmp	r4, #0
 800155a:	d0e7      	beq.n	800152c <__ledf2+0x6c>
 800155c:	4584      	cmp	ip, r0
 800155e:	d1e5      	bne.n	800152c <__ledf2+0x6c>
 8001560:	4551      	cmp	r1, sl
 8001562:	dce3      	bgt.n	800152c <__ledf2+0x6c>
 8001564:	db03      	blt.n	800156e <__ledf2+0xae>
 8001566:	9b01      	ldr	r3, [sp, #4]
 8001568:	42b3      	cmp	r3, r6
 800156a:	d8df      	bhi.n	800152c <__ledf2+0x6c>
 800156c:	d00f      	beq.n	800158e <__ledf2+0xce>
 800156e:	4663      	mov	r3, ip
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0cf      	beq.n	8001514 <__ledf2+0x54>
 8001574:	4660      	mov	r0, ip
 8001576:	e7e7      	b.n	8001548 <__ledf2+0x88>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d0c9      	beq.n	8001510 <__ledf2+0x50>
 800157c:	e7d4      	b.n	8001528 <__ledf2+0x68>
 800157e:	2000      	movs	r0, #0
 8001580:	2c00      	cmp	r4, #0
 8001582:	d0e1      	beq.n	8001548 <__ledf2+0x88>
 8001584:	e7d2      	b.n	800152c <__ledf2+0x6c>
 8001586:	4584      	cmp	ip, r0
 8001588:	d1d0      	bne.n	800152c <__ledf2+0x6c>
 800158a:	2000      	movs	r0, #0
 800158c:	e7dc      	b.n	8001548 <__ledf2+0x88>
 800158e:	45c8      	cmp	r8, r9
 8001590:	d8cc      	bhi.n	800152c <__ledf2+0x6c>
 8001592:	2000      	movs	r0, #0
 8001594:	45c8      	cmp	r8, r9
 8001596:	d2d7      	bcs.n	8001548 <__ledf2+0x88>
 8001598:	e7e9      	b.n	800156e <__ledf2+0xae>
 800159a:	4584      	cmp	ip, r0
 800159c:	d0e3      	beq.n	8001566 <__ledf2+0xa6>
 800159e:	e7c5      	b.n	800152c <__ledf2+0x6c>
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__aeabi_dmul>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4657      	mov	r7, sl
 80015a8:	46de      	mov	lr, fp
 80015aa:	464e      	mov	r6, r9
 80015ac:	4645      	mov	r5, r8
 80015ae:	b5e0      	push	{r5, r6, r7, lr}
 80015b0:	001f      	movs	r7, r3
 80015b2:	030b      	lsls	r3, r1, #12
 80015b4:	0b1b      	lsrs	r3, r3, #12
 80015b6:	0016      	movs	r6, r2
 80015b8:	469a      	mov	sl, r3
 80015ba:	0fca      	lsrs	r2, r1, #31
 80015bc:	004b      	lsls	r3, r1, #1
 80015be:	0004      	movs	r4, r0
 80015c0:	4693      	mov	fp, r2
 80015c2:	b087      	sub	sp, #28
 80015c4:	0d5b      	lsrs	r3, r3, #21
 80015c6:	d100      	bne.n	80015ca <__aeabi_dmul+0x26>
 80015c8:	e0d5      	b.n	8001776 <__aeabi_dmul+0x1d2>
 80015ca:	4abb      	ldr	r2, [pc, #748]	@ (80018b8 <__aeabi_dmul+0x314>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2e>
 80015d0:	e0f8      	b.n	80017c4 <__aeabi_dmul+0x220>
 80015d2:	4651      	mov	r1, sl
 80015d4:	0f42      	lsrs	r2, r0, #29
 80015d6:	00c9      	lsls	r1, r1, #3
 80015d8:	430a      	orrs	r2, r1
 80015da:	2180      	movs	r1, #128	@ 0x80
 80015dc:	0409      	lsls	r1, r1, #16
 80015de:	4311      	orrs	r1, r2
 80015e0:	00c2      	lsls	r2, r0, #3
 80015e2:	4691      	mov	r9, r2
 80015e4:	4ab5      	ldr	r2, [pc, #724]	@ (80018bc <__aeabi_dmul+0x318>)
 80015e6:	468a      	mov	sl, r1
 80015e8:	189d      	adds	r5, r3, r2
 80015ea:	2300      	movs	r3, #0
 80015ec:	4698      	mov	r8, r3
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	033c      	lsls	r4, r7, #12
 80015f2:	007b      	lsls	r3, r7, #1
 80015f4:	0ffa      	lsrs	r2, r7, #31
 80015f6:	0030      	movs	r0, r6
 80015f8:	0b24      	lsrs	r4, r4, #12
 80015fa:	0d5b      	lsrs	r3, r3, #21
 80015fc:	9200      	str	r2, [sp, #0]
 80015fe:	d100      	bne.n	8001602 <__aeabi_dmul+0x5e>
 8001600:	e096      	b.n	8001730 <__aeabi_dmul+0x18c>
 8001602:	4aad      	ldr	r2, [pc, #692]	@ (80018b8 <__aeabi_dmul+0x314>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d031      	beq.n	800166c <__aeabi_dmul+0xc8>
 8001608:	0f72      	lsrs	r2, r6, #29
 800160a:	00e4      	lsls	r4, r4, #3
 800160c:	4322      	orrs	r2, r4
 800160e:	2480      	movs	r4, #128	@ 0x80
 8001610:	0424      	lsls	r4, r4, #16
 8001612:	4314      	orrs	r4, r2
 8001614:	4aa9      	ldr	r2, [pc, #676]	@ (80018bc <__aeabi_dmul+0x318>)
 8001616:	00f0      	lsls	r0, r6, #3
 8001618:	4694      	mov	ip, r2
 800161a:	4463      	add	r3, ip
 800161c:	195b      	adds	r3, r3, r5
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	9201      	str	r2, [sp, #4]
 8001622:	4642      	mov	r2, r8
 8001624:	2600      	movs	r6, #0
 8001626:	2a0a      	cmp	r2, #10
 8001628:	dc42      	bgt.n	80016b0 <__aeabi_dmul+0x10c>
 800162a:	465a      	mov	r2, fp
 800162c:	9900      	ldr	r1, [sp, #0]
 800162e:	404a      	eors	r2, r1
 8001630:	4693      	mov	fp, r2
 8001632:	4642      	mov	r2, r8
 8001634:	2a02      	cmp	r2, #2
 8001636:	dc32      	bgt.n	800169e <__aeabi_dmul+0xfa>
 8001638:	3a01      	subs	r2, #1
 800163a:	2a01      	cmp	r2, #1
 800163c:	d900      	bls.n	8001640 <__aeabi_dmul+0x9c>
 800163e:	e149      	b.n	80018d4 <__aeabi_dmul+0x330>
 8001640:	2e02      	cmp	r6, #2
 8001642:	d100      	bne.n	8001646 <__aeabi_dmul+0xa2>
 8001644:	e0ca      	b.n	80017dc <__aeabi_dmul+0x238>
 8001646:	2e01      	cmp	r6, #1
 8001648:	d13d      	bne.n	80016c6 <__aeabi_dmul+0x122>
 800164a:	2300      	movs	r3, #0
 800164c:	2400      	movs	r4, #0
 800164e:	2200      	movs	r2, #0
 8001650:	0010      	movs	r0, r2
 8001652:	465a      	mov	r2, fp
 8001654:	051b      	lsls	r3, r3, #20
 8001656:	4323      	orrs	r3, r4
 8001658:	07d2      	lsls	r2, r2, #31
 800165a:	4313      	orrs	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	b007      	add	sp, #28
 8001660:	bcf0      	pop	{r4, r5, r6, r7}
 8001662:	46bb      	mov	fp, r7
 8001664:	46b2      	mov	sl, r6
 8001666:	46a9      	mov	r9, r5
 8001668:	46a0      	mov	r8, r4
 800166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166c:	4b92      	ldr	r3, [pc, #584]	@ (80018b8 <__aeabi_dmul+0x314>)
 800166e:	4326      	orrs	r6, r4
 8001670:	18eb      	adds	r3, r5, r3
 8001672:	2e00      	cmp	r6, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_dmul+0xd4>
 8001676:	e0bb      	b.n	80017f0 <__aeabi_dmul+0x24c>
 8001678:	2203      	movs	r2, #3
 800167a:	4641      	mov	r1, r8
 800167c:	4311      	orrs	r1, r2
 800167e:	465a      	mov	r2, fp
 8001680:	4688      	mov	r8, r1
 8001682:	9900      	ldr	r1, [sp, #0]
 8001684:	404a      	eors	r2, r1
 8001686:	2180      	movs	r1, #128	@ 0x80
 8001688:	0109      	lsls	r1, r1, #4
 800168a:	468c      	mov	ip, r1
 800168c:	0029      	movs	r1, r5
 800168e:	4461      	add	r1, ip
 8001690:	9101      	str	r1, [sp, #4]
 8001692:	4641      	mov	r1, r8
 8001694:	290a      	cmp	r1, #10
 8001696:	dd00      	ble.n	800169a <__aeabi_dmul+0xf6>
 8001698:	e233      	b.n	8001b02 <__aeabi_dmul+0x55e>
 800169a:	4693      	mov	fp, r2
 800169c:	2603      	movs	r6, #3
 800169e:	4642      	mov	r2, r8
 80016a0:	2701      	movs	r7, #1
 80016a2:	4097      	lsls	r7, r2
 80016a4:	21a6      	movs	r1, #166	@ 0xa6
 80016a6:	003a      	movs	r2, r7
 80016a8:	00c9      	lsls	r1, r1, #3
 80016aa:	400a      	ands	r2, r1
 80016ac:	420f      	tst	r7, r1
 80016ae:	d031      	beq.n	8001714 <__aeabi_dmul+0x170>
 80016b0:	9e02      	ldr	r6, [sp, #8]
 80016b2:	2e02      	cmp	r6, #2
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x114>
 80016b6:	e235      	b.n	8001b24 <__aeabi_dmul+0x580>
 80016b8:	2e03      	cmp	r6, #3
 80016ba:	d100      	bne.n	80016be <__aeabi_dmul+0x11a>
 80016bc:	e1d2      	b.n	8001a64 <__aeabi_dmul+0x4c0>
 80016be:	4654      	mov	r4, sl
 80016c0:	4648      	mov	r0, r9
 80016c2:	2e01      	cmp	r6, #1
 80016c4:	d0c1      	beq.n	800164a <__aeabi_dmul+0xa6>
 80016c6:	9a01      	ldr	r2, [sp, #4]
 80016c8:	4b7d      	ldr	r3, [pc, #500]	@ (80018c0 <__aeabi_dmul+0x31c>)
 80016ca:	4694      	mov	ip, r2
 80016cc:	4463      	add	r3, ip
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	dc00      	bgt.n	80016d4 <__aeabi_dmul+0x130>
 80016d2:	e0c0      	b.n	8001856 <__aeabi_dmul+0x2b2>
 80016d4:	0742      	lsls	r2, r0, #29
 80016d6:	d009      	beq.n	80016ec <__aeabi_dmul+0x148>
 80016d8:	220f      	movs	r2, #15
 80016da:	4002      	ands	r2, r0
 80016dc:	2a04      	cmp	r2, #4
 80016de:	d005      	beq.n	80016ec <__aeabi_dmul+0x148>
 80016e0:	1d02      	adds	r2, r0, #4
 80016e2:	4282      	cmp	r2, r0
 80016e4:	4180      	sbcs	r0, r0
 80016e6:	4240      	negs	r0, r0
 80016e8:	1824      	adds	r4, r4, r0
 80016ea:	0010      	movs	r0, r2
 80016ec:	01e2      	lsls	r2, r4, #7
 80016ee:	d506      	bpl.n	80016fe <__aeabi_dmul+0x15a>
 80016f0:	4b74      	ldr	r3, [pc, #464]	@ (80018c4 <__aeabi_dmul+0x320>)
 80016f2:	9a01      	ldr	r2, [sp, #4]
 80016f4:	401c      	ands	r4, r3
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	4694      	mov	ip, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4463      	add	r3, ip
 80016fe:	4a72      	ldr	r2, [pc, #456]	@ (80018c8 <__aeabi_dmul+0x324>)
 8001700:	4293      	cmp	r3, r2
 8001702:	dc6b      	bgt.n	80017dc <__aeabi_dmul+0x238>
 8001704:	0762      	lsls	r2, r4, #29
 8001706:	08c0      	lsrs	r0, r0, #3
 8001708:	0264      	lsls	r4, r4, #9
 800170a:	055b      	lsls	r3, r3, #21
 800170c:	4302      	orrs	r2, r0
 800170e:	0b24      	lsrs	r4, r4, #12
 8001710:	0d5b      	lsrs	r3, r3, #21
 8001712:	e79d      	b.n	8001650 <__aeabi_dmul+0xac>
 8001714:	2190      	movs	r1, #144	@ 0x90
 8001716:	0089      	lsls	r1, r1, #2
 8001718:	420f      	tst	r7, r1
 800171a:	d163      	bne.n	80017e4 <__aeabi_dmul+0x240>
 800171c:	2288      	movs	r2, #136	@ 0x88
 800171e:	423a      	tst	r2, r7
 8001720:	d100      	bne.n	8001724 <__aeabi_dmul+0x180>
 8001722:	e0d7      	b.n	80018d4 <__aeabi_dmul+0x330>
 8001724:	9b00      	ldr	r3, [sp, #0]
 8001726:	46a2      	mov	sl, r4
 8001728:	469b      	mov	fp, r3
 800172a:	4681      	mov	r9, r0
 800172c:	9602      	str	r6, [sp, #8]
 800172e:	e7bf      	b.n	80016b0 <__aeabi_dmul+0x10c>
 8001730:	0023      	movs	r3, r4
 8001732:	4333      	orrs	r3, r6
 8001734:	d100      	bne.n	8001738 <__aeabi_dmul+0x194>
 8001736:	e07f      	b.n	8001838 <__aeabi_dmul+0x294>
 8001738:	2c00      	cmp	r4, #0
 800173a:	d100      	bne.n	800173e <__aeabi_dmul+0x19a>
 800173c:	e1ad      	b.n	8001a9a <__aeabi_dmul+0x4f6>
 800173e:	0020      	movs	r0, r4
 8001740:	f000 fe20 	bl	8002384 <__clzsi2>
 8001744:	0002      	movs	r2, r0
 8001746:	0003      	movs	r3, r0
 8001748:	3a0b      	subs	r2, #11
 800174a:	201d      	movs	r0, #29
 800174c:	0019      	movs	r1, r3
 800174e:	1a82      	subs	r2, r0, r2
 8001750:	0030      	movs	r0, r6
 8001752:	3908      	subs	r1, #8
 8001754:	40d0      	lsrs	r0, r2
 8001756:	408c      	lsls	r4, r1
 8001758:	4304      	orrs	r4, r0
 800175a:	0030      	movs	r0, r6
 800175c:	4088      	lsls	r0, r1
 800175e:	4a5b      	ldr	r2, [pc, #364]	@ (80018cc <__aeabi_dmul+0x328>)
 8001760:	1aeb      	subs	r3, r5, r3
 8001762:	4694      	mov	ip, r2
 8001764:	4463      	add	r3, ip
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	4642      	mov	r2, r8
 800176c:	2600      	movs	r6, #0
 800176e:	2a0a      	cmp	r2, #10
 8001770:	dc00      	bgt.n	8001774 <__aeabi_dmul+0x1d0>
 8001772:	e75a      	b.n	800162a <__aeabi_dmul+0x86>
 8001774:	e79c      	b.n	80016b0 <__aeabi_dmul+0x10c>
 8001776:	4653      	mov	r3, sl
 8001778:	4303      	orrs	r3, r0
 800177a:	4699      	mov	r9, r3
 800177c:	d054      	beq.n	8001828 <__aeabi_dmul+0x284>
 800177e:	4653      	mov	r3, sl
 8001780:	2b00      	cmp	r3, #0
 8001782:	d100      	bne.n	8001786 <__aeabi_dmul+0x1e2>
 8001784:	e177      	b.n	8001a76 <__aeabi_dmul+0x4d2>
 8001786:	4650      	mov	r0, sl
 8001788:	f000 fdfc 	bl	8002384 <__clzsi2>
 800178c:	230b      	movs	r3, #11
 800178e:	425b      	negs	r3, r3
 8001790:	469c      	mov	ip, r3
 8001792:	0002      	movs	r2, r0
 8001794:	4484      	add	ip, r0
 8001796:	0011      	movs	r1, r2
 8001798:	4650      	mov	r0, sl
 800179a:	3908      	subs	r1, #8
 800179c:	4088      	lsls	r0, r1
 800179e:	231d      	movs	r3, #29
 80017a0:	4680      	mov	r8, r0
 80017a2:	4660      	mov	r0, ip
 80017a4:	1a1b      	subs	r3, r3, r0
 80017a6:	0020      	movs	r0, r4
 80017a8:	40d8      	lsrs	r0, r3
 80017aa:	0003      	movs	r3, r0
 80017ac:	4640      	mov	r0, r8
 80017ae:	4303      	orrs	r3, r0
 80017b0:	469a      	mov	sl, r3
 80017b2:	0023      	movs	r3, r4
 80017b4:	408b      	lsls	r3, r1
 80017b6:	4699      	mov	r9, r3
 80017b8:	2300      	movs	r3, #0
 80017ba:	4d44      	ldr	r5, [pc, #272]	@ (80018cc <__aeabi_dmul+0x328>)
 80017bc:	4698      	mov	r8, r3
 80017be:	1aad      	subs	r5, r5, r2
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	e715      	b.n	80015f0 <__aeabi_dmul+0x4c>
 80017c4:	4652      	mov	r2, sl
 80017c6:	4302      	orrs	r2, r0
 80017c8:	4691      	mov	r9, r2
 80017ca:	d126      	bne.n	800181a <__aeabi_dmul+0x276>
 80017cc:	2200      	movs	r2, #0
 80017ce:	001d      	movs	r5, r3
 80017d0:	2302      	movs	r3, #2
 80017d2:	4692      	mov	sl, r2
 80017d4:	3208      	adds	r2, #8
 80017d6:	4690      	mov	r8, r2
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	e709      	b.n	80015f0 <__aeabi_dmul+0x4c>
 80017dc:	2400      	movs	r4, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <__aeabi_dmul+0x314>)
 80017e2:	e735      	b.n	8001650 <__aeabi_dmul+0xac>
 80017e4:	2300      	movs	r3, #0
 80017e6:	2480      	movs	r4, #128	@ 0x80
 80017e8:	469b      	mov	fp, r3
 80017ea:	0324      	lsls	r4, r4, #12
 80017ec:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <__aeabi_dmul+0x314>)
 80017ee:	e72f      	b.n	8001650 <__aeabi_dmul+0xac>
 80017f0:	2202      	movs	r2, #2
 80017f2:	4641      	mov	r1, r8
 80017f4:	4311      	orrs	r1, r2
 80017f6:	2280      	movs	r2, #128	@ 0x80
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	4694      	mov	ip, r2
 80017fc:	002a      	movs	r2, r5
 80017fe:	4462      	add	r2, ip
 8001800:	4688      	mov	r8, r1
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	290a      	cmp	r1, #10
 8001806:	dd00      	ble.n	800180a <__aeabi_dmul+0x266>
 8001808:	e752      	b.n	80016b0 <__aeabi_dmul+0x10c>
 800180a:	465a      	mov	r2, fp
 800180c:	2000      	movs	r0, #0
 800180e:	9900      	ldr	r1, [sp, #0]
 8001810:	0004      	movs	r4, r0
 8001812:	404a      	eors	r2, r1
 8001814:	4693      	mov	fp, r2
 8001816:	2602      	movs	r6, #2
 8001818:	e70b      	b.n	8001632 <__aeabi_dmul+0x8e>
 800181a:	220c      	movs	r2, #12
 800181c:	001d      	movs	r5, r3
 800181e:	2303      	movs	r3, #3
 8001820:	4681      	mov	r9, r0
 8001822:	4690      	mov	r8, r2
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	e6e3      	b.n	80015f0 <__aeabi_dmul+0x4c>
 8001828:	2300      	movs	r3, #0
 800182a:	469a      	mov	sl, r3
 800182c:	3304      	adds	r3, #4
 800182e:	4698      	mov	r8, r3
 8001830:	3b03      	subs	r3, #3
 8001832:	2500      	movs	r5, #0
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	e6db      	b.n	80015f0 <__aeabi_dmul+0x4c>
 8001838:	4642      	mov	r2, r8
 800183a:	3301      	adds	r3, #1
 800183c:	431a      	orrs	r2, r3
 800183e:	002b      	movs	r3, r5
 8001840:	4690      	mov	r8, r2
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	9201      	str	r2, [sp, #4]
 8001846:	4642      	mov	r2, r8
 8001848:	2400      	movs	r4, #0
 800184a:	2000      	movs	r0, #0
 800184c:	2601      	movs	r6, #1
 800184e:	2a0a      	cmp	r2, #10
 8001850:	dc00      	bgt.n	8001854 <__aeabi_dmul+0x2b0>
 8001852:	e6ea      	b.n	800162a <__aeabi_dmul+0x86>
 8001854:	e72c      	b.n	80016b0 <__aeabi_dmul+0x10c>
 8001856:	2201      	movs	r2, #1
 8001858:	1ad2      	subs	r2, r2, r3
 800185a:	2a38      	cmp	r2, #56	@ 0x38
 800185c:	dd00      	ble.n	8001860 <__aeabi_dmul+0x2bc>
 800185e:	e6f4      	b.n	800164a <__aeabi_dmul+0xa6>
 8001860:	2a1f      	cmp	r2, #31
 8001862:	dc00      	bgt.n	8001866 <__aeabi_dmul+0x2c2>
 8001864:	e12a      	b.n	8001abc <__aeabi_dmul+0x518>
 8001866:	211f      	movs	r1, #31
 8001868:	4249      	negs	r1, r1
 800186a:	1acb      	subs	r3, r1, r3
 800186c:	0021      	movs	r1, r4
 800186e:	40d9      	lsrs	r1, r3
 8001870:	000b      	movs	r3, r1
 8001872:	2a20      	cmp	r2, #32
 8001874:	d005      	beq.n	8001882 <__aeabi_dmul+0x2de>
 8001876:	4a16      	ldr	r2, [pc, #88]	@ (80018d0 <__aeabi_dmul+0x32c>)
 8001878:	9d01      	ldr	r5, [sp, #4]
 800187a:	4694      	mov	ip, r2
 800187c:	4465      	add	r5, ip
 800187e:	40ac      	lsls	r4, r5
 8001880:	4320      	orrs	r0, r4
 8001882:	1e42      	subs	r2, r0, #1
 8001884:	4190      	sbcs	r0, r2
 8001886:	4318      	orrs	r0, r3
 8001888:	2307      	movs	r3, #7
 800188a:	0019      	movs	r1, r3
 800188c:	2400      	movs	r4, #0
 800188e:	4001      	ands	r1, r0
 8001890:	4203      	tst	r3, r0
 8001892:	d00c      	beq.n	80018ae <__aeabi_dmul+0x30a>
 8001894:	230f      	movs	r3, #15
 8001896:	4003      	ands	r3, r0
 8001898:	2b04      	cmp	r3, #4
 800189a:	d100      	bne.n	800189e <__aeabi_dmul+0x2fa>
 800189c:	e140      	b.n	8001b20 <__aeabi_dmul+0x57c>
 800189e:	1d03      	adds	r3, r0, #4
 80018a0:	4283      	cmp	r3, r0
 80018a2:	41a4      	sbcs	r4, r4
 80018a4:	0018      	movs	r0, r3
 80018a6:	4264      	negs	r4, r4
 80018a8:	0761      	lsls	r1, r4, #29
 80018aa:	0264      	lsls	r4, r4, #9
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	08c2      	lsrs	r2, r0, #3
 80018b0:	2300      	movs	r3, #0
 80018b2:	430a      	orrs	r2, r1
 80018b4:	e6cc      	b.n	8001650 <__aeabi_dmul+0xac>
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	000007ff 	.word	0x000007ff
 80018bc:	fffffc01 	.word	0xfffffc01
 80018c0:	000003ff 	.word	0x000003ff
 80018c4:	feffffff 	.word	0xfeffffff
 80018c8:	000007fe 	.word	0x000007fe
 80018cc:	fffffc0d 	.word	0xfffffc0d
 80018d0:	0000043e 	.word	0x0000043e
 80018d4:	4649      	mov	r1, r9
 80018d6:	464a      	mov	r2, r9
 80018d8:	0409      	lsls	r1, r1, #16
 80018da:	0c09      	lsrs	r1, r1, #16
 80018dc:	000d      	movs	r5, r1
 80018de:	0c16      	lsrs	r6, r2, #16
 80018e0:	0c02      	lsrs	r2, r0, #16
 80018e2:	0400      	lsls	r0, r0, #16
 80018e4:	0c00      	lsrs	r0, r0, #16
 80018e6:	4345      	muls	r5, r0
 80018e8:	46ac      	mov	ip, r5
 80018ea:	0005      	movs	r5, r0
 80018ec:	4375      	muls	r5, r6
 80018ee:	46a8      	mov	r8, r5
 80018f0:	0015      	movs	r5, r2
 80018f2:	000f      	movs	r7, r1
 80018f4:	4375      	muls	r5, r6
 80018f6:	9200      	str	r2, [sp, #0]
 80018f8:	9502      	str	r5, [sp, #8]
 80018fa:	002a      	movs	r2, r5
 80018fc:	9d00      	ldr	r5, [sp, #0]
 80018fe:	436f      	muls	r7, r5
 8001900:	4665      	mov	r5, ip
 8001902:	0c2d      	lsrs	r5, r5, #16
 8001904:	46a9      	mov	r9, r5
 8001906:	4447      	add	r7, r8
 8001908:	444f      	add	r7, r9
 800190a:	45b8      	cmp	r8, r7
 800190c:	d905      	bls.n	800191a <__aeabi_dmul+0x376>
 800190e:	0015      	movs	r5, r2
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	0252      	lsls	r2, r2, #9
 8001914:	4690      	mov	r8, r2
 8001916:	4445      	add	r5, r8
 8001918:	9502      	str	r5, [sp, #8]
 800191a:	0c3d      	lsrs	r5, r7, #16
 800191c:	9503      	str	r5, [sp, #12]
 800191e:	4665      	mov	r5, ip
 8001920:	042d      	lsls	r5, r5, #16
 8001922:	043f      	lsls	r7, r7, #16
 8001924:	0c2d      	lsrs	r5, r5, #16
 8001926:	46ac      	mov	ip, r5
 8001928:	003d      	movs	r5, r7
 800192a:	4465      	add	r5, ip
 800192c:	9504      	str	r5, [sp, #16]
 800192e:	0c25      	lsrs	r5, r4, #16
 8001930:	0424      	lsls	r4, r4, #16
 8001932:	0c24      	lsrs	r4, r4, #16
 8001934:	46ac      	mov	ip, r5
 8001936:	0025      	movs	r5, r4
 8001938:	4375      	muls	r5, r6
 800193a:	46a8      	mov	r8, r5
 800193c:	4665      	mov	r5, ip
 800193e:	000f      	movs	r7, r1
 8001940:	4369      	muls	r1, r5
 8001942:	4441      	add	r1, r8
 8001944:	4689      	mov	r9, r1
 8001946:	4367      	muls	r7, r4
 8001948:	0c39      	lsrs	r1, r7, #16
 800194a:	4449      	add	r1, r9
 800194c:	436e      	muls	r6, r5
 800194e:	4588      	cmp	r8, r1
 8001950:	d903      	bls.n	800195a <__aeabi_dmul+0x3b6>
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	0252      	lsls	r2, r2, #9
 8001956:	4690      	mov	r8, r2
 8001958:	4446      	add	r6, r8
 800195a:	0c0d      	lsrs	r5, r1, #16
 800195c:	46a8      	mov	r8, r5
 800195e:	0035      	movs	r5, r6
 8001960:	4445      	add	r5, r8
 8001962:	9505      	str	r5, [sp, #20]
 8001964:	9d03      	ldr	r5, [sp, #12]
 8001966:	043f      	lsls	r7, r7, #16
 8001968:	46a8      	mov	r8, r5
 800196a:	0c3f      	lsrs	r7, r7, #16
 800196c:	0409      	lsls	r1, r1, #16
 800196e:	19c9      	adds	r1, r1, r7
 8001970:	4488      	add	r8, r1
 8001972:	4645      	mov	r5, r8
 8001974:	9503      	str	r5, [sp, #12]
 8001976:	4655      	mov	r5, sl
 8001978:	042e      	lsls	r6, r5, #16
 800197a:	0c36      	lsrs	r6, r6, #16
 800197c:	0c2f      	lsrs	r7, r5, #16
 800197e:	0035      	movs	r5, r6
 8001980:	4345      	muls	r5, r0
 8001982:	4378      	muls	r0, r7
 8001984:	4681      	mov	r9, r0
 8001986:	0038      	movs	r0, r7
 8001988:	46a8      	mov	r8, r5
 800198a:	0c2d      	lsrs	r5, r5, #16
 800198c:	46aa      	mov	sl, r5
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	4350      	muls	r0, r2
 8001992:	4372      	muls	r2, r6
 8001994:	444a      	add	r2, r9
 8001996:	4452      	add	r2, sl
 8001998:	4591      	cmp	r9, r2
 800199a:	d903      	bls.n	80019a4 <__aeabi_dmul+0x400>
 800199c:	2580      	movs	r5, #128	@ 0x80
 800199e:	026d      	lsls	r5, r5, #9
 80019a0:	46a9      	mov	r9, r5
 80019a2:	4448      	add	r0, r9
 80019a4:	0c15      	lsrs	r5, r2, #16
 80019a6:	46a9      	mov	r9, r5
 80019a8:	4645      	mov	r5, r8
 80019aa:	042d      	lsls	r5, r5, #16
 80019ac:	0c2d      	lsrs	r5, r5, #16
 80019ae:	46a8      	mov	r8, r5
 80019b0:	4665      	mov	r5, ip
 80019b2:	437d      	muls	r5, r7
 80019b4:	0412      	lsls	r2, r2, #16
 80019b6:	4448      	add	r0, r9
 80019b8:	4490      	add	r8, r2
 80019ba:	46a9      	mov	r9, r5
 80019bc:	0032      	movs	r2, r6
 80019be:	4665      	mov	r5, ip
 80019c0:	4362      	muls	r2, r4
 80019c2:	436e      	muls	r6, r5
 80019c4:	437c      	muls	r4, r7
 80019c6:	0c17      	lsrs	r7, r2, #16
 80019c8:	1936      	adds	r6, r6, r4
 80019ca:	19bf      	adds	r7, r7, r6
 80019cc:	42bc      	cmp	r4, r7
 80019ce:	d903      	bls.n	80019d8 <__aeabi_dmul+0x434>
 80019d0:	2480      	movs	r4, #128	@ 0x80
 80019d2:	0264      	lsls	r4, r4, #9
 80019d4:	46a4      	mov	ip, r4
 80019d6:	44e1      	add	r9, ip
 80019d8:	9c02      	ldr	r4, [sp, #8]
 80019da:	9e03      	ldr	r6, [sp, #12]
 80019dc:	46a4      	mov	ip, r4
 80019de:	9d05      	ldr	r5, [sp, #20]
 80019e0:	4466      	add	r6, ip
 80019e2:	428e      	cmp	r6, r1
 80019e4:	4189      	sbcs	r1, r1
 80019e6:	46ac      	mov	ip, r5
 80019e8:	0412      	lsls	r2, r2, #16
 80019ea:	043c      	lsls	r4, r7, #16
 80019ec:	0c12      	lsrs	r2, r2, #16
 80019ee:	18a2      	adds	r2, r4, r2
 80019f0:	4462      	add	r2, ip
 80019f2:	4249      	negs	r1, r1
 80019f4:	1854      	adds	r4, r2, r1
 80019f6:	4446      	add	r6, r8
 80019f8:	46a4      	mov	ip, r4
 80019fa:	4546      	cmp	r6, r8
 80019fc:	41a4      	sbcs	r4, r4
 80019fe:	4682      	mov	sl, r0
 8001a00:	4264      	negs	r4, r4
 8001a02:	46a0      	mov	r8, r4
 8001a04:	42aa      	cmp	r2, r5
 8001a06:	4192      	sbcs	r2, r2
 8001a08:	458c      	cmp	ip, r1
 8001a0a:	4189      	sbcs	r1, r1
 8001a0c:	44e2      	add	sl, ip
 8001a0e:	44d0      	add	r8, sl
 8001a10:	4249      	negs	r1, r1
 8001a12:	4252      	negs	r2, r2
 8001a14:	430a      	orrs	r2, r1
 8001a16:	45a0      	cmp	r8, r4
 8001a18:	41a4      	sbcs	r4, r4
 8001a1a:	4582      	cmp	sl, r0
 8001a1c:	4189      	sbcs	r1, r1
 8001a1e:	4264      	negs	r4, r4
 8001a20:	4249      	negs	r1, r1
 8001a22:	430c      	orrs	r4, r1
 8001a24:	4641      	mov	r1, r8
 8001a26:	0c3f      	lsrs	r7, r7, #16
 8001a28:	19d2      	adds	r2, r2, r7
 8001a2a:	1912      	adds	r2, r2, r4
 8001a2c:	0dcc      	lsrs	r4, r1, #23
 8001a2e:	9904      	ldr	r1, [sp, #16]
 8001a30:	0270      	lsls	r0, r6, #9
 8001a32:	4308      	orrs	r0, r1
 8001a34:	1e41      	subs	r1, r0, #1
 8001a36:	4188      	sbcs	r0, r1
 8001a38:	4641      	mov	r1, r8
 8001a3a:	444a      	add	r2, r9
 8001a3c:	0df6      	lsrs	r6, r6, #23
 8001a3e:	0252      	lsls	r2, r2, #9
 8001a40:	4330      	orrs	r0, r6
 8001a42:	0249      	lsls	r1, r1, #9
 8001a44:	4314      	orrs	r4, r2
 8001a46:	4308      	orrs	r0, r1
 8001a48:	01d2      	lsls	r2, r2, #7
 8001a4a:	d535      	bpl.n	8001ab8 <__aeabi_dmul+0x514>
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	0843      	lsrs	r3, r0, #1
 8001a50:	4002      	ands	r2, r0
 8001a52:	4313      	orrs	r3, r2
 8001a54:	07e0      	lsls	r0, r4, #31
 8001a56:	4318      	orrs	r0, r3
 8001a58:	0864      	lsrs	r4, r4, #1
 8001a5a:	e634      	b.n	80016c6 <__aeabi_dmul+0x122>
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	46a2      	mov	sl, r4
 8001a60:	469b      	mov	fp, r3
 8001a62:	4681      	mov	r9, r0
 8001a64:	2480      	movs	r4, #128	@ 0x80
 8001a66:	4653      	mov	r3, sl
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	0324      	lsls	r4, r4, #12
 8001a6e:	464a      	mov	r2, r9
 8001a70:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <__aeabi_dmul+0x588>)
 8001a72:	0b24      	lsrs	r4, r4, #12
 8001a74:	e5ec      	b.n	8001650 <__aeabi_dmul+0xac>
 8001a76:	f000 fc85 	bl	8002384 <__clzsi2>
 8001a7a:	2315      	movs	r3, #21
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	4484      	add	ip, r0
 8001a80:	0002      	movs	r2, r0
 8001a82:	4663      	mov	r3, ip
 8001a84:	3220      	adds	r2, #32
 8001a86:	2b1c      	cmp	r3, #28
 8001a88:	dc00      	bgt.n	8001a8c <__aeabi_dmul+0x4e8>
 8001a8a:	e684      	b.n	8001796 <__aeabi_dmul+0x1f2>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4699      	mov	r9, r3
 8001a90:	0023      	movs	r3, r4
 8001a92:	3808      	subs	r0, #8
 8001a94:	4083      	lsls	r3, r0
 8001a96:	469a      	mov	sl, r3
 8001a98:	e68e      	b.n	80017b8 <__aeabi_dmul+0x214>
 8001a9a:	f000 fc73 	bl	8002384 <__clzsi2>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	3215      	adds	r2, #21
 8001aa4:	3320      	adds	r3, #32
 8001aa6:	2a1c      	cmp	r2, #28
 8001aa8:	dc00      	bgt.n	8001aac <__aeabi_dmul+0x508>
 8001aaa:	e64e      	b.n	800174a <__aeabi_dmul+0x1a6>
 8001aac:	0002      	movs	r2, r0
 8001aae:	0034      	movs	r4, r6
 8001ab0:	3a08      	subs	r2, #8
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	4094      	lsls	r4, r2
 8001ab6:	e652      	b.n	800175e <__aeabi_dmul+0x1ba>
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	e604      	b.n	80016c6 <__aeabi_dmul+0x122>
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <__aeabi_dmul+0x58c>)
 8001abe:	0021      	movs	r1, r4
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	9d01      	ldr	r5, [sp, #4]
 8001ac6:	40d3      	lsrs	r3, r2
 8001ac8:	4465      	add	r5, ip
 8001aca:	40a9      	lsls	r1, r5
 8001acc:	4319      	orrs	r1, r3
 8001ace:	0003      	movs	r3, r0
 8001ad0:	40ab      	lsls	r3, r5
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	4183      	sbcs	r3, r0
 8001ad6:	4319      	orrs	r1, r3
 8001ad8:	0008      	movs	r0, r1
 8001ada:	40d4      	lsrs	r4, r2
 8001adc:	074b      	lsls	r3, r1, #29
 8001ade:	d009      	beq.n	8001af4 <__aeabi_dmul+0x550>
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d005      	beq.n	8001af4 <__aeabi_dmul+0x550>
 8001ae8:	1d0b      	adds	r3, r1, #4
 8001aea:	428b      	cmp	r3, r1
 8001aec:	4180      	sbcs	r0, r0
 8001aee:	4240      	negs	r0, r0
 8001af0:	1824      	adds	r4, r4, r0
 8001af2:	0018      	movs	r0, r3
 8001af4:	0223      	lsls	r3, r4, #8
 8001af6:	d400      	bmi.n	8001afa <__aeabi_dmul+0x556>
 8001af8:	e6d6      	b.n	80018a8 <__aeabi_dmul+0x304>
 8001afa:	2301      	movs	r3, #1
 8001afc:	2400      	movs	r4, #0
 8001afe:	2200      	movs	r2, #0
 8001b00:	e5a6      	b.n	8001650 <__aeabi_dmul+0xac>
 8001b02:	290f      	cmp	r1, #15
 8001b04:	d1aa      	bne.n	8001a5c <__aeabi_dmul+0x4b8>
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	4652      	mov	r2, sl
 8001b0a:	031b      	lsls	r3, r3, #12
 8001b0c:	421a      	tst	r2, r3
 8001b0e:	d0a9      	beq.n	8001a64 <__aeabi_dmul+0x4c0>
 8001b10:	421c      	tst	r4, r3
 8001b12:	d1a7      	bne.n	8001a64 <__aeabi_dmul+0x4c0>
 8001b14:	431c      	orrs	r4, r3
 8001b16:	9b00      	ldr	r3, [sp, #0]
 8001b18:	0002      	movs	r2, r0
 8001b1a:	469b      	mov	fp, r3
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <__aeabi_dmul+0x588>)
 8001b1e:	e597      	b.n	8001650 <__aeabi_dmul+0xac>
 8001b20:	2400      	movs	r4, #0
 8001b22:	e6c1      	b.n	80018a8 <__aeabi_dmul+0x304>
 8001b24:	2400      	movs	r4, #0
 8001b26:	4b01      	ldr	r3, [pc, #4]	@ (8001b2c <__aeabi_dmul+0x588>)
 8001b28:	0022      	movs	r2, r4
 8001b2a:	e591      	b.n	8001650 <__aeabi_dmul+0xac>
 8001b2c:	000007ff 	.word	0x000007ff
 8001b30:	0000041e 	.word	0x0000041e

08001b34 <__aeabi_dsub>:
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	464e      	mov	r6, r9
 8001b38:	4645      	mov	r5, r8
 8001b3a:	46de      	mov	lr, fp
 8001b3c:	4657      	mov	r7, sl
 8001b3e:	b5e0      	push	{r5, r6, r7, lr}
 8001b40:	b085      	sub	sp, #20
 8001b42:	9000      	str	r0, [sp, #0]
 8001b44:	9101      	str	r1, [sp, #4]
 8001b46:	030c      	lsls	r4, r1, #12
 8001b48:	004f      	lsls	r7, r1, #1
 8001b4a:	0fce      	lsrs	r6, r1, #31
 8001b4c:	0a61      	lsrs	r1, r4, #9
 8001b4e:	9c00      	ldr	r4, [sp, #0]
 8001b50:	46b0      	mov	r8, r6
 8001b52:	0f64      	lsrs	r4, r4, #29
 8001b54:	430c      	orrs	r4, r1
 8001b56:	9900      	ldr	r1, [sp, #0]
 8001b58:	0d7f      	lsrs	r7, r7, #21
 8001b5a:	00c8      	lsls	r0, r1, #3
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	001a      	movs	r2, r3
 8001b60:	031b      	lsls	r3, r3, #12
 8001b62:	469c      	mov	ip, r3
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	9201      	str	r2, [sp, #4]
 8001b68:	0051      	lsls	r1, r2, #1
 8001b6a:	0d4b      	lsrs	r3, r1, #21
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	9b01      	ldr	r3, [sp, #4]
 8001b70:	9d00      	ldr	r5, [sp, #0]
 8001b72:	0fd9      	lsrs	r1, r3, #31
 8001b74:	4663      	mov	r3, ip
 8001b76:	0f6a      	lsrs	r2, r5, #29
 8001b78:	0a5b      	lsrs	r3, r3, #9
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	00ea      	lsls	r2, r5, #3
 8001b7e:	4694      	mov	ip, r2
 8001b80:	4693      	mov	fp, r2
 8001b82:	4ac1      	ldr	r2, [pc, #772]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001b84:	9003      	str	r0, [sp, #12]
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	4591      	cmp	r9, r2
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_dsub+0x5a>
 8001b8c:	e0cd      	b.n	8001d2a <__aeabi_dsub+0x1f6>
 8001b8e:	2501      	movs	r5, #1
 8001b90:	4069      	eors	r1, r5
 8001b92:	464d      	mov	r5, r9
 8001b94:	1b7d      	subs	r5, r7, r5
 8001b96:	46aa      	mov	sl, r5
 8001b98:	428e      	cmp	r6, r1
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_dsub+0x6a>
 8001b9c:	e080      	b.n	8001ca0 <__aeabi_dsub+0x16c>
 8001b9e:	2d00      	cmp	r5, #0
 8001ba0:	dc00      	bgt.n	8001ba4 <__aeabi_dsub+0x70>
 8001ba2:	e335      	b.n	8002210 <__aeabi_dsub+0x6dc>
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	2900      	cmp	r1, #0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x78>
 8001baa:	e0df      	b.n	8001d6c <__aeabi_dsub+0x238>
 8001bac:	4297      	cmp	r7, r2
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x7e>
 8001bb0:	e194      	b.n	8001edc <__aeabi_dsub+0x3a8>
 8001bb2:	4652      	mov	r2, sl
 8001bb4:	2501      	movs	r5, #1
 8001bb6:	2a38      	cmp	r2, #56	@ 0x38
 8001bb8:	dc19      	bgt.n	8001bee <__aeabi_dsub+0xba>
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	9b02      	ldr	r3, [sp, #8]
 8001bbe:	0412      	lsls	r2, r2, #16
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	2a1f      	cmp	r2, #31
 8001bc8:	dd00      	ble.n	8001bcc <__aeabi_dsub+0x98>
 8001bca:	e1e3      	b.n	8001f94 <__aeabi_dsub+0x460>
 8001bcc:	4653      	mov	r3, sl
 8001bce:	2220      	movs	r2, #32
 8001bd0:	4661      	mov	r1, ip
 8001bd2:	9d02      	ldr	r5, [sp, #8]
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	4095      	lsls	r5, r2
 8001bd8:	40d9      	lsrs	r1, r3
 8001bda:	430d      	orrs	r5, r1
 8001bdc:	4661      	mov	r1, ip
 8001bde:	4091      	lsls	r1, r2
 8001be0:	000a      	movs	r2, r1
 8001be2:	1e51      	subs	r1, r2, #1
 8001be4:	418a      	sbcs	r2, r1
 8001be6:	4315      	orrs	r5, r2
 8001be8:	9a02      	ldr	r2, [sp, #8]
 8001bea:	40da      	lsrs	r2, r3
 8001bec:	1aa4      	subs	r4, r4, r2
 8001bee:	1b45      	subs	r5, r0, r5
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	4180      	sbcs	r0, r0
 8001bf4:	4240      	negs	r0, r0
 8001bf6:	1a24      	subs	r4, r4, r0
 8001bf8:	0223      	lsls	r3, r4, #8
 8001bfa:	d400      	bmi.n	8001bfe <__aeabi_dsub+0xca>
 8001bfc:	e13d      	b.n	8001e7a <__aeabi_dsub+0x346>
 8001bfe:	0264      	lsls	r4, r4, #9
 8001c00:	0a64      	lsrs	r4, r4, #9
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0xd4>
 8001c06:	e147      	b.n	8001e98 <__aeabi_dsub+0x364>
 8001c08:	0020      	movs	r0, r4
 8001c0a:	f000 fbbb 	bl	8002384 <__clzsi2>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	3b08      	subs	r3, #8
 8001c12:	2120      	movs	r1, #32
 8001c14:	0028      	movs	r0, r5
 8001c16:	1aca      	subs	r2, r1, r3
 8001c18:	40d0      	lsrs	r0, r2
 8001c1a:	409c      	lsls	r4, r3
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	409d      	lsls	r5, r3
 8001c20:	4322      	orrs	r2, r4
 8001c22:	429f      	cmp	r7, r3
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_dsub+0xf4>
 8001c26:	e177      	b.n	8001f18 <__aeabi_dsub+0x3e4>
 8001c28:	1bd8      	subs	r0, r3, r7
 8001c2a:	3001      	adds	r0, #1
 8001c2c:	1a09      	subs	r1, r1, r0
 8001c2e:	002c      	movs	r4, r5
 8001c30:	408d      	lsls	r5, r1
 8001c32:	40c4      	lsrs	r4, r0
 8001c34:	1e6b      	subs	r3, r5, #1
 8001c36:	419d      	sbcs	r5, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	40c2      	lsrs	r2, r0
 8001c3c:	408b      	lsls	r3, r1
 8001c3e:	4325      	orrs	r5, r4
 8001c40:	2700      	movs	r7, #0
 8001c42:	0014      	movs	r4, r2
 8001c44:	431d      	orrs	r5, r3
 8001c46:	076b      	lsls	r3, r5, #29
 8001c48:	d009      	beq.n	8001c5e <__aeabi_dsub+0x12a>
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	402b      	ands	r3, r5
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d005      	beq.n	8001c5e <__aeabi_dsub+0x12a>
 8001c52:	1d2b      	adds	r3, r5, #4
 8001c54:	42ab      	cmp	r3, r5
 8001c56:	41ad      	sbcs	r5, r5
 8001c58:	426d      	negs	r5, r5
 8001c5a:	1964      	adds	r4, r4, r5
 8001c5c:	001d      	movs	r5, r3
 8001c5e:	0223      	lsls	r3, r4, #8
 8001c60:	d400      	bmi.n	8001c64 <__aeabi_dsub+0x130>
 8001c62:	e140      	b.n	8001ee6 <__aeabi_dsub+0x3b2>
 8001c64:	4a88      	ldr	r2, [pc, #544]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001c66:	3701      	adds	r7, #1
 8001c68:	4297      	cmp	r7, r2
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dsub+0x13a>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x33e>
 8001c6e:	2601      	movs	r6, #1
 8001c70:	4643      	mov	r3, r8
 8001c72:	4986      	ldr	r1, [pc, #536]	@ (8001e8c <__aeabi_dsub+0x358>)
 8001c74:	08ed      	lsrs	r5, r5, #3
 8001c76:	4021      	ands	r1, r4
 8001c78:	074a      	lsls	r2, r1, #29
 8001c7a:	432a      	orrs	r2, r5
 8001c7c:	057c      	lsls	r4, r7, #21
 8001c7e:	024d      	lsls	r5, r1, #9
 8001c80:	0b2d      	lsrs	r5, r5, #12
 8001c82:	0d64      	lsrs	r4, r4, #21
 8001c84:	401e      	ands	r6, r3
 8001c86:	0524      	lsls	r4, r4, #20
 8001c88:	432c      	orrs	r4, r5
 8001c8a:	07f6      	lsls	r6, r6, #31
 8001c8c:	4334      	orrs	r4, r6
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0021      	movs	r1, r4
 8001c92:	b005      	add	sp, #20
 8001c94:	bcf0      	pop	{r4, r5, r6, r7}
 8001c96:	46bb      	mov	fp, r7
 8001c98:	46b2      	mov	sl, r6
 8001c9a:	46a9      	mov	r9, r5
 8001c9c:	46a0      	mov	r8, r4
 8001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca0:	2d00      	cmp	r5, #0
 8001ca2:	dc00      	bgt.n	8001ca6 <__aeabi_dsub+0x172>
 8001ca4:	e2d0      	b.n	8002248 <__aeabi_dsub+0x714>
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	2900      	cmp	r1, #0
 8001caa:	d000      	beq.n	8001cae <__aeabi_dsub+0x17a>
 8001cac:	e0d4      	b.n	8001e58 <__aeabi_dsub+0x324>
 8001cae:	4661      	mov	r1, ip
 8001cb0:	9b02      	ldr	r3, [sp, #8]
 8001cb2:	4319      	orrs	r1, r3
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x184>
 8001cb6:	e12b      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8001cb8:	1e69      	subs	r1, r5, #1
 8001cba:	2d01      	cmp	r5, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x18c>
 8001cbe:	e1d9      	b.n	8002074 <__aeabi_dsub+0x540>
 8001cc0:	4295      	cmp	r5, r2
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x192>
 8001cc4:	e10a      	b.n	8001edc <__aeabi_dsub+0x3a8>
 8001cc6:	2501      	movs	r5, #1
 8001cc8:	2938      	cmp	r1, #56	@ 0x38
 8001cca:	dc17      	bgt.n	8001cfc <__aeabi_dsub+0x1c8>
 8001ccc:	468a      	mov	sl, r1
 8001cce:	4653      	mov	r3, sl
 8001cd0:	2b1f      	cmp	r3, #31
 8001cd2:	dd00      	ble.n	8001cd6 <__aeabi_dsub+0x1a2>
 8001cd4:	e1e7      	b.n	80020a6 <__aeabi_dsub+0x572>
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	1ad2      	subs	r2, r2, r3
 8001cda:	9b02      	ldr	r3, [sp, #8]
 8001cdc:	4661      	mov	r1, ip
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	001d      	movs	r5, r3
 8001ce2:	4653      	mov	r3, sl
 8001ce4:	40d9      	lsrs	r1, r3
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	4093      	lsls	r3, r2
 8001cea:	001a      	movs	r2, r3
 8001cec:	430d      	orrs	r5, r1
 8001cee:	1e51      	subs	r1, r2, #1
 8001cf0:	418a      	sbcs	r2, r1
 8001cf2:	4653      	mov	r3, sl
 8001cf4:	4315      	orrs	r5, r2
 8001cf6:	9a02      	ldr	r2, [sp, #8]
 8001cf8:	40da      	lsrs	r2, r3
 8001cfa:	18a4      	adds	r4, r4, r2
 8001cfc:	182d      	adds	r5, r5, r0
 8001cfe:	4285      	cmp	r5, r0
 8001d00:	4180      	sbcs	r0, r0
 8001d02:	4240      	negs	r0, r0
 8001d04:	1824      	adds	r4, r4, r0
 8001d06:	0223      	lsls	r3, r4, #8
 8001d08:	d400      	bmi.n	8001d0c <__aeabi_dsub+0x1d8>
 8001d0a:	e0b6      	b.n	8001e7a <__aeabi_dsub+0x346>
 8001d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001d0e:	3701      	adds	r7, #1
 8001d10:	429f      	cmp	r7, r3
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x1e2>
 8001d14:	e0ad      	b.n	8001e72 <__aeabi_dsub+0x33e>
 8001d16:	2101      	movs	r1, #1
 8001d18:	4b5c      	ldr	r3, [pc, #368]	@ (8001e8c <__aeabi_dsub+0x358>)
 8001d1a:	086a      	lsrs	r2, r5, #1
 8001d1c:	401c      	ands	r4, r3
 8001d1e:	4029      	ands	r1, r5
 8001d20:	430a      	orrs	r2, r1
 8001d22:	07e5      	lsls	r5, r4, #31
 8001d24:	4315      	orrs	r5, r2
 8001d26:	0864      	lsrs	r4, r4, #1
 8001d28:	e78d      	b.n	8001c46 <__aeabi_dsub+0x112>
 8001d2a:	4a59      	ldr	r2, [pc, #356]	@ (8001e90 <__aeabi_dsub+0x35c>)
 8001d2c:	9b02      	ldr	r3, [sp, #8]
 8001d2e:	4692      	mov	sl, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	44ba      	add	sl, r7
 8001d34:	431a      	orrs	r2, r3
 8001d36:	d02c      	beq.n	8001d92 <__aeabi_dsub+0x25e>
 8001d38:	428e      	cmp	r6, r1
 8001d3a:	d02e      	beq.n	8001d9a <__aeabi_dsub+0x266>
 8001d3c:	4652      	mov	r2, sl
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	d060      	beq.n	8001e04 <__aeabi_dsub+0x2d0>
 8001d42:	2f00      	cmp	r7, #0
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x214>
 8001d46:	e0db      	b.n	8001f00 <__aeabi_dsub+0x3cc>
 8001d48:	4663      	mov	r3, ip
 8001d4a:	000e      	movs	r6, r1
 8001d4c:	9c02      	ldr	r4, [sp, #8]
 8001d4e:	08d8      	lsrs	r0, r3, #3
 8001d50:	0762      	lsls	r2, r4, #29
 8001d52:	4302      	orrs	r2, r0
 8001d54:	08e4      	lsrs	r4, r4, #3
 8001d56:	0013      	movs	r3, r2
 8001d58:	4323      	orrs	r3, r4
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x22a>
 8001d5c:	e254      	b.n	8002208 <__aeabi_dsub+0x6d4>
 8001d5e:	2580      	movs	r5, #128	@ 0x80
 8001d60:	032d      	lsls	r5, r5, #12
 8001d62:	4325      	orrs	r5, r4
 8001d64:	032d      	lsls	r5, r5, #12
 8001d66:	4c48      	ldr	r4, [pc, #288]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001d68:	0b2d      	lsrs	r5, r5, #12
 8001d6a:	e78c      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001d6c:	4661      	mov	r1, ip
 8001d6e:	9b02      	ldr	r3, [sp, #8]
 8001d70:	4319      	orrs	r1, r3
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x242>
 8001d74:	e0cc      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8001d76:	0029      	movs	r1, r5
 8001d78:	3901      	subs	r1, #1
 8001d7a:	2d01      	cmp	r5, #1
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x24c>
 8001d7e:	e188      	b.n	8002092 <__aeabi_dsub+0x55e>
 8001d80:	4295      	cmp	r5, r2
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x252>
 8001d84:	e0aa      	b.n	8001edc <__aeabi_dsub+0x3a8>
 8001d86:	2501      	movs	r5, #1
 8001d88:	2938      	cmp	r1, #56	@ 0x38
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dsub+0x25a>
 8001d8c:	e72f      	b.n	8001bee <__aeabi_dsub+0xba>
 8001d8e:	468a      	mov	sl, r1
 8001d90:	e718      	b.n	8001bc4 <__aeabi_dsub+0x90>
 8001d92:	2201      	movs	r2, #1
 8001d94:	4051      	eors	r1, r2
 8001d96:	428e      	cmp	r6, r1
 8001d98:	d1d0      	bne.n	8001d3c <__aeabi_dsub+0x208>
 8001d9a:	4653      	mov	r3, sl
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x26e>
 8001da0:	e0be      	b.n	8001f20 <__aeabi_dsub+0x3ec>
 8001da2:	2f00      	cmp	r7, #0
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x274>
 8001da6:	e138      	b.n	800201a <__aeabi_dsub+0x4e6>
 8001da8:	46ca      	mov	sl, r9
 8001daa:	0022      	movs	r2, r4
 8001dac:	4302      	orrs	r2, r0
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x27e>
 8001db0:	e1e2      	b.n	8002178 <__aeabi_dsub+0x644>
 8001db2:	4653      	mov	r3, sl
 8001db4:	1e59      	subs	r1, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x288>
 8001dba:	e20d      	b.n	80021d8 <__aeabi_dsub+0x6a4>
 8001dbc:	4a32      	ldr	r2, [pc, #200]	@ (8001e88 <__aeabi_dsub+0x354>)
 8001dbe:	4592      	cmp	sl, r2
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x290>
 8001dc2:	e1d2      	b.n	800216a <__aeabi_dsub+0x636>
 8001dc4:	2701      	movs	r7, #1
 8001dc6:	2938      	cmp	r1, #56	@ 0x38
 8001dc8:	dc13      	bgt.n	8001df2 <__aeabi_dsub+0x2be>
 8001dca:	291f      	cmp	r1, #31
 8001dcc:	dd00      	ble.n	8001dd0 <__aeabi_dsub+0x29c>
 8001dce:	e1ee      	b.n	80021ae <__aeabi_dsub+0x67a>
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	9b02      	ldr	r3, [sp, #8]
 8001dd4:	1a52      	subs	r2, r2, r1
 8001dd6:	0025      	movs	r5, r4
 8001dd8:	0007      	movs	r7, r0
 8001dda:	469a      	mov	sl, r3
 8001ddc:	40cc      	lsrs	r4, r1
 8001dde:	4090      	lsls	r0, r2
 8001de0:	4095      	lsls	r5, r2
 8001de2:	40cf      	lsrs	r7, r1
 8001de4:	44a2      	add	sl, r4
 8001de6:	1e42      	subs	r2, r0, #1
 8001de8:	4190      	sbcs	r0, r2
 8001dea:	4653      	mov	r3, sl
 8001dec:	432f      	orrs	r7, r5
 8001dee:	4307      	orrs	r7, r0
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	003d      	movs	r5, r7
 8001df4:	4465      	add	r5, ip
 8001df6:	4565      	cmp	r5, ip
 8001df8:	4192      	sbcs	r2, r2
 8001dfa:	9b02      	ldr	r3, [sp, #8]
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	464f      	mov	r7, r9
 8001e00:	18d4      	adds	r4, r2, r3
 8001e02:	e780      	b.n	8001d06 <__aeabi_dsub+0x1d2>
 8001e04:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <__aeabi_dsub+0x360>)
 8001e06:	1c7d      	adds	r5, r7, #1
 8001e08:	4215      	tst	r5, r2
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_dsub+0x2da>
 8001e0c:	e0aa      	b.n	8001f64 <__aeabi_dsub+0x430>
 8001e0e:	4662      	mov	r2, ip
 8001e10:	0025      	movs	r5, r4
 8001e12:	9b02      	ldr	r3, [sp, #8]
 8001e14:	4305      	orrs	r5, r0
 8001e16:	431a      	orrs	r2, r3
 8001e18:	2f00      	cmp	r7, #0
 8001e1a:	d000      	beq.n	8001e1e <__aeabi_dsub+0x2ea>
 8001e1c:	e0f5      	b.n	800200a <__aeabi_dsub+0x4d6>
 8001e1e:	2d00      	cmp	r5, #0
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x2f0>
 8001e22:	e16b      	b.n	80020fc <__aeabi_dsub+0x5c8>
 8001e24:	2a00      	cmp	r2, #0
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x2f6>
 8001e28:	e152      	b.n	80020d0 <__aeabi_dsub+0x59c>
 8001e2a:	4663      	mov	r3, ip
 8001e2c:	1ac5      	subs	r5, r0, r3
 8001e2e:	9b02      	ldr	r3, [sp, #8]
 8001e30:	1ae2      	subs	r2, r4, r3
 8001e32:	42a8      	cmp	r0, r5
 8001e34:	419b      	sbcs	r3, r3
 8001e36:	425b      	negs	r3, r3
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	021a      	lsls	r2, r3, #8
 8001e3c:	d400      	bmi.n	8001e40 <__aeabi_dsub+0x30c>
 8001e3e:	e1d5      	b.n	80021ec <__aeabi_dsub+0x6b8>
 8001e40:	4663      	mov	r3, ip
 8001e42:	1a1d      	subs	r5, r3, r0
 8001e44:	45ac      	cmp	ip, r5
 8001e46:	4192      	sbcs	r2, r2
 8001e48:	2601      	movs	r6, #1
 8001e4a:	9b02      	ldr	r3, [sp, #8]
 8001e4c:	4252      	negs	r2, r2
 8001e4e:	1b1c      	subs	r4, r3, r4
 8001e50:	4688      	mov	r8, r1
 8001e52:	1aa4      	subs	r4, r4, r2
 8001e54:	400e      	ands	r6, r1
 8001e56:	e6f6      	b.n	8001c46 <__aeabi_dsub+0x112>
 8001e58:	4297      	cmp	r7, r2
 8001e5a:	d03f      	beq.n	8001edc <__aeabi_dsub+0x3a8>
 8001e5c:	4652      	mov	r2, sl
 8001e5e:	2501      	movs	r5, #1
 8001e60:	2a38      	cmp	r2, #56	@ 0x38
 8001e62:	dd00      	ble.n	8001e66 <__aeabi_dsub+0x332>
 8001e64:	e74a      	b.n	8001cfc <__aeabi_dsub+0x1c8>
 8001e66:	2280      	movs	r2, #128	@ 0x80
 8001e68:	9b02      	ldr	r3, [sp, #8]
 8001e6a:	0412      	lsls	r2, r2, #16
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	e72d      	b.n	8001cce <__aeabi_dsub+0x19a>
 8001e72:	003c      	movs	r4, r7
 8001e74:	2500      	movs	r5, #0
 8001e76:	2200      	movs	r2, #0
 8001e78:	e705      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	402b      	ands	r3, r5
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dsub+0x350>
 8001e82:	e6e2      	b.n	8001c4a <__aeabi_dsub+0x116>
 8001e84:	e06b      	b.n	8001f5e <__aeabi_dsub+0x42a>
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	000007ff 	.word	0x000007ff
 8001e8c:	ff7fffff 	.word	0xff7fffff
 8001e90:	fffff801 	.word	0xfffff801
 8001e94:	000007fe 	.word	0x000007fe
 8001e98:	0028      	movs	r0, r5
 8001e9a:	f000 fa73 	bl	8002384 <__clzsi2>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	3318      	adds	r3, #24
 8001ea2:	2b1f      	cmp	r3, #31
 8001ea4:	dc00      	bgt.n	8001ea8 <__aeabi_dsub+0x374>
 8001ea6:	e6b4      	b.n	8001c12 <__aeabi_dsub+0xde>
 8001ea8:	002a      	movs	r2, r5
 8001eaa:	3808      	subs	r0, #8
 8001eac:	4082      	lsls	r2, r0
 8001eae:	429f      	cmp	r7, r3
 8001eb0:	dd00      	ble.n	8001eb4 <__aeabi_dsub+0x380>
 8001eb2:	e0b9      	b.n	8002028 <__aeabi_dsub+0x4f4>
 8001eb4:	1bdb      	subs	r3, r3, r7
 8001eb6:	1c58      	adds	r0, r3, #1
 8001eb8:	281f      	cmp	r0, #31
 8001eba:	dc00      	bgt.n	8001ebe <__aeabi_dsub+0x38a>
 8001ebc:	e1a0      	b.n	8002200 <__aeabi_dsub+0x6cc>
 8001ebe:	0015      	movs	r5, r2
 8001ec0:	3b1f      	subs	r3, #31
 8001ec2:	40dd      	lsrs	r5, r3
 8001ec4:	2820      	cmp	r0, #32
 8001ec6:	d005      	beq.n	8001ed4 <__aeabi_dsub+0x3a0>
 8001ec8:	2340      	movs	r3, #64	@ 0x40
 8001eca:	1a1b      	subs	r3, r3, r0
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	1e53      	subs	r3, r2, #1
 8001ed0:	419a      	sbcs	r2, r3
 8001ed2:	4315      	orrs	r5, r2
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	2700      	movs	r7, #0
 8001ed8:	402b      	ands	r3, r5
 8001eda:	e7d0      	b.n	8001e7e <__aeabi_dsub+0x34a>
 8001edc:	08c0      	lsrs	r0, r0, #3
 8001ede:	0762      	lsls	r2, r4, #29
 8001ee0:	4302      	orrs	r2, r0
 8001ee2:	08e4      	lsrs	r4, r4, #3
 8001ee4:	e737      	b.n	8001d56 <__aeabi_dsub+0x222>
 8001ee6:	08ea      	lsrs	r2, r5, #3
 8001ee8:	0763      	lsls	r3, r4, #29
 8001eea:	431a      	orrs	r2, r3
 8001eec:	4bd3      	ldr	r3, [pc, #844]	@ (800223c <__aeabi_dsub+0x708>)
 8001eee:	08e4      	lsrs	r4, r4, #3
 8001ef0:	429f      	cmp	r7, r3
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x3c2>
 8001ef4:	e72f      	b.n	8001d56 <__aeabi_dsub+0x222>
 8001ef6:	0324      	lsls	r4, r4, #12
 8001ef8:	0b25      	lsrs	r5, r4, #12
 8001efa:	057c      	lsls	r4, r7, #21
 8001efc:	0d64      	lsrs	r4, r4, #21
 8001efe:	e6c2      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001f00:	46ca      	mov	sl, r9
 8001f02:	0022      	movs	r2, r4
 8001f04:	4302      	orrs	r2, r0
 8001f06:	d158      	bne.n	8001fba <__aeabi_dsub+0x486>
 8001f08:	4663      	mov	r3, ip
 8001f0a:	000e      	movs	r6, r1
 8001f0c:	9c02      	ldr	r4, [sp, #8]
 8001f0e:	9303      	str	r3, [sp, #12]
 8001f10:	9b03      	ldr	r3, [sp, #12]
 8001f12:	4657      	mov	r7, sl
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	e7e7      	b.n	8001ee8 <__aeabi_dsub+0x3b4>
 8001f18:	4cc9      	ldr	r4, [pc, #804]	@ (8002240 <__aeabi_dsub+0x70c>)
 8001f1a:	1aff      	subs	r7, r7, r3
 8001f1c:	4014      	ands	r4, r2
 8001f1e:	e692      	b.n	8001c46 <__aeabi_dsub+0x112>
 8001f20:	4dc8      	ldr	r5, [pc, #800]	@ (8002244 <__aeabi_dsub+0x710>)
 8001f22:	1c7a      	adds	r2, r7, #1
 8001f24:	422a      	tst	r2, r5
 8001f26:	d000      	beq.n	8001f2a <__aeabi_dsub+0x3f6>
 8001f28:	e084      	b.n	8002034 <__aeabi_dsub+0x500>
 8001f2a:	0022      	movs	r2, r4
 8001f2c:	4302      	orrs	r2, r0
 8001f2e:	2f00      	cmp	r7, #0
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x400>
 8001f32:	e0ef      	b.n	8002114 <__aeabi_dsub+0x5e0>
 8001f34:	2a00      	cmp	r2, #0
 8001f36:	d100      	bne.n	8001f3a <__aeabi_dsub+0x406>
 8001f38:	e0e5      	b.n	8002106 <__aeabi_dsub+0x5d2>
 8001f3a:	4662      	mov	r2, ip
 8001f3c:	9902      	ldr	r1, [sp, #8]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x410>
 8001f42:	e0c5      	b.n	80020d0 <__aeabi_dsub+0x59c>
 8001f44:	4663      	mov	r3, ip
 8001f46:	18c5      	adds	r5, r0, r3
 8001f48:	468c      	mov	ip, r1
 8001f4a:	4285      	cmp	r5, r0
 8001f4c:	4180      	sbcs	r0, r0
 8001f4e:	4464      	add	r4, ip
 8001f50:	4240      	negs	r0, r0
 8001f52:	1824      	adds	r4, r4, r0
 8001f54:	0223      	lsls	r3, r4, #8
 8001f56:	d502      	bpl.n	8001f5e <__aeabi_dsub+0x42a>
 8001f58:	4bb9      	ldr	r3, [pc, #740]	@ (8002240 <__aeabi_dsub+0x70c>)
 8001f5a:	3701      	adds	r7, #1
 8001f5c:	401c      	ands	r4, r3
 8001f5e:	46ba      	mov	sl, r7
 8001f60:	9503      	str	r5, [sp, #12]
 8001f62:	e7d5      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8001f64:	4662      	mov	r2, ip
 8001f66:	1a85      	subs	r5, r0, r2
 8001f68:	42a8      	cmp	r0, r5
 8001f6a:	4192      	sbcs	r2, r2
 8001f6c:	4252      	negs	r2, r2
 8001f6e:	4691      	mov	r9, r2
 8001f70:	9b02      	ldr	r3, [sp, #8]
 8001f72:	1ae3      	subs	r3, r4, r3
 8001f74:	001a      	movs	r2, r3
 8001f76:	464b      	mov	r3, r9
 8001f78:	1ad2      	subs	r2, r2, r3
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	4691      	mov	r9, r2
 8001f7e:	021a      	lsls	r2, r3, #8
 8001f80:	d46c      	bmi.n	800205c <__aeabi_dsub+0x528>
 8001f82:	464a      	mov	r2, r9
 8001f84:	464c      	mov	r4, r9
 8001f86:	432a      	orrs	r2, r5
 8001f88:	d000      	beq.n	8001f8c <__aeabi_dsub+0x458>
 8001f8a:	e63a      	b.n	8001c02 <__aeabi_dsub+0xce>
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	2400      	movs	r4, #0
 8001f90:	2500      	movs	r5, #0
 8001f92:	e678      	b.n	8001c86 <__aeabi_dsub+0x152>
 8001f94:	9902      	ldr	r1, [sp, #8]
 8001f96:	4653      	mov	r3, sl
 8001f98:	000d      	movs	r5, r1
 8001f9a:	3a20      	subs	r2, #32
 8001f9c:	40d5      	lsrs	r5, r2
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d006      	beq.n	8001fb0 <__aeabi_dsub+0x47c>
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	1ad2      	subs	r2, r2, r3
 8001fa6:	000b      	movs	r3, r1
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	4662      	mov	r2, ip
 8001fac:	431a      	orrs	r2, r3
 8001fae:	4693      	mov	fp, r2
 8001fb0:	465b      	mov	r3, fp
 8001fb2:	1e5a      	subs	r2, r3, #1
 8001fb4:	4193      	sbcs	r3, r2
 8001fb6:	431d      	orrs	r5, r3
 8001fb8:	e619      	b.n	8001bee <__aeabi_dsub+0xba>
 8001fba:	4653      	mov	r3, sl
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x490>
 8001fc2:	e0c6      	b.n	8002152 <__aeabi_dsub+0x61e>
 8001fc4:	4e9d      	ldr	r6, [pc, #628]	@ (800223c <__aeabi_dsub+0x708>)
 8001fc6:	45b2      	cmp	sl, r6
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x498>
 8001fca:	e6bd      	b.n	8001d48 <__aeabi_dsub+0x214>
 8001fcc:	4688      	mov	r8, r1
 8001fce:	000e      	movs	r6, r1
 8001fd0:	2501      	movs	r5, #1
 8001fd2:	2a38      	cmp	r2, #56	@ 0x38
 8001fd4:	dc10      	bgt.n	8001ff8 <__aeabi_dsub+0x4c4>
 8001fd6:	2a1f      	cmp	r2, #31
 8001fd8:	dc7f      	bgt.n	80020da <__aeabi_dsub+0x5a6>
 8001fda:	2120      	movs	r1, #32
 8001fdc:	0025      	movs	r5, r4
 8001fde:	1a89      	subs	r1, r1, r2
 8001fe0:	0007      	movs	r7, r0
 8001fe2:	4088      	lsls	r0, r1
 8001fe4:	408d      	lsls	r5, r1
 8001fe6:	40d7      	lsrs	r7, r2
 8001fe8:	40d4      	lsrs	r4, r2
 8001fea:	1e41      	subs	r1, r0, #1
 8001fec:	4188      	sbcs	r0, r1
 8001fee:	9b02      	ldr	r3, [sp, #8]
 8001ff0:	433d      	orrs	r5, r7
 8001ff2:	1b1b      	subs	r3, r3, r4
 8001ff4:	4305      	orrs	r5, r0
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	4662      	mov	r2, ip
 8001ffa:	1b55      	subs	r5, r2, r5
 8001ffc:	45ac      	cmp	ip, r5
 8001ffe:	4192      	sbcs	r2, r2
 8002000:	9b02      	ldr	r3, [sp, #8]
 8002002:	4252      	negs	r2, r2
 8002004:	464f      	mov	r7, r9
 8002006:	1a9c      	subs	r4, r3, r2
 8002008:	e5f6      	b.n	8001bf8 <__aeabi_dsub+0xc4>
 800200a:	2d00      	cmp	r5, #0
 800200c:	d000      	beq.n	8002010 <__aeabi_dsub+0x4dc>
 800200e:	e0b7      	b.n	8002180 <__aeabi_dsub+0x64c>
 8002010:	2a00      	cmp	r2, #0
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x4e2>
 8002014:	e0f0      	b.n	80021f8 <__aeabi_dsub+0x6c4>
 8002016:	2601      	movs	r6, #1
 8002018:	400e      	ands	r6, r1
 800201a:	4663      	mov	r3, ip
 800201c:	9802      	ldr	r0, [sp, #8]
 800201e:	08d9      	lsrs	r1, r3, #3
 8002020:	0742      	lsls	r2, r0, #29
 8002022:	430a      	orrs	r2, r1
 8002024:	08c4      	lsrs	r4, r0, #3
 8002026:	e696      	b.n	8001d56 <__aeabi_dsub+0x222>
 8002028:	4c85      	ldr	r4, [pc, #532]	@ (8002240 <__aeabi_dsub+0x70c>)
 800202a:	1aff      	subs	r7, r7, r3
 800202c:	4014      	ands	r4, r2
 800202e:	0762      	lsls	r2, r4, #29
 8002030:	08e4      	lsrs	r4, r4, #3
 8002032:	e760      	b.n	8001ef6 <__aeabi_dsub+0x3c2>
 8002034:	4981      	ldr	r1, [pc, #516]	@ (800223c <__aeabi_dsub+0x708>)
 8002036:	428a      	cmp	r2, r1
 8002038:	d100      	bne.n	800203c <__aeabi_dsub+0x508>
 800203a:	e0c9      	b.n	80021d0 <__aeabi_dsub+0x69c>
 800203c:	4663      	mov	r3, ip
 800203e:	18c1      	adds	r1, r0, r3
 8002040:	4281      	cmp	r1, r0
 8002042:	4180      	sbcs	r0, r0
 8002044:	9b02      	ldr	r3, [sp, #8]
 8002046:	4240      	negs	r0, r0
 8002048:	18e3      	adds	r3, r4, r3
 800204a:	181b      	adds	r3, r3, r0
 800204c:	07dd      	lsls	r5, r3, #31
 800204e:	085c      	lsrs	r4, r3, #1
 8002050:	2307      	movs	r3, #7
 8002052:	0849      	lsrs	r1, r1, #1
 8002054:	430d      	orrs	r5, r1
 8002056:	0017      	movs	r7, r2
 8002058:	402b      	ands	r3, r5
 800205a:	e710      	b.n	8001e7e <__aeabi_dsub+0x34a>
 800205c:	4663      	mov	r3, ip
 800205e:	1a1d      	subs	r5, r3, r0
 8002060:	45ac      	cmp	ip, r5
 8002062:	4192      	sbcs	r2, r2
 8002064:	2601      	movs	r6, #1
 8002066:	9b02      	ldr	r3, [sp, #8]
 8002068:	4252      	negs	r2, r2
 800206a:	1b1c      	subs	r4, r3, r4
 800206c:	4688      	mov	r8, r1
 800206e:	1aa4      	subs	r4, r4, r2
 8002070:	400e      	ands	r6, r1
 8002072:	e5c6      	b.n	8001c02 <__aeabi_dsub+0xce>
 8002074:	4663      	mov	r3, ip
 8002076:	18c5      	adds	r5, r0, r3
 8002078:	9b02      	ldr	r3, [sp, #8]
 800207a:	4285      	cmp	r5, r0
 800207c:	4180      	sbcs	r0, r0
 800207e:	469c      	mov	ip, r3
 8002080:	4240      	negs	r0, r0
 8002082:	4464      	add	r4, ip
 8002084:	1824      	adds	r4, r4, r0
 8002086:	2701      	movs	r7, #1
 8002088:	0223      	lsls	r3, r4, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x55a>
 800208c:	e6f5      	b.n	8001e7a <__aeabi_dsub+0x346>
 800208e:	2702      	movs	r7, #2
 8002090:	e641      	b.n	8001d16 <__aeabi_dsub+0x1e2>
 8002092:	4663      	mov	r3, ip
 8002094:	1ac5      	subs	r5, r0, r3
 8002096:	42a8      	cmp	r0, r5
 8002098:	4180      	sbcs	r0, r0
 800209a:	9b02      	ldr	r3, [sp, #8]
 800209c:	4240      	negs	r0, r0
 800209e:	1ae4      	subs	r4, r4, r3
 80020a0:	2701      	movs	r7, #1
 80020a2:	1a24      	subs	r4, r4, r0
 80020a4:	e5a8      	b.n	8001bf8 <__aeabi_dsub+0xc4>
 80020a6:	9d02      	ldr	r5, [sp, #8]
 80020a8:	4652      	mov	r2, sl
 80020aa:	002b      	movs	r3, r5
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d3      	lsrs	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	4653      	mov	r3, sl
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d006      	beq.n	80020c6 <__aeabi_dsub+0x592>
 80020b8:	2240      	movs	r2, #64	@ 0x40
 80020ba:	1ad2      	subs	r2, r2, r3
 80020bc:	002b      	movs	r3, r5
 80020be:	4093      	lsls	r3, r2
 80020c0:	4662      	mov	r2, ip
 80020c2:	431a      	orrs	r2, r3
 80020c4:	4693      	mov	fp, r2
 80020c6:	465d      	mov	r5, fp
 80020c8:	1e6b      	subs	r3, r5, #1
 80020ca:	419d      	sbcs	r5, r3
 80020cc:	430d      	orrs	r5, r1
 80020ce:	e615      	b.n	8001cfc <__aeabi_dsub+0x1c8>
 80020d0:	0762      	lsls	r2, r4, #29
 80020d2:	08c0      	lsrs	r0, r0, #3
 80020d4:	4302      	orrs	r2, r0
 80020d6:	08e4      	lsrs	r4, r4, #3
 80020d8:	e70d      	b.n	8001ef6 <__aeabi_dsub+0x3c2>
 80020da:	0011      	movs	r1, r2
 80020dc:	0027      	movs	r7, r4
 80020de:	3920      	subs	r1, #32
 80020e0:	40cf      	lsrs	r7, r1
 80020e2:	2a20      	cmp	r2, #32
 80020e4:	d005      	beq.n	80020f2 <__aeabi_dsub+0x5be>
 80020e6:	2140      	movs	r1, #64	@ 0x40
 80020e8:	1a8a      	subs	r2, r1, r2
 80020ea:	4094      	lsls	r4, r2
 80020ec:	0025      	movs	r5, r4
 80020ee:	4305      	orrs	r5, r0
 80020f0:	9503      	str	r5, [sp, #12]
 80020f2:	9d03      	ldr	r5, [sp, #12]
 80020f4:	1e6a      	subs	r2, r5, #1
 80020f6:	4195      	sbcs	r5, r2
 80020f8:	433d      	orrs	r5, r7
 80020fa:	e77d      	b.n	8001ff8 <__aeabi_dsub+0x4c4>
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x5ce>
 8002100:	e744      	b.n	8001f8c <__aeabi_dsub+0x458>
 8002102:	2601      	movs	r6, #1
 8002104:	400e      	ands	r6, r1
 8002106:	4663      	mov	r3, ip
 8002108:	08d9      	lsrs	r1, r3, #3
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	075a      	lsls	r2, r3, #29
 800210e:	430a      	orrs	r2, r1
 8002110:	08dc      	lsrs	r4, r3, #3
 8002112:	e6f0      	b.n	8001ef6 <__aeabi_dsub+0x3c2>
 8002114:	2a00      	cmp	r2, #0
 8002116:	d028      	beq.n	800216a <__aeabi_dsub+0x636>
 8002118:	4662      	mov	r2, ip
 800211a:	9f02      	ldr	r7, [sp, #8]
 800211c:	08c0      	lsrs	r0, r0, #3
 800211e:	433a      	orrs	r2, r7
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x5f0>
 8002122:	e6dc      	b.n	8001ede <__aeabi_dsub+0x3aa>
 8002124:	0762      	lsls	r2, r4, #29
 8002126:	4310      	orrs	r0, r2
 8002128:	2280      	movs	r2, #128	@ 0x80
 800212a:	08e4      	lsrs	r4, r4, #3
 800212c:	0312      	lsls	r2, r2, #12
 800212e:	4214      	tst	r4, r2
 8002130:	d009      	beq.n	8002146 <__aeabi_dsub+0x612>
 8002132:	08fd      	lsrs	r5, r7, #3
 8002134:	4215      	tst	r5, r2
 8002136:	d106      	bne.n	8002146 <__aeabi_dsub+0x612>
 8002138:	4663      	mov	r3, ip
 800213a:	2601      	movs	r6, #1
 800213c:	002c      	movs	r4, r5
 800213e:	08d8      	lsrs	r0, r3, #3
 8002140:	077b      	lsls	r3, r7, #29
 8002142:	4318      	orrs	r0, r3
 8002144:	400e      	ands	r6, r1
 8002146:	0f42      	lsrs	r2, r0, #29
 8002148:	00c0      	lsls	r0, r0, #3
 800214a:	08c0      	lsrs	r0, r0, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4302      	orrs	r2, r0
 8002150:	e601      	b.n	8001d56 <__aeabi_dsub+0x222>
 8002152:	4663      	mov	r3, ip
 8002154:	1a1d      	subs	r5, r3, r0
 8002156:	45ac      	cmp	ip, r5
 8002158:	4192      	sbcs	r2, r2
 800215a:	9b02      	ldr	r3, [sp, #8]
 800215c:	4252      	negs	r2, r2
 800215e:	1b1c      	subs	r4, r3, r4
 8002160:	000e      	movs	r6, r1
 8002162:	4688      	mov	r8, r1
 8002164:	2701      	movs	r7, #1
 8002166:	1aa4      	subs	r4, r4, r2
 8002168:	e546      	b.n	8001bf8 <__aeabi_dsub+0xc4>
 800216a:	4663      	mov	r3, ip
 800216c:	08d9      	lsrs	r1, r3, #3
 800216e:	9b02      	ldr	r3, [sp, #8]
 8002170:	075a      	lsls	r2, r3, #29
 8002172:	430a      	orrs	r2, r1
 8002174:	08dc      	lsrs	r4, r3, #3
 8002176:	e5ee      	b.n	8001d56 <__aeabi_dsub+0x222>
 8002178:	4663      	mov	r3, ip
 800217a:	9c02      	ldr	r4, [sp, #8]
 800217c:	9303      	str	r3, [sp, #12]
 800217e:	e6c7      	b.n	8001f10 <__aeabi_dsub+0x3dc>
 8002180:	08c0      	lsrs	r0, r0, #3
 8002182:	2a00      	cmp	r2, #0
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x654>
 8002186:	e6aa      	b.n	8001ede <__aeabi_dsub+0x3aa>
 8002188:	0762      	lsls	r2, r4, #29
 800218a:	4310      	orrs	r0, r2
 800218c:	2280      	movs	r2, #128	@ 0x80
 800218e:	08e4      	lsrs	r4, r4, #3
 8002190:	0312      	lsls	r2, r2, #12
 8002192:	4214      	tst	r4, r2
 8002194:	d0d7      	beq.n	8002146 <__aeabi_dsub+0x612>
 8002196:	9f02      	ldr	r7, [sp, #8]
 8002198:	08fd      	lsrs	r5, r7, #3
 800219a:	4215      	tst	r5, r2
 800219c:	d1d3      	bne.n	8002146 <__aeabi_dsub+0x612>
 800219e:	4663      	mov	r3, ip
 80021a0:	2601      	movs	r6, #1
 80021a2:	08d8      	lsrs	r0, r3, #3
 80021a4:	077b      	lsls	r3, r7, #29
 80021a6:	002c      	movs	r4, r5
 80021a8:	4318      	orrs	r0, r3
 80021aa:	400e      	ands	r6, r1
 80021ac:	e7cb      	b.n	8002146 <__aeabi_dsub+0x612>
 80021ae:	000a      	movs	r2, r1
 80021b0:	0027      	movs	r7, r4
 80021b2:	3a20      	subs	r2, #32
 80021b4:	40d7      	lsrs	r7, r2
 80021b6:	2920      	cmp	r1, #32
 80021b8:	d005      	beq.n	80021c6 <__aeabi_dsub+0x692>
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	1a52      	subs	r2, r2, r1
 80021be:	4094      	lsls	r4, r2
 80021c0:	0025      	movs	r5, r4
 80021c2:	4305      	orrs	r5, r0
 80021c4:	9503      	str	r5, [sp, #12]
 80021c6:	9d03      	ldr	r5, [sp, #12]
 80021c8:	1e6a      	subs	r2, r5, #1
 80021ca:	4195      	sbcs	r5, r2
 80021cc:	432f      	orrs	r7, r5
 80021ce:	e610      	b.n	8001df2 <__aeabi_dsub+0x2be>
 80021d0:	0014      	movs	r4, r2
 80021d2:	2500      	movs	r5, #0
 80021d4:	2200      	movs	r2, #0
 80021d6:	e556      	b.n	8001c86 <__aeabi_dsub+0x152>
 80021d8:	9b02      	ldr	r3, [sp, #8]
 80021da:	4460      	add	r0, ip
 80021dc:	4699      	mov	r9, r3
 80021de:	4560      	cmp	r0, ip
 80021e0:	4192      	sbcs	r2, r2
 80021e2:	444c      	add	r4, r9
 80021e4:	4252      	negs	r2, r2
 80021e6:	0005      	movs	r5, r0
 80021e8:	18a4      	adds	r4, r4, r2
 80021ea:	e74c      	b.n	8002086 <__aeabi_dsub+0x552>
 80021ec:	001a      	movs	r2, r3
 80021ee:	001c      	movs	r4, r3
 80021f0:	432a      	orrs	r2, r5
 80021f2:	d000      	beq.n	80021f6 <__aeabi_dsub+0x6c2>
 80021f4:	e6b3      	b.n	8001f5e <__aeabi_dsub+0x42a>
 80021f6:	e6c9      	b.n	8001f8c <__aeabi_dsub+0x458>
 80021f8:	2480      	movs	r4, #128	@ 0x80
 80021fa:	2600      	movs	r6, #0
 80021fc:	0324      	lsls	r4, r4, #12
 80021fe:	e5ae      	b.n	8001d5e <__aeabi_dsub+0x22a>
 8002200:	2120      	movs	r1, #32
 8002202:	2500      	movs	r5, #0
 8002204:	1a09      	subs	r1, r1, r0
 8002206:	e517      	b.n	8001c38 <__aeabi_dsub+0x104>
 8002208:	2200      	movs	r2, #0
 800220a:	2500      	movs	r5, #0
 800220c:	4c0b      	ldr	r4, [pc, #44]	@ (800223c <__aeabi_dsub+0x708>)
 800220e:	e53a      	b.n	8001c86 <__aeabi_dsub+0x152>
 8002210:	2d00      	cmp	r5, #0
 8002212:	d100      	bne.n	8002216 <__aeabi_dsub+0x6e2>
 8002214:	e5f6      	b.n	8001e04 <__aeabi_dsub+0x2d0>
 8002216:	464b      	mov	r3, r9
 8002218:	1bda      	subs	r2, r3, r7
 800221a:	4692      	mov	sl, r2
 800221c:	2f00      	cmp	r7, #0
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x6ee>
 8002220:	e66f      	b.n	8001f02 <__aeabi_dsub+0x3ce>
 8002222:	2a38      	cmp	r2, #56	@ 0x38
 8002224:	dc05      	bgt.n	8002232 <__aeabi_dsub+0x6fe>
 8002226:	2680      	movs	r6, #128	@ 0x80
 8002228:	0436      	lsls	r6, r6, #16
 800222a:	4334      	orrs	r4, r6
 800222c:	4688      	mov	r8, r1
 800222e:	000e      	movs	r6, r1
 8002230:	e6d1      	b.n	8001fd6 <__aeabi_dsub+0x4a2>
 8002232:	4688      	mov	r8, r1
 8002234:	000e      	movs	r6, r1
 8002236:	2501      	movs	r5, #1
 8002238:	e6de      	b.n	8001ff8 <__aeabi_dsub+0x4c4>
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	000007ff 	.word	0x000007ff
 8002240:	ff7fffff 	.word	0xff7fffff
 8002244:	000007fe 	.word	0x000007fe
 8002248:	2d00      	cmp	r5, #0
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x71a>
 800224c:	e668      	b.n	8001f20 <__aeabi_dsub+0x3ec>
 800224e:	464b      	mov	r3, r9
 8002250:	1bd9      	subs	r1, r3, r7
 8002252:	2f00      	cmp	r7, #0
 8002254:	d101      	bne.n	800225a <__aeabi_dsub+0x726>
 8002256:	468a      	mov	sl, r1
 8002258:	e5a7      	b.n	8001daa <__aeabi_dsub+0x276>
 800225a:	2701      	movs	r7, #1
 800225c:	2938      	cmp	r1, #56	@ 0x38
 800225e:	dd00      	ble.n	8002262 <__aeabi_dsub+0x72e>
 8002260:	e5c7      	b.n	8001df2 <__aeabi_dsub+0x2be>
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	0412      	lsls	r2, r2, #16
 8002266:	4314      	orrs	r4, r2
 8002268:	e5af      	b.n	8001dca <__aeabi_dsub+0x296>
 800226a:	46c0      	nop			@ (mov r8, r8)

0800226c <__aeabi_dcmpun>:
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	46c6      	mov	lr, r8
 8002270:	031e      	lsls	r6, r3, #12
 8002272:	0b36      	lsrs	r6, r6, #12
 8002274:	46b0      	mov	r8, r6
 8002276:	4e0d      	ldr	r6, [pc, #52]	@ (80022ac <__aeabi_dcmpun+0x40>)
 8002278:	030c      	lsls	r4, r1, #12
 800227a:	004d      	lsls	r5, r1, #1
 800227c:	005f      	lsls	r7, r3, #1
 800227e:	b500      	push	{lr}
 8002280:	0b24      	lsrs	r4, r4, #12
 8002282:	0d6d      	lsrs	r5, r5, #21
 8002284:	0d7f      	lsrs	r7, r7, #21
 8002286:	42b5      	cmp	r5, r6
 8002288:	d00b      	beq.n	80022a2 <__aeabi_dcmpun+0x36>
 800228a:	4908      	ldr	r1, [pc, #32]	@ (80022ac <__aeabi_dcmpun+0x40>)
 800228c:	2000      	movs	r0, #0
 800228e:	428f      	cmp	r7, r1
 8002290:	d104      	bne.n	800229c <__aeabi_dcmpun+0x30>
 8002292:	4646      	mov	r6, r8
 8002294:	4316      	orrs	r6, r2
 8002296:	0030      	movs	r0, r6
 8002298:	1e43      	subs	r3, r0, #1
 800229a:	4198      	sbcs	r0, r3
 800229c:	bc80      	pop	{r7}
 800229e:	46b8      	mov	r8, r7
 80022a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a2:	4304      	orrs	r4, r0
 80022a4:	2001      	movs	r0, #1
 80022a6:	2c00      	cmp	r4, #0
 80022a8:	d1f8      	bne.n	800229c <__aeabi_dcmpun+0x30>
 80022aa:	e7ee      	b.n	800228a <__aeabi_dcmpun+0x1e>
 80022ac:	000007ff 	.word	0x000007ff

080022b0 <__aeabi_d2iz>:
 80022b0:	000b      	movs	r3, r1
 80022b2:	0002      	movs	r2, r0
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	4d16      	ldr	r5, [pc, #88]	@ (8002310 <__aeabi_d2iz+0x60>)
 80022b8:	030c      	lsls	r4, r1, #12
 80022ba:	b082      	sub	sp, #8
 80022bc:	0049      	lsls	r1, r1, #1
 80022be:	2000      	movs	r0, #0
 80022c0:	9200      	str	r2, [sp, #0]
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	0b24      	lsrs	r4, r4, #12
 80022c6:	0d49      	lsrs	r1, r1, #21
 80022c8:	0fde      	lsrs	r6, r3, #31
 80022ca:	42a9      	cmp	r1, r5
 80022cc:	dd04      	ble.n	80022d8 <__aeabi_d2iz+0x28>
 80022ce:	4811      	ldr	r0, [pc, #68]	@ (8002314 <__aeabi_d2iz+0x64>)
 80022d0:	4281      	cmp	r1, r0
 80022d2:	dd03      	ble.n	80022dc <__aeabi_d2iz+0x2c>
 80022d4:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <__aeabi_d2iz+0x68>)
 80022d6:	18f0      	adds	r0, r6, r3
 80022d8:	b002      	add	sp, #8
 80022da:	bd70      	pop	{r4, r5, r6, pc}
 80022dc:	2080      	movs	r0, #128	@ 0x80
 80022de:	0340      	lsls	r0, r0, #13
 80022e0:	4320      	orrs	r0, r4
 80022e2:	4c0e      	ldr	r4, [pc, #56]	@ (800231c <__aeabi_d2iz+0x6c>)
 80022e4:	1a64      	subs	r4, r4, r1
 80022e6:	2c1f      	cmp	r4, #31
 80022e8:	dd08      	ble.n	80022fc <__aeabi_d2iz+0x4c>
 80022ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <__aeabi_d2iz+0x70>)
 80022ec:	1a5b      	subs	r3, r3, r1
 80022ee:	40d8      	lsrs	r0, r3
 80022f0:	0003      	movs	r3, r0
 80022f2:	4258      	negs	r0, r3
 80022f4:	2e00      	cmp	r6, #0
 80022f6:	d1ef      	bne.n	80022d8 <__aeabi_d2iz+0x28>
 80022f8:	0018      	movs	r0, r3
 80022fa:	e7ed      	b.n	80022d8 <__aeabi_d2iz+0x28>
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <__aeabi_d2iz+0x74>)
 80022fe:	9a00      	ldr	r2, [sp, #0]
 8002300:	469c      	mov	ip, r3
 8002302:	0003      	movs	r3, r0
 8002304:	4461      	add	r1, ip
 8002306:	408b      	lsls	r3, r1
 8002308:	40e2      	lsrs	r2, r4
 800230a:	4313      	orrs	r3, r2
 800230c:	e7f1      	b.n	80022f2 <__aeabi_d2iz+0x42>
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	000003fe 	.word	0x000003fe
 8002314:	0000041d 	.word	0x0000041d
 8002318:	7fffffff 	.word	0x7fffffff
 800231c:	00000433 	.word	0x00000433
 8002320:	00000413 	.word	0x00000413
 8002324:	fffffbed 	.word	0xfffffbed

08002328 <__aeabi_i2d>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	2800      	cmp	r0, #0
 800232c:	d016      	beq.n	800235c <__aeabi_i2d+0x34>
 800232e:	17c3      	asrs	r3, r0, #31
 8002330:	18c5      	adds	r5, r0, r3
 8002332:	405d      	eors	r5, r3
 8002334:	0fc4      	lsrs	r4, r0, #31
 8002336:	0028      	movs	r0, r5
 8002338:	f000 f824 	bl	8002384 <__clzsi2>
 800233c:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <__aeabi_i2d+0x58>)
 800233e:	1a1b      	subs	r3, r3, r0
 8002340:	055b      	lsls	r3, r3, #21
 8002342:	0d5b      	lsrs	r3, r3, #21
 8002344:	280a      	cmp	r0, #10
 8002346:	dc14      	bgt.n	8002372 <__aeabi_i2d+0x4a>
 8002348:	0002      	movs	r2, r0
 800234a:	002e      	movs	r6, r5
 800234c:	3215      	adds	r2, #21
 800234e:	4096      	lsls	r6, r2
 8002350:	220b      	movs	r2, #11
 8002352:	1a12      	subs	r2, r2, r0
 8002354:	40d5      	lsrs	r5, r2
 8002356:	032d      	lsls	r5, r5, #12
 8002358:	0b2d      	lsrs	r5, r5, #12
 800235a:	e003      	b.n	8002364 <__aeabi_i2d+0x3c>
 800235c:	2400      	movs	r4, #0
 800235e:	2300      	movs	r3, #0
 8002360:	2500      	movs	r5, #0
 8002362:	2600      	movs	r6, #0
 8002364:	051b      	lsls	r3, r3, #20
 8002366:	432b      	orrs	r3, r5
 8002368:	07e4      	lsls	r4, r4, #31
 800236a:	4323      	orrs	r3, r4
 800236c:	0030      	movs	r0, r6
 800236e:	0019      	movs	r1, r3
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	380b      	subs	r0, #11
 8002374:	4085      	lsls	r5, r0
 8002376:	032d      	lsls	r5, r5, #12
 8002378:	2600      	movs	r6, #0
 800237a:	0b2d      	lsrs	r5, r5, #12
 800237c:	e7f2      	b.n	8002364 <__aeabi_i2d+0x3c>
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	0000041e 	.word	0x0000041e

08002384 <__clzsi2>:
 8002384:	211c      	movs	r1, #28
 8002386:	2301      	movs	r3, #1
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	4298      	cmp	r0, r3
 800238c:	d301      	bcc.n	8002392 <__clzsi2+0xe>
 800238e:	0c00      	lsrs	r0, r0, #16
 8002390:	3910      	subs	r1, #16
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	4298      	cmp	r0, r3
 8002396:	d301      	bcc.n	800239c <__clzsi2+0x18>
 8002398:	0a00      	lsrs	r0, r0, #8
 800239a:	3908      	subs	r1, #8
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	4298      	cmp	r0, r3
 80023a0:	d301      	bcc.n	80023a6 <__clzsi2+0x22>
 80023a2:	0900      	lsrs	r0, r0, #4
 80023a4:	3904      	subs	r1, #4
 80023a6:	a202      	add	r2, pc, #8	@ (adr r2, 80023b0 <__clzsi2+0x2c>)
 80023a8:	5c10      	ldrb	r0, [r2, r0]
 80023aa:	1840      	adds	r0, r0, r1
 80023ac:	4770      	bx	lr
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	02020304 	.word	0x02020304
 80023b4:	01010101 	.word	0x01010101
	...

080023c0 <__clzdi2>:
 80023c0:	b510      	push	{r4, lr}
 80023c2:	2900      	cmp	r1, #0
 80023c4:	d103      	bne.n	80023ce <__clzdi2+0xe>
 80023c6:	f7ff ffdd 	bl	8002384 <__clzsi2>
 80023ca:	3020      	adds	r0, #32
 80023cc:	e002      	b.n	80023d4 <__clzdi2+0x14>
 80023ce:	0008      	movs	r0, r1
 80023d0:	f7ff ffd8 	bl	8002384 <__clzsi2>
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	46c0      	nop			@ (mov r8, r8)

080023d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_Init+0x3c>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_Init+0x3c>)
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	0049      	lsls	r1, r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023f2:	2003      	movs	r0, #3
 80023f4:	f000 f810 	bl	8002418 <HAL_InitTick>
 80023f8:	1e03      	subs	r3, r0, #0
 80023fa:	d003      	beq.n	8002404 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e001      	b.n	8002408 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002404:	f005 fe5e 	bl	80080c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40022000 	.word	0x40022000

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002420:	230f      	movs	r3, #15
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002428:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <HAL_InitTick+0x88>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02b      	beq.n	8002488 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002430:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <HAL_InitTick+0x8c>)
 8002432:	681c      	ldr	r4, [r3, #0]
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_InitTick+0x88>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	0019      	movs	r1, r3
 800243a:	23fa      	movs	r3, #250	@ 0xfa
 800243c:	0098      	lsls	r0, r3, #2
 800243e:	f7fd fe69 	bl	8000114 <__udivsi3>
 8002442:	0003      	movs	r3, r0
 8002444:	0019      	movs	r1, r3
 8002446:	0020      	movs	r0, r4
 8002448:	f7fd fe64 	bl	8000114 <__udivsi3>
 800244c:	0003      	movs	r3, r0
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fded 	bl	800302e <HAL_SYSTICK_Config>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d112      	bne.n	800247e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d80a      	bhi.n	8002474 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	2301      	movs	r3, #1
 8002462:	425b      	negs	r3, r3
 8002464:	2200      	movs	r2, #0
 8002466:	0018      	movs	r0, r3
 8002468:	f000 fdac 	bl	8002fc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_InitTick+0x90>)
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e00d      	b.n	8002490 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002474:	230f      	movs	r3, #15
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e008      	b.n	8002490 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800247e:	230f      	movs	r3, #15
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e003      	b.n	8002490 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002488:	230f      	movs	r3, #15
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002490:	230f      	movs	r3, #15
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b005      	add	sp, #20
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000008 	.word	0x20000008
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_IncTick+0x1c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	001a      	movs	r2, r3
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_IncTick+0x20>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	18d2      	adds	r2, r2, r3
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_IncTick+0x20>)
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	20000004 	.word	0x20000004
 80024cc:	2000008c 	.word	0x2000008c

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b02      	ldr	r3, [pc, #8]	@ (80024e0 <HAL_GetTick+0x10>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	2000008c 	.word	0x2000008c

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3301      	adds	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_Delay+0x44>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	001a      	movs	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	189b      	adds	r3, r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	f7ff ffe0 	bl	80024d0 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d8f7      	bhi.n	800250c <HAL_Delay+0x28>
  {
  }
}
 800251c:	46c0      	nop			@ (mov r8, r8)
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	20000004 	.word	0x20000004

0800252c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a05      	ldr	r2, [pc, #20]	@ (8002550 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800253c:	401a      	ands	r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b002      	add	sp, #8
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	fe3fffff 	.word	0xfe3fffff

08002554 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	23e0      	movs	r3, #224	@ 0xe0
 8002562:	045b      	lsls	r3, r3, #17
 8002564:	4013      	ands	r3, r2
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}

0800256e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	2104      	movs	r1, #4
 8002582:	400a      	ands	r2, r1
 8002584:	2107      	movs	r1, #7
 8002586:	4091      	lsls	r1, r2
 8002588:	000a      	movs	r2, r1
 800258a:	43d2      	mvns	r2, r2
 800258c:	401a      	ands	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2104      	movs	r1, #4
 8002592:	400b      	ands	r3, r1
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4099      	lsls	r1, r3
 8002598:	000b      	movs	r3, r1
 800259a:	431a      	orrs	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b004      	add	sp, #16
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	2104      	movs	r1, #4
 80025ba:	400a      	ands	r2, r1
 80025bc:	2107      	movs	r1, #7
 80025be:	4091      	lsls	r1, r2
 80025c0:	000a      	movs	r2, r1
 80025c2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2104      	movs	r1, #4
 80025c8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80025ca:	40da      	lsrs	r2, r3
 80025cc:	0013      	movs	r3, r2
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b002      	add	sp, #8
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	211f      	movs	r1, #31
 80025ea:	400a      	ands	r2, r1
 80025ec:	210f      	movs	r1, #15
 80025ee:	4091      	lsls	r1, r2
 80025f0:	000a      	movs	r2, r1
 80025f2:	43d2      	mvns	r2, r2
 80025f4:	401a      	ands	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	210f      	movs	r1, #15
 80025fc:	4019      	ands	r1, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	201f      	movs	r0, #31
 8002602:	4003      	ands	r3, r0
 8002604:	4099      	lsls	r1, r3
 8002606:	000b      	movs	r3, r1
 8002608:	431a      	orrs	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}

08002616 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	035b      	lsls	r3, r3, #13
 8002628:	0b5b      	lsrs	r3, r3, #13
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	0352      	lsls	r2, r2, #13
 800264a:	0b52      	lsrs	r2, r2, #13
 800264c:	43d2      	mvns	r2, r2
 800264e:	401a      	ands	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	0212      	lsls	r2, r2, #8
 8002670:	43d2      	mvns	r2, r2
 8002672:	401a      	ands	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	400b      	ands	r3, r1
 800267c:	4904      	ldr	r1, [pc, #16]	@ (8002690 <LL_ADC_SetChannelSamplingTime+0x34>)
 800267e:	400b      	ands	r3, r1
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	07ffff00 	.word	0x07ffff00

08002694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a05      	ldr	r2, [pc, #20]	@ (80026b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	2280      	movs	r2, #128	@ 0x80
 80026a6:	0552      	lsls	r2, r2, #21
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b002      	add	sp, #8
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	6fffffe8 	.word	0x6fffffe8

080026bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	055b      	lsls	r3, r3, #21
 80026cc:	401a      	ands	r2, r3
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	055b      	lsls	r3, r3, #21
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d101      	bne.n	80026da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2201      	movs	r2, #1
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <LL_ADC_IsEnabled+0x18>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <LL_ADC_IsEnabled+0x1a>
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}

08002706 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2204      	movs	r2, #4
 8002714:	4013      	ands	r3, r2
 8002716:	2b04      	cmp	r3, #4
 8002718:	d101      	bne.n	800271e <LL_ADC_REG_IsConversionOngoing+0x18>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800271e:	2300      	movs	r3, #0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	231f      	movs	r3, #31
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e17f      	b.n	8002a4e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0018      	movs	r0, r3
 800275a:	f004 fa9b 	bl	8006c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2254      	movs	r2, #84	@ 0x54
 8002768:	2100      	movs	r1, #0
 800276a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff ffa3 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d115      	bne.n	80027a6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff ff88 	bl	8002694 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002784:	4bb4      	ldr	r3, [pc, #720]	@ (8002a58 <HAL_ADC_Init+0x330>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	49b4      	ldr	r1, [pc, #720]	@ (8002a5c <HAL_ADC_Init+0x334>)
 800278a:	0018      	movs	r0, r3
 800278c:	f7fd fcc2 	bl	8000114 <__udivsi3>
 8002790:	0003      	movs	r3, r0
 8002792:	3301      	adds	r3, #1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002798:	e002      	b.n	80027a0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3b01      	subs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f9      	bne.n	800279a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7ff ff86 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d10f      	bne.n	80027d4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	2210      	movs	r2, #16
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	2201      	movs	r2, #1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027cc:	231f      	movs	r3, #31
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0018      	movs	r0, r3
 80027da:	f7ff ff94 	bl	8002706 <LL_ADC_REG_IsConversionOngoing>
 80027de:	0003      	movs	r3, r0
 80027e0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	2210      	movs	r2, #16
 80027e8:	4013      	ands	r3, r2
 80027ea:	d000      	beq.n	80027ee <HAL_ADC_Init+0xc6>
 80027ec:	e122      	b.n	8002a34 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d000      	beq.n	80027f6 <HAL_ADC_Init+0xce>
 80027f4:	e11e      	b.n	8002a34 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	4a99      	ldr	r2, [pc, #612]	@ (8002a60 <HAL_ADC_Init+0x338>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	2202      	movs	r2, #2
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0018      	movs	r0, r3
 800280c:	f7ff ff6a 	bl	80026e4 <LL_ADC_IsEnabled>
 8002810:	1e03      	subs	r3, r0, #0
 8002812:	d000      	beq.n	8002816 <HAL_ADC_Init+0xee>
 8002814:	e0ad      	b.n	8002972 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7e1b      	ldrb	r3, [r3, #24]
 800281e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002820:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7e5b      	ldrb	r3, [r3, #25]
 8002826:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002828:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7e9b      	ldrb	r3, [r3, #26]
 800282e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002830:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_ADC_Init+0x118>
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	015b      	lsls	r3, r3, #5
 800283e:	e000      	b.n	8002842 <HAL_ADC_Init+0x11a>
 8002840:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002842:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002848:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	da04      	bge.n	800285c <HAL_ADC_Init+0x134>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	e001      	b.n	8002860 <HAL_ADC_Init+0x138>
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002860:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	212c      	movs	r1, #44	@ 0x2c
 8002866:	5c5b      	ldrb	r3, [r3, r1]
 8002868:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800286a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	5c9b      	ldrb	r3, [r3, r2]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d115      	bne.n	80028a8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7e9b      	ldrb	r3, [r3, #26]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2280      	movs	r2, #128	@ 0x80
 8002888:	0252      	lsls	r2, r2, #9
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	e00b      	b.n	80028a8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	2220      	movs	r2, #32
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a0:	2201      	movs	r2, #1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028b4:	23e0      	movs	r3, #224	@ 0xe0
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028be:	4313      	orrs	r3, r2
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a65      	ldr	r2, [pc, #404]	@ (8002a64 <HAL_ADC_Init+0x33c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0f9b      	lsrs	r3, r3, #30
 80028e2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028e8:	4313      	orrs	r3, r2
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	223c      	movs	r2, #60	@ 0x3c
 80028f4:	5c9b      	ldrb	r3, [r3, r2]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d111      	bne.n	800291e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0f9b      	lsrs	r3, r3, #30
 8002900:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002906:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800290c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002912:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	2201      	movs	r2, #1
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	4a50      	ldr	r2, [pc, #320]	@ (8002a68 <HAL_ADC_Init+0x340>)
 8002926:	4013      	ands	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	430a      	orrs	r2, r1
 8002932:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	23c0      	movs	r3, #192	@ 0xc0
 800293a:	061b      	lsls	r3, r3, #24
 800293c:	429a      	cmp	r2, r3
 800293e:	d018      	beq.n	8002972 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	05db      	lsls	r3, r3, #23
 8002948:	429a      	cmp	r2, r3
 800294a:	d012      	beq.n	8002972 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	061b      	lsls	r3, r3, #24
 8002954:	429a      	cmp	r2, r3
 8002956:	d00c      	beq.n	8002972 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002958:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <HAL_ADC_Init+0x344>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a44      	ldr	r2, [pc, #272]	@ (8002a70 <HAL_ADC_Init+0x348>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	23f0      	movs	r3, #240	@ 0xf0
 8002968:	039b      	lsls	r3, r3, #14
 800296a:	401a      	ands	r2, r3
 800296c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <HAL_ADC_Init+0x344>)
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297a:	001a      	movs	r2, r3
 800297c:	2100      	movs	r1, #0
 800297e:	f7ff fdf6 	bl	800256e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	493a      	ldr	r1, [pc, #232]	@ (8002a74 <HAL_ADC_Init+0x34c>)
 800298c:	001a      	movs	r2, r3
 800298e:	f7ff fdee 	bl	800256e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2110      	movs	r1, #16
 80029a6:	4249      	negs	r1, r1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80029ac:	e018      	b.n	80029e0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	039b      	lsls	r3, r3, #14
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d112      	bne.n	80029e0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	221c      	movs	r2, #28
 80029ca:	4013      	ands	r3, r2
 80029cc:	2210      	movs	r2, #16
 80029ce:	4252      	negs	r2, r2
 80029d0:	409a      	lsls	r2, r3
 80029d2:	0011      	movs	r1, r2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2100      	movs	r1, #0
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff fdde 	bl	80025a8 <LL_ADC_GetSamplingTimeCommonChannels>
 80029ec:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10b      	bne.n	8002a0e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	2203      	movs	r2, #3
 8002a02:	4393      	bics	r3, r2
 8002a04:	2201      	movs	r2, #1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a0c:	e01c      	b.n	8002a48 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a12:	2212      	movs	r2, #18
 8002a14:	4393      	bics	r3, r2
 8002a16:	2210      	movs	r2, #16
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	2201      	movs	r2, #1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002a2a:	231f      	movs	r3, #31
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a32:	e009      	b.n	8002a48 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	2210      	movs	r2, #16
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a40:	231f      	movs	r3, #31
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002a48:	231f      	movs	r3, #31
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
}
 8002a4e:	0018      	movs	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b008      	add	sp, #32
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	00030d40 	.word	0x00030d40
 8002a60:	fffffefd 	.word	0xfffffefd
 8002a64:	ffde0201 	.word	0xffde0201
 8002a68:	1ffffc02 	.word	0x1ffffc02
 8002a6c:	40012708 	.word	0x40012708
 8002a70:	ffc3ffff 	.word	0xffc3ffff
 8002a74:	07ffff04 	.word	0x07ffff04

08002a78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a82:	2317      	movs	r3, #23
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2254      	movs	r2, #84	@ 0x54
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x24>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e1c0      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x3a6>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2254      	movs	r2, #84	@ 0x54
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff fe2c 	bl	8002706 <LL_ADC_REG_IsConversionOngoing>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d000      	beq.n	8002ab4 <HAL_ADC_ConfigChannel+0x3c>
 8002ab2:	e1a3      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d100      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x46>
 8002abc:	e143      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ace:	4ac1      	ldr	r2, [pc, #772]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x35c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0019      	movs	r1, r3
 8002ade:	0010      	movs	r0, r2
 8002ae0:	f7ff fd99 	bl	8002616 <LL_ADC_REG_SetSequencerChAdd>
 8002ae4:	e0c9      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	211f      	movs	r1, #31
 8002af0:	400b      	ands	r3, r1
 8002af2:	210f      	movs	r1, #15
 8002af4:	4099      	lsls	r1, r3
 8002af6:	000b      	movs	r3, r1
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	035b      	lsls	r3, r3, #13
 8002b04:	0b5b      	lsrs	r3, r3, #13
 8002b06:	d105      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x9c>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	221f      	movs	r2, #31
 8002b10:	4013      	ands	r3, r2
 8002b12:	e098      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d000      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0xa8>
 8002b1e:	e091      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x1cc>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d000      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0xb4>
 8002b2a:	e089      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x1c8>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2204      	movs	r2, #4
 8002b32:	4013      	ands	r3, r2
 8002b34:	d000      	beq.n	8002b38 <HAL_ADC_ConfigChannel+0xc0>
 8002b36:	e081      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x1c4>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d000      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0xcc>
 8002b42:	e079      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x1c0>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d000      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0xd8>
 8002b4e:	e071      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x1bc>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2220      	movs	r2, #32
 8002b56:	4013      	ands	r3, r2
 8002b58:	d000      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0xe4>
 8002b5a:	e069      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x1b8>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2240      	movs	r2, #64	@ 0x40
 8002b62:	4013      	ands	r3, r2
 8002b64:	d000      	beq.n	8002b68 <HAL_ADC_ConfigChannel+0xf0>
 8002b66:	e061      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x1b4>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d000      	beq.n	8002b74 <HAL_ADC_ConfigChannel+0xfc>
 8002b72:	e059      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x1b0>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d151      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1ac>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d149      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x1a8>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4013      	ands	r3, r2
 8002b96:	d141      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1a4>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d139      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1a0>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	015b      	lsls	r3, r3, #5
 8002bac:	4013      	ands	r3, r2
 8002bae:	d131      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x19c>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	019b      	lsls	r3, r3, #6
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d129      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x198>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d121      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x194>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d119      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x190>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	@ 0x80
 8002bda:	025b      	lsls	r3, r3, #9
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d111      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x18c>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	029b      	lsls	r3, r3, #10
 8002be8:	4013      	ands	r3, r2
 8002bea:	d109      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x188>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	02db      	lsls	r3, r3, #11
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d001      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x184>
 8002bf8:	2312      	movs	r3, #18
 8002bfa:	e024      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e022      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c00:	2311      	movs	r3, #17
 8002c02:	e020      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c04:	2310      	movs	r3, #16
 8002c06:	e01e      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c08:	230f      	movs	r3, #15
 8002c0a:	e01c      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c0c:	230e      	movs	r3, #14
 8002c0e:	e01a      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c10:	230d      	movs	r3, #13
 8002c12:	e018      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c14:	230c      	movs	r3, #12
 8002c16:	e016      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c18:	230b      	movs	r3, #11
 8002c1a:	e014      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	e012      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c20:	2309      	movs	r3, #9
 8002c22:	e010      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c24:	2308      	movs	r3, #8
 8002c26:	e00e      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c28:	2307      	movs	r3, #7
 8002c2a:	e00c      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	e00a      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c30:	2305      	movs	r3, #5
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e006      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e004      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e002      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1ce>
 8002c44:	2300      	movs	r3, #0
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6852      	ldr	r2, [r2, #4]
 8002c4a:	201f      	movs	r0, #31
 8002c4c:	4002      	ands	r2, r0
 8002c4e:	4093      	lsls	r3, r2
 8002c50:	000a      	movs	r2, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d808      	bhi.n	8002c7a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	001a      	movs	r2, r3
 8002c76:	f7ff fcae 	bl	80025d6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	001a      	movs	r2, r3
 8002c88:	f7ff fce8 	bl	800265c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	db00      	blt.n	8002c96 <HAL_ADC_ConfigChannel+0x21e>
 8002c94:	e0bc      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c96:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff fc5b 	bl	8002554 <LL_ADC_GetCommonPathInternalCh>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8002ddc <HAL_ADC_ConfigChannel+0x364>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d122      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	2380      	movs	r3, #128	@ 0x80
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cb4:	d11d      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2280      	movs	r2, #128	@ 0x80
 8002cba:	0412      	lsls	r2, r2, #16
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	4a46      	ldr	r2, [pc, #280]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	0010      	movs	r0, r2
 8002cc4:	f7ff fc32 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc8:	4b45      	ldr	r3, [pc, #276]	@ (8002de0 <HAL_ADC_ConfigChannel+0x368>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4945      	ldr	r1, [pc, #276]	@ (8002de4 <HAL_ADC_ConfigChannel+0x36c>)
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7fd fa20 	bl	8000114 <__udivsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	0013      	movs	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	189b      	adds	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ce2:	e002      	b.n	8002cea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f9      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cf0:	e08e      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8002de8 <HAL_ADC_ConfigChannel+0x370>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10e      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	2380      	movs	r3, #128	@ 0x80
 8002d00:	045b      	lsls	r3, r3, #17
 8002d02:	4013      	ands	r3, r2
 8002d04:	d109      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2280      	movs	r2, #128	@ 0x80
 8002d0a:	0452      	lsls	r2, r2, #17
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	4a32      	ldr	r2, [pc, #200]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002d10:	0019      	movs	r1, r3
 8002d12:	0010      	movs	r0, r2
 8002d14:	f7ff fc0a 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002d18:	e07a      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a33      	ldr	r2, [pc, #204]	@ (8002dec <HAL_ADC_ConfigChannel+0x374>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d000      	beq.n	8002d26 <HAL_ADC_ConfigChannel+0x2ae>
 8002d24:	e074      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	2380      	movs	r3, #128	@ 0x80
 8002d2a:	03db      	lsls	r3, r3, #15
 8002d2c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d2e:	d000      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x2ba>
 8002d30:	e06e      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2280      	movs	r2, #128	@ 0x80
 8002d36:	03d2      	lsls	r2, r2, #15
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	4a27      	ldr	r2, [pc, #156]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	0010      	movs	r0, r2
 8002d40:	f7ff fbf4 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002d44:	e064      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	2380      	movs	r3, #128	@ 0x80
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d56:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x35c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d107      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0019      	movs	r1, r3
 8002d66:	0010      	movs	r0, r2
 8002d68:	f7ff fc66 	bl	8002638 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da4d      	bge.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d74:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff fbec 	bl	8002554 <LL_ADC_GetCommonPathInternalCh>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <HAL_ADC_ConfigChannel+0x364>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d108      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <HAL_ADC_ConfigChannel+0x378>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002d92:	0019      	movs	r1, r3
 8002d94:	0010      	movs	r0, r2
 8002d96:	f7ff fbc9 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002d9a:	e039      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <HAL_ADC_ConfigChannel+0x370>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d108      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4a12      	ldr	r2, [pc, #72]	@ (8002df4 <HAL_ADC_ConfigChannel+0x37c>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002dae:	0019      	movs	r1, r3
 8002db0:	0010      	movs	r0, r2
 8002db2:	f7ff fbbb 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002db6:	e02b      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002dec <HAL_ADC_ConfigChannel+0x374>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d126      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <HAL_ADC_ConfigChannel+0x380>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	4a03      	ldr	r2, [pc, #12]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x360>)
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f7ff fbad 	bl	800252c <LL_ADC_SetCommonPathInternalCh>
 8002dd2:	e01d      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x398>
 8002dd4:	80000004 	.word	0x80000004
 8002dd8:	40012708 	.word	0x40012708
 8002ddc:	b0001000 	.word	0xb0001000
 8002de0:	20000008 	.word	0x20000008
 8002de4:	00030d40 	.word	0x00030d40
 8002de8:	b8004000 	.word	0xb8004000
 8002dec:	b4002000 	.word	0xb4002000
 8002df0:	ff7fffff 	.word	0xff7fffff
 8002df4:	feffffff 	.word	0xfeffffff
 8002df8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	2220      	movs	r2, #32
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e08:	2317      	movs	r3, #23
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2254      	movs	r2, #84	@ 0x54
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002e18:	2317      	movs	r3, #23
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	781b      	ldrb	r3, [r3, #0]
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b006      	add	sp, #24
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			@ (mov r8, r8)

08002e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	0002      	movs	r2, r0
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	1dfb      	adds	r3, r7, #7
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e3a:	d809      	bhi.n	8002e50 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3c:	1dfb      	adds	r3, r7, #7
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	001a      	movs	r2, r3
 8002e42:	231f      	movs	r3, #31
 8002e44:	401a      	ands	r2, r3
 8002e46:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <__NVIC_EnableIRQ+0x30>)
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4091      	lsls	r1, r2
 8002e4c:	000a      	movs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	0002      	movs	r2, r0
 8002e64:	1dfb      	adds	r3, r7, #7
 8002e66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	1dfb      	adds	r3, r7, #7
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e6e:	d810      	bhi.n	8002e92 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e70:	1dfb      	adds	r3, r7, #7
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	001a      	movs	r2, r3
 8002e76:	231f      	movs	r3, #31
 8002e78:	4013      	ands	r3, r2
 8002e7a:	4908      	ldr	r1, [pc, #32]	@ (8002e9c <__NVIC_DisableIRQ+0x40>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	0013      	movs	r3, r2
 8002e82:	2280      	movs	r2, #128	@ 0x80
 8002e84:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e86:	f3bf 8f4f 	dsb	sy
}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002e8c:	f3bf 8f6f 	isb	sy
}
 8002e90:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	e000e100 	.word	0xe000e100

08002ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002eb4:	d828      	bhi.n	8002f08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002f74 <__NVIC_SetPriority+0xd4>)
 8002eb8:	1dfb      	adds	r3, r7, #7
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	33c0      	adds	r3, #192	@ 0xc0
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	589b      	ldr	r3, [r3, r2]
 8002ec6:	1dfa      	adds	r2, r7, #7
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	0011      	movs	r1, r2
 8002ecc:	2203      	movs	r2, #3
 8002ece:	400a      	ands	r2, r1
 8002ed0:	00d2      	lsls	r2, r2, #3
 8002ed2:	21ff      	movs	r1, #255	@ 0xff
 8002ed4:	4091      	lsls	r1, r2
 8002ed6:	000a      	movs	r2, r1
 8002ed8:	43d2      	mvns	r2, r2
 8002eda:	401a      	ands	r2, r3
 8002edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	22ff      	movs	r2, #255	@ 0xff
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	1dfb      	adds	r3, r7, #7
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	0018      	movs	r0, r3
 8002eec:	2303      	movs	r3, #3
 8002eee:	4003      	ands	r3, r0
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ef4:	481f      	ldr	r0, [pc, #124]	@ (8002f74 <__NVIC_SetPriority+0xd4>)
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	430a      	orrs	r2, r1
 8002f00:	33c0      	adds	r3, #192	@ 0xc0
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f06:	e031      	b.n	8002f6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f08:	4a1b      	ldr	r2, [pc, #108]	@ (8002f78 <__NVIC_SetPriority+0xd8>)
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	0019      	movs	r1, r3
 8002f10:	230f      	movs	r3, #15
 8002f12:	400b      	ands	r3, r1
 8002f14:	3b08      	subs	r3, #8
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3306      	adds	r3, #6
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	3304      	adds	r3, #4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1dfa      	adds	r2, r7, #7
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	0011      	movs	r1, r2
 8002f28:	2203      	movs	r2, #3
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	00d2      	lsls	r2, r2, #3
 8002f2e:	21ff      	movs	r1, #255	@ 0xff
 8002f30:	4091      	lsls	r1, r2
 8002f32:	000a      	movs	r2, r1
 8002f34:	43d2      	mvns	r2, r2
 8002f36:	401a      	ands	r2, r3
 8002f38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	22ff      	movs	r2, #255	@ 0xff
 8002f40:	401a      	ands	r2, r3
 8002f42:	1dfb      	adds	r3, r7, #7
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	0018      	movs	r0, r3
 8002f48:	2303      	movs	r3, #3
 8002f4a:	4003      	ands	r3, r0
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f50:	4809      	ldr	r0, [pc, #36]	@ (8002f78 <__NVIC_SetPriority+0xd8>)
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	001c      	movs	r4, r3
 8002f58:	230f      	movs	r3, #15
 8002f5a:	4023      	ands	r3, r4
 8002f5c:	3b08      	subs	r3, #8
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	430a      	orrs	r2, r1
 8002f62:	3306      	adds	r3, #6
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	18c3      	adds	r3, r0, r3
 8002f68:	3304      	adds	r3, #4
 8002f6a:	601a      	str	r2, [r3, #0]
}
 8002f6c:	46c0      	nop			@ (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b003      	add	sp, #12
 8002f72:	bd90      	pop	{r4, r7, pc}
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	1e5a      	subs	r2, r3, #1
 8002f88:	2380      	movs	r3, #128	@ 0x80
 8002f8a:	045b      	lsls	r3, r3, #17
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d301      	bcc.n	8002f94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f90:	2301      	movs	r3, #1
 8002f92:	e010      	b.n	8002fb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f94:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <SysTick_Config+0x44>)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	3a01      	subs	r2, #1
 8002f9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	425b      	negs	r3, r3
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff ff7c 	bl	8002ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa8:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <SysTick_Config+0x44>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fae:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <SysTick_Config+0x44>)
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	e000e010 	.word	0xe000e010

08002fc4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	210f      	movs	r1, #15
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	1c02      	adds	r2, r0, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b25b      	sxtb	r3, r3
 8002fde:	0011      	movs	r1, r2
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff ff5d 	bl	8002ea0 <__NVIC_SetPriority>
}
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b004      	add	sp, #16
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	1dfb      	adds	r3, r7, #7
 8002ff8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff ff11 	bl	8002e28 <__NVIC_EnableIRQ>
}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b002      	add	sp, #8
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	0002      	movs	r2, r0
 8003016:	1dfb      	adds	r3, r7, #7
 8003018:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800301a:	1dfb      	adds	r3, r7, #7
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b25b      	sxtb	r3, r3
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff ff1b 	bl	8002e5c <__NVIC_DisableIRQ>
}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b002      	add	sp, #8
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff ff9f 	bl	8002f7c <SysTick_Config>
 800303e:	0003      	movs	r3, r0
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b002      	add	sp, #8
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e077      	b.n	800314a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3d      	ldr	r2, [pc, #244]	@ (8003154 <HAL_DMA_Init+0x10c>)
 8003060:	4694      	mov	ip, r2
 8003062:	4463      	add	r3, ip
 8003064:	2114      	movs	r1, #20
 8003066:	0018      	movs	r0, r3
 8003068:	f7fd f854 	bl	8000114 <__udivsi3>
 800306c:	0003      	movs	r3, r0
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2225      	movs	r2, #37	@ 0x25
 8003078:	2102      	movs	r1, #2
 800307a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4934      	ldr	r1, [pc, #208]	@ (8003158 <HAL_DMA_Init+0x110>)
 8003088:	400a      	ands	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6819      	ldr	r1, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 fa3f 	bl	8003548 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	01db      	lsls	r3, r3, #7
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d102      	bne.n	80030dc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	213f      	movs	r1, #63	@ 0x3f
 80030e6:	400a      	ands	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80030f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d011      	beq.n	8003120 <HAL_DMA_Init+0xd8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d80d      	bhi.n	8003120 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	0018      	movs	r0, r3
 8003108:	f000 fa4a 	bl	80035a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	e008      	b.n	8003132 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2225      	movs	r2, #37	@ 0x25
 800313c:	2101      	movs	r1, #1
 800313e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	@ 0x24
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b002      	add	sp, #8
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	bffdfff8 	.word	0xbffdfff8
 8003158:	ffff800f 	.word	0xffff800f

0800315c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e066      	b.n	800323c <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	438a      	bics	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <HAL_DMA_DeInit+0xe8>)
 8003184:	4694      	mov	ip, r2
 8003186:	4463      	add	r3, ip
 8003188:	2114      	movs	r1, #20
 800318a:	0018      	movs	r0, r3
 800318c:	f7fc ffc2 	bl	8000114 <__udivsi3>
 8003190:	0003      	movs	r3, r0
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80031a0:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <HAL_DMA_DeInit+0xec>)
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	221c      	movs	r2, #28
 80031aa:	4013      	ands	r3, r2
 80031ac:	2201      	movs	r2, #1
 80031ae:	409a      	lsls	r2, r3
 80031b0:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <HAL_DMA_DeInit+0xec>)
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 f9c5 	bl	8003548 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031ce:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_DMA_DeInit+0x9e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d80c      	bhi.n	80031fa <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 f9dc 	bl	80035a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80031f8:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2225      	movs	r2, #37	@ 0x25
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2224      	movs	r2, #36	@ 0x24
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}
 8003244:	bffdfff8 	.word	0xbffdfff8
 8003248:	40020000 	.word	0x40020000

0800324c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e050      	b.n	8003300 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2225      	movs	r2, #37	@ 0x25
 8003262:	5c9b      	ldrb	r3, [r3, r2]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d008      	beq.n	800327c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2204      	movs	r2, #4
 800326e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2224      	movs	r2, #36	@ 0x24
 8003274:	2100      	movs	r1, #0
 8003276:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e041      	b.n	8003300 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	210e      	movs	r1, #14
 8003288:	438a      	bics	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	491c      	ldr	r1, [pc, #112]	@ (8003308 <HAL_DMA_Abort+0xbc>)
 8003298:	400a      	ands	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2101      	movs	r1, #1
 80032a8:	438a      	bics	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80032ac:	4b17      	ldr	r3, [pc, #92]	@ (800330c <HAL_DMA_Abort+0xc0>)
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	221c      	movs	r2, #28
 80032b6:	4013      	ands	r3, r2
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	4b13      	ldr	r3, [pc, #76]	@ (800330c <HAL_DMA_Abort+0xc0>)
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00c      	beq.n	80032ee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032de:	490a      	ldr	r1, [pc, #40]	@ (8003308 <HAL_DMA_Abort+0xbc>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80032ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2225      	movs	r2, #37	@ 0x25
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2224      	movs	r2, #36	@ 0x24
 80032fa:	2100      	movs	r1, #0
 80032fc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}
 8003308:	fffffeff 	.word	0xfffffeff
 800330c:	40020000 	.word	0x40020000

08003310 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	210f      	movs	r1, #15
 800331a:	187b      	adds	r3, r7, r1
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2225      	movs	r2, #37	@ 0x25
 8003324:	5c9b      	ldrb	r3, [r3, r2]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d006      	beq.n	800333a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2204      	movs	r2, #4
 8003330:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e049      	b.n	80033ce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	210e      	movs	r1, #14
 8003346:	438a      	bics	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	438a      	bics	r2, r1
 8003358:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	491d      	ldr	r1, [pc, #116]	@ (80033dc <HAL_DMA_Abort_IT+0xcc>)
 8003366:	400a      	ands	r2, r1
 8003368:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800336a:	4b1d      	ldr	r3, [pc, #116]	@ (80033e0 <HAL_DMA_Abort_IT+0xd0>)
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	221c      	movs	r2, #28
 8003374:	4013      	ands	r3, r2
 8003376:	2201      	movs	r2, #1
 8003378:	409a      	lsls	r2, r3
 800337a:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <HAL_DMA_Abort_IT+0xd0>)
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003388:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00c      	beq.n	80033ac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339c:	490f      	ldr	r1, [pc, #60]	@ (80033dc <HAL_DMA_Abort_IT+0xcc>)
 800339e:	400a      	ands	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80033aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2225      	movs	r2, #37	@ 0x25
 80033b0:	2101      	movs	r1, #1
 80033b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	@ 0x24
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	0010      	movs	r0, r2
 80033cc:	4798      	blx	r3
    }
  }
  return status;
 80033ce:	230f      	movs	r3, #15
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	781b      	ldrb	r3, [r3, #0]
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b004      	add	sp, #16
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	fffffeff 	.word	0xfffffeff
 80033e0:	40020000 	.word	0x40020000

080033e4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80033ec:	4b55      	ldr	r3, [pc, #340]	@ (8003544 <HAL_DMA_IRQHandler+0x160>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	221c      	movs	r2, #28
 8003400:	4013      	ands	r3, r2
 8003402:	2204      	movs	r2, #4
 8003404:	409a      	lsls	r2, r3
 8003406:	0013      	movs	r3, r2
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4013      	ands	r3, r2
 800340c:	d027      	beq.n	800345e <HAL_DMA_IRQHandler+0x7a>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2204      	movs	r2, #4
 8003412:	4013      	ands	r3, r2
 8003414:	d023      	beq.n	800345e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2220      	movs	r2, #32
 800341e:	4013      	ands	r3, r2
 8003420:	d107      	bne.n	8003432 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2104      	movs	r1, #4
 800342e:	438a      	bics	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003432:	4b44      	ldr	r3, [pc, #272]	@ (8003544 <HAL_DMA_IRQHandler+0x160>)
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	221c      	movs	r2, #28
 800343c:	4013      	ands	r3, r2
 800343e:	2204      	movs	r2, #4
 8003440:	409a      	lsls	r2, r3
 8003442:	4b40      	ldr	r3, [pc, #256]	@ (8003544 <HAL_DMA_IRQHandler+0x160>)
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	2b00      	cmp	r3, #0
 800344e:	d100      	bne.n	8003452 <HAL_DMA_IRQHandler+0x6e>
 8003450:	e073      	b.n	800353a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	0010      	movs	r0, r2
 800345a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800345c:	e06d      	b.n	800353a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	221c      	movs	r2, #28
 8003464:	4013      	ands	r3, r2
 8003466:	2202      	movs	r2, #2
 8003468:	409a      	lsls	r2, r3
 800346a:	0013      	movs	r3, r2
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	d02e      	beq.n	80034d0 <HAL_DMA_IRQHandler+0xec>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2202      	movs	r2, #2
 8003476:	4013      	ands	r3, r2
 8003478:	d02a      	beq.n	80034d0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2220      	movs	r2, #32
 8003482:	4013      	ands	r3, r2
 8003484:	d10b      	bne.n	800349e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	210a      	movs	r1, #10
 8003492:	438a      	bics	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2225      	movs	r2, #37	@ 0x25
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800349e:	4b29      	ldr	r3, [pc, #164]	@ (8003544 <HAL_DMA_IRQHandler+0x160>)
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	221c      	movs	r2, #28
 80034a8:	4013      	ands	r3, r2
 80034aa:	2202      	movs	r2, #2
 80034ac:	409a      	lsls	r2, r3
 80034ae:	4b25      	ldr	r3, [pc, #148]	@ (8003544 <HAL_DMA_IRQHandler+0x160>)
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	@ 0x24
 80034b8:	2100      	movs	r1, #0
 80034ba:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d03a      	beq.n	800353a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	0010      	movs	r0, r2
 80034cc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80034ce:	e034      	b.n	800353a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	221c      	movs	r2, #28
 80034d6:	4013      	ands	r3, r2
 80034d8:	2208      	movs	r2, #8
 80034da:	409a      	lsls	r2, r3
 80034dc:	0013      	movs	r3, r2
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	d02b      	beq.n	800353c <HAL_DMA_IRQHandler+0x158>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2208      	movs	r2, #8
 80034e8:	4013      	ands	r3, r2
 80034ea:	d027      	beq.n	800353c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	210e      	movs	r1, #14
 80034f8:	438a      	bics	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80034fc:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <HAL_DMA_IRQHandler+0x160>)
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	221c      	movs	r2, #28
 8003506:	4013      	ands	r3, r2
 8003508:	2201      	movs	r2, #1
 800350a:	409a      	lsls	r2, r3
 800350c:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <HAL_DMA_IRQHandler+0x160>)
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2225      	movs	r2, #37	@ 0x25
 800351c:	2101      	movs	r1, #1
 800351e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	@ 0x24
 8003524:	2100      	movs	r1, #0
 8003526:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	0010      	movs	r0, r2
 8003538:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	46c0      	nop			@ (mov r8, r8)
}
 800353e:	46bd      	mov	sp, r7
 8003540:	b004      	add	sp, #16
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40020000 	.word	0x40020000

08003548 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	089b      	lsrs	r3, r3, #2
 8003556:	4a10      	ldr	r2, [pc, #64]	@ (8003598 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003558:	4694      	mov	ip, r2
 800355a:	4463      	add	r3, ip
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	001a      	movs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	001a      	movs	r2, r3
 800356a:	23ff      	movs	r3, #255	@ 0xff
 800356c:	4013      	ands	r3, r2
 800356e:	3b08      	subs	r3, #8
 8003570:	2114      	movs	r1, #20
 8003572:	0018      	movs	r0, r3
 8003574:	f7fc fdce 	bl	8000114 <__udivsi3>
 8003578:	0003      	movs	r3, r0
 800357a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a07      	ldr	r2, [pc, #28]	@ (800359c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003580:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	221f      	movs	r2, #31
 8003586:	4013      	ands	r3, r2
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003590:	46c0      	nop			@ (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b004      	add	sp, #16
 8003596:	bd80      	pop	{r7, pc}
 8003598:	10008200 	.word	0x10008200
 800359c:	40020880 	.word	0x40020880

080035a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	223f      	movs	r2, #63	@ 0x3f
 80035ae:	4013      	ands	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a0a      	ldr	r2, [pc, #40]	@ (80035e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035b6:	4694      	mov	ip, r2
 80035b8:	4463      	add	r3, ip
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	001a      	movs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a07      	ldr	r2, [pc, #28]	@ (80035e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	4013      	ands	r3, r2
 80035d0:	2201      	movs	r2, #1
 80035d2:	409a      	lsls	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b004      	add	sp, #16
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	1000823f 	.word	0x1000823f
 80035e4:	40020940 	.word	0x40020940

080035e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f6:	e147      	b.n	8003888 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4091      	lsls	r1, r2
 8003602:	000a      	movs	r2, r1
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d100      	bne.n	8003610 <HAL_GPIO_Init+0x28>
 800360e:	e138      	b.n	8003882 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2203      	movs	r2, #3
 8003616:	4013      	ands	r3, r2
 8003618:	2b01      	cmp	r3, #1
 800361a:	d005      	beq.n	8003628 <HAL_GPIO_Init+0x40>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2203      	movs	r2, #3
 8003622:	4013      	ands	r3, r2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d130      	bne.n	800368a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2203      	movs	r2, #3
 8003634:	409a      	lsls	r2, r3
 8003636:	0013      	movs	r3, r2
 8003638:	43da      	mvns	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	409a      	lsls	r2, r3
 800364a:	0013      	movs	r3, r2
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800365e:	2201      	movs	r2, #1
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
 8003664:	0013      	movs	r3, r2
 8003666:	43da      	mvns	r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	2201      	movs	r2, #1
 8003676:	401a      	ands	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	409a      	lsls	r2, r3
 800367c:	0013      	movs	r3, r2
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2203      	movs	r2, #3
 8003690:	4013      	ands	r3, r2
 8003692:	2b03      	cmp	r3, #3
 8003694:	d017      	beq.n	80036c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	409a      	lsls	r2, r3
 80036a4:	0013      	movs	r3, r2
 80036a6:	43da      	mvns	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	0013      	movs	r3, r2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2203      	movs	r2, #3
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d123      	bne.n	800371a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	0092      	lsls	r2, r2, #2
 80036dc:	58d3      	ldr	r3, [r2, r3]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2207      	movs	r2, #7
 80036e4:	4013      	ands	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	220f      	movs	r2, #15
 80036ea:	409a      	lsls	r2, r3
 80036ec:	0013      	movs	r3, r2
 80036ee:	43da      	mvns	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2107      	movs	r1, #7
 80036fe:	400b      	ands	r3, r1
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	409a      	lsls	r2, r3
 8003704:	0013      	movs	r3, r2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	0092      	lsls	r2, r2, #2
 8003716:	6939      	ldr	r1, [r7, #16]
 8003718:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	409a      	lsls	r2, r3
 8003728:	0013      	movs	r3, r2
 800372a:	43da      	mvns	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2203      	movs	r2, #3
 8003738:	401a      	ands	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	409a      	lsls	r2, r3
 8003740:	0013      	movs	r3, r2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	23c0      	movs	r3, #192	@ 0xc0
 8003754:	029b      	lsls	r3, r3, #10
 8003756:	4013      	ands	r3, r2
 8003758:	d100      	bne.n	800375c <HAL_GPIO_Init+0x174>
 800375a:	e092      	b.n	8003882 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800375c:	4a50      	ldr	r2, [pc, #320]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	3318      	adds	r3, #24
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	589b      	ldr	r3, [r3, r2]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2203      	movs	r2, #3
 800376e:	4013      	ands	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	220f      	movs	r2, #15
 8003774:	409a      	lsls	r2, r3
 8003776:	0013      	movs	r3, r2
 8003778:	43da      	mvns	r2, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	23a0      	movs	r3, #160	@ 0xa0
 8003784:	05db      	lsls	r3, r3, #23
 8003786:	429a      	cmp	r2, r3
 8003788:	d013      	beq.n	80037b2 <HAL_GPIO_Init+0x1ca>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a45      	ldr	r2, [pc, #276]	@ (80038a4 <HAL_GPIO_Init+0x2bc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00d      	beq.n	80037ae <HAL_GPIO_Init+0x1c6>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a44      	ldr	r2, [pc, #272]	@ (80038a8 <HAL_GPIO_Init+0x2c0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <HAL_GPIO_Init+0x1c2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a43      	ldr	r2, [pc, #268]	@ (80038ac <HAL_GPIO_Init+0x2c4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_GPIO_Init+0x1be>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x1cc>
 80037a6:	2305      	movs	r3, #5
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x1cc>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x1cc>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x1cc>
 80037b2:	2300      	movs	r3, #0
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	2103      	movs	r1, #3
 80037b8:	400a      	ands	r2, r1
 80037ba:	00d2      	lsls	r2, r2, #3
 80037bc:	4093      	lsls	r3, r2
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80037c4:	4936      	ldr	r1, [pc, #216]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3318      	adds	r3, #24
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037d2:	4b33      	ldr	r3, [pc, #204]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43da      	mvns	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	2380      	movs	r3, #128	@ 0x80
 80037e8:	035b      	lsls	r3, r3, #13
 80037ea:	4013      	ands	r3, r2
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037f6:	4b2a      	ldr	r3, [pc, #168]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80037fc:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43da      	mvns	r2, r3
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	039b      	lsls	r3, r3, #14
 8003814:	4013      	ands	r3, r2
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003820:	4b1f      	ldr	r3, [pc, #124]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003826:	4a1e      	ldr	r2, [pc, #120]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 8003828:	2384      	movs	r3, #132	@ 0x84
 800382a:	58d3      	ldr	r3, [r2, r3]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43da      	mvns	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	4013      	ands	r3, r2
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800384c:	4914      	ldr	r1, [pc, #80]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 800384e:	2284      	movs	r2, #132	@ 0x84
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003854:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	58d3      	ldr	r3, [r2, r3]
 800385a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	43da      	mvns	r2, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	2380      	movs	r3, #128	@ 0x80
 800386c:	025b      	lsls	r3, r3, #9
 800386e:	4013      	ands	r3, r2
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800387a:	4909      	ldr	r1, [pc, #36]	@ (80038a0 <HAL_GPIO_Init+0x2b8>)
 800387c:	2280      	movs	r2, #128	@ 0x80
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	3301      	adds	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	40da      	lsrs	r2, r3
 8003890:	1e13      	subs	r3, r2, #0
 8003892:	d000      	beq.n	8003896 <HAL_GPIO_Init+0x2ae>
 8003894:	e6b0      	b.n	80035f8 <HAL_GPIO_Init+0x10>
  }
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46c0      	nop			@ (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b006      	add	sp, #24
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021800 	.word	0x40021800
 80038a4:	50000400 	.word	0x50000400
 80038a8:	50000800 	.word	0x50000800
 80038ac:	50000c00 	.word	0x50000c00

080038b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80038be:	e0b4      	b.n	8003a2a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80038c0:	2201      	movs	r2, #1
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	409a      	lsls	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d100      	bne.n	80038d4 <HAL_GPIO_DeInit+0x24>
 80038d2:	e0a7      	b.n	8003a24 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80038d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	3318      	adds	r3, #24
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	589b      	ldr	r3, [r3, r2]
 80038e0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2203      	movs	r2, #3
 80038e6:	4013      	ands	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	220f      	movs	r2, #15
 80038ec:	409a      	lsls	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	23a0      	movs	r3, #160	@ 0xa0
 80038f8:	05db      	lsls	r3, r3, #23
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d013      	beq.n	8003926 <HAL_GPIO_DeInit+0x76>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a50      	ldr	r2, [pc, #320]	@ (8003a44 <HAL_GPIO_DeInit+0x194>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_GPIO_DeInit+0x72>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4f      	ldr	r2, [pc, #316]	@ (8003a48 <HAL_GPIO_DeInit+0x198>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <HAL_GPIO_DeInit+0x6e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4e      	ldr	r2, [pc, #312]	@ (8003a4c <HAL_GPIO_DeInit+0x19c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_GPIO_DeInit+0x6a>
 8003916:	2303      	movs	r3, #3
 8003918:	e006      	b.n	8003928 <HAL_GPIO_DeInit+0x78>
 800391a:	2305      	movs	r3, #5
 800391c:	e004      	b.n	8003928 <HAL_GPIO_DeInit+0x78>
 800391e:	2302      	movs	r3, #2
 8003920:	e002      	b.n	8003928 <HAL_GPIO_DeInit+0x78>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_GPIO_DeInit+0x78>
 8003926:	2300      	movs	r3, #0
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	2103      	movs	r1, #3
 800392c:	400a      	ands	r2, r1
 800392e:	00d2      	lsls	r2, r2, #3
 8003930:	4093      	lsls	r3, r2
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	429a      	cmp	r2, r3
 8003936:	d136      	bne.n	80039a6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003938:	4a41      	ldr	r2, [pc, #260]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	58d3      	ldr	r3, [r2, r3]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	43d2      	mvns	r2, r2
 8003942:	493f      	ldr	r1, [pc, #252]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 8003944:	4013      	ands	r3, r2
 8003946:	2280      	movs	r2, #128	@ 0x80
 8003948:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800394a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 800394c:	2384      	movs	r3, #132	@ 0x84
 800394e:	58d3      	ldr	r3, [r2, r3]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	43d2      	mvns	r2, r2
 8003954:	493a      	ldr	r1, [pc, #232]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 8003956:	4013      	ands	r3, r2
 8003958:	2284      	movs	r2, #132	@ 0x84
 800395a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800395c:	4b38      	ldr	r3, [pc, #224]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43d9      	mvns	r1, r3
 8003964:	4b36      	ldr	r3, [pc, #216]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 8003966:	400a      	ands	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800396a:	4b35      	ldr	r3, [pc, #212]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	43d9      	mvns	r1, r3
 8003972:	4b33      	ldr	r3, [pc, #204]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 8003974:	400a      	ands	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2203      	movs	r2, #3
 800397c:	4013      	ands	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	220f      	movs	r2, #15
 8003982:	409a      	lsls	r2, r3
 8003984:	0013      	movs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003988:	4a2d      	ldr	r2, [pc, #180]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	3318      	adds	r3, #24
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	589a      	ldr	r2, [r3, r2]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	43d9      	mvns	r1, r3
 8003998:	4829      	ldr	r0, [pc, #164]	@ (8003a40 <HAL_GPIO_DeInit+0x190>)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	400a      	ands	r2, r1
 80039a0:	3318      	adds	r3, #24
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2103      	movs	r1, #3
 80039b0:	4099      	lsls	r1, r3
 80039b2:	000b      	movs	r3, r1
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	08da      	lsrs	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3208      	adds	r2, #8
 80039c2:	0092      	lsls	r2, r2, #2
 80039c4:	58d3      	ldr	r3, [r2, r3]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	2107      	movs	r1, #7
 80039ca:	400a      	ands	r2, r1
 80039cc:	0092      	lsls	r2, r2, #2
 80039ce:	210f      	movs	r1, #15
 80039d0:	4091      	lsls	r1, r2
 80039d2:	000a      	movs	r2, r1
 80039d4:	43d1      	mvns	r1, r2
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	08d2      	lsrs	r2, r2, #3
 80039da:	4019      	ands	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3208      	adds	r2, #8
 80039e0:	0092      	lsls	r2, r2, #2
 80039e2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	0052      	lsls	r2, r2, #1
 80039ec:	2103      	movs	r1, #3
 80039ee:	4091      	lsls	r1, r2
 80039f0:	000a      	movs	r2, r1
 80039f2:	43d2      	mvns	r2, r2
 80039f4:	401a      	ands	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2101      	movs	r1, #1
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4091      	lsls	r1, r2
 8003a04:	000a      	movs	r2, r1
 8003a06:	43d2      	mvns	r2, r2
 8003a08:	401a      	ands	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	0052      	lsls	r2, r2, #1
 8003a16:	2103      	movs	r1, #3
 8003a18:	4091      	lsls	r1, r2
 8003a1a:	000a      	movs	r2, r1
 8003a1c:	43d2      	mvns	r2, r2
 8003a1e:	401a      	ands	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	40da      	lsrs	r2, r3
 8003a30:	1e13      	subs	r3, r2, #0
 8003a32:	d000      	beq.n	8003a36 <HAL_GPIO_DeInit+0x186>
 8003a34:	e744      	b.n	80038c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	46c0      	nop			@ (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b006      	add	sp, #24
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021800 	.word	0x40021800
 8003a44:	50000400 	.word	0x50000400
 8003a48:	50000800 	.word	0x50000800
 8003a4c:	50000c00 	.word	0x50000c00

08003a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	000a      	movs	r2, r1
 8003a5a:	1cbb      	adds	r3, r7, #2
 8003a5c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	1cba      	adds	r2, r7, #2
 8003a64:	8812      	ldrh	r2, [r2, #0]
 8003a66:	4013      	ands	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003a6a:	230f      	movs	r3, #15
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e003      	b.n	8003a7c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a74:	230f      	movs	r3, #15
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003a7c:	230f      	movs	r3, #15
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	781b      	ldrb	r3, [r3, #0]
}
 8003a82:	0018      	movs	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b004      	add	sp, #16
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	0008      	movs	r0, r1
 8003a94:	0011      	movs	r1, r2
 8003a96:	1cbb      	adds	r3, r7, #2
 8003a98:	1c02      	adds	r2, r0, #0
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	1c7b      	adds	r3, r7, #1
 8003a9e:	1c0a      	adds	r2, r1, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa2:	1c7b      	adds	r3, r7, #1
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	881a      	ldrh	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab2:	e003      	b.n	8003abc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ab4:	1cbb      	adds	r3, r7, #2
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003abc:	46c0      	nop			@ (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	0002      	movs	r2, r0
 8003acc:	1dbb      	adds	r3, r7, #6
 8003ace:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003ad0:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	1dba      	adds	r2, r7, #6
 8003ad6:	8812      	ldrh	r2, [r2, #0]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d008      	beq.n	8003aee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003adc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ade:	1dba      	adds	r2, r7, #6
 8003ae0:	8812      	ldrh	r2, [r2, #0]
 8003ae2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003ae4:	1dbb      	adds	r3, r7, #6
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f004 fad1 	bl	8008090 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003aee:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	1dba      	adds	r2, r7, #6
 8003af4:	8812      	ldrh	r2, [r2, #0]
 8003af6:	4013      	ands	r3, r2
 8003af8:	d008      	beq.n	8003b0c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003afc:	1dba      	adds	r2, r7, #6
 8003afe:	8812      	ldrh	r2, [r2, #0]
 8003b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003b02:	1dbb      	adds	r3, r7, #6
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f806 	bl	8003b18 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003b0c:	46c0      	nop			@ (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021800 	.word	0x40021800

08003b18 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	0002      	movs	r2, r0
 8003b20:	1dbb      	adds	r3, r7, #6
 8003b22:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003b24:	46c0      	nop			@ (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e08f      	b.n	8003c5e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2241      	movs	r2, #65	@ 0x41
 8003b42:	5c9b      	ldrb	r3, [r3, r2]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2240      	movs	r2, #64	@ 0x40
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	0018      	movs	r0, r3
 8003b56:	f003 fe1d 	bl	8007794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2241      	movs	r2, #65	@ 0x41
 8003b5e:	2124      	movs	r1, #36	@ 0x24
 8003b60:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	438a      	bics	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	493b      	ldr	r1, [pc, #236]	@ (8003c68 <HAL_I2C_Init+0x13c>)
 8003b7c:	400a      	ands	r2, r1
 8003b7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4938      	ldr	r1, [pc, #224]	@ (8003c6c <HAL_I2C_Init+0x140>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d108      	bne.n	8003baa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2180      	movs	r1, #128	@ 0x80
 8003ba2:	0209      	lsls	r1, r1, #8
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	e007      	b.n	8003bba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2184      	movs	r1, #132	@ 0x84
 8003bb4:	0209      	lsls	r1, r1, #8
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d109      	bne.n	8003bd6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2180      	movs	r1, #128	@ 0x80
 8003bce:	0109      	lsls	r1, r1, #4
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	e007      	b.n	8003be6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4923      	ldr	r1, [pc, #140]	@ (8003c70 <HAL_I2C_Init+0x144>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4920      	ldr	r1, [pc, #128]	@ (8003c74 <HAL_I2C_Init+0x148>)
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	491a      	ldr	r1, [pc, #104]	@ (8003c6c <HAL_I2C_Init+0x140>)
 8003c02:	400a      	ands	r2, r1
 8003c04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69d9      	ldr	r1, [r3, #28]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1a      	ldr	r2, [r3, #32]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2241      	movs	r2, #65	@ 0x41
 8003c4a:	2120      	movs	r1, #32
 8003c4c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2242      	movs	r2, #66	@ 0x42
 8003c58:	2100      	movs	r1, #0
 8003c5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b002      	add	sp, #8
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	f0ffffff 	.word	0xf0ffffff
 8003c6c:	ffff7fff 	.word	0xffff7fff
 8003c70:	fffff7ff 	.word	0xfffff7ff
 8003c74:	02008000 	.word	0x02008000

08003c78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b089      	sub	sp, #36	@ 0x24
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	000c      	movs	r4, r1
 8003c82:	0010      	movs	r0, r2
 8003c84:	0019      	movs	r1, r3
 8003c86:	230a      	movs	r3, #10
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	1c22      	adds	r2, r4, #0
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	2308      	movs	r3, #8
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	1c02      	adds	r2, r0, #0
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	1dbb      	adds	r3, r7, #6
 8003c98:	1c0a      	adds	r2, r1, #0
 8003c9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2241      	movs	r2, #65	@ 0x41
 8003ca0:	5c9b      	ldrb	r3, [r3, r2]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d000      	beq.n	8003caa <HAL_I2C_Mem_Write+0x32>
 8003ca8:	e10c      	b.n	8003ec4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <HAL_I2C_Mem_Write+0x42>
 8003cb0:	232c      	movs	r3, #44	@ 0x2c
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2280      	movs	r2, #128	@ 0x80
 8003cbe:	0092      	lsls	r2, r2, #2
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0ff      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2240      	movs	r2, #64	@ 0x40
 8003cca:	5c9b      	ldrb	r3, [r3, r2]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_I2C_Mem_Write+0x5c>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e0f8      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x24e>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2240      	movs	r2, #64	@ 0x40
 8003cd8:	2101      	movs	r1, #1
 8003cda:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cdc:	f7fe fbf8 	bl	80024d0 <HAL_GetTick>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	0219      	lsls	r1, r3, #8
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2319      	movs	r3, #25
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f000 fb0b 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	1e03      	subs	r3, r0, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0e3      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2241      	movs	r2, #65	@ 0x41
 8003d02:	2121      	movs	r1, #33	@ 0x21
 8003d04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2242      	movs	r2, #66	@ 0x42
 8003d0a:	2140      	movs	r1, #64	@ 0x40
 8003d0c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	222c      	movs	r2, #44	@ 0x2c
 8003d1e:	18ba      	adds	r2, r7, r2
 8003d20:	8812      	ldrh	r2, [r2, #0]
 8003d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d2a:	1dbb      	adds	r3, r7, #6
 8003d2c:	881c      	ldrh	r4, [r3, #0]
 8003d2e:	2308      	movs	r3, #8
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	881a      	ldrh	r2, [r3, #0]
 8003d34:	230a      	movs	r3, #10
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	8819      	ldrh	r1, [r3, #0]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	0023      	movs	r3, r4
 8003d46:	f000 f9f9 	bl	800413c <I2C_RequestMemoryWrite>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2240      	movs	r2, #64	@ 0x40
 8003d52:	2100      	movs	r1, #0
 8003d54:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0b5      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2bff      	cmp	r3, #255	@ 0xff
 8003d62:	d911      	bls.n	8003d88 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	22ff      	movs	r2, #255	@ 0xff
 8003d68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	045c      	lsls	r4, r3, #17
 8003d74:	230a      	movs	r3, #10
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	8819      	ldrh	r1, [r3, #0]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	0023      	movs	r3, r4
 8003d82:	f000 fc9d 	bl	80046c0 <I2C_TransferConfig>
 8003d86:	e012      	b.n	8003dae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	2380      	movs	r3, #128	@ 0x80
 8003d9a:	049c      	lsls	r4, r3, #18
 8003d9c:	230a      	movs	r3, #10
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	8819      	ldrh	r1, [r3, #0]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	2300      	movs	r3, #0
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	0023      	movs	r3, r4
 8003daa:	f000 fc89 	bl	80046c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	0018      	movs	r0, r3
 8003db6:	f000 fb01 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e081      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d03a      	beq.n	8003e72 <HAL_I2C_Mem_Write+0x1fa>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d136      	bne.n	8003e72 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	0013      	movs	r3, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2180      	movs	r1, #128	@ 0x80
 8003e12:	f000 fa7b 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003e16:	1e03      	subs	r3, r0, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e053      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2bff      	cmp	r3, #255	@ 0xff
 8003e26:	d911      	bls.n	8003e4c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	22ff      	movs	r2, #255	@ 0xff
 8003e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	2380      	movs	r3, #128	@ 0x80
 8003e36:	045c      	lsls	r4, r3, #17
 8003e38:	230a      	movs	r3, #10
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	8819      	ldrh	r1, [r3, #0]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	2300      	movs	r3, #0
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	0023      	movs	r3, r4
 8003e46:	f000 fc3b 	bl	80046c0 <I2C_TransferConfig>
 8003e4a:	e012      	b.n	8003e72 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	049c      	lsls	r4, r3, #18
 8003e60:	230a      	movs	r3, #10
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	8819      	ldrh	r1, [r3, #0]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	0023      	movs	r3, r4
 8003e6e:	f000 fc27 	bl	80046c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d198      	bne.n	8003dae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 fae0 	bl	8004448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e88:	1e03      	subs	r3, r0, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e01a      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2220      	movs	r2, #32
 8003e96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	490b      	ldr	r1, [pc, #44]	@ (8003ed0 <HAL_I2C_Mem_Write+0x258>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2241      	movs	r2, #65	@ 0x41
 8003eac:	2120      	movs	r1, #32
 8003eae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2242      	movs	r2, #66	@ 0x42
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2240      	movs	r2, #64	@ 0x40
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b007      	add	sp, #28
 8003ecc:	bd90      	pop	{r4, r7, pc}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	fe00e800 	.word	0xfe00e800

08003ed4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b089      	sub	sp, #36	@ 0x24
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	000c      	movs	r4, r1
 8003ede:	0010      	movs	r0, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	1c22      	adds	r2, r4, #0
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	2308      	movs	r3, #8
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	1c02      	adds	r2, r0, #0
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	1dbb      	adds	r3, r7, #6
 8003ef4:	1c0a      	adds	r2, r1, #0
 8003ef6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2241      	movs	r2, #65	@ 0x41
 8003efc:	5c9b      	ldrb	r3, [r3, r2]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d000      	beq.n	8003f06 <HAL_I2C_Mem_Read+0x32>
 8003f04:	e110      	b.n	8004128 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_I2C_Mem_Read+0x42>
 8003f0c:	232c      	movs	r3, #44	@ 0x2c
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2280      	movs	r2, #128	@ 0x80
 8003f1a:	0092      	lsls	r2, r2, #2
 8003f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e103      	b.n	800412a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2240      	movs	r2, #64	@ 0x40
 8003f26:	5c9b      	ldrb	r3, [r3, r2]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_I2C_Mem_Read+0x5c>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e0fc      	b.n	800412a <HAL_I2C_Mem_Read+0x256>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2240      	movs	r2, #64	@ 0x40
 8003f34:	2101      	movs	r1, #1
 8003f36:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f38:	f7fe faca 	bl	80024d0 <HAL_GetTick>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f40:	2380      	movs	r3, #128	@ 0x80
 8003f42:	0219      	lsls	r1, r3, #8
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	2319      	movs	r3, #25
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f000 f9dd 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003f52:	1e03      	subs	r3, r0, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0e7      	b.n	800412a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2241      	movs	r2, #65	@ 0x41
 8003f5e:	2122      	movs	r1, #34	@ 0x22
 8003f60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2242      	movs	r2, #66	@ 0x42
 8003f66:	2140      	movs	r1, #64	@ 0x40
 8003f68:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	222c      	movs	r2, #44	@ 0x2c
 8003f7a:	18ba      	adds	r2, r7, r2
 8003f7c:	8812      	ldrh	r2, [r2, #0]
 8003f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f86:	1dbb      	adds	r3, r7, #6
 8003f88:	881c      	ldrh	r4, [r3, #0]
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	881a      	ldrh	r2, [r3, #0]
 8003f90:	230a      	movs	r3, #10
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	8819      	ldrh	r1, [r3, #0]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	0023      	movs	r3, r4
 8003fa2:	f000 f92f 	bl	8004204 <I2C_RequestMemoryRead>
 8003fa6:	1e03      	subs	r3, r0, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2240      	movs	r2, #64	@ 0x40
 8003fae:	2100      	movs	r1, #0
 8003fb0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0b9      	b.n	800412a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2bff      	cmp	r3, #255	@ 0xff
 8003fbe:	d911      	bls.n	8003fe4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	22ff      	movs	r2, #255	@ 0xff
 8003fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	2380      	movs	r3, #128	@ 0x80
 8003fce:	045c      	lsls	r4, r3, #17
 8003fd0:	230a      	movs	r3, #10
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	8819      	ldrh	r1, [r3, #0]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	4b56      	ldr	r3, [pc, #344]	@ (8004134 <HAL_I2C_Mem_Read+0x260>)
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	0023      	movs	r3, r4
 8003fde:	f000 fb6f 	bl	80046c0 <I2C_TransferConfig>
 8003fe2:	e012      	b.n	800400a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	2380      	movs	r3, #128	@ 0x80
 8003ff6:	049c      	lsls	r4, r3, #18
 8003ff8:	230a      	movs	r3, #10
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	8819      	ldrh	r1, [r3, #0]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	4b4c      	ldr	r3, [pc, #304]	@ (8004134 <HAL_I2C_Mem_Read+0x260>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	0023      	movs	r3, r4
 8004006:	f000 fb5b 	bl	80046c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800400a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	0013      	movs	r3, r2
 8004014:	2200      	movs	r2, #0
 8004016:	2104      	movs	r1, #4
 8004018:	f000 f978 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e082      	b.n	800412a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03a      	beq.n	80040d6 <HAL_I2C_Mem_Read+0x202>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d136      	bne.n	80040d6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	0013      	movs	r3, r2
 8004072:	2200      	movs	r2, #0
 8004074:	2180      	movs	r1, #128	@ 0x80
 8004076:	f000 f949 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 800407a:	1e03      	subs	r3, r0, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e053      	b.n	800412a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2bff      	cmp	r3, #255	@ 0xff
 800408a:	d911      	bls.n	80040b0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	22ff      	movs	r2, #255	@ 0xff
 8004090:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004096:	b2da      	uxtb	r2, r3
 8004098:	2380      	movs	r3, #128	@ 0x80
 800409a:	045c      	lsls	r4, r3, #17
 800409c:	230a      	movs	r3, #10
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	8819      	ldrh	r1, [r3, #0]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	2300      	movs	r3, #0
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	0023      	movs	r3, r4
 80040aa:	f000 fb09 	bl	80046c0 <I2C_TransferConfig>
 80040ae:	e012      	b.n	80040d6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	2380      	movs	r3, #128	@ 0x80
 80040c2:	049c      	lsls	r4, r3, #18
 80040c4:	230a      	movs	r3, #10
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	8819      	ldrh	r1, [r3, #0]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	2300      	movs	r3, #0
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	0023      	movs	r3, r4
 80040d2:	f000 faf5 	bl	80046c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d194      	bne.n	800400a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	0018      	movs	r0, r3
 80040e8:	f000 f9ae 	bl	8004448 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040ec:	1e03      	subs	r3, r0, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e01a      	b.n	800412a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2220      	movs	r2, #32
 80040fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	490c      	ldr	r1, [pc, #48]	@ (8004138 <HAL_I2C_Mem_Read+0x264>)
 8004108:	400a      	ands	r2, r1
 800410a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2241      	movs	r2, #65	@ 0x41
 8004110:	2120      	movs	r1, #32
 8004112:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2242      	movs	r2, #66	@ 0x42
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2240      	movs	r2, #64	@ 0x40
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b007      	add	sp, #28
 8004130:	bd90      	pop	{r4, r7, pc}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	80002400 	.word	0x80002400
 8004138:	fe00e800 	.word	0xfe00e800

0800413c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800413c:	b5b0      	push	{r4, r5, r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	000c      	movs	r4, r1
 8004146:	0010      	movs	r0, r2
 8004148:	0019      	movs	r1, r3
 800414a:	250a      	movs	r5, #10
 800414c:	197b      	adds	r3, r7, r5
 800414e:	1c22      	adds	r2, r4, #0
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	2308      	movs	r3, #8
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	1c02      	adds	r2, r0, #0
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	1dbb      	adds	r3, r7, #6
 800415c:	1c0a      	adds	r2, r1, #0
 800415e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004160:	1dbb      	adds	r3, r7, #6
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	2380      	movs	r3, #128	@ 0x80
 8004168:	045c      	lsls	r4, r3, #17
 800416a:	197b      	adds	r3, r7, r5
 800416c:	8819      	ldrh	r1, [r3, #0]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	4b23      	ldr	r3, [pc, #140]	@ (8004200 <I2C_RequestMemoryWrite+0xc4>)
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	0023      	movs	r3, r4
 8004176:	f000 faa3 	bl	80046c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417c:	6a39      	ldr	r1, [r7, #32]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	0018      	movs	r0, r3
 8004182:	f000 f91b 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8004186:	1e03      	subs	r3, r0, #0
 8004188:	d001      	beq.n	800418e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e033      	b.n	80041f6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800418e:	1dbb      	adds	r3, r7, #6
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d107      	bne.n	80041a6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004196:	2308      	movs	r3, #8
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80041a4:	e019      	b.n	80041da <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041a6:	2308      	movs	r3, #8
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ba:	6a39      	ldr	r1, [r7, #32]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 f8fc 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 80041c4:	1e03      	subs	r3, r0, #0
 80041c6:	d001      	beq.n	80041cc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e014      	b.n	80041f6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041cc:	2308      	movs	r3, #8
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041da:	6a3a      	ldr	r2, [r7, #32]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	0013      	movs	r3, r2
 80041e4:	2200      	movs	r2, #0
 80041e6:	2180      	movs	r1, #128	@ 0x80
 80041e8:	f000 f890 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 80041ec:	1e03      	subs	r3, r0, #0
 80041ee:	d001      	beq.n	80041f4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bdb0      	pop	{r4, r5, r7, pc}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	80002000 	.word	0x80002000

08004204 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004204:	b5b0      	push	{r4, r5, r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	000c      	movs	r4, r1
 800420e:	0010      	movs	r0, r2
 8004210:	0019      	movs	r1, r3
 8004212:	250a      	movs	r5, #10
 8004214:	197b      	adds	r3, r7, r5
 8004216:	1c22      	adds	r2, r4, #0
 8004218:	801a      	strh	r2, [r3, #0]
 800421a:	2308      	movs	r3, #8
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	1c02      	adds	r2, r0, #0
 8004220:	801a      	strh	r2, [r3, #0]
 8004222:	1dbb      	adds	r3, r7, #6
 8004224:	1c0a      	adds	r2, r1, #0
 8004226:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004228:	1dbb      	adds	r3, r7, #6
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	197b      	adds	r3, r7, r5
 8004230:	8819      	ldrh	r1, [r3, #0]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	4b23      	ldr	r3, [pc, #140]	@ (80042c4 <I2C_RequestMemoryRead+0xc0>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2300      	movs	r3, #0
 800423a:	f000 fa41 	bl	80046c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004240:	6a39      	ldr	r1, [r7, #32]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	0018      	movs	r0, r3
 8004246:	f000 f8b9 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 800424a:	1e03      	subs	r3, r0, #0
 800424c:	d001      	beq.n	8004252 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e033      	b.n	80042ba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004252:	1dbb      	adds	r3, r7, #6
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d107      	bne.n	800426a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800425a:	2308      	movs	r3, #8
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	629a      	str	r2, [r3, #40]	@ 0x28
 8004268:	e019      	b.n	800429e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800426a:	2308      	movs	r3, #8
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	b29b      	uxth	r3, r3
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800427c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800427e:	6a39      	ldr	r1, [r7, #32]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	0018      	movs	r0, r3
 8004284:	f000 f89a 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8004288:	1e03      	subs	r3, r0, #0
 800428a:	d001      	beq.n	8004290 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e014      	b.n	80042ba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004290:	2308      	movs	r3, #8
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b2da      	uxtb	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800429e:	6a3a      	ldr	r2, [r7, #32]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	0013      	movs	r3, r2
 80042a8:	2200      	movs	r2, #0
 80042aa:	2140      	movs	r1, #64	@ 0x40
 80042ac:	f000 f82e 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 80042b0:	1e03      	subs	r3, r0, #0
 80042b2:	d001      	beq.n	80042b8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bdb0      	pop	{r4, r5, r7, pc}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	80002000 	.word	0x80002000

080042c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2202      	movs	r2, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d103      	bne.n	80042e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2201      	movs	r2, #1
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d007      	beq.n	8004304 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2101      	movs	r1, #1
 8004300:	430a      	orrs	r2, r1
 8004302:	619a      	str	r2, [r3, #24]
  }
}
 8004304:	46c0      	nop			@ (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	1dfb      	adds	r3, r7, #7
 800431a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431c:	e03a      	b.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	0018      	movs	r0, r3
 8004326:	f000 f8d3 	bl	80044d0 <I2C_IsErrorOccurred>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d001      	beq.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e040      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	d02d      	beq.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004338:	f7fe f8ca 	bl	80024d0 <HAL_GetTick>
 800433c:	0002      	movs	r2, r0
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d122      	bne.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	425a      	negs	r2, r3
 800435e:	4153      	adcs	r3, r2
 8004360:	b2db      	uxtb	r3, r3
 8004362:	001a      	movs	r2, r3
 8004364:	1dfb      	adds	r3, r7, #7
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d113      	bne.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004370:	2220      	movs	r2, #32
 8004372:	431a      	orrs	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2241      	movs	r2, #65	@ 0x41
 800437c:	2120      	movs	r1, #32
 800437e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2242      	movs	r2, #66	@ 0x42
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2240      	movs	r2, #64	@ 0x40
 800438c:	2100      	movs	r1, #0
 800438e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e00f      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	425a      	negs	r2, r3
 80043a4:	4153      	adcs	r3, r2
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	001a      	movs	r2, r3
 80043aa:	1dfb      	adds	r3, r7, #7
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d0b5      	beq.n	800431e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b004      	add	sp, #16
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043c8:	e032      	b.n	8004430 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	0018      	movs	r0, r3
 80043d2:	f000 f87d 	bl	80044d0 <I2C_IsErrorOccurred>
 80043d6:	1e03      	subs	r3, r0, #0
 80043d8:	d001      	beq.n	80043de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e030      	b.n	8004440 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	3301      	adds	r3, #1
 80043e2:	d025      	beq.n	8004430 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e4:	f7fe f874 	bl	80024d0 <HAL_GetTick>
 80043e8:	0002      	movs	r2, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11a      	bne.n	8004430 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2202      	movs	r2, #2
 8004402:	4013      	ands	r3, r2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d013      	beq.n	8004430 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440c:	2220      	movs	r2, #32
 800440e:	431a      	orrs	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2241      	movs	r2, #65	@ 0x41
 8004418:	2120      	movs	r1, #32
 800441a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2242      	movs	r2, #66	@ 0x42
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2240      	movs	r2, #64	@ 0x40
 8004428:	2100      	movs	r1, #0
 800442a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e007      	b.n	8004440 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2202      	movs	r2, #2
 8004438:	4013      	ands	r3, r2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d1c5      	bne.n	80043ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	b004      	add	sp, #16
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004454:	e02f      	b.n	80044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	0018      	movs	r0, r3
 800445e:	f000 f837 	bl	80044d0 <I2C_IsErrorOccurred>
 8004462:	1e03      	subs	r3, r0, #0
 8004464:	d001      	beq.n	800446a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e02d      	b.n	80044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fe f831 	bl	80024d0 <HAL_GetTick>
 800446e:	0002      	movs	r2, r0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d11a      	bne.n	80044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2220      	movs	r2, #32
 8004488:	4013      	ands	r3, r2
 800448a:	2b20      	cmp	r3, #32
 800448c:	d013      	beq.n	80044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	2220      	movs	r2, #32
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2241      	movs	r2, #65	@ 0x41
 800449e:	2120      	movs	r1, #32
 80044a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2242      	movs	r2, #66	@ 0x42
 80044a6:	2100      	movs	r1, #0
 80044a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2240      	movs	r2, #64	@ 0x40
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e007      	b.n	80044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2220      	movs	r2, #32
 80044be:	4013      	ands	r3, r2
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d1c8      	bne.n	8004456 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	0018      	movs	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b004      	add	sp, #16
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	@ 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2327      	movs	r3, #39	@ 0x27
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2210      	movs	r2, #16
 80044f8:	4013      	ands	r3, r2
 80044fa:	d100      	bne.n	80044fe <I2C_IsErrorOccurred+0x2e>
 80044fc:	e079      	b.n	80045f2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2210      	movs	r2, #16
 8004504:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004506:	e057      	b.n	80045b8 <I2C_IsErrorOccurred+0xe8>
 8004508:	2227      	movs	r2, #39	@ 0x27
 800450a:	18bb      	adds	r3, r7, r2
 800450c:	18ba      	adds	r2, r7, r2
 800450e:	7812      	ldrb	r2, [r2, #0]
 8004510:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3301      	adds	r3, #1
 8004516:	d04f      	beq.n	80045b8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004518:	f7fd ffda 	bl	80024d0 <HAL_GetTick>
 800451c:	0002      	movs	r2, r0
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	d302      	bcc.n	800452e <I2C_IsErrorOccurred+0x5e>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d144      	bne.n	80045b8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	2380      	movs	r3, #128	@ 0x80
 8004536:	01db      	lsls	r3, r3, #7
 8004538:	4013      	ands	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800453c:	2013      	movs	r0, #19
 800453e:	183b      	adds	r3, r7, r0
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	2142      	movs	r1, #66	@ 0x42
 8004544:	5c52      	ldrb	r2, [r2, r1]
 8004546:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	2380      	movs	r3, #128	@ 0x80
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	401a      	ands	r2, r3
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	429a      	cmp	r2, r3
 800455a:	d126      	bne.n	80045aa <I2C_IsErrorOccurred+0xda>
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	2380      	movs	r3, #128	@ 0x80
 8004560:	01db      	lsls	r3, r3, #7
 8004562:	429a      	cmp	r2, r3
 8004564:	d021      	beq.n	80045aa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004566:	183b      	adds	r3, r7, r0
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b20      	cmp	r3, #32
 800456c:	d01d      	beq.n	80045aa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2180      	movs	r1, #128	@ 0x80
 800457a:	01c9      	lsls	r1, r1, #7
 800457c:	430a      	orrs	r2, r1
 800457e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004580:	f7fd ffa6 	bl	80024d0 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004588:	e00f      	b.n	80045aa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800458a:	f7fd ffa1 	bl	80024d0 <HAL_GetTick>
 800458e:	0002      	movs	r2, r0
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b19      	cmp	r3, #25
 8004596:	d908      	bls.n	80045aa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2220      	movs	r2, #32
 800459c:	4313      	orrs	r3, r2
 800459e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045a0:	2327      	movs	r3, #39	@ 0x27
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]

              break;
 80045a8:	e006      	b.n	80045b8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2220      	movs	r2, #32
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d1e8      	bne.n	800458a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2220      	movs	r2, #32
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d004      	beq.n	80045d0 <I2C_IsErrorOccurred+0x100>
 80045c6:	2327      	movs	r3, #39	@ 0x27
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d09b      	beq.n	8004508 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045d0:	2327      	movs	r3, #39	@ 0x27
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2220      	movs	r2, #32
 80045e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	2204      	movs	r2, #4
 80045e6:	4313      	orrs	r3, r2
 80045e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045ea:	2327      	movs	r3, #39	@ 0x27
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	2380      	movs	r3, #128	@ 0x80
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4013      	ands	r3, r2
 8004602:	d00c      	beq.n	800461e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	2201      	movs	r2, #1
 8004608:	4313      	orrs	r3, r2
 800460a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2280      	movs	r2, #128	@ 0x80
 8004612:	0052      	lsls	r2, r2, #1
 8004614:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004616:	2327      	movs	r3, #39	@ 0x27
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	2380      	movs	r3, #128	@ 0x80
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4013      	ands	r3, r2
 8004626:	d00c      	beq.n	8004642 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	2208      	movs	r2, #8
 800462c:	4313      	orrs	r3, r2
 800462e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2280      	movs	r2, #128	@ 0x80
 8004636:	00d2      	lsls	r2, r2, #3
 8004638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800463a:	2327      	movs	r3, #39	@ 0x27
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	2380      	movs	r3, #128	@ 0x80
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d00c      	beq.n	8004666 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	2202      	movs	r2, #2
 8004650:	4313      	orrs	r3, r2
 8004652:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2280      	movs	r2, #128	@ 0x80
 800465a:	0092      	lsls	r2, r2, #2
 800465c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800465e:	2327      	movs	r3, #39	@ 0x27
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	2201      	movs	r2, #1
 8004664:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004666:	2327      	movs	r3, #39	@ 0x27
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01d      	beq.n	80046ac <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	0018      	movs	r0, r3
 8004674:	f7ff fe28 	bl	80042c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	490e      	ldr	r1, [pc, #56]	@ (80046bc <I2C_IsErrorOccurred+0x1ec>)
 8004684:	400a      	ands	r2, r1
 8004686:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	431a      	orrs	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2241      	movs	r2, #65	@ 0x41
 8004698:	2120      	movs	r1, #32
 800469a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2242      	movs	r2, #66	@ 0x42
 80046a0:	2100      	movs	r1, #0
 80046a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2240      	movs	r2, #64	@ 0x40
 80046a8:	2100      	movs	r1, #0
 80046aa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80046ac:	2327      	movs	r3, #39	@ 0x27
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	781b      	ldrb	r3, [r3, #0]
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b00a      	add	sp, #40	@ 0x28
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	fe00e800 	.word	0xfe00e800

080046c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	0008      	movs	r0, r1
 80046ca:	0011      	movs	r1, r2
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	240a      	movs	r4, #10
 80046d0:	193b      	adds	r3, r7, r4
 80046d2:	1c02      	adds	r2, r0, #0
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	2009      	movs	r0, #9
 80046d8:	183b      	adds	r3, r7, r0
 80046da:	1c0a      	adds	r2, r1, #0
 80046dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046de:	193b      	adds	r3, r7, r4
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	059b      	lsls	r3, r3, #22
 80046e4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046e6:	183b      	adds	r3, r7, r0
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	0419      	lsls	r1, r3, #16
 80046ec:	23ff      	movs	r3, #255	@ 0xff
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046f2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fa:	4313      	orrs	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800470a:	0d51      	lsrs	r1, r2, #21
 800470c:	2280      	movs	r2, #128	@ 0x80
 800470e:	00d2      	lsls	r2, r2, #3
 8004710:	400a      	ands	r2, r1
 8004712:	4907      	ldr	r1, [pc, #28]	@ (8004730 <I2C_TransferConfig+0x70>)
 8004714:	430a      	orrs	r2, r1
 8004716:	43d2      	mvns	r2, r2
 8004718:	401a      	ands	r2, r3
 800471a:	0011      	movs	r1, r2
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b007      	add	sp, #28
 800472c:	bd90      	pop	{r4, r7, pc}
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	03ff63ff 	.word	0x03ff63ff

08004734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2241      	movs	r2, #65	@ 0x41
 8004742:	5c9b      	ldrb	r3, [r3, r2]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b20      	cmp	r3, #32
 8004748:	d138      	bne.n	80047bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2240      	movs	r2, #64	@ 0x40
 800474e:	5c9b      	ldrb	r3, [r3, r2]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004754:	2302      	movs	r3, #2
 8004756:	e032      	b.n	80047be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2240      	movs	r2, #64	@ 0x40
 800475c:	2101      	movs	r1, #1
 800475e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2241      	movs	r2, #65	@ 0x41
 8004764:	2124      	movs	r1, #36	@ 0x24
 8004766:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	438a      	bics	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4911      	ldr	r1, [pc, #68]	@ (80047c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004784:	400a      	ands	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2101      	movs	r1, #1
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2241      	movs	r2, #65	@ 0x41
 80047ac:	2120      	movs	r1, #32
 80047ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2240      	movs	r2, #64	@ 0x40
 80047b4:	2100      	movs	r1, #0
 80047b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e000      	b.n	80047be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
  }
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b002      	add	sp, #8
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	ffffefff 	.word	0xffffefff

080047cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2241      	movs	r2, #65	@ 0x41
 80047da:	5c9b      	ldrb	r3, [r3, r2]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d139      	bne.n	8004856 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2240      	movs	r2, #64	@ 0x40
 80047e6:	5c9b      	ldrb	r3, [r3, r2]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e033      	b.n	8004858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2240      	movs	r2, #64	@ 0x40
 80047f4:	2101      	movs	r1, #1
 80047f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2241      	movs	r2, #65	@ 0x41
 80047fc:	2124      	movs	r1, #36	@ 0x24
 80047fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2101      	movs	r1, #1
 800480c:	438a      	bics	r2, r1
 800480e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a11      	ldr	r2, [pc, #68]	@ (8004860 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800481c:	4013      	ands	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2101      	movs	r1, #1
 800483e:	430a      	orrs	r2, r1
 8004840:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2241      	movs	r2, #65	@ 0x41
 8004846:	2120      	movs	r1, #32
 8004848:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2240      	movs	r2, #64	@ 0x40
 800484e:	2100      	movs	r1, #0
 8004850:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b004      	add	sp, #16
 800485e:	bd80      	pop	{r7, pc}
 8004860:	fffff0ff 	.word	0xfffff0ff

08004864 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800486c:	4b19      	ldr	r3, [pc, #100]	@ (80048d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a19      	ldr	r2, [pc, #100]	@ (80048d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004872:	4013      	ands	r3, r2
 8004874:	0019      	movs	r1, r3
 8004876:	4b17      	ldr	r3, [pc, #92]	@ (80048d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	2380      	movs	r3, #128	@ 0x80
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	429a      	cmp	r2, r3
 8004886:	d11f      	bne.n	80048c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004888:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	0013      	movs	r3, r2
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	189b      	adds	r3, r3, r2
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4912      	ldr	r1, [pc, #72]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004896:	0018      	movs	r0, r3
 8004898:	f7fb fc3c 	bl	8000114 <__udivsi3>
 800489c:	0003      	movs	r3, r0
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048a2:	e008      	b.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e001      	b.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e009      	b.n	80048ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048b6:	4b07      	ldr	r3, [pc, #28]	@ (80048d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	401a      	ands	r2, r3
 80048c0:	2380      	movs	r3, #128	@ 0x80
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d0ed      	beq.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	0018      	movs	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b004      	add	sp, #16
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	40007000 	.word	0x40007000
 80048d8:	fffff9ff 	.word	0xfffff9ff
 80048dc:	20000008 	.word	0x20000008
 80048e0:	000f4240 	.word	0x000f4240

080048e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80048e8:	4b03      	ldr	r3, [pc, #12]	@ (80048f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	23e0      	movs	r3, #224	@ 0xe0
 80048ee:	01db      	lsls	r3, r3, #7
 80048f0:	4013      	ands	r3, r2
}
 80048f2:	0018      	movs	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40021000 	.word	0x40021000

080048fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e2fe      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2201      	movs	r2, #1
 8004914:	4013      	ands	r3, r2
 8004916:	d100      	bne.n	800491a <HAL_RCC_OscConfig+0x1e>
 8004918:	e07c      	b.n	8004a14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800491a:	4bc3      	ldr	r3, [pc, #780]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2238      	movs	r2, #56	@ 0x38
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004924:	4bc0      	ldr	r3, [pc, #768]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2203      	movs	r2, #3
 800492a:	4013      	ands	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b10      	cmp	r3, #16
 8004932:	d102      	bne.n	800493a <HAL_RCC_OscConfig+0x3e>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b03      	cmp	r3, #3
 8004938:	d002      	beq.n	8004940 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d10b      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4bb9      	ldr	r3, [pc, #740]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	2380      	movs	r3, #128	@ 0x80
 8004946:	029b      	lsls	r3, r3, #10
 8004948:	4013      	ands	r3, r2
 800494a:	d062      	beq.n	8004a12 <HAL_RCC_OscConfig+0x116>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d15e      	bne.n	8004a12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e2d9      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	025b      	lsls	r3, r3, #9
 8004960:	429a      	cmp	r2, r3
 8004962:	d107      	bne.n	8004974 <HAL_RCC_OscConfig+0x78>
 8004964:	4bb0      	ldr	r3, [pc, #704]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4baf      	ldr	r3, [pc, #700]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 800496a:	2180      	movs	r1, #128	@ 0x80
 800496c:	0249      	lsls	r1, r1, #9
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e020      	b.n	80049b6 <HAL_RCC_OscConfig+0xba>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	23a0      	movs	r3, #160	@ 0xa0
 800497a:	02db      	lsls	r3, r3, #11
 800497c:	429a      	cmp	r2, r3
 800497e:	d10e      	bne.n	800499e <HAL_RCC_OscConfig+0xa2>
 8004980:	4ba9      	ldr	r3, [pc, #676]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4ba8      	ldr	r3, [pc, #672]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004986:	2180      	movs	r1, #128	@ 0x80
 8004988:	02c9      	lsls	r1, r1, #11
 800498a:	430a      	orrs	r2, r1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	4ba6      	ldr	r3, [pc, #664]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4ba5      	ldr	r3, [pc, #660]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004994:	2180      	movs	r1, #128	@ 0x80
 8004996:	0249      	lsls	r1, r1, #9
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e00b      	b.n	80049b6 <HAL_RCC_OscConfig+0xba>
 800499e:	4ba2      	ldr	r3, [pc, #648]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4ba1      	ldr	r3, [pc, #644]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 80049a4:	49a1      	ldr	r1, [pc, #644]	@ (8004c2c <HAL_RCC_OscConfig+0x330>)
 80049a6:	400a      	ands	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	4b9f      	ldr	r3, [pc, #636]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b9e      	ldr	r3, [pc, #632]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 80049b0:	499f      	ldr	r1, [pc, #636]	@ (8004c30 <HAL_RCC_OscConfig+0x334>)
 80049b2:	400a      	ands	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d014      	beq.n	80049e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049be:	f7fd fd87 	bl	80024d0 <HAL_GetTick>
 80049c2:	0003      	movs	r3, r0
 80049c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c8:	f7fd fd82 	bl	80024d0 <HAL_GetTick>
 80049cc:	0002      	movs	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	@ 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e298      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049da:	4b93      	ldr	r3, [pc, #588]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	2380      	movs	r3, #128	@ 0x80
 80049e0:	029b      	lsls	r3, r3, #10
 80049e2:	4013      	ands	r3, r2
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0xcc>
 80049e6:	e015      	b.n	8004a14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fd fd72 	bl	80024d0 <HAL_GetTick>
 80049ec:	0003      	movs	r3, r0
 80049ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f2:	f7fd fd6d 	bl	80024d0 <HAL_GetTick>
 80049f6:	0002      	movs	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b64      	cmp	r3, #100	@ 0x64
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e283      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a04:	4b88      	ldr	r3, [pc, #544]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	029b      	lsls	r3, r3, #10
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0xf6>
 8004a10:	e000      	b.n	8004a14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a12:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d100      	bne.n	8004a20 <HAL_RCC_OscConfig+0x124>
 8004a1e:	e099      	b.n	8004b54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a20:	4b81      	ldr	r3, [pc, #516]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2238      	movs	r2, #56	@ 0x38
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	4013      	ands	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d102      	bne.n	8004a40 <HAL_RCC_OscConfig+0x144>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d002      	beq.n	8004a46 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d135      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a46:	4b78      	ldr	r3, [pc, #480]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d005      	beq.n	8004a5e <HAL_RCC_OscConfig+0x162>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e256      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5e:	4b72      	ldr	r3, [pc, #456]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4a74      	ldr	r2, [pc, #464]	@ (8004c34 <HAL_RCC_OscConfig+0x338>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	0019      	movs	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	021a      	lsls	r2, r3, #8
 8004a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d112      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a7a:	4b6b      	ldr	r3, [pc, #428]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a6e      	ldr	r2, [pc, #440]	@ (8004c38 <HAL_RCC_OscConfig+0x33c>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	0019      	movs	r1, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	4b67      	ldr	r3, [pc, #412]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004a8e:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	0adb      	lsrs	r3, r3, #11
 8004a94:	2207      	movs	r2, #7
 8004a96:	4013      	ands	r3, r2
 8004a98:	4a68      	ldr	r2, [pc, #416]	@ (8004c3c <HAL_RCC_OscConfig+0x340>)
 8004a9a:	40da      	lsrs	r2, r3
 8004a9c:	4b68      	ldr	r3, [pc, #416]	@ (8004c40 <HAL_RCC_OscConfig+0x344>)
 8004a9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004aa0:	4b68      	ldr	r3, [pc, #416]	@ (8004c44 <HAL_RCC_OscConfig+0x348>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7fd fcb7 	bl	8002418 <HAL_InitTick>
 8004aaa:	1e03      	subs	r3, r0, #0
 8004aac:	d051      	beq.n	8004b52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e22c      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d030      	beq.n	8004b1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004aba:	4b5b      	ldr	r3, [pc, #364]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a5e      	ldr	r2, [pc, #376]	@ (8004c38 <HAL_RCC_OscConfig+0x33c>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	4b57      	ldr	r3, [pc, #348]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004ace:	4b56      	ldr	r3, [pc, #344]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b55      	ldr	r3, [pc, #340]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004ad4:	2180      	movs	r1, #128	@ 0x80
 8004ad6:	0049      	lsls	r1, r1, #1
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fd fcf8 	bl	80024d0 <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae6:	f7fd fcf3 	bl	80024d0 <HAL_GetTick>
 8004aea:	0002      	movs	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e209      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004af8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	2380      	movs	r3, #128	@ 0x80
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4013      	ands	r3, r2
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b04:	4b48      	ldr	r3, [pc, #288]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a4a      	ldr	r2, [pc, #296]	@ (8004c34 <HAL_RCC_OscConfig+0x338>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	0019      	movs	r1, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	021a      	lsls	r2, r3, #8
 8004b14:	4b44      	ldr	r3, [pc, #272]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	e01b      	b.n	8004b54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004b1c:	4b42      	ldr	r3, [pc, #264]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b41      	ldr	r3, [pc, #260]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004b22:	4949      	ldr	r1, [pc, #292]	@ (8004c48 <HAL_RCC_OscConfig+0x34c>)
 8004b24:	400a      	ands	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd fcd2 	bl	80024d0 <HAL_GetTick>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b32:	f7fd fccd 	bl	80024d0 <HAL_GetTick>
 8004b36:	0002      	movs	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e1e3      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b44:	4b38      	ldr	r3, [pc, #224]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2380      	movs	r3, #128	@ 0x80
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCC_OscConfig+0x236>
 8004b50:	e000      	b.n	8004b54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b52:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d047      	beq.n	8004bee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b5e:	4b32      	ldr	r3, [pc, #200]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2238      	movs	r2, #56	@ 0x38
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b18      	cmp	r3, #24
 8004b68:	d10a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6e:	2202      	movs	r2, #2
 8004b70:	4013      	ands	r3, r2
 8004b72:	d03c      	beq.n	8004bee <HAL_RCC_OscConfig+0x2f2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d138      	bne.n	8004bee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e1c5      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d019      	beq.n	8004bbc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004b88:	4b27      	ldr	r3, [pc, #156]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004b8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b8c:	4b26      	ldr	r3, [pc, #152]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004b8e:	2101      	movs	r1, #1
 8004b90:	430a      	orrs	r2, r1
 8004b92:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd fc9c 	bl	80024d0 <HAL_GetTick>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9e:	f7fd fc97 	bl	80024d0 <HAL_GetTick>
 8004ba2:	0002      	movs	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e1ad      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d0f1      	beq.n	8004b9e <HAL_RCC_OscConfig+0x2a2>
 8004bba:	e018      	b.n	8004bee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004bbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004bc0:	4b19      	ldr	r3, [pc, #100]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	438a      	bics	r2, r1
 8004bc6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd fc82 	bl	80024d0 <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd2:	f7fd fc7d 	bl	80024d0 <HAL_GetTick>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e193      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004be4:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be8:	2202      	movs	r2, #2
 8004bea:	4013      	ands	r3, r2
 8004bec:	d1f1      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d100      	bne.n	8004bfa <HAL_RCC_OscConfig+0x2fe>
 8004bf8:	e0c6      	b.n	8004d88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfa:	231f      	movs	r3, #31
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c02:	4b09      	ldr	r3, [pc, #36]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2238      	movs	r2, #56	@ 0x38
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d11e      	bne.n	8004c4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <HAL_RCC_OscConfig+0x32c>)
 8004c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c12:	2202      	movs	r2, #2
 8004c14:	4013      	ands	r3, r2
 8004c16:	d100      	bne.n	8004c1a <HAL_RCC_OscConfig+0x31e>
 8004c18:	e0b6      	b.n	8004d88 <HAL_RCC_OscConfig+0x48c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d000      	beq.n	8004c24 <HAL_RCC_OscConfig+0x328>
 8004c22:	e0b1      	b.n	8004d88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e171      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	fffeffff 	.word	0xfffeffff
 8004c30:	fffbffff 	.word	0xfffbffff
 8004c34:	ffff80ff 	.word	0xffff80ff
 8004c38:	ffffc7ff 	.word	0xffffc7ff
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	20000008 	.word	0x20000008
 8004c44:	20000000 	.word	0x20000000
 8004c48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c4c:	4bb1      	ldr	r3, [pc, #708]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	055b      	lsls	r3, r3, #21
 8004c54:	4013      	ands	r3, r2
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_OscConfig+0x360>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x362>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d011      	beq.n	8004c86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	4bac      	ldr	r3, [pc, #688]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004c64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c66:	4bab      	ldr	r3, [pc, #684]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004c68:	2180      	movs	r1, #128	@ 0x80
 8004c6a:	0549      	lsls	r1, r1, #21
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c70:	4ba8      	ldr	r3, [pc, #672]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c74:	2380      	movs	r3, #128	@ 0x80
 8004c76:	055b      	lsls	r3, r3, #21
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004c7e:	231f      	movs	r3, #31
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c86:	4ba4      	ldr	r3, [pc, #656]	@ (8004f18 <HAL_RCC_OscConfig+0x61c>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	2380      	movs	r3, #128	@ 0x80
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d11a      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c92:	4ba1      	ldr	r3, [pc, #644]	@ (8004f18 <HAL_RCC_OscConfig+0x61c>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4ba0      	ldr	r3, [pc, #640]	@ (8004f18 <HAL_RCC_OscConfig+0x61c>)
 8004c98:	2180      	movs	r1, #128	@ 0x80
 8004c9a:	0049      	lsls	r1, r1, #1
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fc16 	bl	80024d0 <HAL_GetTick>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004caa:	f7fd fc11 	bl	80024d0 <HAL_GetTick>
 8004cae:	0002      	movs	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e127      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbc:	4b96      	ldr	r3, [pc, #600]	@ (8004f18 <HAL_RCC_OscConfig+0x61c>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2380      	movs	r3, #128	@ 0x80
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d106      	bne.n	8004cde <HAL_RCC_OscConfig+0x3e2>
 8004cd0:	4b90      	ldr	r3, [pc, #576]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004cd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cd4:	4b8f      	ldr	r3, [pc, #572]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004cdc:	e01c      	b.n	8004d18 <HAL_RCC_OscConfig+0x41c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b05      	cmp	r3, #5
 8004ce4:	d10c      	bne.n	8004d00 <HAL_RCC_OscConfig+0x404>
 8004ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004ce8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cea:	4b8a      	ldr	r3, [pc, #552]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004cec:	2104      	movs	r1, #4
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004cf2:	4b88      	ldr	r3, [pc, #544]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004cf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cf6:	4b87      	ldr	r3, [pc, #540]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004cfe:	e00b      	b.n	8004d18 <HAL_RCC_OscConfig+0x41c>
 8004d00:	4b84      	ldr	r3, [pc, #528]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004d02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d04:	4b83      	ldr	r3, [pc, #524]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004d06:	2101      	movs	r1, #1
 8004d08:	438a      	bics	r2, r1
 8004d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d0c:	4b81      	ldr	r3, [pc, #516]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004d0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d10:	4b80      	ldr	r3, [pc, #512]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004d12:	2104      	movs	r1, #4
 8004d14:	438a      	bics	r2, r1
 8004d16:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d014      	beq.n	8004d4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fd fbd6 	bl	80024d0 <HAL_GetTick>
 8004d24:	0003      	movs	r3, r0
 8004d26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d28:	e009      	b.n	8004d3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2a:	f7fd fbd1 	bl	80024d0 <HAL_GetTick>
 8004d2e:	0002      	movs	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	4a79      	ldr	r2, [pc, #484]	@ (8004f1c <HAL_RCC_OscConfig+0x620>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e0e6      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3e:	4b75      	ldr	r3, [pc, #468]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d42:	2202      	movs	r2, #2
 8004d44:	4013      	ands	r3, r2
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x42e>
 8004d48:	e013      	b.n	8004d72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4a:	f7fd fbc1 	bl	80024d0 <HAL_GetTick>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d52:	e009      	b.n	8004d68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f7fd fbbc 	bl	80024d0 <HAL_GetTick>
 8004d58:	0002      	movs	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	4a6f      	ldr	r2, [pc, #444]	@ (8004f1c <HAL_RCC_OscConfig+0x620>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0d1      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d68:	4b6a      	ldr	r3, [pc, #424]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d72:	231f      	movs	r3, #31
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d7c:	4b65      	ldr	r3, [pc, #404]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d80:	4b64      	ldr	r3, [pc, #400]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004d82:	4967      	ldr	r1, [pc, #412]	@ (8004f20 <HAL_RCC_OscConfig+0x624>)
 8004d84:	400a      	ands	r2, r1
 8004d86:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d100      	bne.n	8004d92 <HAL_RCC_OscConfig+0x496>
 8004d90:	e0bb      	b.n	8004f0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d92:	4b60      	ldr	r3, [pc, #384]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2238      	movs	r2, #56	@ 0x38
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d100      	bne.n	8004da0 <HAL_RCC_OscConfig+0x4a4>
 8004d9e:	e07b      	b.n	8004e98 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d156      	bne.n	8004e56 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b59      	ldr	r3, [pc, #356]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004dae:	495d      	ldr	r1, [pc, #372]	@ (8004f24 <HAL_RCC_OscConfig+0x628>)
 8004db0:	400a      	ands	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fd fb8c 	bl	80024d0 <HAL_GetTick>
 8004db8:	0003      	movs	r3, r0
 8004dba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dbe:	f7fd fb87 	bl	80024d0 <HAL_GetTick>
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e09d      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd0:	4b50      	ldr	r3, [pc, #320]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	2380      	movs	r3, #128	@ 0x80
 8004dd6:	049b      	lsls	r3, r3, #18
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d1f0      	bne.n	8004dbe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a51      	ldr	r2, [pc, #324]	@ (8004f28 <HAL_RCC_OscConfig+0x62c>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	4b42      	ldr	r3, [pc, #264]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e10:	4b40      	ldr	r3, [pc, #256]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b3f      	ldr	r3, [pc, #252]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e16:	2180      	movs	r1, #128	@ 0x80
 8004e18:	0449      	lsls	r1, r1, #17
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	4b3c      	ldr	r3, [pc, #240]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e24:	2180      	movs	r1, #128	@ 0x80
 8004e26:	0549      	lsls	r1, r1, #21
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd fb50 	bl	80024d0 <HAL_GetTick>
 8004e30:	0003      	movs	r3, r0
 8004e32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e36:	f7fd fb4b 	bl	80024d0 <HAL_GetTick>
 8004e3a:	0002      	movs	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e061      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e48:	4b32      	ldr	r3, [pc, #200]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	049b      	lsls	r3, r3, #18
 8004e50:	4013      	ands	r3, r2
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x53a>
 8004e54:	e059      	b.n	8004f0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e56:	4b2f      	ldr	r3, [pc, #188]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e5c:	4931      	ldr	r1, [pc, #196]	@ (8004f24 <HAL_RCC_OscConfig+0x628>)
 8004e5e:	400a      	ands	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e62:	f7fd fb35 	bl	80024d0 <HAL_GetTick>
 8004e66:	0003      	movs	r3, r0
 8004e68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fd fb30 	bl	80024d0 <HAL_GetTick>
 8004e70:	0002      	movs	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e046      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e7e:	4b25      	ldr	r3, [pc, #148]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	2380      	movs	r3, #128	@ 0x80
 8004e84:	049b      	lsls	r3, r3, #18
 8004e86:	4013      	ands	r3, r2
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004e8a:	4b22      	ldr	r3, [pc, #136]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	4b21      	ldr	r3, [pc, #132]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004e90:	4926      	ldr	r1, [pc, #152]	@ (8004f2c <HAL_RCC_OscConfig+0x630>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	e038      	b.n	8004f0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e033      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <HAL_RCC_OscConfig+0x618>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2203      	movs	r2, #3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d126      	bne.n	8004f06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2270      	movs	r2, #112	@ 0x70
 8004ebc:	401a      	ands	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d11f      	bne.n	8004f06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	23fe      	movs	r3, #254	@ 0xfe
 8004eca:	01db      	lsls	r3, r3, #7
 8004ecc:	401a      	ands	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d116      	bne.n	8004f06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	23f8      	movs	r3, #248	@ 0xf8
 8004edc:	039b      	lsls	r3, r3, #14
 8004ede:	401a      	ands	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d10e      	bne.n	8004f06 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	23e0      	movs	r3, #224	@ 0xe0
 8004eec:	051b      	lsls	r3, r3, #20
 8004eee:	401a      	ands	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	0f5b      	lsrs	r3, r3, #29
 8004efc:	075a      	lsls	r2, r3, #29
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b008      	add	sp, #32
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	00001388 	.word	0x00001388
 8004f20:	efffffff 	.word	0xefffffff
 8004f24:	feffffff 	.word	0xfeffffff
 8004f28:	11c1808c 	.word	0x11c1808c
 8004f2c:	eefefffc 	.word	0xeefefffc

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0e9      	b.n	8005118 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b76      	ldr	r3, [pc, #472]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2207      	movs	r2, #7
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d91e      	bls.n	8004f90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b73      	ldr	r3, [pc, #460]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2207      	movs	r2, #7
 8004f58:	4393      	bics	r3, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	4b70      	ldr	r3, [pc, #448]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f64:	f7fd fab4 	bl	80024d0 <HAL_GetTick>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f6c:	e009      	b.n	8004f82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f6e:	f7fd faaf 	bl	80024d0 <HAL_GetTick>
 8004f72:	0002      	movs	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	4a6a      	ldr	r2, [pc, #424]	@ (8005124 <HAL_RCC_ClockConfig+0x1f4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0ca      	b.n	8005118 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f82:	4b67      	ldr	r3, [pc, #412]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2207      	movs	r2, #7
 8004f88:	4013      	ands	r3, r2
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d1ee      	bne.n	8004f6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2202      	movs	r2, #2
 8004f96:	4013      	ands	r3, r2
 8004f98:	d015      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d006      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004fa4:	4b60      	ldr	r3, [pc, #384]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	4b5f      	ldr	r3, [pc, #380]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8004faa:	21e0      	movs	r1, #224	@ 0xe0
 8004fac:	01c9      	lsls	r1, r1, #7
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	4a5d      	ldr	r2, [pc, #372]	@ (800512c <HAL_RCC_ClockConfig+0x1fc>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	0019      	movs	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	4b59      	ldr	r3, [pc, #356]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d057      	beq.n	8005080 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fd8:	4b53      	ldr	r3, [pc, #332]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	2380      	movs	r3, #128	@ 0x80
 8004fde:	029b      	lsls	r3, r3, #10
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d12b      	bne.n	800503c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e097      	b.n	8005118 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	2380      	movs	r3, #128	@ 0x80
 8004ff6:	049b      	lsls	r3, r3, #18
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d11f      	bne.n	800503c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e08b      	b.n	8005118 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d107      	bne.n	8005018 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005008:	4b47      	ldr	r3, [pc, #284]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	2380      	movs	r3, #128	@ 0x80
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4013      	ands	r3, r2
 8005012:	d113      	bne.n	800503c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e07f      	b.n	8005118 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b03      	cmp	r3, #3
 800501e:	d106      	bne.n	800502e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005020:	4b41      	ldr	r3, [pc, #260]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8005022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005024:	2202      	movs	r2, #2
 8005026:	4013      	ands	r3, r2
 8005028:	d108      	bne.n	800503c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e074      	b.n	8005118 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502e:	4b3e      	ldr	r3, [pc, #248]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8005030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005032:	2202      	movs	r2, #2
 8005034:	4013      	ands	r3, r2
 8005036:	d101      	bne.n	800503c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e06d      	b.n	8005118 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800503c:	4b3a      	ldr	r3, [pc, #232]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2207      	movs	r2, #7
 8005042:	4393      	bics	r3, r2
 8005044:	0019      	movs	r1, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4b37      	ldr	r3, [pc, #220]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005050:	f7fd fa3e 	bl	80024d0 <HAL_GetTick>
 8005054:	0003      	movs	r3, r0
 8005056:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005058:	e009      	b.n	800506e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505a:	f7fd fa39 	bl	80024d0 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	4a2f      	ldr	r2, [pc, #188]	@ (8005124 <HAL_RCC_ClockConfig+0x1f4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e054      	b.n	8005118 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	4b2e      	ldr	r3, [pc, #184]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2238      	movs	r2, #56	@ 0x38
 8005074:	401a      	ands	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	429a      	cmp	r2, r3
 800507e:	d1ec      	bne.n	800505a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005080:	4b27      	ldr	r3, [pc, #156]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2207      	movs	r2, #7
 8005086:	4013      	ands	r3, r2
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d21e      	bcs.n	80050cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508e:	4b24      	ldr	r3, [pc, #144]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2207      	movs	r2, #7
 8005094:	4393      	bics	r3, r2
 8005096:	0019      	movs	r1, r3
 8005098:	4b21      	ldr	r3, [pc, #132]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050a0:	f7fd fa16 	bl	80024d0 <HAL_GetTick>
 80050a4:	0003      	movs	r3, r0
 80050a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050a8:	e009      	b.n	80050be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050aa:	f7fd fa11 	bl	80024d0 <HAL_GetTick>
 80050ae:	0002      	movs	r2, r0
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005124 <HAL_RCC_ClockConfig+0x1f4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e02c      	b.n	8005118 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050be:	4b18      	ldr	r3, [pc, #96]	@ (8005120 <HAL_RCC_ClockConfig+0x1f0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2207      	movs	r2, #7
 80050c4:	4013      	ands	r3, r2
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1ee      	bne.n	80050aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2204      	movs	r2, #4
 80050d2:	4013      	ands	r3, r2
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80050d6:	4b14      	ldr	r3, [pc, #80]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	4a15      	ldr	r2, [pc, #84]	@ (8005130 <HAL_RCC_ClockConfig+0x200>)
 80050dc:	4013      	ands	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	4b10      	ldr	r3, [pc, #64]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80050ea:	f000 f829 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050ee:	0001      	movs	r1, r0
 80050f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <HAL_RCC_ClockConfig+0x1f8>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	0a1b      	lsrs	r3, r3, #8
 80050f6:	220f      	movs	r2, #15
 80050f8:	401a      	ands	r2, r3
 80050fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005134 <HAL_RCC_ClockConfig+0x204>)
 80050fc:	0092      	lsls	r2, r2, #2
 80050fe:	58d3      	ldr	r3, [r2, r3]
 8005100:	221f      	movs	r2, #31
 8005102:	4013      	ands	r3, r2
 8005104:	000a      	movs	r2, r1
 8005106:	40da      	lsrs	r2, r3
 8005108:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <HAL_RCC_ClockConfig+0x208>)
 800510a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800510c:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <HAL_RCC_ClockConfig+0x20c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	0018      	movs	r0, r3
 8005112:	f7fd f981 	bl	8002418 <HAL_InitTick>
 8005116:	0003      	movs	r3, r0
}
 8005118:	0018      	movs	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	b004      	add	sp, #16
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40022000 	.word	0x40022000
 8005124:	00001388 	.word	0x00001388
 8005128:	40021000 	.word	0x40021000
 800512c:	fffff0ff 	.word	0xfffff0ff
 8005130:	ffff8fff 	.word	0xffff8fff
 8005134:	080095b8 	.word	0x080095b8
 8005138:	20000008 	.word	0x20000008
 800513c:	20000000 	.word	0x20000000

08005140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005146:	4b3c      	ldr	r3, [pc, #240]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2238      	movs	r2, #56	@ 0x38
 800514c:	4013      	ands	r3, r2
 800514e:	d10f      	bne.n	8005170 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005150:	4b39      	ldr	r3, [pc, #228]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	0adb      	lsrs	r3, r3, #11
 8005156:	2207      	movs	r2, #7
 8005158:	4013      	ands	r3, r2
 800515a:	2201      	movs	r2, #1
 800515c:	409a      	lsls	r2, r3
 800515e:	0013      	movs	r3, r2
 8005160:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005162:	6839      	ldr	r1, [r7, #0]
 8005164:	4835      	ldr	r0, [pc, #212]	@ (800523c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005166:	f7fa ffd5 	bl	8000114 <__udivsi3>
 800516a:	0003      	movs	r3, r0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	e05d      	b.n	800522c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005170:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2238      	movs	r2, #56	@ 0x38
 8005176:	4013      	ands	r3, r2
 8005178:	2b08      	cmp	r3, #8
 800517a:	d102      	bne.n	8005182 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800517c:	4b30      	ldr	r3, [pc, #192]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x100>)
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	e054      	b.n	800522c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005182:	4b2d      	ldr	r3, [pc, #180]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2238      	movs	r2, #56	@ 0x38
 8005188:	4013      	ands	r3, r2
 800518a:	2b10      	cmp	r3, #16
 800518c:	d138      	bne.n	8005200 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800518e:	4b2a      	ldr	r3, [pc, #168]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2203      	movs	r2, #3
 8005194:	4013      	ands	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005198:	4b27      	ldr	r3, [pc, #156]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	2207      	movs	r2, #7
 80051a0:	4013      	ands	r3, r2
 80051a2:	3301      	adds	r3, #1
 80051a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d10d      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4824      	ldr	r0, [pc, #144]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x100>)
 80051b0:	f7fa ffb0 	bl	8000114 <__udivsi3>
 80051b4:	0003      	movs	r3, r0
 80051b6:	0019      	movs	r1, r3
 80051b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	227f      	movs	r2, #127	@ 0x7f
 80051c0:	4013      	ands	r3, r2
 80051c2:	434b      	muls	r3, r1
 80051c4:	617b      	str	r3, [r7, #20]
        break;
 80051c6:	e00d      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80051c8:	68b9      	ldr	r1, [r7, #8]
 80051ca:	481c      	ldr	r0, [pc, #112]	@ (800523c <HAL_RCC_GetSysClockFreq+0xfc>)
 80051cc:	f7fa ffa2 	bl	8000114 <__udivsi3>
 80051d0:	0003      	movs	r3, r0
 80051d2:	0019      	movs	r1, r3
 80051d4:	4b18      	ldr	r3, [pc, #96]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	227f      	movs	r2, #127	@ 0x7f
 80051dc:	4013      	ands	r3, r2
 80051de:	434b      	muls	r3, r1
 80051e0:	617b      	str	r3, [r7, #20]
        break;
 80051e2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80051e4:	4b14      	ldr	r3, [pc, #80]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	0f5b      	lsrs	r3, r3, #29
 80051ea:	2207      	movs	r2, #7
 80051ec:	4013      	ands	r3, r2
 80051ee:	3301      	adds	r3, #1
 80051f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	6978      	ldr	r0, [r7, #20]
 80051f6:	f7fa ff8d 	bl	8000114 <__udivsi3>
 80051fa:	0003      	movs	r3, r0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	e015      	b.n	800522c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005200:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2238      	movs	r2, #56	@ 0x38
 8005206:	4013      	ands	r3, r2
 8005208:	2b20      	cmp	r3, #32
 800520a:	d103      	bne.n	8005214 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800520c:	2380      	movs	r3, #128	@ 0x80
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	e00b      	b.n	800522c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005214:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2238      	movs	r2, #56	@ 0x38
 800521a:	4013      	ands	r3, r2
 800521c:	2b18      	cmp	r3, #24
 800521e:	d103      	bne.n	8005228 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005220:	23fa      	movs	r3, #250	@ 0xfa
 8005222:	01db      	lsls	r3, r3, #7
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e001      	b.n	800522c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800522c:	693b      	ldr	r3, [r7, #16]
}
 800522e:	0018      	movs	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	b006      	add	sp, #24
 8005234:	bd80      	pop	{r7, pc}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	40021000 	.word	0x40021000
 800523c:	00f42400 	.word	0x00f42400
 8005240:	007a1200 	.word	0x007a1200

08005244 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005248:	4b02      	ldr	r3, [pc, #8]	@ (8005254 <HAL_RCC_GetHCLKFreq+0x10>)
 800524a:	681b      	ldr	r3, [r3, #0]
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	20000008 	.word	0x20000008

08005258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005258:	b5b0      	push	{r4, r5, r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800525c:	f7ff fff2 	bl	8005244 <HAL_RCC_GetHCLKFreq>
 8005260:	0004      	movs	r4, r0
 8005262:	f7ff fb3f 	bl	80048e4 <LL_RCC_GetAPB1Prescaler>
 8005266:	0003      	movs	r3, r0
 8005268:	0b1a      	lsrs	r2, r3, #12
 800526a:	4b05      	ldr	r3, [pc, #20]	@ (8005280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800526c:	0092      	lsls	r2, r2, #2
 800526e:	58d3      	ldr	r3, [r2, r3]
 8005270:	221f      	movs	r2, #31
 8005272:	4013      	ands	r3, r2
 8005274:	40dc      	lsrs	r4, r3
 8005276:	0023      	movs	r3, r4
}
 8005278:	0018      	movs	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	bdb0      	pop	{r4, r5, r7, pc}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	080095f8 	.word	0x080095f8

08005284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800528c:	2313      	movs	r3, #19
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005294:	2312      	movs	r3, #18
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	@ 0x80
 80052a2:	029b      	lsls	r3, r3, #10
 80052a4:	4013      	ands	r3, r2
 80052a6:	d100      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80052a8:	e0a3      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052aa:	2011      	movs	r0, #17
 80052ac:	183b      	adds	r3, r7, r0
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052b2:	4bc3      	ldr	r3, [pc, #780]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	055b      	lsls	r3, r3, #21
 80052ba:	4013      	ands	r3, r2
 80052bc:	d110      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052be:	4bc0      	ldr	r3, [pc, #768]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052c2:	4bbf      	ldr	r3, [pc, #764]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052c4:	2180      	movs	r1, #128	@ 0x80
 80052c6:	0549      	lsls	r1, r1, #21
 80052c8:	430a      	orrs	r2, r1
 80052ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052cc:	4bbc      	ldr	r3, [pc, #752]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052d0:	2380      	movs	r3, #128	@ 0x80
 80052d2:	055b      	lsls	r3, r3, #21
 80052d4:	4013      	ands	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052da:	183b      	adds	r3, r7, r0
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e0:	4bb8      	ldr	r3, [pc, #736]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4bb7      	ldr	r3, [pc, #732]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80052e6:	2180      	movs	r1, #128	@ 0x80
 80052e8:	0049      	lsls	r1, r1, #1
 80052ea:	430a      	orrs	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ee:	f7fd f8ef 	bl	80024d0 <HAL_GetTick>
 80052f2:	0003      	movs	r3, r0
 80052f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052f6:	e00b      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f8:	f7fd f8ea 	bl	80024d0 <HAL_GetTick>
 80052fc:	0002      	movs	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d904      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005306:	2313      	movs	r3, #19
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	2203      	movs	r2, #3
 800530c:	701a      	strb	r2, [r3, #0]
        break;
 800530e:	e005      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005310:	4bac      	ldr	r3, [pc, #688]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	2380      	movs	r3, #128	@ 0x80
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4013      	ands	r3, r2
 800531a:	d0ed      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800531c:	2313      	movs	r3, #19
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d154      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005326:	4ba6      	ldr	r3, [pc, #664]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005328:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800532a:	23c0      	movs	r3, #192	@ 0xc0
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4013      	ands	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d019      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	429a      	cmp	r2, r3
 8005340:	d014      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005342:	4b9f      	ldr	r3, [pc, #636]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005346:	4aa0      	ldr	r2, [pc, #640]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005348:	4013      	ands	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800534c:	4b9c      	ldr	r3, [pc, #624]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800534e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005350:	4b9b      	ldr	r3, [pc, #620]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005352:	2180      	movs	r1, #128	@ 0x80
 8005354:	0249      	lsls	r1, r1, #9
 8005356:	430a      	orrs	r2, r1
 8005358:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800535a:	4b99      	ldr	r3, [pc, #612]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800535c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800535e:	4b98      	ldr	r3, [pc, #608]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005360:	499a      	ldr	r1, [pc, #616]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005362:	400a      	ands	r2, r1
 8005364:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005366:	4b96      	ldr	r3, [pc, #600]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2201      	movs	r2, #1
 8005370:	4013      	ands	r3, r2
 8005372:	d016      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fd f8ac 	bl	80024d0 <HAL_GetTick>
 8005378:	0003      	movs	r3, r0
 800537a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537c:	e00c      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537e:	f7fd f8a7 	bl	80024d0 <HAL_GetTick>
 8005382:	0002      	movs	r2, r0
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	4a91      	ldr	r2, [pc, #580]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d904      	bls.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800538e:	2313      	movs	r3, #19
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2203      	movs	r2, #3
 8005394:	701a      	strb	r2, [r3, #0]
            break;
 8005396:	e004      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005398:	4b89      	ldr	r3, [pc, #548]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800539a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539c:	2202      	movs	r2, #2
 800539e:	4013      	ands	r3, r2
 80053a0:	d0ed      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80053a2:	2313      	movs	r3, #19
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ac:	4b84      	ldr	r3, [pc, #528]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b0:	4a85      	ldr	r2, [pc, #532]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	0019      	movs	r1, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ba:	4b81      	ldr	r3, [pc, #516]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053bc:	430a      	orrs	r2, r1
 80053be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053c0:	e00c      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c2:	2312      	movs	r3, #18
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	2213      	movs	r2, #19
 80053c8:	18ba      	adds	r2, r7, r2
 80053ca:	7812      	ldrb	r2, [r2, #0]
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	e005      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d0:	2312      	movs	r3, #18
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	2213      	movs	r2, #19
 80053d6:	18ba      	adds	r2, r7, r2
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053dc:	2311      	movs	r3, #17
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e6:	4b76      	ldr	r3, [pc, #472]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ea:	4b75      	ldr	r3, [pc, #468]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ec:	4979      	ldr	r1, [pc, #484]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80053ee:	400a      	ands	r2, r1
 80053f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2201      	movs	r2, #1
 80053f8:	4013      	ands	r3, r2
 80053fa:	d009      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fc:	4b70      	ldr	r3, [pc, #448]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005400:	2203      	movs	r2, #3
 8005402:	4393      	bics	r3, r2
 8005404:	0019      	movs	r1, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	4b6d      	ldr	r3, [pc, #436]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800540c:	430a      	orrs	r2, r1
 800540e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2202      	movs	r2, #2
 8005416:	4013      	ands	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800541a:	4b69      	ldr	r3, [pc, #420]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800541c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541e:	220c      	movs	r2, #12
 8005420:	4393      	bics	r3, r2
 8005422:	0019      	movs	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	4b65      	ldr	r3, [pc, #404]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800542a:	430a      	orrs	r2, r1
 800542c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2210      	movs	r2, #16
 8005434:	4013      	ands	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005438:	4b61      	ldr	r3, [pc, #388]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800543a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543c:	4a66      	ldr	r2, [pc, #408]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800543e:	4013      	ands	r3, r2
 8005440:	0019      	movs	r1, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	4b5e      	ldr	r3, [pc, #376]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005448:	430a      	orrs	r2, r1
 800544a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	2380      	movs	r3, #128	@ 0x80
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4013      	ands	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005458:	4b59      	ldr	r3, [pc, #356]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	4a5f      	ldr	r2, [pc, #380]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800545e:	4013      	ands	r3, r2
 8005460:	0019      	movs	r1, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	4b56      	ldr	r3, [pc, #344]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005468:	430a      	orrs	r2, r1
 800546a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4013      	ands	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005478:	4b51      	ldr	r3, [pc, #324]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800547a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547c:	4a58      	ldr	r2, [pc, #352]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800547e:	4013      	ands	r3, r2
 8005480:	0019      	movs	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	4b4e      	ldr	r3, [pc, #312]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005488:	430a      	orrs	r2, r1
 800548a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2220      	movs	r2, #32
 8005492:	4013      	ands	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005496:	4b4a      	ldr	r3, [pc, #296]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549a:	4a52      	ldr	r2, [pc, #328]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800549c:	4013      	ands	r3, r2
 800549e:	0019      	movs	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	4b46      	ldr	r3, [pc, #280]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054a6:	430a      	orrs	r2, r1
 80054a8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	2380      	movs	r3, #128	@ 0x80
 80054b0:	01db      	lsls	r3, r3, #7
 80054b2:	4013      	ands	r3, r2
 80054b4:	d015      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b6:	4b42      	ldr	r3, [pc, #264]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	0899      	lsrs	r1, r3, #2
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	4b3f      	ldr	r3, [pc, #252]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054c4:	430a      	orrs	r2, r1
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	05db      	lsls	r3, r3, #23
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d106      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80054d4:	4b3a      	ldr	r3, [pc, #232]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	4b39      	ldr	r3, [pc, #228]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054da:	2180      	movs	r1, #128	@ 0x80
 80054dc:	0249      	lsls	r1, r1, #9
 80054de:	430a      	orrs	r2, r1
 80054e0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	2380      	movs	r3, #128	@ 0x80
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	4013      	ands	r3, r2
 80054ec:	d009      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054ee:	4b34      	ldr	r3, [pc, #208]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f2:	2240      	movs	r2, #64	@ 0x40
 80054f4:	4393      	bics	r3, r2
 80054f6:	0019      	movs	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054fc:	4b30      	ldr	r3, [pc, #192]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054fe:	430a      	orrs	r2, r1
 8005500:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	2380      	movs	r3, #128	@ 0x80
 8005508:	039b      	lsls	r3, r3, #14
 800550a:	4013      	ands	r3, r2
 800550c:	d016      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800550e:	4b2c      	ldr	r3, [pc, #176]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005512:	4a35      	ldr	r2, [pc, #212]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005514:	4013      	ands	r3, r2
 8005516:	0019      	movs	r1, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800551c:	4b28      	ldr	r3, [pc, #160]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800551e:	430a      	orrs	r2, r1
 8005520:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005526:	2380      	movs	r3, #128	@ 0x80
 8005528:	03db      	lsls	r3, r3, #15
 800552a:	429a      	cmp	r2, r3
 800552c:	d106      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800552e:	4b24      	ldr	r3, [pc, #144]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	4b23      	ldr	r3, [pc, #140]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005534:	2180      	movs	r1, #128	@ 0x80
 8005536:	0449      	lsls	r1, r1, #17
 8005538:	430a      	orrs	r2, r1
 800553a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	03db      	lsls	r3, r3, #15
 8005544:	4013      	ands	r3, r2
 8005546:	d016      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005548:	4b1d      	ldr	r3, [pc, #116]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800554a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554c:	4a27      	ldr	r2, [pc, #156]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800554e:	4013      	ands	r3, r2
 8005550:	0019      	movs	r1, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005556:	4b1a      	ldr	r3, [pc, #104]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005558:	430a      	orrs	r2, r1
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005560:	2380      	movs	r3, #128	@ 0x80
 8005562:	045b      	lsls	r3, r3, #17
 8005564:	429a      	cmp	r2, r3
 8005566:	d106      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005568:	4b15      	ldr	r3, [pc, #84]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	4b14      	ldr	r3, [pc, #80]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800556e:	2180      	movs	r1, #128	@ 0x80
 8005570:	0449      	lsls	r1, r1, #17
 8005572:	430a      	orrs	r2, r1
 8005574:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	2380      	movs	r3, #128	@ 0x80
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4013      	ands	r3, r2
 8005580:	d016      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005582:	4b0f      	ldr	r3, [pc, #60]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005586:	4a1a      	ldr	r2, [pc, #104]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005588:	4013      	ands	r3, r2
 800558a:	0019      	movs	r1, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005592:	430a      	orrs	r2, r1
 8005594:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	2380      	movs	r3, #128	@ 0x80
 800559c:	01db      	lsls	r3, r3, #7
 800559e:	429a      	cmp	r2, r3
 80055a0:	d106      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055a2:	4b07      	ldr	r3, [pc, #28]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	4b06      	ldr	r3, [pc, #24]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a8:	2180      	movs	r1, #128	@ 0x80
 80055aa:	0249      	lsls	r1, r1, #9
 80055ac:	430a      	orrs	r2, r1
 80055ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80055b0:	2312      	movs	r3, #18
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	781b      	ldrb	r3, [r3, #0]
}
 80055b6:	0018      	movs	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b006      	add	sp, #24
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40007000 	.word	0x40007000
 80055c8:	fffffcff 	.word	0xfffffcff
 80055cc:	fffeffff 	.word	0xfffeffff
 80055d0:	00001388 	.word	0x00001388
 80055d4:	efffffff 	.word	0xefffffff
 80055d8:	fffff3ff 	.word	0xfffff3ff
 80055dc:	fff3ffff 	.word	0xfff3ffff
 80055e0:	ffcfffff 	.word	0xffcfffff
 80055e4:	ffffcfff 	.word	0xffffcfff
 80055e8:	ffbfffff 	.word	0xffbfffff
 80055ec:	feffffff 	.word	0xfeffffff
 80055f0:	ffff3fff 	.word	0xffff3fff

080055f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e046      	b.n	8005694 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2288      	movs	r2, #136	@ 0x88
 800560a:	589b      	ldr	r3, [r3, r2]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d107      	bne.n	8005620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2284      	movs	r2, #132	@ 0x84
 8005614:	2100      	movs	r1, #0
 8005616:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f002 fe52 	bl	80082c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2288      	movs	r2, #136	@ 0x88
 8005624:	2124      	movs	r1, #36	@ 0x24
 8005626:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2101      	movs	r1, #1
 8005634:	438a      	bics	r2, r1
 8005636:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	0018      	movs	r0, r3
 8005644:	f000 ff10 	bl	8006468 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fc4e 	bl	8005eec <UART_SetConfig>
 8005650:	0003      	movs	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e01c      	b.n	8005694 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	490d      	ldr	r1, [pc, #52]	@ (800569c <HAL_UART_Init+0xa8>)
 8005666:	400a      	ands	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	212a      	movs	r1, #42	@ 0x2a
 8005676:	438a      	bics	r2, r1
 8005678:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2101      	movs	r1, #1
 8005686:	430a      	orrs	r2, r1
 8005688:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	0018      	movs	r0, r3
 800568e:	f000 ff9f 	bl	80065d0 <UART_CheckIdleState>
 8005692:	0003      	movs	r3, r0
}
 8005694:	0018      	movs	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	b002      	add	sp, #8
 800569a:	bd80      	pop	{r7, pc}
 800569c:	ffffb7ff 	.word	0xffffb7ff

080056a0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e032      	b.n	8005718 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2288      	movs	r2, #136	@ 0x88
 80056b6:	2124      	movs	r1, #36	@ 0x24
 80056b8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2101      	movs	r1, #1
 80056c6:	438a      	bics	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f002 fecb 	bl	8008480 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2290      	movs	r2, #144	@ 0x90
 80056ee:	2100      	movs	r1, #0
 80056f0:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2288      	movs	r2, #136	@ 0x88
 80056f6:	2100      	movs	r1, #0
 80056f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	228c      	movs	r2, #140	@ 0x8c
 80056fe:	2100      	movs	r1, #0
 8005700:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2284      	movs	r2, #132	@ 0x84
 8005712:	2100      	movs	r1, #0
 8005714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	0018      	movs	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	b002      	add	sp, #8
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	1dbb      	adds	r3, r7, #6
 800572e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2288      	movs	r2, #136	@ 0x88
 8005734:	589b      	ldr	r3, [r3, r2]
 8005736:	2b20      	cmp	r3, #32
 8005738:	d000      	beq.n	800573c <HAL_UART_Transmit+0x1c>
 800573a:	e090      	b.n	800585e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_UART_Transmit+0x2a>
 8005742:	1dbb      	adds	r3, r7, #6
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e088      	b.n	8005860 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	2380      	movs	r3, #128	@ 0x80
 8005754:	015b      	lsls	r3, r3, #5
 8005756:	429a      	cmp	r2, r3
 8005758:	d109      	bne.n	800576e <HAL_UART_Transmit+0x4e>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d105      	bne.n	800576e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2201      	movs	r2, #1
 8005766:	4013      	ands	r3, r2
 8005768:	d001      	beq.n	800576e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e078      	b.n	8005860 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2290      	movs	r2, #144	@ 0x90
 8005772:	2100      	movs	r1, #0
 8005774:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2288      	movs	r2, #136	@ 0x88
 800577a:	2121      	movs	r1, #33	@ 0x21
 800577c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800577e:	f7fc fea7 	bl	80024d0 <HAL_GetTick>
 8005782:	0003      	movs	r3, r0
 8005784:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1dba      	adds	r2, r7, #6
 800578a:	2154      	movs	r1, #84	@ 0x54
 800578c:	8812      	ldrh	r2, [r2, #0]
 800578e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1dba      	adds	r2, r7, #6
 8005794:	2156      	movs	r1, #86	@ 0x56
 8005796:	8812      	ldrh	r2, [r2, #0]
 8005798:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	2380      	movs	r3, #128	@ 0x80
 80057a0:	015b      	lsls	r3, r3, #5
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d108      	bne.n	80057b8 <HAL_UART_Transmit+0x98>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	e003      	b.n	80057c0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057c0:	e030      	b.n	8005824 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	0013      	movs	r3, r2
 80057cc:	2200      	movs	r2, #0
 80057ce:	2180      	movs	r1, #128	@ 0x80
 80057d0:	f000 ffa8 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 80057d4:	1e03      	subs	r3, r0, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2288      	movs	r2, #136	@ 0x88
 80057dc:	2120      	movs	r1, #32
 80057de:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e03d      	b.n	8005860 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10b      	bne.n	8005802 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	001a      	movs	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	05d2      	lsls	r2, r2, #23
 80057f6:	0dd2      	lsrs	r2, r2, #23
 80057f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	3302      	adds	r3, #2
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	e007      	b.n	8005812 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	781a      	ldrb	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2256      	movs	r2, #86	@ 0x56
 8005816:	5a9b      	ldrh	r3, [r3, r2]
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b299      	uxth	r1, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2256      	movs	r2, #86	@ 0x56
 8005822:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2256      	movs	r2, #86	@ 0x56
 8005828:	5a9b      	ldrh	r3, [r3, r2]
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1c8      	bne.n	80057c2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	0013      	movs	r3, r2
 800583a:	2200      	movs	r2, #0
 800583c:	2140      	movs	r1, #64	@ 0x40
 800583e:	f000 ff71 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 8005842:	1e03      	subs	r3, r0, #0
 8005844:	d005      	beq.n	8005852 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2288      	movs	r2, #136	@ 0x88
 800584a:	2120      	movs	r1, #32
 800584c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e006      	b.n	8005860 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2288      	movs	r2, #136	@ 0x88
 8005856:	2120      	movs	r1, #32
 8005858:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	e000      	b.n	8005860 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800585e:	2302      	movs	r3, #2
  }
}
 8005860:	0018      	movs	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	b008      	add	sp, #32
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005868:	b5b0      	push	{r4, r5, r7, lr}
 800586a:	b0aa      	sub	sp, #168	@ 0xa8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	22a4      	movs	r2, #164	@ 0xa4
 8005878:	18b9      	adds	r1, r7, r2
 800587a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	20a0      	movs	r0, #160	@ 0xa0
 8005884:	1839      	adds	r1, r7, r0
 8005886:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	249c      	movs	r4, #156	@ 0x9c
 8005890:	1939      	adds	r1, r7, r4
 8005892:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005894:	0011      	movs	r1, r2
 8005896:	18bb      	adds	r3, r7, r2
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4aa2      	ldr	r2, [pc, #648]	@ (8005b24 <HAL_UART_IRQHandler+0x2bc>)
 800589c:	4013      	ands	r3, r2
 800589e:	2298      	movs	r2, #152	@ 0x98
 80058a0:	18bd      	adds	r5, r7, r2
 80058a2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80058a4:	18bb      	adds	r3, r7, r2
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d11a      	bne.n	80058e2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058ac:	187b      	adds	r3, r7, r1
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2220      	movs	r2, #32
 80058b2:	4013      	ands	r3, r2
 80058b4:	d015      	beq.n	80058e2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2220      	movs	r2, #32
 80058bc:	4013      	ands	r3, r2
 80058be:	d105      	bne.n	80058cc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058c0:	193b      	adds	r3, r7, r4
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	2380      	movs	r3, #128	@ 0x80
 80058c6:	055b      	lsls	r3, r3, #21
 80058c8:	4013      	ands	r3, r2
 80058ca:	d00a      	beq.n	80058e2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d100      	bne.n	80058d6 <HAL_UART_IRQHandler+0x6e>
 80058d4:	e2dc      	b.n	8005e90 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	0010      	movs	r0, r2
 80058de:	4798      	blx	r3
      }
      return;
 80058e0:	e2d6      	b.n	8005e90 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058e2:	2398      	movs	r3, #152	@ 0x98
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d100      	bne.n	80058ee <HAL_UART_IRQHandler+0x86>
 80058ec:	e122      	b.n	8005b34 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80058ee:	239c      	movs	r3, #156	@ 0x9c
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a8c      	ldr	r2, [pc, #560]	@ (8005b28 <HAL_UART_IRQHandler+0x2c0>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	d106      	bne.n	8005908 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80058fa:	23a0      	movs	r3, #160	@ 0xa0
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a8a      	ldr	r2, [pc, #552]	@ (8005b2c <HAL_UART_IRQHandler+0x2c4>)
 8005902:	4013      	ands	r3, r2
 8005904:	d100      	bne.n	8005908 <HAL_UART_IRQHandler+0xa0>
 8005906:	e115      	b.n	8005b34 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005908:	23a4      	movs	r3, #164	@ 0xa4
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2201      	movs	r2, #1
 8005910:	4013      	ands	r3, r2
 8005912:	d012      	beq.n	800593a <HAL_UART_IRQHandler+0xd2>
 8005914:	23a0      	movs	r3, #160	@ 0xa0
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	2380      	movs	r3, #128	@ 0x80
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4013      	ands	r3, r2
 8005920:	d00b      	beq.n	800593a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2290      	movs	r2, #144	@ 0x90
 800592e:	589b      	ldr	r3, [r3, r2]
 8005930:	2201      	movs	r2, #1
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2190      	movs	r1, #144	@ 0x90
 8005938:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800593a:	23a4      	movs	r3, #164	@ 0xa4
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2202      	movs	r2, #2
 8005942:	4013      	ands	r3, r2
 8005944:	d011      	beq.n	800596a <HAL_UART_IRQHandler+0x102>
 8005946:	239c      	movs	r3, #156	@ 0x9c
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2201      	movs	r2, #1
 800594e:	4013      	ands	r3, r2
 8005950:	d00b      	beq.n	800596a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2202      	movs	r2, #2
 8005958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2290      	movs	r2, #144	@ 0x90
 800595e:	589b      	ldr	r3, [r3, r2]
 8005960:	2204      	movs	r2, #4
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2190      	movs	r1, #144	@ 0x90
 8005968:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800596a:	23a4      	movs	r3, #164	@ 0xa4
 800596c:	18fb      	adds	r3, r7, r3
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2204      	movs	r2, #4
 8005972:	4013      	ands	r3, r2
 8005974:	d011      	beq.n	800599a <HAL_UART_IRQHandler+0x132>
 8005976:	239c      	movs	r3, #156	@ 0x9c
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2201      	movs	r2, #1
 800597e:	4013      	ands	r3, r2
 8005980:	d00b      	beq.n	800599a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2204      	movs	r2, #4
 8005988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2290      	movs	r2, #144	@ 0x90
 800598e:	589b      	ldr	r3, [r3, r2]
 8005990:	2202      	movs	r2, #2
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2190      	movs	r1, #144	@ 0x90
 8005998:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800599a:	23a4      	movs	r3, #164	@ 0xa4
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2208      	movs	r2, #8
 80059a2:	4013      	ands	r3, r2
 80059a4:	d017      	beq.n	80059d6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059a6:	23a0      	movs	r3, #160	@ 0xa0
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2220      	movs	r2, #32
 80059ae:	4013      	ands	r3, r2
 80059b0:	d105      	bne.n	80059be <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059b2:	239c      	movs	r3, #156	@ 0x9c
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a5b      	ldr	r2, [pc, #364]	@ (8005b28 <HAL_UART_IRQHandler+0x2c0>)
 80059ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059bc:	d00b      	beq.n	80059d6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2208      	movs	r2, #8
 80059c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2290      	movs	r2, #144	@ 0x90
 80059ca:	589b      	ldr	r3, [r3, r2]
 80059cc:	2208      	movs	r2, #8
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2190      	movs	r1, #144	@ 0x90
 80059d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059d6:	23a4      	movs	r3, #164	@ 0xa4
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	2380      	movs	r3, #128	@ 0x80
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	4013      	ands	r3, r2
 80059e2:	d013      	beq.n	8005a0c <HAL_UART_IRQHandler+0x1a4>
 80059e4:	23a0      	movs	r3, #160	@ 0xa0
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	2380      	movs	r3, #128	@ 0x80
 80059ec:	04db      	lsls	r3, r3, #19
 80059ee:	4013      	ands	r3, r2
 80059f0:	d00c      	beq.n	8005a0c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2280      	movs	r2, #128	@ 0x80
 80059f8:	0112      	lsls	r2, r2, #4
 80059fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2290      	movs	r2, #144	@ 0x90
 8005a00:	589b      	ldr	r3, [r3, r2]
 8005a02:	2220      	movs	r2, #32
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2190      	movs	r1, #144	@ 0x90
 8005a0a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2290      	movs	r2, #144	@ 0x90
 8005a10:	589b      	ldr	r3, [r3, r2]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d100      	bne.n	8005a18 <HAL_UART_IRQHandler+0x1b0>
 8005a16:	e23d      	b.n	8005e94 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a18:	23a4      	movs	r3, #164	@ 0xa4
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	4013      	ands	r3, r2
 8005a22:	d015      	beq.n	8005a50 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a24:	23a0      	movs	r3, #160	@ 0xa0
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d106      	bne.n	8005a3e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a30:	239c      	movs	r3, #156	@ 0x9c
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	2380      	movs	r3, #128	@ 0x80
 8005a38:	055b      	lsls	r3, r3, #21
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d008      	beq.n	8005a50 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	0010      	movs	r0, r2
 8005a4e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2290      	movs	r2, #144	@ 0x90
 8005a54:	589b      	ldr	r3, [r3, r2]
 8005a56:	2194      	movs	r1, #148	@ 0x94
 8005a58:	187a      	adds	r2, r7, r1
 8005a5a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2240      	movs	r2, #64	@ 0x40
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d004      	beq.n	8005a74 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a6a:	187b      	adds	r3, r7, r1
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2228      	movs	r2, #40	@ 0x28
 8005a70:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a72:	d04c      	beq.n	8005b0e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	0018      	movs	r0, r3
 8005a78:	f000 fec4 	bl	8006804 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2240      	movs	r2, #64	@ 0x40
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b40      	cmp	r3, #64	@ 0x40
 8005a88:	d13c      	bne.n	8005b04 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005a90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a92:	2090      	movs	r0, #144	@ 0x90
 8005a94:	183a      	adds	r2, r7, r0
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	2301      	movs	r3, #1
 8005a9a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a9e:	f383 8810 	msr	PRIMASK, r3
}
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2140      	movs	r1, #64	@ 0x40
 8005ab0:	438a      	bics	r2, r1
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	183b      	adds	r3, r7, r0
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005abc:	f383 8810 	msr	PRIMASK, r3
}
 8005ac0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2280      	movs	r2, #128	@ 0x80
 8005ac6:	589b      	ldr	r3, [r3, r2]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d016      	beq.n	8005afa <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2280      	movs	r2, #128	@ 0x80
 8005ad0:	589b      	ldr	r3, [r3, r2]
 8005ad2:	4a17      	ldr	r2, [pc, #92]	@ (8005b30 <HAL_UART_IRQHandler+0x2c8>)
 8005ad4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2280      	movs	r2, #128	@ 0x80
 8005ada:	589b      	ldr	r3, [r3, r2]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f7fd fc17 	bl	8003310 <HAL_DMA_Abort_IT>
 8005ae2:	1e03      	subs	r3, r0, #0
 8005ae4:	d01c      	beq.n	8005b20 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2280      	movs	r2, #128	@ 0x80
 8005aea:	589b      	ldr	r3, [r3, r2]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	2180      	movs	r1, #128	@ 0x80
 8005af2:	5852      	ldr	r2, [r2, r1]
 8005af4:	0010      	movs	r0, r2
 8005af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	e012      	b.n	8005b20 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f000 f9e1 	bl	8005ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b02:	e00d      	b.n	8005b20 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	0018      	movs	r0, r3
 8005b08:	f000 f9dc 	bl	8005ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	e008      	b.n	8005b20 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 f9d7 	bl	8005ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2290      	movs	r2, #144	@ 0x90
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b1e:	e1b9      	b.n	8005e94 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	46c0      	nop			@ (mov r8, r8)
    return;
 8005b22:	e1b7      	b.n	8005e94 <HAL_UART_IRQHandler+0x62c>
 8005b24:	0000080f 	.word	0x0000080f
 8005b28:	10000001 	.word	0x10000001
 8005b2c:	04000120 	.word	0x04000120
 8005b30:	080068d1 	.word	0x080068d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d000      	beq.n	8005b3e <HAL_UART_IRQHandler+0x2d6>
 8005b3c:	e13e      	b.n	8005dbc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b3e:	23a4      	movs	r3, #164	@ 0xa4
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2210      	movs	r2, #16
 8005b46:	4013      	ands	r3, r2
 8005b48:	d100      	bne.n	8005b4c <HAL_UART_IRQHandler+0x2e4>
 8005b4a:	e137      	b.n	8005dbc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b4c:	23a0      	movs	r3, #160	@ 0xa0
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2210      	movs	r2, #16
 8005b54:	4013      	ands	r3, r2
 8005b56:	d100      	bne.n	8005b5a <HAL_UART_IRQHandler+0x2f2>
 8005b58:	e130      	b.n	8005dbc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2210      	movs	r2, #16
 8005b60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2240      	movs	r2, #64	@ 0x40
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b40      	cmp	r3, #64	@ 0x40
 8005b6e:	d000      	beq.n	8005b72 <HAL_UART_IRQHandler+0x30a>
 8005b70:	e0a4      	b.n	8005cbc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2280      	movs	r2, #128	@ 0x80
 8005b76:	589b      	ldr	r3, [r3, r2]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	217e      	movs	r1, #126	@ 0x7e
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005b82:	187b      	adds	r3, r7, r1
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d100      	bne.n	8005b8c <HAL_UART_IRQHandler+0x324>
 8005b8a:	e185      	b.n	8005e98 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	225c      	movs	r2, #92	@ 0x5c
 8005b90:	5a9b      	ldrh	r3, [r3, r2]
 8005b92:	187a      	adds	r2, r7, r1
 8005b94:	8812      	ldrh	r2, [r2, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d300      	bcc.n	8005b9c <HAL_UART_IRQHandler+0x334>
 8005b9a:	e17d      	b.n	8005e98 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	187a      	adds	r2, r7, r1
 8005ba0:	215e      	movs	r1, #94	@ 0x5e
 8005ba2:	8812      	ldrh	r2, [r2, #0]
 8005ba4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2280      	movs	r2, #128	@ 0x80
 8005baa:	589b      	ldr	r3, [r3, r2]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d170      	bne.n	8005c98 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bba:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc6:	f383 8810 	msr	PRIMASK, r3
}
 8005bca:	46c0      	nop			@ (mov r8, r8)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	49b4      	ldr	r1, [pc, #720]	@ (8005ea8 <HAL_UART_IRQHandler+0x640>)
 8005bd8:	400a      	ands	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be2:	f383 8810 	msr	PRIMASK, r3
}
 8005be6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bf8:	f383 8810 	msr	PRIMASK, r3
}
 8005bfc:	46c0      	nop			@ (mov r8, r8)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2101      	movs	r1, #1
 8005c0a:	438a      	bics	r2, r1
 8005c0c:	609a      	str	r2, [r3, #8]
 8005c0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c10:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c14:	f383 8810 	msr	PRIMASK, r3
}
 8005c18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c22:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c24:	2301      	movs	r3, #1
 8005c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c2a:	f383 8810 	msr	PRIMASK, r3
}
 8005c2e:	46c0      	nop			@ (mov r8, r8)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2140      	movs	r1, #64	@ 0x40
 8005c3c:	438a      	bics	r2, r1
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c42:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c46:	f383 8810 	msr	PRIMASK, r3
}
 8005c4a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	228c      	movs	r2, #140	@ 0x8c
 8005c50:	2120      	movs	r1, #32
 8005c52:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c64:	2301      	movs	r3, #1
 8005c66:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c6a:	f383 8810 	msr	PRIMASK, r3
}
 8005c6e:	46c0      	nop			@ (mov r8, r8)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2110      	movs	r1, #16
 8005c7c:	438a      	bics	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2280      	movs	r2, #128	@ 0x80
 8005c90:	589b      	ldr	r3, [r3, r2]
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7fd fada 	bl	800324c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	225c      	movs	r2, #92	@ 0x5c
 8005ca2:	5a9a      	ldrh	r2, [r3, r2]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	215e      	movs	r1, #94	@ 0x5e
 8005ca8:	5a5b      	ldrh	r3, [r3, r1]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	0011      	movs	r1, r2
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 f90d 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cba:	e0ed      	b.n	8005e98 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	225c      	movs	r2, #92	@ 0x5c
 8005cc0:	5a99      	ldrh	r1, [r3, r2]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	225e      	movs	r2, #94	@ 0x5e
 8005cc6:	5a9b      	ldrh	r3, [r3, r2]
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	208e      	movs	r0, #142	@ 0x8e
 8005ccc:	183b      	adds	r3, r7, r0
 8005cce:	1a8a      	subs	r2, r1, r2
 8005cd0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	225e      	movs	r2, #94	@ 0x5e
 8005cd6:	5a9b      	ldrh	r3, [r3, r2]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d100      	bne.n	8005ce0 <HAL_UART_IRQHandler+0x478>
 8005cde:	e0dd      	b.n	8005e9c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005ce0:	183b      	adds	r3, r7, r0
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d100      	bne.n	8005cea <HAL_UART_IRQHandler+0x482>
 8005ce8:	e0d8      	b.n	8005e9c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cea:	f3ef 8310 	mrs	r3, PRIMASK
 8005cee:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cf2:	2488      	movs	r4, #136	@ 0x88
 8005cf4:	193a      	adds	r2, r7, r4
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f383 8810 	msr	PRIMASK, r3
}
 8005d02:	46c0      	nop			@ (mov r8, r8)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4967      	ldr	r1, [pc, #412]	@ (8005eac <HAL_UART_IRQHandler+0x644>)
 8005d10:	400a      	ands	r2, r1
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	193b      	adds	r3, r7, r4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f383 8810 	msr	PRIMASK, r3
}
 8005d20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d22:	f3ef 8310 	mrs	r3, PRIMASK
 8005d26:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d28:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d2a:	2484      	movs	r4, #132	@ 0x84
 8005d2c:	193a      	adds	r2, r7, r4
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	2301      	movs	r3, #1
 8005d32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f383 8810 	msr	PRIMASK, r3
}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	495a      	ldr	r1, [pc, #360]	@ (8005eb0 <HAL_UART_IRQHandler+0x648>)
 8005d48:	400a      	ands	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
 8005d4c:	193b      	adds	r3, r7, r4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	228c      	movs	r2, #140	@ 0x8c
 8005d5e:	2120      	movs	r1, #32
 8005d60:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d72:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d76:	2480      	movs	r4, #128	@ 0x80
 8005d78:	193a      	adds	r2, r7, r4
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	f383 8810 	msr	PRIMASK, r3
}
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2110      	movs	r1, #16
 8005d94:	438a      	bics	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	193b      	adds	r3, r7, r4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da0:	f383 8810 	msr	PRIMASK, r3
}
 8005da4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dac:	183b      	adds	r3, r7, r0
 8005dae:	881a      	ldrh	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	0011      	movs	r1, r2
 8005db4:	0018      	movs	r0, r3
 8005db6:	f000 f88d 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dba:	e06f      	b.n	8005e9c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dbc:	23a4      	movs	r3, #164	@ 0xa4
 8005dbe:	18fb      	adds	r3, r7, r3
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	2380      	movs	r3, #128	@ 0x80
 8005dc4:	035b      	lsls	r3, r3, #13
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d010      	beq.n	8005dec <HAL_UART_IRQHandler+0x584>
 8005dca:	239c      	movs	r3, #156	@ 0x9c
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	2380      	movs	r3, #128	@ 0x80
 8005dd2:	03db      	lsls	r3, r3, #15
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2280      	movs	r2, #128	@ 0x80
 8005dde:	0352      	lsls	r2, r2, #13
 8005de0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 fdb6 	bl	8006956 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dea:	e05a      	b.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005dec:	23a4      	movs	r3, #164	@ 0xa4
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2280      	movs	r2, #128	@ 0x80
 8005df4:	4013      	ands	r3, r2
 8005df6:	d016      	beq.n	8005e26 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005df8:	23a0      	movs	r3, #160	@ 0xa0
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2280      	movs	r2, #128	@ 0x80
 8005e00:	4013      	ands	r3, r2
 8005e02:	d106      	bne.n	8005e12 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e04:	239c      	movs	r3, #156	@ 0x9c
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	2380      	movs	r3, #128	@ 0x80
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	4013      	ands	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d042      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	0010      	movs	r0, r2
 8005e22:	4798      	blx	r3
    }
    return;
 8005e24:	e03c      	b.n	8005ea0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e26:	23a4      	movs	r3, #164	@ 0xa4
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2240      	movs	r2, #64	@ 0x40
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d00a      	beq.n	8005e48 <HAL_UART_IRQHandler+0x5e0>
 8005e32:	23a0      	movs	r3, #160	@ 0xa0
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2240      	movs	r2, #64	@ 0x40
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 fd5c 	bl	80068fe <UART_EndTransmit_IT>
    return;
 8005e46:	e02c      	b.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e48:	23a4      	movs	r3, #164	@ 0xa4
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	2380      	movs	r3, #128	@ 0x80
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	4013      	ands	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <HAL_UART_IRQHandler+0x606>
 8005e56:	23a0      	movs	r3, #160	@ 0xa0
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	2380      	movs	r3, #128	@ 0x80
 8005e5e:	05db      	lsls	r3, r3, #23
 8005e60:	4013      	ands	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 fd85 	bl	8006976 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e6c:	e019      	b.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e6e:	23a4      	movs	r3, #164	@ 0xa4
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2380      	movs	r3, #128	@ 0x80
 8005e76:	045b      	lsls	r3, r3, #17
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d012      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
 8005e7c:	23a0      	movs	r3, #160	@ 0xa0
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da0d      	bge.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f000 fd6c 	bl	8006966 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e8e:	e008      	b.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
      return;
 8005e90:	46c0      	nop			@ (mov r8, r8)
 8005e92:	e006      	b.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
    return;
 8005e94:	46c0      	nop			@ (mov r8, r8)
 8005e96:	e004      	b.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
      return;
 8005e98:	46c0      	nop			@ (mov r8, r8)
 8005e9a:	e002      	b.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
      return;
 8005e9c:	46c0      	nop			@ (mov r8, r8)
 8005e9e:	e000      	b.n	8005ea2 <HAL_UART_IRQHandler+0x63a>
    return;
 8005ea0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b02a      	add	sp, #168	@ 0xa8
 8005ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ea8:	fffffeff 	.word	0xfffffeff
 8005eac:	fffffedf 	.word	0xfffffedf
 8005eb0:	effffffe 	.word	0xeffffffe

08005eb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ebc:	46c0      	nop			@ (mov r8, r8)
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b002      	add	sp, #8
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ecc:	46c0      	nop			@ (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b002      	add	sp, #8
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	000a      	movs	r2, r1
 8005ede:	1cbb      	adds	r3, r7, #2
 8005ee0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ee2:	46c0      	nop			@ (mov r8, r8)
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b002      	add	sp, #8
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eec:	b5b0      	push	{r4, r5, r7, lr}
 8005eee:	b090      	sub	sp, #64	@ 0x40
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ef4:	231a      	movs	r3, #26
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	189b      	adds	r3, r3, r2
 8005efa:	19db      	adds	r3, r3, r7
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4aaf      	ldr	r2, [pc, #700]	@ (80061dc <UART_SetConfig+0x2f0>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	0019      	movs	r1, r3
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4aaa      	ldr	r2, [pc, #680]	@ (80061e0 <UART_SetConfig+0x2f4>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	0018      	movs	r0, r3
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	68d9      	ldr	r1, [r3, #12]
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	0003      	movs	r3, r0
 8005f44:	430b      	orrs	r3, r1
 8005f46:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4aa4      	ldr	r2, [pc, #656]	@ (80061e4 <UART_SetConfig+0x2f8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4a9f      	ldr	r2, [pc, #636]	@ (80061e8 <UART_SetConfig+0x2fc>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7e:	220f      	movs	r2, #15
 8005f80:	4393      	bics	r3, r2
 8005f82:	0018      	movs	r0, r3
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a95      	ldr	r2, [pc, #596]	@ (80061ec <UART_SetConfig+0x300>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d131      	bne.n	8006000 <UART_SetConfig+0x114>
 8005f9c:	4b94      	ldr	r3, [pc, #592]	@ (80061f0 <UART_SetConfig+0x304>)
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d01d      	beq.n	8005fe4 <UART_SetConfig+0xf8>
 8005fa8:	d823      	bhi.n	8005ff2 <UART_SetConfig+0x106>
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d00c      	beq.n	8005fc8 <UART_SetConfig+0xdc>
 8005fae:	d820      	bhi.n	8005ff2 <UART_SetConfig+0x106>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <UART_SetConfig+0xce>
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d00e      	beq.n	8005fd6 <UART_SetConfig+0xea>
 8005fb8:	e01b      	b.n	8005ff2 <UART_SetConfig+0x106>
 8005fba:	231b      	movs	r3, #27
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	19db      	adds	r3, r3, r7
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e0b4      	b.n	8006132 <UART_SetConfig+0x246>
 8005fc8:	231b      	movs	r3, #27
 8005fca:	2220      	movs	r2, #32
 8005fcc:	189b      	adds	r3, r3, r2
 8005fce:	19db      	adds	r3, r3, r7
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	e0ad      	b.n	8006132 <UART_SetConfig+0x246>
 8005fd6:	231b      	movs	r3, #27
 8005fd8:	2220      	movs	r2, #32
 8005fda:	189b      	adds	r3, r3, r2
 8005fdc:	19db      	adds	r3, r3, r7
 8005fde:	2204      	movs	r2, #4
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	e0a6      	b.n	8006132 <UART_SetConfig+0x246>
 8005fe4:	231b      	movs	r3, #27
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	189b      	adds	r3, r3, r2
 8005fea:	19db      	adds	r3, r3, r7
 8005fec:	2208      	movs	r2, #8
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	e09f      	b.n	8006132 <UART_SetConfig+0x246>
 8005ff2:	231b      	movs	r3, #27
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	189b      	adds	r3, r3, r2
 8005ff8:	19db      	adds	r3, r3, r7
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e098      	b.n	8006132 <UART_SetConfig+0x246>
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a7b      	ldr	r2, [pc, #492]	@ (80061f4 <UART_SetConfig+0x308>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d131      	bne.n	800606e <UART_SetConfig+0x182>
 800600a:	4b79      	ldr	r3, [pc, #484]	@ (80061f0 <UART_SetConfig+0x304>)
 800600c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600e:	220c      	movs	r2, #12
 8006010:	4013      	ands	r3, r2
 8006012:	2b0c      	cmp	r3, #12
 8006014:	d01d      	beq.n	8006052 <UART_SetConfig+0x166>
 8006016:	d823      	bhi.n	8006060 <UART_SetConfig+0x174>
 8006018:	2b08      	cmp	r3, #8
 800601a:	d00c      	beq.n	8006036 <UART_SetConfig+0x14a>
 800601c:	d820      	bhi.n	8006060 <UART_SetConfig+0x174>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <UART_SetConfig+0x13c>
 8006022:	2b04      	cmp	r3, #4
 8006024:	d00e      	beq.n	8006044 <UART_SetConfig+0x158>
 8006026:	e01b      	b.n	8006060 <UART_SetConfig+0x174>
 8006028:	231b      	movs	r3, #27
 800602a:	2220      	movs	r2, #32
 800602c:	189b      	adds	r3, r3, r2
 800602e:	19db      	adds	r3, r3, r7
 8006030:	2200      	movs	r2, #0
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e07d      	b.n	8006132 <UART_SetConfig+0x246>
 8006036:	231b      	movs	r3, #27
 8006038:	2220      	movs	r2, #32
 800603a:	189b      	adds	r3, r3, r2
 800603c:	19db      	adds	r3, r3, r7
 800603e:	2202      	movs	r2, #2
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	e076      	b.n	8006132 <UART_SetConfig+0x246>
 8006044:	231b      	movs	r3, #27
 8006046:	2220      	movs	r2, #32
 8006048:	189b      	adds	r3, r3, r2
 800604a:	19db      	adds	r3, r3, r7
 800604c:	2204      	movs	r2, #4
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	e06f      	b.n	8006132 <UART_SetConfig+0x246>
 8006052:	231b      	movs	r3, #27
 8006054:	2220      	movs	r2, #32
 8006056:	189b      	adds	r3, r3, r2
 8006058:	19db      	adds	r3, r3, r7
 800605a:	2208      	movs	r2, #8
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	e068      	b.n	8006132 <UART_SetConfig+0x246>
 8006060:	231b      	movs	r3, #27
 8006062:	2220      	movs	r2, #32
 8006064:	189b      	adds	r3, r3, r2
 8006066:	19db      	adds	r3, r3, r7
 8006068:	2210      	movs	r2, #16
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	e061      	b.n	8006132 <UART_SetConfig+0x246>
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a61      	ldr	r2, [pc, #388]	@ (80061f8 <UART_SetConfig+0x30c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d106      	bne.n	8006086 <UART_SetConfig+0x19a>
 8006078:	231b      	movs	r3, #27
 800607a:	2220      	movs	r2, #32
 800607c:	189b      	adds	r3, r3, r2
 800607e:	19db      	adds	r3, r3, r7
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e055      	b.n	8006132 <UART_SetConfig+0x246>
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a5c      	ldr	r2, [pc, #368]	@ (80061fc <UART_SetConfig+0x310>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d106      	bne.n	800609e <UART_SetConfig+0x1b2>
 8006090:	231b      	movs	r3, #27
 8006092:	2220      	movs	r2, #32
 8006094:	189b      	adds	r3, r3, r2
 8006096:	19db      	adds	r3, r3, r7
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	e049      	b.n	8006132 <UART_SetConfig+0x246>
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a50      	ldr	r2, [pc, #320]	@ (80061e4 <UART_SetConfig+0x2f8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d13e      	bne.n	8006126 <UART_SetConfig+0x23a>
 80060a8:	4b51      	ldr	r3, [pc, #324]	@ (80061f0 <UART_SetConfig+0x304>)
 80060aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060ac:	23c0      	movs	r3, #192	@ 0xc0
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	4013      	ands	r3, r2
 80060b2:	22c0      	movs	r2, #192	@ 0xc0
 80060b4:	0112      	lsls	r2, r2, #4
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d027      	beq.n	800610a <UART_SetConfig+0x21e>
 80060ba:	22c0      	movs	r2, #192	@ 0xc0
 80060bc:	0112      	lsls	r2, r2, #4
 80060be:	4293      	cmp	r3, r2
 80060c0:	d82a      	bhi.n	8006118 <UART_SetConfig+0x22c>
 80060c2:	2280      	movs	r2, #128	@ 0x80
 80060c4:	0112      	lsls	r2, r2, #4
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d011      	beq.n	80060ee <UART_SetConfig+0x202>
 80060ca:	2280      	movs	r2, #128	@ 0x80
 80060cc:	0112      	lsls	r2, r2, #4
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d822      	bhi.n	8006118 <UART_SetConfig+0x22c>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d004      	beq.n	80060e0 <UART_SetConfig+0x1f4>
 80060d6:	2280      	movs	r2, #128	@ 0x80
 80060d8:	00d2      	lsls	r2, r2, #3
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00e      	beq.n	80060fc <UART_SetConfig+0x210>
 80060de:	e01b      	b.n	8006118 <UART_SetConfig+0x22c>
 80060e0:	231b      	movs	r3, #27
 80060e2:	2220      	movs	r2, #32
 80060e4:	189b      	adds	r3, r3, r2
 80060e6:	19db      	adds	r3, r3, r7
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e021      	b.n	8006132 <UART_SetConfig+0x246>
 80060ee:	231b      	movs	r3, #27
 80060f0:	2220      	movs	r2, #32
 80060f2:	189b      	adds	r3, r3, r2
 80060f4:	19db      	adds	r3, r3, r7
 80060f6:	2202      	movs	r2, #2
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	e01a      	b.n	8006132 <UART_SetConfig+0x246>
 80060fc:	231b      	movs	r3, #27
 80060fe:	2220      	movs	r2, #32
 8006100:	189b      	adds	r3, r3, r2
 8006102:	19db      	adds	r3, r3, r7
 8006104:	2204      	movs	r2, #4
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e013      	b.n	8006132 <UART_SetConfig+0x246>
 800610a:	231b      	movs	r3, #27
 800610c:	2220      	movs	r2, #32
 800610e:	189b      	adds	r3, r3, r2
 8006110:	19db      	adds	r3, r3, r7
 8006112:	2208      	movs	r2, #8
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e00c      	b.n	8006132 <UART_SetConfig+0x246>
 8006118:	231b      	movs	r3, #27
 800611a:	2220      	movs	r2, #32
 800611c:	189b      	adds	r3, r3, r2
 800611e:	19db      	adds	r3, r3, r7
 8006120:	2210      	movs	r2, #16
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	e005      	b.n	8006132 <UART_SetConfig+0x246>
 8006126:	231b      	movs	r3, #27
 8006128:	2220      	movs	r2, #32
 800612a:	189b      	adds	r3, r3, r2
 800612c:	19db      	adds	r3, r3, r7
 800612e:	2210      	movs	r2, #16
 8006130:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2b      	ldr	r2, [pc, #172]	@ (80061e4 <UART_SetConfig+0x2f8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d000      	beq.n	800613e <UART_SetConfig+0x252>
 800613c:	e0a9      	b.n	8006292 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800613e:	231b      	movs	r3, #27
 8006140:	2220      	movs	r2, #32
 8006142:	189b      	adds	r3, r3, r2
 8006144:	19db      	adds	r3, r3, r7
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d015      	beq.n	8006178 <UART_SetConfig+0x28c>
 800614c:	dc18      	bgt.n	8006180 <UART_SetConfig+0x294>
 800614e:	2b04      	cmp	r3, #4
 8006150:	d00d      	beq.n	800616e <UART_SetConfig+0x282>
 8006152:	dc15      	bgt.n	8006180 <UART_SetConfig+0x294>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <UART_SetConfig+0x272>
 8006158:	2b02      	cmp	r3, #2
 800615a:	d005      	beq.n	8006168 <UART_SetConfig+0x27c>
 800615c:	e010      	b.n	8006180 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615e:	f7ff f87b 	bl	8005258 <HAL_RCC_GetPCLK1Freq>
 8006162:	0003      	movs	r3, r0
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006166:	e014      	b.n	8006192 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006168:	4b25      	ldr	r3, [pc, #148]	@ (8006200 <UART_SetConfig+0x314>)
 800616a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800616c:	e011      	b.n	8006192 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616e:	f7fe ffe7 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8006172:	0003      	movs	r3, r0
 8006174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006176:	e00c      	b.n	8006192 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006178:	2380      	movs	r3, #128	@ 0x80
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800617e:	e008      	b.n	8006192 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006184:	231a      	movs	r3, #26
 8006186:	2220      	movs	r2, #32
 8006188:	189b      	adds	r3, r3, r2
 800618a:	19db      	adds	r3, r3, r7
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
        break;
 8006190:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	d100      	bne.n	800619a <UART_SetConfig+0x2ae>
 8006198:	e14b      	b.n	8006432 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800619e:	4b19      	ldr	r3, [pc, #100]	@ (8006204 <UART_SetConfig+0x318>)
 80061a0:	0052      	lsls	r2, r2, #1
 80061a2:	5ad3      	ldrh	r3, [r2, r3]
 80061a4:	0019      	movs	r1, r3
 80061a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80061a8:	f7f9 ffb4 	bl	8000114 <__udivsi3>
 80061ac:	0003      	movs	r3, r0
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	0013      	movs	r3, r2
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	189b      	adds	r3, r3, r2
 80061ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061bc:	429a      	cmp	r2, r3
 80061be:	d305      	bcc.n	80061cc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d91d      	bls.n	8006208 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80061cc:	231a      	movs	r3, #26
 80061ce:	2220      	movs	r2, #32
 80061d0:	189b      	adds	r3, r3, r2
 80061d2:	19db      	adds	r3, r3, r7
 80061d4:	2201      	movs	r2, #1
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	e12b      	b.n	8006432 <UART_SetConfig+0x546>
 80061da:	46c0      	nop			@ (mov r8, r8)
 80061dc:	cfff69f3 	.word	0xcfff69f3
 80061e0:	ffffcfff 	.word	0xffffcfff
 80061e4:	40008000 	.word	0x40008000
 80061e8:	11fff4ff 	.word	0x11fff4ff
 80061ec:	40013800 	.word	0x40013800
 80061f0:	40021000 	.word	0x40021000
 80061f4:	40004400 	.word	0x40004400
 80061f8:	40004800 	.word	0x40004800
 80061fc:	40004c00 	.word	0x40004c00
 8006200:	00f42400 	.word	0x00f42400
 8006204:	08009590 	.word	0x08009590
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006214:	4b92      	ldr	r3, [pc, #584]	@ (8006460 <UART_SetConfig+0x574>)
 8006216:	0052      	lsls	r2, r2, #1
 8006218:	5ad3      	ldrh	r3, [r2, r3]
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	69b8      	ldr	r0, [r7, #24]
 8006226:	69f9      	ldr	r1, [r7, #28]
 8006228:	f7fa f928 	bl	800047c <__aeabi_uldivmod>
 800622c:	0002      	movs	r2, r0
 800622e:	000b      	movs	r3, r1
 8006230:	0e11      	lsrs	r1, r2, #24
 8006232:	021d      	lsls	r5, r3, #8
 8006234:	430d      	orrs	r5, r1
 8006236:	0214      	lsls	r4, r2, #8
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68b8      	ldr	r0, [r7, #8]
 8006246:	68f9      	ldr	r1, [r7, #12]
 8006248:	1900      	adds	r0, r0, r4
 800624a:	4169      	adcs	r1, r5
 800624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	2300      	movs	r3, #0
 8006254:	607b      	str	r3, [r7, #4]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f7fa f90f 	bl	800047c <__aeabi_uldivmod>
 800625e:	0002      	movs	r2, r0
 8006260:	000b      	movs	r3, r1
 8006262:	0013      	movs	r3, r2
 8006264:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006268:	23c0      	movs	r3, #192	@ 0xc0
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	429a      	cmp	r2, r3
 800626e:	d309      	bcc.n	8006284 <UART_SetConfig+0x398>
 8006270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006272:	2380      	movs	r3, #128	@ 0x80
 8006274:	035b      	lsls	r3, r3, #13
 8006276:	429a      	cmp	r2, r3
 8006278:	d204      	bcs.n	8006284 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006280:	60da      	str	r2, [r3, #12]
 8006282:	e0d6      	b.n	8006432 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006284:	231a      	movs	r3, #26
 8006286:	2220      	movs	r2, #32
 8006288:	189b      	adds	r3, r3, r2
 800628a:	19db      	adds	r3, r3, r7
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e0cf      	b.n	8006432 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	2380      	movs	r3, #128	@ 0x80
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	429a      	cmp	r2, r3
 800629c:	d000      	beq.n	80062a0 <UART_SetConfig+0x3b4>
 800629e:	e070      	b.n	8006382 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80062a0:	231b      	movs	r3, #27
 80062a2:	2220      	movs	r2, #32
 80062a4:	189b      	adds	r3, r3, r2
 80062a6:	19db      	adds	r3, r3, r7
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d015      	beq.n	80062da <UART_SetConfig+0x3ee>
 80062ae:	dc18      	bgt.n	80062e2 <UART_SetConfig+0x3f6>
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d00d      	beq.n	80062d0 <UART_SetConfig+0x3e4>
 80062b4:	dc15      	bgt.n	80062e2 <UART_SetConfig+0x3f6>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <UART_SetConfig+0x3d4>
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d005      	beq.n	80062ca <UART_SetConfig+0x3de>
 80062be:	e010      	b.n	80062e2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c0:	f7fe ffca 	bl	8005258 <HAL_RCC_GetPCLK1Freq>
 80062c4:	0003      	movs	r3, r0
 80062c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062c8:	e014      	b.n	80062f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ca:	4b66      	ldr	r3, [pc, #408]	@ (8006464 <UART_SetConfig+0x578>)
 80062cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062ce:	e011      	b.n	80062f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d0:	f7fe ff36 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80062d4:	0003      	movs	r3, r0
 80062d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062d8:	e00c      	b.n	80062f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062da:	2380      	movs	r3, #128	@ 0x80
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062e0:	e008      	b.n	80062f4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80062e6:	231a      	movs	r3, #26
 80062e8:	2220      	movs	r2, #32
 80062ea:	189b      	adds	r3, r3, r2
 80062ec:	19db      	adds	r3, r3, r7
 80062ee:	2201      	movs	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
        break;
 80062f2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d100      	bne.n	80062fc <UART_SetConfig+0x410>
 80062fa:	e09a      	b.n	8006432 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006300:	4b57      	ldr	r3, [pc, #348]	@ (8006460 <UART_SetConfig+0x574>)
 8006302:	0052      	lsls	r2, r2, #1
 8006304:	5ad3      	ldrh	r3, [r2, r3]
 8006306:	0019      	movs	r1, r3
 8006308:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800630a:	f7f9 ff03 	bl	8000114 <__udivsi3>
 800630e:	0003      	movs	r3, r0
 8006310:	005a      	lsls	r2, r3, #1
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	18d2      	adds	r2, r2, r3
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	0019      	movs	r1, r3
 8006320:	0010      	movs	r0, r2
 8006322:	f7f9 fef7 	bl	8000114 <__udivsi3>
 8006326:	0003      	movs	r3, r0
 8006328:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	2b0f      	cmp	r3, #15
 800632e:	d921      	bls.n	8006374 <UART_SetConfig+0x488>
 8006330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006332:	2380      	movs	r3, #128	@ 0x80
 8006334:	025b      	lsls	r3, r3, #9
 8006336:	429a      	cmp	r2, r3
 8006338:	d21c      	bcs.n	8006374 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	b29a      	uxth	r2, r3
 800633e:	200e      	movs	r0, #14
 8006340:	2420      	movs	r4, #32
 8006342:	1903      	adds	r3, r0, r4
 8006344:	19db      	adds	r3, r3, r7
 8006346:	210f      	movs	r1, #15
 8006348:	438a      	bics	r2, r1
 800634a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	085b      	lsrs	r3, r3, #1
 8006350:	b29b      	uxth	r3, r3
 8006352:	2207      	movs	r2, #7
 8006354:	4013      	ands	r3, r2
 8006356:	b299      	uxth	r1, r3
 8006358:	1903      	adds	r3, r0, r4
 800635a:	19db      	adds	r3, r3, r7
 800635c:	1902      	adds	r2, r0, r4
 800635e:	19d2      	adds	r2, r2, r7
 8006360:	8812      	ldrh	r2, [r2, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	1902      	adds	r2, r0, r4
 800636c:	19d2      	adds	r2, r2, r7
 800636e:	8812      	ldrh	r2, [r2, #0]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	e05e      	b.n	8006432 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006374:	231a      	movs	r3, #26
 8006376:	2220      	movs	r2, #32
 8006378:	189b      	adds	r3, r3, r2
 800637a:	19db      	adds	r3, r3, r7
 800637c:	2201      	movs	r2, #1
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	e057      	b.n	8006432 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006382:	231b      	movs	r3, #27
 8006384:	2220      	movs	r2, #32
 8006386:	189b      	adds	r3, r3, r2
 8006388:	19db      	adds	r3, r3, r7
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b08      	cmp	r3, #8
 800638e:	d015      	beq.n	80063bc <UART_SetConfig+0x4d0>
 8006390:	dc18      	bgt.n	80063c4 <UART_SetConfig+0x4d8>
 8006392:	2b04      	cmp	r3, #4
 8006394:	d00d      	beq.n	80063b2 <UART_SetConfig+0x4c6>
 8006396:	dc15      	bgt.n	80063c4 <UART_SetConfig+0x4d8>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <UART_SetConfig+0x4b6>
 800639c:	2b02      	cmp	r3, #2
 800639e:	d005      	beq.n	80063ac <UART_SetConfig+0x4c0>
 80063a0:	e010      	b.n	80063c4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a2:	f7fe ff59 	bl	8005258 <HAL_RCC_GetPCLK1Freq>
 80063a6:	0003      	movs	r3, r0
 80063a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063aa:	e014      	b.n	80063d6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006464 <UART_SetConfig+0x578>)
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063b0:	e011      	b.n	80063d6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063b2:	f7fe fec5 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80063b6:	0003      	movs	r3, r0
 80063b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063ba:	e00c      	b.n	80063d6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063bc:	2380      	movs	r3, #128	@ 0x80
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063c2:	e008      	b.n	80063d6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80063c8:	231a      	movs	r3, #26
 80063ca:	2220      	movs	r2, #32
 80063cc:	189b      	adds	r3, r3, r2
 80063ce:	19db      	adds	r3, r3, r7
 80063d0:	2201      	movs	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
        break;
 80063d4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80063d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d02a      	beq.n	8006432 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006460 <UART_SetConfig+0x574>)
 80063e2:	0052      	lsls	r2, r2, #1
 80063e4:	5ad3      	ldrh	r3, [r2, r3]
 80063e6:	0019      	movs	r1, r3
 80063e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80063ea:	f7f9 fe93 	bl	8000114 <__udivsi3>
 80063ee:	0003      	movs	r3, r0
 80063f0:	001a      	movs	r2, r3
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	18d2      	adds	r2, r2, r3
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	0019      	movs	r1, r3
 8006400:	0010      	movs	r0, r2
 8006402:	f7f9 fe87 	bl	8000114 <__udivsi3>
 8006406:	0003      	movs	r3, r0
 8006408:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800640a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640c:	2b0f      	cmp	r3, #15
 800640e:	d90a      	bls.n	8006426 <UART_SetConfig+0x53a>
 8006410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006412:	2380      	movs	r3, #128	@ 0x80
 8006414:	025b      	lsls	r3, r3, #9
 8006416:	429a      	cmp	r2, r3
 8006418:	d205      	bcs.n	8006426 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	b29a      	uxth	r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60da      	str	r2, [r3, #12]
 8006424:	e005      	b.n	8006432 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006426:	231a      	movs	r3, #26
 8006428:	2220      	movs	r2, #32
 800642a:	189b      	adds	r3, r3, r2
 800642c:	19db      	adds	r3, r3, r7
 800642e:	2201      	movs	r2, #1
 8006430:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	226a      	movs	r2, #106	@ 0x6a
 8006436:	2101      	movs	r1, #1
 8006438:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	2268      	movs	r2, #104	@ 0x68
 800643e:	2101      	movs	r1, #1
 8006440:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	2200      	movs	r2, #0
 8006446:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	2200      	movs	r2, #0
 800644c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800644e:	231a      	movs	r3, #26
 8006450:	2220      	movs	r2, #32
 8006452:	189b      	adds	r3, r3, r2
 8006454:	19db      	adds	r3, r3, r7
 8006456:	781b      	ldrb	r3, [r3, #0]
}
 8006458:	0018      	movs	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	b010      	add	sp, #64	@ 0x40
 800645e:	bdb0      	pop	{r4, r5, r7, pc}
 8006460:	08009590 	.word	0x08009590
 8006464:	00f42400 	.word	0x00f42400

08006468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	2208      	movs	r2, #8
 8006476:	4013      	ands	r3, r2
 8006478:	d00b      	beq.n	8006492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4a4a      	ldr	r2, [pc, #296]	@ (80065ac <UART_AdvFeatureConfig+0x144>)
 8006482:	4013      	ands	r3, r2
 8006484:	0019      	movs	r1, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006496:	2201      	movs	r2, #1
 8006498:	4013      	ands	r3, r2
 800649a:	d00b      	beq.n	80064b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4a43      	ldr	r2, [pc, #268]	@ (80065b0 <UART_AdvFeatureConfig+0x148>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	0019      	movs	r1, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b8:	2202      	movs	r2, #2
 80064ba:	4013      	ands	r3, r2
 80064bc:	d00b      	beq.n	80064d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4a3b      	ldr	r2, [pc, #236]	@ (80065b4 <UART_AdvFeatureConfig+0x14c>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	0019      	movs	r1, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064da:	2204      	movs	r2, #4
 80064dc:	4013      	ands	r3, r2
 80064de:	d00b      	beq.n	80064f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4a34      	ldr	r2, [pc, #208]	@ (80065b8 <UART_AdvFeatureConfig+0x150>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	0019      	movs	r1, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	2210      	movs	r2, #16
 80064fe:	4013      	ands	r3, r2
 8006500:	d00b      	beq.n	800651a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a2c      	ldr	r2, [pc, #176]	@ (80065bc <UART_AdvFeatureConfig+0x154>)
 800650a:	4013      	ands	r3, r2
 800650c:	0019      	movs	r1, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	2220      	movs	r2, #32
 8006520:	4013      	ands	r3, r2
 8006522:	d00b      	beq.n	800653c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	4a25      	ldr	r2, [pc, #148]	@ (80065c0 <UART_AdvFeatureConfig+0x158>)
 800652c:	4013      	ands	r3, r2
 800652e:	0019      	movs	r1, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	2240      	movs	r2, #64	@ 0x40
 8006542:	4013      	ands	r3, r2
 8006544:	d01d      	beq.n	8006582 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	4a1d      	ldr	r2, [pc, #116]	@ (80065c4 <UART_AdvFeatureConfig+0x15c>)
 800654e:	4013      	ands	r3, r2
 8006550:	0019      	movs	r1, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006562:	2380      	movs	r3, #128	@ 0x80
 8006564:	035b      	lsls	r3, r3, #13
 8006566:	429a      	cmp	r2, r3
 8006568:	d10b      	bne.n	8006582 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4a15      	ldr	r2, [pc, #84]	@ (80065c8 <UART_AdvFeatureConfig+0x160>)
 8006572:	4013      	ands	r3, r2
 8006574:	0019      	movs	r1, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	2280      	movs	r2, #128	@ 0x80
 8006588:	4013      	ands	r3, r2
 800658a:	d00b      	beq.n	80065a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	4a0e      	ldr	r2, [pc, #56]	@ (80065cc <UART_AdvFeatureConfig+0x164>)
 8006594:	4013      	ands	r3, r2
 8006596:	0019      	movs	r1, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }
}
 80065a4:	46c0      	nop			@ (mov r8, r8)
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b002      	add	sp, #8
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	ffff7fff 	.word	0xffff7fff
 80065b0:	fffdffff 	.word	0xfffdffff
 80065b4:	fffeffff 	.word	0xfffeffff
 80065b8:	fffbffff 	.word	0xfffbffff
 80065bc:	ffffefff 	.word	0xffffefff
 80065c0:	ffffdfff 	.word	0xffffdfff
 80065c4:	ffefffff 	.word	0xffefffff
 80065c8:	ff9fffff 	.word	0xff9fffff
 80065cc:	fff7ffff 	.word	0xfff7ffff

080065d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b092      	sub	sp, #72	@ 0x48
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2290      	movs	r2, #144	@ 0x90
 80065dc:	2100      	movs	r1, #0
 80065de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065e0:	f7fb ff76 	bl	80024d0 <HAL_GetTick>
 80065e4:	0003      	movs	r3, r0
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2208      	movs	r2, #8
 80065f0:	4013      	ands	r3, r2
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d12d      	bne.n	8006652 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f8:	2280      	movs	r2, #128	@ 0x80
 80065fa:	0391      	lsls	r1, r2, #14
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	4a47      	ldr	r2, [pc, #284]	@ (800671c <UART_CheckIdleState+0x14c>)
 8006600:	9200      	str	r2, [sp, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	f000 f88e 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 8006608:	1e03      	subs	r3, r0, #0
 800660a:	d022      	beq.n	8006652 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800660c:	f3ef 8310 	mrs	r3, PRIMASK
 8006610:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006614:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006616:	2301      	movs	r3, #1
 8006618:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661c:	f383 8810 	msr	PRIMASK, r3
}
 8006620:	46c0      	nop			@ (mov r8, r8)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2180      	movs	r1, #128	@ 0x80
 800662e:	438a      	bics	r2, r1
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	f383 8810 	msr	PRIMASK, r3
}
 800663c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2288      	movs	r2, #136	@ 0x88
 8006642:	2120      	movs	r1, #32
 8006644:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2284      	movs	r2, #132	@ 0x84
 800664a:	2100      	movs	r1, #0
 800664c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e060      	b.n	8006714 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2204      	movs	r2, #4
 800665a:	4013      	ands	r3, r2
 800665c:	2b04      	cmp	r3, #4
 800665e:	d146      	bne.n	80066ee <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006662:	2280      	movs	r2, #128	@ 0x80
 8006664:	03d1      	lsls	r1, r2, #15
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4a2c      	ldr	r2, [pc, #176]	@ (800671c <UART_CheckIdleState+0x14c>)
 800666a:	9200      	str	r2, [sp, #0]
 800666c:	2200      	movs	r2, #0
 800666e:	f000 f859 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 8006672:	1e03      	subs	r3, r0, #0
 8006674:	d03b      	beq.n	80066ee <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006676:	f3ef 8310 	mrs	r3, PRIMASK
 800667a:	60fb      	str	r3, [r7, #12]
  return(result);
 800667c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006680:	2301      	movs	r3, #1
 8006682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f383 8810 	msr	PRIMASK, r3
}
 800668a:	46c0      	nop			@ (mov r8, r8)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4922      	ldr	r1, [pc, #136]	@ (8006720 <UART_CheckIdleState+0x150>)
 8006698:	400a      	ands	r2, r1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f383 8810 	msr	PRIMASK, r3
}
 80066a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a8:	f3ef 8310 	mrs	r3, PRIMASK
 80066ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80066ae:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b2:	2301      	movs	r3, #1
 80066b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f383 8810 	msr	PRIMASK, r3
}
 80066bc:	46c0      	nop			@ (mov r8, r8)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2101      	movs	r1, #1
 80066ca:	438a      	bics	r2, r1
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	f383 8810 	msr	PRIMASK, r3
}
 80066d8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	228c      	movs	r2, #140	@ 0x8c
 80066de:	2120      	movs	r1, #32
 80066e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2284      	movs	r2, #132	@ 0x84
 80066e6:	2100      	movs	r1, #0
 80066e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e012      	b.n	8006714 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2288      	movs	r2, #136	@ 0x88
 80066f2:	2120      	movs	r1, #32
 80066f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	228c      	movs	r2, #140	@ 0x8c
 80066fa:	2120      	movs	r1, #32
 80066fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2284      	movs	r2, #132	@ 0x84
 800670e:	2100      	movs	r1, #0
 8006710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	0018      	movs	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	b010      	add	sp, #64	@ 0x40
 800671a:	bd80      	pop	{r7, pc}
 800671c:	01ffffff 	.word	0x01ffffff
 8006720:	fffffedf 	.word	0xfffffedf

08006724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	1dfb      	adds	r3, r7, #7
 8006732:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006734:	e051      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	3301      	adds	r3, #1
 800673a:	d04e      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673c:	f7fb fec8 	bl	80024d0 <HAL_GetTick>
 8006740:	0002      	movs	r2, r0
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	429a      	cmp	r2, r3
 800674a:	d302      	bcc.n	8006752 <UART_WaitOnFlagUntilTimeout+0x2e>
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e051      	b.n	80067fa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2204      	movs	r2, #4
 800675e:	4013      	ands	r3, r2
 8006760:	d03b      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0xb6>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b80      	cmp	r3, #128	@ 0x80
 8006766:	d038      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0xb6>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b40      	cmp	r3, #64	@ 0x40
 800676c:	d035      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	2208      	movs	r2, #8
 8006776:	4013      	ands	r3, r2
 8006778:	2b08      	cmp	r3, #8
 800677a:	d111      	bne.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2208      	movs	r2, #8
 8006782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	0018      	movs	r0, r3
 8006788:	f000 f83c 	bl	8006804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2290      	movs	r2, #144	@ 0x90
 8006790:	2108      	movs	r1, #8
 8006792:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2284      	movs	r2, #132	@ 0x84
 8006798:	2100      	movs	r1, #0
 800679a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e02c      	b.n	80067fa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69da      	ldr	r2, [r3, #28]
 80067a6:	2380      	movs	r3, #128	@ 0x80
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	401a      	ands	r2, r3
 80067ac:	2380      	movs	r3, #128	@ 0x80
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d112      	bne.n	80067da <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2280      	movs	r2, #128	@ 0x80
 80067ba:	0112      	lsls	r2, r2, #4
 80067bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	0018      	movs	r0, r3
 80067c2:	f000 f81f 	bl	8006804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2290      	movs	r2, #144	@ 0x90
 80067ca:	2120      	movs	r1, #32
 80067cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2284      	movs	r2, #132	@ 0x84
 80067d2:	2100      	movs	r1, #0
 80067d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e00f      	b.n	80067fa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4013      	ands	r3, r2
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	425a      	negs	r2, r3
 80067ea:	4153      	adcs	r3, r2
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	001a      	movs	r2, r3
 80067f0:	1dfb      	adds	r3, r7, #7
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d09e      	beq.n	8006736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	0018      	movs	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b004      	add	sp, #16
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08e      	sub	sp, #56	@ 0x38
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800680c:	f3ef 8310 	mrs	r3, PRIMASK
 8006810:	617b      	str	r3, [r7, #20]
  return(result);
 8006812:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
 8006816:	2301      	movs	r3, #1
 8006818:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f383 8810 	msr	PRIMASK, r3
}
 8006820:	46c0      	nop			@ (mov r8, r8)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4926      	ldr	r1, [pc, #152]	@ (80068c8 <UART_EndRxTransfer+0xc4>)
 800682e:	400a      	ands	r2, r1
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006834:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f383 8810 	msr	PRIMASK, r3
}
 800683c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800683e:	f3ef 8310 	mrs	r3, PRIMASK
 8006842:	623b      	str	r3, [r7, #32]
  return(result);
 8006844:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006846:	633b      	str	r3, [r7, #48]	@ 0x30
 8006848:	2301      	movs	r3, #1
 800684a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	f383 8810 	msr	PRIMASK, r3
}
 8006852:	46c0      	nop			@ (mov r8, r8)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	491b      	ldr	r1, [pc, #108]	@ (80068cc <UART_EndRxTransfer+0xc8>)
 8006860:	400a      	ands	r2, r1
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	f383 8810 	msr	PRIMASK, r3
}
 800686e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006874:	2b01      	cmp	r3, #1
 8006876:	d118      	bne.n	80068aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006878:	f3ef 8310 	mrs	r3, PRIMASK
 800687c:	60bb      	str	r3, [r7, #8]
  return(result);
 800687e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006882:	2301      	movs	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f383 8810 	msr	PRIMASK, r3
}
 800688c:	46c0      	nop			@ (mov r8, r8)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2110      	movs	r1, #16
 800689a:	438a      	bics	r2, r1
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f383 8810 	msr	PRIMASK, r3
}
 80068a8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	228c      	movs	r2, #140	@ 0x8c
 80068ae:	2120      	movs	r1, #32
 80068b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80068be:	46c0      	nop			@ (mov r8, r8)
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b00e      	add	sp, #56	@ 0x38
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	fffffedf 	.word	0xfffffedf
 80068cc:	effffffe 	.word	0xeffffffe

080068d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	225e      	movs	r2, #94	@ 0x5e
 80068e2:	2100      	movs	r1, #0
 80068e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2256      	movs	r2, #86	@ 0x56
 80068ea:	2100      	movs	r1, #0
 80068ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	0018      	movs	r0, r3
 80068f2:	f7ff fae7 	bl	8005ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f6:	46c0      	nop			@ (mov r8, r8)
 80068f8:	46bd      	mov	sp, r7
 80068fa:	b004      	add	sp, #16
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b086      	sub	sp, #24
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006906:	f3ef 8310 	mrs	r3, PRIMASK
 800690a:	60bb      	str	r3, [r7, #8]
  return(result);
 800690c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	2301      	movs	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f383 8810 	msr	PRIMASK, r3
}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2140      	movs	r1, #64	@ 0x40
 8006928:	438a      	bics	r2, r1
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f383 8810 	msr	PRIMASK, r3
}
 8006936:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2288      	movs	r2, #136	@ 0x88
 800693c:	2120      	movs	r1, #32
 800693e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	0018      	movs	r0, r3
 800694a:	f7ff fab3 	bl	8005eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800694e:	46c0      	nop			@ (mov r8, r8)
 8006950:	46bd      	mov	sp, r7
 8006952:	b006      	add	sp, #24
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b002      	add	sp, #8
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b002      	add	sp, #8
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	46bd      	mov	sp, r7
 8006982:	b002      	add	sp, #8
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2284      	movs	r2, #132	@ 0x84
 8006994:	5c9b      	ldrb	r3, [r3, r2]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_UARTEx_DisableFifoMode+0x16>
 800699a:	2302      	movs	r3, #2
 800699c:	e027      	b.n	80069ee <HAL_UARTEx_DisableFifoMode+0x66>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2284      	movs	r2, #132	@ 0x84
 80069a2:	2101      	movs	r1, #1
 80069a4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2288      	movs	r2, #136	@ 0x88
 80069aa:	2124      	movs	r1, #36	@ 0x24
 80069ac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2101      	movs	r1, #1
 80069c2:	438a      	bics	r2, r1
 80069c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4a0b      	ldr	r2, [pc, #44]	@ (80069f8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2288      	movs	r2, #136	@ 0x88
 80069e0:	2120      	movs	r1, #32
 80069e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2284      	movs	r2, #132	@ 0x84
 80069e8:	2100      	movs	r1, #0
 80069ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	0018      	movs	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b004      	add	sp, #16
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	dfffffff 	.word	0xdfffffff

080069fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2284      	movs	r2, #132	@ 0x84
 8006a0a:	5c9b      	ldrb	r3, [r3, r2]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e02e      	b.n	8006a72 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2284      	movs	r2, #132	@ 0x84
 8006a18:	2101      	movs	r1, #1
 8006a1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2288      	movs	r2, #136	@ 0x88
 8006a20:	2124      	movs	r1, #36	@ 0x24
 8006a22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2101      	movs	r1, #1
 8006a38:	438a      	bics	r2, r1
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	08d9      	lsrs	r1, r3, #3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	0018      	movs	r0, r3
 8006a54:	f000 f854 	bl	8006b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2288      	movs	r2, #136	@ 0x88
 8006a64:	2120      	movs	r1, #32
 8006a66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2284      	movs	r2, #132	@ 0x84
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	0018      	movs	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	b004      	add	sp, #16
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2284      	movs	r2, #132	@ 0x84
 8006a8a:	5c9b      	ldrb	r3, [r3, r2]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e02f      	b.n	8006af4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2284      	movs	r2, #132	@ 0x84
 8006a98:	2101      	movs	r1, #1
 8006a9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2288      	movs	r2, #136	@ 0x88
 8006aa0:	2124      	movs	r1, #36	@ 0x24
 8006aa2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	438a      	bics	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8006afc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	0019      	movs	r1, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f000 f813 	bl	8006b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2288      	movs	r2, #136	@ 0x88
 8006ae6:	2120      	movs	r1, #32
 8006ae8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2284      	movs	r2, #132	@ 0x84
 8006aee:	2100      	movs	r1, #0
 8006af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	0018      	movs	r0, r3
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b004      	add	sp, #16
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	f1ffffff 	.word	0xf1ffffff

08006b00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d108      	bne.n	8006b22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	226a      	movs	r2, #106	@ 0x6a
 8006b14:	2101      	movs	r1, #1
 8006b16:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2268      	movs	r2, #104	@ 0x68
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b20:	e043      	b.n	8006baa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b22:	260f      	movs	r6, #15
 8006b24:	19bb      	adds	r3, r7, r6
 8006b26:	2208      	movs	r2, #8
 8006b28:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b2a:	200e      	movs	r0, #14
 8006b2c:	183b      	adds	r3, r7, r0
 8006b2e:	2208      	movs	r2, #8
 8006b30:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	0e5b      	lsrs	r3, r3, #25
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	240d      	movs	r4, #13
 8006b3e:	193b      	adds	r3, r7, r4
 8006b40:	2107      	movs	r1, #7
 8006b42:	400a      	ands	r2, r1
 8006b44:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	0f5b      	lsrs	r3, r3, #29
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	250c      	movs	r5, #12
 8006b52:	197b      	adds	r3, r7, r5
 8006b54:	2107      	movs	r1, #7
 8006b56:	400a      	ands	r2, r1
 8006b58:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b5a:	183b      	adds	r3, r7, r0
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	197a      	adds	r2, r7, r5
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	4914      	ldr	r1, [pc, #80]	@ (8006bb4 <UARTEx_SetNbDataToProcess+0xb4>)
 8006b64:	5c8a      	ldrb	r2, [r1, r2]
 8006b66:	435a      	muls	r2, r3
 8006b68:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b6a:	197b      	adds	r3, r7, r5
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	4a12      	ldr	r2, [pc, #72]	@ (8006bb8 <UARTEx_SetNbDataToProcess+0xb8>)
 8006b70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b72:	0019      	movs	r1, r3
 8006b74:	f7f9 fb58 	bl	8000228 <__divsi3>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	b299      	uxth	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	226a      	movs	r2, #106	@ 0x6a
 8006b80:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b82:	19bb      	adds	r3, r7, r6
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	193a      	adds	r2, r7, r4
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	490a      	ldr	r1, [pc, #40]	@ (8006bb4 <UARTEx_SetNbDataToProcess+0xb4>)
 8006b8c:	5c8a      	ldrb	r2, [r1, r2]
 8006b8e:	435a      	muls	r2, r3
 8006b90:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b92:	193b      	adds	r3, r7, r4
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	4a08      	ldr	r2, [pc, #32]	@ (8006bb8 <UARTEx_SetNbDataToProcess+0xb8>)
 8006b98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b9a:	0019      	movs	r1, r3
 8006b9c:	f7f9 fb44 	bl	8000228 <__divsi3>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	b299      	uxth	r1, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2268      	movs	r2, #104	@ 0x68
 8006ba8:	5299      	strh	r1, [r3, r2]
}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b005      	add	sp, #20
 8006bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	080095a8 	.word	0x080095a8
 8006bb8:	080095b0 	.word	0x080095b0

08006bbc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006bc2:	1d3b      	adds	r3, r7, #4
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	001a      	movs	r2, r3
 8006bca:	2100      	movs	r1, #0
 8006bcc:	f001 fd28 	bl	8008620 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8006c8c <MX_ADC1_Init+0xd0>)
 8006bd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006bd8:	2280      	movs	r2, #128	@ 0x80
 8006bda:	05d2      	lsls	r2, r2, #23
 8006bdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006bde:	4b2a      	ldr	r3, [pc, #168]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006be4:	4b28      	ldr	r3, [pc, #160]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006bea:	4b27      	ldr	r3, [pc, #156]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006bf0:	4b25      	ldr	r3, [pc, #148]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006bf6:	4b24      	ldr	r3, [pc, #144]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8006bfc:	4b22      	ldr	r3, [pc, #136]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006c02:	4b21      	ldr	r3, [pc, #132]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8006c08:	4b1f      	ldr	r3, [pc, #124]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c10:	2220      	movs	r2, #32
 8006c12:	2100      	movs	r1, #0
 8006c14:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c16:	4b1c      	ldr	r3, [pc, #112]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006c22:	4b19      	ldr	r3, [pc, #100]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c24:	222c      	movs	r2, #44	@ 0x2c
 8006c26:	2100      	movs	r1, #0
 8006c28:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006c2a:	4b17      	ldr	r3, [pc, #92]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8006c30:	4b15      	ldr	r3, [pc, #84]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8006c36:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8006c3c:	4b12      	ldr	r3, [pc, #72]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c3e:	223c      	movs	r2, #60	@ 0x3c
 8006c40:	2100      	movs	r1, #0
 8006c42:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8006c44:	4b10      	ldr	r3, [pc, #64]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7fb fd6b 	bl	8002728 <HAL_ADC_Init>
 8006c52:	1e03      	subs	r3, r0, #0
 8006c54:	d001      	beq.n	8006c5a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8006c56:	f001 fa2f 	bl	80080b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006c5a:	1d3b      	adds	r3, r7, #4
 8006c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c90 <MX_ADC1_Init+0xd4>)
 8006c5e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006c60:	1d3b      	adds	r3, r7, #4
 8006c62:	2200      	movs	r2, #0
 8006c64:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	2200      	movs	r2, #0
 8006c6a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006c6c:	1d3a      	adds	r2, r7, #4
 8006c6e:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <MX_ADC1_Init+0xcc>)
 8006c70:	0011      	movs	r1, r2
 8006c72:	0018      	movs	r0, r3
 8006c74:	f7fb ff00 	bl	8002a78 <HAL_ADC_ConfigChannel>
 8006c78:	1e03      	subs	r3, r0, #0
 8006c7a:	d001      	beq.n	8006c80 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8006c7c:	f001 fa1c 	bl	80080b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006c80:	46c0      	nop			@ (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b004      	add	sp, #16
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000090 	.word	0x20000090
 8006c8c:	40012400 	.word	0x40012400
 8006c90:	20000100 	.word	0x20000100

08006c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b08b      	sub	sp, #44	@ 0x2c
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c9c:	2414      	movs	r4, #20
 8006c9e:	193b      	adds	r3, r7, r4
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	2314      	movs	r3, #20
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	f001 fcba 	bl	8008620 <memset>
  if(adcHandle->Instance==ADC1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a17      	ldr	r2, [pc, #92]	@ (8006d10 <HAL_ADC_MspInit+0x7c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d128      	bne.n	8006d08 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006cb6:	4b17      	ldr	r3, [pc, #92]	@ (8006d14 <HAL_ADC_MspInit+0x80>)
 8006cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cba:	4b16      	ldr	r3, [pc, #88]	@ (8006d14 <HAL_ADC_MspInit+0x80>)
 8006cbc:	2180      	movs	r1, #128	@ 0x80
 8006cbe:	0349      	lsls	r1, r1, #13
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8006cc4:	4b13      	ldr	r3, [pc, #76]	@ (8006d14 <HAL_ADC_MspInit+0x80>)
 8006cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cc8:	2380      	movs	r3, #128	@ 0x80
 8006cca:	035b      	lsls	r3, r3, #13
 8006ccc:	4013      	ands	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cd2:	4b10      	ldr	r3, [pc, #64]	@ (8006d14 <HAL_ADC_MspInit+0x80>)
 8006cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d14 <HAL_ADC_MspInit+0x80>)
 8006cd8:	2102      	movs	r1, #2
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8006cde:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <HAL_ADC_MspInit+0x80>)
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BAT__Pin;
 8006cea:	193b      	adds	r3, r7, r4
 8006cec:	2201      	movs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cf0:	193b      	adds	r3, r7, r4
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf6:	193b      	adds	r3, r7, r4
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT__GPIO_Port, &GPIO_InitStruct);
 8006cfc:	193b      	adds	r3, r7, r4
 8006cfe:	4a06      	ldr	r2, [pc, #24]	@ (8006d18 <HAL_ADC_MspInit+0x84>)
 8006d00:	0019      	movs	r1, r3
 8006d02:	0010      	movs	r0, r2
 8006d04:	f7fc fc70 	bl	80035e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006d08:	46c0      	nop			@ (mov r8, r8)
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b00b      	add	sp, #44	@ 0x2c
 8006d0e:	bd90      	pop	{r4, r7, pc}
 8006d10:	40012400 	.word	0x40012400
 8006d14:	40021000 	.word	0x40021000
 8006d18:	50000400 	.word	0x50000400

08006d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006d22:	4b0c      	ldr	r3, [pc, #48]	@ (8006d54 <MX_DMA_Init+0x38>)
 8006d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d26:	4b0b      	ldr	r3, [pc, #44]	@ (8006d54 <MX_DMA_Init+0x38>)
 8006d28:	2101      	movs	r1, #1
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d2e:	4b09      	ldr	r3, [pc, #36]	@ (8006d54 <MX_DMA_Init+0x38>)
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	2201      	movs	r2, #1
 8006d34:	4013      	ands	r3, r2
 8006d36:	607b      	str	r3, [r7, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	2009      	movs	r0, #9
 8006d40:	f7fc f940 	bl	8002fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006d44:	2009      	movs	r0, #9
 8006d46:	f7fc f952 	bl	8002fee <HAL_NVIC_EnableIRQ>

}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b002      	add	sp, #8
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	46c0      	nop			@ (mov r8, r8)
 8006d54:	40021000 	.word	0x40021000

08006d58 <uartSend>:
//---------------------------IMPLICIT FUNCTIONS---------------------------
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
espat_state_t uartSend(espat_uartInstance_t *uart, char *data, uint32_t size) {
 8006d58:	b5b0      	push	{r4, r5, r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef state = HAL_OK;
 8006d64:	2117      	movs	r1, #23
 8006d66:	187b      	adds	r3, r7, r1
 8006d68:	2200      	movs	r2, #0
 8006d6a:	701a      	strb	r2, [r3, #0]

#if DMA_MODE
		state = HAL_UART_Transmit_DMA(uart->uart, (uint8_t*) data, size);
#else
	state = HAL_UART_Transmit(uart->uart, (uint8_t*) data,
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	000d      	movs	r5, r1
 8006d7a:	187c      	adds	r4, r7, r1
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	f7fe fccf 	bl	8005720 <HAL_UART_Transmit>
 8006d82:	0003      	movs	r3, r0
 8006d84:	7023      	strb	r3, [r4, #0]
			size, uart->sendTimeout);
#endif

	if (state == HAL_OK)
 8006d86:	197b      	adds	r3, r7, r5
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <uartSend+0x3a>
		return ESPAT_STATE_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e00e      	b.n	8006db0 <uartSend+0x58>
	else if (state == HAL_TIMEOUT)
 8006d92:	2317      	movs	r3, #23
 8006d94:	18fb      	adds	r3, r7, r3
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d101      	bne.n	8006da0 <uartSend+0x48>
		return ESPAT_STATE_TIMEOUT;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e007      	b.n	8006db0 <uartSend+0x58>
	else if(state == HAL_BUSY)
 8006da0:	2317      	movs	r3, #23
 8006da2:	18fb      	adds	r3, r7, r3
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d101      	bne.n	8006dae <uartSend+0x56>
		return ESPAT_STATE_BUSY;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e000      	b.n	8006db0 <uartSend+0x58>
	else
		return ESPAT_STATE_ERR;
 8006dae:	2301      	movs	r3, #1
}
 8006db0:	0018      	movs	r0, r3
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b006      	add	sp, #24
 8006db6:	bdb0      	pop	{r4, r5, r7, pc}

08006db8 <espAt_init>:
 * @param: timout for receive
 *
 * @retval: always ESPATHID_OK
 */
espat_state_t espAt_init(espat_radio_t *radio, UART_HandleTypeDef *uart,
		uint32_t txTimeout, uint32_t rxTimeout) { //port
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]

	radio->espUart.uart = uart;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	601a      	str	r2, [r3, #0]
	radio->espUart.sendTimeout = txTimeout;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	605a      	str	r2, [r3, #4]
	radio->espUart.receiveTimeout = rxTimeout;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	609a      	str	r2, [r3, #8]
	return ESPAT_STATE_OK;
 8006dd8:	2300      	movs	r3, #0

}
 8006dda:	0018      	movs	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	b004      	add	sp, #16
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <espAt_sendCommand>:
 *
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendCommand(espat_radio_t *radio, char *command) {
 8006de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de6:	46c6      	mov	lr, r8
 8006de8:	b500      	push	{lr}
 8006dea:	b08c      	sub	sp, #48	@ 0x30
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	61f8      	str	r0, [r7, #28]
 8006df0:	61b9      	str	r1, [r7, #24]
 8006df2:	466b      	mov	r3, sp
 8006df4:	4698      	mov	r8, r3
	//check if command and string are valid
	if (command == NULL)
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <espAt_sendCommand+0x1c>
		return ESPAT_STATE_ERR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e093      	b.n	8006f28 <espAt_sendCommand+0x144>

	uint16_t prefixLength = strlen(AT_PREFIX);
 8006e00:	2316      	movs	r3, #22
 8006e02:	2618      	movs	r6, #24
 8006e04:	199b      	adds	r3, r3, r6
 8006e06:	19db      	adds	r3, r3, r7
 8006e08:	2203      	movs	r2, #3
 8006e0a:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f7f9 f978 	bl	8000104 <strlen>
 8006e14:	0002      	movs	r2, r0
 8006e16:	2114      	movs	r1, #20
 8006e18:	0030      	movs	r0, r6
 8006e1a:	180b      	adds	r3, r1, r0
 8006e1c:	19db      	adds	r3, r3, r7
 8006e1e:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8006e20:	2212      	movs	r2, #18
 8006e22:	0016      	movs	r6, r2
 8006e24:	1813      	adds	r3, r2, r0
 8006e26:	19db      	adds	r3, r3, r7
 8006e28:	2202      	movs	r2, #2
 8006e2a:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + endingLength;
 8006e2c:	2316      	movs	r3, #22
 8006e2e:	181b      	adds	r3, r3, r0
 8006e30:	19da      	adds	r2, r3, r7
 8006e32:	1809      	adds	r1, r1, r0
 8006e34:	19cb      	adds	r3, r1, r7
 8006e36:	8812      	ldrh	r2, [r2, #0]
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	18d3      	adds	r3, r2, r3
 8006e3c:	b299      	uxth	r1, r3
 8006e3e:	2010      	movs	r0, #16
 8006e40:	2318      	movs	r3, #24
 8006e42:	18c2      	adds	r2, r0, r3
 8006e44:	19d3      	adds	r3, r2, r7
 8006e46:	0032      	movs	r2, r6
 8006e48:	2618      	movs	r6, #24
 8006e4a:	1992      	adds	r2, r2, r6
 8006e4c:	19d2      	adds	r2, r2, r7
 8006e4e:	8812      	ldrh	r2, [r2, #0]
 8006e50:	188a      	adds	r2, r1, r2
 8006e52:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 8006e54:	1983      	adds	r3, r0, r6
 8006e56:	19db      	adds	r3, r3, r7
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	001a      	movs	r2, r3
 8006e5c:	3a01      	subs	r2, #1
 8006e5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	60fa      	str	r2, [r7, #12]
 8006e66:	68b8      	ldr	r0, [r7, #8]
 8006e68:	68f9      	ldr	r1, [r7, #12]
 8006e6a:	0006      	movs	r6, r0
 8006e6c:	0f72      	lsrs	r2, r6, #29
 8006e6e:	000e      	movs	r6, r1
 8006e70:	00f6      	lsls	r6, r6, #3
 8006e72:	617e      	str	r6, [r7, #20]
 8006e74:	697e      	ldr	r6, [r7, #20]
 8006e76:	4316      	orrs	r6, r2
 8006e78:	617e      	str	r6, [r7, #20]
 8006e7a:	0006      	movs	r6, r0
 8006e7c:	00f6      	lsls	r6, r6, #3
 8006e7e:	613e      	str	r6, [r7, #16]
 8006e80:	603b      	str	r3, [r7, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	607a      	str	r2, [r7, #4]
 8006e86:	6838      	ldr	r0, [r7, #0]
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	0006      	movs	r6, r0
 8006e8c:	0f72      	lsrs	r2, r6, #29
 8006e8e:	000e      	movs	r6, r1
 8006e90:	00f5      	lsls	r5, r6, #3
 8006e92:	4315      	orrs	r5, r2
 8006e94:	0006      	movs	r6, r0
 8006e96:	00f4      	lsls	r4, r6, #3
 8006e98:	3307      	adds	r3, #7
 8006e9a:	08db      	lsrs	r3, r3, #3
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	466e      	mov	r6, sp
 8006ea0:	1af6      	subs	r6, r6, r3
 8006ea2:	46b5      	mov	sp, r6
 8006ea4:	466b      	mov	r3, sp
 8006ea6:	3300      	adds	r3, #0
 8006ea8:	623b      	str	r3, [r7, #32]
	memset(buffer, ' ', bufferSize);
 8006eaa:	2010      	movs	r0, #16
 8006eac:	0006      	movs	r6, r0
 8006eae:	2518      	movs	r5, #24
 8006eb0:	1943      	adds	r3, r0, r5
 8006eb2:	19db      	adds	r3, r3, r7
 8006eb4:	881a      	ldrh	r2, [r3, #0]
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	2120      	movs	r1, #32
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f001 fbb0 	bl	8008620 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8006ec0:	6a38      	ldr	r0, [r7, #32]
 8006ec2:	2416      	movs	r4, #22
 8006ec4:	1963      	adds	r3, r4, r5
 8006ec6:	19db      	adds	r3, r3, r7
 8006ec8:	881a      	ldrh	r2, [r3, #0]
 8006eca:	4b1b      	ldr	r3, [pc, #108]	@ (8006f38 <espAt_sendCommand+0x154>)
 8006ecc:	0019      	movs	r1, r3
 8006ece:	f001 fbd9 	bl	8008684 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8006ed2:	0029      	movs	r1, r5
 8006ed4:	1863      	adds	r3, r4, r1
 8006ed6:	19db      	adds	r3, r3, r7
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	6a3a      	ldr	r2, [r7, #32]
 8006edc:	18d0      	adds	r0, r2, r3
 8006ede:	2514      	movs	r5, #20
 8006ee0:	186b      	adds	r3, r5, r1
 8006ee2:	19db      	adds	r3, r3, r7
 8006ee4:	881a      	ldrh	r2, [r3, #0]
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	0019      	movs	r1, r3
 8006eea:	f001 fbcb 	bl	8008684 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ENDING, endingLength);
 8006eee:	2118      	movs	r1, #24
 8006ef0:	1863      	adds	r3, r4, r1
 8006ef2:	19db      	adds	r3, r3, r7
 8006ef4:	881a      	ldrh	r2, [r3, #0]
 8006ef6:	000c      	movs	r4, r1
 8006ef8:	192b      	adds	r3, r5, r4
 8006efa:	19db      	adds	r3, r3, r7
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	18d3      	adds	r3, r2, r3
 8006f00:	6a3a      	ldr	r2, [r7, #32]
 8006f02:	18d0      	adds	r0, r2, r3
 8006f04:	2212      	movs	r2, #18
 8006f06:	1913      	adds	r3, r2, r4
 8006f08:	19db      	adds	r3, r3, r7
 8006f0a:	881a      	ldrh	r2, [r3, #0]
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f3c <espAt_sendCommand+0x158>)
 8006f0e:	0019      	movs	r1, r3
 8006f10:	f001 fbb8 	bl	8008684 <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 8006f14:	69f8      	ldr	r0, [r7, #28]
 8006f16:	0033      	movs	r3, r6
 8006f18:	191b      	adds	r3, r3, r4
 8006f1a:	19db      	adds	r3, r3, r7
 8006f1c:	881a      	ldrh	r2, [r3, #0]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	0019      	movs	r1, r3
 8006f22:	f7ff ff19 	bl	8006d58 <uartSend>
 8006f26:	0003      	movs	r3, r0
 8006f28:	46c5      	mov	sp, r8
}
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b00c      	add	sp, #48	@ 0x30
 8006f30:	bc80      	pop	{r7}
 8006f32:	46b8      	mov	r8, r7
 8006f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f36:	46c0      	nop			@ (mov r8, r8)
 8006f38:	08009500 	.word	0x08009500
 8006f3c:	08009504 	.word	0x08009504

08006f40 <espAt_sendParams>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendParams(espat_radio_t *radio, char *command,
		uint16_t paramCount, ...) {
 8006f40:	b40c      	push	{r2, r3}
 8006f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f44:	46c6      	mov	lr, r8
 8006f46:	b500      	push	{lr}
 8006f48:	b0a2      	sub	sp, #136	@ 0x88
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8006f4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f50:	466b      	mov	r3, sp
 8006f52:	4698      	mov	r8, r3

	//check if command are valid
	if (command == NULL)
 8006f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <espAt_sendParams+0x1e>
		return ESPAT_STATE_ERR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e1b7      	b.n	80072ce <espAt_sendParams+0x38e>

	va_list ap;
	va_start(ap, paramCount);
 8006f5e:	236c      	movs	r3, #108	@ 0x6c
 8006f60:	2238      	movs	r2, #56	@ 0x38
 8006f62:	189b      	adds	r3, r3, r2
 8006f64:	19db      	adds	r3, r3, r7
 8006f66:	663b      	str	r3, [r7, #96]	@ 0x60

	//make parameters array
	int32_t parameters[paramCount];
 8006f68:	2368      	movs	r3, #104	@ 0x68
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	19db      	adds	r3, r3, r7
 8006f6e:	881a      	ldrh	r2, [r3, #0]
 8006f70:	0013      	movs	r3, r2
 8006f72:	3b01      	subs	r3, #1
 8006f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f76:	61ba      	str	r2, [r7, #24]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
 8006f7c:	69b8      	ldr	r0, [r7, #24]
 8006f7e:	69f9      	ldr	r1, [r7, #28]
 8006f80:	0003      	movs	r3, r0
 8006f82:	0edb      	lsrs	r3, r3, #27
 8006f84:	000e      	movs	r6, r1
 8006f86:	0175      	lsls	r5, r6, #5
 8006f88:	431d      	orrs	r5, r3
 8006f8a:	0003      	movs	r3, r0
 8006f8c:	015c      	lsls	r4, r3, #5
 8006f8e:	613a      	str	r2, [r7, #16]
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	6938      	ldr	r0, [r7, #16]
 8006f96:	6979      	ldr	r1, [r7, #20]
 8006f98:	0003      	movs	r3, r0
 8006f9a:	0edb      	lsrs	r3, r3, #27
 8006f9c:	000c      	movs	r4, r1
 8006f9e:	0164      	lsls	r4, r4, #5
 8006fa0:	637c      	str	r4, [r7, #52]	@ 0x34
 8006fa2:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8006fa4:	431c      	orrs	r4, r3
 8006fa6:	637c      	str	r4, [r7, #52]	@ 0x34
 8006fa8:	0003      	movs	r3, r0
 8006faa:	015b      	lsls	r3, r3, #5
 8006fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fae:	0013      	movs	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	3307      	adds	r3, #7
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	466a      	mov	r2, sp
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	469d      	mov	sp, r3
 8006fbe:	466b      	mov	r3, sp
 8006fc0:	3303      	adds	r3, #3
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	67bb      	str	r3, [r7, #120]	@ 0x78

	//fill parameters array
	for (uint16_t i = 0; i < paramCount; i++) {
 8006fc8:	234e      	movs	r3, #78	@ 0x4e
 8006fca:	2238      	movs	r2, #56	@ 0x38
 8006fcc:	189b      	adds	r3, r3, r2
 8006fce:	19db      	adds	r3, r3, r7
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	e012      	b.n	8006ffc <espAt_sendParams+0xbc>
		parameters[i] = va_arg(ap, int32_t);
 8006fd6:	204e      	movs	r0, #78	@ 0x4e
 8006fd8:	2438      	movs	r4, #56	@ 0x38
 8006fda:	1903      	adds	r3, r0, r4
 8006fdc:	19db      	adds	r3, r3, r7
 8006fde:	881a      	ldrh	r2, [r3, #0]
 8006fe0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fe2:	1d19      	adds	r1, r3, #4
 8006fe4:	6639      	str	r1, [r7, #96]	@ 0x60
 8006fe6:	6819      	ldr	r1, [r3, #0]
 8006fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fea:	0092      	lsls	r2, r2, #2
 8006fec:	50d1      	str	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 8006fee:	1903      	adds	r3, r0, r4
 8006ff0:	19db      	adds	r3, r3, r7
 8006ff2:	881a      	ldrh	r2, [r3, #0]
 8006ff4:	1903      	adds	r3, r0, r4
 8006ff6:	19db      	adds	r3, r3, r7
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	801a      	strh	r2, [r3, #0]
 8006ffc:	234e      	movs	r3, #78	@ 0x4e
 8006ffe:	2138      	movs	r1, #56	@ 0x38
 8007000:	185b      	adds	r3, r3, r1
 8007002:	19da      	adds	r2, r3, r7
 8007004:	2368      	movs	r3, #104	@ 0x68
 8007006:	185b      	adds	r3, r3, r1
 8007008:	19db      	adds	r3, r3, r7
 800700a:	8812      	ldrh	r2, [r2, #0]
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d3e1      	bcc.n	8006fd6 <espAt_sendParams+0x96>
	}

	//make arguments list string
	uint16_t characterCounter = 0;
 8007012:	234c      	movs	r3, #76	@ 0x4c
 8007014:	185b      	adds	r3, r3, r1
 8007016:	19db      	adds	r3, r3, r7
 8007018:	2200      	movs	r2, #0
 800701a:	801a      	strh	r2, [r3, #0]
	char argumentsBuffer[AT_BUFFER_SIZE];
	memset(argumentsBuffer, '\0', AT_BUFFER_SIZE);
 800701c:	2308      	movs	r3, #8
 800701e:	000c      	movs	r4, r1
 8007020:	185b      	adds	r3, r3, r1
 8007022:	19db      	adds	r3, r3, r7
 8007024:	221e      	movs	r2, #30
 8007026:	2100      	movs	r1, #0
 8007028:	0018      	movs	r0, r3
 800702a:	f001 faf9 	bl	8008620 <memset>

	for (uint16_t i = 0; i < paramCount; i++) {
 800702e:	234a      	movs	r3, #74	@ 0x4a
 8007030:	191b      	adds	r3, r3, r4
 8007032:	19db      	adds	r3, r3, r7
 8007034:	2200      	movs	r2, #0
 8007036:	801a      	strh	r2, [r3, #0]
 8007038:	e048      	b.n	80070cc <espAt_sendParams+0x18c>
		itoa(parameters[i], &argumentsBuffer[characterCounter], 10);
 800703a:	234a      	movs	r3, #74	@ 0x4a
 800703c:	001e      	movs	r6, r3
 800703e:	2138      	movs	r1, #56	@ 0x38
 8007040:	185b      	adds	r3, r3, r1
 8007042:	19db      	adds	r3, r3, r7
 8007044:	881a      	ldrh	r2, [r3, #0]
 8007046:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007048:	0092      	lsls	r2, r2, #2
 800704a:	58d0      	ldr	r0, [r2, r3]
 800704c:	244c      	movs	r4, #76	@ 0x4c
 800704e:	1863      	adds	r3, r4, r1
 8007050:	19db      	adds	r3, r3, r7
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	2508      	movs	r5, #8
 8007056:	186a      	adds	r2, r5, r1
 8007058:	19d2      	adds	r2, r2, r7
 800705a:	18d3      	adds	r3, r2, r3
 800705c:	220a      	movs	r2, #10
 800705e:	0019      	movs	r1, r3
 8007060:	f001 faa5 	bl	80085ae <itoa>
		characterCounter += strlen(&argumentsBuffer[characterCounter]) + 1;
 8007064:	2038      	movs	r0, #56	@ 0x38
 8007066:	1823      	adds	r3, r4, r0
 8007068:	19db      	adds	r3, r3, r7
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	182a      	adds	r2, r5, r0
 800706e:	19d2      	adds	r2, r2, r7
 8007070:	18d3      	adds	r3, r2, r3
 8007072:	0018      	movs	r0, r3
 8007074:	f7f9 f846 	bl	8000104 <strlen>
 8007078:	0003      	movs	r3, r0
 800707a:	b29a      	uxth	r2, r3
 800707c:	0021      	movs	r1, r4
 800707e:	2038      	movs	r0, #56	@ 0x38
 8007080:	180b      	adds	r3, r1, r0
 8007082:	19db      	adds	r3, r3, r7
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	18d3      	adds	r3, r2, r3
 8007088:	b29a      	uxth	r2, r3
 800708a:	180b      	adds	r3, r1, r0
 800708c:	19db      	adds	r3, r3, r7
 800708e:	3201      	adds	r2, #1
 8007090:	801a      	strh	r2, [r3, #0]
		if (i < paramCount - 1)
 8007092:	0033      	movs	r3, r6
 8007094:	181b      	adds	r3, r3, r0
 8007096:	19db      	adds	r3, r3, r7
 8007098:	881a      	ldrh	r2, [r3, #0]
 800709a:	2368      	movs	r3, #104	@ 0x68
 800709c:	181b      	adds	r3, r3, r0
 800709e:	19db      	adds	r3, r3, r7
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	429a      	cmp	r2, r3
 80070a6:	da08      	bge.n	80070ba <espAt_sendParams+0x17a>
			argumentsBuffer[characterCounter - 1] = ','; //add comma only if NOT last parameter
 80070a8:	0002      	movs	r2, r0
 80070aa:	188b      	adds	r3, r1, r2
 80070ac:	19db      	adds	r3, r3, r7
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	18aa      	adds	r2, r5, r2
 80070b4:	19d2      	adds	r2, r2, r7
 80070b6:	212c      	movs	r1, #44	@ 0x2c
 80070b8:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 80070ba:	214a      	movs	r1, #74	@ 0x4a
 80070bc:	2038      	movs	r0, #56	@ 0x38
 80070be:	180b      	adds	r3, r1, r0
 80070c0:	19db      	adds	r3, r3, r7
 80070c2:	881a      	ldrh	r2, [r3, #0]
 80070c4:	180b      	adds	r3, r1, r0
 80070c6:	19db      	adds	r3, r3, r7
 80070c8:	3201      	adds	r2, #1
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	234a      	movs	r3, #74	@ 0x4a
 80070ce:	2638      	movs	r6, #56	@ 0x38
 80070d0:	199b      	adds	r3, r3, r6
 80070d2:	19da      	adds	r2, r3, r7
 80070d4:	2368      	movs	r3, #104	@ 0x68
 80070d6:	199b      	adds	r3, r3, r6
 80070d8:	19db      	adds	r3, r3, r7
 80070da:	8812      	ldrh	r2, [r2, #0]
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d3ab      	bcc.n	800703a <espAt_sendParams+0xfa>
	}

	va_end(ap);

	//count buffer length
	uint16_t prefixLength = strlen(AT_PREFIX);
 80070e2:	243e      	movs	r4, #62	@ 0x3e
 80070e4:	19a3      	adds	r3, r4, r6
 80070e6:	19db      	adds	r3, r3, r7
 80070e8:	2203      	movs	r2, #3
 80070ea:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 80070ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ee:	0018      	movs	r0, r3
 80070f0:	f7f9 f808 	bl	8000104 <strlen>
 80070f4:	0002      	movs	r2, r0
 80070f6:	253c      	movs	r5, #60	@ 0x3c
 80070f8:	19ab      	adds	r3, r5, r6
 80070fa:	19db      	adds	r3, r3, r7
 80070fc:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 80070fe:	213a      	movs	r1, #58	@ 0x3a
 8007100:	198b      	adds	r3, r1, r6
 8007102:	19db      	adds	r3, r3, r7
 8007104:	2201      	movs	r2, #1
 8007106:	801a      	strh	r2, [r3, #0]
	uint16_t parametersLength = --characterCounter;
 8007108:	224c      	movs	r2, #76	@ 0x4c
 800710a:	0030      	movs	r0, r6
 800710c:	1993      	adds	r3, r2, r6
 800710e:	19db      	adds	r3, r3, r7
 8007110:	0016      	movs	r6, r2
 8007112:	1812      	adds	r2, r2, r0
 8007114:	19d2      	adds	r2, r2, r7
 8007116:	8812      	ldrh	r2, [r2, #0]
 8007118:	3a01      	subs	r2, #1
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	2038      	movs	r0, #56	@ 0x38
 800711e:	2338      	movs	r3, #56	@ 0x38
 8007120:	18c2      	adds	r2, r0, r3
 8007122:	19d3      	adds	r3, r2, r7
 8007124:	0032      	movs	r2, r6
 8007126:	2638      	movs	r6, #56	@ 0x38
 8007128:	1992      	adds	r2, r2, r6
 800712a:	19d2      	adds	r2, r2, r7
 800712c:	8812      	ldrh	r2, [r2, #0]
 800712e:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8007130:	2336      	movs	r3, #54	@ 0x36
 8007132:	001e      	movs	r6, r3
 8007134:	2238      	movs	r2, #56	@ 0x38
 8007136:	189a      	adds	r2, r3, r2
 8007138:	19d3      	adds	r3, r2, r7
 800713a:	2202      	movs	r2, #2
 800713c:	801a      	strh	r2, [r3, #0]

	//create master buffer and clear it
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 800713e:	2338      	movs	r3, #56	@ 0x38
 8007140:	18e2      	adds	r2, r4, r3
 8007142:	19d2      	adds	r2, r2, r7
 8007144:	18eb      	adds	r3, r5, r3
 8007146:	19db      	adds	r3, r3, r7
 8007148:	8812      	ldrh	r2, [r2, #0]
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	18d3      	adds	r3, r2, r3
 800714e:	b29a      	uxth	r2, r3
 8007150:	2338      	movs	r3, #56	@ 0x38
 8007152:	18c9      	adds	r1, r1, r3
 8007154:	19cb      	adds	r3, r1, r7
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	18d3      	adds	r3, r2, r3
 800715a:	b29a      	uxth	r2, r3
			+ parametersLength + endingLength;
 800715c:	2338      	movs	r3, #56	@ 0x38
 800715e:	18c1      	adds	r1, r0, r3
 8007160:	19cb      	adds	r3, r1, r7
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	18d3      	adds	r3, r2, r3
 8007166:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8007168:	2234      	movs	r2, #52	@ 0x34
 800716a:	0010      	movs	r0, r2
 800716c:	2338      	movs	r3, #56	@ 0x38
 800716e:	18d2      	adds	r2, r2, r3
 8007170:	19d3      	adds	r3, r2, r7
 8007172:	0032      	movs	r2, r6
 8007174:	2638      	movs	r6, #56	@ 0x38
 8007176:	1992      	adds	r2, r2, r6
 8007178:	19d2      	adds	r2, r2, r7
 800717a:	8812      	ldrh	r2, [r2, #0]
 800717c:	188a      	adds	r2, r1, r2
 800717e:	801a      	strh	r2, [r3, #0]
	char buffer[bufferSize];
 8007180:	0002      	movs	r2, r0
 8007182:	1993      	adds	r3, r2, r6
 8007184:	19db      	adds	r3, r3, r7
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	001a      	movs	r2, r3
 800718a:	3a01      	subs	r2, #1
 800718c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800718e:	60bb      	str	r3, [r7, #8]
 8007190:	2200      	movs	r2, #0
 8007192:	60fa      	str	r2, [r7, #12]
 8007194:	68b8      	ldr	r0, [r7, #8]
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	0006      	movs	r6, r0
 800719a:	0f72      	lsrs	r2, r6, #29
 800719c:	000e      	movs	r6, r1
 800719e:	00f6      	lsls	r6, r6, #3
 80071a0:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80071a2:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 80071a4:	4316      	orrs	r6, r2
 80071a6:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80071a8:	0006      	movs	r6, r0
 80071aa:	00f6      	lsls	r6, r6, #3
 80071ac:	62be      	str	r6, [r7, #40]	@ 0x28
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	2200      	movs	r2, #0
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	6838      	ldr	r0, [r7, #0]
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	0006      	movs	r6, r0
 80071ba:	0f72      	lsrs	r2, r6, #29
 80071bc:	000e      	movs	r6, r1
 80071be:	00f6      	lsls	r6, r6, #3
 80071c0:	627e      	str	r6, [r7, #36]	@ 0x24
 80071c2:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 80071c4:	4316      	orrs	r6, r2
 80071c6:	627e      	str	r6, [r7, #36]	@ 0x24
 80071c8:	0006      	movs	r6, r0
 80071ca:	00f6      	lsls	r6, r6, #3
 80071cc:	623e      	str	r6, [r7, #32]
 80071ce:	3307      	adds	r3, #7
 80071d0:	08db      	lsrs	r3, r3, #3
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	466e      	mov	r6, sp
 80071d6:	1af6      	subs	r6, r6, r3
 80071d8:	46b5      	mov	sp, r6
 80071da:	466b      	mov	r3, sp
 80071dc:	3300      	adds	r3, #0
 80071de:	667b      	str	r3, [r7, #100]	@ 0x64
	memset(buffer, ' ', bufferSize);
 80071e0:	2234      	movs	r2, #52	@ 0x34
 80071e2:	2638      	movs	r6, #56	@ 0x38
 80071e4:	1993      	adds	r3, r2, r6
 80071e6:	19db      	adds	r3, r3, r7
 80071e8:	881a      	ldrh	r2, [r3, #0]
 80071ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ec:	2120      	movs	r1, #32
 80071ee:	0018      	movs	r0, r3
 80071f0:	f001 fa16 	bl	8008620 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 80071f4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80071f6:	19a3      	adds	r3, r4, r6
 80071f8:	19db      	adds	r3, r3, r7
 80071fa:	881a      	ldrh	r2, [r3, #0]
 80071fc:	4b39      	ldr	r3, [pc, #228]	@ (80072e4 <espAt_sendParams+0x3a4>)
 80071fe:	0019      	movs	r1, r3
 8007200:	f001 fa40 	bl	8008684 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8007204:	0031      	movs	r1, r6
 8007206:	19a3      	adds	r3, r4, r6
 8007208:	19db      	adds	r3, r3, r7
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800720e:	18d0      	adds	r0, r2, r3
 8007210:	000e      	movs	r6, r1
 8007212:	186b      	adds	r3, r5, r1
 8007214:	19db      	adds	r3, r3, r7
 8007216:	881a      	ldrh	r2, [r3, #0]
 8007218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721a:	0019      	movs	r1, r3
 800721c:	f001 fa32 	bl	8008684 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8007220:	0031      	movs	r1, r6
 8007222:	1863      	adds	r3, r4, r1
 8007224:	19db      	adds	r3, r3, r7
 8007226:	881a      	ldrh	r2, [r3, #0]
 8007228:	1868      	adds	r0, r5, r1
 800722a:	19c3      	adds	r3, r0, r7
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	18d3      	adds	r3, r2, r3
 8007230:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007232:	18d0      	adds	r0, r2, r3
 8007234:	213a      	movs	r1, #58	@ 0x3a
 8007236:	000e      	movs	r6, r1
 8007238:	2338      	movs	r3, #56	@ 0x38
 800723a:	18ca      	adds	r2, r1, r3
 800723c:	19d3      	adds	r3, r2, r7
 800723e:	881a      	ldrh	r2, [r3, #0]
 8007240:	4b29      	ldr	r3, [pc, #164]	@ (80072e8 <espAt_sendParams+0x3a8>)
 8007242:	0019      	movs	r1, r3
 8007244:	f001 fa1e 	bl	8008684 <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8007248:	2038      	movs	r0, #56	@ 0x38
 800724a:	1823      	adds	r3, r4, r0
 800724c:	19db      	adds	r3, r3, r7
 800724e:	881a      	ldrh	r2, [r3, #0]
 8007250:	182b      	adds	r3, r5, r0
 8007252:	19db      	adds	r3, r3, r7
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	18d2      	adds	r2, r2, r3
 8007258:	0031      	movs	r1, r6
 800725a:	0006      	movs	r6, r0
 800725c:	180b      	adds	r3, r1, r0
 800725e:	19db      	adds	r3, r3, r7
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	18d3      	adds	r3, r2, r3
 8007264:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007266:	18d0      	adds	r0, r2, r3
 8007268:	2338      	movs	r3, #56	@ 0x38
 800726a:	0031      	movs	r1, r6
 800726c:	185b      	adds	r3, r3, r1
 800726e:	19db      	adds	r3, r3, r7
 8007270:	881a      	ldrh	r2, [r3, #0]
 8007272:	2608      	movs	r6, #8
 8007274:	1873      	adds	r3, r6, r1
 8007276:	19db      	adds	r3, r3, r7
 8007278:	0019      	movs	r1, r3
 800727a:	f001 fa03 	bl	8008684 <memcpy>
			argumentsBuffer, parametersLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 800727e:	2038      	movs	r0, #56	@ 0x38
 8007280:	1823      	adds	r3, r4, r0
 8007282:	19db      	adds	r3, r3, r7
 8007284:	881a      	ldrh	r2, [r3, #0]
 8007286:	182b      	adds	r3, r5, r0
 8007288:	19db      	adds	r3, r3, r7
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	18d2      	adds	r2, r2, r3
 800728e:	213a      	movs	r1, #58	@ 0x3a
 8007290:	180b      	adds	r3, r1, r0
 8007292:	19db      	adds	r3, r3, r7
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	18d2      	adds	r2, r2, r3
					+ parametersLength], AT_ENDING, endingLength);
 8007298:	2338      	movs	r3, #56	@ 0x38
 800729a:	0001      	movs	r1, r0
 800729c:	185b      	adds	r3, r3, r1
 800729e:	19db      	adds	r3, r3, r7
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 80072a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80072a6:	18d0      	adds	r0, r2, r3
	memcpy(
 80072a8:	2336      	movs	r3, #54	@ 0x36
 80072aa:	000c      	movs	r4, r1
 80072ac:	185b      	adds	r3, r3, r1
 80072ae:	19db      	adds	r3, r3, r7
 80072b0:	881a      	ldrh	r2, [r3, #0]
 80072b2:	4b0e      	ldr	r3, [pc, #56]	@ (80072ec <espAt_sendParams+0x3ac>)
 80072b4:	0019      	movs	r1, r3
 80072b6:	f001 f9e5 	bl	8008684 <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 80072ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80072bc:	2234      	movs	r2, #52	@ 0x34
 80072be:	1913      	adds	r3, r2, r4
 80072c0:	19db      	adds	r3, r3, r7
 80072c2:	881a      	ldrh	r2, [r3, #0]
 80072c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072c6:	0019      	movs	r1, r3
 80072c8:	f7ff fd46 	bl	8006d58 <uartSend>
 80072cc:	0003      	movs	r3, r0
 80072ce:	46c5      	mov	sp, r8

}
 80072d0:	0018      	movs	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b022      	add	sp, #136	@ 0x88
 80072d6:	bc80      	pop	{r7}
 80072d8:	46b8      	mov	r8, r7
 80072da:	bcf0      	pop	{r4, r5, r6, r7}
 80072dc:	bc08      	pop	{r3}
 80072de:	b002      	add	sp, #8
 80072e0:	4718      	bx	r3
 80072e2:	46c0      	nop			@ (mov r8, r8)
 80072e4:	08009500 	.word	0x08009500
 80072e8:	08009508 	.word	0x08009508
 80072ec:	08009504 	.word	0x08009504

080072f0 <espAt_sendString>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendString(espat_radio_t *radio, char *command,
		char *string) {
 80072f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f2:	46c6      	mov	lr, r8
 80072f4:	b500      	push	{lr}
 80072f6:	b090      	sub	sp, #64	@ 0x40
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6278      	str	r0, [r7, #36]	@ 0x24
 80072fc:	6239      	str	r1, [r7, #32]
 80072fe:	61fa      	str	r2, [r7, #28]
 8007300:	466b      	mov	r3, sp
 8007302:	4698      	mov	r8, r3

	//check if command and string are valid
	if (command == NULL || string == NULL)
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <espAt_sendString+0x20>
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <espAt_sendString+0x24>
		return ESPAT_STATE_ERR;
 8007310:	2301      	movs	r3, #1
 8007312:	e139      	b.n	8007588 <espAt_sendString+0x298>

	uint16_t prefixLength = strlen(AT_PREFIX);
 8007314:	2326      	movs	r3, #38	@ 0x26
 8007316:	2618      	movs	r6, #24
 8007318:	199b      	adds	r3, r3, r6
 800731a:	19db      	adds	r3, r3, r7
 800731c:	2203      	movs	r2, #3
 800731e:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	0018      	movs	r0, r3
 8007324:	f7f8 feee 	bl	8000104 <strlen>
 8007328:	0002      	movs	r2, r0
 800732a:	2124      	movs	r1, #36	@ 0x24
 800732c:	198b      	adds	r3, r1, r6
 800732e:	19db      	adds	r3, r3, r7
 8007330:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 8007332:	2222      	movs	r2, #34	@ 0x22
 8007334:	1993      	adds	r3, r2, r6
 8007336:	19db      	adds	r3, r3, r7
 8007338:	2201      	movs	r2, #1
 800733a:	801a      	strh	r2, [r3, #0]
	uint16_t quoteLength = strlen(AT_STRING_QUOTE_MARK);
 800733c:	2220      	movs	r2, #32
 800733e:	1993      	adds	r3, r2, r6
 8007340:	19db      	adds	r3, r3, r7
 8007342:	2201      	movs	r2, #1
 8007344:	801a      	strh	r2, [r3, #0]
	uint16_t stringLength = strlen(string);
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	0018      	movs	r0, r3
 800734a:	f7f8 fedb 	bl	8000104 <strlen>
 800734e:	0002      	movs	r2, r0
 8007350:	231e      	movs	r3, #30
 8007352:	0031      	movs	r1, r6
 8007354:	185b      	adds	r3, r3, r1
 8007356:	19db      	adds	r3, r3, r7
 8007358:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 800735a:	221c      	movs	r2, #28
 800735c:	0016      	movs	r6, r2
 800735e:	1853      	adds	r3, r2, r1
 8007360:	19db      	adds	r3, r3, r7
 8007362:	2202      	movs	r2, #2
 8007364:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8007366:	2326      	movs	r3, #38	@ 0x26
 8007368:	0008      	movs	r0, r1
 800736a:	185b      	adds	r3, r3, r1
 800736c:	19da      	adds	r2, r3, r7
 800736e:	2124      	movs	r1, #36	@ 0x24
 8007370:	180b      	adds	r3, r1, r0
 8007372:	19db      	adds	r3, r3, r7
 8007374:	8812      	ldrh	r2, [r2, #0]
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	18d3      	adds	r3, r2, r3
 800737a:	b29a      	uxth	r2, r3
 800737c:	2022      	movs	r0, #34	@ 0x22
 800737e:	2118      	movs	r1, #24
 8007380:	1843      	adds	r3, r0, r1
 8007382:	19db      	adds	r3, r3, r7
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	18d3      	adds	r3, r2, r3
 8007388:	b29a      	uxth	r2, r3
			+ (quoteLength * 2) + stringLength + endingLength;
 800738a:	2020      	movs	r0, #32
 800738c:	1840      	adds	r0, r0, r1
 800738e:	19c3      	adds	r3, r0, r7
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	18db      	adds	r3, r3, r3
 8007394:	b29b      	uxth	r3, r3
 8007396:	18d3      	adds	r3, r2, r3
 8007398:	b29a      	uxth	r2, r3
 800739a:	211e      	movs	r1, #30
 800739c:	2318      	movs	r3, #24
 800739e:	18c9      	adds	r1, r1, r3
 80073a0:	19cb      	adds	r3, r1, r7
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	18d3      	adds	r3, r2, r3
 80073a6:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 80073a8:	201a      	movs	r0, #26
 80073aa:	2318      	movs	r3, #24
 80073ac:	18c2      	adds	r2, r0, r3
 80073ae:	19d3      	adds	r3, r2, r7
 80073b0:	0032      	movs	r2, r6
 80073b2:	2618      	movs	r6, #24
 80073b4:	1992      	adds	r2, r2, r6
 80073b6:	19d2      	adds	r2, r2, r7
 80073b8:	8812      	ldrh	r2, [r2, #0]
 80073ba:	188a      	adds	r2, r1, r2
 80073bc:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 80073be:	1983      	adds	r3, r0, r6
 80073c0:	19db      	adds	r3, r3, r7
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	001a      	movs	r2, r3
 80073c6:	3a01      	subs	r2, #1
 80073c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ca:	60bb      	str	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	60fa      	str	r2, [r7, #12]
 80073d0:	68b8      	ldr	r0, [r7, #8]
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	0006      	movs	r6, r0
 80073d6:	0f72      	lsrs	r2, r6, #29
 80073d8:	000e      	movs	r6, r1
 80073da:	00f6      	lsls	r6, r6, #3
 80073dc:	617e      	str	r6, [r7, #20]
 80073de:	697e      	ldr	r6, [r7, #20]
 80073e0:	4316      	orrs	r6, r2
 80073e2:	617e      	str	r6, [r7, #20]
 80073e4:	0006      	movs	r6, r0
 80073e6:	00f6      	lsls	r6, r6, #3
 80073e8:	613e      	str	r6, [r7, #16]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	2200      	movs	r2, #0
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	6838      	ldr	r0, [r7, #0]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	0006      	movs	r6, r0
 80073f6:	0f72      	lsrs	r2, r6, #29
 80073f8:	000e      	movs	r6, r1
 80073fa:	00f5      	lsls	r5, r6, #3
 80073fc:	4315      	orrs	r5, r2
 80073fe:	0006      	movs	r6, r0
 8007400:	00f4      	lsls	r4, r6, #3
 8007402:	3307      	adds	r3, #7
 8007404:	08db      	lsrs	r3, r3, #3
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	466e      	mov	r6, sp
 800740a:	1af6      	subs	r6, r6, r3
 800740c:	46b5      	mov	sp, r6
 800740e:	466b      	mov	r3, sp
 8007410:	3300      	adds	r3, #0
 8007412:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(buffer, ' ', bufferSize);
 8007414:	221a      	movs	r2, #26
 8007416:	2618      	movs	r6, #24
 8007418:	1993      	adds	r3, r2, r6
 800741a:	19db      	adds	r3, r3, r7
 800741c:	881a      	ldrh	r2, [r3, #0]
 800741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007420:	2120      	movs	r1, #32
 8007422:	0018      	movs	r0, r3
 8007424:	f001 f8fc 	bl	8008620 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8007428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800742a:	2426      	movs	r4, #38	@ 0x26
 800742c:	19a3      	adds	r3, r4, r6
 800742e:	19db      	adds	r3, r3, r7
 8007430:	881a      	ldrh	r2, [r3, #0]
 8007432:	4b59      	ldr	r3, [pc, #356]	@ (8007598 <espAt_sendString+0x2a8>)
 8007434:	0019      	movs	r1, r3
 8007436:	f001 f925 	bl	8008684 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 800743a:	19a3      	adds	r3, r4, r6
 800743c:	19db      	adds	r3, r3, r7
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007442:	18d0      	adds	r0, r2, r3
 8007444:	2524      	movs	r5, #36	@ 0x24
 8007446:	19ab      	adds	r3, r5, r6
 8007448:	19db      	adds	r3, r3, r7
 800744a:	881a      	ldrh	r2, [r3, #0]
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	0019      	movs	r1, r3
 8007450:	f001 f918 	bl	8008684 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8007454:	0031      	movs	r1, r6
 8007456:	1863      	adds	r3, r4, r1
 8007458:	19db      	adds	r3, r3, r7
 800745a:	881a      	ldrh	r2, [r3, #0]
 800745c:	186b      	adds	r3, r5, r1
 800745e:	19db      	adds	r3, r3, r7
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	18d3      	adds	r3, r2, r3
 8007464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007466:	18d0      	adds	r0, r2, r3
 8007468:	2222      	movs	r2, #34	@ 0x22
 800746a:	0016      	movs	r6, r2
 800746c:	1853      	adds	r3, r2, r1
 800746e:	19db      	adds	r3, r3, r7
 8007470:	881a      	ldrh	r2, [r3, #0]
 8007472:	4b4a      	ldr	r3, [pc, #296]	@ (800759c <espAt_sendString+0x2ac>)
 8007474:	0019      	movs	r1, r3
 8007476:	f001 f905 	bl	8008684 <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 800747a:	2118      	movs	r1, #24
 800747c:	1863      	adds	r3, r4, r1
 800747e:	19db      	adds	r3, r3, r7
 8007480:	881a      	ldrh	r2, [r3, #0]
 8007482:	186b      	adds	r3, r5, r1
 8007484:	19db      	adds	r3, r3, r7
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	18d2      	adds	r2, r2, r3
 800748a:	0030      	movs	r0, r6
 800748c:	1843      	adds	r3, r0, r1
 800748e:	19db      	adds	r3, r3, r7
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	18d3      	adds	r3, r2, r3
 8007494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007496:	18d0      	adds	r0, r2, r3
 8007498:	2320      	movs	r3, #32
 800749a:	001e      	movs	r6, r3
 800749c:	185b      	adds	r3, r3, r1
 800749e:	19db      	adds	r3, r3, r7
 80074a0:	881a      	ldrh	r2, [r3, #0]
 80074a2:	4b3f      	ldr	r3, [pc, #252]	@ (80075a0 <espAt_sendString+0x2b0>)
 80074a4:	0019      	movs	r1, r3
 80074a6:	f001 f8ed 	bl	8008684 <memcpy>
	AT_STRING_QUOTE_MARK, quoteLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 80074aa:	2118      	movs	r1, #24
 80074ac:	1863      	adds	r3, r4, r1
 80074ae:	19db      	adds	r3, r3, r7
 80074b0:	881a      	ldrh	r2, [r3, #0]
 80074b2:	186b      	adds	r3, r5, r1
 80074b4:	19db      	adds	r3, r3, r7
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	18d2      	adds	r2, r2, r3
 80074ba:	2022      	movs	r0, #34	@ 0x22
 80074bc:	1843      	adds	r3, r0, r1
 80074be:	19db      	adds	r3, r3, r7
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	18d2      	adds	r2, r2, r3
					+ quoteLength], string, stringLength);
 80074c4:	0033      	movs	r3, r6
 80074c6:	1858      	adds	r0, r3, r1
 80074c8:	19c3      	adds	r3, r0, r7
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 80074ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074d0:	18d0      	adds	r0, r2, r3
	memcpy(
 80074d2:	211e      	movs	r1, #30
 80074d4:	000e      	movs	r6, r1
 80074d6:	2318      	movs	r3, #24
 80074d8:	18ca      	adds	r2, r1, r3
 80074da:	19d3      	adds	r3, r2, r7
 80074dc:	881a      	ldrh	r2, [r3, #0]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	0019      	movs	r1, r3
 80074e2:	f001 f8cf 	bl	8008684 <memcpy>
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 80074e6:	2118      	movs	r1, #24
 80074e8:	1863      	adds	r3, r4, r1
 80074ea:	19db      	adds	r3, r3, r7
 80074ec:	881a      	ldrh	r2, [r3, #0]
 80074ee:	186b      	adds	r3, r5, r1
 80074f0:	19db      	adds	r3, r3, r7
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	18d2      	adds	r2, r2, r3
 80074f6:	2022      	movs	r0, #34	@ 0x22
 80074f8:	1843      	adds	r3, r0, r1
 80074fa:	19db      	adds	r3, r3, r7
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	18d2      	adds	r2, r2, r3
					+ quoteLength + stringLength], AT_STRING_QUOTE_MARK,
 8007500:	2320      	movs	r3, #32
 8007502:	0008      	movs	r0, r1
 8007504:	185b      	adds	r3, r3, r1
 8007506:	19db      	adds	r3, r3, r7
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	18d2      	adds	r2, r2, r3
 800750c:	0031      	movs	r1, r6
 800750e:	180e      	adds	r6, r1, r0
 8007510:	19f3      	adds	r3, r6, r7
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8007516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007518:	18d0      	adds	r0, r2, r3
	memcpy(
 800751a:	000e      	movs	r6, r1
 800751c:	2318      	movs	r3, #24
 800751e:	18ca      	adds	r2, r1, r3
 8007520:	19d3      	adds	r3, r2, r7
 8007522:	881a      	ldrh	r2, [r3, #0]
 8007524:	4b1e      	ldr	r3, [pc, #120]	@ (80075a0 <espAt_sendString+0x2b0>)
 8007526:	0019      	movs	r1, r3
 8007528:	f001 f8ac 	bl	8008684 <memcpy>
			stringLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 800752c:	2118      	movs	r1, #24
 800752e:	1863      	adds	r3, r4, r1
 8007530:	19db      	adds	r3, r3, r7
 8007532:	881a      	ldrh	r2, [r3, #0]
 8007534:	186b      	adds	r3, r5, r1
 8007536:	19db      	adds	r3, r3, r7
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	18d2      	adds	r2, r2, r3
 800753c:	2022      	movs	r0, #34	@ 0x22
 800753e:	1843      	adds	r3, r0, r1
 8007540:	19db      	adds	r3, r3, r7
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	18d2      	adds	r2, r2, r3
					+ (quoteLength * 2) + stringLength], AT_ENDING,
 8007546:	2320      	movs	r3, #32
 8007548:	0008      	movs	r0, r1
 800754a:	185b      	adds	r3, r3, r1
 800754c:	19db      	adds	r3, r3, r7
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	18d2      	adds	r2, r2, r3
 8007554:	0031      	movs	r1, r6
 8007556:	0004      	movs	r4, r0
 8007558:	180b      	adds	r3, r1, r0
 800755a:	19db      	adds	r3, r3, r7
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8007560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007562:	18d0      	adds	r0, r2, r3
	memcpy(
 8007564:	231c      	movs	r3, #28
 8007566:	191b      	adds	r3, r3, r4
 8007568:	19db      	adds	r3, r3, r7
 800756a:	881a      	ldrh	r2, [r3, #0]
 800756c:	4b0d      	ldr	r3, [pc, #52]	@ (80075a4 <espAt_sendString+0x2b4>)
 800756e:	0019      	movs	r1, r3
 8007570:	f001 f888 	bl	8008684 <memcpy>
			endingLength);

	return uartSend(&radio->espUart, buffer, bufferSize);
 8007574:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007576:	221a      	movs	r2, #26
 8007578:	1913      	adds	r3, r2, r4
 800757a:	19db      	adds	r3, r3, r7
 800757c:	881a      	ldrh	r2, [r3, #0]
 800757e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007580:	0019      	movs	r1, r3
 8007582:	f7ff fbe9 	bl	8006d58 <uartSend>
 8007586:	0003      	movs	r3, r0
 8007588:	46c5      	mov	sp, r8

}
 800758a:	0018      	movs	r0, r3
 800758c:	46bd      	mov	sp, r7
 800758e:	b010      	add	sp, #64	@ 0x40
 8007590:	bc80      	pop	{r7}
 8007592:	46b8      	mov	r8, r7
 8007594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007596:	46c0      	nop			@ (mov r8, r8)
 8007598:	08009500 	.word	0x08009500
 800759c:	08009508 	.word	0x08009508
 80075a0:	0800950c 	.word	0x0800950c
 80075a4:	08009504 	.word	0x08009504

080075a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80075a8:	b590      	push	{r4, r7, lr}
 80075aa:	b08b      	sub	sp, #44	@ 0x2c
 80075ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ae:	2414      	movs	r4, #20
 80075b0:	193b      	adds	r3, r7, r4
 80075b2:	0018      	movs	r0, r3
 80075b4:	2314      	movs	r3, #20
 80075b6:	001a      	movs	r2, r3
 80075b8:	2100      	movs	r1, #0
 80075ba:	f001 f831 	bl	8008620 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075be:	4b4f      	ldr	r3, [pc, #316]	@ (80076fc <MX_GPIO_Init+0x154>)
 80075c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075c2:	4b4e      	ldr	r3, [pc, #312]	@ (80076fc <MX_GPIO_Init+0x154>)
 80075c4:	2104      	movs	r1, #4
 80075c6:	430a      	orrs	r2, r1
 80075c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80075ca:	4b4c      	ldr	r3, [pc, #304]	@ (80076fc <MX_GPIO_Init+0x154>)
 80075cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ce:	2204      	movs	r2, #4
 80075d0:	4013      	ands	r3, r2
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80075d6:	4b49      	ldr	r3, [pc, #292]	@ (80076fc <MX_GPIO_Init+0x154>)
 80075d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075da:	4b48      	ldr	r3, [pc, #288]	@ (80076fc <MX_GPIO_Init+0x154>)
 80075dc:	2101      	movs	r1, #1
 80075de:	430a      	orrs	r2, r1
 80075e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80075e2:	4b46      	ldr	r3, [pc, #280]	@ (80076fc <MX_GPIO_Init+0x154>)
 80075e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e6:	2201      	movs	r2, #1
 80075e8:	4013      	ands	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80075ee:	4b43      	ldr	r3, [pc, #268]	@ (80076fc <MX_GPIO_Init+0x154>)
 80075f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075f2:	4b42      	ldr	r3, [pc, #264]	@ (80076fc <MX_GPIO_Init+0x154>)
 80075f4:	2102      	movs	r1, #2
 80075f6:	430a      	orrs	r2, r1
 80075f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80075fa:	4b40      	ldr	r3, [pc, #256]	@ (80076fc <MX_GPIO_Init+0x154>)
 80075fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fe:	2202      	movs	r2, #2
 8007600:	4013      	ands	r3, r2
 8007602:	60bb      	str	r3, [r7, #8]
 8007604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007606:	4b3d      	ldr	r3, [pc, #244]	@ (80076fc <MX_GPIO_Init+0x154>)
 8007608:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800760a:	4b3c      	ldr	r3, [pc, #240]	@ (80076fc <MX_GPIO_Init+0x154>)
 800760c:	2108      	movs	r1, #8
 800760e:	430a      	orrs	r2, r1
 8007610:	635a      	str	r2, [r3, #52]	@ 0x34
 8007612:	4b3a      	ldr	r3, [pc, #232]	@ (80076fc <MX_GPIO_Init+0x154>)
 8007614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007616:	2208      	movs	r2, #8
 8007618:	4013      	ands	r3, r2
 800761a:	607b      	str	r3, [r7, #4]
 800761c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800761e:	23a0      	movs	r3, #160	@ 0xa0
 8007620:	05db      	lsls	r3, r3, #23
 8007622:	2200      	movs	r2, #0
 8007624:	2120      	movs	r1, #32
 8007626:	0018      	movs	r0, r3
 8007628:	f7fc fa2f 	bl	8003a8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KBD_ROW1_Pin|KBD_ROW2_Pin|KBD_ROW3_Pin|KBD_ROW4_Pin
 800762c:	4b34      	ldr	r3, [pc, #208]	@ (8007700 <MX_GPIO_Init+0x158>)
 800762e:	2200      	movs	r2, #0
 8007630:	213e      	movs	r1, #62	@ 0x3e
 8007632:	0018      	movs	r0, r3
 8007634:	f7fc fa29 	bl	8003a8a <HAL_GPIO_WritePin>
                          |KBD_ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MUS_FWD_Pin MUS_BCK_Pin MUS_DPI_Pin MUS_PRC_Pin
                           MUS_HOME_Pin MUS_LB_Pin MUS_MB_Pin MUS_RB_Pin
                           MUS_UP_Pin MUS_DN_Pin */
  GPIO_InitStruct.Pin = MUS_FWD_Pin|MUS_BCK_Pin|MUS_DPI_Pin|MUS_PRC_Pin
 8007638:	193b      	adds	r3, r7, r4
 800763a:	4a32      	ldr	r2, [pc, #200]	@ (8007704 <MX_GPIO_Init+0x15c>)
 800763c:	601a      	str	r2, [r3, #0]
                          |MUS_HOME_Pin|MUS_LB_Pin|MUS_MB_Pin|MUS_RB_Pin
                          |MUS_UP_Pin|MUS_DN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800763e:	193b      	adds	r3, r7, r4
 8007640:	2200      	movs	r2, #0
 8007642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007644:	193b      	adds	r3, r7, r4
 8007646:	2200      	movs	r2, #0
 8007648:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800764a:	193b      	adds	r3, r7, r4
 800764c:	4a2e      	ldr	r2, [pc, #184]	@ (8007708 <MX_GPIO_Init+0x160>)
 800764e:	0019      	movs	r1, r3
 8007650:	0010      	movs	r0, r2
 8007652:	f7fb ffc9 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8007656:	193b      	adds	r3, r7, r4
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800765c:	193b      	adds	r3, r7, r4
 800765e:	2288      	movs	r2, #136	@ 0x88
 8007660:	0352      	lsls	r2, r2, #13
 8007662:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007664:	193b      	adds	r3, r7, r4
 8007666:	2202      	movs	r2, #2
 8007668:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 800766a:	193a      	adds	r2, r7, r4
 800766c:	23a0      	movs	r3, #160	@ 0xa0
 800766e:	05db      	lsls	r3, r3, #23
 8007670:	0011      	movs	r1, r2
 8007672:	0018      	movs	r0, r3
 8007674:	f7fb ffb8 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8007678:	193b      	adds	r3, r7, r4
 800767a:	2220      	movs	r2, #32
 800767c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800767e:	193b      	adds	r3, r7, r4
 8007680:	2201      	movs	r2, #1
 8007682:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007684:	193b      	adds	r3, r7, r4
 8007686:	2200      	movs	r2, #0
 8007688:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800768a:	193b      	adds	r3, r7, r4
 800768c:	2200      	movs	r2, #0
 800768e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8007690:	193a      	adds	r2, r7, r4
 8007692:	23a0      	movs	r3, #160	@ 0xa0
 8007694:	05db      	lsls	r3, r3, #23
 8007696:	0011      	movs	r1, r2
 8007698:	0018      	movs	r0, r3
 800769a:	f7fb ffa5 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_COL1_Pin KBD_COL2_Pin KBD_COL10_Pin ESP_BOOT_Pin
                           ESP_RST_Pin KBD_COL3_Pin KBD_COL4_Pin KBD_COL5_Pin
                           KBD_COL6_Pin KBD_COL7_Pin KBD_COL8_Pin KBD_COL9_Pin */
  GPIO_InitStruct.Pin = KBD_COL1_Pin|KBD_COL2_Pin|KBD_COL10_Pin|ESP_BOOT_Pin
 800769e:	193b      	adds	r3, r7, r4
 80076a0:	4a1a      	ldr	r2, [pc, #104]	@ (800770c <MX_GPIO_Init+0x164>)
 80076a2:	601a      	str	r2, [r3, #0]
                          |ESP_RST_Pin|KBD_COL3_Pin|KBD_COL4_Pin|KBD_COL5_Pin
                          |KBD_COL6_Pin|KBD_COL7_Pin|KBD_COL8_Pin|KBD_COL9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076a4:	193b      	adds	r3, r7, r4
 80076a6:	2200      	movs	r2, #0
 80076a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076aa:	193b      	adds	r3, r7, r4
 80076ac:	2200      	movs	r2, #0
 80076ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076b0:	193b      	adds	r3, r7, r4
 80076b2:	4a17      	ldr	r2, [pc, #92]	@ (8007710 <MX_GPIO_Init+0x168>)
 80076b4:	0019      	movs	r1, r3
 80076b6:	0010      	movs	r0, r2
 80076b8:	f7fb ff96 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_ROW1_Pin KBD_ROW2_Pin KBD_ROW3_Pin KBD_ROW4_Pin
                           KBD_ROW5_Pin */
  GPIO_InitStruct.Pin = KBD_ROW1_Pin|KBD_ROW2_Pin|KBD_ROW3_Pin|KBD_ROW4_Pin
 80076bc:	0021      	movs	r1, r4
 80076be:	187b      	adds	r3, r7, r1
 80076c0:	223e      	movs	r2, #62	@ 0x3e
 80076c2:	601a      	str	r2, [r3, #0]
                          |KBD_ROW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076c4:	187b      	adds	r3, r7, r1
 80076c6:	2201      	movs	r2, #1
 80076c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ca:	187b      	adds	r3, r7, r1
 80076cc:	2200      	movs	r2, #0
 80076ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076d0:	187b      	adds	r3, r7, r1
 80076d2:	2200      	movs	r2, #0
 80076d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076d6:	187b      	adds	r3, r7, r1
 80076d8:	4a09      	ldr	r2, [pc, #36]	@ (8007700 <MX_GPIO_Init+0x158>)
 80076da:	0019      	movs	r1, r3
 80076dc:	0010      	movs	r0, r2
 80076de:	f7fb ff83 	bl	80035e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80076e2:	2200      	movs	r2, #0
 80076e4:	2100      	movs	r1, #0
 80076e6:	2005      	movs	r0, #5
 80076e8:	f7fb fc6c 	bl	8002fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80076ec:	2005      	movs	r0, #5
 80076ee:	f7fb fc7e 	bl	8002fee <HAL_NVIC_EnableIRQ>

}
 80076f2:	46c0      	nop			@ (mov r8, r8)
 80076f4:	46bd      	mov	sp, r7
 80076f6:	b00b      	add	sp, #44	@ 0x2c
 80076f8:	bd90      	pop	{r4, r7, pc}
 80076fa:	46c0      	nop			@ (mov r8, r8)
 80076fc:	40021000 	.word	0x40021000
 8007700:	50000c00 	.word	0x50000c00
 8007704:	0000ffc0 	.word	0x0000ffc0
 8007708:	50000800 	.word	0x50000800
 800770c:	0000c7fe 	.word	0x0000c7fe
 8007710:	50000400 	.word	0x50000400

08007714 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007718:	4b1b      	ldr	r3, [pc, #108]	@ (8007788 <MX_I2C1_Init+0x74>)
 800771a:	4a1c      	ldr	r2, [pc, #112]	@ (800778c <MX_I2C1_Init+0x78>)
 800771c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 800771e:	4b1a      	ldr	r3, [pc, #104]	@ (8007788 <MX_I2C1_Init+0x74>)
 8007720:	4a1b      	ldr	r2, [pc, #108]	@ (8007790 <MX_I2C1_Init+0x7c>)
 8007722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007724:	4b18      	ldr	r3, [pc, #96]	@ (8007788 <MX_I2C1_Init+0x74>)
 8007726:	2200      	movs	r2, #0
 8007728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800772a:	4b17      	ldr	r3, [pc, #92]	@ (8007788 <MX_I2C1_Init+0x74>)
 800772c:	2201      	movs	r2, #1
 800772e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007730:	4b15      	ldr	r3, [pc, #84]	@ (8007788 <MX_I2C1_Init+0x74>)
 8007732:	2200      	movs	r2, #0
 8007734:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007736:	4b14      	ldr	r3, [pc, #80]	@ (8007788 <MX_I2C1_Init+0x74>)
 8007738:	2200      	movs	r2, #0
 800773a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800773c:	4b12      	ldr	r3, [pc, #72]	@ (8007788 <MX_I2C1_Init+0x74>)
 800773e:	2200      	movs	r2, #0
 8007740:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007742:	4b11      	ldr	r3, [pc, #68]	@ (8007788 <MX_I2C1_Init+0x74>)
 8007744:	2200      	movs	r2, #0
 8007746:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007748:	4b0f      	ldr	r3, [pc, #60]	@ (8007788 <MX_I2C1_Init+0x74>)
 800774a:	2200      	movs	r2, #0
 800774c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800774e:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <MX_I2C1_Init+0x74>)
 8007750:	0018      	movs	r0, r3
 8007752:	f7fc f9eb 	bl	8003b2c <HAL_I2C_Init>
 8007756:	1e03      	subs	r3, r0, #0
 8007758:	d001      	beq.n	800775e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800775a:	f000 fcad 	bl	80080b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800775e:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <MX_I2C1_Init+0x74>)
 8007760:	2100      	movs	r1, #0
 8007762:	0018      	movs	r0, r3
 8007764:	f7fc ffe6 	bl	8004734 <HAL_I2CEx_ConfigAnalogFilter>
 8007768:	1e03      	subs	r3, r0, #0
 800776a:	d001      	beq.n	8007770 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800776c:	f000 fca4 	bl	80080b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007770:	4b05      	ldr	r3, [pc, #20]	@ (8007788 <MX_I2C1_Init+0x74>)
 8007772:	2100      	movs	r1, #0
 8007774:	0018      	movs	r0, r3
 8007776:	f7fd f829 	bl	80047cc <HAL_I2CEx_ConfigDigitalFilter>
 800777a:	1e03      	subs	r3, r0, #0
 800777c:	d001      	beq.n	8007782 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800777e:	f000 fc9b 	bl	80080b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007782:	46c0      	nop			@ (mov r8, r8)
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	200000f4 	.word	0x200000f4
 800778c:	40005400 	.word	0x40005400
 8007790:	00c12166 	.word	0x00c12166

08007794 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007794:	b590      	push	{r4, r7, lr}
 8007796:	b097      	sub	sp, #92	@ 0x5c
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800779c:	2344      	movs	r3, #68	@ 0x44
 800779e:	18fb      	adds	r3, r7, r3
 80077a0:	0018      	movs	r0, r3
 80077a2:	2314      	movs	r3, #20
 80077a4:	001a      	movs	r2, r3
 80077a6:	2100      	movs	r1, #0
 80077a8:	f000 ff3a 	bl	8008620 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80077ac:	2410      	movs	r4, #16
 80077ae:	193b      	adds	r3, r7, r4
 80077b0:	0018      	movs	r0, r3
 80077b2:	2334      	movs	r3, #52	@ 0x34
 80077b4:	001a      	movs	r2, r3
 80077b6:	2100      	movs	r1, #0
 80077b8:	f000 ff32 	bl	8008620 <memset>
  if(i2cHandle->Instance==I2C1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a23      	ldr	r2, [pc, #140]	@ (8007850 <HAL_I2C_MspInit+0xbc>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d13f      	bne.n	8007846 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80077c6:	193b      	adds	r3, r7, r4
 80077c8:	2220      	movs	r2, #32
 80077ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80077cc:	193b      	adds	r3, r7, r4
 80077ce:	2200      	movs	r2, #0
 80077d0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077d2:	193b      	adds	r3, r7, r4
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7fd fd55 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 80077da:	1e03      	subs	r3, r0, #0
 80077dc:	d001      	beq.n	80077e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80077de:	f000 fc6b 	bl	80080b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077e2:	4b1c      	ldr	r3, [pc, #112]	@ (8007854 <HAL_I2C_MspInit+0xc0>)
 80077e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007854 <HAL_I2C_MspInit+0xc0>)
 80077e8:	2101      	movs	r1, #1
 80077ea:	430a      	orrs	r2, r1
 80077ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80077ee:	4b19      	ldr	r3, [pc, #100]	@ (8007854 <HAL_I2C_MspInit+0xc0>)
 80077f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f2:	2201      	movs	r2, #1
 80077f4:	4013      	ands	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80077fa:	2144      	movs	r1, #68	@ 0x44
 80077fc:	187b      	adds	r3, r7, r1
 80077fe:	22c0      	movs	r2, #192	@ 0xc0
 8007800:	00d2      	lsls	r2, r2, #3
 8007802:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007804:	187b      	adds	r3, r7, r1
 8007806:	2212      	movs	r2, #18
 8007808:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800780a:	187b      	adds	r3, r7, r1
 800780c:	2200      	movs	r2, #0
 800780e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007810:	187b      	adds	r3, r7, r1
 8007812:	2200      	movs	r2, #0
 8007814:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8007816:	187b      	adds	r3, r7, r1
 8007818:	2206      	movs	r2, #6
 800781a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800781c:	187a      	adds	r2, r7, r1
 800781e:	23a0      	movs	r3, #160	@ 0xa0
 8007820:	05db      	lsls	r3, r3, #23
 8007822:	0011      	movs	r1, r2
 8007824:	0018      	movs	r0, r3
 8007826:	f7fb fedf 	bl	80035e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800782a:	4b0a      	ldr	r3, [pc, #40]	@ (8007854 <HAL_I2C_MspInit+0xc0>)
 800782c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800782e:	4b09      	ldr	r3, [pc, #36]	@ (8007854 <HAL_I2C_MspInit+0xc0>)
 8007830:	2180      	movs	r1, #128	@ 0x80
 8007832:	0389      	lsls	r1, r1, #14
 8007834:	430a      	orrs	r2, r1
 8007836:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007838:	4b06      	ldr	r3, [pc, #24]	@ (8007854 <HAL_I2C_MspInit+0xc0>)
 800783a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800783c:	2380      	movs	r3, #128	@ 0x80
 800783e:	039b      	lsls	r3, r3, #14
 8007840:	4013      	ands	r3, r2
 8007842:	60bb      	str	r3, [r7, #8]
 8007844:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007846:	46c0      	nop			@ (mov r8, r8)
 8007848:	46bd      	mov	sp, r7
 800784a:	b017      	add	sp, #92	@ 0x5c
 800784c:	bd90      	pop	{r4, r7, pc}
 800784e:	46c0      	nop			@ (mov r8, r8)
 8007850:	40005400 	.word	0x40005400
 8007854:	40021000 	.word	0x40021000

08007858 <i2cSend>:
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
lsm6ds_state_t i2cSend(lsm6ds_serialInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 8007858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785a:	b08b      	sub	sp, #44	@ 0x2c
 800785c:	af04      	add	r7, sp, #16
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	0008      	movs	r0, r1
 8007862:	0011      	movs	r1, r2
 8007864:	607b      	str	r3, [r7, #4]
 8007866:	260a      	movs	r6, #10
 8007868:	19bb      	adds	r3, r7, r6
 800786a:	1c02      	adds	r2, r0, #0
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	2508      	movs	r5, #8
 8007870:	197b      	adds	r3, r7, r5
 8007872:	1c0a      	adds	r2, r1, #0
 8007874:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Write(i2c->i2c, devAddr, memAddr,
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2117      	movs	r1, #23
 8007884:	187c      	adds	r4, r7, r1
 8007886:	1979      	adds	r1, r7, r5
 8007888:	880d      	ldrh	r5, [r1, #0]
 800788a:	19b9      	adds	r1, r7, r6
 800788c:	8809      	ldrh	r1, [r1, #0]
 800788e:	9302      	str	r3, [sp, #8]
 8007890:	9201      	str	r2, [sp, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	2301      	movs	r3, #1
 8007898:	002a      	movs	r2, r5
 800789a:	f7fc f9ed 	bl	8003c78 <HAL_I2C_Mem_Write>
 800789e:	0003      	movs	r3, r0
 80078a0:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->sendTimeout);

	if (state == HAL_OK)
 80078a2:	2117      	movs	r1, #23
 80078a4:	187b      	adds	r3, r7, r1
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <i2cSend+0x58>
		return LSM6DS_STATE_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	e007      	b.n	80078c0 <i2cSend+0x68>
	else if (state == HAL_TIMEOUT)
 80078b0:	2317      	movs	r3, #23
 80078b2:	18fb      	adds	r3, r7, r3
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d101      	bne.n	80078be <i2cSend+0x66>
		return LSM6DS_STATE_TIMEOUT;
 80078ba:	2302      	movs	r3, #2
 80078bc:	e000      	b.n	80078c0 <i2cSend+0x68>
	else
		return LSM6DS_STATE_ERR;
 80078be:	2301      	movs	r3, #1
}
 80078c0:	0018      	movs	r0, r3
 80078c2:	46bd      	mov	sp, r7
 80078c4:	b007      	add	sp, #28
 80078c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078c8 <i2cReceive>:

//port
lsm6ds_state_t i2cReceive(lsm6ds_serialInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 80078c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ca:	b08b      	sub	sp, #44	@ 0x2c
 80078cc:	af04      	add	r7, sp, #16
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	0008      	movs	r0, r1
 80078d2:	0011      	movs	r1, r2
 80078d4:	607b      	str	r3, [r7, #4]
 80078d6:	260a      	movs	r6, #10
 80078d8:	19bb      	adds	r3, r7, r6
 80078da:	1c02      	adds	r2, r0, #0
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	2508      	movs	r5, #8
 80078e0:	197b      	adds	r3, r7, r5
 80078e2:	1c0a      	adds	r2, r1, #0
 80078e4:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Read(i2c->i2c, devAddr, memAddr,
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	2117      	movs	r1, #23
 80078f4:	187c      	adds	r4, r7, r1
 80078f6:	1979      	adds	r1, r7, r5
 80078f8:	880d      	ldrh	r5, [r1, #0]
 80078fa:	19b9      	adds	r1, r7, r6
 80078fc:	8809      	ldrh	r1, [r1, #0]
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	9201      	str	r2, [sp, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	2301      	movs	r3, #1
 8007908:	002a      	movs	r2, r5
 800790a:	f7fc fae3 	bl	8003ed4 <HAL_I2C_Mem_Read>
 800790e:	0003      	movs	r3, r0
 8007910:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->receiveTimeout);

	if (state == HAL_OK)
 8007912:	2117      	movs	r1, #23
 8007914:	187b      	adds	r3, r7, r1
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <i2cReceive+0x58>
		return LSM6DS_STATE_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	e007      	b.n	8007930 <i2cReceive+0x68>
	else if (state == HAL_TIMEOUT)
 8007920:	2317      	movs	r3, #23
 8007922:	18fb      	adds	r3, r7, r3
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b03      	cmp	r3, #3
 8007928:	d101      	bne.n	800792e <i2cReceive+0x66>
		return LSM6DS_STATE_TIMEOUT;
 800792a:	2302      	movs	r3, #2
 800792c:	e000      	b.n	8007930 <i2cReceive+0x68>
	else
		return LSM6DS_STATE_ERR;
 800792e:	2301      	movs	r3, #1
}
 8007930:	0018      	movs	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	b007      	add	sp, #28
 8007936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007938 <modifyReg>:
 * @param: register address
 * @param: bitmask
 * @param: value
 */
lsm6ds_state_t modifyReg(lsm6ds_sensor_t *sensor, uint16_t regAddr,
		uint8_t bitmask, uint16_t value) {
 8007938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793a:	b089      	sub	sp, #36	@ 0x24
 800793c:	af02      	add	r7, sp, #8
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	000c      	movs	r4, r1
 8007942:	0010      	movs	r0, r2
 8007944:	0019      	movs	r1, r3
 8007946:	230a      	movs	r3, #10
 8007948:	18fb      	adds	r3, r7, r3
 800794a:	1c22      	adds	r2, r4, #0
 800794c:	801a      	strh	r2, [r3, #0]
 800794e:	2209      	movs	r2, #9
 8007950:	18bb      	adds	r3, r7, r2
 8007952:	1c02      	adds	r2, r0, #0
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	1dbb      	adds	r3, r7, #6
 8007958:	1c0a      	adds	r2, r1, #0
 800795a:	801a      	strh	r2, [r3, #0]

	uint8_t readedReg = 0;
 800795c:	2516      	movs	r5, #22
 800795e:	197b      	adds	r3, r7, r5
 8007960:	2200      	movs	r2, #0
 8007962:	701a      	strb	r2, [r3, #0]
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8007964:	2617      	movs	r6, #23
 8007966:	19bb      	adds	r3, r7, r6
 8007968:	2201      	movs	r2, #1
 800796a:	701a      	strb	r2, [r3, #0]

	//read original register
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr,
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8999      	ldrh	r1, [r3, #12]
 8007972:	19bc      	adds	r4, r7, r6
 8007974:	197d      	adds	r5, r7, r5
 8007976:	230a      	movs	r3, #10
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	881a      	ldrh	r2, [r3, #0]
 800797c:	2301      	movs	r3, #1
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	002b      	movs	r3, r5
 8007982:	f7ff ffa1 	bl	80078c8 <i2cReceive>
 8007986:	0003      	movs	r3, r0
 8007988:	7023      	strb	r3, [r4, #0]
			&readedReg, 1);

	if (state != LSM6DS_STATE_OK)
 800798a:	19bb      	adds	r3, r7, r6
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <modifyReg+0x60>
		return state;
 8007992:	19bb      	adds	r3, r7, r6
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	e02c      	b.n	80079f2 <modifyReg+0xba>

	//clear bits corresponding to mask
	readedReg &= ~(bitmask);
 8007998:	2009      	movs	r0, #9
 800799a:	183b      	adds	r3, r7, r0
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	43db      	mvns	r3, r3
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	2116      	movs	r1, #22
 80079a6:	187a      	adds	r2, r7, r1
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	b252      	sxtb	r2, r2
 80079ac:	4013      	ands	r3, r2
 80079ae:	b25b      	sxtb	r3, r3
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	187b      	adds	r3, r7, r1
 80079b4:	701a      	strb	r2, [r3, #0]

	//modify register
	uint8_t regToWrite = readedReg | (bitmask & value);
 80079b6:	1dbb      	adds	r3, r7, #6
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	183a      	adds	r2, r7, r0
 80079be:	7812      	ldrb	r2, [r2, #0]
 80079c0:	4013      	ands	r3, r2
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	b25a      	sxtb	r2, r3
 80079c6:	187b      	adds	r3, r7, r1
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b25b      	sxtb	r3, r3
 80079cc:	4313      	orrs	r3, r2
 80079ce:	b25b      	sxtb	r3, r3
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	2415      	movs	r4, #21
 80079d4:	193b      	adds	r3, r7, r4
 80079d6:	701a      	strb	r2, [r3, #0]

	//write register
	return i2cSend(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr, &regToWrite,
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8999      	ldrh	r1, [r3, #12]
 80079de:	193c      	adds	r4, r7, r4
 80079e0:	230a      	movs	r3, #10
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	881a      	ldrh	r2, [r3, #0]
 80079e6:	2301      	movs	r3, #1
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	0023      	movs	r3, r4
 80079ec:	f7ff ff34 	bl	8007858 <i2cSend>
 80079f0:	0003      	movs	r3, r0
			1);

}
 80079f2:	0018      	movs	r0, r3
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b007      	add	sp, #28
 80079f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079fa <lsm6ds_init>:
 * @param: rxTimeout
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_init(lsm6ds_sensor_t *sensor, uint16_t devAddr,
		I2C_HandleTypeDef *i2c, uint32_t txTimeout, uint32_t rxTimeout) { //port
 80079fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fc:	b089      	sub	sp, #36	@ 0x24
 80079fe:	af02      	add	r7, sp, #8
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
 8007a06:	200a      	movs	r0, #10
 8007a08:	183b      	adds	r3, r7, r0
 8007a0a:	1c0a      	adds	r2, r1, #0
 8007a0c:	801a      	strh	r2, [r3, #0]

	sensor->deviceAddr = devAddr;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	183a      	adds	r2, r7, r0
 8007a12:	8812      	ldrh	r2, [r2, #0]
 8007a14:	819a      	strh	r2, [r3, #12]
	sensor->lsm6dsI2c.i2c = i2c;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	601a      	str	r2, [r3, #0]
	sensor->lsm6dsI2c.receiveTimeout = rxTimeout;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a20:	609a      	str	r2, [r3, #8]
	sensor->lsm6dsI2c.sendTimeout = txTimeout;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	605a      	str	r2, [r3, #4]

	memset(&sensor->outGR, 0, sizeof(sensor->outGR));
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3314      	adds	r3, #20
 8007a2c:	2206      	movs	r2, #6
 8007a2e:	2100      	movs	r1, #0
 8007a30:	0018      	movs	r0, r3
 8007a32:	f000 fdf5 	bl	8008620 <memset>
	memset(&sensor->outXL, 0, sizeof(sensor->outXL));
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	330e      	adds	r3, #14
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f000 fdee 	bl	8008620 <memset>
	sensor->outTemperature = 0;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	835a      	strh	r2, [r3, #26]

	//check communication
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8007a4a:	2417      	movs	r4, #23
 8007a4c:	193b      	adds	r3, r7, r4
 8007a4e:	2201      	movs	r2, #1
 8007a50:	701a      	strb	r2, [r3, #0]
	uint8_t receivedWhoIAm = 0;
 8007a52:	2616      	movs	r6, #22
 8007a54:	19bb      	adds	r3, r7, r6
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr,
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8999      	ldrh	r1, [r3, #12]
 8007a60:	0025      	movs	r5, r4
 8007a62:	193c      	adds	r4, r7, r4
 8007a64:	19bb      	adds	r3, r7, r6
 8007a66:	2201      	movs	r2, #1
 8007a68:	9200      	str	r2, [sp, #0]
 8007a6a:	220f      	movs	r2, #15
 8007a6c:	f7ff ff2c 	bl	80078c8 <i2cReceive>
 8007a70:	0003      	movs	r3, r0
 8007a72:	7023      	strb	r3, [r4, #0]
	LSM6DS_REG_WHO_AM_I, &receivedWhoIAm, 1);
	if (state == LSM6DS_STATE_ERR)
 8007a74:	197b      	adds	r3, r7, r5
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <lsm6ds_init+0x86>
		return LSM6DS_STATE_ERR_SERIAL;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e00f      	b.n	8007aa0 <lsm6ds_init+0xa6>
	else if (state == LSM6DS_STATE_TIMEOUT)
 8007a80:	2217      	movs	r2, #23
 8007a82:	18bb      	adds	r3, r7, r2
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d102      	bne.n	8007a90 <lsm6ds_init+0x96>
		return state;
 8007a8a:	18bb      	adds	r3, r7, r2
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	e007      	b.n	8007aa0 <lsm6ds_init+0xa6>
	else {
		if (receivedWhoIAm == LSM6DS_WHO_AM_I)
 8007a90:	2316      	movs	r3, #22
 8007a92:	18fb      	adds	r3, r7, r3
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b6a      	cmp	r3, #106	@ 0x6a
 8007a98:	d101      	bne.n	8007a9e <lsm6ds_init+0xa4>
			return LSM6DS_STATE_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	e000      	b.n	8007aa0 <lsm6ds_init+0xa6>
		else
			return LSM6DS_STATE_WRONG_WHOAMI;
 8007a9e:	2304      	movs	r3, #4
	}

}
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b007      	add	sp, #28
 8007aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007aa8 <lsm6ds_setInt1Drdy>:
 * @param: sensor
 * @param: LSM6DS_INT1_DRDY_G/XL/DIS
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setInt1Drdy(lsm6ds_sensor_t *sensor, uint8_t interrupt){
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	000a      	movs	r2, r1
 8007ab2:	1cfb      	adds	r3, r7, #3
 8007ab4:	701a      	strb	r2, [r3, #0]

	return modifyReg(sensor, LSM6DS_REG_INT1_CTRL, LSM6DS_MASK_INT1_DRDY_G_XL, interrupt);
 8007ab6:	1cfb      	adds	r3, r7, #3
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	2203      	movs	r2, #3
 8007ac0:	210d      	movs	r1, #13
 8007ac2:	f7ff ff39 	bl	8007938 <modifyReg>
 8007ac6:	0003      	movs	r3, r0

}
 8007ac8:	0018      	movs	r0, r3
 8007aca:	46bd      	mov	sp, r7
 8007acc:	b002      	add	sp, #8
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <lsm6ds_setGROutputDataRate>:
 * @param: sensor
 * @param: LSM6DS_ODR_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGROutputDataRate(lsm6ds_sensor_t *sensor, uint8_t odr) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	000a      	movs	r2, r1
 8007ada:	1cfb      	adds	r3, r7, #3
 8007adc:	701a      	strb	r2, [r3, #0]
	return modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_ODR_G, odr);
 8007ade:	1cfb      	adds	r3, r7, #3
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	22f0      	movs	r2, #240	@ 0xf0
 8007ae8:	2111      	movs	r1, #17
 8007aea:	f7ff ff25 	bl	8007938 <modifyReg>
 8007aee:	0003      	movs	r3, r0

}
 8007af0:	0018      	movs	r0, r3
 8007af2:	46bd      	mov	sp, r7
 8007af4:	b002      	add	sp, #8
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <lsm6ds_setGRLowPass>:
 * @param: sensor
 * @param: LSM6DS_FTYPE_
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGRLowPass(lsm6ds_sensor_t *sensor, uint8_t filter){
 8007af8:	b5b0      	push	{r4, r5, r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	000a      	movs	r2, r1
 8007b02:	1cfb      	adds	r3, r7, #3
 8007b04:	701a      	strb	r2, [r3, #0]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 8007b06:	250f      	movs	r5, #15
 8007b08:	197b      	adds	r3, r7, r5
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]

	status = modifyReg(sensor, LSM6DS_REG_CTRL4_C, LSM6DS_MASK_LPF1_SEL_G, LSM6DS_LPF_SEL_G_EN);
 8007b0e:	197c      	adds	r4, r7, r5
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	2302      	movs	r3, #2
 8007b14:	2202      	movs	r2, #2
 8007b16:	2113      	movs	r1, #19
 8007b18:	f7ff ff0e 	bl	8007938 <modifyReg>
 8007b1c:	0003      	movs	r3, r0
 8007b1e:	7023      	strb	r3, [r4, #0]
	if(status != LSM6DS_STATE_OK)
 8007b20:	197b      	adds	r3, r7, r5
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <lsm6ds_setGRLowPass+0x36>
		return status;
 8007b28:	197b      	adds	r3, r7, r5
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	e00d      	b.n	8007b4a <lsm6ds_setGRLowPass+0x52>

	status =  modifyReg(sensor, LSM6DS_REG_CTRL6_C, LSM6DS_MASK_FTYPE, filter);
 8007b2e:	1cfb      	adds	r3, r7, #3
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	250f      	movs	r5, #15
 8007b36:	197c      	adds	r4, r7, r5
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	2115      	movs	r1, #21
 8007b3e:	f7ff fefb 	bl	8007938 <modifyReg>
 8007b42:	0003      	movs	r3, r0
 8007b44:	7023      	strb	r3, [r4, #0]
	return status;
 8007b46:	197b      	adds	r3, r7, r5
 8007b48:	781b      	ldrb	r3, [r3, #0]

}
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	b004      	add	sp, #16
 8007b50:	bdb0      	pop	{r4, r5, r7, pc}

08007b52 <lsm6ds_setGRFullScale>:
 * @param: sensor
 * @param: LSM6DS_FS_G_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setGRFullScale(lsm6ds_sensor_t *sensor, uint8_t fs) {
 8007b52:	b5b0      	push	{r4, r5, r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	000a      	movs	r2, r1
 8007b5c:	1cfb      	adds	r3, r7, #3
 8007b5e:	701a      	strb	r2, [r3, #0]

	lsm6ds_state_t stat = LSM6DS_STATE_ERR;
 8007b60:	250f      	movs	r5, #15
 8007b62:	197b      	adds	r3, r7, r5
 8007b64:	2201      	movs	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]

	if (fs == LSM6DS_FS_G_125DPS) {
 8007b68:	1cfb      	adds	r3, r7, #3
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d120      	bne.n	8007bb2 <lsm6ds_setGRFullScale+0x60>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G,
 8007b70:	197c      	adds	r4, r7, r5
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	2300      	movs	r3, #0
 8007b76:	220c      	movs	r2, #12
 8007b78:	2111      	movs	r1, #17
 8007b7a:	f7ff fedd 	bl	8007938 <modifyReg>
 8007b7e:	0003      	movs	r3, r0
 8007b80:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_245DPS);
		if (stat != LSM6DS_STATE_OK)
 8007b82:	197b      	adds	r3, r7, r5
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <lsm6ds_setGRFullScale+0x3e>
			return stat;
 8007b8a:	197b      	adds	r3, r7, r5
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	e037      	b.n	8007c00 <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125,
 8007b90:	250f      	movs	r5, #15
 8007b92:	197c      	adds	r4, r7, r5
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	2302      	movs	r3, #2
 8007b98:	2202      	movs	r2, #2
 8007b9a:	2111      	movs	r1, #17
 8007b9c:	f7ff fecc 	bl	8007938 <modifyReg>
 8007ba0:	0003      	movs	r3, r0
 8007ba2:	7023      	strb	r3, [r4, #0]
		LSM6DS_FS_G_125DPS);
		if (stat != LSM6DS_STATE_OK)
 8007ba4:	197b      	adds	r3, r7, r5
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d026      	beq.n	8007bfa <lsm6ds_setGRFullScale+0xa8>
			return stat;
 8007bac:	197b      	adds	r3, r7, r5
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	e026      	b.n	8007c00 <lsm6ds_setGRFullScale+0xae>

	} else {

		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_125, 0);
 8007bb2:	250f      	movs	r5, #15
 8007bb4:	197c      	adds	r4, r7, r5
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2202      	movs	r2, #2
 8007bbc:	2111      	movs	r1, #17
 8007bbe:	f7ff febb 	bl	8007938 <modifyReg>
 8007bc2:	0003      	movs	r3, r0
 8007bc4:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 8007bc6:	197b      	adds	r3, r7, r5
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <lsm6ds_setGRFullScale+0x82>
			return stat;
 8007bce:	197b      	adds	r3, r7, r5
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	e015      	b.n	8007c00 <lsm6ds_setGRFullScale+0xae>
		stat = modifyReg(sensor, LSM6DS_REG_CTRL2_G, LSM6DS_MASK_FS_G, fs);
 8007bd4:	1cfb      	adds	r3, r7, #3
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	250f      	movs	r5, #15
 8007bdc:	197c      	adds	r4, r7, r5
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	220c      	movs	r2, #12
 8007be2:	2111      	movs	r1, #17
 8007be4:	f7ff fea8 	bl	8007938 <modifyReg>
 8007be8:	0003      	movs	r3, r0
 8007bea:	7023      	strb	r3, [r4, #0]
		if (stat != LSM6DS_STATE_OK)
 8007bec:	197b      	adds	r3, r7, r5
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <lsm6ds_setGRFullScale+0xa8>
			return stat;
 8007bf4:	197b      	adds	r3, r7, r5
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	e002      	b.n	8007c00 <lsm6ds_setGRFullScale+0xae>

	}

	return stat;
 8007bfa:	230f      	movs	r3, #15
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	781b      	ldrb	r3, [r3, #0]

}
 8007c00:	0018      	movs	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b004      	add	sp, #16
 8007c06:	bdb0      	pop	{r4, r5, r7, pc}

08007c08 <lsm6ds_reset>:
 * software reset
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_reset(lsm6ds_sensor_t *sensor) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	return modifyReg(sensor, LSM6DS_REG_CTRL3_C, LSM6DS_MASK_SW_RESET,
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	2301      	movs	r3, #1
 8007c14:	2201      	movs	r2, #1
 8007c16:	2112      	movs	r1, #18
 8007c18:	f7ff fe8e 	bl	8007938 <modifyReg>
 8007c1c:	0003      	movs	r3, r0
	LSM6DS_SW_RESET);
}
 8007c1e:	0018      	movs	r0, r3
 8007c20:	46bd      	mov	sp, r7
 8007c22:	b002      	add	sp, #8
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <lsm6ds_updateGR>:
 * updates gyro data in sensor struct
 * @param: sensor
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_updateGR(lsm6ds_sensor_t *sensor){
 8007c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c28:	b087      	sub	sp, #28
 8007c2a:	af02      	add	r7, sp, #8
 8007c2c:	6078      	str	r0, [r7, #4]

	lsm6ds_state_t status = LSM6DS_STATE_ERR;
 8007c2e:	250f      	movs	r5, #15
 8007c30:	197b      	adds	r3, r7, r5
 8007c32:	2201      	movs	r2, #1
 8007c34:	701a      	strb	r2, [r3, #0]
	union{
		uint8_t raw[6];
		int16_t separated[3];
	}outputData;

	memset(&outputData, 0, sizeof(outputData));
 8007c36:	2608      	movs	r6, #8
 8007c38:	19bb      	adds	r3, r7, r6
 8007c3a:	2206      	movs	r2, #6
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f000 fcee 	bl	8008620 <memset>

	status = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, LSM6DS_REG_OUTX_L_G, outputData.raw, 6);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	8999      	ldrh	r1, [r3, #12]
 8007c4a:	197c      	adds	r4, r7, r5
 8007c4c:	19bb      	adds	r3, r7, r6
 8007c4e:	2206      	movs	r2, #6
 8007c50:	9200      	str	r2, [sp, #0]
 8007c52:	2222      	movs	r2, #34	@ 0x22
 8007c54:	f7ff fe38 	bl	80078c8 <i2cReceive>
 8007c58:	0003      	movs	r3, r0
 8007c5a:	7023      	strb	r3, [r4, #0]

	if(status != LSM6DS_STATE_OK)
 8007c5c:	197b      	adds	r3, r7, r5
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <lsm6ds_updateGR+0x44>
		return status;
 8007c64:	197b      	adds	r3, r7, r5
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	e012      	b.n	8007c90 <lsm6ds_updateGR+0x6a>

	sensor->outGR.x = outputData.separated[0];
 8007c6a:	2108      	movs	r1, #8
 8007c6c:	187b      	adds	r3, r7, r1
 8007c6e:	2200      	movs	r2, #0
 8007c70:	5e9a      	ldrsh	r2, [r3, r2]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	829a      	strh	r2, [r3, #20]
	sensor->outGR.y = outputData.separated[1];
 8007c76:	187b      	adds	r3, r7, r1
 8007c78:	2202      	movs	r2, #2
 8007c7a:	5e9a      	ldrsh	r2, [r3, r2]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	82da      	strh	r2, [r3, #22]
	sensor->outGR.z = outputData.separated[2];
 8007c80:	187b      	adds	r3, r7, r1
 8007c82:	2204      	movs	r2, #4
 8007c84:	5e9a      	ldrsh	r2, [r3, r2]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	831a      	strh	r2, [r3, #24]


	return status;
 8007c8a:	230f      	movs	r3, #15
 8007c8c:	18fb      	adds	r3, r7, r3
 8007c8e:	781b      	ldrb	r3, [r3, #0]

}
 8007c90:	0018      	movs	r0, r3
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b005      	add	sp, #20
 8007c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b08a      	sub	sp, #40	@ 0x28
 8007c9c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c9e:	f7fa fb9b 	bl	80023d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ca2:	f000 f997 	bl	8007fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ca6:	f7ff fc7f 	bl	80075a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8007caa:	f7ff f837 	bl	8006d1c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8007cae:	f000 fa6d 	bl	800818c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007cb2:	f000 fab9 	bl	8008228 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8007cb6:	f7ff fd2d 	bl	8007714 <MX_I2C1_Init>
  MX_ADC1_Init();
 8007cba:	f7fe ff7f 	bl	8006bbc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	lsm6ds_state_t sensorStat = lsm6ds_init(&mems, LSM6DS_ADDR_SA0_L, &hi2c1,
 8007cbe:	2515      	movs	r5, #21
 8007cc0:	197c      	adds	r4, r7, r5
 8007cc2:	4ab3      	ldr	r2, [pc, #716]	@ (8007f90 <main+0x2f8>)
 8007cc4:	48b3      	ldr	r0, [pc, #716]	@ (8007f94 <main+0x2fc>)
 8007cc6:	2364      	movs	r3, #100	@ 0x64
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	2364      	movs	r3, #100	@ 0x64
 8007ccc:	21d4      	movs	r1, #212	@ 0xd4
 8007cce:	f7ff fe94 	bl	80079fa <lsm6ds_init>
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	7023      	strb	r3, [r4, #0]
			100, 100);

	espAt_init(&bleRadio, &huart1, 50, 2000);
 8007cd6:	23fa      	movs	r3, #250	@ 0xfa
 8007cd8:	00db      	lsls	r3, r3, #3
 8007cda:	49af      	ldr	r1, [pc, #700]	@ (8007f98 <main+0x300>)
 8007cdc:	48af      	ldr	r0, [pc, #700]	@ (8007f9c <main+0x304>)
 8007cde:	2232      	movs	r2, #50	@ 0x32
 8007ce0:	f7ff f86a 	bl	8006db8 <espAt_init>

	espAt_sendCommand(&bleRadio, G_RST);
 8007ce4:	4aae      	ldr	r2, [pc, #696]	@ (8007fa0 <main+0x308>)
 8007ce6:	4bad      	ldr	r3, [pc, #692]	@ (8007f9c <main+0x304>)
 8007ce8:	0011      	movs	r1, r2
 8007cea:	0018      	movs	r0, r3
 8007cec:	f7ff f87a 	bl	8006de4 <espAt_sendCommand>
	HAL_Delay(1000);
 8007cf0:	23fa      	movs	r3, #250	@ 0xfa
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	f7fa fbf5 	bl	80024e4 <HAL_Delay>

	espAt_sendString(&bleRadio, S_BHN, "bartsHID");
 8007cfa:	4aaa      	ldr	r2, [pc, #680]	@ (8007fa4 <main+0x30c>)
 8007cfc:	49aa      	ldr	r1, [pc, #680]	@ (8007fa8 <main+0x310>)
 8007cfe:	4ba7      	ldr	r3, [pc, #668]	@ (8007f9c <main+0x304>)
 8007d00:	0018      	movs	r0, r3
 8007d02:	f7ff faf5 	bl	80072f0 <espAt_sendString>
	HAL_Delay(200);
 8007d06:	20c8      	movs	r0, #200	@ 0xc8
 8007d08:	f7fa fbec 	bl	80024e4 <HAL_Delay>
	espAt_sendParams(&bleRadio, P_BHI, 1, 1);
 8007d0c:	49a7      	ldr	r1, [pc, #668]	@ (8007fac <main+0x314>)
 8007d0e:	48a3      	ldr	r0, [pc, #652]	@ (8007f9c <main+0x304>)
 8007d10:	2301      	movs	r3, #1
 8007d12:	2201      	movs	r2, #1
 8007d14:	f7ff f914 	bl	8006f40 <espAt_sendParams>
	HAL_Delay(200);
 8007d18:	20c8      	movs	r0, #200	@ 0xc8
 8007d1a:	f7fa fbe3 	bl	80024e4 <HAL_Delay>

	//change baudrate
	espAt_sendParams(&bleRadio, P_UC, 5, 3000000, 8, 1, 0, 0);
 8007d1e:	4aa4      	ldr	r2, [pc, #656]	@ (8007fb0 <main+0x318>)
 8007d20:	49a4      	ldr	r1, [pc, #656]	@ (8007fb4 <main+0x31c>)
 8007d22:	489e      	ldr	r0, [pc, #632]	@ (8007f9c <main+0x304>)
 8007d24:	2300      	movs	r3, #0
 8007d26:	9303      	str	r3, [sp, #12]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9302      	str	r3, [sp, #8]
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	2308      	movs	r3, #8
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	0013      	movs	r3, r2
 8007d36:	2205      	movs	r2, #5
 8007d38:	f7ff f902 	bl	8006f40 <espAt_sendParams>
	HAL_Delay(200);
 8007d3c:	20c8      	movs	r0, #200	@ 0xc8
 8007d3e:	f7fa fbd1 	bl	80024e4 <HAL_Delay>
	HAL_UART_ChangeSpeed(&huart1, 3000000);
 8007d42:	4a9b      	ldr	r2, [pc, #620]	@ (8007fb0 <main+0x318>)
 8007d44:	4b94      	ldr	r3, [pc, #592]	@ (8007f98 <main+0x300>)
 8007d46:	0011      	movs	r1, r2
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f000 fbd7 	bl	80084fc <HAL_UART_ChangeSpeed>

	sensorStat = lsm6ds_reset(&mems);
 8007d4e:	197c      	adds	r4, r7, r5
 8007d50:	4b90      	ldr	r3, [pc, #576]	@ (8007f94 <main+0x2fc>)
 8007d52:	0018      	movs	r0, r3
 8007d54:	f7ff ff58 	bl	8007c08 <lsm6ds_reset>
 8007d58:	0003      	movs	r3, r0
 8007d5a:	7023      	strb	r3, [r4, #0]

//	sensorStat = lsm6ds_setXLOutputDataRate(&mems, LSM6DS_ODR_XL_12_5_HZ);
	//	sensorStat = lsm6ds_setXLFullScale(&mems, LSM6DS_FS_XL_16G);

	sensorStat = lsm6ds_setGRLowPass(&mems, LSM6DS_FTYPE_VHIGH);
 8007d5c:	197c      	adds	r4, r7, r5
 8007d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8007f94 <main+0x2fc>)
 8007d60:	2103      	movs	r1, #3
 8007d62:	0018      	movs	r0, r3
 8007d64:	f7ff fec8 	bl	8007af8 <lsm6ds_setGRLowPass>
 8007d68:	0003      	movs	r3, r0
 8007d6a:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setGROutputDataRate(&mems, LSM6DS_ODR_G_208_HZ);
 8007d6c:	197c      	adds	r4, r7, r5
 8007d6e:	4b89      	ldr	r3, [pc, #548]	@ (8007f94 <main+0x2fc>)
 8007d70:	2150      	movs	r1, #80	@ 0x50
 8007d72:	0018      	movs	r0, r3
 8007d74:	f7ff feac 	bl	8007ad0 <lsm6ds_setGROutputDataRate>
 8007d78:	0003      	movs	r3, r0
 8007d7a:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setGRFullScale(&mems, LSM6DS_FS_G_2000DPS);
 8007d7c:	197c      	adds	r4, r7, r5
 8007d7e:	4b85      	ldr	r3, [pc, #532]	@ (8007f94 <main+0x2fc>)
 8007d80:	210c      	movs	r1, #12
 8007d82:	0018      	movs	r0, r3
 8007d84:	f7ff fee5 	bl	8007b52 <lsm6ds_setGRFullScale>
 8007d88:	0003      	movs	r3, r0
 8007d8a:	7023      	strb	r3, [r4, #0]
	sensorStat = lsm6ds_setInt1Drdy(&mems, LSM6DS_INT1_DRDY_G);
 8007d8c:	197c      	adds	r4, r7, r5
 8007d8e:	4b81      	ldr	r3, [pc, #516]	@ (8007f94 <main+0x2fc>)
 8007d90:	2102      	movs	r1, #2
 8007d92:	0018      	movs	r0, r3
 8007d94:	f7ff fe88 	bl	8007aa8 <lsm6ds_setInt1Drdy>
 8007d98:	0003      	movs	r3, r0
 8007d9a:	7023      	strb	r3, [r4, #0]

	int32_t sensitivity = 100; //10000 are 1
 8007d9c:	2364      	movs	r3, #100	@ 0x64
 8007d9e:	613b      	str	r3, [r7, #16]
	int32_t acceleration = 140; //100- no acceleration
 8007da0:	238c      	movs	r3, #140	@ 0x8c
 8007da2:	60fb      	str	r3, [r7, #12]

	uint8_t newDataAvailable = 0;
 8007da4:	230b      	movs	r3, #11
 8007da6:	18fb      	adds	r3, r7, r3
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
	uint8_t blueButtonState = 0;
 8007dac:	2317      	movs	r3, #23
 8007dae:	18fb      	adds	r3, r7, r3
 8007db0:	2200      	movs	r2, #0
 8007db2:	701a      	strb	r2, [r3, #0]

	int32_t maxVal = 100;
 8007db4:	2364      	movs	r3, #100	@ 0x64
 8007db6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
	while (1) {



		if (flagDrdyG) {
 8007db8:	4b7f      	ldr	r3, [pc, #508]	@ (8007fb8 <main+0x320>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0fa      	beq.n	8007db8 <main+0x120>
			flagDrdyG = 0;
 8007dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8007fb8 <main+0x320>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]

			sensorStat = lsm6ds_updateGR(&mems);
 8007dc8:	2315      	movs	r3, #21
 8007dca:	18fc      	adds	r4, r7, r3
 8007dcc:	4b71      	ldr	r3, [pc, #452]	@ (8007f94 <main+0x2fc>)
 8007dce:	0018      	movs	r0, r3
 8007dd0:	f7ff ff29 	bl	8007c26 <lsm6ds_updateGR>
 8007dd4:	0003      	movs	r3, r0
 8007dd6:	7023      	strb	r3, [r4, #0]

			//sensitivity
			amx = ((int32_t) mems.outGR.x * sensitivity) / 10000;
 8007dd8:	4b6e      	ldr	r3, [pc, #440]	@ (8007f94 <main+0x2fc>)
 8007dda:	2214      	movs	r2, #20
 8007ddc:	5e9b      	ldrsh	r3, [r3, r2]
 8007dde:	001a      	movs	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	4353      	muls	r3, r2
 8007de4:	4975      	ldr	r1, [pc, #468]	@ (8007fbc <main+0x324>)
 8007de6:	0018      	movs	r0, r3
 8007de8:	f7f8 fa1e 	bl	8000228 <__divsi3>
 8007dec:	0003      	movs	r3, r0
 8007dee:	001a      	movs	r2, r3
 8007df0:	4b73      	ldr	r3, [pc, #460]	@ (8007fc0 <main+0x328>)
 8007df2:	601a      	str	r2, [r3, #0]
			amz = ((int32_t) mems.outGR.z * sensitivity) / 10000;
 8007df4:	4b67      	ldr	r3, [pc, #412]	@ (8007f94 <main+0x2fc>)
 8007df6:	2218      	movs	r2, #24
 8007df8:	5e9b      	ldrsh	r3, [r3, r2]
 8007dfa:	001a      	movs	r2, r3
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4353      	muls	r3, r2
 8007e00:	496e      	ldr	r1, [pc, #440]	@ (8007fbc <main+0x324>)
 8007e02:	0018      	movs	r0, r3
 8007e04:	f7f8 fa10 	bl	8000228 <__divsi3>
 8007e08:	0003      	movs	r3, r0
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	4b6d      	ldr	r3, [pc, #436]	@ (8007fc4 <main+0x32c>)
 8007e0e:	601a      	str	r2, [r3, #0]

			//acceleration

			uint8_t isNegative;

			if (amx < 0)
 8007e10:	4b6b      	ldr	r3, [pc, #428]	@ (8007fc0 <main+0x328>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da04      	bge.n	8007e22 <main+0x18a>
				isNegative = 1;
 8007e18:	2316      	movs	r3, #22
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	701a      	strb	r2, [r3, #0]
 8007e20:	e003      	b.n	8007e2a <main+0x192>
			else
				isNegative = 0;
 8007e22:	2316      	movs	r3, #22
 8007e24:	18fb      	adds	r3, r7, r3
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]

			amx = pow((double) abs(amx), ((double) acceleration) / 100);
 8007e2a:	4b65      	ldr	r3, [pc, #404]	@ (8007fc0 <main+0x328>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	17da      	asrs	r2, r3, #31
 8007e30:	189b      	adds	r3, r3, r2
 8007e32:	4053      	eors	r3, r2
 8007e34:	0018      	movs	r0, r3
 8007e36:	f7fa fa77 	bl	8002328 <__aeabi_i2d>
 8007e3a:	0004      	movs	r4, r0
 8007e3c:	000d      	movs	r5, r1
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7fa fa72 	bl	8002328 <__aeabi_i2d>
 8007e44:	2200      	movs	r2, #0
 8007e46:	4b60      	ldr	r3, [pc, #384]	@ (8007fc8 <main+0x330>)
 8007e48:	f7f8 ff68 	bl	8000d1c <__aeabi_ddiv>
 8007e4c:	0002      	movs	r2, r0
 8007e4e:	000b      	movs	r3, r1
 8007e50:	0020      	movs	r0, r4
 8007e52:	0029      	movs	r1, r5
 8007e54:	f000 fc20 	bl	8008698 <pow>
 8007e58:	0002      	movs	r2, r0
 8007e5a:	000b      	movs	r3, r1
 8007e5c:	0010      	movs	r0, r2
 8007e5e:	0019      	movs	r1, r3
 8007e60:	f7fa fa26 	bl	80022b0 <__aeabi_d2iz>
 8007e64:	0002      	movs	r2, r0
 8007e66:	4b56      	ldr	r3, [pc, #344]	@ (8007fc0 <main+0x328>)
 8007e68:	601a      	str	r2, [r3, #0]
			if (isNegative)
 8007e6a:	2316      	movs	r3, #22
 8007e6c:	18fb      	adds	r3, r7, r3
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <main+0x1e6>
				amx = -amx;
 8007e74:	4b52      	ldr	r3, [pc, #328]	@ (8007fc0 <main+0x328>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	425a      	negs	r2, r3
 8007e7a:	4b51      	ldr	r3, [pc, #324]	@ (8007fc0 <main+0x328>)
 8007e7c:	601a      	str	r2, [r3, #0]

			if (amz < 0)
 8007e7e:	4b51      	ldr	r3, [pc, #324]	@ (8007fc4 <main+0x32c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da04      	bge.n	8007e90 <main+0x1f8>
				isNegative = 1;
 8007e86:	2316      	movs	r3, #22
 8007e88:	18fb      	adds	r3, r7, r3
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	e003      	b.n	8007e98 <main+0x200>
			else
				isNegative = 0;
 8007e90:	2316      	movs	r3, #22
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
			amz = pow((double) abs(amz), ((double) acceleration) / 100);
 8007e98:	4b4a      	ldr	r3, [pc, #296]	@ (8007fc4 <main+0x32c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	17da      	asrs	r2, r3, #31
 8007e9e:	189b      	adds	r3, r3, r2
 8007ea0:	4053      	eors	r3, r2
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	f7fa fa40 	bl	8002328 <__aeabi_i2d>
 8007ea8:	0004      	movs	r4, r0
 8007eaa:	000d      	movs	r5, r1
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f7fa fa3b 	bl	8002328 <__aeabi_i2d>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4b44      	ldr	r3, [pc, #272]	@ (8007fc8 <main+0x330>)
 8007eb6:	f7f8 ff31 	bl	8000d1c <__aeabi_ddiv>
 8007eba:	0002      	movs	r2, r0
 8007ebc:	000b      	movs	r3, r1
 8007ebe:	0020      	movs	r0, r4
 8007ec0:	0029      	movs	r1, r5
 8007ec2:	f000 fbe9 	bl	8008698 <pow>
 8007ec6:	0002      	movs	r2, r0
 8007ec8:	000b      	movs	r3, r1
 8007eca:	0010      	movs	r0, r2
 8007ecc:	0019      	movs	r1, r3
 8007ece:	f7fa f9ef 	bl	80022b0 <__aeabi_d2iz>
 8007ed2:	0002      	movs	r2, r0
 8007ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc4 <main+0x32c>)
 8007ed6:	601a      	str	r2, [r3, #0]
			if (isNegative)
 8007ed8:	2316      	movs	r3, #22
 8007eda:	18fb      	adds	r3, r7, r3
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <main+0x254>
				amz = -amz;
 8007ee2:	4b38      	ldr	r3, [pc, #224]	@ (8007fc4 <main+0x32c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	425a      	negs	r2, r3
 8007ee8:	4b36      	ldr	r3, [pc, #216]	@ (8007fc4 <main+0x32c>)
 8007eea:	601a      	str	r2, [r3, #0]


			//to high value secure
			if (amx > maxVal)
 8007eec:	4b34      	ldr	r3, [pc, #208]	@ (8007fc0 <main+0x328>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	da02      	bge.n	8007efc <main+0x264>
				amx = maxVal;
 8007ef6:	4b32      	ldr	r3, [pc, #200]	@ (8007fc0 <main+0x328>)
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	601a      	str	r2, [r3, #0]
			if (amx < -maxVal)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	425a      	negs	r2, r3
 8007f00:	4b2f      	ldr	r3, [pc, #188]	@ (8007fc0 <main+0x328>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	dd03      	ble.n	8007f10 <main+0x278>
				amx = -maxVal;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	425a      	negs	r2, r3
 8007f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc0 <main+0x328>)
 8007f0e:	601a      	str	r2, [r3, #0]

			if (amz > maxVal)
 8007f10:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc4 <main+0x32c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	da02      	bge.n	8007f20 <main+0x288>
				amz = maxVal;
 8007f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8007fc4 <main+0x32c>)
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
			if (amz < -maxVal)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	425a      	negs	r2, r3
 8007f24:	4b27      	ldr	r3, [pc, #156]	@ (8007fc4 <main+0x32c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	dd03      	ble.n	8007f34 <main+0x29c>
				amz = -maxVal;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	425a      	negs	r2, r3
 8007f30:	4b24      	ldr	r3, [pc, #144]	@ (8007fc4 <main+0x32c>)
 8007f32:	601a      	str	r2, [r3, #0]

			//revert sign
			amz *= -1;
 8007f34:	4b23      	ldr	r3, [pc, #140]	@ (8007fc4 <main+0x32c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	425a      	negs	r2, r3
 8007f3a:	4b22      	ldr	r3, [pc, #136]	@ (8007fc4 <main+0x32c>)
 8007f3c:	601a      	str	r2, [r3, #0]
			amx *= -1;
 8007f3e:	4b20      	ldr	r3, [pc, #128]	@ (8007fc0 <main+0x328>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	425a      	negs	r2, r3
 8007f44:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc0 <main+0x328>)
 8007f46:	601a      	str	r2, [r3, #0]

			if (HAL_GPIO_ReadPin(MUS_DPI_GPIO_Port, MUS_DPI_Pin)
 8007f48:	2380      	movs	r3, #128	@ 0x80
 8007f4a:	019b      	lsls	r3, r3, #6
 8007f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fcc <main+0x334>)
 8007f4e:	0019      	movs	r1, r3
 8007f50:	0010      	movs	r0, r2
 8007f52:	f7fb fd7d 	bl	8003a50 <HAL_GPIO_ReadPin>
 8007f56:	1e03      	subs	r3, r0, #0
 8007f58:	d104      	bne.n	8007f64 <main+0x2cc>
					== GPIO_PIN_RESET)
				blueButtonState = 1;
 8007f5a:	2317      	movs	r3, #23
 8007f5c:	18fb      	adds	r3, r7, r3
 8007f5e:	2201      	movs	r2, #1
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	e003      	b.n	8007f6c <main+0x2d4>
			else
				blueButtonState = 0;
 8007f64:	2317      	movs	r3, #23
 8007f66:	18fb      	adds	r3, r7, r3
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]

			espAt_sendParams(&bleRadio, P_BHM, 4, blueButtonState, amz, amx, 0);
 8007f6c:	2317      	movs	r3, #23
 8007f6e:	18fb      	adds	r3, r7, r3
 8007f70:	781c      	ldrb	r4, [r3, #0]
 8007f72:	4b14      	ldr	r3, [pc, #80]	@ (8007fc4 <main+0x32c>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4b12      	ldr	r3, [pc, #72]	@ (8007fc0 <main+0x328>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4915      	ldr	r1, [pc, #84]	@ (8007fd0 <main+0x338>)
 8007f7c:	4807      	ldr	r0, [pc, #28]	@ (8007f9c <main+0x304>)
 8007f7e:	2500      	movs	r5, #0
 8007f80:	9502      	str	r5, [sp, #8]
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	9200      	str	r2, [sp, #0]
 8007f86:	0023      	movs	r3, r4
 8007f88:	2204      	movs	r2, #4
 8007f8a:	f7fe ffd9 	bl	8006f40 <espAt_sendParams>
		if (flagDrdyG) {
 8007f8e:	e713      	b.n	8007db8 <main+0x120>
 8007f90:	200000f4 	.word	0x200000f4
 8007f94:	20000154 	.word	0x20000154
 8007f98:	2000017c 	.word	0x2000017c
 8007f9c:	20000148 	.word	0x20000148
 8007fa0:	08009510 	.word	0x08009510
 8007fa4:	08009514 	.word	0x08009514
 8007fa8:	08009520 	.word	0x08009520
 8007fac:	0800952c 	.word	0x0800952c
 8007fb0:	002dc6c0 	.word	0x002dc6c0
 8007fb4:	08009538 	.word	0x08009538
 8007fb8:	20000178 	.word	0x20000178
 8007fbc:	00002710 	.word	0x00002710
 8007fc0:	20000170 	.word	0x20000170
 8007fc4:	20000174 	.word	0x20000174
 8007fc8:	40590000 	.word	0x40590000
 8007fcc:	50000800 	.word	0x50000800
 8007fd0:	08009544 	.word	0x08009544

08007fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fd4:	b590      	push	{r4, r7, lr}
 8007fd6:	b093      	sub	sp, #76	@ 0x4c
 8007fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fda:	2410      	movs	r4, #16
 8007fdc:	193b      	adds	r3, r7, r4
 8007fde:	0018      	movs	r0, r3
 8007fe0:	2338      	movs	r3, #56	@ 0x38
 8007fe2:	001a      	movs	r2, r3
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	f000 fb1b 	bl	8008620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fea:	003b      	movs	r3, r7
 8007fec:	0018      	movs	r0, r3
 8007fee:	2310      	movs	r3, #16
 8007ff0:	001a      	movs	r2, r3
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	f000 fb14 	bl	8008620 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ff8:	2380      	movs	r3, #128	@ 0x80
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f7fc fc31 	bl	8004864 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008002:	193b      	adds	r3, r7, r4
 8008004:	2202      	movs	r2, #2
 8008006:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008008:	193b      	adds	r3, r7, r4
 800800a:	2280      	movs	r2, #128	@ 0x80
 800800c:	0052      	lsls	r2, r2, #1
 800800e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8008010:	0021      	movs	r1, r4
 8008012:	187b      	adds	r3, r7, r1
 8008014:	2200      	movs	r2, #0
 8008016:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008018:	187b      	adds	r3, r7, r1
 800801a:	2240      	movs	r2, #64	@ 0x40
 800801c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800801e:	187b      	adds	r3, r7, r1
 8008020:	2202      	movs	r2, #2
 8008022:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008024:	187b      	adds	r3, r7, r1
 8008026:	2202      	movs	r2, #2
 8008028:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800802a:	187b      	adds	r3, r7, r1
 800802c:	2200      	movs	r2, #0
 800802e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8008030:	187b      	adds	r3, r7, r1
 8008032:	2208      	movs	r2, #8
 8008034:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008036:	187b      	adds	r3, r7, r1
 8008038:	2280      	movs	r2, #128	@ 0x80
 800803a:	0292      	lsls	r2, r2, #10
 800803c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800803e:	187b      	adds	r3, r7, r1
 8008040:	2280      	movs	r2, #128	@ 0x80
 8008042:	0492      	lsls	r2, r2, #18
 8008044:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008046:	187b      	adds	r3, r7, r1
 8008048:	2280      	movs	r2, #128	@ 0x80
 800804a:	0592      	lsls	r2, r2, #22
 800804c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800804e:	187b      	adds	r3, r7, r1
 8008050:	0018      	movs	r0, r3
 8008052:	f7fc fc53 	bl	80048fc <HAL_RCC_OscConfig>
 8008056:	1e03      	subs	r3, r0, #0
 8008058:	d001      	beq.n	800805e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800805a:	f000 f82d 	bl	80080b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800805e:	003b      	movs	r3, r7
 8008060:	2207      	movs	r2, #7
 8008062:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008064:	003b      	movs	r3, r7
 8008066:	2202      	movs	r2, #2
 8008068:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800806a:	003b      	movs	r3, r7
 800806c:	2200      	movs	r2, #0
 800806e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008070:	003b      	movs	r3, r7
 8008072:	2200      	movs	r2, #0
 8008074:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008076:	003b      	movs	r3, r7
 8008078:	2102      	movs	r1, #2
 800807a:	0018      	movs	r0, r3
 800807c:	f7fc ff58 	bl	8004f30 <HAL_RCC_ClockConfig>
 8008080:	1e03      	subs	r3, r0, #0
 8008082:	d001      	beq.n	8008088 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8008084:	f000 f818 	bl	80080b8 <Error_Handler>
  }
}
 8008088:	46c0      	nop			@ (mov r8, r8)
 800808a:	46bd      	mov	sp, r7
 800808c:	b013      	add	sp, #76	@ 0x4c
 800808e:	bd90      	pop	{r4, r7, pc}

08008090 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	0002      	movs	r2, r0
 8008098:	1dbb      	adds	r3, r7, #6
 800809a:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GYRO_INT_Pin) {
 800809c:	1dbb      	adds	r3, r7, #6
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d102      	bne.n	80080aa <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		flagDrdyG = 1;
 80080a4:	4b03      	ldr	r3, [pc, #12]	@ (80080b4 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 80080a6:	2201      	movs	r2, #1
 80080a8:	701a      	strb	r2, [r3, #0]
	}
}
 80080aa:	46c0      	nop			@ (mov r8, r8)
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b002      	add	sp, #8
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	46c0      	nop			@ (mov r8, r8)
 80080b4:	20000178 	.word	0x20000178

080080b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80080bc:	b672      	cpsid	i
}
 80080be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80080c0:	46c0      	nop			@ (mov r8, r8)
 80080c2:	e7fd      	b.n	80080c0 <Error_Handler+0x8>

080080c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008108 <HAL_MspInit+0x44>)
 80080cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008108 <HAL_MspInit+0x44>)
 80080d0:	2101      	movs	r1, #1
 80080d2:	430a      	orrs	r2, r1
 80080d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80080d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008108 <HAL_MspInit+0x44>)
 80080d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080da:	2201      	movs	r2, #1
 80080dc:	4013      	ands	r3, r2
 80080de:	607b      	str	r3, [r7, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080e2:	4b09      	ldr	r3, [pc, #36]	@ (8008108 <HAL_MspInit+0x44>)
 80080e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080e6:	4b08      	ldr	r3, [pc, #32]	@ (8008108 <HAL_MspInit+0x44>)
 80080e8:	2180      	movs	r1, #128	@ 0x80
 80080ea:	0549      	lsls	r1, r1, #21
 80080ec:	430a      	orrs	r2, r1
 80080ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80080f0:	4b05      	ldr	r3, [pc, #20]	@ (8008108 <HAL_MspInit+0x44>)
 80080f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080f4:	2380      	movs	r3, #128	@ 0x80
 80080f6:	055b      	lsls	r3, r3, #21
 80080f8:	4013      	ands	r3, r2
 80080fa:	603b      	str	r3, [r7, #0]
 80080fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080fe:	46c0      	nop			@ (mov r8, r8)
 8008100:	46bd      	mov	sp, r7
 8008102:	b002      	add	sp, #8
 8008104:	bd80      	pop	{r7, pc}
 8008106:	46c0      	nop			@ (mov r8, r8)
 8008108:	40021000 	.word	0x40021000

0800810c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008110:	46c0      	nop			@ (mov r8, r8)
 8008112:	e7fd      	b.n	8008110 <NMI_Handler+0x4>

08008114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008118:	46c0      	nop			@ (mov r8, r8)
 800811a:	e7fd      	b.n	8008118 <HardFault_Handler+0x4>

0800811c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008120:	46c0      	nop			@ (mov r8, r8)
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800812a:	46c0      	nop			@ (mov r8, r8)
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008134:	f7fa f9ba 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008138:	46c0      	nop			@ (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8008142:	2001      	movs	r0, #1
 8008144:	f7fb fcbe 	bl	8003ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8008148:	46c0      	nop			@ (mov r8, r8)
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008154:	4b03      	ldr	r3, [pc, #12]	@ (8008164 <DMA1_Channel1_IRQHandler+0x14>)
 8008156:	0018      	movs	r0, r3
 8008158:	f7fb f944 	bl	80033e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800815c:	46c0      	nop			@ (mov r8, r8)
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	46c0      	nop			@ (mov r8, r8)
 8008164:	200002a4 	.word	0x200002a4

08008168 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800816c:	4b03      	ldr	r3, [pc, #12]	@ (800817c <USART1_IRQHandler+0x14>)
 800816e:	0018      	movs	r0, r3
 8008170:	f7fd fb7a 	bl	8005868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008174:	46c0      	nop			@ (mov r8, r8)
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	46c0      	nop			@ (mov r8, r8)
 800817c:	2000017c 	.word	0x2000017c

08008180 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008184:	46c0      	nop			@ (mov r8, r8)
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008190:	4b23      	ldr	r3, [pc, #140]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 8008192:	4a24      	ldr	r2, [pc, #144]	@ (8008224 <MX_USART1_UART_Init+0x98>)
 8008194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008196:	4b22      	ldr	r3, [pc, #136]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 8008198:	22e1      	movs	r2, #225	@ 0xe1
 800819a:	0252      	lsls	r2, r2, #9
 800819c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800819e:	4b20      	ldr	r3, [pc, #128]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80081a4:	4b1e      	ldr	r3, [pc, #120]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80081aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80081b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081b2:	220c      	movs	r2, #12
 80081b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80081bc:	4b18      	ldr	r3, [pc, #96]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081be:	2200      	movs	r2, #0
 80081c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80081c2:	4b17      	ldr	r3, [pc, #92]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80081c8:	4b15      	ldr	r3, [pc, #84]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80081ce:	4b14      	ldr	r3, [pc, #80]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80081d4:	4b12      	ldr	r3, [pc, #72]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081d6:	0018      	movs	r0, r3
 80081d8:	f7fd fa0c 	bl	80055f4 <HAL_UART_Init>
 80081dc:	1e03      	subs	r3, r0, #0
 80081de:	d001      	beq.n	80081e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80081e0:	f7ff ff6a 	bl	80080b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80081e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081e6:	2100      	movs	r1, #0
 80081e8:	0018      	movs	r0, r3
 80081ea:	f7fe fc07 	bl	80069fc <HAL_UARTEx_SetTxFifoThreshold>
 80081ee:	1e03      	subs	r3, r0, #0
 80081f0:	d001      	beq.n	80081f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80081f2:	f7ff ff61 	bl	80080b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80081f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 80081f8:	2100      	movs	r1, #0
 80081fa:	0018      	movs	r0, r3
 80081fc:	f7fe fc3e 	bl	8006a7c <HAL_UARTEx_SetRxFifoThreshold>
 8008200:	1e03      	subs	r3, r0, #0
 8008202:	d001      	beq.n	8008208 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008204:	f7ff ff58 	bl	80080b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008208:	4b05      	ldr	r3, [pc, #20]	@ (8008220 <MX_USART1_UART_Init+0x94>)
 800820a:	0018      	movs	r0, r3
 800820c:	f7fe fbbc 	bl	8006988 <HAL_UARTEx_DisableFifoMode>
 8008210:	1e03      	subs	r3, r0, #0
 8008212:	d001      	beq.n	8008218 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008214:	f7ff ff50 	bl	80080b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008218:	46c0      	nop			@ (mov r8, r8)
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	46c0      	nop			@ (mov r8, r8)
 8008220:	2000017c 	.word	0x2000017c
 8008224:	40013800 	.word	0x40013800

08008228 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800822c:	4b23      	ldr	r3, [pc, #140]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 800822e:	4a24      	ldr	r2, [pc, #144]	@ (80082c0 <MX_USART2_UART_Init+0x98>)
 8008230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008232:	4b22      	ldr	r3, [pc, #136]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 8008234:	22e1      	movs	r2, #225	@ 0xe1
 8008236:	0252      	lsls	r2, r2, #9
 8008238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800823a:	4b20      	ldr	r3, [pc, #128]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 800823c:	2200      	movs	r2, #0
 800823e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008240:	4b1e      	ldr	r3, [pc, #120]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 8008242:	2200      	movs	r2, #0
 8008244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008246:	4b1d      	ldr	r3, [pc, #116]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 8008248:	2200      	movs	r2, #0
 800824a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800824c:	4b1b      	ldr	r3, [pc, #108]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 800824e:	220c      	movs	r2, #12
 8008250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008252:	4b1a      	ldr	r3, [pc, #104]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 8008254:	2200      	movs	r2, #0
 8008256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008258:	4b18      	ldr	r3, [pc, #96]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 800825a:	2200      	movs	r2, #0
 800825c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800825e:	4b17      	ldr	r3, [pc, #92]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 8008260:	2200      	movs	r2, #0
 8008262:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008264:	4b15      	ldr	r3, [pc, #84]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 8008266:	2200      	movs	r2, #0
 8008268:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800826a:	4b14      	ldr	r3, [pc, #80]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 800826c:	2200      	movs	r2, #0
 800826e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008270:	4b12      	ldr	r3, [pc, #72]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 8008272:	0018      	movs	r0, r3
 8008274:	f7fd f9be 	bl	80055f4 <HAL_UART_Init>
 8008278:	1e03      	subs	r3, r0, #0
 800827a:	d001      	beq.n	8008280 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800827c:	f7ff ff1c 	bl	80080b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008280:	4b0e      	ldr	r3, [pc, #56]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 8008282:	2100      	movs	r1, #0
 8008284:	0018      	movs	r0, r3
 8008286:	f7fe fbb9 	bl	80069fc <HAL_UARTEx_SetTxFifoThreshold>
 800828a:	1e03      	subs	r3, r0, #0
 800828c:	d001      	beq.n	8008292 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800828e:	f7ff ff13 	bl	80080b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008292:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 8008294:	2100      	movs	r1, #0
 8008296:	0018      	movs	r0, r3
 8008298:	f7fe fbf0 	bl	8006a7c <HAL_UARTEx_SetRxFifoThreshold>
 800829c:	1e03      	subs	r3, r0, #0
 800829e:	d001      	beq.n	80082a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80082a0:	f7ff ff0a 	bl	80080b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80082a4:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <MX_USART2_UART_Init+0x94>)
 80082a6:	0018      	movs	r0, r3
 80082a8:	f7fe fb6e 	bl	8006988 <HAL_UARTEx_DisableFifoMode>
 80082ac:	1e03      	subs	r3, r0, #0
 80082ae:	d001      	beq.n	80082b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80082b0:	f7ff ff02 	bl	80080b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80082b4:	46c0      	nop			@ (mov r8, r8)
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	46c0      	nop			@ (mov r8, r8)
 80082bc:	20000210 	.word	0x20000210
 80082c0:	40004400 	.word	0x40004400

080082c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b099      	sub	sp, #100	@ 0x64
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082cc:	234c      	movs	r3, #76	@ 0x4c
 80082ce:	18fb      	adds	r3, r7, r3
 80082d0:	0018      	movs	r0, r3
 80082d2:	2314      	movs	r3, #20
 80082d4:	001a      	movs	r2, r3
 80082d6:	2100      	movs	r1, #0
 80082d8:	f000 f9a2 	bl	8008620 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082dc:	2418      	movs	r4, #24
 80082de:	193b      	adds	r3, r7, r4
 80082e0:	0018      	movs	r0, r3
 80082e2:	2334      	movs	r3, #52	@ 0x34
 80082e4:	001a      	movs	r2, r3
 80082e6:	2100      	movs	r1, #0
 80082e8:	f000 f99a 	bl	8008620 <memset>
  if(uartHandle->Instance==USART1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a5d      	ldr	r2, [pc, #372]	@ (8008468 <HAL_UART_MspInit+0x1a4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d16f      	bne.n	80083d6 <HAL_UART_MspInit+0x112>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80082f6:	193b      	adds	r3, r7, r4
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80082fc:	193b      	adds	r3, r7, r4
 80082fe:	2200      	movs	r2, #0
 8008300:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008302:	193b      	adds	r3, r7, r4
 8008304:	0018      	movs	r0, r3
 8008306:	f7fc ffbd 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 800830a:	1e03      	subs	r3, r0, #0
 800830c:	d001      	beq.n	8008312 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800830e:	f7ff fed3 	bl	80080b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008312:	4b56      	ldr	r3, [pc, #344]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 8008314:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008316:	4b55      	ldr	r3, [pc, #340]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 8008318:	2180      	movs	r1, #128	@ 0x80
 800831a:	01c9      	lsls	r1, r1, #7
 800831c:	430a      	orrs	r2, r1
 800831e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008320:	4b52      	ldr	r3, [pc, #328]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 8008322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008324:	2380      	movs	r3, #128	@ 0x80
 8008326:	01db      	lsls	r3, r3, #7
 8008328:	4013      	ands	r3, r2
 800832a:	617b      	str	r3, [r7, #20]
 800832c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800832e:	4b4f      	ldr	r3, [pc, #316]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 8008330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008332:	4b4e      	ldr	r3, [pc, #312]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 8008334:	2104      	movs	r1, #4
 8008336:	430a      	orrs	r2, r1
 8008338:	635a      	str	r2, [r3, #52]	@ 0x34
 800833a:	4b4c      	ldr	r3, [pc, #304]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 800833c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800833e:	2204      	movs	r2, #4
 8008340:	4013      	ands	r3, r2
 8008342:	613b      	str	r3, [r7, #16]
 8008344:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8008346:	214c      	movs	r1, #76	@ 0x4c
 8008348:	187b      	adds	r3, r7, r1
 800834a:	2230      	movs	r2, #48	@ 0x30
 800834c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800834e:	187b      	adds	r3, r7, r1
 8008350:	2202      	movs	r2, #2
 8008352:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008354:	187b      	adds	r3, r7, r1
 8008356:	2200      	movs	r2, #0
 8008358:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800835a:	187b      	adds	r3, r7, r1
 800835c:	2200      	movs	r2, #0
 800835e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8008360:	187b      	adds	r3, r7, r1
 8008362:	2201      	movs	r2, #1
 8008364:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008366:	187b      	adds	r3, r7, r1
 8008368:	4a41      	ldr	r2, [pc, #260]	@ (8008470 <HAL_UART_MspInit+0x1ac>)
 800836a:	0019      	movs	r1, r3
 800836c:	0010      	movs	r0, r2
 800836e:	f7fb f93b 	bl	80035e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8008372:	4b40      	ldr	r3, [pc, #256]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 8008374:	4a40      	ldr	r2, [pc, #256]	@ (8008478 <HAL_UART_MspInit+0x1b4>)
 8008376:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8008378:	4b3e      	ldr	r3, [pc, #248]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 800837a:	2233      	movs	r2, #51	@ 0x33
 800837c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800837e:	4b3d      	ldr	r3, [pc, #244]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 8008380:	2210      	movs	r2, #16
 8008382:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008384:	4b3b      	ldr	r3, [pc, #236]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 8008386:	2200      	movs	r2, #0
 8008388:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800838a:	4b3a      	ldr	r3, [pc, #232]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 800838c:	2280      	movs	r2, #128	@ 0x80
 800838e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008390:	4b38      	ldr	r3, [pc, #224]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 8008392:	2200      	movs	r2, #0
 8008394:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008396:	4b37      	ldr	r3, [pc, #220]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 8008398:	2200      	movs	r2, #0
 800839a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800839c:	4b35      	ldr	r3, [pc, #212]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 800839e:	2200      	movs	r2, #0
 80083a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80083a2:	4b34      	ldr	r3, [pc, #208]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80083a8:	4b32      	ldr	r3, [pc, #200]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 80083aa:	0018      	movs	r0, r3
 80083ac:	f7fa fe4c 	bl	8003048 <HAL_DMA_Init>
 80083b0:	1e03      	subs	r3, r0, #0
 80083b2:	d001      	beq.n	80083b8 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80083b4:	f7ff fe80 	bl	80080b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a2e      	ldr	r2, [pc, #184]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 80083bc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80083be:	4b2d      	ldr	r3, [pc, #180]	@ (8008474 <HAL_UART_MspInit+0x1b0>)
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80083c4:	2200      	movs	r2, #0
 80083c6:	2100      	movs	r1, #0
 80083c8:	201b      	movs	r0, #27
 80083ca:	f7fa fdfb 	bl	8002fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80083ce:	201b      	movs	r0, #27
 80083d0:	f7fa fe0d 	bl	8002fee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80083d4:	e044      	b.n	8008460 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a28      	ldr	r2, [pc, #160]	@ (800847c <HAL_UART_MspInit+0x1b8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d13f      	bne.n	8008460 <HAL_UART_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80083e0:	2118      	movs	r1, #24
 80083e2:	187b      	adds	r3, r7, r1
 80083e4:	2202      	movs	r2, #2
 80083e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80083e8:	187b      	adds	r3, r7, r1
 80083ea:	2200      	movs	r2, #0
 80083ec:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083ee:	187b      	adds	r3, r7, r1
 80083f0:	0018      	movs	r0, r3
 80083f2:	f7fc ff47 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 80083f6:	1e03      	subs	r3, r0, #0
 80083f8:	d001      	beq.n	80083fe <HAL_UART_MspInit+0x13a>
      Error_Handler();
 80083fa:	f7ff fe5d 	bl	80080b8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80083fe:	4b1b      	ldr	r3, [pc, #108]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 8008400:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008402:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 8008404:	2180      	movs	r1, #128	@ 0x80
 8008406:	0289      	lsls	r1, r1, #10
 8008408:	430a      	orrs	r2, r1
 800840a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800840c:	4b17      	ldr	r3, [pc, #92]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 800840e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008410:	2380      	movs	r3, #128	@ 0x80
 8008412:	029b      	lsls	r3, r3, #10
 8008414:	4013      	ands	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800841a:	4b14      	ldr	r3, [pc, #80]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 800841c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800841e:	4b13      	ldr	r3, [pc, #76]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 8008420:	2101      	movs	r1, #1
 8008422:	430a      	orrs	r2, r1
 8008424:	635a      	str	r2, [r3, #52]	@ 0x34
 8008426:	4b11      	ldr	r3, [pc, #68]	@ (800846c <HAL_UART_MspInit+0x1a8>)
 8008428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800842a:	2201      	movs	r2, #1
 800842c:	4013      	ands	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008432:	214c      	movs	r1, #76	@ 0x4c
 8008434:	187b      	adds	r3, r7, r1
 8008436:	220c      	movs	r2, #12
 8008438:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800843a:	187b      	adds	r3, r7, r1
 800843c:	2202      	movs	r2, #2
 800843e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008440:	187b      	adds	r3, r7, r1
 8008442:	2200      	movs	r2, #0
 8008444:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008446:	187b      	adds	r3, r7, r1
 8008448:	2200      	movs	r2, #0
 800844a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800844c:	187b      	adds	r3, r7, r1
 800844e:	2201      	movs	r2, #1
 8008450:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008452:	187a      	adds	r2, r7, r1
 8008454:	23a0      	movs	r3, #160	@ 0xa0
 8008456:	05db      	lsls	r3, r3, #23
 8008458:	0011      	movs	r1, r2
 800845a:	0018      	movs	r0, r3
 800845c:	f7fb f8c4 	bl	80035e8 <HAL_GPIO_Init>
}
 8008460:	46c0      	nop			@ (mov r8, r8)
 8008462:	46bd      	mov	sp, r7
 8008464:	b019      	add	sp, #100	@ 0x64
 8008466:	bd90      	pop	{r4, r7, pc}
 8008468:	40013800 	.word	0x40013800
 800846c:	40021000 	.word	0x40021000
 8008470:	50000800 	.word	0x50000800
 8008474:	200002a4 	.word	0x200002a4
 8008478:	40020008 	.word	0x40020008
 800847c:	40004400 	.word	0x40004400

08008480 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a15      	ldr	r2, [pc, #84]	@ (80084e4 <HAL_UART_MspDeInit+0x64>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d113      	bne.n	80084ba <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8008492:	4b15      	ldr	r3, [pc, #84]	@ (80084e8 <HAL_UART_MspDeInit+0x68>)
 8008494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008496:	4b14      	ldr	r3, [pc, #80]	@ (80084e8 <HAL_UART_MspDeInit+0x68>)
 8008498:	4914      	ldr	r1, [pc, #80]	@ (80084ec <HAL_UART_MspDeInit+0x6c>)
 800849a:	400a      	ands	r2, r1
 800849c:	641a      	str	r2, [r3, #64]	@ 0x40

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, ESP_TX_Pin|ESP_RX_Pin);
 800849e:	4b14      	ldr	r3, [pc, #80]	@ (80084f0 <HAL_UART_MspDeInit+0x70>)
 80084a0:	2130      	movs	r1, #48	@ 0x30
 80084a2:	0018      	movs	r0, r3
 80084a4:	f7fb fa04 	bl	80038b0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ac:	0018      	movs	r0, r3
 80084ae:	f7fa fe55 	bl	800315c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80084b2:	201b      	movs	r0, #27
 80084b4:	f7fa fdab 	bl	800300e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80084b8:	e010      	b.n	80084dc <HAL_UART_MspDeInit+0x5c>
  else if(uartHandle->Instance==USART2)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a0d      	ldr	r2, [pc, #52]	@ (80084f4 <HAL_UART_MspDeInit+0x74>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d10b      	bne.n	80084dc <HAL_UART_MspDeInit+0x5c>
    __HAL_RCC_USART2_CLK_DISABLE();
 80084c4:	4b08      	ldr	r3, [pc, #32]	@ (80084e8 <HAL_UART_MspDeInit+0x68>)
 80084c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084c8:	4b07      	ldr	r3, [pc, #28]	@ (80084e8 <HAL_UART_MspDeInit+0x68>)
 80084ca:	490b      	ldr	r1, [pc, #44]	@ (80084f8 <HAL_UART_MspDeInit+0x78>)
 80084cc:	400a      	ands	r2, r1
 80084ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80084d0:	23a0      	movs	r3, #160	@ 0xa0
 80084d2:	05db      	lsls	r3, r3, #23
 80084d4:	210c      	movs	r1, #12
 80084d6:	0018      	movs	r0, r3
 80084d8:	f7fb f9ea 	bl	80038b0 <HAL_GPIO_DeInit>
}
 80084dc:	46c0      	nop			@ (mov r8, r8)
 80084de:	46bd      	mov	sp, r7
 80084e0:	b002      	add	sp, #8
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	40013800 	.word	0x40013800
 80084e8:	40021000 	.word	0x40021000
 80084ec:	ffffbfff 	.word	0xffffbfff
 80084f0:	50000800 	.word	0x50000800
 80084f4:	40004400 	.word	0x40004400
 80084f8:	fffdffff 	.word	0xfffdffff

080084fc <HAL_UART_ChangeSpeed>:

/* USER CODE BEGIN 1 */

void HAL_UART_ChangeSpeed(UART_HandleTypeDef *huart, uint32_t baudrate){
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]

	HAL_UART_DeInit(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	0018      	movs	r0, r3
 800850a:	f7fd f8c9 	bl	80056a0 <HAL_UART_DeInit>

	huart->Init.BaudRate = baudrate;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	605a      	str	r2, [r3, #4]

	if(HAL_UART_Init(huart)!=HAL_OK)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	0018      	movs	r0, r3
 8008518:	f7fd f86c 	bl	80055f4 <HAL_UART_Init>
 800851c:	1e03      	subs	r3, r0, #0
 800851e:	d001      	beq.n	8008524 <HAL_UART_ChangeSpeed+0x28>
		Error_Handler();
 8008520:	f7ff fdca 	bl	80080b8 <Error_Handler>

}
 8008524:	46c0      	nop			@ (mov r8, r8)
 8008526:	46bd      	mov	sp, r7
 8008528:	b002      	add	sp, #8
 800852a:	bd80      	pop	{r7, pc}

0800852c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800852c:	480d      	ldr	r0, [pc, #52]	@ (8008564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800852e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008530:	f7ff fe26 	bl	8008180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008534:	480c      	ldr	r0, [pc, #48]	@ (8008568 <LoopForever+0x6>)
  ldr r1, =_edata
 8008536:	490d      	ldr	r1, [pc, #52]	@ (800856c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008538:	4a0d      	ldr	r2, [pc, #52]	@ (8008570 <LoopForever+0xe>)
  movs r3, #0
 800853a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800853c:	e002      	b.n	8008544 <LoopCopyDataInit>

0800853e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800853e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008542:	3304      	adds	r3, #4

08008544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008548:	d3f9      	bcc.n	800853e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800854a:	4a0a      	ldr	r2, [pc, #40]	@ (8008574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800854c:	4c0a      	ldr	r4, [pc, #40]	@ (8008578 <LoopForever+0x16>)
  movs r3, #0
 800854e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008550:	e001      	b.n	8008556 <LoopFillZerobss>

08008552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008554:	3204      	adds	r2, #4

08008556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008558:	d3fb      	bcc.n	8008552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800855a:	f000 f86f 	bl	800863c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800855e:	f7ff fb9b 	bl	8007c98 <main>

08008562 <LoopForever>:

LoopForever:
  b LoopForever
 8008562:	e7fe      	b.n	8008562 <LoopForever>
  ldr   r0, =_estack
 8008564:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8008568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800856c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8008570:	08009680 	.word	0x08009680
  ldr r2, =_sbss
 8008574:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8008578:	20000438 	.word	0x20000438

0800857c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800857c:	e7fe      	b.n	800857c <ADC1_COMP_IRQHandler>

0800857e <__itoa>:
 800857e:	1e93      	subs	r3, r2, #2
 8008580:	b510      	push	{r4, lr}
 8008582:	000c      	movs	r4, r1
 8008584:	2b22      	cmp	r3, #34	@ 0x22
 8008586:	d904      	bls.n	8008592 <__itoa+0x14>
 8008588:	2300      	movs	r3, #0
 800858a:	001c      	movs	r4, r3
 800858c:	700b      	strb	r3, [r1, #0]
 800858e:	0020      	movs	r0, r4
 8008590:	bd10      	pop	{r4, pc}
 8008592:	2a0a      	cmp	r2, #10
 8008594:	d109      	bne.n	80085aa <__itoa+0x2c>
 8008596:	2800      	cmp	r0, #0
 8008598:	da07      	bge.n	80085aa <__itoa+0x2c>
 800859a:	232d      	movs	r3, #45	@ 0x2d
 800859c:	700b      	strb	r3, [r1, #0]
 800859e:	2101      	movs	r1, #1
 80085a0:	4240      	negs	r0, r0
 80085a2:	1861      	adds	r1, r4, r1
 80085a4:	f000 f808 	bl	80085b8 <__utoa>
 80085a8:	e7f1      	b.n	800858e <__itoa+0x10>
 80085aa:	2100      	movs	r1, #0
 80085ac:	e7f9      	b.n	80085a2 <__itoa+0x24>

080085ae <itoa>:
 80085ae:	b510      	push	{r4, lr}
 80085b0:	f7ff ffe5 	bl	800857e <__itoa>
 80085b4:	bd10      	pop	{r4, pc}
	...

080085b8 <__utoa>:
 80085b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ba:	000c      	movs	r4, r1
 80085bc:	0016      	movs	r6, r2
 80085be:	b08d      	sub	sp, #52	@ 0x34
 80085c0:	2225      	movs	r2, #37	@ 0x25
 80085c2:	0007      	movs	r7, r0
 80085c4:	4915      	ldr	r1, [pc, #84]	@ (800861c <__utoa+0x64>)
 80085c6:	a802      	add	r0, sp, #8
 80085c8:	f000 f85c 	bl	8008684 <memcpy>
 80085cc:	1e62      	subs	r2, r4, #1
 80085ce:	1eb3      	subs	r3, r6, #2
 80085d0:	2500      	movs	r5, #0
 80085d2:	9201      	str	r2, [sp, #4]
 80085d4:	2b22      	cmp	r3, #34	@ 0x22
 80085d6:	d904      	bls.n	80085e2 <__utoa+0x2a>
 80085d8:	7025      	strb	r5, [r4, #0]
 80085da:	002c      	movs	r4, r5
 80085dc:	0020      	movs	r0, r4
 80085de:	b00d      	add	sp, #52	@ 0x34
 80085e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e2:	0038      	movs	r0, r7
 80085e4:	0031      	movs	r1, r6
 80085e6:	f7f7 fe1b 	bl	8000220 <__aeabi_uidivmod>
 80085ea:	000b      	movs	r3, r1
 80085ec:	aa02      	add	r2, sp, #8
 80085ee:	5cd3      	ldrb	r3, [r2, r3]
 80085f0:	9a01      	ldr	r2, [sp, #4]
 80085f2:	0029      	movs	r1, r5
 80085f4:	3501      	adds	r5, #1
 80085f6:	5553      	strb	r3, [r2, r5]
 80085f8:	003b      	movs	r3, r7
 80085fa:	0007      	movs	r7, r0
 80085fc:	429e      	cmp	r6, r3
 80085fe:	d9f0      	bls.n	80085e2 <__utoa+0x2a>
 8008600:	2300      	movs	r3, #0
 8008602:	0022      	movs	r2, r4
 8008604:	5563      	strb	r3, [r4, r5]
 8008606:	000b      	movs	r3, r1
 8008608:	1ac8      	subs	r0, r1, r3
 800860a:	4283      	cmp	r3, r0
 800860c:	dde6      	ble.n	80085dc <__utoa+0x24>
 800860e:	7810      	ldrb	r0, [r2, #0]
 8008610:	5ce5      	ldrb	r5, [r4, r3]
 8008612:	7015      	strb	r5, [r2, #0]
 8008614:	54e0      	strb	r0, [r4, r3]
 8008616:	3201      	adds	r2, #1
 8008618:	3b01      	subs	r3, #1
 800861a:	e7f5      	b.n	8008608 <__utoa+0x50>
 800861c:	08009618 	.word	0x08009618

08008620 <memset>:
 8008620:	0003      	movs	r3, r0
 8008622:	1882      	adds	r2, r0, r2
 8008624:	4293      	cmp	r3, r2
 8008626:	d100      	bne.n	800862a <memset+0xa>
 8008628:	4770      	bx	lr
 800862a:	7019      	strb	r1, [r3, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	e7f9      	b.n	8008624 <memset+0x4>

08008630 <__errno>:
 8008630:	4b01      	ldr	r3, [pc, #4]	@ (8008638 <__errno+0x8>)
 8008632:	6818      	ldr	r0, [r3, #0]
 8008634:	4770      	bx	lr
 8008636:	46c0      	nop			@ (mov r8, r8)
 8008638:	2000000c 	.word	0x2000000c

0800863c <__libc_init_array>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	2600      	movs	r6, #0
 8008640:	4c0c      	ldr	r4, [pc, #48]	@ (8008674 <__libc_init_array+0x38>)
 8008642:	4d0d      	ldr	r5, [pc, #52]	@ (8008678 <__libc_init_array+0x3c>)
 8008644:	1b64      	subs	r4, r4, r5
 8008646:	10a4      	asrs	r4, r4, #2
 8008648:	42a6      	cmp	r6, r4
 800864a:	d109      	bne.n	8008660 <__libc_init_array+0x24>
 800864c:	2600      	movs	r6, #0
 800864e:	f000 ff4b 	bl	80094e8 <_init>
 8008652:	4c0a      	ldr	r4, [pc, #40]	@ (800867c <__libc_init_array+0x40>)
 8008654:	4d0a      	ldr	r5, [pc, #40]	@ (8008680 <__libc_init_array+0x44>)
 8008656:	1b64      	subs	r4, r4, r5
 8008658:	10a4      	asrs	r4, r4, #2
 800865a:	42a6      	cmp	r6, r4
 800865c:	d105      	bne.n	800866a <__libc_init_array+0x2e>
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	00b3      	lsls	r3, r6, #2
 8008662:	58eb      	ldr	r3, [r5, r3]
 8008664:	4798      	blx	r3
 8008666:	3601      	adds	r6, #1
 8008668:	e7ee      	b.n	8008648 <__libc_init_array+0xc>
 800866a:	00b3      	lsls	r3, r6, #2
 800866c:	58eb      	ldr	r3, [r5, r3]
 800866e:	4798      	blx	r3
 8008670:	3601      	adds	r6, #1
 8008672:	e7f2      	b.n	800865a <__libc_init_array+0x1e>
 8008674:	08009678 	.word	0x08009678
 8008678:	08009678 	.word	0x08009678
 800867c:	0800967c 	.word	0x0800967c
 8008680:	08009678 	.word	0x08009678

08008684 <memcpy>:
 8008684:	2300      	movs	r3, #0
 8008686:	b510      	push	{r4, lr}
 8008688:	429a      	cmp	r2, r3
 800868a:	d100      	bne.n	800868e <memcpy+0xa>
 800868c:	bd10      	pop	{r4, pc}
 800868e:	5ccc      	ldrb	r4, [r1, r3]
 8008690:	54c4      	strb	r4, [r0, r3]
 8008692:	3301      	adds	r3, #1
 8008694:	e7f8      	b.n	8008688 <memcpy+0x4>
	...

08008698 <pow>:
 8008698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800869a:	0014      	movs	r4, r2
 800869c:	001d      	movs	r5, r3
 800869e:	9000      	str	r0, [sp, #0]
 80086a0:	9101      	str	r1, [sp, #4]
 80086a2:	f000 f86f 	bl	8008784 <__ieee754_pow>
 80086a6:	0022      	movs	r2, r4
 80086a8:	0006      	movs	r6, r0
 80086aa:	000f      	movs	r7, r1
 80086ac:	002b      	movs	r3, r5
 80086ae:	0020      	movs	r0, r4
 80086b0:	0029      	movs	r1, r5
 80086b2:	f7f9 fddb 	bl	800226c <__aeabi_dcmpun>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d13f      	bne.n	800873a <pow+0xa2>
 80086ba:	9800      	ldr	r0, [sp, #0]
 80086bc:	9901      	ldr	r1, [sp, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	2300      	movs	r3, #0
 80086c2:	f7f7 fead 	bl	8000420 <__aeabi_dcmpeq>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d019      	beq.n	80086fe <pow+0x66>
 80086ca:	2200      	movs	r2, #0
 80086cc:	2300      	movs	r3, #0
 80086ce:	0020      	movs	r0, r4
 80086d0:	0029      	movs	r1, r5
 80086d2:	f7f7 fea5 	bl	8000420 <__aeabi_dcmpeq>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d146      	bne.n	8008768 <pow+0xd0>
 80086da:	0020      	movs	r0, r4
 80086dc:	0029      	movs	r1, r5
 80086de:	f000 f849 	bl	8008774 <finite>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d029      	beq.n	800873a <pow+0xa2>
 80086e6:	2200      	movs	r2, #0
 80086e8:	2300      	movs	r3, #0
 80086ea:	0020      	movs	r0, r4
 80086ec:	0029      	movs	r1, r5
 80086ee:	f7f7 fe9d 	bl	800042c <__aeabi_dcmplt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d021      	beq.n	800873a <pow+0xa2>
 80086f6:	f7ff ff9b 	bl	8008630 <__errno>
 80086fa:	2322      	movs	r3, #34	@ 0x22
 80086fc:	e01c      	b.n	8008738 <pow+0xa0>
 80086fe:	0030      	movs	r0, r6
 8008700:	0039      	movs	r1, r7
 8008702:	f000 f837 	bl	8008774 <finite>
 8008706:	2800      	cmp	r0, #0
 8008708:	d11b      	bne.n	8008742 <pow+0xaa>
 800870a:	9800      	ldr	r0, [sp, #0]
 800870c:	9901      	ldr	r1, [sp, #4]
 800870e:	f000 f831 	bl	8008774 <finite>
 8008712:	2800      	cmp	r0, #0
 8008714:	d015      	beq.n	8008742 <pow+0xaa>
 8008716:	0020      	movs	r0, r4
 8008718:	0029      	movs	r1, r5
 800871a:	f000 f82b 	bl	8008774 <finite>
 800871e:	2800      	cmp	r0, #0
 8008720:	d00f      	beq.n	8008742 <pow+0xaa>
 8008722:	0032      	movs	r2, r6
 8008724:	003b      	movs	r3, r7
 8008726:	0030      	movs	r0, r6
 8008728:	0039      	movs	r1, r7
 800872a:	f7f9 fd9f 	bl	800226c <__aeabi_dcmpun>
 800872e:	2800      	cmp	r0, #0
 8008730:	d0e1      	beq.n	80086f6 <pow+0x5e>
 8008732:	f7ff ff7d 	bl	8008630 <__errno>
 8008736:	2321      	movs	r3, #33	@ 0x21
 8008738:	6003      	str	r3, [r0, #0]
 800873a:	0030      	movs	r0, r6
 800873c:	0039      	movs	r1, r7
 800873e:	b003      	add	sp, #12
 8008740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008742:	2200      	movs	r2, #0
 8008744:	2300      	movs	r3, #0
 8008746:	0030      	movs	r0, r6
 8008748:	0039      	movs	r1, r7
 800874a:	f7f7 fe69 	bl	8000420 <__aeabi_dcmpeq>
 800874e:	2800      	cmp	r0, #0
 8008750:	d0f3      	beq.n	800873a <pow+0xa2>
 8008752:	9800      	ldr	r0, [sp, #0]
 8008754:	9901      	ldr	r1, [sp, #4]
 8008756:	f000 f80d 	bl	8008774 <finite>
 800875a:	2800      	cmp	r0, #0
 800875c:	d0ed      	beq.n	800873a <pow+0xa2>
 800875e:	0020      	movs	r0, r4
 8008760:	0029      	movs	r1, r5
 8008762:	f000 f807 	bl	8008774 <finite>
 8008766:	e7c4      	b.n	80086f2 <pow+0x5a>
 8008768:	2600      	movs	r6, #0
 800876a:	4f01      	ldr	r7, [pc, #4]	@ (8008770 <pow+0xd8>)
 800876c:	e7e5      	b.n	800873a <pow+0xa2>
 800876e:	46c0      	nop			@ (mov r8, r8)
 8008770:	3ff00000 	.word	0x3ff00000

08008774 <finite>:
 8008774:	4b02      	ldr	r3, [pc, #8]	@ (8008780 <finite+0xc>)
 8008776:	0048      	lsls	r0, r1, #1
 8008778:	0840      	lsrs	r0, r0, #1
 800877a:	18c0      	adds	r0, r0, r3
 800877c:	0fc0      	lsrs	r0, r0, #31
 800877e:	4770      	bx	lr
 8008780:	80100000 	.word	0x80100000

08008784 <__ieee754_pow>:
 8008784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008786:	b095      	sub	sp, #84	@ 0x54
 8008788:	9202      	str	r2, [sp, #8]
 800878a:	9303      	str	r3, [sp, #12]
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	9a03      	ldr	r2, [sp, #12]
 8008790:	9306      	str	r3, [sp, #24]
 8008792:	0052      	lsls	r2, r2, #1
 8008794:	9b02      	ldr	r3, [sp, #8]
 8008796:	0852      	lsrs	r2, r2, #1
 8008798:	9204      	str	r2, [sp, #16]
 800879a:	001a      	movs	r2, r3
 800879c:	000f      	movs	r7, r1
 800879e:	9904      	ldr	r1, [sp, #16]
 80087a0:	0006      	movs	r6, r0
 80087a2:	430a      	orrs	r2, r1
 80087a4:	d119      	bne.n	80087da <__ieee754_pow+0x56>
 80087a6:	2180      	movs	r1, #128	@ 0x80
 80087a8:	0309      	lsls	r1, r1, #12
 80087aa:	4079      	eors	r1, r7
 80087ac:	0002      	movs	r2, r0
 80087ae:	000b      	movs	r3, r1
 80087b0:	1892      	adds	r2, r2, r2
 80087b2:	415b      	adcs	r3, r3
 80087b4:	499b      	ldr	r1, [pc, #620]	@ (8008a24 <__ieee754_pow+0x2a0>)
 80087b6:	428b      	cmp	r3, r1
 80087b8:	d806      	bhi.n	80087c8 <__ieee754_pow+0x44>
 80087ba:	d001      	beq.n	80087c0 <__ieee754_pow+0x3c>
 80087bc:	f000 fcde 	bl	800917c <__ieee754_pow+0x9f8>
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	d101      	bne.n	80087c8 <__ieee754_pow+0x44>
 80087c4:	f000 fcda 	bl	800917c <__ieee754_pow+0x9f8>
 80087c8:	9a02      	ldr	r2, [sp, #8]
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	0030      	movs	r0, r6
 80087ce:	0039      	movs	r1, r7
 80087d0:	f7f7 ff40 	bl	8000654 <__aeabi_dadd>
 80087d4:	9000      	str	r0, [sp, #0]
 80087d6:	9101      	str	r1, [sp, #4]
 80087d8:	e0af      	b.n	800893a <__ieee754_pow+0x1b6>
 80087da:	4a93      	ldr	r2, [pc, #588]	@ (8008a28 <__ieee754_pow+0x2a4>)
 80087dc:	007c      	lsls	r4, r7, #1
 80087de:	9708      	str	r7, [sp, #32]
 80087e0:	900e      	str	r0, [sp, #56]	@ 0x38
 80087e2:	0864      	lsrs	r4, r4, #1
 80087e4:	4294      	cmp	r4, r2
 80087e6:	d809      	bhi.n	80087fc <__ieee754_pow+0x78>
 80087e8:	d101      	bne.n	80087ee <__ieee754_pow+0x6a>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d1ec      	bne.n	80087c8 <__ieee754_pow+0x44>
 80087ee:	9904      	ldr	r1, [sp, #16]
 80087f0:	4a8d      	ldr	r2, [pc, #564]	@ (8008a28 <__ieee754_pow+0x2a4>)
 80087f2:	4291      	cmp	r1, r2
 80087f4:	d802      	bhi.n	80087fc <__ieee754_pow+0x78>
 80087f6:	d10c      	bne.n	8008812 <__ieee754_pow+0x8e>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00a      	beq.n	8008812 <__ieee754_pow+0x8e>
 80087fc:	4b8b      	ldr	r3, [pc, #556]	@ (8008a2c <__ieee754_pow+0x2a8>)
 80087fe:	18fb      	adds	r3, r7, r3
 8008800:	4333      	orrs	r3, r6
 8008802:	d1e1      	bne.n	80087c8 <__ieee754_pow+0x44>
 8008804:	2180      	movs	r1, #128	@ 0x80
 8008806:	9803      	ldr	r0, [sp, #12]
 8008808:	0309      	lsls	r1, r1, #12
 800880a:	4048      	eors	r0, r1
 800880c:	0003      	movs	r3, r0
 800880e:	9a02      	ldr	r2, [sp, #8]
 8008810:	e7ce      	b.n	80087b0 <__ieee754_pow+0x2c>
 8008812:	2500      	movs	r5, #0
 8008814:	9a08      	ldr	r2, [sp, #32]
 8008816:	940a      	str	r4, [sp, #40]	@ 0x28
 8008818:	42aa      	cmp	r2, r5
 800881a:	da68      	bge.n	80088ee <__ieee754_pow+0x16a>
 800881c:	4a84      	ldr	r2, [pc, #528]	@ (8008a30 <__ieee754_pow+0x2ac>)
 800881e:	9904      	ldr	r1, [sp, #16]
 8008820:	4291      	cmp	r1, r2
 8008822:	d863      	bhi.n	80088ec <__ieee754_pow+0x168>
 8008824:	4a83      	ldr	r2, [pc, #524]	@ (8008a34 <__ieee754_pow+0x2b0>)
 8008826:	4291      	cmp	r1, r2
 8008828:	d910      	bls.n	800884c <__ieee754_pow+0xc8>
 800882a:	150a      	asrs	r2, r1, #20
 800882c:	4982      	ldr	r1, [pc, #520]	@ (8008a38 <__ieee754_pow+0x2b4>)
 800882e:	1852      	adds	r2, r2, r1
 8008830:	2a14      	cmp	r2, #20
 8008832:	dd3b      	ble.n	80088ac <__ieee754_pow+0x128>
 8008834:	2134      	movs	r1, #52	@ 0x34
 8008836:	1a89      	subs	r1, r1, r2
 8008838:	9a02      	ldr	r2, [sp, #8]
 800883a:	40ca      	lsrs	r2, r1
 800883c:	0010      	movs	r0, r2
 800883e:	4088      	lsls	r0, r1
 8008840:	4298      	cmp	r0, r3
 8008842:	d103      	bne.n	800884c <__ieee754_pow+0xc8>
 8008844:	2101      	movs	r1, #1
 8008846:	3502      	adds	r5, #2
 8008848:	400a      	ands	r2, r1
 800884a:	1aad      	subs	r5, r5, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d03d      	beq.n	80088cc <__ieee754_pow+0x148>
 8008850:	0030      	movs	r0, r6
 8008852:	0039      	movs	r1, r7
 8008854:	f000 fcc2 	bl	80091dc <fabs>
 8008858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800885a:	9000      	str	r0, [sp, #0]
 800885c:	9101      	str	r1, [sp, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d000      	beq.n	8008864 <__ieee754_pow+0xe0>
 8008862:	e093      	b.n	800898c <__ieee754_pow+0x208>
 8008864:	4a75      	ldr	r2, [pc, #468]	@ (8008a3c <__ieee754_pow+0x2b8>)
 8008866:	00bb      	lsls	r3, r7, #2
 8008868:	089b      	lsrs	r3, r3, #2
 800886a:	4293      	cmp	r3, r2
 800886c:	d002      	beq.n	8008874 <__ieee754_pow+0xf0>
 800886e:	2c00      	cmp	r4, #0
 8008870:	d000      	beq.n	8008874 <__ieee754_pow+0xf0>
 8008872:	e08b      	b.n	800898c <__ieee754_pow+0x208>
 8008874:	9b06      	ldr	r3, [sp, #24]
 8008876:	2b00      	cmp	r3, #0
 8008878:	da07      	bge.n	800888a <__ieee754_pow+0x106>
 800887a:	9a00      	ldr	r2, [sp, #0]
 800887c:	9b01      	ldr	r3, [sp, #4]
 800887e:	2000      	movs	r0, #0
 8008880:	496e      	ldr	r1, [pc, #440]	@ (8008a3c <__ieee754_pow+0x2b8>)
 8008882:	f7f8 fa4b 	bl	8000d1c <__aeabi_ddiv>
 8008886:	9000      	str	r0, [sp, #0]
 8008888:	9101      	str	r1, [sp, #4]
 800888a:	9b08      	ldr	r3, [sp, #32]
 800888c:	2b00      	cmp	r3, #0
 800888e:	da54      	bge.n	800893a <__ieee754_pow+0x1b6>
 8008890:	4b66      	ldr	r3, [pc, #408]	@ (8008a2c <__ieee754_pow+0x2a8>)
 8008892:	18e4      	adds	r4, r4, r3
 8008894:	432c      	orrs	r4, r5
 8008896:	d000      	beq.n	800889a <__ieee754_pow+0x116>
 8008898:	e06d      	b.n	8008976 <__ieee754_pow+0x1f2>
 800889a:	9a00      	ldr	r2, [sp, #0]
 800889c:	9b01      	ldr	r3, [sp, #4]
 800889e:	0010      	movs	r0, r2
 80088a0:	0019      	movs	r1, r3
 80088a2:	f7f9 f947 	bl	8001b34 <__aeabi_dsub>
 80088a6:	0002      	movs	r2, r0
 80088a8:	000b      	movs	r3, r1
 80088aa:	e01c      	b.n	80088e6 <__ieee754_pow+0x162>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1cf      	bne.n	8008850 <__ieee754_pow+0xcc>
 80088b0:	3314      	adds	r3, #20
 80088b2:	1a9a      	subs	r2, r3, r2
 80088b4:	9b04      	ldr	r3, [sp, #16]
 80088b6:	4113      	asrs	r3, r2
 80088b8:	0019      	movs	r1, r3
 80088ba:	4091      	lsls	r1, r2
 80088bc:	000a      	movs	r2, r1
 80088be:	9904      	ldr	r1, [sp, #16]
 80088c0:	428a      	cmp	r2, r1
 80088c2:	d103      	bne.n	80088cc <__ieee754_pow+0x148>
 80088c4:	2201      	movs	r2, #1
 80088c6:	2502      	movs	r5, #2
 80088c8:	4013      	ands	r3, r2
 80088ca:	1aed      	subs	r5, r5, r3
 80088cc:	4b5b      	ldr	r3, [pc, #364]	@ (8008a3c <__ieee754_pow+0x2b8>)
 80088ce:	9a04      	ldr	r2, [sp, #16]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d136      	bne.n	8008942 <__ieee754_pow+0x1be>
 80088d4:	9b06      	ldr	r3, [sp, #24]
 80088d6:	9600      	str	r6, [sp, #0]
 80088d8:	9701      	str	r7, [sp, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	da2d      	bge.n	800893a <__ieee754_pow+0x1b6>
 80088de:	0032      	movs	r2, r6
 80088e0:	003b      	movs	r3, r7
 80088e2:	2000      	movs	r0, #0
 80088e4:	4955      	ldr	r1, [pc, #340]	@ (8008a3c <__ieee754_pow+0x2b8>)
 80088e6:	f7f8 fa19 	bl	8000d1c <__aeabi_ddiv>
 80088ea:	e773      	b.n	80087d4 <__ieee754_pow+0x50>
 80088ec:	2502      	movs	r5, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1ae      	bne.n	8008850 <__ieee754_pow+0xcc>
 80088f2:	9b04      	ldr	r3, [sp, #16]
 80088f4:	4a4c      	ldr	r2, [pc, #304]	@ (8008a28 <__ieee754_pow+0x2a4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d1e8      	bne.n	80088cc <__ieee754_pow+0x148>
 80088fa:	4b4c      	ldr	r3, [pc, #304]	@ (8008a2c <__ieee754_pow+0x2a8>)
 80088fc:	18e3      	adds	r3, r4, r3
 80088fe:	4333      	orrs	r3, r6
 8008900:	d101      	bne.n	8008906 <__ieee754_pow+0x182>
 8008902:	f000 fc3b 	bl	800917c <__ieee754_pow+0x9f8>
 8008906:	4b4b      	ldr	r3, [pc, #300]	@ (8008a34 <__ieee754_pow+0x2b0>)
 8008908:	429c      	cmp	r4, r3
 800890a:	d909      	bls.n	8008920 <__ieee754_pow+0x19c>
 800890c:	9b06      	ldr	r3, [sp, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	da01      	bge.n	8008916 <__ieee754_pow+0x192>
 8008912:	f000 fc37 	bl	8009184 <__ieee754_pow+0xa00>
 8008916:	9b02      	ldr	r3, [sp, #8]
 8008918:	9c03      	ldr	r4, [sp, #12]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	9401      	str	r4, [sp, #4]
 800891e:	e00c      	b.n	800893a <__ieee754_pow+0x1b6>
 8008920:	9b06      	ldr	r3, [sp, #24]
 8008922:	2b00      	cmp	r3, #0
 8008924:	db01      	blt.n	800892a <__ieee754_pow+0x1a6>
 8008926:	f000 fc2d 	bl	8009184 <__ieee754_pow+0xa00>
 800892a:	2280      	movs	r2, #128	@ 0x80
 800892c:	0612      	lsls	r2, r2, #24
 800892e:	4694      	mov	ip, r2
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	4463      	add	r3, ip
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	9800      	ldr	r0, [sp, #0]
 800893c:	9901      	ldr	r1, [sp, #4]
 800893e:	b015      	add	sp, #84	@ 0x54
 8008940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008942:	2380      	movs	r3, #128	@ 0x80
 8008944:	9a06      	ldr	r2, [sp, #24]
 8008946:	05db      	lsls	r3, r3, #23
 8008948:	429a      	cmp	r2, r3
 800894a:	d106      	bne.n	800895a <__ieee754_pow+0x1d6>
 800894c:	0032      	movs	r2, r6
 800894e:	003b      	movs	r3, r7
 8008950:	0030      	movs	r0, r6
 8008952:	0039      	movs	r1, r7
 8008954:	f7f8 fe26 	bl	80015a4 <__aeabi_dmul>
 8008958:	e73c      	b.n	80087d4 <__ieee754_pow+0x50>
 800895a:	4b39      	ldr	r3, [pc, #228]	@ (8008a40 <__ieee754_pow+0x2bc>)
 800895c:	9a06      	ldr	r2, [sp, #24]
 800895e:	429a      	cmp	r2, r3
 8008960:	d000      	beq.n	8008964 <__ieee754_pow+0x1e0>
 8008962:	e775      	b.n	8008850 <__ieee754_pow+0xcc>
 8008964:	9b08      	ldr	r3, [sp, #32]
 8008966:	2b00      	cmp	r3, #0
 8008968:	da00      	bge.n	800896c <__ieee754_pow+0x1e8>
 800896a:	e771      	b.n	8008850 <__ieee754_pow+0xcc>
 800896c:	0030      	movs	r0, r6
 800896e:	0039      	movs	r1, r7
 8008970:	f000 fcd2 	bl	8009318 <__ieee754_sqrt>
 8008974:	e72e      	b.n	80087d4 <__ieee754_pow+0x50>
 8008976:	2d01      	cmp	r5, #1
 8008978:	d1df      	bne.n	800893a <__ieee754_pow+0x1b6>
 800897a:	9800      	ldr	r0, [sp, #0]
 800897c:	2180      	movs	r1, #128	@ 0x80
 800897e:	0002      	movs	r2, r0
 8008980:	9801      	ldr	r0, [sp, #4]
 8008982:	0609      	lsls	r1, r1, #24
 8008984:	1843      	adds	r3, r0, r1
 8008986:	9200      	str	r2, [sp, #0]
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	e7d6      	b.n	800893a <__ieee754_pow+0x1b6>
 800898c:	0ffb      	lsrs	r3, r7, #31
 800898e:	3b01      	subs	r3, #1
 8008990:	001a      	movs	r2, r3
 8008992:	432a      	orrs	r2, r5
 8008994:	d104      	bne.n	80089a0 <__ieee754_pow+0x21c>
 8008996:	0032      	movs	r2, r6
 8008998:	003b      	movs	r3, r7
 800899a:	0030      	movs	r0, r6
 800899c:	0039      	movs	r1, r7
 800899e:	e780      	b.n	80088a2 <__ieee754_pow+0x11e>
 80089a0:	3d01      	subs	r5, #1
 80089a2:	2200      	movs	r2, #0
 80089a4:	431d      	orrs	r5, r3
 80089a6:	d015      	beq.n	80089d4 <__ieee754_pow+0x250>
 80089a8:	4b24      	ldr	r3, [pc, #144]	@ (8008a3c <__ieee754_pow+0x2b8>)
 80089aa:	9208      	str	r2, [sp, #32]
 80089ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ae:	2384      	movs	r3, #132	@ 0x84
 80089b0:	9a04      	ldr	r2, [sp, #16]
 80089b2:	05db      	lsls	r3, r3, #23
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d800      	bhi.n	80089ba <__ieee754_pow+0x236>
 80089b8:	e102      	b.n	8008bc0 <__ieee754_pow+0x43c>
 80089ba:	4b22      	ldr	r3, [pc, #136]	@ (8008a44 <__ieee754_pow+0x2c0>)
 80089bc:	429a      	cmp	r2, r3
 80089be:	d912      	bls.n	80089e6 <__ieee754_pow+0x262>
 80089c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a34 <__ieee754_pow+0x2b0>)
 80089c2:	429c      	cmp	r4, r3
 80089c4:	d808      	bhi.n	80089d8 <__ieee754_pow+0x254>
 80089c6:	9b06      	ldr	r3, [sp, #24]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	da08      	bge.n	80089de <__ieee754_pow+0x25a>
 80089cc:	2000      	movs	r0, #0
 80089ce:	f000 fc9b 	bl	8009308 <__math_oflow>
 80089d2:	e6ff      	b.n	80087d4 <__ieee754_pow+0x50>
 80089d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008a48 <__ieee754_pow+0x2c4>)
 80089d6:	e7e8      	b.n	80089aa <__ieee754_pow+0x226>
 80089d8:	9b06      	ldr	r3, [sp, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	dcf6      	bgt.n	80089cc <__ieee754_pow+0x248>
 80089de:	2000      	movs	r0, #0
 80089e0:	f000 fc8b 	bl	80092fa <__math_uflow>
 80089e4:	e6f6      	b.n	80087d4 <__ieee754_pow+0x50>
 80089e6:	4b19      	ldr	r3, [pc, #100]	@ (8008a4c <__ieee754_pow+0x2c8>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	d80b      	bhi.n	8008a04 <__ieee754_pow+0x280>
 80089ec:	9808      	ldr	r0, [sp, #32]
 80089ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089f0:	2300      	movs	r3, #0
 80089f2:	2200      	movs	r2, #0
 80089f4:	f7f7 fd1a 	bl	800042c <__aeabi_dcmplt>
 80089f8:	1e43      	subs	r3, r0, #1
 80089fa:	4198      	sbcs	r0, r3
 80089fc:	9b06      	ldr	r3, [sp, #24]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	daee      	bge.n	80089e0 <__ieee754_pow+0x25c>
 8008a02:	e7e4      	b.n	80089ce <__ieee754_pow+0x24a>
 8008a04:	4b0d      	ldr	r3, [pc, #52]	@ (8008a3c <__ieee754_pow+0x2b8>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	d921      	bls.n	8008a50 <__ieee754_pow+0x2cc>
 8008a0c:	9808      	ldr	r0, [sp, #32]
 8008a0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a10:	2300      	movs	r3, #0
 8008a12:	f7f7 fd0b 	bl	800042c <__aeabi_dcmplt>
 8008a16:	1e43      	subs	r3, r0, #1
 8008a18:	4198      	sbcs	r0, r3
 8008a1a:	9b06      	ldr	r3, [sp, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dcd6      	bgt.n	80089ce <__ieee754_pow+0x24a>
 8008a20:	e7de      	b.n	80089e0 <__ieee754_pow+0x25c>
 8008a22:	46c0      	nop			@ (mov r8, r8)
 8008a24:	fff00000 	.word	0xfff00000
 8008a28:	7ff00000 	.word	0x7ff00000
 8008a2c:	c0100000 	.word	0xc0100000
 8008a30:	433fffff 	.word	0x433fffff
 8008a34:	3fefffff 	.word	0x3fefffff
 8008a38:	fffffc01 	.word	0xfffffc01
 8008a3c:	3ff00000 	.word	0x3ff00000
 8008a40:	3fe00000 	.word	0x3fe00000
 8008a44:	43f00000 	.word	0x43f00000
 8008a48:	bff00000 	.word	0xbff00000
 8008a4c:	3feffffe 	.word	0x3feffffe
 8008a50:	9800      	ldr	r0, [sp, #0]
 8008a52:	9901      	ldr	r1, [sp, #4]
 8008a54:	4b4f      	ldr	r3, [pc, #316]	@ (8008b94 <__ieee754_pow+0x410>)
 8008a56:	f7f9 f86d 	bl	8001b34 <__aeabi_dsub>
 8008a5a:	22c0      	movs	r2, #192	@ 0xc0
 8008a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8008b98 <__ieee754_pow+0x414>)
 8008a5e:	05d2      	lsls	r2, r2, #23
 8008a60:	0006      	movs	r6, r0
 8008a62:	000f      	movs	r7, r1
 8008a64:	f7f8 fd9e 	bl	80015a4 <__aeabi_dmul>
 8008a68:	4a4c      	ldr	r2, [pc, #304]	@ (8008b9c <__ieee754_pow+0x418>)
 8008a6a:	9004      	str	r0, [sp, #16]
 8008a6c:	9105      	str	r1, [sp, #20]
 8008a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8008ba0 <__ieee754_pow+0x41c>)
 8008a70:	0030      	movs	r0, r6
 8008a72:	0039      	movs	r1, r7
 8008a74:	f7f8 fd96 	bl	80015a4 <__aeabi_dmul>
 8008a78:	2200      	movs	r2, #0
 8008a7a:	9000      	str	r0, [sp, #0]
 8008a7c:	9101      	str	r1, [sp, #4]
 8008a7e:	4b49      	ldr	r3, [pc, #292]	@ (8008ba4 <__ieee754_pow+0x420>)
 8008a80:	0030      	movs	r0, r6
 8008a82:	0039      	movs	r1, r7
 8008a84:	f7f8 fd8e 	bl	80015a4 <__aeabi_dmul>
 8008a88:	0002      	movs	r2, r0
 8008a8a:	000b      	movs	r3, r1
 8008a8c:	4846      	ldr	r0, [pc, #280]	@ (8008ba8 <__ieee754_pow+0x424>)
 8008a8e:	4947      	ldr	r1, [pc, #284]	@ (8008bac <__ieee754_pow+0x428>)
 8008a90:	f7f9 f850 	bl	8001b34 <__aeabi_dsub>
 8008a94:	0032      	movs	r2, r6
 8008a96:	003b      	movs	r3, r7
 8008a98:	f7f8 fd84 	bl	80015a4 <__aeabi_dmul>
 8008a9c:	0002      	movs	r2, r0
 8008a9e:	000b      	movs	r3, r1
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	4943      	ldr	r1, [pc, #268]	@ (8008bb0 <__ieee754_pow+0x42c>)
 8008aa4:	f7f9 f846 	bl	8001b34 <__aeabi_dsub>
 8008aa8:	0032      	movs	r2, r6
 8008aaa:	0004      	movs	r4, r0
 8008aac:	000d      	movs	r5, r1
 8008aae:	003b      	movs	r3, r7
 8008ab0:	0030      	movs	r0, r6
 8008ab2:	0039      	movs	r1, r7
 8008ab4:	f7f8 fd76 	bl	80015a4 <__aeabi_dmul>
 8008ab8:	0002      	movs	r2, r0
 8008aba:	000b      	movs	r3, r1
 8008abc:	0020      	movs	r0, r4
 8008abe:	0029      	movs	r1, r5
 8008ac0:	f7f8 fd70 	bl	80015a4 <__aeabi_dmul>
 8008ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8008bb4 <__ieee754_pow+0x430>)
 8008ac6:	4b34      	ldr	r3, [pc, #208]	@ (8008b98 <__ieee754_pow+0x414>)
 8008ac8:	f7f8 fd6c 	bl	80015a4 <__aeabi_dmul>
 8008acc:	0002      	movs	r2, r0
 8008ace:	000b      	movs	r3, r1
 8008ad0:	9800      	ldr	r0, [sp, #0]
 8008ad2:	9901      	ldr	r1, [sp, #4]
 8008ad4:	f7f9 f82e 	bl	8001b34 <__aeabi_dsub>
 8008ad8:	0002      	movs	r2, r0
 8008ada:	000b      	movs	r3, r1
 8008adc:	0004      	movs	r4, r0
 8008ade:	000d      	movs	r5, r1
 8008ae0:	9804      	ldr	r0, [sp, #16]
 8008ae2:	9905      	ldr	r1, [sp, #20]
 8008ae4:	f7f7 fdb6 	bl	8000654 <__aeabi_dadd>
 8008ae8:	9a04      	ldr	r2, [sp, #16]
 8008aea:	9b05      	ldr	r3, [sp, #20]
 8008aec:	2000      	movs	r0, #0
 8008aee:	9000      	str	r0, [sp, #0]
 8008af0:	9101      	str	r1, [sp, #4]
 8008af2:	f7f9 f81f 	bl	8001b34 <__aeabi_dsub>
 8008af6:	0002      	movs	r2, r0
 8008af8:	000b      	movs	r3, r1
 8008afa:	0020      	movs	r0, r4
 8008afc:	0029      	movs	r1, r5
 8008afe:	f7f9 f819 	bl	8001b34 <__aeabi_dsub>
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	9c03      	ldr	r4, [sp, #12]
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	9405      	str	r4, [sp, #20]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	9c04      	ldr	r4, [sp, #16]
 8008b10:	9d05      	ldr	r5, [sp, #20]
 8008b12:	0006      	movs	r6, r0
 8008b14:	000f      	movs	r7, r1
 8008b16:	9802      	ldr	r0, [sp, #8]
 8008b18:	9903      	ldr	r1, [sp, #12]
 8008b1a:	0022      	movs	r2, r4
 8008b1c:	002b      	movs	r3, r5
 8008b1e:	f7f9 f809 	bl	8001b34 <__aeabi_dsub>
 8008b22:	9a00      	ldr	r2, [sp, #0]
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	f7f8 fd3d 	bl	80015a4 <__aeabi_dmul>
 8008b2a:	9a02      	ldr	r2, [sp, #8]
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	9006      	str	r0, [sp, #24]
 8008b30:	9107      	str	r1, [sp, #28]
 8008b32:	0030      	movs	r0, r6
 8008b34:	0039      	movs	r1, r7
 8008b36:	f7f8 fd35 	bl	80015a4 <__aeabi_dmul>
 8008b3a:	0002      	movs	r2, r0
 8008b3c:	000b      	movs	r3, r1
 8008b3e:	9806      	ldr	r0, [sp, #24]
 8008b40:	9907      	ldr	r1, [sp, #28]
 8008b42:	f7f7 fd87 	bl	8000654 <__aeabi_dadd>
 8008b46:	0022      	movs	r2, r4
 8008b48:	002b      	movs	r3, r5
 8008b4a:	9002      	str	r0, [sp, #8]
 8008b4c:	9103      	str	r1, [sp, #12]
 8008b4e:	9800      	ldr	r0, [sp, #0]
 8008b50:	9901      	ldr	r1, [sp, #4]
 8008b52:	f7f8 fd27 	bl	80015a4 <__aeabi_dmul>
 8008b56:	000b      	movs	r3, r1
 8008b58:	0002      	movs	r2, r0
 8008b5a:	0006      	movs	r6, r0
 8008b5c:	000f      	movs	r7, r1
 8008b5e:	9802      	ldr	r0, [sp, #8]
 8008b60:	9903      	ldr	r1, [sp, #12]
 8008b62:	f7f7 fd77 	bl	8000654 <__aeabi_dadd>
 8008b66:	9000      	str	r0, [sp, #0]
 8008b68:	9101      	str	r1, [sp, #4]
 8008b6a:	9c01      	ldr	r4, [sp, #4]
 8008b6c:	4b12      	ldr	r3, [pc, #72]	@ (8008bb8 <__ieee754_pow+0x434>)
 8008b6e:	9406      	str	r4, [sp, #24]
 8008b70:	429c      	cmp	r4, r3
 8008b72:	dc00      	bgt.n	8008b76 <__ieee754_pow+0x3f2>
 8008b74:	e222      	b.n	8008fbc <__ieee754_pow+0x838>
 8008b76:	4a11      	ldr	r2, [pc, #68]	@ (8008bbc <__ieee754_pow+0x438>)
 8008b78:	18a3      	adds	r3, r4, r2
 8008b7a:	9a00      	ldr	r2, [sp, #0]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	d100      	bne.n	8008b82 <__ieee754_pow+0x3fe>
 8008b80:	e1a0      	b.n	8008ec4 <__ieee754_pow+0x740>
 8008b82:	9808      	ldr	r0, [sp, #32]
 8008b84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b86:	2300      	movs	r3, #0
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fc4f 	bl	800042c <__aeabi_dcmplt>
 8008b8e:	1e43      	subs	r3, r0, #1
 8008b90:	4198      	sbcs	r0, r3
 8008b92:	e71c      	b.n	80089ce <__ieee754_pow+0x24a>
 8008b94:	3ff00000 	.word	0x3ff00000
 8008b98:	3ff71547 	.word	0x3ff71547
 8008b9c:	f85ddf44 	.word	0xf85ddf44
 8008ba0:	3e54ae0b 	.word	0x3e54ae0b
 8008ba4:	3fd00000 	.word	0x3fd00000
 8008ba8:	55555555 	.word	0x55555555
 8008bac:	3fd55555 	.word	0x3fd55555
 8008bb0:	3fe00000 	.word	0x3fe00000
 8008bb4:	652b82fe 	.word	0x652b82fe
 8008bb8:	408fffff 	.word	0x408fffff
 8008bbc:	bf700000 	.word	0xbf700000
 8008bc0:	4be0      	ldr	r3, [pc, #896]	@ (8008f44 <__ieee754_pow+0x7c0>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	423b      	tst	r3, r7
 8008bc6:	d10b      	bne.n	8008be0 <__ieee754_pow+0x45c>
 8008bc8:	9800      	ldr	r0, [sp, #0]
 8008bca:	9901      	ldr	r1, [sp, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4bde      	ldr	r3, [pc, #888]	@ (8008f48 <__ieee754_pow+0x7c4>)
 8008bd0:	f7f8 fce8 	bl	80015a4 <__aeabi_dmul>
 8008bd4:	2235      	movs	r2, #53	@ 0x35
 8008bd6:	9000      	str	r0, [sp, #0]
 8008bd8:	9101      	str	r1, [sp, #4]
 8008bda:	9b01      	ldr	r3, [sp, #4]
 8008bdc:	4252      	negs	r2, r2
 8008bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008be2:	49da      	ldr	r1, [pc, #872]	@ (8008f4c <__ieee754_pow+0x7c8>)
 8008be4:	151b      	asrs	r3, r3, #20
 8008be6:	185b      	adds	r3, r3, r1
 8008be8:	189b      	adds	r3, r3, r2
 8008bea:	930e      	str	r3, [sp, #56]	@ 0x38
 8008bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bee:	4dd8      	ldr	r5, [pc, #864]	@ (8008f50 <__ieee754_pow+0x7cc>)
 8008bf0:	031b      	lsls	r3, r3, #12
 8008bf2:	4ad8      	ldr	r2, [pc, #864]	@ (8008f54 <__ieee754_pow+0x7d0>)
 8008bf4:	0b1b      	lsrs	r3, r3, #12
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	431d      	orrs	r5, r3
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	dd09      	ble.n	8008c12 <__ieee754_pow+0x48e>
 8008bfe:	4ad6      	ldr	r2, [pc, #856]	@ (8008f58 <__ieee754_pow+0x7d4>)
 8008c00:	3601      	adds	r6, #1
 8008c02:	4293      	cmp	r3, r2
 8008c04:	dd05      	ble.n	8008c12 <__ieee754_pow+0x48e>
 8008c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c08:	199b      	adds	r3, r3, r6
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c0e:	4bd3      	ldr	r3, [pc, #844]	@ (8008f5c <__ieee754_pow+0x7d8>)
 8008c10:	18ed      	adds	r5, r5, r3
 8008c12:	9800      	ldr	r0, [sp, #0]
 8008c14:	9901      	ldr	r1, [sp, #4]
 8008c16:	0029      	movs	r1, r5
 8008c18:	4bd1      	ldr	r3, [pc, #836]	@ (8008f60 <__ieee754_pow+0x7dc>)
 8008c1a:	00f2      	lsls	r2, r6, #3
 8008c1c:	189b      	adds	r3, r3, r2
 8008c1e:	685c      	ldr	r4, [r3, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c24:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c28:	001a      	movs	r2, r3
 8008c2a:	0023      	movs	r3, r4
 8008c2c:	900c      	str	r0, [sp, #48]	@ 0x30
 8008c2e:	910d      	str	r1, [sp, #52]	@ 0x34
 8008c30:	f7f8 ff80 	bl	8001b34 <__aeabi_dsub>
 8008c34:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c38:	9010      	str	r0, [sp, #64]	@ 0x40
 8008c3a:	9111      	str	r1, [sp, #68]	@ 0x44
 8008c3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c3e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c40:	f7f7 fd08 	bl	8000654 <__aeabi_dadd>
 8008c44:	0002      	movs	r2, r0
 8008c46:	000b      	movs	r3, r1
 8008c48:	2000      	movs	r0, #0
 8008c4a:	49c1      	ldr	r1, [pc, #772]	@ (8008f50 <__ieee754_pow+0x7cc>)
 8008c4c:	f7f8 f866 	bl	8000d1c <__aeabi_ddiv>
 8008c50:	0002      	movs	r2, r0
 8008c52:	000b      	movs	r3, r1
 8008c54:	9012      	str	r0, [sp, #72]	@ 0x48
 8008c56:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008c58:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008c5a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008c5c:	f7f8 fca2 	bl	80015a4 <__aeabi_dmul>
 8008c60:	9006      	str	r0, [sp, #24]
 8008c62:	9107      	str	r1, [sp, #28]
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	9c07      	ldr	r4, [sp, #28]
 8008c68:	2180      	movs	r1, #128	@ 0x80
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	9405      	str	r4, [sp, #20]
 8008c6e:	2080      	movs	r0, #128	@ 0x80
 8008c70:	2300      	movs	r3, #0
 8008c72:	2200      	movs	r2, #0
 8008c74:	106d      	asrs	r5, r5, #1
 8008c76:	0589      	lsls	r1, r1, #22
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	4329      	orrs	r1, r5
 8008c7c:	0300      	lsls	r0, r0, #12
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	9c05      	ldr	r4, [sp, #20]
 8008c82:	1809      	adds	r1, r1, r0
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	9401      	str	r4, [sp, #4]
 8008c88:	04b6      	lsls	r6, r6, #18
 8008c8a:	198b      	adds	r3, r1, r6
 8008c8c:	9800      	ldr	r0, [sp, #0]
 8008c8e:	9901      	ldr	r1, [sp, #4]
 8008c90:	0014      	movs	r4, r2
 8008c92:	001d      	movs	r5, r3
 8008c94:	f7f8 fc86 	bl	80015a4 <__aeabi_dmul>
 8008c98:	0002      	movs	r2, r0
 8008c9a:	000b      	movs	r3, r1
 8008c9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008c9e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008ca0:	f7f8 ff48 	bl	8001b34 <__aeabi_dsub>
 8008ca4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca8:	0006      	movs	r6, r0
 8008caa:	000f      	movs	r7, r1
 8008cac:	0020      	movs	r0, r4
 8008cae:	0029      	movs	r1, r5
 8008cb0:	f7f8 ff40 	bl	8001b34 <__aeabi_dsub>
 8008cb4:	0002      	movs	r2, r0
 8008cb6:	000b      	movs	r3, r1
 8008cb8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008cba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008cbc:	f7f8 ff3a 	bl	8001b34 <__aeabi_dsub>
 8008cc0:	9a00      	ldr	r2, [sp, #0]
 8008cc2:	9b01      	ldr	r3, [sp, #4]
 8008cc4:	f7f8 fc6e 	bl	80015a4 <__aeabi_dmul>
 8008cc8:	0002      	movs	r2, r0
 8008cca:	000b      	movs	r3, r1
 8008ccc:	0030      	movs	r0, r6
 8008cce:	0039      	movs	r1, r7
 8008cd0:	f7f8 ff30 	bl	8001b34 <__aeabi_dsub>
 8008cd4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008cd6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cd8:	f7f8 fc64 	bl	80015a4 <__aeabi_dmul>
 8008cdc:	9a06      	ldr	r2, [sp, #24]
 8008cde:	9b07      	ldr	r3, [sp, #28]
 8008ce0:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ce2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ce4:	0010      	movs	r0, r2
 8008ce6:	0019      	movs	r1, r3
 8008ce8:	f7f8 fc5c 	bl	80015a4 <__aeabi_dmul>
 8008cec:	0006      	movs	r6, r0
 8008cee:	000f      	movs	r7, r1
 8008cf0:	4a9c      	ldr	r2, [pc, #624]	@ (8008f64 <__ieee754_pow+0x7e0>)
 8008cf2:	4b9d      	ldr	r3, [pc, #628]	@ (8008f68 <__ieee754_pow+0x7e4>)
 8008cf4:	f7f8 fc56 	bl	80015a4 <__aeabi_dmul>
 8008cf8:	4a9c      	ldr	r2, [pc, #624]	@ (8008f6c <__ieee754_pow+0x7e8>)
 8008cfa:	4b9d      	ldr	r3, [pc, #628]	@ (8008f70 <__ieee754_pow+0x7ec>)
 8008cfc:	f7f7 fcaa 	bl	8000654 <__aeabi_dadd>
 8008d00:	0032      	movs	r2, r6
 8008d02:	003b      	movs	r3, r7
 8008d04:	f7f8 fc4e 	bl	80015a4 <__aeabi_dmul>
 8008d08:	4a9a      	ldr	r2, [pc, #616]	@ (8008f74 <__ieee754_pow+0x7f0>)
 8008d0a:	4b9b      	ldr	r3, [pc, #620]	@ (8008f78 <__ieee754_pow+0x7f4>)
 8008d0c:	f7f7 fca2 	bl	8000654 <__aeabi_dadd>
 8008d10:	0032      	movs	r2, r6
 8008d12:	003b      	movs	r3, r7
 8008d14:	f7f8 fc46 	bl	80015a4 <__aeabi_dmul>
 8008d18:	4a98      	ldr	r2, [pc, #608]	@ (8008f7c <__ieee754_pow+0x7f8>)
 8008d1a:	4b99      	ldr	r3, [pc, #612]	@ (8008f80 <__ieee754_pow+0x7fc>)
 8008d1c:	f7f7 fc9a 	bl	8000654 <__aeabi_dadd>
 8008d20:	0032      	movs	r2, r6
 8008d22:	003b      	movs	r3, r7
 8008d24:	f7f8 fc3e 	bl	80015a4 <__aeabi_dmul>
 8008d28:	4a96      	ldr	r2, [pc, #600]	@ (8008f84 <__ieee754_pow+0x800>)
 8008d2a:	4b97      	ldr	r3, [pc, #604]	@ (8008f88 <__ieee754_pow+0x804>)
 8008d2c:	f7f7 fc92 	bl	8000654 <__aeabi_dadd>
 8008d30:	0032      	movs	r2, r6
 8008d32:	003b      	movs	r3, r7
 8008d34:	f7f8 fc36 	bl	80015a4 <__aeabi_dmul>
 8008d38:	4a94      	ldr	r2, [pc, #592]	@ (8008f8c <__ieee754_pow+0x808>)
 8008d3a:	4b95      	ldr	r3, [pc, #596]	@ (8008f90 <__ieee754_pow+0x80c>)
 8008d3c:	f7f7 fc8a 	bl	8000654 <__aeabi_dadd>
 8008d40:	0032      	movs	r2, r6
 8008d42:	0004      	movs	r4, r0
 8008d44:	000d      	movs	r5, r1
 8008d46:	003b      	movs	r3, r7
 8008d48:	0030      	movs	r0, r6
 8008d4a:	0039      	movs	r1, r7
 8008d4c:	f7f8 fc2a 	bl	80015a4 <__aeabi_dmul>
 8008d50:	0002      	movs	r2, r0
 8008d52:	000b      	movs	r3, r1
 8008d54:	0020      	movs	r0, r4
 8008d56:	0029      	movs	r1, r5
 8008d58:	f7f8 fc24 	bl	80015a4 <__aeabi_dmul>
 8008d5c:	9a00      	ldr	r2, [sp, #0]
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	0004      	movs	r4, r0
 8008d62:	000d      	movs	r5, r1
 8008d64:	9806      	ldr	r0, [sp, #24]
 8008d66:	9907      	ldr	r1, [sp, #28]
 8008d68:	f7f7 fc74 	bl	8000654 <__aeabi_dadd>
 8008d6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d70:	f7f8 fc18 	bl	80015a4 <__aeabi_dmul>
 8008d74:	0022      	movs	r2, r4
 8008d76:	002b      	movs	r3, r5
 8008d78:	f7f7 fc6c 	bl	8000654 <__aeabi_dadd>
 8008d7c:	9a00      	ldr	r2, [sp, #0]
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	900c      	str	r0, [sp, #48]	@ 0x30
 8008d82:	910d      	str	r1, [sp, #52]	@ 0x34
 8008d84:	0010      	movs	r0, r2
 8008d86:	0019      	movs	r1, r3
 8008d88:	f7f8 fc0c 	bl	80015a4 <__aeabi_dmul>
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4b81      	ldr	r3, [pc, #516]	@ (8008f94 <__ieee754_pow+0x810>)
 8008d90:	0004      	movs	r4, r0
 8008d92:	000d      	movs	r5, r1
 8008d94:	f7f7 fc5e 	bl	8000654 <__aeabi_dadd>
 8008d98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d9c:	f7f7 fc5a 	bl	8000654 <__aeabi_dadd>
 8008da0:	2000      	movs	r0, #0
 8008da2:	000f      	movs	r7, r1
 8008da4:	0006      	movs	r6, r0
 8008da6:	0002      	movs	r2, r0
 8008da8:	000b      	movs	r3, r1
 8008daa:	9800      	ldr	r0, [sp, #0]
 8008dac:	9901      	ldr	r1, [sp, #4]
 8008dae:	f7f8 fbf9 	bl	80015a4 <__aeabi_dmul>
 8008db2:	2200      	movs	r2, #0
 8008db4:	9000      	str	r0, [sp, #0]
 8008db6:	9101      	str	r1, [sp, #4]
 8008db8:	4b76      	ldr	r3, [pc, #472]	@ (8008f94 <__ieee754_pow+0x810>)
 8008dba:	0030      	movs	r0, r6
 8008dbc:	0039      	movs	r1, r7
 8008dbe:	f7f8 feb9 	bl	8001b34 <__aeabi_dsub>
 8008dc2:	0022      	movs	r2, r4
 8008dc4:	002b      	movs	r3, r5
 8008dc6:	f7f8 feb5 	bl	8001b34 <__aeabi_dsub>
 8008dca:	0002      	movs	r2, r0
 8008dcc:	000b      	movs	r3, r1
 8008dce:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008dd0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008dd2:	f7f8 feaf 	bl	8001b34 <__aeabi_dsub>
 8008dd6:	9a06      	ldr	r2, [sp, #24]
 8008dd8:	9b07      	ldr	r3, [sp, #28]
 8008dda:	f7f8 fbe3 	bl	80015a4 <__aeabi_dmul>
 8008dde:	0032      	movs	r2, r6
 8008de0:	0004      	movs	r4, r0
 8008de2:	000d      	movs	r5, r1
 8008de4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008de6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008de8:	003b      	movs	r3, r7
 8008dea:	f7f8 fbdb 	bl	80015a4 <__aeabi_dmul>
 8008dee:	0002      	movs	r2, r0
 8008df0:	000b      	movs	r3, r1
 8008df2:	0020      	movs	r0, r4
 8008df4:	0029      	movs	r1, r5
 8008df6:	f7f7 fc2d 	bl	8000654 <__aeabi_dadd>
 8008dfa:	0004      	movs	r4, r0
 8008dfc:	000d      	movs	r5, r1
 8008dfe:	0002      	movs	r2, r0
 8008e00:	000b      	movs	r3, r1
 8008e02:	9800      	ldr	r0, [sp, #0]
 8008e04:	9901      	ldr	r1, [sp, #4]
 8008e06:	f7f7 fc25 	bl	8000654 <__aeabi_dadd>
 8008e0a:	22e0      	movs	r2, #224	@ 0xe0
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	4b62      	ldr	r3, [pc, #392]	@ (8008f98 <__ieee754_pow+0x814>)
 8008e10:	0612      	lsls	r2, r2, #24
 8008e12:	0006      	movs	r6, r0
 8008e14:	000f      	movs	r7, r1
 8008e16:	f7f8 fbc5 	bl	80015a4 <__aeabi_dmul>
 8008e1a:	9006      	str	r0, [sp, #24]
 8008e1c:	9107      	str	r1, [sp, #28]
 8008e1e:	9a00      	ldr	r2, [sp, #0]
 8008e20:	9b01      	ldr	r3, [sp, #4]
 8008e22:	0030      	movs	r0, r6
 8008e24:	0039      	movs	r1, r7
 8008e26:	f7f8 fe85 	bl	8001b34 <__aeabi_dsub>
 8008e2a:	0002      	movs	r2, r0
 8008e2c:	000b      	movs	r3, r1
 8008e2e:	0020      	movs	r0, r4
 8008e30:	0029      	movs	r1, r5
 8008e32:	f7f8 fe7f 	bl	8001b34 <__aeabi_dsub>
 8008e36:	4a59      	ldr	r2, [pc, #356]	@ (8008f9c <__ieee754_pow+0x818>)
 8008e38:	4b57      	ldr	r3, [pc, #348]	@ (8008f98 <__ieee754_pow+0x814>)
 8008e3a:	f7f8 fbb3 	bl	80015a4 <__aeabi_dmul>
 8008e3e:	4a58      	ldr	r2, [pc, #352]	@ (8008fa0 <__ieee754_pow+0x81c>)
 8008e40:	0004      	movs	r4, r0
 8008e42:	000d      	movs	r5, r1
 8008e44:	0030      	movs	r0, r6
 8008e46:	0039      	movs	r1, r7
 8008e48:	4b56      	ldr	r3, [pc, #344]	@ (8008fa4 <__ieee754_pow+0x820>)
 8008e4a:	f7f8 fbab 	bl	80015a4 <__aeabi_dmul>
 8008e4e:	0002      	movs	r2, r0
 8008e50:	000b      	movs	r3, r1
 8008e52:	0020      	movs	r0, r4
 8008e54:	0029      	movs	r1, r5
 8008e56:	f7f7 fbfd 	bl	8000654 <__aeabi_dadd>
 8008e5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008e5c:	4b52      	ldr	r3, [pc, #328]	@ (8008fa8 <__ieee754_pow+0x824>)
 8008e5e:	189b      	adds	r3, r3, r2
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f7f7 fbf6 	bl	8000654 <__aeabi_dadd>
 8008e68:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008e6c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008e6e:	f7f9 fa5b 	bl	8002328 <__aeabi_i2d>
 8008e72:	0004      	movs	r4, r0
 8008e74:	000d      	movs	r5, r1
 8008e76:	9806      	ldr	r0, [sp, #24]
 8008e78:	9907      	ldr	r1, [sp, #28]
 8008e7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8008fac <__ieee754_pow+0x828>)
 8008e7e:	189b      	adds	r3, r3, r2
 8008e80:	681e      	ldr	r6, [r3, #0]
 8008e82:	685f      	ldr	r7, [r3, #4]
 8008e84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e88:	f7f7 fbe4 	bl	8000654 <__aeabi_dadd>
 8008e8c:	0032      	movs	r2, r6
 8008e8e:	003b      	movs	r3, r7
 8008e90:	f7f7 fbe0 	bl	8000654 <__aeabi_dadd>
 8008e94:	0022      	movs	r2, r4
 8008e96:	002b      	movs	r3, r5
 8008e98:	f7f7 fbdc 	bl	8000654 <__aeabi_dadd>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	0022      	movs	r2, r4
 8008ea0:	002b      	movs	r3, r5
 8008ea2:	9000      	str	r0, [sp, #0]
 8008ea4:	9101      	str	r1, [sp, #4]
 8008ea6:	f7f8 fe45 	bl	8001b34 <__aeabi_dsub>
 8008eaa:	0032      	movs	r2, r6
 8008eac:	003b      	movs	r3, r7
 8008eae:	f7f8 fe41 	bl	8001b34 <__aeabi_dsub>
 8008eb2:	9a06      	ldr	r2, [sp, #24]
 8008eb4:	9b07      	ldr	r3, [sp, #28]
 8008eb6:	f7f8 fe3d 	bl	8001b34 <__aeabi_dsub>
 8008eba:	0002      	movs	r2, r0
 8008ebc:	000b      	movs	r3, r1
 8008ebe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ec0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ec2:	e61c      	b.n	8008afe <__ieee754_pow+0x37a>
 8008ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8008fb0 <__ieee754_pow+0x82c>)
 8008ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8008fb4 <__ieee754_pow+0x830>)
 8008ec8:	9802      	ldr	r0, [sp, #8]
 8008eca:	9903      	ldr	r1, [sp, #12]
 8008ecc:	f7f7 fbc2 	bl	8000654 <__aeabi_dadd>
 8008ed0:	0032      	movs	r2, r6
 8008ed2:	003b      	movs	r3, r7
 8008ed4:	9004      	str	r0, [sp, #16]
 8008ed6:	9105      	str	r1, [sp, #20]
 8008ed8:	9800      	ldr	r0, [sp, #0]
 8008eda:	9901      	ldr	r1, [sp, #4]
 8008edc:	f7f8 fe2a 	bl	8001b34 <__aeabi_dsub>
 8008ee0:	0002      	movs	r2, r0
 8008ee2:	000b      	movs	r3, r1
 8008ee4:	9804      	ldr	r0, [sp, #16]
 8008ee6:	9905      	ldr	r1, [sp, #20]
 8008ee8:	f7f7 fab4 	bl	8000454 <__aeabi_dcmpgt>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d000      	beq.n	8008ef2 <__ieee754_pow+0x76e>
 8008ef0:	e647      	b.n	8008b82 <__ieee754_pow+0x3fe>
 8008ef2:	2580      	movs	r5, #128	@ 0x80
 8008ef4:	4b30      	ldr	r3, [pc, #192]	@ (8008fb8 <__ieee754_pow+0x834>)
 8008ef6:	036d      	lsls	r5, r5, #13
 8008ef8:	1524      	asrs	r4, r4, #20
 8008efa:	18e4      	adds	r4, r4, r3
 8008efc:	002b      	movs	r3, r5
 8008efe:	4123      	asrs	r3, r4
 8008f00:	9a06      	ldr	r2, [sp, #24]
 8008f02:	4912      	ldr	r1, [pc, #72]	@ (8008f4c <__ieee754_pow+0x7c8>)
 8008f04:	189b      	adds	r3, r3, r2
 8008f06:	005a      	lsls	r2, r3, #1
 8008f08:	4c14      	ldr	r4, [pc, #80]	@ (8008f5c <__ieee754_pow+0x7d8>)
 8008f0a:	0d52      	lsrs	r2, r2, #21
 8008f0c:	1852      	adds	r2, r2, r1
 8008f0e:	4114      	asrs	r4, r2
 8008f10:	401c      	ands	r4, r3
 8008f12:	0021      	movs	r1, r4
 8008f14:	2414      	movs	r4, #20
 8008f16:	031b      	lsls	r3, r3, #12
 8008f18:	0b1b      	lsrs	r3, r3, #12
 8008f1a:	432b      	orrs	r3, r5
 8008f1c:	1aa2      	subs	r2, r4, r2
 8008f1e:	4113      	asrs	r3, r2
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	9b06      	ldr	r3, [sp, #24]
 8008f24:	2000      	movs	r0, #0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da02      	bge.n	8008f30 <__ieee754_pow+0x7ac>
 8008f2a:	9b00      	ldr	r3, [sp, #0]
 8008f2c:	425b      	negs	r3, r3
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	0002      	movs	r2, r0
 8008f32:	000b      	movs	r3, r1
 8008f34:	0030      	movs	r0, r6
 8008f36:	0039      	movs	r1, r7
 8008f38:	f7f8 fdfc 	bl	8001b34 <__aeabi_dsub>
 8008f3c:	0006      	movs	r6, r0
 8008f3e:	000f      	movs	r7, r1
 8008f40:	e065      	b.n	800900e <__ieee754_pow+0x88a>
 8008f42:	46c0      	nop			@ (mov r8, r8)
 8008f44:	7ff00000 	.word	0x7ff00000
 8008f48:	43400000 	.word	0x43400000
 8008f4c:	fffffc01 	.word	0xfffffc01
 8008f50:	3ff00000 	.word	0x3ff00000
 8008f54:	0003988e 	.word	0x0003988e
 8008f58:	000bb679 	.word	0x000bb679
 8008f5c:	fff00000 	.word	0xfff00000
 8008f60:	08009660 	.word	0x08009660
 8008f64:	4a454eef 	.word	0x4a454eef
 8008f68:	3fca7e28 	.word	0x3fca7e28
 8008f6c:	93c9db65 	.word	0x93c9db65
 8008f70:	3fcd864a 	.word	0x3fcd864a
 8008f74:	a91d4101 	.word	0xa91d4101
 8008f78:	3fd17460 	.word	0x3fd17460
 8008f7c:	518f264d 	.word	0x518f264d
 8008f80:	3fd55555 	.word	0x3fd55555
 8008f84:	db6fabff 	.word	0xdb6fabff
 8008f88:	3fdb6db6 	.word	0x3fdb6db6
 8008f8c:	33333303 	.word	0x33333303
 8008f90:	3fe33333 	.word	0x3fe33333
 8008f94:	40080000 	.word	0x40080000
 8008f98:	3feec709 	.word	0x3feec709
 8008f9c:	dc3a03fd 	.word	0xdc3a03fd
 8008fa0:	145b01f5 	.word	0x145b01f5
 8008fa4:	be3e2fe0 	.word	0xbe3e2fe0
 8008fa8:	08009640 	.word	0x08009640
 8008fac:	08009650 	.word	0x08009650
 8008fb0:	652b82fe 	.word	0x652b82fe
 8008fb4:	3c971547 	.word	0x3c971547
 8008fb8:	fffffc02 	.word	0xfffffc02
 8008fbc:	9b01      	ldr	r3, [sp, #4]
 8008fbe:	005c      	lsls	r4, r3, #1
 8008fc0:	4b72      	ldr	r3, [pc, #456]	@ (800918c <__ieee754_pow+0xa08>)
 8008fc2:	0864      	lsrs	r4, r4, #1
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	d91c      	bls.n	8009002 <__ieee754_pow+0x87e>
 8008fc8:	4a71      	ldr	r2, [pc, #452]	@ (8009190 <__ieee754_pow+0xa0c>)
 8008fca:	9b01      	ldr	r3, [sp, #4]
 8008fcc:	189b      	adds	r3, r3, r2
 8008fce:	9a00      	ldr	r2, [sp, #0]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	d008      	beq.n	8008fe6 <__ieee754_pow+0x862>
 8008fd4:	9808      	ldr	r0, [sp, #32]
 8008fd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f7f7 fa26 	bl	800042c <__aeabi_dcmplt>
 8008fe0:	1e43      	subs	r3, r0, #1
 8008fe2:	4198      	sbcs	r0, r3
 8008fe4:	e4fc      	b.n	80089e0 <__ieee754_pow+0x25c>
 8008fe6:	0032      	movs	r2, r6
 8008fe8:	9800      	ldr	r0, [sp, #0]
 8008fea:	9901      	ldr	r1, [sp, #4]
 8008fec:	003b      	movs	r3, r7
 8008fee:	f7f8 fda1 	bl	8001b34 <__aeabi_dsub>
 8008ff2:	9a02      	ldr	r2, [sp, #8]
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	f7f7 fa37 	bl	8000468 <__aeabi_dcmpge>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d1ea      	bne.n	8008fd4 <__ieee754_pow+0x850>
 8008ffe:	4c65      	ldr	r4, [pc, #404]	@ (8009194 <__ieee754_pow+0xa10>)
 8009000:	e777      	b.n	8008ef2 <__ieee754_pow+0x76e>
 8009002:	9a04      	ldr	r2, [sp, #16]
 8009004:	4b64      	ldr	r3, [pc, #400]	@ (8009198 <__ieee754_pow+0xa14>)
 8009006:	9200      	str	r2, [sp, #0]
 8009008:	429c      	cmp	r4, r3
 800900a:	d900      	bls.n	800900e <__ieee754_pow+0x88a>
 800900c:	e771      	b.n	8008ef2 <__ieee754_pow+0x76e>
 800900e:	9a02      	ldr	r2, [sp, #8]
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	0030      	movs	r0, r6
 8009014:	0039      	movs	r1, r7
 8009016:	f7f7 fb1d 	bl	8000654 <__aeabi_dadd>
 800901a:	2000      	movs	r0, #0
 800901c:	2200      	movs	r2, #0
 800901e:	4b5f      	ldr	r3, [pc, #380]	@ (800919c <__ieee754_pow+0xa18>)
 8009020:	9004      	str	r0, [sp, #16]
 8009022:	9105      	str	r1, [sp, #20]
 8009024:	f7f8 fabe 	bl	80015a4 <__aeabi_dmul>
 8009028:	0032      	movs	r2, r6
 800902a:	003b      	movs	r3, r7
 800902c:	9006      	str	r0, [sp, #24]
 800902e:	9107      	str	r1, [sp, #28]
 8009030:	9804      	ldr	r0, [sp, #16]
 8009032:	9905      	ldr	r1, [sp, #20]
 8009034:	f7f8 fd7e 	bl	8001b34 <__aeabi_dsub>
 8009038:	0002      	movs	r2, r0
 800903a:	000b      	movs	r3, r1
 800903c:	9802      	ldr	r0, [sp, #8]
 800903e:	9903      	ldr	r1, [sp, #12]
 8009040:	f7f8 fd78 	bl	8001b34 <__aeabi_dsub>
 8009044:	4a56      	ldr	r2, [pc, #344]	@ (80091a0 <__ieee754_pow+0xa1c>)
 8009046:	4b57      	ldr	r3, [pc, #348]	@ (80091a4 <__ieee754_pow+0xa20>)
 8009048:	f7f8 faac 	bl	80015a4 <__aeabi_dmul>
 800904c:	4a56      	ldr	r2, [pc, #344]	@ (80091a8 <__ieee754_pow+0xa24>)
 800904e:	0004      	movs	r4, r0
 8009050:	000d      	movs	r5, r1
 8009052:	9804      	ldr	r0, [sp, #16]
 8009054:	9905      	ldr	r1, [sp, #20]
 8009056:	4b55      	ldr	r3, [pc, #340]	@ (80091ac <__ieee754_pow+0xa28>)
 8009058:	f7f8 faa4 	bl	80015a4 <__aeabi_dmul>
 800905c:	0002      	movs	r2, r0
 800905e:	000b      	movs	r3, r1
 8009060:	0020      	movs	r0, r4
 8009062:	0029      	movs	r1, r5
 8009064:	f7f7 faf6 	bl	8000654 <__aeabi_dadd>
 8009068:	0004      	movs	r4, r0
 800906a:	000d      	movs	r5, r1
 800906c:	0002      	movs	r2, r0
 800906e:	000b      	movs	r3, r1
 8009070:	9806      	ldr	r0, [sp, #24]
 8009072:	9907      	ldr	r1, [sp, #28]
 8009074:	f7f7 faee 	bl	8000654 <__aeabi_dadd>
 8009078:	9a06      	ldr	r2, [sp, #24]
 800907a:	9b07      	ldr	r3, [sp, #28]
 800907c:	0006      	movs	r6, r0
 800907e:	000f      	movs	r7, r1
 8009080:	f7f8 fd58 	bl	8001b34 <__aeabi_dsub>
 8009084:	0002      	movs	r2, r0
 8009086:	000b      	movs	r3, r1
 8009088:	0020      	movs	r0, r4
 800908a:	0029      	movs	r1, r5
 800908c:	f7f8 fd52 	bl	8001b34 <__aeabi_dsub>
 8009090:	0032      	movs	r2, r6
 8009092:	9002      	str	r0, [sp, #8]
 8009094:	9103      	str	r1, [sp, #12]
 8009096:	003b      	movs	r3, r7
 8009098:	0030      	movs	r0, r6
 800909a:	0039      	movs	r1, r7
 800909c:	f7f8 fa82 	bl	80015a4 <__aeabi_dmul>
 80090a0:	0004      	movs	r4, r0
 80090a2:	000d      	movs	r5, r1
 80090a4:	4a42      	ldr	r2, [pc, #264]	@ (80091b0 <__ieee754_pow+0xa2c>)
 80090a6:	4b43      	ldr	r3, [pc, #268]	@ (80091b4 <__ieee754_pow+0xa30>)
 80090a8:	f7f8 fa7c 	bl	80015a4 <__aeabi_dmul>
 80090ac:	4a42      	ldr	r2, [pc, #264]	@ (80091b8 <__ieee754_pow+0xa34>)
 80090ae:	4b43      	ldr	r3, [pc, #268]	@ (80091bc <__ieee754_pow+0xa38>)
 80090b0:	f7f8 fd40 	bl	8001b34 <__aeabi_dsub>
 80090b4:	0022      	movs	r2, r4
 80090b6:	002b      	movs	r3, r5
 80090b8:	f7f8 fa74 	bl	80015a4 <__aeabi_dmul>
 80090bc:	4a40      	ldr	r2, [pc, #256]	@ (80091c0 <__ieee754_pow+0xa3c>)
 80090be:	4b41      	ldr	r3, [pc, #260]	@ (80091c4 <__ieee754_pow+0xa40>)
 80090c0:	f7f7 fac8 	bl	8000654 <__aeabi_dadd>
 80090c4:	0022      	movs	r2, r4
 80090c6:	002b      	movs	r3, r5
 80090c8:	f7f8 fa6c 	bl	80015a4 <__aeabi_dmul>
 80090cc:	4a3e      	ldr	r2, [pc, #248]	@ (80091c8 <__ieee754_pow+0xa44>)
 80090ce:	4b3f      	ldr	r3, [pc, #252]	@ (80091cc <__ieee754_pow+0xa48>)
 80090d0:	f7f8 fd30 	bl	8001b34 <__aeabi_dsub>
 80090d4:	0022      	movs	r2, r4
 80090d6:	002b      	movs	r3, r5
 80090d8:	f7f8 fa64 	bl	80015a4 <__aeabi_dmul>
 80090dc:	4a3c      	ldr	r2, [pc, #240]	@ (80091d0 <__ieee754_pow+0xa4c>)
 80090de:	4b3d      	ldr	r3, [pc, #244]	@ (80091d4 <__ieee754_pow+0xa50>)
 80090e0:	f7f7 fab8 	bl	8000654 <__aeabi_dadd>
 80090e4:	0022      	movs	r2, r4
 80090e6:	002b      	movs	r3, r5
 80090e8:	f7f8 fa5c 	bl	80015a4 <__aeabi_dmul>
 80090ec:	0002      	movs	r2, r0
 80090ee:	000b      	movs	r3, r1
 80090f0:	0030      	movs	r0, r6
 80090f2:	0039      	movs	r1, r7
 80090f4:	f7f8 fd1e 	bl	8001b34 <__aeabi_dsub>
 80090f8:	0004      	movs	r4, r0
 80090fa:	000d      	movs	r5, r1
 80090fc:	0002      	movs	r2, r0
 80090fe:	000b      	movs	r3, r1
 8009100:	0030      	movs	r0, r6
 8009102:	0039      	movs	r1, r7
 8009104:	f7f8 fa4e 	bl	80015a4 <__aeabi_dmul>
 8009108:	2380      	movs	r3, #128	@ 0x80
 800910a:	9004      	str	r0, [sp, #16]
 800910c:	9105      	str	r1, [sp, #20]
 800910e:	2200      	movs	r2, #0
 8009110:	0020      	movs	r0, r4
 8009112:	0029      	movs	r1, r5
 8009114:	05db      	lsls	r3, r3, #23
 8009116:	f7f8 fd0d 	bl	8001b34 <__aeabi_dsub>
 800911a:	0002      	movs	r2, r0
 800911c:	000b      	movs	r3, r1
 800911e:	9804      	ldr	r0, [sp, #16]
 8009120:	9905      	ldr	r1, [sp, #20]
 8009122:	f7f7 fdfb 	bl	8000d1c <__aeabi_ddiv>
 8009126:	9a02      	ldr	r2, [sp, #8]
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	0004      	movs	r4, r0
 800912c:	000d      	movs	r5, r1
 800912e:	0030      	movs	r0, r6
 8009130:	0039      	movs	r1, r7
 8009132:	f7f8 fa37 	bl	80015a4 <__aeabi_dmul>
 8009136:	9a02      	ldr	r2, [sp, #8]
 8009138:	9b03      	ldr	r3, [sp, #12]
 800913a:	f7f7 fa8b 	bl	8000654 <__aeabi_dadd>
 800913e:	0002      	movs	r2, r0
 8009140:	000b      	movs	r3, r1
 8009142:	0020      	movs	r0, r4
 8009144:	0029      	movs	r1, r5
 8009146:	f7f8 fcf5 	bl	8001b34 <__aeabi_dsub>
 800914a:	0032      	movs	r2, r6
 800914c:	003b      	movs	r3, r7
 800914e:	f7f8 fcf1 	bl	8001b34 <__aeabi_dsub>
 8009152:	0002      	movs	r2, r0
 8009154:	000b      	movs	r3, r1
 8009156:	2000      	movs	r0, #0
 8009158:	491f      	ldr	r1, [pc, #124]	@ (80091d8 <__ieee754_pow+0xa54>)
 800915a:	f7f8 fceb 	bl	8001b34 <__aeabi_dsub>
 800915e:	9b00      	ldr	r3, [sp, #0]
 8009160:	051b      	lsls	r3, r3, #20
 8009162:	185b      	adds	r3, r3, r1
 8009164:	151a      	asrs	r2, r3, #20
 8009166:	2a00      	cmp	r2, #0
 8009168:	dc06      	bgt.n	8009178 <__ieee754_pow+0x9f4>
 800916a:	9a00      	ldr	r2, [sp, #0]
 800916c:	f000 f83a 	bl	80091e4 <scalbn>
 8009170:	9a08      	ldr	r2, [sp, #32]
 8009172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009174:	f7ff fbee 	bl	8008954 <__ieee754_pow+0x1d0>
 8009178:	0019      	movs	r1, r3
 800917a:	e7f9      	b.n	8009170 <__ieee754_pow+0x9ec>
 800917c:	2300      	movs	r3, #0
 800917e:	4c16      	ldr	r4, [pc, #88]	@ (80091d8 <__ieee754_pow+0xa54>)
 8009180:	f7ff fbcb 	bl	800891a <__ieee754_pow+0x196>
 8009184:	2300      	movs	r3, #0
 8009186:	2400      	movs	r4, #0
 8009188:	f7ff fbc7 	bl	800891a <__ieee754_pow+0x196>
 800918c:	4090cbff 	.word	0x4090cbff
 8009190:	3f6f3400 	.word	0x3f6f3400
 8009194:	4090cc00 	.word	0x4090cc00
 8009198:	3fe00000 	.word	0x3fe00000
 800919c:	3fe62e43 	.word	0x3fe62e43
 80091a0:	fefa39ef 	.word	0xfefa39ef
 80091a4:	3fe62e42 	.word	0x3fe62e42
 80091a8:	0ca86c39 	.word	0x0ca86c39
 80091ac:	be205c61 	.word	0xbe205c61
 80091b0:	72bea4d0 	.word	0x72bea4d0
 80091b4:	3e663769 	.word	0x3e663769
 80091b8:	c5d26bf1 	.word	0xc5d26bf1
 80091bc:	3ebbbd41 	.word	0x3ebbbd41
 80091c0:	af25de2c 	.word	0xaf25de2c
 80091c4:	3f11566a 	.word	0x3f11566a
 80091c8:	16bebd93 	.word	0x16bebd93
 80091cc:	3f66c16c 	.word	0x3f66c16c
 80091d0:	5555553e 	.word	0x5555553e
 80091d4:	3fc55555 	.word	0x3fc55555
 80091d8:	3ff00000 	.word	0x3ff00000

080091dc <fabs>:
 80091dc:	0049      	lsls	r1, r1, #1
 80091de:	084b      	lsrs	r3, r1, #1
 80091e0:	0019      	movs	r1, r3
 80091e2:	4770      	bx	lr

080091e4 <scalbn>:
 80091e4:	004b      	lsls	r3, r1, #1
 80091e6:	b570      	push	{r4, r5, r6, lr}
 80091e8:	0d5b      	lsrs	r3, r3, #21
 80091ea:	0014      	movs	r4, r2
 80091ec:	000d      	movs	r5, r1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10f      	bne.n	8009212 <scalbn+0x2e>
 80091f2:	004b      	lsls	r3, r1, #1
 80091f4:	085b      	lsrs	r3, r3, #1
 80091f6:	4303      	orrs	r3, r0
 80091f8:	d012      	beq.n	8009220 <scalbn+0x3c>
 80091fa:	4b23      	ldr	r3, [pc, #140]	@ (8009288 <scalbn+0xa4>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	f7f8 f9d1 	bl	80015a4 <__aeabi_dmul>
 8009202:	4b22      	ldr	r3, [pc, #136]	@ (800928c <scalbn+0xa8>)
 8009204:	429c      	cmp	r4, r3
 8009206:	da0c      	bge.n	8009222 <scalbn+0x3e>
 8009208:	4a21      	ldr	r2, [pc, #132]	@ (8009290 <scalbn+0xac>)
 800920a:	4b22      	ldr	r3, [pc, #136]	@ (8009294 <scalbn+0xb0>)
 800920c:	f7f8 f9ca 	bl	80015a4 <__aeabi_dmul>
 8009210:	e006      	b.n	8009220 <scalbn+0x3c>
 8009212:	4a21      	ldr	r2, [pc, #132]	@ (8009298 <scalbn+0xb4>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d108      	bne.n	800922a <scalbn+0x46>
 8009218:	0002      	movs	r2, r0
 800921a:	000b      	movs	r3, r1
 800921c:	f7f7 fa1a 	bl	8000654 <__aeabi_dadd>
 8009220:	bd70      	pop	{r4, r5, r6, pc}
 8009222:	000d      	movs	r5, r1
 8009224:	004b      	lsls	r3, r1, #1
 8009226:	0d5b      	lsrs	r3, r3, #21
 8009228:	3b36      	subs	r3, #54	@ 0x36
 800922a:	4a1c      	ldr	r2, [pc, #112]	@ (800929c <scalbn+0xb8>)
 800922c:	4294      	cmp	r4, r2
 800922e:	dd0a      	ble.n	8009246 <scalbn+0x62>
 8009230:	4c1b      	ldr	r4, [pc, #108]	@ (80092a0 <scalbn+0xbc>)
 8009232:	4d1c      	ldr	r5, [pc, #112]	@ (80092a4 <scalbn+0xc0>)
 8009234:	2900      	cmp	r1, #0
 8009236:	da01      	bge.n	800923c <scalbn+0x58>
 8009238:	4c19      	ldr	r4, [pc, #100]	@ (80092a0 <scalbn+0xbc>)
 800923a:	4d1b      	ldr	r5, [pc, #108]	@ (80092a8 <scalbn+0xc4>)
 800923c:	4a18      	ldr	r2, [pc, #96]	@ (80092a0 <scalbn+0xbc>)
 800923e:	4b19      	ldr	r3, [pc, #100]	@ (80092a4 <scalbn+0xc0>)
 8009240:	0020      	movs	r0, r4
 8009242:	0029      	movs	r1, r5
 8009244:	e7e2      	b.n	800920c <scalbn+0x28>
 8009246:	18e2      	adds	r2, r4, r3
 8009248:	4b18      	ldr	r3, [pc, #96]	@ (80092ac <scalbn+0xc8>)
 800924a:	429a      	cmp	r2, r3
 800924c:	dcf0      	bgt.n	8009230 <scalbn+0x4c>
 800924e:	2a00      	cmp	r2, #0
 8009250:	dd05      	ble.n	800925e <scalbn+0x7a>
 8009252:	4b17      	ldr	r3, [pc, #92]	@ (80092b0 <scalbn+0xcc>)
 8009254:	0512      	lsls	r2, r2, #20
 8009256:	402b      	ands	r3, r5
 8009258:	431a      	orrs	r2, r3
 800925a:	0011      	movs	r1, r2
 800925c:	e7e0      	b.n	8009220 <scalbn+0x3c>
 800925e:	0013      	movs	r3, r2
 8009260:	3335      	adds	r3, #53	@ 0x35
 8009262:	da08      	bge.n	8009276 <scalbn+0x92>
 8009264:	4c0a      	ldr	r4, [pc, #40]	@ (8009290 <scalbn+0xac>)
 8009266:	4d0b      	ldr	r5, [pc, #44]	@ (8009294 <scalbn+0xb0>)
 8009268:	2900      	cmp	r1, #0
 800926a:	da01      	bge.n	8009270 <scalbn+0x8c>
 800926c:	4c08      	ldr	r4, [pc, #32]	@ (8009290 <scalbn+0xac>)
 800926e:	4d11      	ldr	r5, [pc, #68]	@ (80092b4 <scalbn+0xd0>)
 8009270:	4a07      	ldr	r2, [pc, #28]	@ (8009290 <scalbn+0xac>)
 8009272:	4b08      	ldr	r3, [pc, #32]	@ (8009294 <scalbn+0xb0>)
 8009274:	e7e4      	b.n	8009240 <scalbn+0x5c>
 8009276:	4b0e      	ldr	r3, [pc, #56]	@ (80092b0 <scalbn+0xcc>)
 8009278:	3236      	adds	r2, #54	@ 0x36
 800927a:	401d      	ands	r5, r3
 800927c:	0512      	lsls	r2, r2, #20
 800927e:	432a      	orrs	r2, r5
 8009280:	0011      	movs	r1, r2
 8009282:	4b0d      	ldr	r3, [pc, #52]	@ (80092b8 <scalbn+0xd4>)
 8009284:	2200      	movs	r2, #0
 8009286:	e7c1      	b.n	800920c <scalbn+0x28>
 8009288:	43500000 	.word	0x43500000
 800928c:	ffff3cb0 	.word	0xffff3cb0
 8009290:	c2f8f359 	.word	0xc2f8f359
 8009294:	01a56e1f 	.word	0x01a56e1f
 8009298:	000007ff 	.word	0x000007ff
 800929c:	0000c350 	.word	0x0000c350
 80092a0:	8800759c 	.word	0x8800759c
 80092a4:	7e37e43c 	.word	0x7e37e43c
 80092a8:	fe37e43c 	.word	0xfe37e43c
 80092ac:	000007fe 	.word	0x000007fe
 80092b0:	800fffff 	.word	0x800fffff
 80092b4:	81a56e1f 	.word	0x81a56e1f
 80092b8:	3c900000 	.word	0x3c900000

080092bc <with_errno>:
 80092bc:	b570      	push	{r4, r5, r6, lr}
 80092be:	000d      	movs	r5, r1
 80092c0:	0016      	movs	r6, r2
 80092c2:	0004      	movs	r4, r0
 80092c4:	f7ff f9b4 	bl	8008630 <__errno>
 80092c8:	0029      	movs	r1, r5
 80092ca:	6006      	str	r6, [r0, #0]
 80092cc:	0020      	movs	r0, r4
 80092ce:	bd70      	pop	{r4, r5, r6, pc}

080092d0 <xflow>:
 80092d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092d2:	0014      	movs	r4, r2
 80092d4:	001d      	movs	r5, r3
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d002      	beq.n	80092e0 <xflow+0x10>
 80092da:	2180      	movs	r1, #128	@ 0x80
 80092dc:	0609      	lsls	r1, r1, #24
 80092de:	185b      	adds	r3, r3, r1
 80092e0:	9200      	str	r2, [sp, #0]
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	9a00      	ldr	r2, [sp, #0]
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	0020      	movs	r0, r4
 80092ea:	0029      	movs	r1, r5
 80092ec:	f7f8 f95a 	bl	80015a4 <__aeabi_dmul>
 80092f0:	2222      	movs	r2, #34	@ 0x22
 80092f2:	f7ff ffe3 	bl	80092bc <with_errno>
 80092f6:	b003      	add	sp, #12
 80092f8:	bd30      	pop	{r4, r5, pc}

080092fa <__math_uflow>:
 80092fa:	2380      	movs	r3, #128	@ 0x80
 80092fc:	b510      	push	{r4, lr}
 80092fe:	2200      	movs	r2, #0
 8009300:	055b      	lsls	r3, r3, #21
 8009302:	f7ff ffe5 	bl	80092d0 <xflow>
 8009306:	bd10      	pop	{r4, pc}

08009308 <__math_oflow>:
 8009308:	23e0      	movs	r3, #224	@ 0xe0
 800930a:	b510      	push	{r4, lr}
 800930c:	2200      	movs	r2, #0
 800930e:	05db      	lsls	r3, r3, #23
 8009310:	f7ff ffde 	bl	80092d0 <xflow>
 8009314:	bd10      	pop	{r4, pc}
	...

08009318 <__ieee754_sqrt>:
 8009318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931a:	000a      	movs	r2, r1
 800931c:	000d      	movs	r5, r1
 800931e:	496d      	ldr	r1, [pc, #436]	@ (80094d4 <__ieee754_sqrt+0x1bc>)
 8009320:	0004      	movs	r4, r0
 8009322:	0003      	movs	r3, r0
 8009324:	0008      	movs	r0, r1
 8009326:	b087      	sub	sp, #28
 8009328:	4028      	ands	r0, r5
 800932a:	4288      	cmp	r0, r1
 800932c:	d111      	bne.n	8009352 <__ieee754_sqrt+0x3a>
 800932e:	0022      	movs	r2, r4
 8009330:	002b      	movs	r3, r5
 8009332:	0020      	movs	r0, r4
 8009334:	0029      	movs	r1, r5
 8009336:	f7f8 f935 	bl	80015a4 <__aeabi_dmul>
 800933a:	0002      	movs	r2, r0
 800933c:	000b      	movs	r3, r1
 800933e:	0020      	movs	r0, r4
 8009340:	0029      	movs	r1, r5
 8009342:	f7f7 f987 	bl	8000654 <__aeabi_dadd>
 8009346:	0004      	movs	r4, r0
 8009348:	000d      	movs	r5, r1
 800934a:	0020      	movs	r0, r4
 800934c:	0029      	movs	r1, r5
 800934e:	b007      	add	sp, #28
 8009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009352:	2d00      	cmp	r5, #0
 8009354:	dc11      	bgt.n	800937a <__ieee754_sqrt+0x62>
 8009356:	0069      	lsls	r1, r5, #1
 8009358:	0849      	lsrs	r1, r1, #1
 800935a:	4321      	orrs	r1, r4
 800935c:	d0f5      	beq.n	800934a <__ieee754_sqrt+0x32>
 800935e:	2000      	movs	r0, #0
 8009360:	4285      	cmp	r5, r0
 8009362:	d010      	beq.n	8009386 <__ieee754_sqrt+0x6e>
 8009364:	0022      	movs	r2, r4
 8009366:	002b      	movs	r3, r5
 8009368:	0020      	movs	r0, r4
 800936a:	0029      	movs	r1, r5
 800936c:	f7f8 fbe2 	bl	8001b34 <__aeabi_dsub>
 8009370:	0002      	movs	r2, r0
 8009372:	000b      	movs	r3, r1
 8009374:	f7f7 fcd2 	bl	8000d1c <__aeabi_ddiv>
 8009378:	e7e5      	b.n	8009346 <__ieee754_sqrt+0x2e>
 800937a:	1528      	asrs	r0, r5, #20
 800937c:	d115      	bne.n	80093aa <__ieee754_sqrt+0x92>
 800937e:	2480      	movs	r4, #128	@ 0x80
 8009380:	2100      	movs	r1, #0
 8009382:	0364      	lsls	r4, r4, #13
 8009384:	e007      	b.n	8009396 <__ieee754_sqrt+0x7e>
 8009386:	0ada      	lsrs	r2, r3, #11
 8009388:	3815      	subs	r0, #21
 800938a:	055b      	lsls	r3, r3, #21
 800938c:	2a00      	cmp	r2, #0
 800938e:	d0fa      	beq.n	8009386 <__ieee754_sqrt+0x6e>
 8009390:	e7f5      	b.n	800937e <__ieee754_sqrt+0x66>
 8009392:	0052      	lsls	r2, r2, #1
 8009394:	3101      	adds	r1, #1
 8009396:	4222      	tst	r2, r4
 8009398:	d0fb      	beq.n	8009392 <__ieee754_sqrt+0x7a>
 800939a:	1e4c      	subs	r4, r1, #1
 800939c:	1b00      	subs	r0, r0, r4
 800939e:	2420      	movs	r4, #32
 80093a0:	001d      	movs	r5, r3
 80093a2:	1a64      	subs	r4, r4, r1
 80093a4:	40e5      	lsrs	r5, r4
 80093a6:	408b      	lsls	r3, r1
 80093a8:	432a      	orrs	r2, r5
 80093aa:	494b      	ldr	r1, [pc, #300]	@ (80094d8 <__ieee754_sqrt+0x1c0>)
 80093ac:	0312      	lsls	r2, r2, #12
 80093ae:	1844      	adds	r4, r0, r1
 80093b0:	2180      	movs	r1, #128	@ 0x80
 80093b2:	0b12      	lsrs	r2, r2, #12
 80093b4:	0349      	lsls	r1, r1, #13
 80093b6:	4311      	orrs	r1, r2
 80093b8:	07c0      	lsls	r0, r0, #31
 80093ba:	d403      	bmi.n	80093c4 <__ieee754_sqrt+0xac>
 80093bc:	0fda      	lsrs	r2, r3, #31
 80093be:	0049      	lsls	r1, r1, #1
 80093c0:	1851      	adds	r1, r2, r1
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	2500      	movs	r5, #0
 80093c6:	1062      	asrs	r2, r4, #1
 80093c8:	0049      	lsls	r1, r1, #1
 80093ca:	2480      	movs	r4, #128	@ 0x80
 80093cc:	9205      	str	r2, [sp, #20]
 80093ce:	0fda      	lsrs	r2, r3, #31
 80093d0:	1852      	adds	r2, r2, r1
 80093d2:	2016      	movs	r0, #22
 80093d4:	0029      	movs	r1, r5
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	03a4      	lsls	r4, r4, #14
 80093da:	190e      	adds	r6, r1, r4
 80093dc:	4296      	cmp	r6, r2
 80093de:	dc02      	bgt.n	80093e6 <__ieee754_sqrt+0xce>
 80093e0:	1931      	adds	r1, r6, r4
 80093e2:	1b92      	subs	r2, r2, r6
 80093e4:	192d      	adds	r5, r5, r4
 80093e6:	0fde      	lsrs	r6, r3, #31
 80093e8:	0052      	lsls	r2, r2, #1
 80093ea:	3801      	subs	r0, #1
 80093ec:	1992      	adds	r2, r2, r6
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	0864      	lsrs	r4, r4, #1
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d1f1      	bne.n	80093da <__ieee754_sqrt+0xc2>
 80093f6:	2620      	movs	r6, #32
 80093f8:	2780      	movs	r7, #128	@ 0x80
 80093fa:	0004      	movs	r4, r0
 80093fc:	9604      	str	r6, [sp, #16]
 80093fe:	063f      	lsls	r7, r7, #24
 8009400:	19c6      	adds	r6, r0, r7
 8009402:	46b4      	mov	ip, r6
 8009404:	4291      	cmp	r1, r2
 8009406:	db02      	blt.n	800940e <__ieee754_sqrt+0xf6>
 8009408:	d114      	bne.n	8009434 <__ieee754_sqrt+0x11c>
 800940a:	429e      	cmp	r6, r3
 800940c:	d812      	bhi.n	8009434 <__ieee754_sqrt+0x11c>
 800940e:	4660      	mov	r0, ip
 8009410:	4666      	mov	r6, ip
 8009412:	19c0      	adds	r0, r0, r7
 8009414:	9100      	str	r1, [sp, #0]
 8009416:	2e00      	cmp	r6, #0
 8009418:	da03      	bge.n	8009422 <__ieee754_sqrt+0x10a>
 800941a:	43c6      	mvns	r6, r0
 800941c:	0ff6      	lsrs	r6, r6, #31
 800941e:	198e      	adds	r6, r1, r6
 8009420:	9600      	str	r6, [sp, #0]
 8009422:	1a52      	subs	r2, r2, r1
 8009424:	4563      	cmp	r3, ip
 8009426:	4189      	sbcs	r1, r1
 8009428:	4249      	negs	r1, r1
 800942a:	1a52      	subs	r2, r2, r1
 800942c:	4661      	mov	r1, ip
 800942e:	1a5b      	subs	r3, r3, r1
 8009430:	9900      	ldr	r1, [sp, #0]
 8009432:	19e4      	adds	r4, r4, r7
 8009434:	0fde      	lsrs	r6, r3, #31
 8009436:	0052      	lsls	r2, r2, #1
 8009438:	1992      	adds	r2, r2, r6
 800943a:	9e04      	ldr	r6, [sp, #16]
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	3e01      	subs	r6, #1
 8009440:	087f      	lsrs	r7, r7, #1
 8009442:	9604      	str	r6, [sp, #16]
 8009444:	2e00      	cmp	r6, #0
 8009446:	d1db      	bne.n	8009400 <__ieee754_sqrt+0xe8>
 8009448:	431a      	orrs	r2, r3
 800944a:	d01f      	beq.n	800948c <__ieee754_sqrt+0x174>
 800944c:	4e23      	ldr	r6, [pc, #140]	@ (80094dc <__ieee754_sqrt+0x1c4>)
 800944e:	4f24      	ldr	r7, [pc, #144]	@ (80094e0 <__ieee754_sqrt+0x1c8>)
 8009450:	6830      	ldr	r0, [r6, #0]
 8009452:	6871      	ldr	r1, [r6, #4]
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	9200      	str	r2, [sp, #0]
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	6832      	ldr	r2, [r6, #0]
 800945e:	6873      	ldr	r3, [r6, #4]
 8009460:	9202      	str	r2, [sp, #8]
 8009462:	9303      	str	r3, [sp, #12]
 8009464:	9a00      	ldr	r2, [sp, #0]
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	f7f8 fb64 	bl	8001b34 <__aeabi_dsub>
 800946c:	0002      	movs	r2, r0
 800946e:	000b      	movs	r3, r1
 8009470:	9802      	ldr	r0, [sp, #8]
 8009472:	9903      	ldr	r1, [sp, #12]
 8009474:	f7f6 ffe4 	bl	8000440 <__aeabi_dcmple>
 8009478:	2800      	cmp	r0, #0
 800947a:	d007      	beq.n	800948c <__ieee754_sqrt+0x174>
 800947c:	6830      	ldr	r0, [r6, #0]
 800947e:	6871      	ldr	r1, [r6, #4]
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	1c67      	adds	r7, r4, #1
 8009486:	d10f      	bne.n	80094a8 <__ieee754_sqrt+0x190>
 8009488:	9c04      	ldr	r4, [sp, #16]
 800948a:	3501      	adds	r5, #1
 800948c:	4b15      	ldr	r3, [pc, #84]	@ (80094e4 <__ieee754_sqrt+0x1cc>)
 800948e:	106a      	asrs	r2, r5, #1
 8009490:	18d2      	adds	r2, r2, r3
 8009492:	0863      	lsrs	r3, r4, #1
 8009494:	07ed      	lsls	r5, r5, #31
 8009496:	d502      	bpl.n	800949e <__ieee754_sqrt+0x186>
 8009498:	2180      	movs	r1, #128	@ 0x80
 800949a:	0609      	lsls	r1, r1, #24
 800949c:	430b      	orrs	r3, r1
 800949e:	9905      	ldr	r1, [sp, #20]
 80094a0:	001c      	movs	r4, r3
 80094a2:	0509      	lsls	r1, r1, #20
 80094a4:	188d      	adds	r5, r1, r2
 80094a6:	e750      	b.n	800934a <__ieee754_sqrt+0x32>
 80094a8:	f7f7 f8d4 	bl	8000654 <__aeabi_dadd>
 80094ac:	6877      	ldr	r7, [r6, #4]
 80094ae:	6836      	ldr	r6, [r6, #0]
 80094b0:	0002      	movs	r2, r0
 80094b2:	000b      	movs	r3, r1
 80094b4:	0030      	movs	r0, r6
 80094b6:	0039      	movs	r1, r7
 80094b8:	f7f6 ffb8 	bl	800042c <__aeabi_dcmplt>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d004      	beq.n	80094ca <__ieee754_sqrt+0x1b2>
 80094c0:	3402      	adds	r4, #2
 80094c2:	4263      	negs	r3, r4
 80094c4:	4163      	adcs	r3, r4
 80094c6:	18ed      	adds	r5, r5, r3
 80094c8:	e7e0      	b.n	800948c <__ieee754_sqrt+0x174>
 80094ca:	2301      	movs	r3, #1
 80094cc:	3401      	adds	r4, #1
 80094ce:	439c      	bics	r4, r3
 80094d0:	e7dc      	b.n	800948c <__ieee754_sqrt+0x174>
 80094d2:	46c0      	nop			@ (mov r8, r8)
 80094d4:	7ff00000 	.word	0x7ff00000
 80094d8:	fffffc01 	.word	0xfffffc01
 80094dc:	20000068 	.word	0x20000068
 80094e0:	20000060 	.word	0x20000060
 80094e4:	3fe00000 	.word	0x3fe00000

080094e8 <_init>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	46c0      	nop			@ (mov r8, r8)
 80094ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ee:	bc08      	pop	{r3}
 80094f0:	469e      	mov	lr, r3
 80094f2:	4770      	bx	lr

080094f4 <_fini>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	46c0      	nop			@ (mov r8, r8)
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr
