
airMouse-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800465c  0800465c  0000565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800474c  0800474c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800474c  0800474c  0000574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004754  08004754  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004754  08004754  00005754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800475c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08004768  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004768  000061c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001014e  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271a  00000000  00000000  00016182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  000188a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  000194b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eb7  00000000  00000000  00019e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112e1  00000000  00000000  00032cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099fab  00000000  00000000  00043f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddf49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab4  00000000  00000000  000ddf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e0a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004644 	.word	0x08004644

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004644 	.word	0x08004644

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	@ (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	@ (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	@ (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <HAL_Init+0x3c>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_Init+0x3c>)
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	0049      	lsls	r1, r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000646:	2003      	movs	r0, #3
 8000648:	f000 f810 	bl	800066c <HAL_InitTick>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d003      	beq.n	8000658 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e001      	b.n	800065c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f003 fdbc 	bl	80041d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40022000 	.word	0x40022000

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000674:	230f      	movs	r3, #15
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <HAL_InitTick+0x88>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d02b      	beq.n	80006dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <HAL_InitTick+0x8c>)
 8000686:	681c      	ldr	r4, [r3, #0]
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <HAL_InitTick+0x88>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	0019      	movs	r1, r3
 800068e:	23fa      	movs	r3, #250	@ 0xfa
 8000690:	0098      	lsls	r0, r3, #2
 8000692:	f7ff fd3f 	bl	8000114 <__udivsi3>
 8000696:	0003      	movs	r3, r0
 8000698:	0019      	movs	r1, r3
 800069a:	0020      	movs	r0, r4
 800069c:	f7ff fd3a 	bl	8000114 <__udivsi3>
 80006a0:	0003      	movs	r3, r0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f913 	bl	80008ce <HAL_SYSTICK_Config>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d112      	bne.n	80006d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 f8f2 	bl	80008a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <HAL_InitTick+0x90>)
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e00d      	b.n	80006e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e008      	b.n	80006e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d2:	230f      	movs	r3, #15
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e003      	b.n	80006e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	781b      	ldrb	r3, [r3, #0]
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b005      	add	sp, #20
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000000 	.word	0x20000000

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <HAL_IncTick+0x1c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	001a      	movs	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_IncTick+0x20>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	18d2      	adds	r2, r2, r3
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <HAL_IncTick+0x20>)
 8000712:	601a      	str	r2, [r3, #0]
}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	20000004 	.word	0x20000004
 8000720:	20000028 	.word	0x20000028

08000724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;
 8000728:	4b02      	ldr	r3, [pc, #8]	@ (8000734 <HAL_GetTick+0x10>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	20000028 	.word	0x20000028

08000738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff fff0 	bl	8000724 <HAL_GetTick>
 8000744:	0003      	movs	r3, r0
 8000746:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	d005      	beq.n	800075e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_Delay+0x44>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	001a      	movs	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	189b      	adds	r3, r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	f7ff ffe0 	bl	8000724 <HAL_GetTick>
 8000764:	0002      	movs	r2, r0
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8f7      	bhi.n	8000760 <HAL_Delay+0x28>
  {
  }
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b004      	add	sp, #16
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000004 	.word	0x20000004

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b7f      	cmp	r3, #127	@ 0x7f
 8000794:	d828      	bhi.n	80007e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000796:	4a2f      	ldr	r2, [pc, #188]	@ (8000854 <__NVIC_SetPriority+0xd4>)
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b25b      	sxtb	r3, r3
 800079e:	089b      	lsrs	r3, r3, #2
 80007a0:	33c0      	adds	r3, #192	@ 0xc0
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	589b      	ldr	r3, [r3, r2]
 80007a6:	1dfa      	adds	r2, r7, #7
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	0011      	movs	r1, r2
 80007ac:	2203      	movs	r2, #3
 80007ae:	400a      	ands	r2, r1
 80007b0:	00d2      	lsls	r2, r2, #3
 80007b2:	21ff      	movs	r1, #255	@ 0xff
 80007b4:	4091      	lsls	r1, r2
 80007b6:	000a      	movs	r2, r1
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	401a      	ands	r2, r3
 80007bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	22ff      	movs	r2, #255	@ 0xff
 80007c4:	401a      	ands	r2, r3
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0018      	movs	r0, r3
 80007cc:	2303      	movs	r3, #3
 80007ce:	4003      	ands	r3, r0
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d4:	481f      	ldr	r0, [pc, #124]	@ (8000854 <__NVIC_SetPriority+0xd4>)
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	089b      	lsrs	r3, r3, #2
 80007de:	430a      	orrs	r2, r1
 80007e0:	33c0      	adds	r3, #192	@ 0xc0
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007e6:	e031      	b.n	800084c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000858 <__NVIC_SetPriority+0xd8>)
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	0019      	movs	r1, r3
 80007f0:	230f      	movs	r3, #15
 80007f2:	400b      	ands	r3, r1
 80007f4:	3b08      	subs	r3, #8
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	3306      	adds	r3, #6
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	18d3      	adds	r3, r2, r3
 80007fe:	3304      	adds	r3, #4
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	1dfa      	adds	r2, r7, #7
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	0011      	movs	r1, r2
 8000808:	2203      	movs	r2, #3
 800080a:	400a      	ands	r2, r1
 800080c:	00d2      	lsls	r2, r2, #3
 800080e:	21ff      	movs	r1, #255	@ 0xff
 8000810:	4091      	lsls	r1, r2
 8000812:	000a      	movs	r2, r1
 8000814:	43d2      	mvns	r2, r2
 8000816:	401a      	ands	r2, r3
 8000818:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	019b      	lsls	r3, r3, #6
 800081e:	22ff      	movs	r2, #255	@ 0xff
 8000820:	401a      	ands	r2, r3
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	0018      	movs	r0, r3
 8000828:	2303      	movs	r3, #3
 800082a:	4003      	ands	r3, r0
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000830:	4809      	ldr	r0, [pc, #36]	@ (8000858 <__NVIC_SetPriority+0xd8>)
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	001c      	movs	r4, r3
 8000838:	230f      	movs	r3, #15
 800083a:	4023      	ands	r3, r4
 800083c:	3b08      	subs	r3, #8
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	430a      	orrs	r2, r1
 8000842:	3306      	adds	r3, #6
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	18c3      	adds	r3, r0, r3
 8000848:	3304      	adds	r3, #4
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b003      	add	sp, #12
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	1e5a      	subs	r2, r3, #1
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	045b      	lsls	r3, r3, #17
 800086c:	429a      	cmp	r2, r3
 800086e:	d301      	bcc.n	8000874 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000870:	2301      	movs	r3, #1
 8000872:	e010      	b.n	8000896 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <SysTick_Config+0x44>)
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	3a01      	subs	r2, #1
 800087a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087c:	2301      	movs	r3, #1
 800087e:	425b      	negs	r3, r3
 8000880:	2103      	movs	r1, #3
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff ff7c 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <SysTick_Config+0x44>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <SysTick_Config+0x44>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	210f      	movs	r1, #15
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	1c02      	adds	r2, r0, #0
 80008b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ffbf 	bl	800085c <SysTick_Config>
 80008de:	0003      	movs	r3, r0
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	e147      	b.n	8000b88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	4091      	lsls	r1, r2
 8000902:	000a      	movs	r2, r1
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d100      	bne.n	8000910 <HAL_GPIO_Init+0x28>
 800090e:	e138      	b.n	8000b82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2203      	movs	r2, #3
 8000916:	4013      	ands	r3, r2
 8000918:	2b01      	cmp	r3, #1
 800091a:	d005      	beq.n	8000928 <HAL_GPIO_Init+0x40>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2203      	movs	r2, #3
 8000922:	4013      	ands	r3, r2
 8000924:	2b02      	cmp	r3, #2
 8000926:	d130      	bne.n	800098a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	409a      	lsls	r2, r3
 8000936:	0013      	movs	r3, r2
 8000938:	43da      	mvns	r2, r3
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	409a      	lsls	r2, r3
 800094a:	0013      	movs	r3, r2
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4313      	orrs	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800095e:	2201      	movs	r2, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
 8000964:	0013      	movs	r3, r2
 8000966:	43da      	mvns	r2, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	091b      	lsrs	r3, r3, #4
 8000974:	2201      	movs	r2, #1
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
 800097c:	0013      	movs	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2203      	movs	r2, #3
 8000990:	4013      	ands	r3, r2
 8000992:	2b03      	cmp	r3, #3
 8000994:	d017      	beq.n	80009c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	409a      	lsls	r2, r3
 80009a4:	0013      	movs	r3, r2
 80009a6:	43da      	mvns	r2, r3
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	409a      	lsls	r2, r3
 80009b8:	0013      	movs	r3, r2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2203      	movs	r2, #3
 80009cc:	4013      	ands	r3, r2
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d123      	bne.n	8000a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	58d3      	ldr	r3, [r2, r3]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	2207      	movs	r2, #7
 80009e4:	4013      	ands	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	409a      	lsls	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	43da      	mvns	r2, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2107      	movs	r1, #7
 80009fe:	400b      	ands	r3, r1
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	6939      	ldr	r1, [r7, #16]
 8000a18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	409a      	lsls	r2, r3
 8000a28:	0013      	movs	r3, r2
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2203      	movs	r2, #3
 8000a38:	401a      	ands	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	23c0      	movs	r3, #192	@ 0xc0
 8000a54:	029b      	lsls	r3, r3, #10
 8000a56:	4013      	ands	r3, r2
 8000a58:	d100      	bne.n	8000a5c <HAL_GPIO_Init+0x174>
 8000a5a:	e092      	b.n	8000b82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a5c:	4a50      	ldr	r2, [pc, #320]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3318      	adds	r3, #24
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	589b      	ldr	r3, [r3, r2]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	4013      	ands	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	220f      	movs	r2, #15
 8000a74:	409a      	lsls	r2, r3
 8000a76:	0013      	movs	r3, r2
 8000a78:	43da      	mvns	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	23a0      	movs	r3, #160	@ 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0x1ca>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a45      	ldr	r2, [pc, #276]	@ (8000ba4 <HAL_GPIO_Init+0x2bc>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00d      	beq.n	8000aae <HAL_GPIO_Init+0x1c6>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a44      	ldr	r2, [pc, #272]	@ (8000ba8 <HAL_GPIO_Init+0x2c0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d007      	beq.n	8000aaa <HAL_GPIO_Init+0x1c2>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a43      	ldr	r2, [pc, #268]	@ (8000bac <HAL_GPIO_Init+0x2c4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_GPIO_Init+0x1be>
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x1cc>
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	e004      	b.n	8000ab4 <HAL_GPIO_Init+0x1cc>
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e002      	b.n	8000ab4 <HAL_GPIO_Init+0x1cc>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <HAL_GPIO_Init+0x1cc>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	400a      	ands	r2, r1
 8000aba:	00d2      	lsls	r2, r2, #3
 8000abc:	4093      	lsls	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ac4:	4936      	ldr	r1, [pc, #216]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3318      	adds	r3, #24
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	43da      	mvns	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	2380      	movs	r3, #128	@ 0x80
 8000ae8:	035b      	lsls	r3, r3, #13
 8000aea:	4013      	ands	r3, r2
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000af6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000afc:	4b28      	ldr	r3, [pc, #160]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	43da      	mvns	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	2380      	movs	r3, #128	@ 0x80
 8000b12:	039b      	lsls	r3, r3, #14
 8000b14:	4013      	ands	r3, r2
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b28:	2384      	movs	r3, #132	@ 0x84
 8000b2a:	58d3      	ldr	r3, [r2, r3]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	43da      	mvns	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	029b      	lsls	r3, r3, #10
 8000b40:	4013      	ands	r3, r2
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b4c:	4914      	ldr	r1, [pc, #80]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	2284      	movs	r2, #132	@ 0x84
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b56:	2380      	movs	r3, #128	@ 0x80
 8000b58:	58d3      	ldr	r3, [r2, r3]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	025b      	lsls	r3, r3, #9
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b7a:	4909      	ldr	r1, [pc, #36]	@ (8000ba0 <HAL_GPIO_Init+0x2b8>)
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	40da      	lsrs	r2, r3
 8000b90:	1e13      	subs	r3, r2, #0
 8000b92:	d000      	beq.n	8000b96 <HAL_GPIO_Init+0x2ae>
 8000b94:	e6b0      	b.n	80008f8 <HAL_GPIO_Init+0x10>
  }
}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b006      	add	sp, #24
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	50000400 	.word	0x50000400
 8000ba8:	50000800 	.word	0x50000800
 8000bac:	50000c00 	.word	0x50000c00

08000bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	000a      	movs	r2, r1
 8000bba:	1cbb      	adds	r3, r7, #2
 8000bbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	1cba      	adds	r2, r7, #2
 8000bc4:	8812      	ldrh	r2, [r2, #0]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d004      	beq.n	8000bd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000bca:	230f      	movs	r3, #15
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e003      	b.n	8000bdc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	0008      	movs	r0, r1
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	1cbb      	adds	r3, r7, #2
 8000bf8:	1c02      	adds	r2, r0, #0
 8000bfa:	801a      	strh	r2, [r3, #0]
 8000bfc:	1c7b      	adds	r3, r7, #1
 8000bfe:	1c0a      	adds	r2, r1, #0
 8000c00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c02:	1c7b      	adds	r3, r7, #1
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d004      	beq.n	8000c14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c0a:	1cbb      	adds	r3, r7, #2
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c12:	e003      	b.n	8000c1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c14:	1cbb      	adds	r3, r7, #2
 8000c16:	881a      	ldrh	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e08f      	b.n	8000d56 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2241      	movs	r2, #65	@ 0x41
 8000c3a:	5c9b      	ldrb	r3, [r3, r2]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d107      	bne.n	8000c52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2240      	movs	r2, #64	@ 0x40
 8000c46:	2100      	movs	r1, #0
 8000c48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f003 f875 	bl	8003d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2241      	movs	r2, #65	@ 0x41
 8000c56:	2124      	movs	r1, #36	@ 0x24
 8000c58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2101      	movs	r1, #1
 8000c66:	438a      	bics	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	493b      	ldr	r1, [pc, #236]	@ (8000d60 <HAL_I2C_Init+0x13c>)
 8000c74:	400a      	ands	r2, r1
 8000c76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4938      	ldr	r1, [pc, #224]	@ (8000d64 <HAL_I2C_Init+0x140>)
 8000c84:	400a      	ands	r2, r1
 8000c86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d108      	bne.n	8000ca2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0209      	lsls	r1, r1, #8
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	e007      	b.n	8000cb2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2184      	movs	r1, #132	@ 0x84
 8000cac:	0209      	lsls	r1, r1, #8
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d109      	bne.n	8000cce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2180      	movs	r1, #128	@ 0x80
 8000cc6:	0109      	lsls	r1, r1, #4
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	e007      	b.n	8000cde <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4923      	ldr	r1, [pc, #140]	@ (8000d68 <HAL_I2C_Init+0x144>)
 8000cda:	400a      	ands	r2, r1
 8000cdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4920      	ldr	r1, [pc, #128]	@ (8000d6c <HAL_I2C_Init+0x148>)
 8000cea:	430a      	orrs	r2, r1
 8000cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	491a      	ldr	r1, [pc, #104]	@ (8000d64 <HAL_I2C_Init+0x140>)
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	431a      	orrs	r2, r3
 8000d08:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69d9      	ldr	r1, [r3, #28]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a1a      	ldr	r2, [r3, #32]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2101      	movs	r1, #1
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2241      	movs	r2, #65	@ 0x41
 8000d42:	2120      	movs	r1, #32
 8000d44:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2242      	movs	r2, #66	@ 0x42
 8000d50:	2100      	movs	r1, #0
 8000d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	f0ffffff 	.word	0xf0ffffff
 8000d64:	ffff7fff 	.word	0xffff7fff
 8000d68:	fffff7ff 	.word	0xfffff7ff
 8000d6c:	02008000 	.word	0x02008000

08000d70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	000c      	movs	r4, r1
 8000d7a:	0010      	movs	r0, r2
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	230a      	movs	r3, #10
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	1c22      	adds	r2, r4, #0
 8000d84:	801a      	strh	r2, [r3, #0]
 8000d86:	2308      	movs	r3, #8
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	1c02      	adds	r2, r0, #0
 8000d8c:	801a      	strh	r2, [r3, #0]
 8000d8e:	1dbb      	adds	r3, r7, #6
 8000d90:	1c0a      	adds	r2, r1, #0
 8000d92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2241      	movs	r2, #65	@ 0x41
 8000d98:	5c9b      	ldrb	r3, [r3, r2]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b20      	cmp	r3, #32
 8000d9e:	d000      	beq.n	8000da2 <HAL_I2C_Mem_Write+0x32>
 8000da0:	e10c      	b.n	8000fbc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <HAL_I2C_Mem_Write+0x42>
 8000da8:	232c      	movs	r3, #44	@ 0x2c
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d105      	bne.n	8000dbe <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2280      	movs	r2, #128	@ 0x80
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e0ff      	b.n	8000fbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2240      	movs	r2, #64	@ 0x40
 8000dc2:	5c9b      	ldrb	r3, [r3, r2]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <HAL_I2C_Mem_Write+0x5c>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e0f8      	b.n	8000fbe <HAL_I2C_Mem_Write+0x24e>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2240      	movs	r2, #64	@ 0x40
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000dd4:	f7ff fca6 	bl	8000724 <HAL_GetTick>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ddc:	2380      	movs	r3, #128	@ 0x80
 8000dde:	0219      	lsls	r1, r3, #8
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2319      	movs	r3, #25
 8000de8:	2201      	movs	r2, #1
 8000dea:	f000 fb0b 	bl	8001404 <I2C_WaitOnFlagUntilTimeout>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e0e3      	b.n	8000fbe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2241      	movs	r2, #65	@ 0x41
 8000dfa:	2121      	movs	r1, #33	@ 0x21
 8000dfc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2242      	movs	r2, #66	@ 0x42
 8000e02:	2140      	movs	r1, #64	@ 0x40
 8000e04:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	222c      	movs	r2, #44	@ 0x2c
 8000e16:	18ba      	adds	r2, r7, r2
 8000e18:	8812      	ldrh	r2, [r2, #0]
 8000e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e22:	1dbb      	adds	r3, r7, #6
 8000e24:	881c      	ldrh	r4, [r3, #0]
 8000e26:	2308      	movs	r3, #8
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	881a      	ldrh	r2, [r3, #0]
 8000e2c:	230a      	movs	r3, #10
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	8819      	ldrh	r1, [r3, #0]
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	0023      	movs	r3, r4
 8000e3e:	f000 f9f9 	bl	8001234 <I2C_RequestMemoryWrite>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d005      	beq.n	8000e52 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2240      	movs	r2, #64	@ 0x40
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0b5      	b.n	8000fbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	2bff      	cmp	r3, #255	@ 0xff
 8000e5a:	d911      	bls.n	8000e80 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	22ff      	movs	r2, #255	@ 0xff
 8000e60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	045c      	lsls	r4, r3, #17
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	8819      	ldrh	r1, [r3, #0]
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	2300      	movs	r3, #0
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	0023      	movs	r3, r4
 8000e7a:	f000 fc9d 	bl	80017b8 <I2C_TransferConfig>
 8000e7e:	e012      	b.n	8000ea6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	049c      	lsls	r4, r3, #18
 8000e94:	230a      	movs	r3, #10
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	8819      	ldrh	r1, [r3, #0]
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	0023      	movs	r3, r4
 8000ea2:	f000 fc89 	bl	80017b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fb01 	bl	80014b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e081      	b.n	8000fbe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03a      	beq.n	8000f6a <HAL_I2C_Mem_Write+0x1fa>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d136      	bne.n	8000f6a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	0013      	movs	r3, r2
 8000f06:	2200      	movs	r2, #0
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	f000 fa7b 	bl	8001404 <I2C_WaitOnFlagUntilTimeout>
 8000f0e:	1e03      	subs	r3, r0, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e053      	b.n	8000fbe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	2bff      	cmp	r3, #255	@ 0xff
 8000f1e:	d911      	bls.n	8000f44 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	22ff      	movs	r2, #255	@ 0xff
 8000f24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	045c      	lsls	r4, r3, #17
 8000f30:	230a      	movs	r3, #10
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	8819      	ldrh	r1, [r3, #0]
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	0023      	movs	r3, r4
 8000f3e:	f000 fc3b 	bl	80017b8 <I2C_TransferConfig>
 8000f42:	e012      	b.n	8000f6a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	049c      	lsls	r4, r3, #18
 8000f58:	230a      	movs	r3, #10
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	8819      	ldrh	r1, [r3, #0]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	2300      	movs	r3, #0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	0023      	movs	r3, r4
 8000f66:	f000 fc27 	bl	80017b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d198      	bne.n	8000ea6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fae0 	bl	8001540 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e01a      	b.n	8000fbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	490b      	ldr	r1, [pc, #44]	@ (8000fc8 <HAL_I2C_Mem_Write+0x258>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2241      	movs	r2, #65	@ 0x41
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2242      	movs	r2, #66	@ 0x42
 8000fac:	2100      	movs	r1, #0
 8000fae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2240      	movs	r2, #64	@ 0x40
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e000      	b.n	8000fbe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8000fbc:	2302      	movs	r3, #2
  }
}
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b007      	add	sp, #28
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	fe00e800 	.word	0xfe00e800

08000fcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	000c      	movs	r4, r1
 8000fd6:	0010      	movs	r0, r2
 8000fd8:	0019      	movs	r1, r3
 8000fda:	230a      	movs	r3, #10
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	1c22      	adds	r2, r4, #0
 8000fe0:	801a      	strh	r2, [r3, #0]
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	1c02      	adds	r2, r0, #0
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	1dbb      	adds	r3, r7, #6
 8000fec:	1c0a      	adds	r2, r1, #0
 8000fee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2241      	movs	r2, #65	@ 0x41
 8000ff4:	5c9b      	ldrb	r3, [r3, r2]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	d000      	beq.n	8000ffe <HAL_I2C_Mem_Read+0x32>
 8000ffc:	e110      	b.n	8001220 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <HAL_I2C_Mem_Read+0x42>
 8001004:	232c      	movs	r3, #44	@ 0x2c
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2280      	movs	r2, #128	@ 0x80
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e103      	b.n	8001222 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2240      	movs	r2, #64	@ 0x40
 800101e:	5c9b      	ldrb	r3, [r3, r2]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_I2C_Mem_Read+0x5c>
 8001024:	2302      	movs	r3, #2
 8001026:	e0fc      	b.n	8001222 <HAL_I2C_Mem_Read+0x256>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2240      	movs	r2, #64	@ 0x40
 800102c:	2101      	movs	r1, #1
 800102e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001030:	f7ff fb78 	bl	8000724 <HAL_GetTick>
 8001034:	0003      	movs	r3, r0
 8001036:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	0219      	lsls	r1, r3, #8
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2319      	movs	r3, #25
 8001044:	2201      	movs	r2, #1
 8001046:	f000 f9dd 	bl	8001404 <I2C_WaitOnFlagUntilTimeout>
 800104a:	1e03      	subs	r3, r0, #0
 800104c:	d001      	beq.n	8001052 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0e7      	b.n	8001222 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2241      	movs	r2, #65	@ 0x41
 8001056:	2122      	movs	r1, #34	@ 0x22
 8001058:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2242      	movs	r2, #66	@ 0x42
 800105e:	2140      	movs	r1, #64	@ 0x40
 8001060:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800106c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	222c      	movs	r2, #44	@ 0x2c
 8001072:	18ba      	adds	r2, r7, r2
 8001074:	8812      	ldrh	r2, [r2, #0]
 8001076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800107e:	1dbb      	adds	r3, r7, #6
 8001080:	881c      	ldrh	r4, [r3, #0]
 8001082:	2308      	movs	r3, #8
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	881a      	ldrh	r2, [r3, #0]
 8001088:	230a      	movs	r3, #10
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	8819      	ldrh	r1, [r3, #0]
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	0023      	movs	r3, r4
 800109a:	f000 f92f 	bl	80012fc <I2C_RequestMemoryRead>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d005      	beq.n	80010ae <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2240      	movs	r2, #64	@ 0x40
 80010a6:	2100      	movs	r1, #0
 80010a8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0b9      	b.n	8001222 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	2bff      	cmp	r3, #255	@ 0xff
 80010b6:	d911      	bls.n	80010dc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	22ff      	movs	r2, #255	@ 0xff
 80010bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	045c      	lsls	r4, r3, #17
 80010c8:	230a      	movs	r3, #10
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	8819      	ldrh	r1, [r3, #0]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	4b56      	ldr	r3, [pc, #344]	@ (800122c <HAL_I2C_Mem_Read+0x260>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	0023      	movs	r3, r4
 80010d6:	f000 fb6f 	bl	80017b8 <I2C_TransferConfig>
 80010da:	e012      	b.n	8001102 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	049c      	lsls	r4, r3, #18
 80010f0:	230a      	movs	r3, #10
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	8819      	ldrh	r1, [r3, #0]
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	4b4c      	ldr	r3, [pc, #304]	@ (800122c <HAL_I2C_Mem_Read+0x260>)
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	0023      	movs	r3, r4
 80010fe:	f000 fb5b 	bl	80017b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	0013      	movs	r3, r2
 800110c:	2200      	movs	r2, #0
 800110e:	2104      	movs	r1, #4
 8001110:	f000 f978 	bl	8001404 <I2C_WaitOnFlagUntilTimeout>
 8001114:	1e03      	subs	r3, r0, #0
 8001116:	d001      	beq.n	800111c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e082      	b.n	8001222 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001138:	3b01      	subs	r3, #1
 800113a:	b29a      	uxth	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001144:	b29b      	uxth	r3, r3
 8001146:	3b01      	subs	r3, #1
 8001148:	b29a      	uxth	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001152:	b29b      	uxth	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d03a      	beq.n	80011ce <HAL_I2C_Mem_Read+0x202>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800115c:	2b00      	cmp	r3, #0
 800115e:	d136      	bne.n	80011ce <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	0013      	movs	r3, r2
 800116a:	2200      	movs	r2, #0
 800116c:	2180      	movs	r1, #128	@ 0x80
 800116e:	f000 f949 	bl	8001404 <I2C_WaitOnFlagUntilTimeout>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e053      	b.n	8001222 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800117e:	b29b      	uxth	r3, r3
 8001180:	2bff      	cmp	r3, #255	@ 0xff
 8001182:	d911      	bls.n	80011a8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	22ff      	movs	r2, #255	@ 0xff
 8001188:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800118e:	b2da      	uxtb	r2, r3
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	045c      	lsls	r4, r3, #17
 8001194:	230a      	movs	r3, #10
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	8819      	ldrh	r1, [r3, #0]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	2300      	movs	r3, #0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	0023      	movs	r3, r4
 80011a2:	f000 fb09 	bl	80017b8 <I2C_TransferConfig>
 80011a6:	e012      	b.n	80011ce <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	049c      	lsls	r4, r3, #18
 80011bc:	230a      	movs	r3, #10
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	8819      	ldrh	r1, [r3, #0]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	2300      	movs	r3, #0
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	0023      	movs	r3, r4
 80011ca:	f000 faf5 	bl	80017b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d194      	bne.n	8001102 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 f9ae 	bl	8001540 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e01a      	b.n	8001222 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2220      	movs	r2, #32
 80011f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	490c      	ldr	r1, [pc, #48]	@ (8001230 <HAL_I2C_Mem_Read+0x264>)
 8001200:	400a      	ands	r2, r1
 8001202:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2241      	movs	r2, #65	@ 0x41
 8001208:	2120      	movs	r1, #32
 800120a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2242      	movs	r2, #66	@ 0x42
 8001210:	2100      	movs	r1, #0
 8001212:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2240      	movs	r2, #64	@ 0x40
 8001218:	2100      	movs	r1, #0
 800121a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	e000      	b.n	8001222 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001220:	2302      	movs	r3, #2
  }
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b007      	add	sp, #28
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	80002400 	.word	0x80002400
 8001230:	fe00e800 	.word	0xfe00e800

08001234 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001234:	b5b0      	push	{r4, r5, r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af02      	add	r7, sp, #8
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	000c      	movs	r4, r1
 800123e:	0010      	movs	r0, r2
 8001240:	0019      	movs	r1, r3
 8001242:	250a      	movs	r5, #10
 8001244:	197b      	adds	r3, r7, r5
 8001246:	1c22      	adds	r2, r4, #0
 8001248:	801a      	strh	r2, [r3, #0]
 800124a:	2308      	movs	r3, #8
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	1c02      	adds	r2, r0, #0
 8001250:	801a      	strh	r2, [r3, #0]
 8001252:	1dbb      	adds	r3, r7, #6
 8001254:	1c0a      	adds	r2, r1, #0
 8001256:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001258:	1dbb      	adds	r3, r7, #6
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	2380      	movs	r3, #128	@ 0x80
 8001260:	045c      	lsls	r4, r3, #17
 8001262:	197b      	adds	r3, r7, r5
 8001264:	8819      	ldrh	r1, [r3, #0]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <I2C_RequestMemoryWrite+0xc4>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	0023      	movs	r3, r4
 800126e:	f000 faa3 	bl	80017b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001274:	6a39      	ldr	r1, [r7, #32]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	0018      	movs	r0, r3
 800127a:	f000 f91b 	bl	80014b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d001      	beq.n	8001286 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e033      	b.n	80012ee <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001286:	1dbb      	adds	r3, r7, #6
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800128e:	2308      	movs	r3, #8
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
 800129c:	e019      	b.n	80012d2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800129e:	2308      	movs	r3, #8
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b2:	6a39      	ldr	r1, [r7, #32]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 f8fc 	bl	80014b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e014      	b.n	80012ee <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012c4:	2308      	movs	r3, #8
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80012d2:	6a3a      	ldr	r2, [r7, #32]
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	0013      	movs	r3, r2
 80012dc:	2200      	movs	r2, #0
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	f000 f890 	bl	8001404 <I2C_WaitOnFlagUntilTimeout>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bdb0      	pop	{r4, r5, r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	80002000 	.word	0x80002000

080012fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	000c      	movs	r4, r1
 8001306:	0010      	movs	r0, r2
 8001308:	0019      	movs	r1, r3
 800130a:	250a      	movs	r5, #10
 800130c:	197b      	adds	r3, r7, r5
 800130e:	1c22      	adds	r2, r4, #0
 8001310:	801a      	strh	r2, [r3, #0]
 8001312:	2308      	movs	r3, #8
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	1c02      	adds	r2, r0, #0
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	1dbb      	adds	r3, r7, #6
 800131c:	1c0a      	adds	r2, r1, #0
 800131e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001320:	1dbb      	adds	r3, r7, #6
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	197b      	adds	r3, r7, r5
 8001328:	8819      	ldrh	r1, [r3, #0]
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <I2C_RequestMemoryRead+0xc0>)
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	f000 fa41 	bl	80017b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001338:	6a39      	ldr	r1, [r7, #32]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	0018      	movs	r0, r3
 800133e:	f000 f8b9 	bl	80014b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d001      	beq.n	800134a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e033      	b.n	80013b2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800134a:	1dbb      	adds	r3, r7, #6
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d107      	bne.n	8001362 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001352:	2308      	movs	r3, #8
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001360:	e019      	b.n	8001396 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001362:	2308      	movs	r3, #8
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	b29b      	uxth	r3, r3
 800136c:	b2da      	uxtb	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001376:	6a39      	ldr	r1, [r7, #32]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f89a 	bl	80014b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	d001      	beq.n	8001388 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e014      	b.n	80013b2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001388:	2308      	movs	r3, #8
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001396:	6a3a      	ldr	r2, [r7, #32]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	0013      	movs	r3, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	2140      	movs	r1, #64	@ 0x40
 80013a4:	f000 f82e 	bl	8001404 <I2C_WaitOnFlagUntilTimeout>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d001      	beq.n	80013b0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b004      	add	sp, #16
 80013b8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	80002000 	.word	0x80002000

080013c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2202      	movs	r2, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d103      	bne.n	80013de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d007      	beq.n	80013fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699a      	ldr	r2, [r3, #24]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	619a      	str	r2, [r3, #24]
  }
}
 80013fc:	46c0      	nop			@ (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}

08001404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001414:	e03a      	b.n	800148c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	0018      	movs	r0, r3
 800141e:	f000 f8d3 	bl	80015c8 <I2C_IsErrorOccurred>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d001      	beq.n	800142a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e040      	b.n	80014ac <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	d02d      	beq.n	800148c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001430:	f7ff f978 	bl	8000724 <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d302      	bcc.n	8001446 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d122      	bne.n	800148c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	4013      	ands	r3, r2
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	425a      	negs	r2, r3
 8001456:	4153      	adcs	r3, r2
 8001458:	b2db      	uxtb	r3, r3
 800145a:	001a      	movs	r2, r3
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d113      	bne.n	800148c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001468:	2220      	movs	r2, #32
 800146a:	431a      	orrs	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2241      	movs	r2, #65	@ 0x41
 8001474:	2120      	movs	r1, #32
 8001476:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2242      	movs	r2, #66	@ 0x42
 800147c:	2100      	movs	r1, #0
 800147e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2240      	movs	r2, #64	@ 0x40
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e00f      	b.n	80014ac <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4013      	ands	r3, r2
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	425a      	negs	r2, r3
 800149c:	4153      	adcs	r3, r2
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	001a      	movs	r2, r3
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d0b5      	beq.n	8001416 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b004      	add	sp, #16
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014c0:	e032      	b.n	8001528 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 f87d 	bl	80015c8 <I2C_IsErrorOccurred>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e030      	b.n	8001538 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	3301      	adds	r3, #1
 80014da:	d025      	beq.n	8001528 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014dc:	f7ff f922 	bl	8000724 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d302      	bcc.n	80014f2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d11a      	bne.n	8001528 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2202      	movs	r2, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d013      	beq.n	8001528 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	2220      	movs	r2, #32
 8001506:	431a      	orrs	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2241      	movs	r2, #65	@ 0x41
 8001510:	2120      	movs	r1, #32
 8001512:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2242      	movs	r2, #66	@ 0x42
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2240      	movs	r2, #64	@ 0x40
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e007      	b.n	8001538 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	2b02      	cmp	r3, #2
 8001534:	d1c5      	bne.n	80014c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b004      	add	sp, #16
 800153e:	bd80      	pop	{r7, pc}

08001540 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800154c:	e02f      	b.n	80015ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	0018      	movs	r0, r3
 8001556:	f000 f837 	bl	80015c8 <I2C_IsErrorOccurred>
 800155a:	1e03      	subs	r3, r0, #0
 800155c:	d001      	beq.n	8001562 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e02d      	b.n	80015be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001562:	f7ff f8df 	bl	8000724 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	429a      	cmp	r2, r3
 8001570:	d302      	bcc.n	8001578 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11a      	bne.n	80015ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2220      	movs	r2, #32
 8001580:	4013      	ands	r3, r2
 8001582:	2b20      	cmp	r3, #32
 8001584:	d013      	beq.n	80015ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	2220      	movs	r2, #32
 800158c:	431a      	orrs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2241      	movs	r2, #65	@ 0x41
 8001596:	2120      	movs	r1, #32
 8001598:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2242      	movs	r2, #66	@ 0x42
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2240      	movs	r2, #64	@ 0x40
 80015a6:	2100      	movs	r1, #0
 80015a8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e007      	b.n	80015be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2220      	movs	r2, #32
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d1c8      	bne.n	800154e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b004      	add	sp, #16
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d4:	2327      	movs	r3, #39	@ 0x27
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2210      	movs	r2, #16
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <I2C_IsErrorOccurred+0x2e>
 80015f4:	e079      	b.n	80016ea <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2210      	movs	r2, #16
 80015fc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015fe:	e057      	b.n	80016b0 <I2C_IsErrorOccurred+0xe8>
 8001600:	2227      	movs	r2, #39	@ 0x27
 8001602:	18bb      	adds	r3, r7, r2
 8001604:	18ba      	adds	r2, r7, r2
 8001606:	7812      	ldrb	r2, [r2, #0]
 8001608:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	d04f      	beq.n	80016b0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001610:	f7ff f888 	bl	8000724 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	429a      	cmp	r2, r3
 800161e:	d302      	bcc.n	8001626 <I2C_IsErrorOccurred+0x5e>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d144      	bne.n	80016b0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	01db      	lsls	r3, r3, #7
 8001630:	4013      	ands	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001634:	2013      	movs	r0, #19
 8001636:	183b      	adds	r3, r7, r0
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	2142      	movs	r1, #66	@ 0x42
 800163c:	5c52      	ldrb	r2, [r2, r1]
 800163e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699a      	ldr	r2, [r3, #24]
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	401a      	ands	r2, r3
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	429a      	cmp	r2, r3
 8001652:	d126      	bne.n	80016a2 <I2C_IsErrorOccurred+0xda>
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	01db      	lsls	r3, r3, #7
 800165a:	429a      	cmp	r2, r3
 800165c:	d021      	beq.n	80016a2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800165e:	183b      	adds	r3, r7, r0
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b20      	cmp	r3, #32
 8001664:	d01d      	beq.n	80016a2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	01c9      	lsls	r1, r1, #7
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001678:	f7ff f854 	bl	8000724 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001680:	e00f      	b.n	80016a2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001682:	f7ff f84f 	bl	8000724 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b19      	cmp	r3, #25
 800168e:	d908      	bls.n	80016a2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	2220      	movs	r2, #32
 8001694:	4313      	orrs	r3, r2
 8001696:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001698:	2327      	movs	r3, #39	@ 0x27
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]

              break;
 80016a0:	e006      	b.n	80016b0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2220      	movs	r2, #32
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b20      	cmp	r3, #32
 80016ae:	d1e8      	bne.n	8001682 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2220      	movs	r2, #32
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	d004      	beq.n	80016c8 <I2C_IsErrorOccurred+0x100>
 80016be:	2327      	movs	r3, #39	@ 0x27
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d09b      	beq.n	8001600 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80016c8:	2327      	movs	r3, #39	@ 0x27
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2220      	movs	r2, #32
 80016d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	2204      	movs	r2, #4
 80016de:	4313      	orrs	r3, r2
 80016e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80016e2:	2327      	movs	r3, #39	@ 0x27
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	2380      	movs	r3, #128	@ 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d00c      	beq.n	8001716 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	2201      	movs	r2, #1
 8001700:	4313      	orrs	r3, r2
 8001702:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2280      	movs	r2, #128	@ 0x80
 800170a:	0052      	lsls	r2, r2, #1
 800170c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800170e:	2327      	movs	r3, #39	@ 0x27
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4013      	ands	r3, r2
 800171e:	d00c      	beq.n	800173a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	2208      	movs	r2, #8
 8001724:	4313      	orrs	r3, r2
 8001726:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2280      	movs	r2, #128	@ 0x80
 800172e:	00d2      	lsls	r2, r2, #3
 8001730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001732:	2327      	movs	r3, #39	@ 0x27
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d00c      	beq.n	800175e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	2202      	movs	r2, #2
 8001748:	4313      	orrs	r3, r2
 800174a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2280      	movs	r2, #128	@ 0x80
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001756:	2327      	movs	r3, #39	@ 0x27
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800175e:	2327      	movs	r3, #39	@ 0x27
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01d      	beq.n	80017a4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff fe28 	bl	80013c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	490e      	ldr	r1, [pc, #56]	@ (80017b4 <I2C_IsErrorOccurred+0x1ec>)
 800177c:	400a      	ands	r2, r1
 800177e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	431a      	orrs	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2241      	movs	r2, #65	@ 0x41
 8001790:	2120      	movs	r1, #32
 8001792:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2242      	movs	r2, #66	@ 0x42
 8001798:	2100      	movs	r1, #0
 800179a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2240      	movs	r2, #64	@ 0x40
 80017a0:	2100      	movs	r1, #0
 80017a2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80017a4:	2327      	movs	r3, #39	@ 0x27
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	781b      	ldrb	r3, [r3, #0]
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b00a      	add	sp, #40	@ 0x28
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	fe00e800 	.word	0xfe00e800

080017b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	0008      	movs	r0, r1
 80017c2:	0011      	movs	r1, r2
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	240a      	movs	r4, #10
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	1c02      	adds	r2, r0, #0
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	2009      	movs	r0, #9
 80017d0:	183b      	adds	r3, r7, r0
 80017d2:	1c0a      	adds	r2, r1, #0
 80017d4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	059b      	lsls	r3, r3, #22
 80017dc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017de:	183b      	adds	r3, r7, r0
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	0419      	lsls	r1, r3, #16
 80017e4:	23ff      	movs	r3, #255	@ 0xff
 80017e6:	041b      	lsls	r3, r3, #16
 80017e8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017ea:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f2:	4313      	orrs	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001802:	0d51      	lsrs	r1, r2, #21
 8001804:	2280      	movs	r2, #128	@ 0x80
 8001806:	00d2      	lsls	r2, r2, #3
 8001808:	400a      	ands	r2, r1
 800180a:	4907      	ldr	r1, [pc, #28]	@ (8001828 <I2C_TransferConfig+0x70>)
 800180c:	430a      	orrs	r2, r1
 800180e:	43d2      	mvns	r2, r2
 8001810:	401a      	ands	r2, r3
 8001812:	0011      	movs	r1, r2
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b007      	add	sp, #28
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	03ff63ff 	.word	0x03ff63ff

0800182c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2241      	movs	r2, #65	@ 0x41
 800183a:	5c9b      	ldrb	r3, [r3, r2]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b20      	cmp	r3, #32
 8001840:	d138      	bne.n	80018b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2240      	movs	r2, #64	@ 0x40
 8001846:	5c9b      	ldrb	r3, [r3, r2]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800184c:	2302      	movs	r3, #2
 800184e:	e032      	b.n	80018b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2240      	movs	r2, #64	@ 0x40
 8001854:	2101      	movs	r1, #1
 8001856:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2241      	movs	r2, #65	@ 0x41
 800185c:	2124      	movs	r1, #36	@ 0x24
 800185e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2101      	movs	r1, #1
 800186c:	438a      	bics	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4911      	ldr	r1, [pc, #68]	@ (80018c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800187c:	400a      	ands	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2101      	movs	r1, #1
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2241      	movs	r2, #65	@ 0x41
 80018a4:	2120      	movs	r1, #32
 80018a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2240      	movs	r2, #64	@ 0x40
 80018ac:	2100      	movs	r1, #0
 80018ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e000      	b.n	80018b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
  }
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	ffffefff 	.word	0xffffefff

080018c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2241      	movs	r2, #65	@ 0x41
 80018d2:	5c9b      	ldrb	r3, [r3, r2]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	d139      	bne.n	800194e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2240      	movs	r2, #64	@ 0x40
 80018de:	5c9b      	ldrb	r3, [r3, r2]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e033      	b.n	8001950 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2240      	movs	r2, #64	@ 0x40
 80018ec:	2101      	movs	r1, #1
 80018ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2241      	movs	r2, #65	@ 0x41
 80018f4:	2124      	movs	r1, #36	@ 0x24
 80018f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2101      	movs	r1, #1
 8001904:	438a      	bics	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4a11      	ldr	r2, [pc, #68]	@ (8001958 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2241      	movs	r2, #65	@ 0x41
 800193e:	2120      	movs	r1, #32
 8001940:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2240      	movs	r2, #64	@ 0x40
 8001946:	2100      	movs	r1, #0
 8001948:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800194e:	2302      	movs	r3, #2
  }
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}
 8001958:	fffff0ff 	.word	0xfffff0ff

0800195c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a19      	ldr	r2, [pc, #100]	@ (80019d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800196a:	4013      	ands	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	2380      	movs	r3, #128	@ 0x80
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d11f      	bne.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	0013      	movs	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	189b      	adds	r3, r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4912      	ldr	r1, [pc, #72]	@ (80019d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800198e:	0018      	movs	r0, r3
 8001990:	f7fe fbc0 	bl	8000114 <__udivsi3>
 8001994:	0003      	movs	r3, r0
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800199a:	e008      	b.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e001      	b.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e009      	b.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	401a      	ands	r2, r3
 80019b8:	2380      	movs	r3, #128	@ 0x80
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	429a      	cmp	r2, r3
 80019be:	d0ed      	beq.n	800199c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	40007000 	.word	0x40007000
 80019d0:	fffff9ff 	.word	0xfffff9ff
 80019d4:	20000008 	.word	0x20000008
 80019d8:	000f4240 	.word	0x000f4240

080019dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	23e0      	movs	r3, #224	@ 0xe0
 80019e6:	01db      	lsls	r3, r3, #7
 80019e8:	4013      	ands	r3, r2
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e2fe      	b.n	8002004 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_OscConfig+0x1e>
 8001a10:	e07c      	b.n	8001b0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a12:	4bc3      	ldr	r3, [pc, #780]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2238      	movs	r2, #56	@ 0x38
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a1c:	4bc0      	ldr	r3, [pc, #768]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2203      	movs	r2, #3
 8001a22:	4013      	ands	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d102      	bne.n	8001a32 <HAL_RCC_OscConfig+0x3e>
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d002      	beq.n	8001a38 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d10b      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	4bb9      	ldr	r3, [pc, #740]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	029b      	lsls	r3, r3, #10
 8001a40:	4013      	ands	r3, r2
 8001a42:	d062      	beq.n	8001b0a <HAL_RCC_OscConfig+0x116>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d15e      	bne.n	8001b0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e2d9      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	025b      	lsls	r3, r3, #9
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x78>
 8001a5c:	4bb0      	ldr	r3, [pc, #704]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4baf      	ldr	r3, [pc, #700]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	2180      	movs	r1, #128	@ 0x80
 8001a64:	0249      	lsls	r1, r1, #9
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e020      	b.n	8001aae <HAL_RCC_OscConfig+0xba>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	23a0      	movs	r3, #160	@ 0xa0
 8001a72:	02db      	lsls	r3, r3, #11
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d10e      	bne.n	8001a96 <HAL_RCC_OscConfig+0xa2>
 8001a78:	4ba9      	ldr	r3, [pc, #676]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4ba8      	ldr	r3, [pc, #672]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	02c9      	lsls	r1, r1, #11
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	4ba6      	ldr	r3, [pc, #664]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4ba5      	ldr	r3, [pc, #660]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	0249      	lsls	r1, r1, #9
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e00b      	b.n	8001aae <HAL_RCC_OscConfig+0xba>
 8001a96:	4ba2      	ldr	r3, [pc, #648]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4ba1      	ldr	r3, [pc, #644]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	49a1      	ldr	r1, [pc, #644]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	4b9f      	ldr	r3, [pc, #636]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b9e      	ldr	r3, [pc, #632]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001aa8:	499f      	ldr	r1, [pc, #636]	@ (8001d28 <HAL_RCC_OscConfig+0x334>)
 8001aaa:	400a      	ands	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d014      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7fe fe35 	bl	8000724 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7fe fe30 	bl	8000724 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	@ 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e298      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad2:	4b93      	ldr	r3, [pc, #588]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	@ 0x80
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	4013      	ands	r3, r2
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xcc>
 8001ade:	e015      	b.n	8001b0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7fe fe20 	bl	8000724 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aea:	f7fe fe1b 	bl	8000724 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	@ 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e283      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001afc:	4b88      	ldr	r3, [pc, #544]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	4013      	ands	r3, r2
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0xf6>
 8001b08:	e000      	b.n	8001b0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d100      	bne.n	8001b18 <HAL_RCC_OscConfig+0x124>
 8001b16:	e099      	b.n	8001c4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b18:	4b81      	ldr	r3, [pc, #516]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2238      	movs	r2, #56	@ 0x38
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b22:	4b7f      	ldr	r3, [pc, #508]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2203      	movs	r2, #3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x144>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d002      	beq.n	8001b3e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d135      	bne.n	8001baa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3e:	4b78      	ldr	r3, [pc, #480]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4013      	ands	r3, r2
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x162>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e256      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b72      	ldr	r3, [pc, #456]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a74      	ldr	r2, [pc, #464]	@ (8001d2c <HAL_RCC_OscConfig+0x338>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	021a      	lsls	r2, r3, #8
 8001b66:	4b6e      	ldr	r3, [pc, #440]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d112      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b72:	4b6b      	ldr	r3, [pc, #428]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6e      	ldr	r2, [pc, #440]	@ (8001d30 <HAL_RCC_OscConfig+0x33c>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	4b67      	ldr	r3, [pc, #412]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b86:	4b66      	ldr	r3, [pc, #408]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	0adb      	lsrs	r3, r3, #11
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4013      	ands	r3, r2
 8001b90:	4a68      	ldr	r2, [pc, #416]	@ (8001d34 <HAL_RCC_OscConfig+0x340>)
 8001b92:	40da      	lsrs	r2, r3
 8001b94:	4b68      	ldr	r3, [pc, #416]	@ (8001d38 <HAL_RCC_OscConfig+0x344>)
 8001b96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b98:	4b68      	ldr	r3, [pc, #416]	@ (8001d3c <HAL_RCC_OscConfig+0x348>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7fe fd65 	bl	800066c <HAL_InitTick>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d051      	beq.n	8001c4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e22c      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d030      	beq.n	8001c14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d30 <HAL_RCC_OscConfig+0x33c>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	4b57      	ldr	r3, [pc, #348]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bc6:	4b56      	ldr	r3, [pc, #344]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b55      	ldr	r3, [pc, #340]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	2180      	movs	r1, #128	@ 0x80
 8001bce:	0049      	lsls	r1, r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7fe fda6 	bl	8000724 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bde:	f7fe fda1 	bl	8000724 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e209      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b48      	ldr	r3, [pc, #288]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a4a      	ldr	r2, [pc, #296]	@ (8001d2c <HAL_RCC_OscConfig+0x338>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	021a      	lsls	r2, r3, #8
 8001c0c:	4b44      	ldr	r3, [pc, #272]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	e01b      	b.n	8001c4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c14:	4b42      	ldr	r3, [pc, #264]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	4949      	ldr	r1, [pc, #292]	@ (8001d40 <HAL_RCC_OscConfig+0x34c>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7fe fd80 	bl	8000724 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7fe fd7b 	bl	8000724 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e1e3      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c3c:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4013      	ands	r3, r2
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x236>
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c4a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2208      	movs	r2, #8
 8001c52:	4013      	ands	r3, r2
 8001c54:	d047      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c56:	4b32      	ldr	r3, [pc, #200]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2238      	movs	r2, #56	@ 0x38
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b18      	cmp	r3, #24
 8001c60:	d10a      	bne.n	8001c78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c62:	4b2f      	ldr	r3, [pc, #188]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d03c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d138      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e1c5      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d019      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fd4a 	bl	8000724 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7fe fd45 	bl	8000724 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1ad      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cac:	2202      	movs	r2, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0f1      	beq.n	8001c96 <HAL_RCC_OscConfig+0x2a2>
 8001cb2:	e018      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7fe fd30 	bl	8000724 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7fe fd2b 	bl	8000724 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e193      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cdc:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f1      	bne.n	8001cca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2204      	movs	r2, #4
 8001cec:	4013      	ands	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2fe>
 8001cf0:	e0c6      	b.n	8001e80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	231f      	movs	r3, #31
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2238      	movs	r2, #56	@ 0x38
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d11e      	bne.n	8001d44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCC_OscConfig+0x31e>
 8001d10:	e0b6      	b.n	8001e80 <HAL_RCC_OscConfig+0x48c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d000      	beq.n	8001d1c <HAL_RCC_OscConfig+0x328>
 8001d1a:	e0b1      	b.n	8001e80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e171      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	fffeffff 	.word	0xfffeffff
 8001d28:	fffbffff 	.word	0xfffbffff
 8001d2c:	ffff80ff 	.word	0xffff80ff
 8001d30:	ffffc7ff 	.word	0xffffc7ff
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d44:	4bb1      	ldr	r3, [pc, #708]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	055b      	lsls	r3, r3, #21
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x360>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x362>
 8001d54:	2300      	movs	r3, #0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d011      	beq.n	8001d7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4bac      	ldr	r3, [pc, #688]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d5e:	4bab      	ldr	r3, [pc, #684]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001d60:	2180      	movs	r1, #128	@ 0x80
 8001d62:	0549      	lsls	r1, r1, #21
 8001d64:	430a      	orrs	r2, r1
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d68:	4ba8      	ldr	r3, [pc, #672]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001d6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	055b      	lsls	r3, r3, #21
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d76:	231f      	movs	r3, #31
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7e:	4ba4      	ldr	r3, [pc, #656]	@ (8002010 <HAL_RCC_OscConfig+0x61c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	d11a      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d8a:	4ba1      	ldr	r3, [pc, #644]	@ (8002010 <HAL_RCC_OscConfig+0x61c>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4ba0      	ldr	r3, [pc, #640]	@ (8002010 <HAL_RCC_OscConfig+0x61c>)
 8001d90:	2180      	movs	r1, #128	@ 0x80
 8001d92:	0049      	lsls	r1, r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fcc4 	bl	8000724 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7fe fcbf 	bl	8000724 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e127      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db4:	4b96      	ldr	r3, [pc, #600]	@ (8002010 <HAL_RCC_OscConfig+0x61c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3e2>
 8001dc8:	4b90      	ldr	r3, [pc, #576]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001dca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dcc:	4b8f      	ldr	r3, [pc, #572]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x41c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x404>
 8001dde:	4b8b      	ldr	r3, [pc, #556]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001de0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001de2:	4b8a      	ldr	r3, [pc, #552]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001de4:	2104      	movs	r1, #4
 8001de6:	430a      	orrs	r2, r1
 8001de8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dea:	4b88      	ldr	r3, [pc, #544]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001dec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dee:	4b87      	ldr	r3, [pc, #540]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x41c>
 8001df8:	4b84      	ldr	r3, [pc, #528]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001dfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dfc:	4b83      	ldr	r3, [pc, #524]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	438a      	bics	r2, r1
 8001e02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e04:	4b81      	ldr	r3, [pc, #516]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001e06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e08:	4b80      	ldr	r3, [pc, #512]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d014      	beq.n	8001e42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7fe fc84 	bl	8000724 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fc7f 	bl	8000724 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a79      	ldr	r2, [pc, #484]	@ (8002014 <HAL_RCC_OscConfig+0x620>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0e6      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e36:	4b75      	ldr	r3, [pc, #468]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x42e>
 8001e40:	e013      	b.n	8001e6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7fe fc6f 	bl	8000724 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7fe fc6a 	bl	8000724 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	4a6f      	ldr	r2, [pc, #444]	@ (8002014 <HAL_RCC_OscConfig+0x620>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0d1      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e60:	4b6a      	ldr	r3, [pc, #424]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e6a:	231f      	movs	r3, #31
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b65      	ldr	r3, [pc, #404]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e78:	4b64      	ldr	r3, [pc, #400]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001e7a:	4967      	ldr	r1, [pc, #412]	@ (8002018 <HAL_RCC_OscConfig+0x624>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d100      	bne.n	8001e8a <HAL_RCC_OscConfig+0x496>
 8001e88:	e0bb      	b.n	8002002 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e8a:	4b60      	ldr	r3, [pc, #384]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2238      	movs	r2, #56	@ 0x38
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d100      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4a4>
 8001e96:	e07b      	b.n	8001f90 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d156      	bne.n	8001f4e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b59      	ldr	r3, [pc, #356]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001ea6:	495d      	ldr	r1, [pc, #372]	@ (800201c <HAL_RCC_OscConfig+0x628>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe fc3a 	bl	8000724 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe fc35 	bl	8000724 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e09d      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec8:	4b50      	ldr	r3, [pc, #320]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	049b      	lsls	r3, r3, #18
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a51      	ldr	r2, [pc, #324]	@ (8002020 <HAL_RCC_OscConfig+0x62c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f00:	431a      	orrs	r2, r3
 8001f02:	4b42      	ldr	r3, [pc, #264]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	4b40      	ldr	r3, [pc, #256]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f0e:	2180      	movs	r1, #128	@ 0x80
 8001f10:	0449      	lsls	r1, r1, #17
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f16:	4b3d      	ldr	r3, [pc, #244]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	0549      	lsls	r1, r1, #21
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7fe fbfe 	bl	8000724 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe fbf9 	bl	8000724 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e061      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f40:	4b32      	ldr	r3, [pc, #200]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	049b      	lsls	r3, r3, #18
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x53a>
 8001f4c:	e059      	b.n	8002002 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b2e      	ldr	r3, [pc, #184]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f54:	4931      	ldr	r1, [pc, #196]	@ (800201c <HAL_RCC_OscConfig+0x628>)
 8001f56:	400a      	ands	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fbe3 	bl	8000724 <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7fe fbde 	bl	8000724 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e046      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f76:	4b25      	ldr	r3, [pc, #148]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	049b      	lsls	r3, r3, #18
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f82:	4b22      	ldr	r3, [pc, #136]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f88:	4926      	ldr	r1, [pc, #152]	@ (8002024 <HAL_RCC_OscConfig+0x630>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	e038      	b.n	8002002 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e033      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_RCC_OscConfig+0x618>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d126      	bne.n	8001ffe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2270      	movs	r2, #112	@ 0x70
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d11f      	bne.n	8001ffe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	23fe      	movs	r3, #254	@ 0xfe
 8001fc2:	01db      	lsls	r3, r3, #7
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d116      	bne.n	8001ffe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	23f8      	movs	r3, #248	@ 0xf8
 8001fd4:	039b      	lsls	r3, r3, #14
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d10e      	bne.n	8001ffe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	23e0      	movs	r3, #224	@ 0xe0
 8001fe4:	051b      	lsls	r3, r3, #20
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	0f5b      	lsrs	r3, r3, #29
 8001ff4:	075a      	lsls	r2, r3, #29
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b008      	add	sp, #32
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
 8002014:	00001388 	.word	0x00001388
 8002018:	efffffff 	.word	0xefffffff
 800201c:	feffffff 	.word	0xfeffffff
 8002020:	11c1808c 	.word	0x11c1808c
 8002024:	eefefffc 	.word	0xeefefffc

08002028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0e9      	b.n	8002210 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b76      	ldr	r3, [pc, #472]	@ (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2207      	movs	r2, #7
 8002042:	4013      	ands	r3, r2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d91e      	bls.n	8002088 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b73      	ldr	r3, [pc, #460]	@ (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2207      	movs	r2, #7
 8002050:	4393      	bics	r3, r2
 8002052:	0019      	movs	r1, r3
 8002054:	4b70      	ldr	r3, [pc, #448]	@ (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800205c:	f7fe fb62 	bl	8000724 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002064:	e009      	b.n	800207a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002066:	f7fe fb5d 	bl	8000724 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	4a6a      	ldr	r2, [pc, #424]	@ (800221c <HAL_RCC_ClockConfig+0x1f4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e0ca      	b.n	8002210 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800207a:	4b67      	ldr	r3, [pc, #412]	@ (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2207      	movs	r2, #7
 8002080:	4013      	ands	r3, r2
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d1ee      	bne.n	8002066 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d015      	beq.n	80020be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2204      	movs	r2, #4
 8002098:	4013      	ands	r3, r2
 800209a:	d006      	beq.n	80020aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800209c:	4b60      	ldr	r3, [pc, #384]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 80020a2:	21e0      	movs	r1, #224	@ 0xe0
 80020a4:	01c9      	lsls	r1, r1, #7
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002224 <HAL_RCC_ClockConfig+0x1fc>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	4b59      	ldr	r3, [pc, #356]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	d057      	beq.n	8002178 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d0:	4b53      	ldr	r3, [pc, #332]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	@ 0x80
 80020d6:	029b      	lsls	r3, r3, #10
 80020d8:	4013      	ands	r3, r2
 80020da:	d12b      	bne.n	8002134 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e097      	b.n	8002210 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	@ 0x80
 80020ee:	049b      	lsls	r3, r3, #18
 80020f0:	4013      	ands	r3, r2
 80020f2:	d11f      	bne.n	8002134 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e08b      	b.n	8002210 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002100:	4b47      	ldr	r3, [pc, #284]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4013      	ands	r3, r2
 800210a:	d113      	bne.n	8002134 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e07f      	b.n	8002210 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d106      	bne.n	8002126 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002118:	4b41      	ldr	r3, [pc, #260]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 800211a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211c:	2202      	movs	r2, #2
 800211e:	4013      	ands	r3, r2
 8002120:	d108      	bne.n	8002134 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e074      	b.n	8002210 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002126:	4b3e      	ldr	r3, [pc, #248]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 8002128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212a:	2202      	movs	r2, #2
 800212c:	4013      	ands	r3, r2
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e06d      	b.n	8002210 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002134:	4b3a      	ldr	r3, [pc, #232]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2207      	movs	r2, #7
 800213a:	4393      	bics	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002148:	f7fe faec 	bl	8000724 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002150:	e009      	b.n	8002166 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002152:	f7fe fae7 	bl	8000724 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	4a2f      	ldr	r2, [pc, #188]	@ (800221c <HAL_RCC_ClockConfig+0x1f4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e054      	b.n	8002210 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2238      	movs	r2, #56	@ 0x38
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	429a      	cmp	r2, r3
 8002176:	d1ec      	bne.n	8002152 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2207      	movs	r2, #7
 800217e:	4013      	ands	r3, r2
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d21e      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b24      	ldr	r3, [pc, #144]	@ (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2207      	movs	r2, #7
 800218c:	4393      	bics	r3, r2
 800218e:	0019      	movs	r1, r3
 8002190:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002198:	f7fe fac4 	bl	8000724 <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021a0:	e009      	b.n	80021b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7fe fabf 	bl	8000724 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4a1b      	ldr	r2, [pc, #108]	@ (800221c <HAL_RCC_ClockConfig+0x1f4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e02c      	b.n	8002210 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021b6:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2207      	movs	r2, #7
 80021bc:	4013      	ands	r3, r2
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2204      	movs	r2, #4
 80021ca:	4013      	ands	r3, r2
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021ce:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4a15      	ldr	r2, [pc, #84]	@ (8002228 <HAL_RCC_ClockConfig+0x200>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021e2:	f000 f829 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021e6:	0001      	movs	r1, r0
 80021e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_RCC_ClockConfig+0x1f8>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	220f      	movs	r2, #15
 80021f0:	401a      	ands	r2, r3
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_RCC_ClockConfig+0x204>)
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	58d3      	ldr	r3, [r2, r3]
 80021f8:	221f      	movs	r2, #31
 80021fa:	4013      	ands	r3, r2
 80021fc:	000a      	movs	r2, r1
 80021fe:	40da      	lsrs	r2, r3
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_RCC_ClockConfig+0x208>)
 8002202:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_RCC_ClockConfig+0x20c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0018      	movs	r0, r3
 800220a:	f7fe fa2f 	bl	800066c <HAL_InitTick>
 800220e:	0003      	movs	r3, r0
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b004      	add	sp, #16
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40022000 	.word	0x40022000
 800221c:	00001388 	.word	0x00001388
 8002220:	40021000 	.word	0x40021000
 8002224:	fffff0ff 	.word	0xfffff0ff
 8002228:	ffff8fff 	.word	0xffff8fff
 800222c:	080046c4 	.word	0x080046c4
 8002230:	20000008 	.word	0x20000008
 8002234:	20000000 	.word	0x20000000

08002238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223e:	4b3c      	ldr	r3, [pc, #240]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2238      	movs	r2, #56	@ 0x38
 8002244:	4013      	ands	r3, r2
 8002246:	d10f      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002248:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0adb      	lsrs	r3, r3, #11
 800224e:	2207      	movs	r2, #7
 8002250:	4013      	ands	r3, r2
 8002252:	2201      	movs	r2, #1
 8002254:	409a      	lsls	r2, r3
 8002256:	0013      	movs	r3, r2
 8002258:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800225a:	6839      	ldr	r1, [r7, #0]
 800225c:	4835      	ldr	r0, [pc, #212]	@ (8002334 <HAL_RCC_GetSysClockFreq+0xfc>)
 800225e:	f7fd ff59 	bl	8000114 <__udivsi3>
 8002262:	0003      	movs	r3, r0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e05d      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002268:	4b31      	ldr	r3, [pc, #196]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2238      	movs	r2, #56	@ 0x38
 800226e:	4013      	ands	r3, r2
 8002270:	2b08      	cmp	r3, #8
 8002272:	d102      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002274:	4b30      	ldr	r3, [pc, #192]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x100>)
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	e054      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227a:	4b2d      	ldr	r3, [pc, #180]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2238      	movs	r2, #56	@ 0x38
 8002280:	4013      	ands	r3, r2
 8002282:	2b10      	cmp	r3, #16
 8002284:	d138      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002286:	4b2a      	ldr	r3, [pc, #168]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2203      	movs	r2, #3
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002290:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	2207      	movs	r2, #7
 8002298:	4013      	ands	r3, r2
 800229a:	3301      	adds	r3, #1
 800229c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d10d      	bne.n	80022c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	4824      	ldr	r0, [pc, #144]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x100>)
 80022a8:	f7fd ff34 	bl	8000114 <__udivsi3>
 80022ac:	0003      	movs	r3, r0
 80022ae:	0019      	movs	r1, r3
 80022b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	227f      	movs	r2, #127	@ 0x7f
 80022b8:	4013      	ands	r3, r2
 80022ba:	434b      	muls	r3, r1
 80022bc:	617b      	str	r3, [r7, #20]
        break;
 80022be:	e00d      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	481c      	ldr	r0, [pc, #112]	@ (8002334 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022c4:	f7fd ff26 	bl	8000114 <__udivsi3>
 80022c8:	0003      	movs	r3, r0
 80022ca:	0019      	movs	r1, r3
 80022cc:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	227f      	movs	r2, #127	@ 0x7f
 80022d4:	4013      	ands	r3, r2
 80022d6:	434b      	muls	r3, r1
 80022d8:	617b      	str	r3, [r7, #20]
        break;
 80022da:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022dc:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0f5b      	lsrs	r3, r3, #29
 80022e2:	2207      	movs	r2, #7
 80022e4:	4013      	ands	r3, r2
 80022e6:	3301      	adds	r3, #1
 80022e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	6978      	ldr	r0, [r7, #20]
 80022ee:	f7fd ff11 	bl	8000114 <__udivsi3>
 80022f2:	0003      	movs	r3, r0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e015      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2238      	movs	r2, #56	@ 0x38
 80022fe:	4013      	ands	r3, r2
 8002300:	2b20      	cmp	r3, #32
 8002302:	d103      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002304:	2380      	movs	r3, #128	@ 0x80
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800230c:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xf8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2238      	movs	r2, #56	@ 0x38
 8002312:	4013      	ands	r3, r2
 8002314:	2b18      	cmp	r3, #24
 8002316:	d103      	bne.n	8002320 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002318:	23fa      	movs	r3, #250	@ 0xfa
 800231a:	01db      	lsls	r3, r3, #7
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	e001      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002324:	693b      	ldr	r3, [r7, #16]
}
 8002326:	0018      	movs	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	b006      	add	sp, #24
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	40021000 	.word	0x40021000
 8002334:	00f42400 	.word	0x00f42400
 8002338:	007a1200 	.word	0x007a1200

0800233c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b02      	ldr	r3, [pc, #8]	@ (800234c <HAL_RCC_GetHCLKFreq+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	20000008 	.word	0x20000008

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b5b0      	push	{r4, r5, r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002354:	f7ff fff2 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002358:	0004      	movs	r4, r0
 800235a:	f7ff fb3f 	bl	80019dc <LL_RCC_GetAPB1Prescaler>
 800235e:	0003      	movs	r3, r0
 8002360:	0b1a      	lsrs	r2, r3, #12
 8002362:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	58d3      	ldr	r3, [r2, r3]
 8002368:	221f      	movs	r2, #31
 800236a:	4013      	ands	r3, r2
 800236c:	40dc      	lsrs	r4, r3
 800236e:	0023      	movs	r3, r4
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bdb0      	pop	{r4, r5, r7, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	08004704 	.word	0x08004704

0800237c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002384:	2313      	movs	r3, #19
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800238c:	2312      	movs	r3, #18
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	029b      	lsls	r3, r3, #10
 800239c:	4013      	ands	r3, r2
 800239e:	d100      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80023a0:	e0a3      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a2:	2011      	movs	r0, #17
 80023a4:	183b      	adds	r3, r7, r0
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023aa:	4bc3      	ldr	r3, [pc, #780]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	055b      	lsls	r3, r3, #21
 80023b2:	4013      	ands	r3, r2
 80023b4:	d110      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4bc0      	ldr	r3, [pc, #768]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ba:	4bbf      	ldr	r3, [pc, #764]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023bc:	2180      	movs	r1, #128	@ 0x80
 80023be:	0549      	lsls	r1, r1, #21
 80023c0:	430a      	orrs	r2, r1
 80023c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023c4:	4bbc      	ldr	r3, [pc, #752]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d2:	183b      	adds	r3, r7, r0
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d8:	4bb8      	ldr	r3, [pc, #736]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4bb7      	ldr	r3, [pc, #732]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023de:	2180      	movs	r1, #128	@ 0x80
 80023e0:	0049      	lsls	r1, r1, #1
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023e6:	f7fe f99d 	bl	8000724 <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ee:	e00b      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f0:	f7fe f998 	bl	8000724 <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d904      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80023fe:	2313      	movs	r3, #19
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2203      	movs	r2, #3
 8002404:	701a      	strb	r2, [r3, #0]
        break;
 8002406:	e005      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002408:	4bac      	ldr	r3, [pc, #688]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d0ed      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002414:	2313      	movs	r3, #19
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d154      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800241e:	4ba6      	ldr	r3, [pc, #664]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002420:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002422:	23c0      	movs	r3, #192	@ 0xc0
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4013      	ands	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d019      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	429a      	cmp	r2, r3
 8002438:	d014      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800243a:	4b9f      	ldr	r3, [pc, #636]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243e:	4aa0      	ldr	r2, [pc, #640]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002440:	4013      	ands	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002444:	4b9c      	ldr	r3, [pc, #624]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002446:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002448:	4b9b      	ldr	r3, [pc, #620]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800244a:	2180      	movs	r1, #128	@ 0x80
 800244c:	0249      	lsls	r1, r1, #9
 800244e:	430a      	orrs	r2, r1
 8002450:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002452:	4b99      	ldr	r3, [pc, #612]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002456:	4b98      	ldr	r3, [pc, #608]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002458:	499a      	ldr	r1, [pc, #616]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800245a:	400a      	ands	r2, r1
 800245c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800245e:	4b96      	ldr	r3, [pc, #600]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2201      	movs	r2, #1
 8002468:	4013      	ands	r3, r2
 800246a:	d016      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe f95a 	bl	8000724 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002474:	e00c      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe f955 	bl	8000724 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4a91      	ldr	r2, [pc, #580]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d904      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002486:	2313      	movs	r3, #19
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	2203      	movs	r2, #3
 800248c:	701a      	strb	r2, [r3, #0]
            break;
 800248e:	e004      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002490:	4b89      	ldr	r3, [pc, #548]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	2202      	movs	r2, #2
 8002496:	4013      	ands	r3, r2
 8002498:	d0ed      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800249a:	2313      	movs	r3, #19
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a4:	4b84      	ldr	r3, [pc, #528]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	4a85      	ldr	r2, [pc, #532]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b2:	4b81      	ldr	r3, [pc, #516]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b4:	430a      	orrs	r2, r1
 80024b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024b8:	e00c      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ba:	2312      	movs	r3, #18
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2213      	movs	r2, #19
 80024c0:	18ba      	adds	r2, r7, r2
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e005      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c8:	2312      	movs	r3, #18
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2213      	movs	r2, #19
 80024ce:	18ba      	adds	r2, r7, r2
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024d4:	2311      	movs	r3, #17
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b76      	ldr	r3, [pc, #472]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024e2:	4b75      	ldr	r3, [pc, #468]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e4:	4979      	ldr	r1, [pc, #484]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f4:	4b70      	ldr	r3, [pc, #448]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	2203      	movs	r2, #3
 80024fa:	4393      	bics	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	4b6d      	ldr	r3, [pc, #436]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002504:	430a      	orrs	r2, r1
 8002506:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2202      	movs	r2, #2
 800250e:	4013      	ands	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002512:	4b69      	ldr	r3, [pc, #420]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002516:	220c      	movs	r2, #12
 8002518:	4393      	bics	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	4b65      	ldr	r3, [pc, #404]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002522:	430a      	orrs	r2, r1
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2210      	movs	r2, #16
 800252c:	4013      	ands	r3, r2
 800252e:	d009      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002530:	4b61      	ldr	r3, [pc, #388]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	4a66      	ldr	r2, [pc, #408]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	4b5e      	ldr	r3, [pc, #376]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002540:	430a      	orrs	r2, r1
 8002542:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	@ 0x80
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d009      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002550:	4b59      	ldr	r3, [pc, #356]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	4a5f      	ldr	r2, [pc, #380]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	4b56      	ldr	r3, [pc, #344]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002560:	430a      	orrs	r2, r1
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4013      	ands	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002570:	4b51      	ldr	r3, [pc, #324]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	4a58      	ldr	r2, [pc, #352]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	4b4e      	ldr	r3, [pc, #312]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002580:	430a      	orrs	r2, r1
 8002582:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2220      	movs	r2, #32
 800258a:	4013      	ands	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800258e:	4b4a      	ldr	r3, [pc, #296]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002592:	4a52      	ldr	r2, [pc, #328]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002594:	4013      	ands	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	4b46      	ldr	r3, [pc, #280]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	01db      	lsls	r3, r3, #7
 80025aa:	4013      	ands	r3, r2
 80025ac:	d015      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ae:	4b42      	ldr	r3, [pc, #264]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	0899      	lsrs	r1, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1a      	ldr	r2, [r3, #32]
 80025ba:	4b3f      	ldr	r3, [pc, #252]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1a      	ldr	r2, [r3, #32]
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	05db      	lsls	r3, r3, #23
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d106      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025cc:	4b3a      	ldr	r3, [pc, #232]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	4b39      	ldr	r3, [pc, #228]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	0249      	lsls	r1, r1, #9
 80025d6:	430a      	orrs	r2, r1
 80025d8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	@ 0x80
 80025e0:	031b      	lsls	r3, r3, #12
 80025e2:	4013      	ands	r3, r2
 80025e4:	d009      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025e6:	4b34      	ldr	r3, [pc, #208]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	2240      	movs	r2, #64	@ 0x40
 80025ec:	4393      	bics	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f4:	4b30      	ldr	r3, [pc, #192]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f6:	430a      	orrs	r2, r1
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	039b      	lsls	r3, r3, #14
 8002602:	4013      	ands	r3, r2
 8002604:	d016      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002606:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260a:	4a35      	ldr	r2, [pc, #212]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800260c:	4013      	ands	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002614:	4b28      	ldr	r3, [pc, #160]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002616:	430a      	orrs	r2, r1
 8002618:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	03db      	lsls	r3, r3, #15
 8002622:	429a      	cmp	r2, r3
 8002624:	d106      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002626:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	4b23      	ldr	r3, [pc, #140]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800262c:	2180      	movs	r1, #128	@ 0x80
 800262e:	0449      	lsls	r1, r1, #17
 8002630:	430a      	orrs	r2, r1
 8002632:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	03db      	lsls	r3, r3, #15
 800263c:	4013      	ands	r3, r2
 800263e:	d016      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002640:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002644:	4a27      	ldr	r2, [pc, #156]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002646:	4013      	ands	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002650:	430a      	orrs	r2, r1
 8002652:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002658:	2380      	movs	r3, #128	@ 0x80
 800265a:	045b      	lsls	r3, r3, #17
 800265c:	429a      	cmp	r2, r3
 800265e:	d106      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002660:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002666:	2180      	movs	r1, #128	@ 0x80
 8002668:	0449      	lsls	r1, r1, #17
 800266a:	430a      	orrs	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	4013      	ands	r3, r2
 8002678:	d016      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800267c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267e:	4a1a      	ldr	r2, [pc, #104]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002680:	4013      	ands	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800268a:	430a      	orrs	r2, r1
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	01db      	lsls	r3, r3, #7
 8002696:	429a      	cmp	r2, r3
 8002698:	d106      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800269a:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a0:	2180      	movs	r1, #128	@ 0x80
 80026a2:	0249      	lsls	r1, r1, #9
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80026a8:	2312      	movs	r3, #18
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	781b      	ldrb	r3, [r3, #0]
}
 80026ae:	0018      	movs	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
 80026c0:	fffffcff 	.word	0xfffffcff
 80026c4:	fffeffff 	.word	0xfffeffff
 80026c8:	00001388 	.word	0x00001388
 80026cc:	efffffff 	.word	0xefffffff
 80026d0:	fffff3ff 	.word	0xfffff3ff
 80026d4:	fff3ffff 	.word	0xfff3ffff
 80026d8:	ffcfffff 	.word	0xffcfffff
 80026dc:	ffffcfff 	.word	0xffffcfff
 80026e0:	ffbfffff 	.word	0xffbfffff
 80026e4:	feffffff 	.word	0xfeffffff
 80026e8:	ffff3fff 	.word	0xffff3fff

080026ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e046      	b.n	800278c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2288      	movs	r2, #136	@ 0x88
 8002702:	589b      	ldr	r3, [r3, r2]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2284      	movs	r2, #132	@ 0x84
 800270c:	2100      	movs	r1, #0
 800270e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	0018      	movs	r0, r3
 8002714:	f001 fe3c 	bl	8004390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2288      	movs	r2, #136	@ 0x88
 800271c:	2124      	movs	r1, #36	@ 0x24
 800271e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2101      	movs	r1, #1
 800272c:	438a      	bics	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f000 fb8e 	bl	8002e5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f8cc 	bl	80028e0 <UART_SetConfig>
 8002748:	0003      	movs	r3, r0
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e01c      	b.n	800278c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	490d      	ldr	r1, [pc, #52]	@ (8002794 <HAL_UART_Init+0xa8>)
 800275e:	400a      	ands	r2, r1
 8002760:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	212a      	movs	r1, #42	@ 0x2a
 800276e:	438a      	bics	r2, r1
 8002770:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fc1d 	bl	8002fc4 <UART_CheckIdleState>
 800278a:	0003      	movs	r3, r0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}
 8002794:	ffffb7ff 	.word	0xffffb7ff

08002798 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	1dbb      	adds	r3, r7, #6
 80027a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2288      	movs	r2, #136	@ 0x88
 80027ac:	589b      	ldr	r3, [r3, r2]
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d000      	beq.n	80027b4 <HAL_UART_Transmit+0x1c>
 80027b2:	e090      	b.n	80028d6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_UART_Transmit+0x2a>
 80027ba:	1dbb      	adds	r3, r7, #6
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e088      	b.n	80028d8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	015b      	lsls	r3, r3, #5
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d109      	bne.n	80027e6 <HAL_UART_Transmit+0x4e>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2201      	movs	r2, #1
 80027de:	4013      	ands	r3, r2
 80027e0:	d001      	beq.n	80027e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e078      	b.n	80028d8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2290      	movs	r2, #144	@ 0x90
 80027ea:	2100      	movs	r1, #0
 80027ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2288      	movs	r2, #136	@ 0x88
 80027f2:	2121      	movs	r1, #33	@ 0x21
 80027f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f6:	f7fd ff95 	bl	8000724 <HAL_GetTick>
 80027fa:	0003      	movs	r3, r0
 80027fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1dba      	adds	r2, r7, #6
 8002802:	2154      	movs	r1, #84	@ 0x54
 8002804:	8812      	ldrh	r2, [r2, #0]
 8002806:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1dba      	adds	r2, r7, #6
 800280c:	2156      	movs	r1, #86	@ 0x56
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	015b      	lsls	r3, r3, #5
 800281a:	429a      	cmp	r2, r3
 800281c:	d108      	bne.n	8002830 <HAL_UART_Transmit+0x98>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e003      	b.n	8002838 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002838:	e030      	b.n	800289c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	0013      	movs	r3, r2
 8002844:	2200      	movs	r2, #0
 8002846:	2180      	movs	r1, #128	@ 0x80
 8002848:	f000 fc66 	bl	8003118 <UART_WaitOnFlagUntilTimeout>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d005      	beq.n	800285c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2288      	movs	r2, #136	@ 0x88
 8002854:	2120      	movs	r1, #32
 8002856:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e03d      	b.n	80028d8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	001a      	movs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	05d2      	lsls	r2, r2, #23
 800286e:	0dd2      	lsrs	r2, r2, #23
 8002870:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	3302      	adds	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e007      	b.n	800288a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	3301      	adds	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2256      	movs	r2, #86	@ 0x56
 800288e:	5a9b      	ldrh	r3, [r3, r2]
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b299      	uxth	r1, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2256      	movs	r2, #86	@ 0x56
 800289a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2256      	movs	r2, #86	@ 0x56
 80028a0:	5a9b      	ldrh	r3, [r3, r2]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1c8      	bne.n	800283a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	0013      	movs	r3, r2
 80028b2:	2200      	movs	r2, #0
 80028b4:	2140      	movs	r1, #64	@ 0x40
 80028b6:	f000 fc2f 	bl	8003118 <UART_WaitOnFlagUntilTimeout>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d005      	beq.n	80028ca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2288      	movs	r2, #136	@ 0x88
 80028c2:	2120      	movs	r1, #32
 80028c4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e006      	b.n	80028d8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2288      	movs	r2, #136	@ 0x88
 80028ce:	2120      	movs	r1, #32
 80028d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
  }
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b008      	add	sp, #32
 80028de:	bd80      	pop	{r7, pc}

080028e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e0:	b5b0      	push	{r4, r5, r7, lr}
 80028e2:	b090      	sub	sp, #64	@ 0x40
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028e8:	231a      	movs	r3, #26
 80028ea:	2220      	movs	r2, #32
 80028ec:	189b      	adds	r3, r3, r2
 80028ee:	19db      	adds	r3, r3, r7
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	431a      	orrs	r2, r3
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	4313      	orrs	r3, r2
 800290a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4aaf      	ldr	r2, [pc, #700]	@ (8002bd0 <UART_SetConfig+0x2f0>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800291e:	430b      	orrs	r3, r1
 8002920:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4aaa      	ldr	r2, [pc, #680]	@ (8002bd4 <UART_SetConfig+0x2f4>)
 800292a:	4013      	ands	r3, r2
 800292c:	0018      	movs	r0, r3
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	68d9      	ldr	r1, [r3, #12]
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	0003      	movs	r3, r0
 8002938:	430b      	orrs	r3, r1
 800293a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4aa4      	ldr	r2, [pc, #656]	@ (8002bd8 <UART_SetConfig+0x2f8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002952:	4313      	orrs	r3, r2
 8002954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a9f      	ldr	r2, [pc, #636]	@ (8002bdc <UART_SetConfig+0x2fc>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002968:	430b      	orrs	r3, r1
 800296a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	220f      	movs	r2, #15
 8002974:	4393      	bics	r3, r2
 8002976:	0018      	movs	r0, r3
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	0003      	movs	r3, r0
 8002982:	430b      	orrs	r3, r1
 8002984:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a95      	ldr	r2, [pc, #596]	@ (8002be0 <UART_SetConfig+0x300>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d131      	bne.n	80029f4 <UART_SetConfig+0x114>
 8002990:	4b94      	ldr	r3, [pc, #592]	@ (8002be4 <UART_SetConfig+0x304>)
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	2203      	movs	r2, #3
 8002996:	4013      	ands	r3, r2
 8002998:	2b03      	cmp	r3, #3
 800299a:	d01d      	beq.n	80029d8 <UART_SetConfig+0xf8>
 800299c:	d823      	bhi.n	80029e6 <UART_SetConfig+0x106>
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d00c      	beq.n	80029bc <UART_SetConfig+0xdc>
 80029a2:	d820      	bhi.n	80029e6 <UART_SetConfig+0x106>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <UART_SetConfig+0xce>
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d00e      	beq.n	80029ca <UART_SetConfig+0xea>
 80029ac:	e01b      	b.n	80029e6 <UART_SetConfig+0x106>
 80029ae:	231b      	movs	r3, #27
 80029b0:	2220      	movs	r2, #32
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	19db      	adds	r3, r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e0b4      	b.n	8002b26 <UART_SetConfig+0x246>
 80029bc:	231b      	movs	r3, #27
 80029be:	2220      	movs	r2, #32
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	19db      	adds	r3, r3, r7
 80029c4:	2202      	movs	r2, #2
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e0ad      	b.n	8002b26 <UART_SetConfig+0x246>
 80029ca:	231b      	movs	r3, #27
 80029cc:	2220      	movs	r2, #32
 80029ce:	189b      	adds	r3, r3, r2
 80029d0:	19db      	adds	r3, r3, r7
 80029d2:	2204      	movs	r2, #4
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e0a6      	b.n	8002b26 <UART_SetConfig+0x246>
 80029d8:	231b      	movs	r3, #27
 80029da:	2220      	movs	r2, #32
 80029dc:	189b      	adds	r3, r3, r2
 80029de:	19db      	adds	r3, r3, r7
 80029e0:	2208      	movs	r2, #8
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e09f      	b.n	8002b26 <UART_SetConfig+0x246>
 80029e6:	231b      	movs	r3, #27
 80029e8:	2220      	movs	r2, #32
 80029ea:	189b      	adds	r3, r3, r2
 80029ec:	19db      	adds	r3, r3, r7
 80029ee:	2210      	movs	r2, #16
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e098      	b.n	8002b26 <UART_SetConfig+0x246>
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a7b      	ldr	r2, [pc, #492]	@ (8002be8 <UART_SetConfig+0x308>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d131      	bne.n	8002a62 <UART_SetConfig+0x182>
 80029fe:	4b79      	ldr	r3, [pc, #484]	@ (8002be4 <UART_SetConfig+0x304>)
 8002a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a02:	220c      	movs	r2, #12
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	d01d      	beq.n	8002a46 <UART_SetConfig+0x166>
 8002a0a:	d823      	bhi.n	8002a54 <UART_SetConfig+0x174>
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d00c      	beq.n	8002a2a <UART_SetConfig+0x14a>
 8002a10:	d820      	bhi.n	8002a54 <UART_SetConfig+0x174>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <UART_SetConfig+0x13c>
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00e      	beq.n	8002a38 <UART_SetConfig+0x158>
 8002a1a:	e01b      	b.n	8002a54 <UART_SetConfig+0x174>
 8002a1c:	231b      	movs	r3, #27
 8002a1e:	2220      	movs	r2, #32
 8002a20:	189b      	adds	r3, r3, r2
 8002a22:	19db      	adds	r3, r3, r7
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	e07d      	b.n	8002b26 <UART_SetConfig+0x246>
 8002a2a:	231b      	movs	r3, #27
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	19db      	adds	r3, r3, r7
 8002a32:	2202      	movs	r2, #2
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e076      	b.n	8002b26 <UART_SetConfig+0x246>
 8002a38:	231b      	movs	r3, #27
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	19db      	adds	r3, r3, r7
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e06f      	b.n	8002b26 <UART_SetConfig+0x246>
 8002a46:	231b      	movs	r3, #27
 8002a48:	2220      	movs	r2, #32
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	19db      	adds	r3, r3, r7
 8002a4e:	2208      	movs	r2, #8
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	e068      	b.n	8002b26 <UART_SetConfig+0x246>
 8002a54:	231b      	movs	r3, #27
 8002a56:	2220      	movs	r2, #32
 8002a58:	189b      	adds	r3, r3, r2
 8002a5a:	19db      	adds	r3, r3, r7
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e061      	b.n	8002b26 <UART_SetConfig+0x246>
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a61      	ldr	r2, [pc, #388]	@ (8002bec <UART_SetConfig+0x30c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d106      	bne.n	8002a7a <UART_SetConfig+0x19a>
 8002a6c:	231b      	movs	r3, #27
 8002a6e:	2220      	movs	r2, #32
 8002a70:	189b      	adds	r3, r3, r2
 8002a72:	19db      	adds	r3, r3, r7
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e055      	b.n	8002b26 <UART_SetConfig+0x246>
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bf0 <UART_SetConfig+0x310>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d106      	bne.n	8002a92 <UART_SetConfig+0x1b2>
 8002a84:	231b      	movs	r3, #27
 8002a86:	2220      	movs	r2, #32
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	19db      	adds	r3, r3, r7
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e049      	b.n	8002b26 <UART_SetConfig+0x246>
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a50      	ldr	r2, [pc, #320]	@ (8002bd8 <UART_SetConfig+0x2f8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d13e      	bne.n	8002b1a <UART_SetConfig+0x23a>
 8002a9c:	4b51      	ldr	r3, [pc, #324]	@ (8002be4 <UART_SetConfig+0x304>)
 8002a9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002aa0:	23c0      	movs	r3, #192	@ 0xc0
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	22c0      	movs	r2, #192	@ 0xc0
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d027      	beq.n	8002afe <UART_SetConfig+0x21e>
 8002aae:	22c0      	movs	r2, #192	@ 0xc0
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d82a      	bhi.n	8002b0c <UART_SetConfig+0x22c>
 8002ab6:	2280      	movs	r2, #128	@ 0x80
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d011      	beq.n	8002ae2 <UART_SetConfig+0x202>
 8002abe:	2280      	movs	r2, #128	@ 0x80
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d822      	bhi.n	8002b0c <UART_SetConfig+0x22c>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <UART_SetConfig+0x1f4>
 8002aca:	2280      	movs	r2, #128	@ 0x80
 8002acc:	00d2      	lsls	r2, r2, #3
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <UART_SetConfig+0x210>
 8002ad2:	e01b      	b.n	8002b0c <UART_SetConfig+0x22c>
 8002ad4:	231b      	movs	r3, #27
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	189b      	adds	r3, r3, r2
 8002ada:	19db      	adds	r3, r3, r7
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e021      	b.n	8002b26 <UART_SetConfig+0x246>
 8002ae2:	231b      	movs	r3, #27
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	189b      	adds	r3, r3, r2
 8002ae8:	19db      	adds	r3, r3, r7
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e01a      	b.n	8002b26 <UART_SetConfig+0x246>
 8002af0:	231b      	movs	r3, #27
 8002af2:	2220      	movs	r2, #32
 8002af4:	189b      	adds	r3, r3, r2
 8002af6:	19db      	adds	r3, r3, r7
 8002af8:	2204      	movs	r2, #4
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e013      	b.n	8002b26 <UART_SetConfig+0x246>
 8002afe:	231b      	movs	r3, #27
 8002b00:	2220      	movs	r2, #32
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	19db      	adds	r3, r3, r7
 8002b06:	2208      	movs	r2, #8
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e00c      	b.n	8002b26 <UART_SetConfig+0x246>
 8002b0c:	231b      	movs	r3, #27
 8002b0e:	2220      	movs	r2, #32
 8002b10:	189b      	adds	r3, r3, r2
 8002b12:	19db      	adds	r3, r3, r7
 8002b14:	2210      	movs	r2, #16
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e005      	b.n	8002b26 <UART_SetConfig+0x246>
 8002b1a:	231b      	movs	r3, #27
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	19db      	adds	r3, r3, r7
 8002b22:	2210      	movs	r2, #16
 8002b24:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd8 <UART_SetConfig+0x2f8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d000      	beq.n	8002b32 <UART_SetConfig+0x252>
 8002b30:	e0a9      	b.n	8002c86 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b32:	231b      	movs	r3, #27
 8002b34:	2220      	movs	r2, #32
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d015      	beq.n	8002b6c <UART_SetConfig+0x28c>
 8002b40:	dc18      	bgt.n	8002b74 <UART_SetConfig+0x294>
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d00d      	beq.n	8002b62 <UART_SetConfig+0x282>
 8002b46:	dc15      	bgt.n	8002b74 <UART_SetConfig+0x294>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <UART_SetConfig+0x272>
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d005      	beq.n	8002b5c <UART_SetConfig+0x27c>
 8002b50:	e010      	b.n	8002b74 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b52:	f7ff fbfd 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8002b56:	0003      	movs	r3, r0
 8002b58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b5a:	e014      	b.n	8002b86 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <UART_SetConfig+0x314>)
 8002b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b60:	e011      	b.n	8002b86 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b62:	f7ff fb69 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002b66:	0003      	movs	r3, r0
 8002b68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b6a:	e00c      	b.n	8002b86 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b72:	e008      	b.n	8002b86 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002b78:	231a      	movs	r3, #26
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	189b      	adds	r3, r3, r2
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
        break;
 8002b84:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d100      	bne.n	8002b8e <UART_SetConfig+0x2ae>
 8002b8c:	e14b      	b.n	8002e26 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b92:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <UART_SetConfig+0x318>)
 8002b94:	0052      	lsls	r2, r2, #1
 8002b96:	5ad3      	ldrh	r3, [r2, r3]
 8002b98:	0019      	movs	r1, r3
 8002b9a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002b9c:	f7fd faba 	bl	8000114 <__udivsi3>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	0013      	movs	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	189b      	adds	r3, r3, r2
 8002bae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d305      	bcc.n	8002bc0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d91d      	bls.n	8002bfc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002bc0:	231a      	movs	r3, #26
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	189b      	adds	r3, r3, r2
 8002bc6:	19db      	adds	r3, r3, r7
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e12b      	b.n	8002e26 <UART_SetConfig+0x546>
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	cfff69f3 	.word	0xcfff69f3
 8002bd4:	ffffcfff 	.word	0xffffcfff
 8002bd8:	40008000 	.word	0x40008000
 8002bdc:	11fff4ff 	.word	0x11fff4ff
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40004400 	.word	0x40004400
 8002bec:	40004800 	.word	0x40004800
 8002bf0:	40004c00 	.word	0x40004c00
 8002bf4:	00f42400 	.word	0x00f42400
 8002bf8:	0800469c 	.word	0x0800469c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c08:	4b92      	ldr	r3, [pc, #584]	@ (8002e54 <UART_SetConfig+0x574>)
 8002c0a:	0052      	lsls	r2, r2, #1
 8002c0c:	5ad3      	ldrh	r3, [r2, r3]
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	69b8      	ldr	r0, [r7, #24]
 8002c1a:	69f9      	ldr	r1, [r7, #28]
 8002c1c:	f7fd fbf0 	bl	8000400 <__aeabi_uldivmod>
 8002c20:	0002      	movs	r2, r0
 8002c22:	000b      	movs	r3, r1
 8002c24:	0e11      	lsrs	r1, r2, #24
 8002c26:	021d      	lsls	r5, r3, #8
 8002c28:	430d      	orrs	r5, r1
 8002c2a:	0214      	lsls	r4, r2, #8
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68b8      	ldr	r0, [r7, #8]
 8002c3a:	68f9      	ldr	r1, [r7, #12]
 8002c3c:	1900      	adds	r0, r0, r4
 8002c3e:	4169      	adcs	r1, r5
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f7fd fbd7 	bl	8000400 <__aeabi_uldivmod>
 8002c52:	0002      	movs	r2, r0
 8002c54:	000b      	movs	r3, r1
 8002c56:	0013      	movs	r3, r2
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5c:	23c0      	movs	r3, #192	@ 0xc0
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d309      	bcc.n	8002c78 <UART_SetConfig+0x398>
 8002c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	035b      	lsls	r3, r3, #13
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d204      	bcs.n	8002c78 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	e0d6      	b.n	8002e26 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002c78:	231a      	movs	r3, #26
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	189b      	adds	r3, r3, r2
 8002c7e:	19db      	adds	r3, r3, r7
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e0cf      	b.n	8002e26 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d000      	beq.n	8002c94 <UART_SetConfig+0x3b4>
 8002c92:	e070      	b.n	8002d76 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002c94:	231b      	movs	r3, #27
 8002c96:	2220      	movs	r2, #32
 8002c98:	189b      	adds	r3, r3, r2
 8002c9a:	19db      	adds	r3, r3, r7
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d015      	beq.n	8002cce <UART_SetConfig+0x3ee>
 8002ca2:	dc18      	bgt.n	8002cd6 <UART_SetConfig+0x3f6>
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00d      	beq.n	8002cc4 <UART_SetConfig+0x3e4>
 8002ca8:	dc15      	bgt.n	8002cd6 <UART_SetConfig+0x3f6>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <UART_SetConfig+0x3d4>
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d005      	beq.n	8002cbe <UART_SetConfig+0x3de>
 8002cb2:	e010      	b.n	8002cd6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f7ff fb4c 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002cbc:	e014      	b.n	8002ce8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cbe:	4b66      	ldr	r3, [pc, #408]	@ (8002e58 <UART_SetConfig+0x578>)
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002cc2:	e011      	b.n	8002ce8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cc4:	f7ff fab8 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ccc:	e00c      	b.n	8002ce8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cce:	2380      	movs	r3, #128	@ 0x80
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002cd4:	e008      	b.n	8002ce8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002cda:	231a      	movs	r3, #26
 8002cdc:	2220      	movs	r2, #32
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	19db      	adds	r3, r3, r7
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
        break;
 8002ce6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d100      	bne.n	8002cf0 <UART_SetConfig+0x410>
 8002cee:	e09a      	b.n	8002e26 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf4:	4b57      	ldr	r3, [pc, #348]	@ (8002e54 <UART_SetConfig+0x574>)
 8002cf6:	0052      	lsls	r2, r2, #1
 8002cf8:	5ad3      	ldrh	r3, [r2, r3]
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002cfe:	f7fd fa09 	bl	8000114 <__udivsi3>
 8002d02:	0003      	movs	r3, r0
 8002d04:	005a      	lsls	r2, r3, #1
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	18d2      	adds	r2, r2, r3
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0019      	movs	r1, r3
 8002d14:	0010      	movs	r0, r2
 8002d16:	f7fd f9fd 	bl	8000114 <__udivsi3>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d921      	bls.n	8002d68 <UART_SetConfig+0x488>
 8002d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d26:	2380      	movs	r3, #128	@ 0x80
 8002d28:	025b      	lsls	r3, r3, #9
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d21c      	bcs.n	8002d68 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	200e      	movs	r0, #14
 8002d34:	2420      	movs	r4, #32
 8002d36:	1903      	adds	r3, r0, r4
 8002d38:	19db      	adds	r3, r3, r7
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2207      	movs	r2, #7
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b299      	uxth	r1, r3
 8002d4c:	1903      	adds	r3, r0, r4
 8002d4e:	19db      	adds	r3, r3, r7
 8002d50:	1902      	adds	r2, r0, r4
 8002d52:	19d2      	adds	r2, r2, r7
 8002d54:	8812      	ldrh	r2, [r2, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	1902      	adds	r2, r0, r4
 8002d60:	19d2      	adds	r2, r2, r7
 8002d62:	8812      	ldrh	r2, [r2, #0]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	e05e      	b.n	8002e26 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d68:	231a      	movs	r3, #26
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	189b      	adds	r3, r3, r2
 8002d6e:	19db      	adds	r3, r3, r7
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e057      	b.n	8002e26 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d76:	231b      	movs	r3, #27
 8002d78:	2220      	movs	r2, #32
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	19db      	adds	r3, r3, r7
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d015      	beq.n	8002db0 <UART_SetConfig+0x4d0>
 8002d84:	dc18      	bgt.n	8002db8 <UART_SetConfig+0x4d8>
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d00d      	beq.n	8002da6 <UART_SetConfig+0x4c6>
 8002d8a:	dc15      	bgt.n	8002db8 <UART_SetConfig+0x4d8>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <UART_SetConfig+0x4b6>
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d005      	beq.n	8002da0 <UART_SetConfig+0x4c0>
 8002d94:	e010      	b.n	8002db8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d96:	f7ff fadb 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d9e:	e014      	b.n	8002dca <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <UART_SetConfig+0x578>)
 8002da2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002da4:	e011      	b.n	8002dca <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da6:	f7ff fa47 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002daa:	0003      	movs	r3, r0
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002dae:	e00c      	b.n	8002dca <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002db6:	e008      	b.n	8002dca <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002dbc:	231a      	movs	r3, #26
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	189b      	adds	r3, r3, r2
 8002dc2:	19db      	adds	r3, r3, r7
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
        break;
 8002dc8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02a      	beq.n	8002e26 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e54 <UART_SetConfig+0x574>)
 8002dd6:	0052      	lsls	r2, r2, #1
 8002dd8:	5ad3      	ldrh	r3, [r2, r3]
 8002dda:	0019      	movs	r1, r3
 8002ddc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002dde:	f7fd f999 	bl	8000114 <__udivsi3>
 8002de2:	0003      	movs	r3, r0
 8002de4:	001a      	movs	r2, r3
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	18d2      	adds	r2, r2, r3
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	0019      	movs	r1, r3
 8002df4:	0010      	movs	r0, r2
 8002df6:	f7fd f98d 	bl	8000114 <__udivsi3>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	2b0f      	cmp	r3, #15
 8002e02:	d90a      	bls.n	8002e1a <UART_SetConfig+0x53a>
 8002e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	025b      	lsls	r3, r3, #9
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d205      	bcs.n	8002e1a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	e005      	b.n	8002e26 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002e1a:	231a      	movs	r3, #26
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	189b      	adds	r3, r3, r2
 8002e20:	19db      	adds	r3, r3, r7
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	226a      	movs	r2, #106	@ 0x6a
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	2268      	movs	r2, #104	@ 0x68
 8002e32:	2101      	movs	r1, #1
 8002e34:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	2200      	movs	r2, #0
 8002e3a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	2200      	movs	r2, #0
 8002e40:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e42:	231a      	movs	r3, #26
 8002e44:	2220      	movs	r2, #32
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	19db      	adds	r3, r3, r7
 8002e4a:	781b      	ldrb	r3, [r3, #0]
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b010      	add	sp, #64	@ 0x40
 8002e52:	bdb0      	pop	{r4, r5, r7, pc}
 8002e54:	0800469c 	.word	0x0800469c
 8002e58:	00f42400 	.word	0x00f42400

08002e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	2208      	movs	r2, #8
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa0 <UART_AdvFeatureConfig+0x144>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a43      	ldr	r2, [pc, #268]	@ (8002fa4 <UART_AdvFeatureConfig+0x148>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	2202      	movs	r2, #2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a3b      	ldr	r2, [pc, #236]	@ (8002fa8 <UART_AdvFeatureConfig+0x14c>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	2204      	movs	r2, #4
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a34      	ldr	r2, [pc, #208]	@ (8002fac <UART_AdvFeatureConfig+0x150>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb0 <UART_AdvFeatureConfig+0x154>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	2220      	movs	r2, #32
 8002f14:	4013      	ands	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	4a25      	ldr	r2, [pc, #148]	@ (8002fb4 <UART_AdvFeatureConfig+0x158>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	2240      	movs	r2, #64	@ 0x40
 8002f36:	4013      	ands	r3, r2
 8002f38:	d01d      	beq.n	8002f76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <UART_AdvFeatureConfig+0x15c>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f56:	2380      	movs	r3, #128	@ 0x80
 8002f58:	035b      	lsls	r3, r3, #13
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d10b      	bne.n	8002f76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a15      	ldr	r2, [pc, #84]	@ (8002fbc <UART_AdvFeatureConfig+0x160>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4a0e      	ldr	r2, [pc, #56]	@ (8002fc0 <UART_AdvFeatureConfig+0x164>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]
  }
}
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	ffff7fff 	.word	0xffff7fff
 8002fa4:	fffdffff 	.word	0xfffdffff
 8002fa8:	fffeffff 	.word	0xfffeffff
 8002fac:	fffbffff 	.word	0xfffbffff
 8002fb0:	ffffefff 	.word	0xffffefff
 8002fb4:	ffffdfff 	.word	0xffffdfff
 8002fb8:	ffefffff 	.word	0xffefffff
 8002fbc:	ff9fffff 	.word	0xff9fffff
 8002fc0:	fff7ffff 	.word	0xfff7ffff

08002fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b092      	sub	sp, #72	@ 0x48
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2290      	movs	r2, #144	@ 0x90
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd4:	f7fd fba6 	bl	8000724 <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d12d      	bne.n	8003046 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fec:	2280      	movs	r2, #128	@ 0x80
 8002fee:	0391      	lsls	r1, r2, #14
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4a47      	ldr	r2, [pc, #284]	@ (8003110 <UART_CheckIdleState+0x14c>)
 8002ff4:	9200      	str	r2, [sp, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f000 f88e 	bl	8003118 <UART_WaitOnFlagUntilTimeout>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d022      	beq.n	8003046 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003000:	f3ef 8310 	mrs	r3, PRIMASK
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003008:	63bb      	str	r3, [r7, #56]	@ 0x38
 800300a:	2301      	movs	r3, #1
 800300c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			@ (mov r8, r8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2180      	movs	r1, #128	@ 0x80
 8003022:	438a      	bics	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302c:	f383 8810 	msr	PRIMASK, r3
}
 8003030:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2288      	movs	r2, #136	@ 0x88
 8003036:	2120      	movs	r1, #32
 8003038:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2284      	movs	r2, #132	@ 0x84
 800303e:	2100      	movs	r1, #0
 8003040:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e060      	b.n	8003108 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2204      	movs	r2, #4
 800304e:	4013      	ands	r3, r2
 8003050:	2b04      	cmp	r3, #4
 8003052:	d146      	bne.n	80030e2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	03d1      	lsls	r1, r2, #15
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4a2c      	ldr	r2, [pc, #176]	@ (8003110 <UART_CheckIdleState+0x14c>)
 800305e:	9200      	str	r2, [sp, #0]
 8003060:	2200      	movs	r2, #0
 8003062:	f000 f859 	bl	8003118 <UART_WaitOnFlagUntilTimeout>
 8003066:	1e03      	subs	r3, r0, #0
 8003068:	d03b      	beq.n	80030e2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800306a:	f3ef 8310 	mrs	r3, PRIMASK
 800306e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003070:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003072:	637b      	str	r3, [r7, #52]	@ 0x34
 8003074:	2301      	movs	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f383 8810 	msr	PRIMASK, r3
}
 800307e:	46c0      	nop			@ (mov r8, r8)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4922      	ldr	r1, [pc, #136]	@ (8003114 <UART_CheckIdleState+0x150>)
 800308c:	400a      	ands	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003092:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f383 8810 	msr	PRIMASK, r3
}
 800309a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309c:	f3ef 8310 	mrs	r3, PRIMASK
 80030a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80030a2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030a6:	2301      	movs	r3, #1
 80030a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f383 8810 	msr	PRIMASK, r3
}
 80030b0:	46c0      	nop			@ (mov r8, r8)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	438a      	bics	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	228c      	movs	r2, #140	@ 0x8c
 80030d2:	2120      	movs	r1, #32
 80030d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2284      	movs	r2, #132	@ 0x84
 80030da:	2100      	movs	r1, #0
 80030dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e012      	b.n	8003108 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2288      	movs	r2, #136	@ 0x88
 80030e6:	2120      	movs	r1, #32
 80030e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	228c      	movs	r2, #140	@ 0x8c
 80030ee:	2120      	movs	r1, #32
 80030f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2284      	movs	r2, #132	@ 0x84
 8003102:	2100      	movs	r1, #0
 8003104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b010      	add	sp, #64	@ 0x40
 800310e:	bd80      	pop	{r7, pc}
 8003110:	01ffffff 	.word	0x01ffffff
 8003114:	fffffedf 	.word	0xfffffedf

08003118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	1dfb      	adds	r3, r7, #7
 8003126:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003128:	e051      	b.n	80031ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	3301      	adds	r3, #1
 800312e:	d04e      	beq.n	80031ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003130:	f7fd faf8 	bl	8000724 <HAL_GetTick>
 8003134:	0002      	movs	r2, r0
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	429a      	cmp	r2, r3
 800313e:	d302      	bcc.n	8003146 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e051      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2204      	movs	r2, #4
 8003152:	4013      	ands	r3, r2
 8003154:	d03b      	beq.n	80031ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b80      	cmp	r3, #128	@ 0x80
 800315a:	d038      	beq.n	80031ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b40      	cmp	r3, #64	@ 0x40
 8003160:	d035      	beq.n	80031ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	2208      	movs	r2, #8
 800316a:	4013      	ands	r3, r2
 800316c:	2b08      	cmp	r3, #8
 800316e:	d111      	bne.n	8003194 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2208      	movs	r2, #8
 8003176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	0018      	movs	r0, r3
 800317c:	f000 f83c 	bl	80031f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2290      	movs	r2, #144	@ 0x90
 8003184:	2108      	movs	r1, #8
 8003186:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2284      	movs	r2, #132	@ 0x84
 800318c:	2100      	movs	r1, #0
 800318e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e02c      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	2380      	movs	r3, #128	@ 0x80
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	401a      	ands	r2, r3
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d112      	bne.n	80031ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2280      	movs	r2, #128	@ 0x80
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 f81f 	bl	80031f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2290      	movs	r2, #144	@ 0x90
 80031be:	2120      	movs	r1, #32
 80031c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2284      	movs	r2, #132	@ 0x84
 80031c6:	2100      	movs	r1, #0
 80031c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e00f      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	425a      	negs	r2, r3
 80031de:	4153      	adcs	r3, r2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	001a      	movs	r2, r3
 80031e4:	1dfb      	adds	r3, r7, #7
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d09e      	beq.n	800312a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	0018      	movs	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b004      	add	sp, #16
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08e      	sub	sp, #56	@ 0x38
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003200:	f3ef 8310 	mrs	r3, PRIMASK
 8003204:	617b      	str	r3, [r7, #20]
  return(result);
 8003206:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003208:	637b      	str	r3, [r7, #52]	@ 0x34
 800320a:	2301      	movs	r3, #1
 800320c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			@ (mov r8, r8)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4926      	ldr	r1, [pc, #152]	@ (80032bc <UART_EndRxTransfer+0xc4>)
 8003222:	400a      	ands	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003228:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f383 8810 	msr	PRIMASK, r3
}
 8003230:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003232:	f3ef 8310 	mrs	r3, PRIMASK
 8003236:	623b      	str	r3, [r7, #32]
  return(result);
 8003238:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800323a:	633b      	str	r3, [r7, #48]	@ 0x30
 800323c:	2301      	movs	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	f383 8810 	msr	PRIMASK, r3
}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	491b      	ldr	r1, [pc, #108]	@ (80032c0 <UART_EndRxTransfer+0xc8>)
 8003254:	400a      	ands	r2, r1
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	f383 8810 	msr	PRIMASK, r3
}
 8003262:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d118      	bne.n	800329e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800326c:	f3ef 8310 	mrs	r3, PRIMASK
 8003270:	60bb      	str	r3, [r7, #8]
  return(result);
 8003272:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003276:	2301      	movs	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2110      	movs	r1, #16
 800328e:	438a      	bics	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003294:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f383 8810 	msr	PRIMASK, r3
}
 800329c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	228c      	movs	r2, #140	@ 0x8c
 80032a2:	2120      	movs	r1, #32
 80032a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b00e      	add	sp, #56	@ 0x38
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	fffffedf 	.word	0xfffffedf
 80032c0:	effffffe 	.word	0xeffffffe

080032c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2284      	movs	r2, #132	@ 0x84
 80032d0:	5c9b      	ldrb	r3, [r3, r2]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_UARTEx_DisableFifoMode+0x16>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e027      	b.n	800332a <HAL_UARTEx_DisableFifoMode+0x66>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2284      	movs	r2, #132	@ 0x84
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2288      	movs	r2, #136	@ 0x88
 80032e6:	2124      	movs	r1, #36	@ 0x24
 80032e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	438a      	bics	r2, r1
 8003300:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a0b      	ldr	r2, [pc, #44]	@ (8003334 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003306:	4013      	ands	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2288      	movs	r2, #136	@ 0x88
 800331c:	2120      	movs	r1, #32
 800331e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2284      	movs	r2, #132	@ 0x84
 8003324:	2100      	movs	r1, #0
 8003326:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	0018      	movs	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	b004      	add	sp, #16
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	dfffffff 	.word	0xdfffffff

08003338 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2284      	movs	r2, #132	@ 0x84
 8003346:	5c9b      	ldrb	r3, [r3, r2]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e02e      	b.n	80033ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2284      	movs	r2, #132	@ 0x84
 8003354:	2101      	movs	r1, #1
 8003356:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2288      	movs	r2, #136	@ 0x88
 800335c:	2124      	movs	r1, #36	@ 0x24
 800335e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2101      	movs	r1, #1
 8003374:	438a      	bics	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	08d9      	lsrs	r1, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	0018      	movs	r0, r3
 8003390:	f000 f854 	bl	800343c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2288      	movs	r2, #136	@ 0x88
 80033a0:	2120      	movs	r1, #32
 80033a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2284      	movs	r2, #132	@ 0x84
 80033a8:	2100      	movs	r1, #0
 80033aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2284      	movs	r2, #132	@ 0x84
 80033c6:	5c9b      	ldrb	r3, [r3, r2]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e02f      	b.n	8003430 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2284      	movs	r2, #132	@ 0x84
 80033d4:	2101      	movs	r1, #1
 80033d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2288      	movs	r2, #136	@ 0x88
 80033dc:	2124      	movs	r1, #36	@ 0x24
 80033de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2101      	movs	r1, #1
 80033f4:	438a      	bics	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003438 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003400:	4013      	ands	r3, r2
 8003402:	0019      	movs	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f000 f813 	bl	800343c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2288      	movs	r2, #136	@ 0x88
 8003422:	2120      	movs	r1, #32
 8003424:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2284      	movs	r2, #132	@ 0x84
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}
 8003438:	f1ffffff 	.word	0xf1ffffff

0800343c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800343c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003448:	2b00      	cmp	r3, #0
 800344a:	d108      	bne.n	800345e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	226a      	movs	r2, #106	@ 0x6a
 8003450:	2101      	movs	r1, #1
 8003452:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2268      	movs	r2, #104	@ 0x68
 8003458:	2101      	movs	r1, #1
 800345a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800345c:	e043      	b.n	80034e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800345e:	260f      	movs	r6, #15
 8003460:	19bb      	adds	r3, r7, r6
 8003462:	2208      	movs	r2, #8
 8003464:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003466:	200e      	movs	r0, #14
 8003468:	183b      	adds	r3, r7, r0
 800346a:	2208      	movs	r2, #8
 800346c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	0e5b      	lsrs	r3, r3, #25
 8003476:	b2da      	uxtb	r2, r3
 8003478:	240d      	movs	r4, #13
 800347a:	193b      	adds	r3, r7, r4
 800347c:	2107      	movs	r1, #7
 800347e:	400a      	ands	r2, r1
 8003480:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	0f5b      	lsrs	r3, r3, #29
 800348a:	b2da      	uxtb	r2, r3
 800348c:	250c      	movs	r5, #12
 800348e:	197b      	adds	r3, r7, r5
 8003490:	2107      	movs	r1, #7
 8003492:	400a      	ands	r2, r1
 8003494:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003496:	183b      	adds	r3, r7, r0
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	197a      	adds	r2, r7, r5
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	4914      	ldr	r1, [pc, #80]	@ (80034f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80034a0:	5c8a      	ldrb	r2, [r1, r2]
 80034a2:	435a      	muls	r2, r3
 80034a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80034a6:	197b      	adds	r3, r7, r5
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80034ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034ae:	0019      	movs	r1, r3
 80034b0:	f7fc feba 	bl	8000228 <__divsi3>
 80034b4:	0003      	movs	r3, r0
 80034b6:	b299      	uxth	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	226a      	movs	r2, #106	@ 0x6a
 80034bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034be:	19bb      	adds	r3, r7, r6
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	193a      	adds	r2, r7, r4
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	490a      	ldr	r1, [pc, #40]	@ (80034f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80034c8:	5c8a      	ldrb	r2, [r1, r2]
 80034ca:	435a      	muls	r2, r3
 80034cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	4a08      	ldr	r2, [pc, #32]	@ (80034f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034d6:	0019      	movs	r1, r3
 80034d8:	f7fc fea6 	bl	8000228 <__divsi3>
 80034dc:	0003      	movs	r3, r0
 80034de:	b299      	uxth	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2268      	movs	r2, #104	@ 0x68
 80034e4:	5299      	strh	r1, [r3, r2]
}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b005      	add	sp, #20
 80034ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	080046b4 	.word	0x080046b4
 80034f4:	080046bc 	.word	0x080046bc

080034f8 <uartSend>:
//---------------------------IMPLICIT FUNCTIONS---------------------------
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
espat_state_t uartSend(espat_uartInstance_t *uart, char *data, uint32_t size) {
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]


	HAL_StatusTypeDef state = HAL_UART_Transmit(uart->uart, (uint8_t*) data,
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2517      	movs	r5, #23
 8003512:	197c      	adds	r4, r7, r5
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	f7ff f93f 	bl	8002798 <HAL_UART_Transmit>
 800351a:	0003      	movs	r3, r0
 800351c:	7023      	strb	r3, [r4, #0]
			size, uart->sendTimeout);

	if (state == HAL_OK)
 800351e:	197b      	adds	r3, r7, r5
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <uartSend+0x32>
		return ESPAT_STATE_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	e007      	b.n	800353a <uartSend+0x42>
	else if (state == HAL_TIMEOUT)
 800352a:	2317      	movs	r3, #23
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d101      	bne.n	8003538 <uartSend+0x40>
		return ESPAT_STATE_TIMEOUT;
 8003534:	2302      	movs	r3, #2
 8003536:	e000      	b.n	800353a <uartSend+0x42>
	else
		return ESPAT_STATE_ERR;
 8003538:	2301      	movs	r3, #1
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b006      	add	sp, #24
 8003540:	bdb0      	pop	{r4, r5, r7, pc}

08003542 <espAt_init>:
 * @param: timout for receive
 *
 * @retval: always ESPATHID_OK
 */
espat_state_t espAt_init(espat_radio_t *radio, UART_HandleTypeDef *uart,
		uint32_t txTimeout, uint32_t rxTimeout) { //port
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	603b      	str	r3, [r7, #0]

	radio->espUart.uart = uart;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	601a      	str	r2, [r3, #0]
	radio->espUart.sendTimeout = txTimeout;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	605a      	str	r2, [r3, #4]
	radio->espUart.receiveTimeout = rxTimeout;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	609a      	str	r2, [r3, #8]
	return ESPAT_STATE_OK;
 8003562:	2300      	movs	r3, #0

}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b004      	add	sp, #16
 800356a:	bd80      	pop	{r7, pc}

0800356c <espAt_sendParams>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendParams(espat_radio_t *radio, char *command,
		uint16_t paramCount, ...) {
 800356c:	b40c      	push	{r2, r3}
 800356e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003570:	46c6      	mov	lr, r8
 8003572:	b500      	push	{lr}
 8003574:	b0a2      	sub	sp, #136	@ 0x88
 8003576:	af00      	add	r7, sp, #0
 8003578:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800357a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800357c:	466b      	mov	r3, sp
 800357e:	4698      	mov	r8, r3

	//check if command are valid
	if (command == NULL)
 8003580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <espAt_sendParams+0x1e>
		return ESPAT_STATE_ERR;
 8003586:	2301      	movs	r3, #1
 8003588:	e1b8      	b.n	80038fc <espAt_sendParams+0x390>

	va_list ap;
	va_start(ap, paramCount);
 800358a:	236c      	movs	r3, #108	@ 0x6c
 800358c:	2238      	movs	r2, #56	@ 0x38
 800358e:	189b      	adds	r3, r3, r2
 8003590:	19db      	adds	r3, r3, r7
 8003592:	663b      	str	r3, [r7, #96]	@ 0x60

	//make parameters array
	uint32_t parameters[paramCount];
 8003594:	2368      	movs	r3, #104	@ 0x68
 8003596:	189b      	adds	r3, r3, r2
 8003598:	19db      	adds	r3, r3, r7
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	0013      	movs	r3, r2
 800359e:	3b01      	subs	r3, #1
 80035a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035a2:	61ba      	str	r2, [r7, #24]
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	69b8      	ldr	r0, [r7, #24]
 80035aa:	69f9      	ldr	r1, [r7, #28]
 80035ac:	0003      	movs	r3, r0
 80035ae:	0edb      	lsrs	r3, r3, #27
 80035b0:	000e      	movs	r6, r1
 80035b2:	0175      	lsls	r5, r6, #5
 80035b4:	431d      	orrs	r5, r3
 80035b6:	0003      	movs	r3, r0
 80035b8:	015c      	lsls	r4, r3, #5
 80035ba:	613a      	str	r2, [r7, #16]
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	6938      	ldr	r0, [r7, #16]
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	0003      	movs	r3, r0
 80035c6:	0edb      	lsrs	r3, r3, #27
 80035c8:	000c      	movs	r4, r1
 80035ca:	0164      	lsls	r4, r4, #5
 80035cc:	637c      	str	r4, [r7, #52]	@ 0x34
 80035ce:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80035d0:	431c      	orrs	r4, r3
 80035d2:	637c      	str	r4, [r7, #52]	@ 0x34
 80035d4:	0003      	movs	r3, r0
 80035d6:	015b      	lsls	r3, r3, #5
 80035d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035da:	0013      	movs	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	3307      	adds	r3, #7
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	466a      	mov	r2, sp
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	469d      	mov	sp, r3
 80035ea:	466b      	mov	r3, sp
 80035ec:	3303      	adds	r3, #3
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	67bb      	str	r3, [r7, #120]	@ 0x78

	//fill parameters array
	for (uint16_t i = 0; i < paramCount; i++) {
 80035f4:	234e      	movs	r3, #78	@ 0x4e
 80035f6:	2238      	movs	r2, #56	@ 0x38
 80035f8:	189b      	adds	r3, r3, r2
 80035fa:	19db      	adds	r3, r3, r7
 80035fc:	2200      	movs	r2, #0
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	e012      	b.n	8003628 <espAt_sendParams+0xbc>
		parameters[i] = va_arg(ap, uint32_t);
 8003602:	204e      	movs	r0, #78	@ 0x4e
 8003604:	2438      	movs	r4, #56	@ 0x38
 8003606:	1903      	adds	r3, r0, r4
 8003608:	19db      	adds	r3, r3, r7
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800360e:	1d19      	adds	r1, r3, #4
 8003610:	6639      	str	r1, [r7, #96]	@ 0x60
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	50d1      	str	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 800361a:	1903      	adds	r3, r0, r4
 800361c:	19db      	adds	r3, r3, r7
 800361e:	881a      	ldrh	r2, [r3, #0]
 8003620:	1903      	adds	r3, r0, r4
 8003622:	19db      	adds	r3, r3, r7
 8003624:	3201      	adds	r2, #1
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	234e      	movs	r3, #78	@ 0x4e
 800362a:	2138      	movs	r1, #56	@ 0x38
 800362c:	185b      	adds	r3, r3, r1
 800362e:	19da      	adds	r2, r3, r7
 8003630:	2368      	movs	r3, #104	@ 0x68
 8003632:	185b      	adds	r3, r3, r1
 8003634:	19db      	adds	r3, r3, r7
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e1      	bcc.n	8003602 <espAt_sendParams+0x96>
	}

	//make arguments list string
	uint16_t characterCounter = 0;
 800363e:	234c      	movs	r3, #76	@ 0x4c
 8003640:	185b      	adds	r3, r3, r1
 8003642:	19db      	adds	r3, r3, r7
 8003644:	2200      	movs	r2, #0
 8003646:	801a      	strh	r2, [r3, #0]
	char argumentsBuffer[AT_BUFFER_SIZE];
	memset(argumentsBuffer, '\0', AT_BUFFER_SIZE);
 8003648:	2308      	movs	r3, #8
 800364a:	000c      	movs	r4, r1
 800364c:	185b      	adds	r3, r3, r1
 800364e:	19db      	adds	r3, r3, r7
 8003650:	221e      	movs	r2, #30
 8003652:	2100      	movs	r1, #0
 8003654:	0018      	movs	r0, r3
 8003656:	f000 ffbf 	bl	80045d8 <memset>

	for (uint16_t i = 0; i < paramCount; i++) {
 800365a:	234a      	movs	r3, #74	@ 0x4a
 800365c:	191b      	adds	r3, r3, r4
 800365e:	19db      	adds	r3, r3, r7
 8003660:	2200      	movs	r2, #0
 8003662:	801a      	strh	r2, [r3, #0]
 8003664:	e049      	b.n	80036fa <espAt_sendParams+0x18e>
		itoa(parameters[i], &argumentsBuffer[characterCounter], 10);
 8003666:	234a      	movs	r3, #74	@ 0x4a
 8003668:	001e      	movs	r6, r3
 800366a:	2138      	movs	r1, #56	@ 0x38
 800366c:	185b      	adds	r3, r3, r1
 800366e:	19db      	adds	r3, r3, r7
 8003670:	881a      	ldrh	r2, [r3, #0]
 8003672:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003674:	0092      	lsls	r2, r2, #2
 8003676:	58d3      	ldr	r3, [r2, r3]
 8003678:	0018      	movs	r0, r3
 800367a:	244c      	movs	r4, #76	@ 0x4c
 800367c:	1863      	adds	r3, r4, r1
 800367e:	19db      	adds	r3, r3, r7
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	2508      	movs	r5, #8
 8003684:	186a      	adds	r2, r5, r1
 8003686:	19d2      	adds	r2, r2, r7
 8003688:	18d3      	adds	r3, r2, r3
 800368a:	220a      	movs	r2, #10
 800368c:	0019      	movs	r1, r3
 800368e:	f000 ff6a 	bl	8004566 <itoa>
		characterCounter += strlen(&argumentsBuffer[characterCounter]) + 1;
 8003692:	2038      	movs	r0, #56	@ 0x38
 8003694:	1823      	adds	r3, r4, r0
 8003696:	19db      	adds	r3, r3, r7
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	182a      	adds	r2, r5, r0
 800369c:	19d2      	adds	r2, r2, r7
 800369e:	18d3      	adds	r3, r2, r3
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fc fd2f 	bl	8000104 <strlen>
 80036a6:	0003      	movs	r3, r0
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	0021      	movs	r1, r4
 80036ac:	2038      	movs	r0, #56	@ 0x38
 80036ae:	180b      	adds	r3, r1, r0
 80036b0:	19db      	adds	r3, r3, r7
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	18d3      	adds	r3, r2, r3
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	180b      	adds	r3, r1, r0
 80036ba:	19db      	adds	r3, r3, r7
 80036bc:	3201      	adds	r2, #1
 80036be:	801a      	strh	r2, [r3, #0]
		if (i < paramCount - 1)
 80036c0:	0033      	movs	r3, r6
 80036c2:	181b      	adds	r3, r3, r0
 80036c4:	19db      	adds	r3, r3, r7
 80036c6:	881a      	ldrh	r2, [r3, #0]
 80036c8:	2368      	movs	r3, #104	@ 0x68
 80036ca:	181b      	adds	r3, r3, r0
 80036cc:	19db      	adds	r3, r3, r7
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	429a      	cmp	r2, r3
 80036d4:	da08      	bge.n	80036e8 <espAt_sendParams+0x17c>
			argumentsBuffer[characterCounter - 1] = ','; //add comma only if NOT last parameter
 80036d6:	0002      	movs	r2, r0
 80036d8:	188b      	adds	r3, r1, r2
 80036da:	19db      	adds	r3, r3, r7
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	3b01      	subs	r3, #1
 80036e0:	18aa      	adds	r2, r5, r2
 80036e2:	19d2      	adds	r2, r2, r7
 80036e4:	212c      	movs	r1, #44	@ 0x2c
 80036e6:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < paramCount; i++) {
 80036e8:	214a      	movs	r1, #74	@ 0x4a
 80036ea:	2038      	movs	r0, #56	@ 0x38
 80036ec:	180b      	adds	r3, r1, r0
 80036ee:	19db      	adds	r3, r3, r7
 80036f0:	881a      	ldrh	r2, [r3, #0]
 80036f2:	180b      	adds	r3, r1, r0
 80036f4:	19db      	adds	r3, r3, r7
 80036f6:	3201      	adds	r2, #1
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	234a      	movs	r3, #74	@ 0x4a
 80036fc:	2638      	movs	r6, #56	@ 0x38
 80036fe:	199b      	adds	r3, r3, r6
 8003700:	19da      	adds	r2, r3, r7
 8003702:	2368      	movs	r3, #104	@ 0x68
 8003704:	199b      	adds	r3, r3, r6
 8003706:	19db      	adds	r3, r3, r7
 8003708:	8812      	ldrh	r2, [r2, #0]
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d3aa      	bcc.n	8003666 <espAt_sendParams+0xfa>
	}

	va_end(ap);

	//count buffer length
	uint16_t prefixLength = strlen(AT_PREFIX);
 8003710:	243e      	movs	r4, #62	@ 0x3e
 8003712:	19a3      	adds	r3, r4, r6
 8003714:	19db      	adds	r3, r3, r7
 8003716:	2203      	movs	r2, #3
 8003718:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 800371a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371c:	0018      	movs	r0, r3
 800371e:	f7fc fcf1 	bl	8000104 <strlen>
 8003722:	0002      	movs	r2, r0
 8003724:	253c      	movs	r5, #60	@ 0x3c
 8003726:	19ab      	adds	r3, r5, r6
 8003728:	19db      	adds	r3, r3, r7
 800372a:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 800372c:	213a      	movs	r1, #58	@ 0x3a
 800372e:	198b      	adds	r3, r1, r6
 8003730:	19db      	adds	r3, r3, r7
 8003732:	2201      	movs	r2, #1
 8003734:	801a      	strh	r2, [r3, #0]
	uint16_t parametersLength = --characterCounter;
 8003736:	224c      	movs	r2, #76	@ 0x4c
 8003738:	0030      	movs	r0, r6
 800373a:	1993      	adds	r3, r2, r6
 800373c:	19db      	adds	r3, r3, r7
 800373e:	0016      	movs	r6, r2
 8003740:	1812      	adds	r2, r2, r0
 8003742:	19d2      	adds	r2, r2, r7
 8003744:	8812      	ldrh	r2, [r2, #0]
 8003746:	3a01      	subs	r2, #1
 8003748:	801a      	strh	r2, [r3, #0]
 800374a:	2038      	movs	r0, #56	@ 0x38
 800374c:	2338      	movs	r3, #56	@ 0x38
 800374e:	18c2      	adds	r2, r0, r3
 8003750:	19d3      	adds	r3, r2, r7
 8003752:	0032      	movs	r2, r6
 8003754:	2638      	movs	r6, #56	@ 0x38
 8003756:	1992      	adds	r2, r2, r6
 8003758:	19d2      	adds	r2, r2, r7
 800375a:	8812      	ldrh	r2, [r2, #0]
 800375c:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 800375e:	2336      	movs	r3, #54	@ 0x36
 8003760:	001e      	movs	r6, r3
 8003762:	2238      	movs	r2, #56	@ 0x38
 8003764:	189a      	adds	r2, r3, r2
 8003766:	19d3      	adds	r3, r2, r7
 8003768:	2202      	movs	r2, #2
 800376a:	801a      	strh	r2, [r3, #0]

	//create master buffer and clear it
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 800376c:	2338      	movs	r3, #56	@ 0x38
 800376e:	18e2      	adds	r2, r4, r3
 8003770:	19d2      	adds	r2, r2, r7
 8003772:	18eb      	adds	r3, r5, r3
 8003774:	19db      	adds	r3, r3, r7
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	18d3      	adds	r3, r2, r3
 800377c:	b29a      	uxth	r2, r3
 800377e:	2338      	movs	r3, #56	@ 0x38
 8003780:	18c9      	adds	r1, r1, r3
 8003782:	19cb      	adds	r3, r1, r7
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	18d3      	adds	r3, r2, r3
 8003788:	b29a      	uxth	r2, r3
			+ parametersLength + endingLength;
 800378a:	2338      	movs	r3, #56	@ 0x38
 800378c:	18c1      	adds	r1, r0, r3
 800378e:	19cb      	adds	r3, r1, r7
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8003796:	2234      	movs	r2, #52	@ 0x34
 8003798:	0010      	movs	r0, r2
 800379a:	2338      	movs	r3, #56	@ 0x38
 800379c:	18d2      	adds	r2, r2, r3
 800379e:	19d3      	adds	r3, r2, r7
 80037a0:	0032      	movs	r2, r6
 80037a2:	2638      	movs	r6, #56	@ 0x38
 80037a4:	1992      	adds	r2, r2, r6
 80037a6:	19d2      	adds	r2, r2, r7
 80037a8:	8812      	ldrh	r2, [r2, #0]
 80037aa:	188a      	adds	r2, r1, r2
 80037ac:	801a      	strh	r2, [r3, #0]
	char buffer[bufferSize];
 80037ae:	0002      	movs	r2, r0
 80037b0:	1993      	adds	r3, r2, r6
 80037b2:	19db      	adds	r3, r3, r7
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	001a      	movs	r2, r3
 80037b8:	3a01      	subs	r2, #1
 80037ba:	66ba      	str	r2, [r7, #104]	@ 0x68
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	60fa      	str	r2, [r7, #12]
 80037c2:	68b8      	ldr	r0, [r7, #8]
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	0006      	movs	r6, r0
 80037c8:	0f72      	lsrs	r2, r6, #29
 80037ca:	000e      	movs	r6, r1
 80037cc:	00f6      	lsls	r6, r6, #3
 80037ce:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80037d0:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 80037d2:	4316      	orrs	r6, r2
 80037d4:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80037d6:	0006      	movs	r6, r0
 80037d8:	00f6      	lsls	r6, r6, #3
 80037da:	62be      	str	r6, [r7, #40]	@ 0x28
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	6838      	ldr	r0, [r7, #0]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	0006      	movs	r6, r0
 80037e8:	0f72      	lsrs	r2, r6, #29
 80037ea:	000e      	movs	r6, r1
 80037ec:	00f6      	lsls	r6, r6, #3
 80037ee:	627e      	str	r6, [r7, #36]	@ 0x24
 80037f0:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 80037f2:	4316      	orrs	r6, r2
 80037f4:	627e      	str	r6, [r7, #36]	@ 0x24
 80037f6:	0006      	movs	r6, r0
 80037f8:	00f6      	lsls	r6, r6, #3
 80037fa:	623e      	str	r6, [r7, #32]
 80037fc:	3307      	adds	r3, #7
 80037fe:	08db      	lsrs	r3, r3, #3
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	466e      	mov	r6, sp
 8003804:	1af6      	subs	r6, r6, r3
 8003806:	46b5      	mov	sp, r6
 8003808:	466b      	mov	r3, sp
 800380a:	3300      	adds	r3, #0
 800380c:	667b      	str	r3, [r7, #100]	@ 0x64
	memset(buffer, ' ', bufferSize);
 800380e:	2234      	movs	r2, #52	@ 0x34
 8003810:	2638      	movs	r6, #56	@ 0x38
 8003812:	1993      	adds	r3, r2, r6
 8003814:	19db      	adds	r3, r3, r7
 8003816:	881a      	ldrh	r2, [r3, #0]
 8003818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800381a:	2120      	movs	r1, #32
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fedb 	bl	80045d8 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8003822:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003824:	19a3      	adds	r3, r4, r6
 8003826:	19db      	adds	r3, r3, r7
 8003828:	881a      	ldrh	r2, [r3, #0]
 800382a:	4b39      	ldr	r3, [pc, #228]	@ (8003910 <espAt_sendParams+0x3a4>)
 800382c:	0019      	movs	r1, r3
 800382e:	f000 feff 	bl	8004630 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8003832:	0031      	movs	r1, r6
 8003834:	19a3      	adds	r3, r4, r6
 8003836:	19db      	adds	r3, r3, r7
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800383c:	18d0      	adds	r0, r2, r3
 800383e:	000e      	movs	r6, r1
 8003840:	186b      	adds	r3, r5, r1
 8003842:	19db      	adds	r3, r3, r7
 8003844:	881a      	ldrh	r2, [r3, #0]
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	0019      	movs	r1, r3
 800384a:	f000 fef1 	bl	8004630 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 800384e:	0031      	movs	r1, r6
 8003850:	1863      	adds	r3, r4, r1
 8003852:	19db      	adds	r3, r3, r7
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	1868      	adds	r0, r5, r1
 8003858:	19c3      	adds	r3, r0, r7
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	18d3      	adds	r3, r2, r3
 800385e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003860:	18d0      	adds	r0, r2, r3
 8003862:	213a      	movs	r1, #58	@ 0x3a
 8003864:	000e      	movs	r6, r1
 8003866:	2338      	movs	r3, #56	@ 0x38
 8003868:	18ca      	adds	r2, r1, r3
 800386a:	19d3      	adds	r3, r2, r7
 800386c:	881a      	ldrh	r2, [r3, #0]
 800386e:	4b29      	ldr	r3, [pc, #164]	@ (8003914 <espAt_sendParams+0x3a8>)
 8003870:	0019      	movs	r1, r3
 8003872:	f000 fedd 	bl	8004630 <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8003876:	2038      	movs	r0, #56	@ 0x38
 8003878:	1823      	adds	r3, r4, r0
 800387a:	19db      	adds	r3, r3, r7
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	182b      	adds	r3, r5, r0
 8003880:	19db      	adds	r3, r3, r7
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	18d2      	adds	r2, r2, r3
 8003886:	0031      	movs	r1, r6
 8003888:	0006      	movs	r6, r0
 800388a:	180b      	adds	r3, r1, r0
 800388c:	19db      	adds	r3, r3, r7
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003894:	18d0      	adds	r0, r2, r3
 8003896:	2338      	movs	r3, #56	@ 0x38
 8003898:	0031      	movs	r1, r6
 800389a:	185b      	adds	r3, r3, r1
 800389c:	19db      	adds	r3, r3, r7
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	2608      	movs	r6, #8
 80038a2:	1873      	adds	r3, r6, r1
 80038a4:	19db      	adds	r3, r3, r7
 80038a6:	0019      	movs	r1, r3
 80038a8:	f000 fec2 	bl	8004630 <memcpy>
			argumentsBuffer, parametersLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 80038ac:	2038      	movs	r0, #56	@ 0x38
 80038ae:	1823      	adds	r3, r4, r0
 80038b0:	19db      	adds	r3, r3, r7
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	182b      	adds	r3, r5, r0
 80038b6:	19db      	adds	r3, r3, r7
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	18d2      	adds	r2, r2, r3
 80038bc:	213a      	movs	r1, #58	@ 0x3a
 80038be:	180b      	adds	r3, r1, r0
 80038c0:	19db      	adds	r3, r3, r7
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	18d2      	adds	r2, r2, r3
					+ parametersLength], AT_ENDING, endingLength);
 80038c6:	2338      	movs	r3, #56	@ 0x38
 80038c8:	0001      	movs	r1, r0
 80038ca:	185b      	adds	r3, r3, r1
 80038cc:	19db      	adds	r3, r3, r7
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 80038d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80038d4:	18d0      	adds	r0, r2, r3
	memcpy(
 80038d6:	2336      	movs	r3, #54	@ 0x36
 80038d8:	000c      	movs	r4, r1
 80038da:	185b      	adds	r3, r3, r1
 80038dc:	19db      	adds	r3, r3, r7
 80038de:	881a      	ldrh	r2, [r3, #0]
 80038e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003918 <espAt_sendParams+0x3ac>)
 80038e2:	0019      	movs	r1, r3
 80038e4:	f000 fea4 	bl	8004630 <memcpy>

	return uartSend(&radio->espUart, buffer, bufferSize);
 80038e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80038ea:	2234      	movs	r2, #52	@ 0x34
 80038ec:	1913      	adds	r3, r2, r4
 80038ee:	19db      	adds	r3, r3, r7
 80038f0:	881a      	ldrh	r2, [r3, #0]
 80038f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038f4:	0019      	movs	r1, r3
 80038f6:	f7ff fdff 	bl	80034f8 <uartSend>
 80038fa:	0003      	movs	r3, r0
 80038fc:	46c5      	mov	sp, r8

}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b022      	add	sp, #136	@ 0x88
 8003904:	bc80      	pop	{r7}
 8003906:	46b8      	mov	r8, r7
 8003908:	bcf0      	pop	{r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	b002      	add	sp, #8
 800390e:	4718      	bx	r3
 8003910:	0800465c 	.word	0x0800465c
 8003914:	08004664 	.word	0x08004664
 8003918:	08004660 	.word	0x08004660

0800391c <espAt_sendString>:
 * @retval: ESPAT state- OK if sent succesfully.
 * 			!NOTE: This parameter does not say whether and what ESP returns
 * 			in response to the command!
 */
espat_state_t espAt_sendString(espat_radio_t *radio, char *command,
		char *string) {
 800391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391e:	46c6      	mov	lr, r8
 8003920:	b500      	push	{lr}
 8003922:	b090      	sub	sp, #64	@ 0x40
 8003924:	af00      	add	r7, sp, #0
 8003926:	6278      	str	r0, [r7, #36]	@ 0x24
 8003928:	6239      	str	r1, [r7, #32]
 800392a:	61fa      	str	r2, [r7, #28]
 800392c:	466b      	mov	r3, sp
 800392e:	4698      	mov	r8, r3

	//check if command and string are valid
	if (command == NULL || string == NULL)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <espAt_sendString+0x20>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <espAt_sendString+0x24>
		return ESPAT_STATE_ERR;
 800393c:	2301      	movs	r3, #1
 800393e:	e139      	b.n	8003bb4 <espAt_sendString+0x298>

	uint16_t prefixLength = strlen(AT_PREFIX);
 8003940:	2326      	movs	r3, #38	@ 0x26
 8003942:	2618      	movs	r6, #24
 8003944:	199b      	adds	r3, r3, r6
 8003946:	19db      	adds	r3, r3, r7
 8003948:	2203      	movs	r2, #3
 800394a:	801a      	strh	r2, [r3, #0]
	uint16_t commandLength = strlen(command);
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	0018      	movs	r0, r3
 8003950:	f7fc fbd8 	bl	8000104 <strlen>
 8003954:	0002      	movs	r2, r0
 8003956:	2124      	movs	r1, #36	@ 0x24
 8003958:	198b      	adds	r3, r1, r6
 800395a:	19db      	adds	r3, r3, r7
 800395c:	801a      	strh	r2, [r3, #0]
	uint16_t assignmentLength = strlen(AT_ASSIGNMENT);
 800395e:	2222      	movs	r2, #34	@ 0x22
 8003960:	1993      	adds	r3, r2, r6
 8003962:	19db      	adds	r3, r3, r7
 8003964:	2201      	movs	r2, #1
 8003966:	801a      	strh	r2, [r3, #0]
	uint16_t quoteLength = strlen(AT_STRING_QUOTE_MARK);
 8003968:	2220      	movs	r2, #32
 800396a:	1993      	adds	r3, r2, r6
 800396c:	19db      	adds	r3, r3, r7
 800396e:	2201      	movs	r2, #1
 8003970:	801a      	strh	r2, [r3, #0]
	uint16_t stringLength = strlen(string);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	0018      	movs	r0, r3
 8003976:	f7fc fbc5 	bl	8000104 <strlen>
 800397a:	0002      	movs	r2, r0
 800397c:	231e      	movs	r3, #30
 800397e:	0031      	movs	r1, r6
 8003980:	185b      	adds	r3, r3, r1
 8003982:	19db      	adds	r3, r3, r7
 8003984:	801a      	strh	r2, [r3, #0]
	uint16_t endingLength = strlen(AT_ENDING);
 8003986:	221c      	movs	r2, #28
 8003988:	0016      	movs	r6, r2
 800398a:	1853      	adds	r3, r2, r1
 800398c:	19db      	adds	r3, r3, r7
 800398e:	2202      	movs	r2, #2
 8003990:	801a      	strh	r2, [r3, #0]

	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 8003992:	2326      	movs	r3, #38	@ 0x26
 8003994:	0008      	movs	r0, r1
 8003996:	185b      	adds	r3, r3, r1
 8003998:	19da      	adds	r2, r3, r7
 800399a:	2124      	movs	r1, #36	@ 0x24
 800399c:	180b      	adds	r3, r1, r0
 800399e:	19db      	adds	r3, r3, r7
 80039a0:	8812      	ldrh	r2, [r2, #0]
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	18d3      	adds	r3, r2, r3
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	2022      	movs	r0, #34	@ 0x22
 80039aa:	2118      	movs	r1, #24
 80039ac:	1843      	adds	r3, r0, r1
 80039ae:	19db      	adds	r3, r3, r7
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	18d3      	adds	r3, r2, r3
 80039b4:	b29a      	uxth	r2, r3
			+ (quoteLength * 2) + stringLength + endingLength;
 80039b6:	2020      	movs	r0, #32
 80039b8:	1840      	adds	r0, r0, r1
 80039ba:	19c3      	adds	r3, r0, r7
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	18db      	adds	r3, r3, r3
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	18d3      	adds	r3, r2, r3
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	211e      	movs	r1, #30
 80039c8:	2318      	movs	r3, #24
 80039ca:	18c9      	adds	r1, r1, r3
 80039cc:	19cb      	adds	r3, r1, r7
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	18d3      	adds	r3, r2, r3
 80039d2:	b299      	uxth	r1, r3
	uint16_t bufferSize = prefixLength + commandLength + assignmentLength
 80039d4:	201a      	movs	r0, #26
 80039d6:	2318      	movs	r3, #24
 80039d8:	18c2      	adds	r2, r0, r3
 80039da:	19d3      	adds	r3, r2, r7
 80039dc:	0032      	movs	r2, r6
 80039de:	2618      	movs	r6, #24
 80039e0:	1992      	adds	r2, r2, r6
 80039e2:	19d2      	adds	r2, r2, r7
 80039e4:	8812      	ldrh	r2, [r2, #0]
 80039e6:	188a      	adds	r2, r1, r2
 80039e8:	801a      	strh	r2, [r3, #0]

	//create and clear buffer
	char buffer[bufferSize];
 80039ea:	1983      	adds	r3, r0, r6
 80039ec:	19db      	adds	r3, r3, r7
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	001a      	movs	r2, r3
 80039f2:	3a01      	subs	r2, #1
 80039f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	2200      	movs	r2, #0
 80039fa:	60fa      	str	r2, [r7, #12]
 80039fc:	68b8      	ldr	r0, [r7, #8]
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	0006      	movs	r6, r0
 8003a02:	0f72      	lsrs	r2, r6, #29
 8003a04:	000e      	movs	r6, r1
 8003a06:	00f6      	lsls	r6, r6, #3
 8003a08:	617e      	str	r6, [r7, #20]
 8003a0a:	697e      	ldr	r6, [r7, #20]
 8003a0c:	4316      	orrs	r6, r2
 8003a0e:	617e      	str	r6, [r7, #20]
 8003a10:	0006      	movs	r6, r0
 8003a12:	00f6      	lsls	r6, r6, #3
 8003a14:	613e      	str	r6, [r7, #16]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	6838      	ldr	r0, [r7, #0]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	0006      	movs	r6, r0
 8003a22:	0f72      	lsrs	r2, r6, #29
 8003a24:	000e      	movs	r6, r1
 8003a26:	00f5      	lsls	r5, r6, #3
 8003a28:	4315      	orrs	r5, r2
 8003a2a:	0006      	movs	r6, r0
 8003a2c:	00f4      	lsls	r4, r6, #3
 8003a2e:	3307      	adds	r3, #7
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	466e      	mov	r6, sp
 8003a36:	1af6      	subs	r6, r6, r3
 8003a38:	46b5      	mov	sp, r6
 8003a3a:	466b      	mov	r3, sp
 8003a3c:	3300      	adds	r3, #0
 8003a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(buffer, ' ', bufferSize);
 8003a40:	221a      	movs	r2, #26
 8003a42:	2618      	movs	r6, #24
 8003a44:	1993      	adds	r3, r2, r6
 8003a46:	19db      	adds	r3, r3, r7
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 fdc2 	bl	80045d8 <memset>

	//build command
	memcpy(&buffer[0], AT_PREFIX, prefixLength);
 8003a54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a56:	2426      	movs	r4, #38	@ 0x26
 8003a58:	19a3      	adds	r3, r4, r6
 8003a5a:	19db      	adds	r3, r3, r7
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	4b59      	ldr	r3, [pc, #356]	@ (8003bc4 <espAt_sendString+0x2a8>)
 8003a60:	0019      	movs	r1, r3
 8003a62:	f000 fde5 	bl	8004630 <memcpy>
	memcpy(&buffer[prefixLength], command, commandLength);
 8003a66:	19a3      	adds	r3, r4, r6
 8003a68:	19db      	adds	r3, r3, r7
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a6e:	18d0      	adds	r0, r2, r3
 8003a70:	2524      	movs	r5, #36	@ 0x24
 8003a72:	19ab      	adds	r3, r5, r6
 8003a74:	19db      	adds	r3, r3, r7
 8003a76:	881a      	ldrh	r2, [r3, #0]
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	f000 fdd8 	bl	8004630 <memcpy>
	memcpy(&buffer[prefixLength + commandLength], AT_ASSIGNMENT,
 8003a80:	0031      	movs	r1, r6
 8003a82:	1863      	adds	r3, r4, r1
 8003a84:	19db      	adds	r3, r3, r7
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	186b      	adds	r3, r5, r1
 8003a8a:	19db      	adds	r3, r3, r7
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	18d3      	adds	r3, r2, r3
 8003a90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a92:	18d0      	adds	r0, r2, r3
 8003a94:	2222      	movs	r2, #34	@ 0x22
 8003a96:	0016      	movs	r6, r2
 8003a98:	1853      	adds	r3, r2, r1
 8003a9a:	19db      	adds	r3, r3, r7
 8003a9c:	881a      	ldrh	r2, [r3, #0]
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc8 <espAt_sendString+0x2ac>)
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	f000 fdc5 	bl	8004630 <memcpy>
			assignmentLength);
	memcpy(&buffer[prefixLength + commandLength + assignmentLength],
 8003aa6:	2118      	movs	r1, #24
 8003aa8:	1863      	adds	r3, r4, r1
 8003aaa:	19db      	adds	r3, r3, r7
 8003aac:	881a      	ldrh	r2, [r3, #0]
 8003aae:	186b      	adds	r3, r5, r1
 8003ab0:	19db      	adds	r3, r3, r7
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	18d2      	adds	r2, r2, r3
 8003ab6:	0030      	movs	r0, r6
 8003ab8:	1843      	adds	r3, r0, r1
 8003aba:	19db      	adds	r3, r3, r7
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ac2:	18d0      	adds	r0, r2, r3
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	001e      	movs	r6, r3
 8003ac8:	185b      	adds	r3, r3, r1
 8003aca:	19db      	adds	r3, r3, r7
 8003acc:	881a      	ldrh	r2, [r3, #0]
 8003ace:	4b3f      	ldr	r3, [pc, #252]	@ (8003bcc <espAt_sendString+0x2b0>)
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	f000 fdad 	bl	8004630 <memcpy>
	AT_STRING_QUOTE_MARK, quoteLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8003ad6:	2118      	movs	r1, #24
 8003ad8:	1863      	adds	r3, r4, r1
 8003ada:	19db      	adds	r3, r3, r7
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	186b      	adds	r3, r5, r1
 8003ae0:	19db      	adds	r3, r3, r7
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	18d2      	adds	r2, r2, r3
 8003ae6:	2022      	movs	r0, #34	@ 0x22
 8003ae8:	1843      	adds	r3, r0, r1
 8003aea:	19db      	adds	r3, r3, r7
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	18d2      	adds	r2, r2, r3
					+ quoteLength], string, stringLength);
 8003af0:	0033      	movs	r3, r6
 8003af2:	1858      	adds	r0, r3, r1
 8003af4:	19c3      	adds	r3, r0, r7
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8003afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003afc:	18d0      	adds	r0, r2, r3
	memcpy(
 8003afe:	211e      	movs	r1, #30
 8003b00:	000e      	movs	r6, r1
 8003b02:	2318      	movs	r3, #24
 8003b04:	18ca      	adds	r2, r1, r3
 8003b06:	19d3      	adds	r3, r2, r7
 8003b08:	881a      	ldrh	r2, [r3, #0]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	f000 fd8f 	bl	8004630 <memcpy>
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8003b12:	2118      	movs	r1, #24
 8003b14:	1863      	adds	r3, r4, r1
 8003b16:	19db      	adds	r3, r3, r7
 8003b18:	881a      	ldrh	r2, [r3, #0]
 8003b1a:	186b      	adds	r3, r5, r1
 8003b1c:	19db      	adds	r3, r3, r7
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	18d2      	adds	r2, r2, r3
 8003b22:	2022      	movs	r0, #34	@ 0x22
 8003b24:	1843      	adds	r3, r0, r1
 8003b26:	19db      	adds	r3, r3, r7
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	18d2      	adds	r2, r2, r3
					+ quoteLength + stringLength], AT_STRING_QUOTE_MARK,
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	0008      	movs	r0, r1
 8003b30:	185b      	adds	r3, r3, r1
 8003b32:	19db      	adds	r3, r3, r7
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	18d2      	adds	r2, r2, r3
 8003b38:	0031      	movs	r1, r6
 8003b3a:	180e      	adds	r6, r1, r0
 8003b3c:	19f3      	adds	r3, r6, r7
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8003b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b44:	18d0      	adds	r0, r2, r3
	memcpy(
 8003b46:	000e      	movs	r6, r1
 8003b48:	2318      	movs	r3, #24
 8003b4a:	18ca      	adds	r2, r1, r3
 8003b4c:	19d3      	adds	r3, r2, r7
 8003b4e:	881a      	ldrh	r2, [r3, #0]
 8003b50:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <espAt_sendString+0x2b0>)
 8003b52:	0019      	movs	r1, r3
 8003b54:	f000 fd6c 	bl	8004630 <memcpy>
			stringLength);
	memcpy(
			&buffer[prefixLength + commandLength + assignmentLength
 8003b58:	2118      	movs	r1, #24
 8003b5a:	1863      	adds	r3, r4, r1
 8003b5c:	19db      	adds	r3, r3, r7
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	186b      	adds	r3, r5, r1
 8003b62:	19db      	adds	r3, r3, r7
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	18d2      	adds	r2, r2, r3
 8003b68:	2022      	movs	r0, #34	@ 0x22
 8003b6a:	1843      	adds	r3, r0, r1
 8003b6c:	19db      	adds	r3, r3, r7
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	18d2      	adds	r2, r2, r3
					+ (quoteLength * 2) + stringLength], AT_ENDING,
 8003b72:	2320      	movs	r3, #32
 8003b74:	0008      	movs	r0, r1
 8003b76:	185b      	adds	r3, r3, r1
 8003b78:	19db      	adds	r3, r3, r7
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	18d2      	adds	r2, r2, r3
 8003b80:	0031      	movs	r1, r6
 8003b82:	0004      	movs	r4, r0
 8003b84:	180b      	adds	r3, r1, r0
 8003b86:	19db      	adds	r3, r3, r7
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	18d3      	adds	r3, r2, r3
			&buffer[prefixLength + commandLength + assignmentLength
 8003b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b8e:	18d0      	adds	r0, r2, r3
	memcpy(
 8003b90:	231c      	movs	r3, #28
 8003b92:	191b      	adds	r3, r3, r4
 8003b94:	19db      	adds	r3, r3, r7
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <espAt_sendString+0x2b4>)
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	f000 fd48 	bl	8004630 <memcpy>
			endingLength);

	return uartSend(&radio->espUart, buffer, bufferSize);
 8003ba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ba2:	221a      	movs	r2, #26
 8003ba4:	1913      	adds	r3, r2, r4
 8003ba6:	19db      	adds	r3, r3, r7
 8003ba8:	881a      	ldrh	r2, [r3, #0]
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	0019      	movs	r1, r3
 8003bae:	f7ff fca3 	bl	80034f8 <uartSend>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	46c5      	mov	sp, r8

}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b010      	add	sp, #64	@ 0x40
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	46b8      	mov	r8, r7
 8003bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	0800465c 	.word	0x0800465c
 8003bc8:	08004664 	.word	0x08004664
 8003bcc:	08004668 	.word	0x08004668
 8003bd0:	08004660 	.word	0x08004660

08003bd4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b089      	sub	sp, #36	@ 0x24
 8003bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bda:	240c      	movs	r4, #12
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	0018      	movs	r0, r3
 8003be0:	2314      	movs	r3, #20
 8003be2:	001a      	movs	r2, r3
 8003be4:	2100      	movs	r1, #0
 8003be6:	f000 fcf7 	bl	80045d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bea:	4b32      	ldr	r3, [pc, #200]	@ (8003cb4 <MX_GPIO_Init+0xe0>)
 8003bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bee:	4b31      	ldr	r3, [pc, #196]	@ (8003cb4 <MX_GPIO_Init+0xe0>)
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb4 <MX_GPIO_Init+0xe0>)
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c02:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb4 <MX_GPIO_Init+0xe0>)
 8003c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c06:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb4 <MX_GPIO_Init+0xe0>)
 8003c08:	2101      	movs	r1, #1
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c0e:	4b29      	ldr	r3, [pc, #164]	@ (8003cb4 <MX_GPIO_Init+0xe0>)
 8003c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c12:	2201      	movs	r2, #1
 8003c14:	4013      	ands	r3, r2
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1a:	4b26      	ldr	r3, [pc, #152]	@ (8003cb4 <MX_GPIO_Init+0xe0>)
 8003c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c1e:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <MX_GPIO_Init+0xe0>)
 8003c20:	2102      	movs	r1, #2
 8003c22:	430a      	orrs	r2, r1
 8003c24:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c26:	4b23      	ldr	r3, [pc, #140]	@ (8003cb4 <MX_GPIO_Init+0xe0>)
 8003c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003c32:	23a0      	movs	r3, #160	@ 0xa0
 8003c34:	05db      	lsls	r3, r3, #23
 8003c36:	2200      	movs	r2, #0
 8003c38:	2120      	movs	r1, #32
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f7fc ffd5 	bl	8000bea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8003c40:	193b      	adds	r3, r7, r4
 8003c42:	2280      	movs	r2, #128	@ 0x80
 8003c44:	0192      	lsls	r2, r2, #6
 8003c46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c48:	193b      	adds	r3, r7, r4
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	193b      	adds	r3, r7, r4
 8003c50:	2200      	movs	r2, #0
 8003c52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	4a18      	ldr	r2, [pc, #96]	@ (8003cb8 <MX_GPIO_Init+0xe4>)
 8003c58:	0019      	movs	r1, r3
 8003c5a:	0010      	movs	r0, r2
 8003c5c:	f7fc fe44 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8003c60:	193b      	adds	r3, r7, r4
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c66:	193b      	adds	r3, r7, r4
 8003c68:	2288      	movs	r2, #136	@ 0x88
 8003c6a:	0352      	lsls	r2, r2, #13
 8003c6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8003c74:	193a      	adds	r2, r7, r4
 8003c76:	23a0      	movs	r3, #160	@ 0xa0
 8003c78:	05db      	lsls	r3, r3, #23
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7fc fe33 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003c82:	0021      	movs	r1, r4
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	2220      	movs	r2, #32
 8003c88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003c9c:	187a      	adds	r2, r7, r1
 8003c9e:	23a0      	movs	r3, #160	@ 0xa0
 8003ca0:	05db      	lsls	r3, r3, #23
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7fc fe1f 	bl	80008e8 <HAL_GPIO_Init>

}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b009      	add	sp, #36	@ 0x24
 8003cb0:	bd90      	pop	{r4, r7, pc}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	50000800 	.word	0x50000800

08003cbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <MX_I2C1_Init+0x78>)
 8003cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d38 <MX_I2C1_Init+0x7c>)
 8003cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003ccc:	4b18      	ldr	r3, [pc, #96]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cd2:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cd8:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003cde:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ce4:	4b12      	ldr	r3, [pc, #72]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cea:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7fc ff93 	bl	8000c24 <HAL_I2C_Init>
 8003cfe:	1e03      	subs	r3, r0, #0
 8003d00:	d001      	beq.n	8003d06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d02:	f000 fa61 	bl	80041c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d06:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003d08:	2100      	movs	r1, #0
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f7fd fd8e 	bl	800182c <HAL_I2CEx_ConfigAnalogFilter>
 8003d10:	1e03      	subs	r3, r0, #0
 8003d12:	d001      	beq.n	8003d18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d14:	f000 fa58 	bl	80041c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <MX_I2C1_Init+0x74>)
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7fd fdd1 	bl	80018c4 <HAL_I2CEx_ConfigDigitalFilter>
 8003d22:	1e03      	subs	r3, r0, #0
 8003d24:	d001      	beq.n	8003d2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003d26:	f000 fa4f 	bl	80041c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	2000002c 	.word	0x2000002c
 8003d34:	40005400 	.word	0x40005400
 8003d38:	00503d58 	.word	0x00503d58

08003d3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b097      	sub	sp, #92	@ 0x5c
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	2344      	movs	r3, #68	@ 0x44
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	0018      	movs	r0, r3
 8003d4a:	2314      	movs	r3, #20
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	2100      	movs	r1, #0
 8003d50:	f000 fc42 	bl	80045d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d54:	2410      	movs	r4, #16
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	0018      	movs	r0, r3
 8003d5a:	2334      	movs	r3, #52	@ 0x34
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	2100      	movs	r1, #0
 8003d60:	f000 fc3a 	bl	80045d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a22      	ldr	r2, [pc, #136]	@ (8003df4 <HAL_I2C_MspInit+0xb8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d13e      	bne.n	8003dec <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003d6e:	193b      	adds	r3, r7, r4
 8003d70:	2220      	movs	r2, #32
 8003d72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003d74:	193b      	adds	r3, r7, r4
 8003d76:	2200      	movs	r2, #0
 8003d78:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7fe fafd 	bl	800237c <HAL_RCCEx_PeriphCLKConfig>
 8003d82:	1e03      	subs	r3, r0, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003d86:	f000 fa1f 	bl	80041c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <HAL_I2C_MspInit+0xbc>)
 8003d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003df8 <HAL_I2C_MspInit+0xbc>)
 8003d90:	2102      	movs	r1, #2
 8003d92:	430a      	orrs	r2, r1
 8003d94:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d96:	4b18      	ldr	r3, [pc, #96]	@ (8003df8 <HAL_I2C_MspInit+0xbc>)
 8003d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003da2:	2144      	movs	r1, #68	@ 0x44
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	22c0      	movs	r2, #192	@ 0xc0
 8003da8:	0092      	lsls	r2, r2, #2
 8003daa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2212      	movs	r2, #18
 8003db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db8:	187b      	adds	r3, r7, r1
 8003dba:	2200      	movs	r2, #0
 8003dbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	2206      	movs	r2, #6
 8003dc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003dfc <HAL_I2C_MspInit+0xc0>)
 8003dc8:	0019      	movs	r1, r3
 8003dca:	0010      	movs	r0, r2
 8003dcc:	f7fc fd8c 	bl	80008e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dd0:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <HAL_I2C_MspInit+0xbc>)
 8003dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dd4:	4b08      	ldr	r3, [pc, #32]	@ (8003df8 <HAL_I2C_MspInit+0xbc>)
 8003dd6:	2180      	movs	r1, #128	@ 0x80
 8003dd8:	0389      	lsls	r1, r1, #14
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003dde:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <HAL_I2C_MspInit+0xbc>)
 8003de0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	039b      	lsls	r3, r3, #14
 8003de6:	4013      	ands	r3, r2
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003dec:	46c0      	nop			@ (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b017      	add	sp, #92	@ 0x5c
 8003df2:	bd90      	pop	{r4, r7, pc}
 8003df4:	40005400 	.word	0x40005400
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	50000400 	.word	0x50000400

08003e00 <i2cSend>:
/*
 * uart send/receive functions. fill it by hardware-specific uart send/receive functions
 * port
 */
lsm6ds_state_t i2cSend(lsm6ds_i2cInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	b08b      	sub	sp, #44	@ 0x2c
 8003e04:	af04      	add	r7, sp, #16
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	0008      	movs	r0, r1
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	260a      	movs	r6, #10
 8003e10:	19bb      	adds	r3, r7, r6
 8003e12:	1c02      	adds	r2, r0, #0
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	2508      	movs	r5, #8
 8003e18:	197b      	adds	r3, r7, r5
 8003e1a:	1c0a      	adds	r2, r1, #0
 8003e1c:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Write(i2c->i2c, devAddr, memAddr,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2117      	movs	r1, #23
 8003e2c:	187c      	adds	r4, r7, r1
 8003e2e:	1979      	adds	r1, r7, r5
 8003e30:	880d      	ldrh	r5, [r1, #0]
 8003e32:	19b9      	adds	r1, r7, r6
 8003e34:	8809      	ldrh	r1, [r1, #0]
 8003e36:	9302      	str	r3, [sp, #8]
 8003e38:	9201      	str	r2, [sp, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	002a      	movs	r2, r5
 8003e42:	f7fc ff95 	bl	8000d70 <HAL_I2C_Mem_Write>
 8003e46:	0003      	movs	r3, r0
 8003e48:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->sendTimeout);

	if (state == HAL_OK)
 8003e4a:	2117      	movs	r1, #23
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <i2cSend+0x58>
		return LSM6DS_STATE_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e007      	b.n	8003e68 <i2cSend+0x68>
	else if (state == HAL_TIMEOUT)
 8003e58:	2317      	movs	r3, #23
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d101      	bne.n	8003e66 <i2cSend+0x66>
		return LSM6DS_STATE_TIMEOUT;
 8003e62:	2302      	movs	r3, #2
 8003e64:	e000      	b.n	8003e68 <i2cSend+0x68>
	else
		return LSM6DS_STATE_ERR;
 8003e66:	2301      	movs	r3, #1
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b007      	add	sp, #28
 8003e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e70 <i2cReceive>:

//port
lsm6ds_state_t i2cReceive(lsm6ds_i2cInstance_t *i2c, uint16_t devAddr,
		uint16_t memAddr, uint8_t *data, uint32_t size) {
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b08b      	sub	sp, #44	@ 0x2c
 8003e74:	af04      	add	r7, sp, #16
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	0008      	movs	r0, r1
 8003e7a:	0011      	movs	r1, r2
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	260a      	movs	r6, #10
 8003e80:	19bb      	adds	r3, r7, r6
 8003e82:	1c02      	adds	r2, r0, #0
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	2508      	movs	r5, #8
 8003e88:	197b      	adds	r3, r7, r5
 8003e8a:	1c0a      	adds	r2, r1, #0
 8003e8c:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef state = HAL_I2C_Mem_Read(i2c->i2c, devAddr, memAddr,
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2117      	movs	r1, #23
 8003e9c:	187c      	adds	r4, r7, r1
 8003e9e:	1979      	adds	r1, r7, r5
 8003ea0:	880d      	ldrh	r5, [r1, #0]
 8003ea2:	19b9      	adds	r1, r7, r6
 8003ea4:	8809      	ldrh	r1, [r1, #0]
 8003ea6:	9302      	str	r3, [sp, #8]
 8003ea8:	9201      	str	r2, [sp, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2301      	movs	r3, #1
 8003eb0:	002a      	movs	r2, r5
 8003eb2:	f7fd f88b 	bl	8000fcc <HAL_I2C_Mem_Read>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	7023      	strb	r3, [r4, #0]
	LSM6DS_REGISTER_ADDR_LENGTH, data, size, i2c->receiveTimeout);

	if (state == HAL_OK)
 8003eba:	2117      	movs	r1, #23
 8003ebc:	187b      	adds	r3, r7, r1
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <i2cReceive+0x58>
		return LSM6DS_STATE_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e007      	b.n	8003ed8 <i2cReceive+0x68>
	else if (state == HAL_TIMEOUT)
 8003ec8:	2317      	movs	r3, #23
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d101      	bne.n	8003ed6 <i2cReceive+0x66>
		return LSM6DS_STATE_TIMEOUT;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e000      	b.n	8003ed8 <i2cReceive+0x68>
	else
		return LSM6DS_STATE_ERR;
 8003ed6:	2301      	movs	r3, #1
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b007      	add	sp, #28
 8003ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ee0 <modifyReg>:
 * @param: register address
 * @param: bitmask
 * @param: value
 */
lsm6ds_state_t modifyReg(lsm6ds_sensor_t *sensor, uint16_t regAddr,
		uint8_t bitmask, uint16_t value) {
 8003ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee2:	b089      	sub	sp, #36	@ 0x24
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	000c      	movs	r4, r1
 8003eea:	0010      	movs	r0, r2
 8003eec:	0019      	movs	r1, r3
 8003eee:	230a      	movs	r3, #10
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	1c22      	adds	r2, r4, #0
 8003ef4:	801a      	strh	r2, [r3, #0]
 8003ef6:	2209      	movs	r2, #9
 8003ef8:	18bb      	adds	r3, r7, r2
 8003efa:	1c02      	adds	r2, r0, #0
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	1dbb      	adds	r3, r7, #6
 8003f00:	1c0a      	adds	r2, r1, #0
 8003f02:	801a      	strh	r2, [r3, #0]

	uint8_t readedReg = 0;
 8003f04:	2516      	movs	r5, #22
 8003f06:	197b      	adds	r3, r7, r5
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8003f0c:	2617      	movs	r6, #23
 8003f0e:	19bb      	adds	r3, r7, r6
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]

	//read original register
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr,
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8999      	ldrh	r1, [r3, #12]
 8003f1a:	19bc      	adds	r4, r7, r6
 8003f1c:	197d      	adds	r5, r7, r5
 8003f1e:	230a      	movs	r3, #10
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	2301      	movs	r3, #1
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	002b      	movs	r3, r5
 8003f2a:	f7ff ffa1 	bl	8003e70 <i2cReceive>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	7023      	strb	r3, [r4, #0]
			&readedReg, 1);

	if (state != LSM6DS_STATE_OK)
 8003f32:	19bb      	adds	r3, r7, r6
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <modifyReg+0x60>
		return state;
 8003f3a:	19bb      	adds	r3, r7, r6
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	e02c      	b.n	8003f9a <modifyReg+0xba>

	//clear bits corresponding to mask
	readedReg &= ~(bitmask);
 8003f40:	2009      	movs	r0, #9
 8003f42:	183b      	adds	r3, r7, r0
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b25b      	sxtb	r3, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	2116      	movs	r1, #22
 8003f4e:	187a      	adds	r2, r7, r1
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	b252      	sxtb	r2, r2
 8003f54:	4013      	ands	r3, r2
 8003f56:	b25b      	sxtb	r3, r3
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	701a      	strb	r2, [r3, #0]

	//modify register
	uint8_t regToWrite = readedReg | (bitmask & value);
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	183a      	adds	r2, r7, r0
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	b25a      	sxtb	r2, r3
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	4313      	orrs	r3, r2
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	2415      	movs	r4, #21
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	701a      	strb	r2, [r3, #0]

	//write register
	return i2cSend(&sensor->lsm6dsI2c, sensor->deviceAddr, regAddr, &regToWrite,
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8999      	ldrh	r1, [r3, #12]
 8003f86:	193c      	adds	r4, r7, r4
 8003f88:	230a      	movs	r3, #10
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	881a      	ldrh	r2, [r3, #0]
 8003f8e:	2301      	movs	r3, #1
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	0023      	movs	r3, r4
 8003f94:	f7ff ff34 	bl	8003e00 <i2cSend>
 8003f98:	0003      	movs	r3, r0
			1);

}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b007      	add	sp, #28
 8003fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fa2 <lsm6ds_init>:
 * @param: rxTimeout
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_init(lsm6ds_sensor_t *sensor, uint16_t devAddr,
		I2C_HandleTypeDef *i2c, uint32_t txTimeout, uint32_t rxTimeout) { //port
 8003fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa4:	b089      	sub	sp, #36	@ 0x24
 8003fa6:	af02      	add	r7, sp, #8
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	200a      	movs	r0, #10
 8003fb0:	183b      	adds	r3, r7, r0
 8003fb2:	1c0a      	adds	r2, r1, #0
 8003fb4:	801a      	strh	r2, [r3, #0]

	sensor->deviceAddr = devAddr;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	183a      	adds	r2, r7, r0
 8003fba:	8812      	ldrh	r2, [r2, #0]
 8003fbc:	819a      	strh	r2, [r3, #12]
	sensor->lsm6dsI2c.i2c = i2c;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	601a      	str	r2, [r3, #0]
	sensor->lsm6dsI2c.receiveTimeout = rxTimeout;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fc8:	609a      	str	r2, [r3, #8]
	sensor->lsm6dsI2c.sendTimeout = txTimeout;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	605a      	str	r2, [r3, #4]

	//check communication
	lsm6ds_state_t state = LSM6DS_STATE_ERR;
 8003fd0:	2417      	movs	r4, #23
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
	uint8_t receivedWhoIAm = 0;
 8003fd8:	2616      	movs	r6, #22
 8003fda:	19bb      	adds	r3, r7, r6
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
	state = i2cReceive(&sensor->lsm6dsI2c, sensor->deviceAddr,
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8999      	ldrh	r1, [r3, #12]
 8003fe6:	0025      	movs	r5, r4
 8003fe8:	193c      	adds	r4, r7, r4
 8003fea:	19bb      	adds	r3, r7, r6
 8003fec:	2201      	movs	r2, #1
 8003fee:	9200      	str	r2, [sp, #0]
 8003ff0:	220f      	movs	r2, #15
 8003ff2:	f7ff ff3d 	bl	8003e70 <i2cReceive>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	7023      	strb	r3, [r4, #0]
	LSM6DS_REG_WHO_AM_I, &receivedWhoIAm, 1);
	if (state == LSM6DS_STATE_ERR)
 8003ffa:	197b      	adds	r3, r7, r5
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <lsm6ds_init+0x64>
		return LSM6DS_STATE_ERR_I2C;
 8004002:	2303      	movs	r3, #3
 8004004:	e00f      	b.n	8004026 <lsm6ds_init+0x84>
	else if (state == LSM6DS_STATE_TIMEOUT)
 8004006:	2217      	movs	r2, #23
 8004008:	18bb      	adds	r3, r7, r2
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d102      	bne.n	8004016 <lsm6ds_init+0x74>
		return state;
 8004010:	18bb      	adds	r3, r7, r2
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	e007      	b.n	8004026 <lsm6ds_init+0x84>
	else {
		if (receivedWhoIAm == LSM6DS_WHO_AM_I)
 8004016:	2316      	movs	r3, #22
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b6a      	cmp	r3, #106	@ 0x6a
 800401e:	d101      	bne.n	8004024 <lsm6ds_init+0x82>
			return LSM6DS_STATE_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <lsm6ds_init+0x84>
		else
			return LSM6DS_STATE_WRONG_WHOAMI;
 8004024:	2304      	movs	r3, #4
	}

}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b007      	add	sp, #28
 800402c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800402e <lsm6ds_setAccOutputDataRate>:
 * @param: sensor
 * @param: LSM6DS_ODR_XL_*
 *
 * @retval: status
 */
lsm6ds_state_t lsm6ds_setAccOutputDataRate(lsm6ds_sensor_t *sensor, uint8_t odr) {
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	000a      	movs	r2, r1
 8004038:	1cfb      	adds	r3, r7, #3
 800403a:	701a      	strb	r2, [r3, #0]

	return modifyReg(sensor, LSM6DS_REG_CTRL1_XL, LSM6DS_MASK_ODX_XL, odr);
 800403c:	1cfb      	adds	r3, r7, #3
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	22f0      	movs	r2, #240	@ 0xf0
 8004046:	2110      	movs	r1, #16
 8004048:	f7ff ff4a 	bl	8003ee0 <modifyReg>
 800404c:	0003      	movs	r3, r0

}
 800404e:	0018      	movs	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	b002      	add	sp, #8
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b087      	sub	sp, #28
 800405c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800405e:	f7fc fae5 	bl	800062c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004062:	f000 f869 	bl	8004138 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004066:	f7ff fdb5 	bl	8003bd4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800406a:	f000 f8f5 	bl	8004258 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800406e:	f000 f941 	bl	80042f4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004072:	f7ff fe23 	bl	8003cbc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	lsm6ds_state_t sensorStat = lsm6ds_init(&mems, LSM6DS_ADDR_SA0_L, &hi2c1,
 8004076:	1dfc      	adds	r4, r7, #7
 8004078:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <main+0xbc>)
 800407a:	4827      	ldr	r0, [pc, #156]	@ (8004118 <main+0xc0>)
 800407c:	2364      	movs	r3, #100	@ 0x64
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2364      	movs	r3, #100	@ 0x64
 8004082:	21d4      	movs	r1, #212	@ 0xd4
 8004084:	f7ff ff8d 	bl	8003fa2 <lsm6ds_init>
 8004088:	0003      	movs	r3, r0
 800408a:	7023      	strb	r3, [r4, #0]
			100, 100);

	espAt_init(&bleRadio, &huart1, 50, 2000);
 800408c:	23fa      	movs	r3, #250	@ 0xfa
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4922      	ldr	r1, [pc, #136]	@ (800411c <main+0xc4>)
 8004092:	4823      	ldr	r0, [pc, #140]	@ (8004120 <main+0xc8>)
 8004094:	2232      	movs	r2, #50	@ 0x32
 8004096:	f7ff fa54 	bl	8003542 <espAt_init>

//	espAt_sendCommand(&bleRadio, G_RST);
//	HAL_Delay(2000);

	espAt_sendString(&bleRadio, S_BHN, "bartsHID");
 800409a:	4a22      	ldr	r2, [pc, #136]	@ (8004124 <main+0xcc>)
 800409c:	4922      	ldr	r1, [pc, #136]	@ (8004128 <main+0xd0>)
 800409e:	4b20      	ldr	r3, [pc, #128]	@ (8004120 <main+0xc8>)
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff fc3b 	bl	800391c <espAt_sendString>
	HAL_Delay(200);
 80040a6:	20c8      	movs	r0, #200	@ 0xc8
 80040a8:	f7fc fb46 	bl	8000738 <HAL_Delay>
	espAt_sendParams(&bleRadio, P_BHI, 1, 1);
 80040ac:	491f      	ldr	r1, [pc, #124]	@ (800412c <main+0xd4>)
 80040ae:	481c      	ldr	r0, [pc, #112]	@ (8004120 <main+0xc8>)
 80040b0:	2301      	movs	r3, #1
 80040b2:	2201      	movs	r2, #1
 80040b4:	f7ff fa5a 	bl	800356c <espAt_sendParams>
	HAL_Delay(200);
 80040b8:	20c8      	movs	r0, #200	@ 0xc8
 80040ba:	f7fc fb3d 	bl	8000738 <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		sensorStat = lsm6ds_setAccOutputDataRate(&mems, LSM6DS_ODR_XL_12_5_HZ);
 80040be:	1dfc      	adds	r4, r7, #7
 80040c0:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <main+0xc0>)
 80040c2:	2110      	movs	r1, #16
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff ffb2 	bl	800402e <lsm6ds_setAccOutputDataRate>
 80040ca:	0003      	movs	r3, r0
 80040cc:	7023      	strb	r3, [r4, #0]
		sensorStat = lsm6ds_setAccOutputDataRate(&mems, LSM6DS_ODR_XL_52_HZ);
 80040ce:	1dfc      	adds	r4, r7, #7
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <main+0xc0>)
 80040d2:	2130      	movs	r1, #48	@ 0x30
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff ffaa 	bl	800402e <lsm6ds_setAccOutputDataRate>
 80040da:	0003      	movs	r3, r0
 80040dc:	7023      	strb	r3, [r4, #0]

		if (HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin)
 80040de:	2380      	movs	r3, #128	@ 0x80
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	4a13      	ldr	r2, [pc, #76]	@ (8004130 <main+0xd8>)
 80040e4:	0019      	movs	r1, r3
 80040e6:	0010      	movs	r0, r2
 80040e8:	f7fc fd62 	bl	8000bb0 <HAL_GPIO_ReadPin>
 80040ec:	1e03      	subs	r3, r0, #0
 80040ee:	d10b      	bne.n	8004108 <main+0xb0>
				== GPIO_PIN_RESET) {
			espAt_sendParams(&bleRadio, P_BHM, 4, 0, 1, 0, 0);
 80040f0:	4910      	ldr	r1, [pc, #64]	@ (8004134 <main+0xdc>)
 80040f2:	480b      	ldr	r0, [pc, #44]	@ (8004120 <main+0xc8>)
 80040f4:	2300      	movs	r3, #0
 80040f6:	9302      	str	r3, [sp, #8]
 80040f8:	2300      	movs	r3, #0
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	2301      	movs	r3, #1
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	2204      	movs	r2, #4
 8004104:	f7ff fa32 	bl	800356c <espAt_sendParams>
		}

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		sensorStat++; // no warning workaround
 8004108:	1dfb      	adds	r3, r7, #7
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	1dfb      	adds	r3, r7, #7
 800410e:	3201      	adds	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
		sensorStat = lsm6ds_setAccOutputDataRate(&mems, LSM6DS_ODR_XL_12_5_HZ);
 8004112:	e7d4      	b.n	80040be <main+0x66>
 8004114:	2000002c 	.word	0x2000002c
 8004118:	2000008c 	.word	0x2000008c
 800411c:	2000009c 	.word	0x2000009c
 8004120:	20000080 	.word	0x20000080
 8004124:	0800466c 	.word	0x0800466c
 8004128:	08004678 	.word	0x08004678
 800412c:	08004684 	.word	0x08004684
 8004130:	50000800 	.word	0x50000800
 8004134:	08004690 	.word	0x08004690

08004138 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b093      	sub	sp, #76	@ 0x4c
 800413c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800413e:	2410      	movs	r4, #16
 8004140:	193b      	adds	r3, r7, r4
 8004142:	0018      	movs	r0, r3
 8004144:	2338      	movs	r3, #56	@ 0x38
 8004146:	001a      	movs	r2, r3
 8004148:	2100      	movs	r1, #0
 800414a:	f000 fa45 	bl	80045d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800414e:	003b      	movs	r3, r7
 8004150:	0018      	movs	r0, r3
 8004152:	2310      	movs	r3, #16
 8004154:	001a      	movs	r2, r3
 8004156:	2100      	movs	r1, #0
 8004158:	f000 fa3e 	bl	80045d8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800415c:	2380      	movs	r3, #128	@ 0x80
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	0018      	movs	r0, r3
 8004162:	f7fd fbfb 	bl	800195c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004166:	193b      	adds	r3, r7, r4
 8004168:	2202      	movs	r2, #2
 800416a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800416c:	193b      	adds	r3, r7, r4
 800416e:	2280      	movs	r2, #128	@ 0x80
 8004170:	0052      	lsls	r2, r2, #1
 8004172:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004174:	193b      	adds	r3, r7, r4
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800417a:	193b      	adds	r3, r7, r4
 800417c:	2240      	movs	r2, #64	@ 0x40
 800417e:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004180:	193b      	adds	r3, r7, r4
 8004182:	2200      	movs	r2, #0
 8004184:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004186:	193b      	adds	r3, r7, r4
 8004188:	0018      	movs	r0, r3
 800418a:	f7fd fc33 	bl	80019f4 <HAL_RCC_OscConfig>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d001      	beq.n	8004196 <SystemClock_Config+0x5e>
		Error_Handler();
 8004192:	f000 f819 	bl	80041c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004196:	003b      	movs	r3, r7
 8004198:	2207      	movs	r2, #7
 800419a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800419c:	003b      	movs	r3, r7
 800419e:	2200      	movs	r2, #0
 80041a0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041a2:	003b      	movs	r3, r7
 80041a4:	2200      	movs	r2, #0
 80041a6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041a8:	003b      	movs	r3, r7
 80041aa:	2200      	movs	r2, #0
 80041ac:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80041ae:	003b      	movs	r3, r7
 80041b0:	2100      	movs	r1, #0
 80041b2:	0018      	movs	r0, r3
 80041b4:	f7fd ff38 	bl	8002028 <HAL_RCC_ClockConfig>
 80041b8:	1e03      	subs	r3, r0, #0
 80041ba:	d001      	beq.n	80041c0 <SystemClock_Config+0x88>
		Error_Handler();
 80041bc:	f000 f804 	bl	80041c8 <Error_Handler>
	}
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b013      	add	sp, #76	@ 0x4c
 80041c6:	bd90      	pop	{r4, r7, pc}

080041c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80041cc:	b672      	cpsid	i
}
 80041ce:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80041d0:	46c0      	nop			@ (mov r8, r8)
 80041d2:	e7fd      	b.n	80041d0 <Error_Handler+0x8>

080041d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041da:	4b0f      	ldr	r3, [pc, #60]	@ (8004218 <HAL_MspInit+0x44>)
 80041dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041de:	4b0e      	ldr	r3, [pc, #56]	@ (8004218 <HAL_MspInit+0x44>)
 80041e0:	2101      	movs	r1, #1
 80041e2:	430a      	orrs	r2, r1
 80041e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80041e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <HAL_MspInit+0x44>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2201      	movs	r2, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <HAL_MspInit+0x44>)
 80041f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041f6:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <HAL_MspInit+0x44>)
 80041f8:	2180      	movs	r1, #128	@ 0x80
 80041fa:	0549      	lsls	r1, r1, #21
 80041fc:	430a      	orrs	r2, r1
 80041fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_MspInit+0x44>)
 8004202:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004204:	2380      	movs	r3, #128	@ 0x80
 8004206:	055b      	lsls	r3, r3, #21
 8004208:	4013      	ands	r3, r2
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b002      	add	sp, #8
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	40021000 	.word	0x40021000

0800421c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004220:	46c0      	nop			@ (mov r8, r8)
 8004222:	e7fd      	b.n	8004220 <NMI_Handler+0x4>

08004224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004228:	46c0      	nop			@ (mov r8, r8)
 800422a:	e7fd      	b.n	8004228 <HardFault_Handler+0x4>

0800422c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004230:	46c0      	nop			@ (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004244:	f7fc fa5c 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004248:	46c0      	nop			@ (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800425c:	4b23      	ldr	r3, [pc, #140]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 800425e:	4a24      	ldr	r2, [pc, #144]	@ (80042f0 <MX_USART1_UART_Init+0x98>)
 8004260:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004262:	4b22      	ldr	r3, [pc, #136]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 8004264:	22e1      	movs	r2, #225	@ 0xe1
 8004266:	0252      	lsls	r2, r2, #9
 8004268:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800426a:	4b20      	ldr	r3, [pc, #128]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004270:	4b1e      	ldr	r3, [pc, #120]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 8004272:	2200      	movs	r2, #0
 8004274:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004276:	4b1d      	ldr	r3, [pc, #116]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 8004278:	2200      	movs	r2, #0
 800427a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800427c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 800427e:	220c      	movs	r2, #12
 8004280:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004282:	4b1a      	ldr	r3, [pc, #104]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 8004284:	2200      	movs	r2, #0
 8004286:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004288:	4b18      	ldr	r3, [pc, #96]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 800428a:	2200      	movs	r2, #0
 800428c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800428e:	4b17      	ldr	r3, [pc, #92]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 8004290:	2200      	movs	r2, #0
 8004292:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004294:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 8004296:	2200      	movs	r2, #0
 8004298:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800429a:	4b14      	ldr	r3, [pc, #80]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 800429c:	2200      	movs	r2, #0
 800429e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042a0:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7fe fa22 	bl	80026ec <HAL_UART_Init>
 80042a8:	1e03      	subs	r3, r0, #0
 80042aa:	d001      	beq.n	80042b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80042ac:	f7ff ff8c 	bl	80041c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042b0:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 80042b2:	2100      	movs	r1, #0
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7ff f83f 	bl	8003338 <HAL_UARTEx_SetTxFifoThreshold>
 80042ba:	1e03      	subs	r3, r0, #0
 80042bc:	d001      	beq.n	80042c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80042be:	f7ff ff83 	bl	80041c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042c2:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 80042c4:	2100      	movs	r1, #0
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7ff f876 	bl	80033b8 <HAL_UARTEx_SetRxFifoThreshold>
 80042cc:	1e03      	subs	r3, r0, #0
 80042ce:	d001      	beq.n	80042d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80042d0:	f7ff ff7a 	bl	80041c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <MX_USART1_UART_Init+0x94>)
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7fe fff4 	bl	80032c4 <HAL_UARTEx_DisableFifoMode>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042e0:	f7ff ff72 	bl	80041c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	2000009c 	.word	0x2000009c
 80042f0:	40013800 	.word	0x40013800

080042f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042f8:	4b23      	ldr	r3, [pc, #140]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 80042fa:	4a24      	ldr	r2, [pc, #144]	@ (800438c <MX_USART2_UART_Init+0x98>)
 80042fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80042fe:	4b22      	ldr	r3, [pc, #136]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 8004300:	22e1      	movs	r2, #225	@ 0xe1
 8004302:	0252      	lsls	r2, r2, #9
 8004304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004306:	4b20      	ldr	r3, [pc, #128]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 8004308:	2200      	movs	r2, #0
 800430a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800430c:	4b1e      	ldr	r3, [pc, #120]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 800430e:	2200      	movs	r2, #0
 8004310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004312:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 8004314:	2200      	movs	r2, #0
 8004316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004318:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 800431a:	220c      	movs	r2, #12
 800431c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800431e:	4b1a      	ldr	r3, [pc, #104]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004324:	4b18      	ldr	r3, [pc, #96]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 8004326:	2200      	movs	r2, #0
 8004328:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800432a:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 800432c:	2200      	movs	r2, #0
 800432e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004330:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 8004332:	2200      	movs	r2, #0
 8004334:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004336:	4b14      	ldr	r3, [pc, #80]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 8004338:	2200      	movs	r2, #0
 800433a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800433c:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 800433e:	0018      	movs	r0, r3
 8004340:	f7fe f9d4 	bl	80026ec <HAL_UART_Init>
 8004344:	1e03      	subs	r3, r0, #0
 8004346:	d001      	beq.n	800434c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004348:	f7ff ff3e 	bl	80041c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800434c:	4b0e      	ldr	r3, [pc, #56]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 800434e:	2100      	movs	r1, #0
 8004350:	0018      	movs	r0, r3
 8004352:	f7fe fff1 	bl	8003338 <HAL_UARTEx_SetTxFifoThreshold>
 8004356:	1e03      	subs	r3, r0, #0
 8004358:	d001      	beq.n	800435e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800435a:	f7ff ff35 	bl	80041c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800435e:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 8004360:	2100      	movs	r1, #0
 8004362:	0018      	movs	r0, r3
 8004364:	f7ff f828 	bl	80033b8 <HAL_UARTEx_SetRxFifoThreshold>
 8004368:	1e03      	subs	r3, r0, #0
 800436a:	d001      	beq.n	8004370 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800436c:	f7ff ff2c 	bl	80041c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <MX_USART2_UART_Init+0x94>)
 8004372:	0018      	movs	r0, r3
 8004374:	f7fe ffa6 	bl	80032c4 <HAL_UARTEx_DisableFifoMode>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d001      	beq.n	8004380 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800437c:	f7ff ff24 	bl	80041c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004380:	46c0      	nop			@ (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	20000130 	.word	0x20000130
 800438c:	40004400 	.word	0x40004400

08004390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b099      	sub	sp, #100	@ 0x64
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004398:	234c      	movs	r3, #76	@ 0x4c
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	0018      	movs	r0, r3
 800439e:	2314      	movs	r3, #20
 80043a0:	001a      	movs	r2, r3
 80043a2:	2100      	movs	r1, #0
 80043a4:	f000 f918 	bl	80045d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043a8:	2418      	movs	r4, #24
 80043aa:	193b      	adds	r3, r7, r4
 80043ac:	0018      	movs	r0, r3
 80043ae:	2334      	movs	r3, #52	@ 0x34
 80043b0:	001a      	movs	r2, r3
 80043b2:	2100      	movs	r1, #0
 80043b4:	f000 f910 	bl	80045d8 <memset>
  if(uartHandle->Instance==USART1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a45      	ldr	r2, [pc, #276]	@ (80044d4 <HAL_UART_MspInit+0x144>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d13e      	bne.n	8004440 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80043c2:	193b      	adds	r3, r7, r4
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80043c8:	193b      	adds	r3, r7, r4
 80043ca:	2200      	movs	r2, #0
 80043cc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043ce:	193b      	adds	r3, r7, r4
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7fd ffd3 	bl	800237c <HAL_RCCEx_PeriphCLKConfig>
 80043d6:	1e03      	subs	r3, r0, #0
 80043d8:	d001      	beq.n	80043de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80043da:	f7ff fef5 	bl	80041c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043de:	4b3e      	ldr	r3, [pc, #248]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 80043e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043e2:	4b3d      	ldr	r3, [pc, #244]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 80043e4:	2180      	movs	r1, #128	@ 0x80
 80043e6:	01c9      	lsls	r1, r1, #7
 80043e8:	430a      	orrs	r2, r1
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80043ec:	4b3a      	ldr	r3, [pc, #232]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 80043ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	01db      	lsls	r3, r3, #7
 80043f4:	4013      	ands	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fa:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 80043fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043fe:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 8004400:	2104      	movs	r1, #4
 8004402:	430a      	orrs	r2, r1
 8004404:	635a      	str	r2, [r3, #52]	@ 0x34
 8004406:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 8004408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440a:	2204      	movs	r2, #4
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8004412:	214c      	movs	r1, #76	@ 0x4c
 8004414:	187b      	adds	r3, r7, r1
 8004416:	2230      	movs	r2, #48	@ 0x30
 8004418:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441a:	187b      	adds	r3, r7, r1
 800441c:	2202      	movs	r2, #2
 800441e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	187b      	adds	r3, r7, r1
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004426:	187b      	adds	r3, r7, r1
 8004428:	2200      	movs	r2, #0
 800442a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800442c:	187b      	adds	r3, r7, r1
 800442e:	2201      	movs	r2, #1
 8004430:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004432:	187b      	adds	r3, r7, r1
 8004434:	4a29      	ldr	r2, [pc, #164]	@ (80044dc <HAL_UART_MspInit+0x14c>)
 8004436:	0019      	movs	r1, r3
 8004438:	0010      	movs	r0, r2
 800443a:	f7fc fa55 	bl	80008e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800443e:	e044      	b.n	80044ca <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a26      	ldr	r2, [pc, #152]	@ (80044e0 <HAL_UART_MspInit+0x150>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d13f      	bne.n	80044ca <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800444a:	2118      	movs	r1, #24
 800444c:	187b      	adds	r3, r7, r1
 800444e:	2202      	movs	r2, #2
 8004450:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004452:	187b      	adds	r3, r7, r1
 8004454:	2200      	movs	r2, #0
 8004456:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004458:	187b      	adds	r3, r7, r1
 800445a:	0018      	movs	r0, r3
 800445c:	f7fd ff8e 	bl	800237c <HAL_RCCEx_PeriphCLKConfig>
 8004460:	1e03      	subs	r3, r0, #0
 8004462:	d001      	beq.n	8004468 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8004464:	f7ff feb0 	bl	80041c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004468:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 800446a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800446c:	4b1a      	ldr	r3, [pc, #104]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 800446e:	2180      	movs	r1, #128	@ 0x80
 8004470:	0289      	lsls	r1, r1, #10
 8004472:	430a      	orrs	r2, r1
 8004474:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004476:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 8004478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800447a:	2380      	movs	r3, #128	@ 0x80
 800447c:	029b      	lsls	r3, r3, #10
 800447e:	4013      	ands	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004484:	4b14      	ldr	r3, [pc, #80]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 8004486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004488:	4b13      	ldr	r3, [pc, #76]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 800448a:	2101      	movs	r1, #1
 800448c:	430a      	orrs	r2, r1
 800448e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004490:	4b11      	ldr	r3, [pc, #68]	@ (80044d8 <HAL_UART_MspInit+0x148>)
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	2201      	movs	r2, #1
 8004496:	4013      	ands	r3, r2
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800449c:	214c      	movs	r1, #76	@ 0x4c
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	220c      	movs	r2, #12
 80044a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a4:	187b      	adds	r3, r7, r1
 80044a6:	2202      	movs	r2, #2
 80044a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	187b      	adds	r3, r7, r1
 80044ac:	2200      	movs	r2, #0
 80044ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	2200      	movs	r2, #0
 80044b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80044b6:	187b      	adds	r3, r7, r1
 80044b8:	2201      	movs	r2, #1
 80044ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044bc:	187a      	adds	r2, r7, r1
 80044be:	23a0      	movs	r3, #160	@ 0xa0
 80044c0:	05db      	lsls	r3, r3, #23
 80044c2:	0011      	movs	r1, r2
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7fc fa0f 	bl	80008e8 <HAL_GPIO_Init>
}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b019      	add	sp, #100	@ 0x64
 80044d0:	bd90      	pop	{r4, r7, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40021000 	.word	0x40021000
 80044dc:	50000800 	.word	0x50000800
 80044e0:	40004400 	.word	0x40004400

080044e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044e4:	480d      	ldr	r0, [pc, #52]	@ (800451c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80044e8:	f7ff feb1 	bl	800424e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044ec:	480c      	ldr	r0, [pc, #48]	@ (8004520 <LoopForever+0x6>)
  ldr r1, =_edata
 80044ee:	490d      	ldr	r1, [pc, #52]	@ (8004524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004528 <LoopForever+0xe>)
  movs r3, #0
 80044f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044f4:	e002      	b.n	80044fc <LoopCopyDataInit>

080044f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044fa:	3304      	adds	r3, #4

080044fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004500:	d3f9      	bcc.n	80044f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004502:	4a0a      	ldr	r2, [pc, #40]	@ (800452c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004504:	4c0a      	ldr	r4, [pc, #40]	@ (8004530 <LoopForever+0x16>)
  movs r3, #0
 8004506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004508:	e001      	b.n	800450e <LoopFillZerobss>

0800450a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800450a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800450c:	3204      	adds	r2, #4

0800450e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800450e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004510:	d3fb      	bcc.n	800450a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004512:	f000 f869 	bl	80045e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004516:	f7ff fd9f 	bl	8004058 <main>

0800451a <LoopForever>:

LoopForever:
  b LoopForever
 800451a:	e7fe      	b.n	800451a <LoopForever>
  ldr   r0, =_estack
 800451c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004524:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004528:	0800475c 	.word	0x0800475c
  ldr r2, =_sbss
 800452c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004530:	200001c4 	.word	0x200001c4

08004534 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004534:	e7fe      	b.n	8004534 <ADC1_COMP_IRQHandler>

08004536 <__itoa>:
 8004536:	1e93      	subs	r3, r2, #2
 8004538:	b510      	push	{r4, lr}
 800453a:	000c      	movs	r4, r1
 800453c:	2b22      	cmp	r3, #34	@ 0x22
 800453e:	d904      	bls.n	800454a <__itoa+0x14>
 8004540:	2300      	movs	r3, #0
 8004542:	001c      	movs	r4, r3
 8004544:	700b      	strb	r3, [r1, #0]
 8004546:	0020      	movs	r0, r4
 8004548:	bd10      	pop	{r4, pc}
 800454a:	2a0a      	cmp	r2, #10
 800454c:	d109      	bne.n	8004562 <__itoa+0x2c>
 800454e:	2800      	cmp	r0, #0
 8004550:	da07      	bge.n	8004562 <__itoa+0x2c>
 8004552:	232d      	movs	r3, #45	@ 0x2d
 8004554:	700b      	strb	r3, [r1, #0]
 8004556:	2101      	movs	r1, #1
 8004558:	4240      	negs	r0, r0
 800455a:	1861      	adds	r1, r4, r1
 800455c:	f000 f808 	bl	8004570 <__utoa>
 8004560:	e7f1      	b.n	8004546 <__itoa+0x10>
 8004562:	2100      	movs	r1, #0
 8004564:	e7f9      	b.n	800455a <__itoa+0x24>

08004566 <itoa>:
 8004566:	b510      	push	{r4, lr}
 8004568:	f7ff ffe5 	bl	8004536 <__itoa>
 800456c:	bd10      	pop	{r4, pc}
	...

08004570 <__utoa>:
 8004570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004572:	000c      	movs	r4, r1
 8004574:	0016      	movs	r6, r2
 8004576:	b08d      	sub	sp, #52	@ 0x34
 8004578:	2225      	movs	r2, #37	@ 0x25
 800457a:	0007      	movs	r7, r0
 800457c:	4915      	ldr	r1, [pc, #84]	@ (80045d4 <__utoa+0x64>)
 800457e:	a802      	add	r0, sp, #8
 8004580:	f000 f856 	bl	8004630 <memcpy>
 8004584:	1e62      	subs	r2, r4, #1
 8004586:	1eb3      	subs	r3, r6, #2
 8004588:	2500      	movs	r5, #0
 800458a:	9201      	str	r2, [sp, #4]
 800458c:	2b22      	cmp	r3, #34	@ 0x22
 800458e:	d904      	bls.n	800459a <__utoa+0x2a>
 8004590:	7025      	strb	r5, [r4, #0]
 8004592:	002c      	movs	r4, r5
 8004594:	0020      	movs	r0, r4
 8004596:	b00d      	add	sp, #52	@ 0x34
 8004598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459a:	0038      	movs	r0, r7
 800459c:	0031      	movs	r1, r6
 800459e:	f7fb fe3f 	bl	8000220 <__aeabi_uidivmod>
 80045a2:	000b      	movs	r3, r1
 80045a4:	aa02      	add	r2, sp, #8
 80045a6:	5cd3      	ldrb	r3, [r2, r3]
 80045a8:	9a01      	ldr	r2, [sp, #4]
 80045aa:	0029      	movs	r1, r5
 80045ac:	3501      	adds	r5, #1
 80045ae:	5553      	strb	r3, [r2, r5]
 80045b0:	003b      	movs	r3, r7
 80045b2:	0007      	movs	r7, r0
 80045b4:	429e      	cmp	r6, r3
 80045b6:	d9f0      	bls.n	800459a <__utoa+0x2a>
 80045b8:	2300      	movs	r3, #0
 80045ba:	0022      	movs	r2, r4
 80045bc:	5563      	strb	r3, [r4, r5]
 80045be:	000b      	movs	r3, r1
 80045c0:	1ac8      	subs	r0, r1, r3
 80045c2:	4283      	cmp	r3, r0
 80045c4:	dde6      	ble.n	8004594 <__utoa+0x24>
 80045c6:	7810      	ldrb	r0, [r2, #0]
 80045c8:	5ce5      	ldrb	r5, [r4, r3]
 80045ca:	7015      	strb	r5, [r2, #0]
 80045cc:	54e0      	strb	r0, [r4, r3]
 80045ce:	3201      	adds	r2, #1
 80045d0:	3b01      	subs	r3, #1
 80045d2:	e7f5      	b.n	80045c0 <__utoa+0x50>
 80045d4:	08004724 	.word	0x08004724

080045d8 <memset>:
 80045d8:	0003      	movs	r3, r0
 80045da:	1882      	adds	r2, r0, r2
 80045dc:	4293      	cmp	r3, r2
 80045de:	d100      	bne.n	80045e2 <memset+0xa>
 80045e0:	4770      	bx	lr
 80045e2:	7019      	strb	r1, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	e7f9      	b.n	80045dc <memset+0x4>

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	2600      	movs	r6, #0
 80045ec:	4c0c      	ldr	r4, [pc, #48]	@ (8004620 <__libc_init_array+0x38>)
 80045ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004624 <__libc_init_array+0x3c>)
 80045f0:	1b64      	subs	r4, r4, r5
 80045f2:	10a4      	asrs	r4, r4, #2
 80045f4:	42a6      	cmp	r6, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	2600      	movs	r6, #0
 80045fa:	f000 f823 	bl	8004644 <_init>
 80045fe:	4c0a      	ldr	r4, [pc, #40]	@ (8004628 <__libc_init_array+0x40>)
 8004600:	4d0a      	ldr	r5, [pc, #40]	@ (800462c <__libc_init_array+0x44>)
 8004602:	1b64      	subs	r4, r4, r5
 8004604:	10a4      	asrs	r4, r4, #2
 8004606:	42a6      	cmp	r6, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	00b3      	lsls	r3, r6, #2
 800460e:	58eb      	ldr	r3, [r5, r3]
 8004610:	4798      	blx	r3
 8004612:	3601      	adds	r6, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	00b3      	lsls	r3, r6, #2
 8004618:	58eb      	ldr	r3, [r5, r3]
 800461a:	4798      	blx	r3
 800461c:	3601      	adds	r6, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	08004754 	.word	0x08004754
 8004624:	08004754 	.word	0x08004754
 8004628:	08004758 	.word	0x08004758
 800462c:	08004754 	.word	0x08004754

08004630 <memcpy>:
 8004630:	2300      	movs	r3, #0
 8004632:	b510      	push	{r4, lr}
 8004634:	429a      	cmp	r2, r3
 8004636:	d100      	bne.n	800463a <memcpy+0xa>
 8004638:	bd10      	pop	{r4, pc}
 800463a:	5ccc      	ldrb	r4, [r1, r3]
 800463c:	54c4      	strb	r4, [r0, r3]
 800463e:	3301      	adds	r3, #1
 8004640:	e7f8      	b.n	8004634 <memcpy+0x4>
	...

08004644 <_init>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr

08004650 <_fini>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr
